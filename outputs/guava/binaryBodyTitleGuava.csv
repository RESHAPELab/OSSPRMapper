pr;DB;Interpreter;Logging;Thread;Data Structure;DevOps;i18n;Logic;Microservices;ML;Test;Search;IO;UI;Parser;Security;Cloud;Big Data;App;GIS;Util;NLP;APM;Network;Title;Body;prIssue;issue;issueTitle;issueBody;issueComments;issueTitleLink;issueBodyLink;issueCommentsLink;isPR;isTrain;commitMessage;Comments
2942;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;propagate close for to the inputs of streamszip and streamsmapwithindex-------------created by moe: https://githubcom/google/moemoe_migrated_revid169073180;
3050;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo in immutablebimaptest.  2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> correct a typo in immutablebimaptest2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;;;;1;1;correct a typo in immutablebimaptest-------------created by moe: https://githubcom/google/moemoe_migrated_revid187268361;
3056;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> traverser.java: add support for multiple start nodes.  update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashcode().  relnotes= common.graph.traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> fix list<foo<?>>.issubtypeof(list<foo<?>>).  this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter  turning it into foo<c>  and then list<foo<c>> isn t a subtype of list<foo<?>>.  wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). but for resolving in covariant context  wildcard should remain as is.  i found this when trying to add issubtypeof() precondition check in getsubtype()  in response to   relnotes=typetoken.issubtypeof() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> add issubtypeof()  pre -condition check before getsubtype() returns.  we have to call it before return because before type variable substitution  issubtypeof() can t apply.  see   relnotes=validate  typetoken.getsubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> traverserjava: add support for multiple start nodesupdate documentation (in this file and in graphs_explainedmd) relating to behavior and definitions of equals() and hashcode()relnotes`commongraphtraverser`: add support for traversing from multiple start nodes9dce1c3302ec118f73921c9319e7822114325a2d-------<p> fix list<foo<?>>issubtypeof(list<foo<?>>)this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter turning it into foo<c> and then list<foo<c>> isnt a subtype of list<foo<?>>wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters) but for resolving in covariant context wildcard should remain as isi found this when trying to add issubtypeof() precondition check in getsubtype() in response to  bug fix9918890013cd07ff00074a28afefd3af2c00c515-------<p> add issubtypeof() ""pre""-condition check before getsubtype() returnswe have to call it before return because before type variable substitution issubtypeof() cant applysee  `typetokengetsubtype()`f6d1461e2579f05f1106892c817681a61fc401ae";;;;;1;1;"add issubtypeof() ""pre""-condition check before getsubtype() returnswe have to call it before return because before type variable substitution issubtypeof() cant applysee  `typetokengetsubtype()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid187777105";
3057;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change all instances of encoded.subsequence() to use a simple start index offset  which reduces the java memory footprint for trieparser by at at least 130 mbs. this is because the original call to subsequence() would generate a new string on the heap for each call  where as just using an offset avoids the need to generate a new string all together.  this memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.outofmemoryerror: gc overhead limit exceeded  mostly in the trieparser class.  100-test runs at original code: memory usage - maximum: 503mib (527 769 600 bytes) - average: 388mib (407 225 077 bytes)  100-test runs with my changes: memory usage - maximum: 316mib (325 271 552 bytes) - average: 221mib (239 355 320 bytes)  at maximum: 187 mb saved at average: 167 mb saved  relnotes=reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change all instances of encodedsubsequence() to use a simple start index offset which reduces the java memory footprint for trieparser by at at least 130 mbs this is because the original call to subsequence() would generate a new string on the heap for each call where as just using an offset avoids the need to generate a new string all togetherthis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: javalangoutofmemoryerror: gc overhead limit exceeded mostly in the trieparser class100-test runs at original code:memory usage- maximum: 503mib (527769600 bytes)- average: 388mib (407225077 bytes)100-test runs with my changes:memory usage- maximum: 316mib (325271552 bytes)- average: 221mib (239355320 bytes)at maximum: 187 mb savedat average: 167 mb savedrelnotesreduced heap memory usage when parsing domain names521c77000b665d5077524842cc0902583015043f;;;;;1;1;change all instances of encodedsubsequence() to use a simple start index offset which reduces the java memory footprint for trieparser by at at least 130 mbs this is because the original call to subsequence() would generate a new string on the heap for each call where as just using an offset avoids the need to generate a new string all togetherthis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: javalangoutofmemoryerror: gc overhead limit exceeded mostly in the trieparser class100-test runs at original code:memory usage- maximum: 503mib (527769600 bytes)- average: 388mib (407225077 bytes)100-test runs with my changes:memory usage- maximum: 316mib (325271552 bytes)- average: 221mib (239355320 bytes)at maximum: 187 mb savedat average: 167 mb savedrelnotesreduced heap memory usage when parsing domain names-------------created by moe: https://githubcom/google/moemoe_migrated_revid188111053;
3070;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add x-download-options header (ie8 header to control the  open  button on the download dialog).  relnotes=defined an [x-download-options]( header  b3acfc69329e40befab52f50a5ee66e37ad9f602;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add x-download-options header (ie8 header to control the ""open"" button on the download dialog)relnotesdefined an [x-download-options]( headerb3acfc69329e40befab52f50a5ee66e37ad9f602";;;;;1;1;"add x-download-options header (ie8 header to control the ""open"" button on the download dialog)relnotesdefined an [x-download-options]( header-------------created by moe: https://githubcom/google/moemoe_migrated_revid188866409";
3074;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> in ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> in ascii define a constant for the character case bitmask and use it in place of 0x20 and 0x5f throughout the classc58f51bd68f89cd6119131a256e9de9d0f02b45f;;;;;1;1;in ascii define a constant for the character case bitmask and use it in place of 0x20 and 0x5f throughout the classrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid189264305;
3077;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make bytesource.read() use sizeifknown()  if available  to help avoid extra byte array allocations/copies.  also don t use 32 as the initial bytearrayoutputstream size in either version of bytestreams.tobytearray()  just seems way too small. use the default size for buffers instead  at a minimum.  also change concatenatedbytesource.sizeifknown() to return absent if its iterable of sources is not a collection  this is to prevent sizeifknown() trying to loop over an infinite iterable  which previous caused an infinite loop. that is also fixed in this cl  concatenatedbytesource.size() and sizeifknown() now stop and return long.max_value if the result would exceed that rather than going negative and continuing. but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeifknown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> set serialversionuid in typetoken.java  relnotes=add a  serialversionuid  to  typetoken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> make bytesourceread() use sizeifknown() if available to help avoid extra byte array allocations/copiesalso dont use 32 as the initial bytearrayoutputstream size in either version of bytestreamstobytearray() just seems way too small use the default size for buffers instead at a minimumalso change concatenatedbytesourcesizeifknown() to return absent if its iterable of sources is not a collection this is to prevent sizeifknown() trying to loop over an infinite iterable which previous caused an infinite loop that is also  in this cl concatenatedbytesourcesize() and sizeifknown() now stop and return longmax_value if the result would exceed that rather than going negative and continuing but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop and as such against the spirit of sizeifknown() which should be fast27d33d4fd1bbbf6f5aacd8835633943da33300a3-------<p> stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it47530cebb974612862c1e0f12e304ae1773ca9ce-------<p> set serialversionuid in typetokenjavarelnotesadd a `serialversionuid` to `typetoken`dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;;;;1;1;set serialversionuid in typetokenjavarelnotesadd a `serialversionuid` to `typetoken`-------------created by moe: https://githubcom/google/moemoe_migrated_revid189785498;
3079;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** reason for rollback ***  causing outofmemoryerror in some tests.  *** original change description ***  stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128*** reason for rollback ***causing outofmemoryerror in some tests*** original change description ***stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it***8e341060fcef24921ecc5a079c256b184ca164f2;;;;;1;1;automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128*** reason for rollback ***causing outofmemoryerror in some tests*** original change description ***stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it***relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid189797802;
3080;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hashbimap: unnecessary call to rehashifnecessary  closes   532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> hashbimap: unnecessary call to rehashifnecessarycloses  stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it(roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are )e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it(roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are )relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid190008826;
3087;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> supersource nulltoempty and emptytonull in strings.java to native js.  this allows us to improve performance in docs/xplat code that uses those methods.  relnotes=gwt: supersource  strings.nulltoempty()  and  strings.emptytonull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> open source refactorings directory.  this is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> supersource nulltoempty and emptytonull in stringsjava to native jsthis allows us to improve performance in docs/xplat code that uses those methodsrelnotesgwt: supersource `stringsnulltoempty()` and `stringsemptytonull()`1850b425de37bf017b0fc57dd02e9de3302b08dc-------<p> open source refactorings directory  this is knowingly very simple without yet documentation or many refactorings its a prototype first694060c9ab57a299607f025902ff920fcd438f25-------<p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9ae891f29a5ccba8ef90a6733dc26be22eca3426b;;;;;1;1;ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid190513510;
3097;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix   a446dd1890a324769ef7dc829052d5118e053abb;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix https://githubcom/google/guava/issues/3081a446dd1890a324769ef7dc829052d5118e053abb;;;;;1;1;fix  by moe: https://githubcom/google/moemoe_migrated_revid190674741;
3103;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> slightly discourage the use of the <long  timeunit> overloads on cachebuilder.  babed10eeb8bc5571bdebecec94d48eb3b4748e8  -------  <p> fix tests that failed if we couldn t recursively delete securely by using jimfs and just getting rid of the whole file system each time.  fixes   1974d26799780c448ef72c09eee2201dc7812fbb  -------  <p> fix typo in future javadoc.  7416b725e7a657cd215783651984217aad0840cc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> slightly discourage the use of the <long timeunit> overloads on cachebuilderbabed10eeb8bc5571bdebecec94d48eb3b4748e8-------<p> fix tests that failed if we couldnt recursively delete securely by using jimfs and just getting rid of the whole file system each timefixes  fix typo in future javadoc7416b725e7a657cd215783651984217aad0840cc;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;fix typo in future javadocrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid191789473;
3109;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    3c3aedeb600306c689655fc8ca950f662cada625;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunctiond7874ed808bad3031796854432c39358894eff08-------<p> update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id6104953c3aedeb600306c689655fc8ca950f662cada625;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid192451340;
3117;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422;;3107.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring of nonserializablememoizingsupplier31079185822ee16cdd641657c0f8e7ead755c9e9a564-------<p> use splitter instead of stringsplit in internetdomainnamee56f1aa3d21b04eed8f5481d4103c05af5c51ec7-------<p> use splitter for ipv6 too this eliminates usage of javautilregex from this file (which is used via stringsplit otherwise)65a2a7de4ef4eea913f769a5cbbce6e35e1fccce-------<p> use diamond27eb336c2a2d9068878edbf49edcca493cd69cd8-------<p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174eit looks like the original change can cause an infinite loop in localcacheloadingvaluereferenceget()c2266a6ff8c6f298673688d6779b8b7368fe9147-------<p> dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addresses263bbcf6cf0cfae6768ddf9e9f3d749da555e422;    <!-- cla_yes --> || cla verified in #3107 ||;fix tostring of nonserializablememoizingsupplier;delegate is set to null once the value has been computed but is still referenced by the tostring method when its null use the value instead;first solution i thought of ||;1;0;dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addressesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193371483;
3121;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adding a new (initially internal  pending api review) static factory to striped.  this allows for custom lock injection  which might be useful for cases not covered by the currently existing factories. with this  striped<lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adding a new (initially internal pending api review) static factory to stripedthis allows for custom lock injection which might be useful for cases not covered by the currently existing factories with this striped<lock> with fair sync is possible69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;;;;1;1;adding a new (initially internal pending api review) static factory to stripedthis allows for custom lock injection which might be useful for cases not covered by the currently existing factories with this striped<lock> with fair sync is possiblerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193545335;
3125;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> strip @donotmock annotations  relnotes=n/a  88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> strip @donotmock annotationsrelnotesn/a88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;;;;1;1;strip @donotmock annotationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193962447;
3130;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use @safevarargs annotation for sets.cartesianproduct().  fixes  fixes   63a2f5a3928b64f9892f9751269ad1e27a718162;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use @safevarargs annotation for setscartesianproduct()fixes  https://githubcom/google/guava/issues/272463a2f5a3928b64f9892f9751269ad1e27a718162;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  i am ok with changes! || @ronshapiro can you please tell me how i can make googlebot happy by informing that i am ok with changes in this pr? || oh id missed the message that the cla bot wont change its status so were all set here ;;;;1;1;use @safevarargs annotation for setscartesianproduct()fixes   by moe: https://githubcom/google/moemoe_migrated_revid194451754;
3132;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a few formatting nits  relnotes=n/a  6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a few formatting nitsrelnotesn/a6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;;;;1;1;fix a few formatting nitsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid195263207;
3139;1;1;0;1;0;0;1;1;0;0;1;0;1;1;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> support type annotations in nullpointertester  relnotes=n/a  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> continue type annotation preparations in nullpointertester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> add token binding  header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> use the type annotation version of @nullable in the java 8 branch  relnotes=use the type annotation version of @nullable in the java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> support type annotations in nullpointertesterrelnotesn/afeefa807349f68c90589aca91d121ba2991fe7f5-------<p> continue type annotation preparations in nullpointertester9f4014505d9d368f4fbd607586b7349081e3b021-------<p> add token binding  header names to header libraries5406f50eb39519a00062ab1e0cf5b1ac0ef76e80-------<p> use the type annotation version of @nullable in the java 8 branchrelnotesuse the type annotation version of @nullable in the java 8 branchdaa53ccf373aedee90abbceb3a33c2355d189e5c;;;;;1;1;use the type annotation version of @nullable in the java 8 branchrelnotesuse the type annotation version of @nullable in the java 8 branch-------------created by moe: https://githubcom/google/moemoe_migrated_revid195842620;
3142;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a documentation error.  fluentfuture.catchingasync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a documentation errorfluentfuturecatchingasync does not take a future as an argumentbf25a56ef0d350b2a631536809e4f9b958abf9e3;;;;;1;1;fix a documentation errorfluentfuturecatchingasync does not take a future as an argumentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid195984943;
3144;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    16cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id61049516cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid196136837;
3146;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move type annotations immediately before the type they apply to  3145  relnotes=n/a  4270efbda891a947c1bfdb3e5707741a63b40551;;3145.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> move type annotations immediately before the type they applyto3145relnotesn/a4270efbda891a947c1bfdb3e5707741a63b40551;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  the cla for 4270efbda891a947c1bfdb3e5707741a63b40551 was signed in #3145 ||;put type annotations on types not declarations;"to improve readability the java language specification recommends that type annotations are written ""immediately before the type to which they apply"" (  this pull request makes guava conform to that style guideline";;1;0;move type annotations immediately before the type they applyto3145relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196531789;
3148;0;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> introduce strings.lenientformat()  copied from preconditions.format(). rewrote documentation but the method body remains unchanged.  relnotes=introduce  strings.lenientformat()   copied from  preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> branch eventbus  net  and escape for java 7  relnotes=n/a  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> swap preconditions and verify over to strings.lenientformat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> introduce stringslenientformat() copied from preconditionsformat() rewrote documentation but the method body remains unchangedrelnotesintroduce `stringslenientformat()` copied from `preconditionsformat()`a728cdc8f254ad9ff5049199e4cf9cee9a573270-------<p> branch eventbus net and escape for java 7relnotesn/aeeee4ba1b814f540dcb4516bf1079c3a83bc3e68-------<p> swap preconditions and verify over to stringslenientformat2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;;;;1;1;swap preconditions and verify over to stringslenientformatrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196692442;
3149;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> continue migrating to type annotations for @nullable  relnotes=n/a  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include calipermain anymore.  such benchmarks should be run via the java_benchmarks generated binary directly.  github_breaking_changes=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> continue migrating to type annotations for @nullablerelnotesn/af642763e15c2814c2ed6208fb7302235d6518829-------<p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks dont need to (and shouldnt) include calipermain anymoresuch benchmarks should be run via the java_benchmarks generated binary directlygithub_breaking_changesn/a84d45bc4e1a9b2a87256e30374c517fed329dcae;;;;;1;1;remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks dont need to (and shouldnt) include calipermain anymoresuch benchmarks should be run via the java_benchmarks generated binary directlygithub_breaking_changesn/arelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196848071;
3163;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add duration info to checkarugment() call in suppliers.memoizewithexpiration()  relnotes=add duration info to checkarugment() call in suppliers.memoizewithexpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> some changes to the guava readme.  move most information about the latest release to the release badge at the top  which now links to the github release page for the latest release and automatically displays the latest release version number.  note: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. there are ways we could deal with that  but i didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> fix  by implementing a proper collectspliterators.flatmapto{int long double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** reason for rollback ***  appears to tickle a j2cl bug.  *** original change description ***  fix  by implementing a proper collectspliterators.flatmapto{int long double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add duration info to checkarugment() call in suppliersmemoizewithexpiration()relnotesadd duration info to checkarugment() call in suppliersmemoizewithexpiration()3eadb52dcb210704fefa547853b17e7bfa57e06c-------<p> some changes to the guava readmemove most information about the latest release to the release badge at the top which now links to the github release page for the latest release and automatically displays the latest release version numbernote: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from there are ways we could deal with that but i didnt want to deal with that yet0f364779d314470c8855a6c0c805f858ed418c65-------<p> fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}9e6e1d02faa4ff07f2c5746a1902ae36cd54335b-------<p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b*** reason for rollback ***appears to tickle a j2cl bug*** original change description ***fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}***15db5b7f84531a19e7e0ab6f7932208e35b8b068;;;;;1;1;automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b*** reason for rollback ***appears to tickle a j2cl bug*** original change description ***fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}***-------------created by moe: https://githubcom/google/moemoe_migrated_revid198112871;
3170;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a grammar mistake  3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> in open-source guava  completely skip trying to discover pluggable patterncompiler implementations.  it s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  fixes   relnotes= base : fixed the  serviceconfigurationerror  that some users encountered when using guava as a jpms module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> suppress exceptions raised from argument s tostring methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4j.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  relnotes=fix a bug where cache.asmap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af;;3161.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a grammar mistake3161d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8-------<p> in open-source guava completely skip trying to discover pluggable patterncompiler implementationsits never been possible to create such implementations externally anyway and users are now seeing problems running the useless discovery code under the module systemfixes   the `serviceconfigurationerror` that some users encountered when using guava as a jpms module0954b82dc4e3fe400550fcba78ae2878a8604c3b-------<p> suppress exceptions raised from arguments tostring methods during lenient formatting - take 260c6e22c0ba9c7b305c787bd72e0fd4f1f005afc-------<p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4je0eae79a5ba94850ca447116cd033447240d489e-------<p> fix b/80241237 to correctly *not* change segment weight nor report an eviction when a compute() call does not change the present valuerelnotesfix a bug where cacheasmapcompute* methods could cause nonsensical weights to be stored breaking cache eviction21b52f64ceda0119daec68f6be2712bee55f02af;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;fix a grammar mistake;fix a grammar mistake;"    @aywwwww to make sure that your commit is signed with the email address you use for logging into github try following [these instructions]( and then running `git commit --amend --reset-author` before force-pushing your ""fix a grammar mistake"" commit again :) ||  @jbduncan i googled and solved it  thanks anyway || @aywwwww cool glad you managed to find your own way of solving it :) || ";1;0;fix b/80241237 to correctly *not* change segment weight nor report an eviction when a compute() call does not change the present valuerelnotesfix a bug where cacheasmapcompute* methods could cause nonsensical weights to be stored breaking cache eviction-------------created by moe: https://githubcom/google/moemoe_migrated_revid198618238;
3171;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a direct dependency from guava-gwt to checker-qual.  the gwt sources (specifically  gwtserializationdependencies) use @nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  however  what actually prompted this is a strange behavior in compile-testing  which truth uses. this cl should help  though it might not be a fully solution.   5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> fix mangled javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a direct dependency from guava-gwt to checker-qualthe gwt sources (specifically gwtserializationdependencies) use @nullable directly so we shouldnt rely on relying on it indirectly through guava-jrehowever what actually prompted this is a strange behavior in compile-testing which truth uses this cl should help though it might not be a fully solution fix mangled javadocs5928882017809a1d0e57bd1b55dd6abdcf5604d0;;;;;1;1;fix mangled javadocsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid198884357;
3179;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix nonpublic identifiers and documentation that use ""whitelist"" or ""blacklist"" to use less problematic terms8a21b1c960067ef89e729eeeaeeb3e224692ee37";;;;;1;1;"fix nonpublic identifiers and documentation that use ""whitelist"" or ""blacklist"" to use less problematic termsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid199834981";
3191;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;omit some unnecessary parensrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid201703715;
3197;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  before merging this can we update 893d350 to correctly reflect @hadrienk as the author?i can take care of this if you want @cgdecker  ||  the author field and force pushed the updated commits ||;;;;1;1;change filesmap(file mapmode) to get the size of the file from the channel just before mapping rather than before opening the filesee  by moe: https://githubcom/google/moemoe_migrated_revid202535742;
3204;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for sec-metadata header.    relnotes=adds constants for sec-metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> add @nullable to abstractsequentialiterator s computenext() method return value so that  doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> internally  use patterncompiler from doubles.tryparse.  (redo of cl 202132002  which was partially rolled back in cl 202139691.)  this time including tests to cover the re2j approach. to avoid the errors of last time  i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent  see the pattern javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adds constants for sec-metadata header constants for sec-metadata header2035a276dcecb354dcf68b41f11480786cdeb109-------<p> update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: add @nullable to abstractsequentialiterators computenext() method return value so that  doesnt complaine59ed3d738accabf895ede47ae07b9cf320b6c8a-------<p> internally use patterncompiler from doublestryparse(redo of cl 202132002 which was partially rolled back in cl 202139691)this time including tests to cover the re2j approachto avoid the errors of last time i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent see the pattern javadoc)e51afe5a60f68c169e1aec6d30112bb77e423fdd;;;;;1;1;internally use patterncompiler from doublestryparse(redo of cl 202132002 which was partially rolled back in cl 202139691)this time including tests to cover the re2j approachto avoid the errors of last time i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent see the pattern javadoc)-------------created by moe: https://githubcom/google/moemoe_migrated_revid204301262;
3205;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change hostandport equals() and hashcode() to stop depending on whether brackets were included  now they depend only on host and port.  useful for storing ipv6 addresses in set and map  relnotes= net.hostandport : changed equals() and hashcode() to stop depending on whether brackets were included. now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change hostandport equals() and hashcode() to stop depending on whether brackets were includednow they depend only on host and portuseful for storing ipv6 addresses in set and maprelnotes`nethostandport`: changed equals() and hashcode() to stop depending on whether brackets were included now they depend only on host and port6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;;;;1;1;change hostandport equals() and hashcode() to stop depending on whether brackets were includednow they depend only on host and portuseful for storing ipv6 addresses in set and maprelnotes`nethostandport`: changed equals() and hashcode() to stop depending on whether brackets were included now they depend only on host and port-------------created by moe: https://githubcom/google/moemoe_migrated_revid204509648;
3218;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix initialcapacity calculation for a maximum size over integer.max_value.  noticed during discussion of   813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> remove futures methods that implicitly use directexecutor().  relnotes=removed the  futures  methods that implicitly use  directexecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> reduce proguard retained code from usages of multimaps.synchronizedxyzmultimap.  effects on multimapsynchronizedproguard: jar bytes: 148295 bytes => 50236 bytes (-66%) classes: 67 classes => 28 classes (-58%) methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> remove deprecated charmatcher constants.  relnotes=removed deprecated  public static  fields from  charmatcher . use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> move executionsequencer into guava as @beta.  relnotes=added  executionsequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** original change description ***  move executionsequencer into guava as @beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix initialcapacity calculation for a maximum size over integermax_valuenoticed during discussion of  remove futures methods that implicitly use directexecutor()relnotesremoved the `futures` methods that implicitly use `directexecutor()`52fa8683024d7093bb90df2789ac0a8ebf5aea04-------<p> reduce proguard retained code from usages of multimapssynchronizedxyzmultimapeffects on multimapsynchronizedproguard:jar bytes: 148295 bytes > 50236 bytes (-66%)classes: 67 classes > 28 classes (-58%)methods: 458 methods > 155 methods (-66%)b42b6d20bb20ff239a361d990fc3f42048a4d217-------<p> remove deprecated charmatcher constantsrelnotesremoved deprecated `public static` fields from `charmatcher` use the equivalent `public static` methods instead2786afac3ef177232a2e543703c97d42a277c2d8-------<p> move executionsequencer into guava as @betarelnotesadded `executionsequencer` a new utility to run a series of asynchronous operations serially3b25fe7882459991f2336c5021c46f0c374a152b-------<p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918*** original change description ***move executionsequencer into guava as @beta***35aa102cfe256bdf8a23aa89d259ba4916f50c62;;;;;1;1;automated rollback of c7aa4671cd70853515171333c823e3cdece92918*** original change description ***move executionsequencer into guava as @beta***-------------created by moe: https://githubcom/google/moemoe_migrated_revid206620316;
3226;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a note about the relative ordering of afterdone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> insulate abstractfuture from futures.java/moreexecutors.java dependency  made directexecutor package-private so that we can refer to it directly in abstractfuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> remove reference to strings.isnullorempty from abstractfuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a note about the relative ordering of afterdone and listener execution25ab9de6336c2040a36aff7bed96b20fc5c30111-------<p> insulate abstractfuture from futuresjava/moreexecutorsjava dependencymade directexecutor package-private so that we can refer to it directly in abstractfuture660d9154e553b97df367979ccfe19971c9154bff-------<p> remove reference to stringsisnullorempty from abstractfuturec72e9c73cf468c2c55092912a0178a668f975e2e-------<p> introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture227d67fc6600a6041a3a3881f1e1b6652d3cf75c-------<p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;;;;1;1;automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***-------------created by moe: https://githubcom/google/moemoe_migrated_revid207326809;
3229;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** reason for rollback ***  the test that caused the inital rollback is buggy  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> optimize immutablecollection.toarray(t) as per   the key goal being to avoid the necessity of zeroing a newly created array where possible.  addresses   f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> adds wasm as a supported media type to google java utilities. adds wasm support to the staticfileaction in devserver (so that it is served with the correct content type).  relnotes=adds wasm as a supported media type to google java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> allow service to transition from starting to terminated. add a new  docancelstart  method that is called when a service is stopped while still starting. this gives implementations a chance to abort code which may be preventing the service from starting.  relnotes=added  docancelstart  protected method to  abstractservice   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> fix javadoc typo in linkedlistmultimap  fixes   1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> add callable s tostring to null failure message.  i find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> enhance tostring() for futures returned from executionsequencer.  also make tests for executionsequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> make ordering of primitives#all{wrapper primitive}types deterministic  relnotes=n/a  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1*** reason for rollback ***the test that caused the inital rollback is buggy*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***683eb054a0c9846e73aa9a4f1a47d4821ea5ef60-------<p> optimize immutablecollectiontoarray(t) as per  the key goal being to avoid the necessity of zeroing a newly created array where possibleaddresses  adds wasm as a supported media type to google java utilitiesadds wasm support to the staticfileaction in devserver (so that it is servedwith the correct content type)relnotesadds wasm as a supported media type to google java utilities67bb79e4ea2e0f6da956c29dd700ad7d756948b7-------<p> allow service to transition from starting to terminated add a new ""docancelstart"" method that is called when a service is stopped while still starting this gives implementations a chance to abort code which may be preventing the service from startingrelnotesadded `docancelstart` protected method to `abstractservice`6cdea3a7b0fe3953e181cb9660df5834550ba498-------<p> fix javadoc typo in linkedlistmultimapfixes  add callables tostring to null failure messagei find this happens in mock-heavy tests and this makes it easier to identify the source of the bad mock call9c03abcca29fb267ed55fc80e668327e5d46e230-------<p> enhance tostring() for futures returned from executionsequenceralso make tests for executionsequencer actually run by porting them to junit3 :-(0c2b6fb916214ffe092edc8577bd7818d58fe664-------<p> make ordering of primitives#all{wrapperprimitive}types deterministicrelnotesn/ac8ad64d04071f0fc20cbcba0bb9ee944746b5ef2";;;;;1;1;make ordering of primitives#all{wrapperprimitive}types deterministicrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid207985657;
3238;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a gap method to range which computes the range that lies between two ranges. this operation is particularly useful as a replacement for joda time s interval.gap when migrating to java time which has no interval class.  joda time: interval interval =   interval gap = interval.gap(interval)   java time (after this cl): range<instant> interval = ...  range<instant> gap = interval.gap(otherinterval)   relnotes=adds a gap() method to range that computes the range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> use gradle formatting  fixes   44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> add missing @since tag.    noticed because of   2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> remove unnecessary local.  it is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> switch fluentfuture and abstractfuture in inheritance chain  relnotes=abstractfuture doesn t expose fluentfuture apis anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a gap method to range which computes the range that lies between two ranges this operation is particularly useful as a replacement for joda times intervalgap when migrating to java time which has no interval classjoda time:interval interval  interval gap  intervalgap(interval)java time (after this cl):range<instant> interval  range<instant> gap  intervalgap(otherinterval)relnotesadds a gap() method to range that computes the range that lies between them856f3bc431f7f145f35c6a42a07e1f7158964467-------<p> use gradle formattingfixes  add missing @since tag because of  add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futuresb155e35606632c756e8db2c414145237a02ef9ca-------<p> remove unnecessary localit is a holdover from when we used the value locally rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d894134ff0559baefa9ecc8df2a7c61945b6dfc523-------<p> make delayed get() test more resilient to thread scheduling delayscc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f-------<p> switch fluentfuture and abstractfuture in inheritance chainrelnotesabstractfuture doesnt expose fluentfuture apis anymore4d8e0a81d78cea279441625adc96467a5b7d0879; ;;;;1;1;switch fluentfuture and abstractfuture in inheritance chainrelnotesabstractfuture doesnt expose fluentfuture apis anymore-------------created by moe: https://githubcom/google/moemoe_migrated_revid208673292;
3245;1;0;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> don t allocate a cancellationexception if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> dont allocate a cancellationexception if cancellation causes are not enabled99393cf80ba7a5c861b564b3289debbf5dbbeb51;;;;;1;1;dont allocate a cancellationexception if cancellation causes are not enabledrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid209011426;
3247;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add javadoc for mediatype.kml+kmz+mbox  via   original author=simon legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add javadoc for mediatypekml+kmz+mboxvia  authorsimon legner (simon04)7ac917c8d73768129499bd76fe41aa651391ba93-------<p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrentb6726e17f9aa455ff5aa8ee7cee6089d37feb1ba; ;;;;1;1;[guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid209449236;
3248;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix parameter name in javadoc   name  doesn t exist in the current context.  #codehealth  relnotes=fix parameter name in javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix parameter name in javadoc`name` doesnt exist in the current context#codehealthrelnotesfix parameter name in javadoc9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;;;;1;1;fix parameter name in javadoc`name` doesnt exist in the current context#codehealthrelnotesfix parameter name in javadoc-------------created by moe: https://githubcom/google/moemoe_migrated_revid209811377;
3254;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> suppress violation of missingequalscall for equalstestertest  given it quite legitimately fails to call #testequals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** reason for rollback ***  test depends on incorrect future implementation  *** original change description ***  add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    5fafe7832579ab221804480a7545d486a14d083d;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabledf380040f0041f94c83d24623c10f32de58d436c4-------<p> suppress warnings on thread suspending testd51037de530cfe76884271f164b3fbe914493fdb-------<p> suppress violation of missingequalscall for equalstestertest given it quite legitimately fails to call #testequals16e6fcebf07c0f2ce92411604bd3c9d03407374c-------<p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4*** reason for rollback ***test depends on incorrect future implementation*** original change description ***add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabled***47d758e506f838ebc14da5cb85b7f3150efe00fb-------<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id6104955fafe7832579ab221804480a7545d486a14d083d;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid210378042;
3256;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> bail early without a cancellationexception in abstracttransformfuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabled49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255-------<p> bail early without a cancellationexception in abstracttransformfuture2ba14fdad20628de9eb7ea537af22e198d4d31a0;;;;;1;1;bail early without a cancellationexception in abstracttransformfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid211143128;
3257;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use trustedfuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use trustedfuture where possible5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;;;;1;1;use trustedfuture where possiblerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid211511882;
3261;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;; ;;;;1;1;use newguard() to make example in monitor class javadoc moreconcisethis commit also cleans up the method javadoc for newguard() itself andreplaces a lingering throw throwablespropagate(throwable) with simply`throw throwable` (not related to newguard() but good to clean up)3236relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid212669316;
3262;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove trustedgetexception()  tryinternalfastpathgetfailure gives access to similar fast-path  relnotes=n/a  9d9d4d253c377a41919542ac65c5fa7205bd7f52;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove trustedgetexception()tryinternalfastpathgetfailure gives access to similar fast-pathrelnotesn/a9d9d4d253c377a41919542ac65c5fa7205bd7f52;;;;;1;1;remove trustedgetexception()tryinternalfastpathgetfailure gives access to similar fast-pathrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid212701154;
3270;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;  one change is by a googler the other has a verified cla in  ||;;;;1;1;properly handle input cancellations in futurescatching[async]currently if input future is cancelled and the fallback handler does not handle cancellationexception the output future will end up as failed with cancellationexception instead the more logical result should be that output future ends up as cancelled as wellrelnotes`concurrent`: when the input to `futurescatching*` is cancelled cancel the output rather than failing the output with a `cancellationexception` (unless the exception is caught)-------------created by moe: https://githubcom/google/moemoe_migrated_revid213597852;
3281;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;;;;;1;1;clarify a comment in futuresnoncancellationpropagatingfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid214975745;
3298;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime api checker for guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> enable goodtime api checker for guava753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;;;;1;1;enable goodtime api checker for guavarelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid217557131;
3305;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime-api for guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  this is in response to (and should resolve)   9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> suppress warnings in classes that implement equals() without also implementing hashcode().  the contract for object.hashcode states that if two objects are equal  then calling the hashcode() method on each of the two objects must produce the same result. implementing equals() but not hashcode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> enable goodtime-api for guava (with some exceptions)603ecca60c11d9a343423ae908bbc325521a7f50-------<p> *builderjava: add @param documentation for the node/value/edge types that clarifies their behaviorthis is in response to (and should resolve)  suppress warnings in classes that implement equals() without also implementinghashcode()the contract for objecthashcode states that if two objects are equal thencalling the hashcode() method on each of the two objects must produce the sameresult implementing equals() but not hashcode() causes broken behaviour whentrying to store the object in a collection73f7e84a345805dc4fcc9927201e03fdbf408c5f;travis seemed to have missed this pr during githubs partial outage yesterday closing and reopening with the hopes that it will run the tests ||;;;;1;1;suppress warnings in classes that implement equals() without also implementinghashcode()the contract for objecthashcode states that if two objects are equal thencalling the hashcode() method on each of the two objects must produce the sameresult implementing equals() but not hashcode() causes broken behaviour whentrying to store the object in a collection-------------created by moe: https://githubcom/google/moemoe_migrated_revid218187142;
3306;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> document that chars.lexicographicalordering is different than alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> document that charslexicographicalordering is different than alphabeticalordering which is more appropriate for user text5377565bc5be4bcce52a07952595b50c11c75f1a;;;;;1;1;document that charslexicographicalordering is different than alphabeticalordering which is more appropriate for user textrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid219121417;
3313;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct documentation for splitter#withkeyvalueseparator(splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  internally  immutabletable.builder.build() delegates to two classes  {dense sparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detected.  prior to this cl  sparseimmutabletable had a message formatted like:    duplicate value for row=%rowkey%  column=%columnkey%: %newvalue%  %oldvalue%  whereas denseimmutabletable had:    duplicate key: (%rowkey%  %columnkey%)   after this cl both classes will format the message like:    duplicate key: (row=%rowkey%  column=%columnkey%)  values: [%newvalue%  %oldvalue%].   relnotes=standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph packagesanitytests: specify a default object for endpointpair inputs. this should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> correct documentation for splitter#withkeyvalueseparator(splitter)8340e5a770401494da5194e33153079754381006-------<p> standardise message format for ""duplicate key"" illegalargumentexception thrown from immutabletablebuilderbuild()internally immutabletablebuilderbuild() delegates to two classes {densesparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detectedprior to this cl sparseimmutabletable had a message formatted like:  ""duplicate value for row%rowkey% column%columnkey%: %newvalue% %oldvalue%""whereas denseimmutabletable had:  ""duplicate key: (%rowkey% %columnkey%)""after this cl both classes will format the message like:  ""duplicate key: (row%rowkey% column%columnkey%) values: [%newvalue% %oldvalue%]""relnotesstandardise message format for ""duplicate key"" illegalargumentexception thrown from immutabletablebuilderbuild()96e21ae4f9fce2dc622658cff322b01f1721012e-------<p> commongraph packagesanitytests: specify a default object for endpointpair inputsthis should resolve a few internal flaky test issues4210f57678985b51439b0fa37779ec5b369024b8";;;;;1;1;commongraph packagesanitytests: specify a default object for endpointpair inputsthis should resolve a few internal flaky test issues-------------created by moe: https://githubcom/google/moemoe_migrated_revid220529228;
3318;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address why users should prefer our immutable collections to things like collections.emptylist().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> add the origin-trial  response header.  229188e18e6504ffa9747e8bd00622d28e460477;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> address why users should prefer our immutable collections to things like collectionsemptylist()2b9f74c16acbb9bbe18bc20e171996c79a476e31-------<p> add the origin-trial  response header229188e18e6504ffa9747e8bd00622d28e460477;;;;;1;1;add the origin-trial  response headerrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid221639042;
3325;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;;;;;1;1;replace usages of truths deprecated hasmessage() with hasmessagethat() in guava tests-------------created by moe: https://githubcom/google/moemoe_migrated_revid222834185;
3327;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    648071f0c529c87cb28537488f27f971bce3c3c5;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable //wwwchromiumorg/developers/calendar#toc-estimated-stable-dates648071f0c529c87cb28537488f27f971bce3c3c5;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable: by moe: https://githubcom/google/moemoe_migrated_revid222877055;
3330;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> add the @immutable a few more classes. both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> internal change3e74359d4e0479bf6c461d031bb4761b06cf2e66-------<p> add the @immutable a few more classes both annotations enforce at compile-time that the annotated class meets the annotation’s requirements16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;;;;1;1;add the @immutable a few more classes both annotations enforce at compile-time that the annotated class meets the annotation’s requirements-------------created by moe: https://githubcom/google/moemoe_migrated_revid223369138;
3332;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing documentation and @since tags to mediatype entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> remove  media type for  or similar phrasing for visible constants in the mediatype class.  172bb45c149601a52e45bff8b2e3aa409f66d658;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add missing documentation and @since tags to mediatype entries that were addedafter its initial relase of 120b545d0ed1066906d238852f2f510132cbfcc4af8-------<p> remove ""media type for"" or similar phrasing for visible constants in the mediatype class172bb45c149601a52e45bff8b2e3aa409f66d658";;;;;1;1;"remove ""media type for"" or similar phrasing for visible constants in the mediatype classrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid223540269";
3334;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make example compile (i.e. supply a path/file) and use depth first instead of breadth first.  reason: depth first is more common for file traversal.  relnotes=n/a  e7b80454e4d463af61fc81c3beb96b5e46b07312;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> make example compile (ie supply a path/file) and use depth first instead of breadth firstreason: depth first is more common for file traversalrelnotesn/ae7b80454e4d463af61fc81c3beb96b5e46b07312;;;;;1;1;make example compile (ie supply a path/file) and use depth first instead of breadth firstreason: depth first is more common for file traversalrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid223782436;
3337;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use the primitive  number  type instead of the object counterpart  number  to avoid a jscompiler error.  an upcoming change to j2cl that simplifies how casting logic is transpiled will make the code  (number) (object) 3  here transpile to just  /** @type {number} */ (3)  and jscompiler will see the  invalid cast  since  3  is not  number  in the closure type system.  065a831ca171767dcc73b7b74c996029a5f286e3;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use the primitive ""number"" type instead of the object counterpart ""number"" to avoid a jscompiler erroran upcoming change to j2cl that simplifies how casting logic is transpiled will make the code ""(number) (object) 3"" here transpile to just ""/** @type {number} */ (3)"" and jscompiler will see the ""invalid cast"" since ""3"" is not ""number"" in the closure type system065a831ca171767dcc73b7b74c996029a5f286e3";;;;;1;1;"use the primitive ""number"" type instead of the object counterpart ""number"" to avoid a jscompiler erroran upcoming change to j2cl that simplifies how casting logic is transpiled will make the code ""(number) (object) 3"" here transpile to just ""/** @type {number} */ (3)"" and jscompiler will see the ""invalid cast"" since ""3"" is not ""number"" in the closure type systemrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid225046969";
3339;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add the application/jose and application/jose+json media types.      relnotes=add mediatype for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> suppress soon to be goodtime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add the application/jose and application/jose+json media types mediatype for ""application/jose"" and ""application/jose+json""e846cdf26bb7cc52b664e8f78e670222da88ac51-------<p> suppress soon to be goodtime errors (time is now considered a keyword)2705b06e3c61dfe16eb14befe52de2c37d9e0313";;;;;1;1;suppress soon to be goodtime errors (time is now considered a keyword)-------------created by moe: https://githubcom/google/moemoe_migrated_revid225199757;
3350;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hide files methods that are @deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> hide files methods that are @deprecated internallycf8ea79dc50d7c0441045b020873561a4bb3791b;;;;;1;1;hide files methods that are @deprecated internallyrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid226486688;
3359;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  fixes   relnotes=specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparablefixes  that range static factories can throw classcastexception if the provided endpoints are not mutually comparable7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;;;;1;1;specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparablefixes  that range static factories can throw classcastexception if the provided endpoints are not mutually comparable-------------created by moe: https://githubcom/google/moemoe_migrated_revid227525705;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;146.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";filler for non-existent issue;146;;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;3356.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";remove unused imports and warnings;* remove unused imports* remove suppress warning annotations where not applicable and/or update suppression types;@liach thanks added similar changes to android as well || looks good (imo this has a big chance of merging as its a bugfix) || not sure what were doing with `serial` warnings nowadays but ill import the rest of this ;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;3385.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";document the jdk 9+ alternative to `maps#immutableentry`;i think this suggestion is worthwhile for two reasons:- the jdk 9+ alternative is null-hostile fully in line with guavas philosophy (in fact my colleagues and i were surprised to learn that `mapsimmutableentry` allows nulls)- the excellent arguments in favour of `immutable*` types put forth in #2969 do not hold here since `mapsimmutableentry` does not have a special return type that communicates its immutability;(were merging this one in a sec thank you for it!) ||;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3399;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.entryset() to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the entry set. checked that the entry set functions correctly outside the autorelease pool. checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. did this test with the following constructions to cover all entry set implementations: - immutablemap.of(<2 entries>) - immutablemap.copyof(<enummap with 2 entries>) - immutablesortedmap.of(<2 entries>) - immutablebimap.of(<2 entries>).inverse()  relnotes=j2objc: fixes crashes from use of immutablemap.entryset().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use j2objcs @retainedwith annotation instead of @weak onimmutablemapentryset() to prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to theentry set checked that the entry set functions correctly outside theautorelease pool checked that both the entry set and the are deallocated by theautorelease pool when not holding a strong reference to the entry set did thistest with the following constructions to cover all entry set implementations:- immutablemapof(<2 entries>)- immutablemapcopyof(<enummap with 2 entries>)- immutablesortedmapof(<2 entries>)- immutablebimapof(<2 entries>)inverse()relnotesj2objc: fixes crashes from use of immutablemapentryset()c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;;;;1;1;use j2objcs @retainedwith annotation instead of @weak onimmutablemapentryset() to prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to theentry set checked that the entry set functions correctly outside theautorelease pool checked that both the entry set and the are deallocated by theautorelease pool when not holding a strong reference to the entry set did thistest with the following constructions to cover all entry set implementations:- immutablemapof(<2 entries>)- immutablemapcopyof(<enummap with 2 entries>)- immutablesortedmapof(<2 entries>)- immutablebimapof(<2 entries>)inverse()relnotesj2objc: fixes crashes from use of immutablemapentryset()-------------created by moe: https://githubcom/google/moemoe_migrated_revid237300208;
3404;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> lazily allocate compacthash backing arrays on first write  empty maps/sets are extremely common. lazily allocating the backing arrays can save hundreds of kb of heap and reduce load on the garbage collector.  while here: - use serialized size to pre-size the arrays - respect ordering during serialization (without using an iterator) - consistently mark unused links as unset  memory savings before first write (bytes): - compacthashmap.create(): 184 -> 64 - compactlinkedhashmap.create(): 240 -> 80 - compacthashset.create(): 136 -> 40 - compactlinkedhashset.create(): 200 -> 56 - compacthashmap.createwithexpectedsize(0): 136 -> 64 - compactlinkedhashmap.createwithexpectedsize(0): 168 -> 80 - compacthashset.createwithexpectedsize(0): 96 -> 40 - compactlinkedhashset.createwithexpectedsize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> lazily allocate compacthash backing arrays on first writeempty maps/sets are extremely common lazily allocating the backing arrays cansave hundreds of kb of heap and reduce load on the garbage collectorwhile here:- use serialized size to pre-size the arrays- respect ordering during serialization (without using an iterator)- consistently mark unused links as unsetmemory savings before first write (bytes):- compacthashmapcreate(): 184 -> 64- compactlinkedhashmapcreate(): 240 -> 80- compacthashsetcreate(): 136 -> 40- compactlinkedhashsetcreate(): 200 -> 56- compacthashmapcreatewithexpectedsize(0): 136 -> 64- compactlinkedhashmapcreatewithexpectedsize(0): 168 -> 80- compacthashsetcreatewithexpectedsize(0): 96 -> 40- compactlinkedhashsetcreatewithexpectedsize(0): 144 -> 56801e018184d2f5196c80e2b2168a883c093ffe5a;;;;;1;1;lazily allocate compacthash backing arrays on first writeempty maps/sets are extremely common lazily allocating the backing arrays cansave hundreds of kb of heap and reduce load on the garbage collectorwhile here:- use serialized size to pre-size the arrays- respect ordering during serialization (without using an iterator)- consistently mark unused links as unsetmemory savings before first write (bytes):- compacthashmapcreate(): 184 -> 64- compactlinkedhashmapcreate(): 240 -> 80- compacthashsetcreate(): 136 -> 40- compactlinkedhashsetcreate(): 200 -> 56- compacthashmapcreatewithexpectedsize(0): 136 -> 64- compactlinkedhashmapcreatewithexpectedsize(0): 168 -> 80- compacthashsetcreatewithexpectedsize(0): 96 -> 40- compactlinkedhashsetcreatewithexpectedsize(0): 144 -> 56relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid237817874;
3428;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add (unimplemented) api for grapbbuilder.immutable() and immutablegraph.builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> adds constants for prefetch headers.  of note  x-purpose is not just a google specific header as previously defined.      relnotes=adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> implement graphbuilder.immutable().  relnotes= graph : added  graphbuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> add fluentfuture.from(fluentfuture) factory method.  this follows the steps of fluentiterable.from(fluentiterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  relnotes=added deprecated  fluentfuture.from(fluentfuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> use byte/short/int for hashtable depending on size  the hashtable is stored as an object and cast to the correct type using instanceof checks.  memory: byte sizes (2-89): 12-41% better (average: 32% better) short sizes (90-22937): 20-29% better (average: 24% better) int sizes (22938+): unchanged  runtime on a pixel 2: createandpopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iteratewithkeysetandget: 9% better to 13% worse (average: 3.2% worse) iteratewithentryset: unchanged (doesn t use hashtable)  effects on immutablemapproguard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  effects on immutablebimapproguard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> add valuegraphbuilder.immutable().  relnotes= graph : added  valuegraphbuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> remove unnecessary type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> add networkbuilder.immutable().  relnotes= graph : added  networkbuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add (unimplemented) api for grapbbuilderimmutable() and immutablegraphbuilder50eddd03e92dc2855a3ae05c3b8d93de18e6bddd-------<p> adds constants for prefetch headersof note x-purpose is not just a google specific header as previously defined constants for prefetch headers966879ff982425a4418341c9ccbe9a7249bb0a4d-------<p> implement graphbuilderimmutable()relnotes`graph`: added `graphbuilderimmutable()` for building immutable graphs in a fluent way7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b-------<p> add fluentfuturefrom(fluentfuture) factory methodthis follows the steps of fluentiterablefrom(fluentiterable) and other“migration aid” methods that are deprecated from inception and are just here topoint out code that is no longer neededrelnotesadded deprecated `fluentfuturefrom(fluentfuture)` to point out redundant code2d060028e9d99f798a29fd1ec09c844f4fc58a1d-------<p> use byte/short/int for hashtable depending on sizethe hashtable is stored as an object and cast to the correct type usinginstanceof checksmemory:byte sizes (2-89): 12-41% better (average: 32% better)short sizes (90-22937): 20-29% better (average: 24% better)int sizes (22938+): unchangedruntime on a pixel 2  9% better to 6% worse (average: 43% better)get: 1% better to 8% worse (average: 35% worse)iteratewithkeysetandget: 9% better to 13% worse (average: 32% worse)iteratewithentryset: unchanged (doesnt use hashtable)effects on immutablemapproguard:59105 bytes > 60369 bytes (+21%)21 classes > 21 classes (0%)200 methods > 201 methods (+05%)effects on immutablebimapproguard:68893 bytes > 70235 bytes (+19%)25 classes > 25 classes (0%)232 methods > 233 methods (+04%)b1a11396bd731ddcd1efd60850b0aa004c9f874b-------<p> add valuegraphbuilderimmutable()relnotes`graph`: added `valuegraphbuilderimmutable()` for building immutable value graphs in a fluent way79e0a573fc00db17f0916426ce2107d3bf63d481-------<p> remove unnecessary type parameter6f0b66d172a9532aaa82dac8a1add496c916ad97-------<p> add networkbuilderimmutable()relnotes`graph`: added `networkbuilderimmutable()` for building immutable networks in a fluent waya812af75ee14d8cb01a1a180b2c369c2f16311a3;;;;;1;1;add networkbuilderimmutable()relnotes`graph`: added `networkbuilderimmutable()` for building immutable networks in a fluent way-------------created by moe: https://githubcom/google/moemoe_migrated_revid240318306;
3431;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove unused configuration of load factor  this allows removal of loadfactor/threshold which saves 8 bytes per object.  while here: - reduce diff between map/set classes - make base foreach() work for linked classes  shallow object size (bytes): - compacthashmap: 64 -> 56 - compactlinkedhashmap: 80 -> 72 - compacthashset: 40 -> 32 - compactlinkedhashset: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove unused configuration of load factorthis allows removal of loadfactor/threshold which saves 8 bytes per objectwhile here:- reduce diff between map/set classes- make base foreach() work for linked classesshallow object size (bytes):- compacthashmap: 64 -> 56- compactlinkedhashmap: 80 -> 72- compacthashset: 40 -> 32- compactlinkedhashset: 56 -> 48062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;;;;1;1;remove unused configuration of load factorthis allows removal of loadfactor/threshold which saves 8 bytes per objectwhile here:- reduce diff between map/set classes- make base foreach() work for linked classesshallow object size (bytes):- compacthashmap: 64 -> 56- compactlinkedhashmap: 80 -> 72- compacthashset: 40 -> 32- compactlinkedhashset: 56 -> 48relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241053148;
3434;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix @param tag as per   cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix @param tag as per  @jbduncanc691708b4c214b5caf9a92826cdfa07b19485f6e;;;;;1;1;fix @param tag as per  @jbduncanrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241525141;
3436;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bumped the fpp to prevent ooms on jdk 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> bumped the fpp to prevent ooms on jdk 118acb5b990f7fe0467dd318e262dd423b19b710b7;;;;;1;1;bumped the fpp to prevent ooms on jdk 11relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241778584;
3440;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add websocket headers to  header listings.  this adds five headers  as defined in rfc 6455: sec-websocket-accept  sec-websocket-extensions  sec-websocket-key  sec-websocket-protocol  and sec-websocket-versions.  this also changes the c++ per-header unit test so that it can recognize the alternate capitalization of websocket  instead of adding five special cases. the go and java versions use the  websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add websocket headers to  header listingsthis adds five headers as defined in rfc 6455: sec-websocket-acceptsec-websocket-extensions sec-websocket-key sec-websocket-protocol andsec-websocket-versionsthis also changes the c++ per-header unit test so that it can recognize thealternate capitalization of websocket instead of adding five special cases thego and java versions use the ""websocket"" capitalization instead78fe31027ec67c0648667582e40d49351757cfe9";;;;;1;1;"add websocket headers to  header listingsthis adds five headers as defined in rfc 6455: sec-websocket-acceptsec-websocket-extensions sec-websocket-key sec-websocket-protocol andsec-websocket-versionsthis also changes the c++ per-header unit test so that it can recognize thealternate capitalization of websocket instead of adding five special cases thego and java versions use the ""websocket"" capitalization insteadrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid242732915";
3449;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> mitigate  by guessing that sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in immutableset creation.  relnotes=mitigate   f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> update valuegraphbuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> update networkbuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> enable goodtime-api  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> fix misspelled sec-websocket-version header.  the correct name is sec-websocket-version  not sec-websocket-versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> match the casing of the websocket  headers to the rfc directly.  relnotes=match the casing of the websocket  headers to the rfc directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> update public suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> remove outdated references to the  next release of guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> update to truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> migrate from isnotsameas to isnotsameinstanceas.  the two behave identically  and isnotsameas is being removed.  8c4225f652e289025040f2454fefeaa90671310f;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> override a method instead of special-casing it75e7b296f6530a9f58b501822457fc3be03e7948-------<p> mitigate  by guessing that sets are already deduplicated and making ""half and half"" expectations about un-duplicated inputs in immutableset creationrelnotesmitigate  update valuegraphbuilder documentation with option of building an immutable graph5879ed3133f4154ccca013941166be8c61f1ed97-------<p> update networkbuilder documentation with option of building an immutable graphcdb288c576ff3c1e71e0315cde03cc68e4af33f3-------<p> enable goodtime-apib34102f9b9ea11187de8f9961d02ab4d7e603fae-------<p> fix misspelled sec-websocket-version headerthe correct name is sec-websocket-version not sec-websocket-versions86ffa6e267b88db547b7aab9587d3e8a19081bf0-------<p> match the casing of the websocket  headers to the rfc directlyrelnotesmatch the casing of the websocket  headers to the rfc directly517b59607597d659fb54bc6c71e33e974c41c494-------<p> update public suffix data646d0e06333a3b64b101fdbe0ef93fa948b62c49-------<p> remove outdated references to the ""next release of guava""f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237-------<p> update to truth 044b61237ca571489a0a0ac738f707a4a0359c59e86-------<p> migrate from isnotsameas to isnotsameinstanceasthe two behave identically and isnotsameas is being removed8c4225f652e289025040f2454fefeaa90671310f";;;;;1;1;migrate from isnotsameas to isnotsameinstanceasthe two behave identically and isnotsameas is being removed-------------created by moe: https://githubcom/google/moemoe_migrated_revid245089419;
3455;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fixed some links.  the comparisons to the android hash* classes haven t been accurate since at least cl 81367572  so i ve removed them entirely.  3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named() to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> migrate from is(not)sameas to is(not)sameinstanceas.  they behave identically  and the old names are being removed.  open-source note: the new methods are available in truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> a few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> remove checkedfuture from guava.  relnotes=removed deprecated  checkedfuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7;;3398.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p>  some linksthe comparisons to the android hash* classes havent been accurate since at least cl 81367572 so ive removed them entirely33981dc514b56a0fa213baa242acf9e58163638abef8-------<p> migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be presente70a2f9e53583c1c508a0f7b16bdcad8c3f2f740-------<p> migrate from is(not)sameas to is(not)sameinstanceasthey behave identically and the old names are being removedopen-source note: the new methods are available in truth as of version 044c19256717b493127a355fabf1eeb827fd0c64973-------<p> a few more doc tweaks caught by @jbduncan in f2591b5c2a414084c20aeb4b74fb85eab5cf0a787d76234939-------<p> remove checkedfuture from guavarelnotesremoved deprecated `checkedfuture` and related utilitiescae1b9190e4bad3b6c01afbb08d9b0a366813c99-------<p> migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be present1f5c4780e522c32f9412e29cd2880124c81275e7";; some links;updated invalid links where i could find an alternative removed others;;1;0;"migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be present-------------created by moe: https://githubcom/google/moemoe_migrated_revid246367399";
3474;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add faketicker.advance(duration) and setautoincrementstep(duration).  #goodtime  relnotes=add faketicker.advance(duration) and setautoincrementstep(duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> add queues.drain(blockingqueue  collection  int  duration) and drainuninterruptibly(blockingqueue  collection  int  duration).  relnotes=add duration-based queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> add a new header field  cdn-loop  to   more details:   relnotes=add cdn-loop header to library according to rfc8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> remove app.link from the public suffix list.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add faketickeradvance(duration) and setautoincrementstep(duration)#goodtimerelnotesadd faketickeradvance(duration) and setautoincrementstep(duration)dcb5d431e288374666b70214de836ee09053b425-------<p> add queuesdrain(blockingqueue collection int duration) and drainuninterruptibly(blockingqueue collection int duration)relnotesadd duration-based queues drain methods5963112d7548abb44f5502d0bec1edda91d530fc-------<p> add a new header field ""cdn-loop"" to  details:  cdn-loop header to library according to rfc8586d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae-------<p> remove applink from the public suffix list8fa55701cc99c3016e9bda5b2807921c0e8b39cd";;;;;1;1;remove applink from the public suffix list-------------created by moe: https://githubcom/google/moemoe_migrated_revid247658982;
3486;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> copy durations.saturatedtonanos(duration) to package-private c.g.c.u.c.internal so it can be used by the concurrent package (and in guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> tighten the goodtime suppression locations in ratelimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> add duration-based overloads to uninterruptibles.  #goodtime  relnotes=add duration-based overloads to uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> always complete timeoutfuture  even if tostring() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> add duration-based overloads to moreexecutors.  #goodtime  relnotes=add duration-based overloads to moreexecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> add duration-based overloads to fluentfuture.  #goodtime  relnotes=add duration-based overloads to fluentfuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> add duration-based overloads to futures.  #goodtime  relnotes=add duration-based overloads to futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> add duration-based overloads to abstractscheduledservice.  #goodtime  relnotes=add duration-based overloads to abstractscheduledservice.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> add duration-based overloads to service.  #goodtime  relnotes=add duration-based overloads to service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> add duration-based overloads to servicemanager.  #goodtime  relnotes=add duration-based overloads to servicemanager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> remove checkedfuture utilities from util.concurrent.futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> add duration-based overloads to ratelimiter.  #goodtime  relnotes=add duration-based overloads to ratelimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> add duration-based overload to monitor.  #goodtime  relnotes=add duration-based overload to monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> define project build source encoding as utf-8  closes   196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> fix  apache license  version 2.0  spelling  there are many java libraries licensed under  apache license  version 2.0  that do not use its official spelling. this causes issues like  with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. this pr changes the license spelling to the official one  as advised by maven developers.  closes   eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> fix streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> add mediatype for  application/geo+json .  via   relnotes=add mediatype for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> upgrade maven-javadoc-plugin to 3.1.0.  fixes   34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> add cross-origin-resource-policy header name constants.  details   relnotes=add cross-origin-resource-policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> fix javadoc links.  fixes   86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> update documentation to refer correct method name.    relnotes=n/a  a6f7253500de9a6a88c56e94858759c437dee20b;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a link back to the goodtime rate bug5750fb6c05d0f8b32060f56b0a94a12a52c89260-------<p> copy durationssaturatedtonanos(duration) to package-private cgcucinternal so it can be used by the concurrent package (and in guava)#goodtime568cbb67101fdb56436e75467a23de8d027b1089-------<p> tighten the goodtime suppression locations in ratelimiter#goodtime0df55a98cf54e2c3ccf1c1180ad4a20419d69a55-------<p> add duration-based overloads to uninterruptibles#goodtimerelnotesadd duration-based overloads to uninterruptiblese194e7578e5e8fea2edddd5a9544ebdeac961141-------<p> always complete timeoutfuture even if tostring() throws6c09c1732c040050752b5a087a1070ebf899ae9f-------<p> add duration-based overloads to moreexecutors#goodtimerelnotesadd duration-based overloads to moreexecutorse2da132822d1e62d000564e51816c789dc823998-------<p> add duration-based overloads to fluentfuture#goodtimerelnotesadd duration-based overloads to fluentfuture7f5390dcb99c6930facb2a91cca056a25b8581a4-------<p> add duration-based overloads to futures#goodtimerelnotesadd duration-based overloads to futures070e07da83e8320f2c368709cb773f08a383797f-------<p> add duration-based overloads to abstractscheduledservice#goodtimerelnotesadd duration-based overloads to abstractscheduledservicee7a7a1f0c4962231d73f72d101deeaa2c2b0144c-------<p> add duration-based overloads to service#goodtimerelnotesadd duration-based overloads to service76718f4617a2d4daea00a578f808cae59c5cdc59-------<p> add duration-based overloads to servicemanager#goodtimerelnotesadd duration-based overloads to servicemanager6c6edfa0b24148d5665a8e31a1811df7045b9460-------<p> remove checkedfuture utilities from utilconcurrentfuturesd3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b-------<p> add duration-based overloads to ratelimiter#goodtimerelnotesadd duration-based overloads to ratelimiter7aee4f5c283e501c854ae06aaa201fc5328ebe4f-------<p> add duration-based overload to monitor#goodtimerelnotesadd duration-based overload to monitorac540c41979ade6931d9d604eff1e6223e247a9a-------<p> define project build source encoding as utf-8closes  fix ""apache license version 20"" spellingthere are many java libraries licensed under ""apache license version 20"" that do not use its official spellingthis causes issues like  with every library defining its own spelling its difficult in large projects to have a clear view of all licenses in usethis pr changes the license spelling to the official one as advised by maven developerscloses  fix streamszip documentation typo8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65-------<p> add mediatype for ""application/geo+json""via  mediatype for ""application/geo+json""b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42-------<p> upgrade maven-javadoc-plugin to 310fixes  add cross-origin-resource-policy header name constantsdetails  cross-origin-resource-policy header to library161241d58e93dfdba5a9021d2ee8dc64e3cd3937-------<p> fix javadoc linksfixes  update documentation to refer correct method namehttps://docsoraclecom/javase/8/docs/api/java/util/maphtml#getordefault-javalangobject-v-relnotesn/aa6f7253500de9a6a88c56e94858759c437dee20b";;;;;1;1;update documentation to refer correct method name by moe: https://githubcom/google/moemoe_migrated_revid250009325;
3495;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  setfuture .  relnotes=removed  @beta  from  setfuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> upgrade maven-gpg-plugin to 1.6  fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> clarify behavior of  immutablelist#copyof  for null argument.  3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> make the incidentedges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> simplify implementation of graphs.reachablenodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> make the adjacentnodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> delete deprecated callwithtimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249;;3485.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `setfuture`relnotesremoved `@beta` from `setfuture`2c717c0092ad5abbbe6a34d426e084623c651354-------<p> upgrade maven-gpg-plugin to 16fixes githubcom/google/guava/pull/3490c10a1647ffa968a96273d0961a6f9e0181a4fe70-------<p> clarify behavior of `immutablelist#copyof` for null argument34856f655fb940809499719ba7679a425961e39a8feb-------<p> make the incidentedges() documentation a little bit more clearb0a05097900ab2decf17681d3dcd9154f225d91f-------<p> simplify implementation of graphsreachablenodes()b917492c31401a2e6092c8f3f6bc60040c1dcebe-------<p> make the adjacentnodes() documentation a little bit more clear7a5a43b66a4f0a22077918404fa95a165ede2811-------<p> delete deprecated callwithtimeout()fa13235f2c8edff9cd6c434f8a164250decf0249;;clarify behavior of `immutablelist#copyof` for null argument;;afaik this is the behavior of all immutablecollection types the class javadoc on immutablelist explicitly refers to the immutablecollection which mentions this at the top so these changes don‘t seem necessary || the factories are tested by other automated null tests so lets not add more teststhe existing doc is trying to say that the methods reject null elements but its saying it poorly so thanks for raising this how about this?```@throws nullpointerexception if {@code elements} contains a null element```that skips mentioning that `elements` itself might be `null` but we always skip that preferring to annotate the parameters that _can_ be `null` with `@nullable` (otherwise nearly all of our methods would have `@throws nullpointerexception if x y or z is null`) ||;1;0;delete deprecated callwithtimeout()relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid251819931;
3525;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix typo in immutablelist.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  relnotes=update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> add a test for longadder overflow behavior.  see   558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> saturate longadder.sum() results to long.max_value during an overflow.  fixes   relnotes=fix potential overflow/iae during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> add rangemap#merge  analogous to map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** reason for rollback ***  breaking a number of projects  *** original change description ***  add rangemap#merge  analogous to map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix typo in immutablelistjava922214b3068213d28b20316997a9bbab77080d52-------<p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now its been adopted by webappsecrelnotesupdate fetch metadata (formerly sec-metadata) headers to point to w3c documentation now its been adopted by webappsec2ae2f73318946f99f05af4e0867fb04495ee66bf-------<p> add a test for longadder overflow behaviorsee  fix some rawtypes in comgooglecommoncache310de86d74c2c77924c1a69d22c7acdf286bd258-------<p> saturate longaddersum() results to longmax_value during an overflowfixes  potential overflow/iae during cache stats calculationsb28a260a3b847b627cc4c33dd4fd6bed05d4e2f6-------<p> add rangemap#merge analogous to map#merge8dc46a72fa5417d02063052f05fd0355703411fc-------<p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc*** reason for rollback ***breaking a number of projects*** original change description ***add rangemap#merge analogous to map#merge***44d0870b7e4d6a9fa8cca847bf35652111bd7539;;;;;1;1;automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc*** reason for rollback ***breaking a number of projects*** original change description ***add rangemap#merge analogous to map#merge***-------------created by moe: https://githubcom/google/moemoe_migrated_revid256288437;
3531;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that sortedsetmultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.  09bf107763561ae37ddd99cf024d6c5604eedfff  -------  <p> remove unneeded @suppresswarnings from @benchmark methods.  relnotes=none  3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f  -------  <p> rename a method to avoid j2objc collisions  prevent j2objc from treating  getaddsuppressed  as a getter by renaming it  generateaddsuppressed . this silences a -wobjc-property-implementation warning  soon  such warnings will become errors. see the referenced bug for full context.  cc5a55e487791db6ab2b7a98bcfd1be69d7a3638;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> clarify that sortedsetmultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order09bf107763561ae37ddd99cf024d6c5604eedfff-------<p> remove unneeded @suppresswarnings from @benchmark methodsrelnotesnone3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f-------<p> rename a method to avoid j2objc collisionsprevent j2objc from treating `getaddsuppressed` as a getter by renaming it `generateaddsuppressed` this silences a -wobjc-property-implementation warning soon such warnings will become errors see the referenced bug for full contextcc5a55e487791db6ab2b7a98bcfd1be69d7a3638;@ronshapiro the comment above looks like a very strange attempt at spam vote to remove it? :)(if you agree ill remove this comment too to prevent confusion) ||;;;;1;1;rename a method to avoid j2objc collisionsprevent j2objc from treating `getaddsuppressed` as a getter by renaming it `generateaddsuppressed` this silences a -wobjc-property-implementation warning soon such warnings will become errors see the referenced bug for full contextrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid257616241;
3533;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add rangemap#merge  analogous to map#merge.  rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add rangemap#merge analogous to map#mergerollback of 8000dc992d0124372972729b20df40a42b27a849cebc1985b8d64f3960e363b5641428447e6d33ae;;;;;1;1;add rangemap#merge analogous to map#mergerollback of 8000dc992d0124372972729b20df40a42b27a849-------------created by moe: https://githubcom/google/moemoe_migrated_revid258637808;
3551;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove inaccurate comment.  2cc9ccd8f58402927f4903ebf40f19a63f47c789  -------  <p> change the splitter::limit arg to maxitems  for ide usage.  the old name of  limit  was uninformative when presented in e.g. ide autocompletions.  maxitems  will help distinguish it from the alternative meaning of max number of splits to make.  013d0f1b058f7c6e3ac159745fcead5f481f5b66  -------  <p> gwt.xml change from internal change.  a13896bd6b55883dbe1f4ae71603597f3831a89d  -------  <p> add mediatype for  image/heif  and  image/jp2   relnotes=add mediatype for  image/heif  and  image/jp2   4c70d7f3c3083946aa74e59098b51f521da27239  -------  <p> change a use of iterable.foreach  which isn t available under desugar.  6508a374b7483ea2ec7f5170b94489cb9dc3537d;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove inaccurate comment2cc9ccd8f58402927f4903ebf40f19a63f47c789-------<p> change the splitter::limit arg to maxitems for ide usagethe old name of `limit` was uninformative when presented in eg ide autocompletions `maxitems` will help distinguish it from the alternative meaning of max number of splits to make013d0f1b058f7c6e3ac159745fcead5f481f5b66-------<p> gwtxml change from internal changea13896bd6b55883dbe1f4ae71603597f3831a89d-------<p> add mediatype for ""image/heif"" and ""image/jp2""relnotesadd mediatype for ""image/heif"" and ""image/jp2""4c70d7f3c3083946aa74e59098b51f521da27239-------<p> change a use of iterableforeach which isnt available under desugar6508a374b7483ea2ec7f5170b94489cb9dc3537d";;;;;1;1;change a use of iterableforeach which isnt available under desugar-------------created by moe: https://githubcom/google/moemoe_migrated_revid260986815;
3560;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix an issue where the inputstream returned by baseencoding.decodingstream(reader) could fail to throw decodingexception while decoding an invalid string.  this was caused by the default behavior of inputstream.read(byte  int  int)  which swallows any ioexception thrown by any call to the single-byte read() method other than the first. to fix it  just override that method with an implementation that does not swallow any exceptions.  fixes   4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> add more clarification on what  access  means in expireafteraccess(). previous comment doesn t mention  containskey()   copied from   relnotes=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> document that hashbimap.containsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmap.containsvalue()).  1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> add note about {@code bytesource.wrap} s use of the given byte array.  fixes   9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> fix  by implementing a proper  collectspliterators.flatmapto{int long double} .  also  modify the existing  collectspliterators.flatmap  to accept  null  from its  function  by treating it as an empty  stream   like  stream.flatmap  does. add tests for this behavior.  to test that the new methods also accept  null  through both their  {int long double}consumer  apis and their  consumer  apis  add  of{int long double}  methods to  spliteratortester . they test the given  spliterator.of{int long double}  through both apis.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> temporarily update public_suffix to include web.app  without this  developers are not able to set up google oauth clients with urls in firebase hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262;;1973.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix an issue where the inputstream returned by baseencodingdecodingstream(reader) could fail to throw decodingexception while decoding an invalid stringthis was caused by the default behavior of inputstreamread(byte int int) which swallows any ioexception thrown by any call to the single-byte read() method other than the first to fix it just override that method with an implementation that does not swallow any exceptionsfixes  add more clarification on what ""access"" means in expireafteraccess()previous comment doesnt mention ""containskey()""copied from  changef2bd7744e575393f065253c8f1bc2a512d452b63-------<p> document that hashbimapcontainsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmapcontainsvalue())19737d57c233c9922ca9adbbef552b5f8f66bd7856f0-------<p> add note about {@code bytesourcewrap}s use of the given byte arrayfixes  fix  by implementing a proper `collectspliteratorsflatmapto{intlongdouble}`also modify the existing `collectspliteratorsflatmap` to accept `null` from its `function` by treating it as an empty `stream` like `streamflatmap` does add tests for this behaviorto test that the new methods also accept `null` through both their `{intlongdouble}consumer` apis and their `consumer` apis add `of{intlongdouble}` methods to `spliteratortester` they test the given `spliteratorof{intlongdouble}` through both apis0763099e769963bd0d93f865a4e7c3a5b320085a-------<p> temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain41b8aeaeb71cab1a151d4359a409bfd54bb81262";;javadoc of hashbimap#containsvalue #inverse;the inherited doc should be overridden and mentioned that containsvalue works in o(1) time in contrast to o(n) with a normal hashmapthe javadoc for #inverse should mention that it always returns the same inverse instance and thus saving the inverse as a separate instance variable is not mandatory to reduce overhead;ill put this on my list thankson fri feb 13 2015 at 5:05 am louis-cyphre notifications@githubcomwrote:> the inherited doc should be overridden and mentioned that containsvalue> works in o(1) time in contrast to o(n) with a normal hashmap> > the javadoc for #inverse should mention that it always returns the same> inverse instance and thus saving the inverse as a separate instance> variable is not mandatory to reduce overhead> > —> reply to this email directly or view it on github>  kevin bourrillion | java librarian | google inc | googlecom || is this issue approved? ||;1;0;temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain-------------created by moe: https://githubcom/google/moemoe_migrated_revid263577879;
3572;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add tostring() to forwardingfluentfuture  to match forwardingfuture  relnotes=n/a  cedfa4a718a128d30f9af953f304b425b52b6f94;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add tostring() to forwardingfluentfuture to match forwardingfuturerelnotesn/acedfa4a718a128d30f9af953f304b425b52b6f94;;;;;1;1;add tostring() to forwardingfluentfuture to match forwardingfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid264467645;
3573;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;automated g4 rollback of changelist 263577879*** original change description ***temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain***-------------created by moe: https://githubcom/google/moemoe_migrated_revid264649425;
3575;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constant for the upgrade-insecure-requests header.    relnotes=adds constant for the upgrade-insecure-requests header.  7e5aa662985c6e54396b1e751149bef17236bc27;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adds constant for the upgrade-insecure-requests header constant for the upgrade-insecure-requests header7e5aa662985c6e54396b1e751149bef17236bc27;is there any reason why the javadoc for the user-agent field has been removed while adding the new field? || thanks looks like a mistake will fix ||;;;;1;1;adds constant for the upgrade-insecure-requests header constant for the upgrade-insecure-requests header-------------created by moe: https://githubcom/google/moemoe_migrated_revid264984423;
3578;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> restore javadoc unintentionally lost in cl 264984423.    0a9ddbca861d787f2b1d110905e043c25dacfc89;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> restore javadoc unintentionally lost in cl 264984423https://githubcom/google/guava/pull/3575#issuecomment-5244402210a9ddbca861d787f2b1d110905e043c25dacfc89;;;;;1;1;restore javadoc unintentionally lost in cl 264984423 by moe: https://githubcom/google/moemoe_migrated_revid265346398;
3579;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix  bug  link that was actually a cl.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> simplify while+break into do-while.  3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> release resources of whenallsucceed/whenallcomplete once input futures are complete.  relnotes=fixes potential memory leak in futures.whenallsucceed/whenallcomplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> prepare for removing gwt-rpc support for guava types by adding a system property that disables it.  when the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.    967010aa4d5ecf35fd3861913c3f17c10c4f6d40;;3577.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix ""bug"" link that was actually a cl4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8-------<p> simplify while+break into do-while357739aadb3531f7d73ed634780abe2679c9e42bcb17-------<p> release resources of whenallsucceed/whenallcomplete once input futures are completerelnotesfixes potential memory leak in futureswhenallsucceed/whenallcompletea840d5bec35b56a6a6e195477e35a1b0e92d3681-------<p> prepare for removing gwt-rpc support for guava types by adding a system property that disables itwhen the time comes well flip the default value and users who didnt see our earlier warnings can use a system property to restore support until they can stop serializing our types967010aa4d5ecf35fd3861913c3f17c10c4f6d40";;simply code rp;;     clas look good thanks!  || thanks we mostly avoid lambdas because we have a java 7 backport and we want to minimize diffs between the mainline and the backport ill get the `while` change   ok i have received your messag ||;1;0;prepare for removing gwt-rpc support for guava types by adding a system property that disables itwhen the time comes well flip the default value and users who didnt see our earlier warnings can use a system property to restore support until they can stop serializing our types-------------created by moe: https://githubcom/google/moemoe_migrated_revid265490471;
3583;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> release the input futures as soon as we submit the combiner task. but really  redo how we release resources in general.  this is a followup to cl 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadn t if the combiner returned a future that was still pending). that cl was good enough for practical purposes  but i wanted to better understand how we release resources.  this cl standardizes on aggregatefuture.releaseresources() as the way to null out all fields[*]  merging logic from releaseresources()  releaseresourcesafterfailure()  and asynccallableinterruptibletask.setvalue(). as part of that  it merges aggregatefuture and aggregatefuturestate/runningstate into a single object.  [*] ok  except seenexceptions  which gets its own handling. as a bonus  i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case. specifically  it clears it when all inputs   rather than when the combiner task has finished running.  it turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. combinedfuture.releaseresources() can t null out  task  until the future is done or the task is done running. that s because it may need to interrupt the task. to handle this  i don t null out  task  in releaseresources() unless isdone(). to ensure that  task  still gets nulled out as soon as it s done running  i null it out directly in afterraninterruptibly(). (ok  this is another exception to my claim that releaseresources() handles nulling out  all  fields....)  2. even if the output future is done  processcompleted() sometimes needs access to the original futures in order to see whether any of them failed. to handle this  i store them in the listener and pass them through to processcompleted() (when necessary).  the changes to prod code are net negative in line count  at least ignoring the added comments. i ve also added a couple tests  only one of which passed before this cl. and i think the model for when fields are nulled out is overall clearer after this cl. so hopefully this cl is a step forward  despite the complexity of the changes and the remaining complexity in the code. (i also included a few unrelated simplifications  like not bothering to check collectsvalues before calling collectonevalue(...).)  (aside: this cl s releaseresources() is like our proposed aftercommit() api but different. first  releaseresources() may be called even before set() or setasync() in the combinedfuture case. second  combinedfuture may rely on the fact that it s called twice in some cases: it s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . but that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so combinedfuture is unlikely to hold the final reference to it. anyway  for more discussion of aftercommit()  see     41a8adb81e2ebf27e9d85f70671ff8f97fd7721b;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> release the input futures as soon as we submit the combiner task but really redo how we release resources in generalthis is a followup to cl 265489523 which ""only"" released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadnt if the combiner returned a future that was still pending) that cl was good enough for practical purposes but i wanted to better understand how we release resourcesthis cl standardizes on aggregatefuturereleaseresources() as the way to null out all fields[*] merging logic from releaseresources() releaseresourcesafterfailure() and asynccallableinterruptibletasksetvalue() as part of that it merges aggregatefuture and aggregatefuturestate/runningstate into a single object[*] ok except seenexceptions which gets its own handling as a bonus i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case specifically it clears it when all inputs  rather than when the combiner task has finished runningit turns out that blindly nulling out fields is too aggressive so we need to be careful in 2 cases:1 combinedfuturereleaseresources() cant null out `task` until the future is done or the task is done running thats because it may need to interrupt the task to handle this i dont null out `task` in releaseresources() unless isdone() to ensure that `task` still gets nulled out as soon as its done running i null it out directly in afterraninterruptibly() (ok this is another exception to my claim that releaseresources() handles nulling out ""all"" fields)2 even if the output future is done processcompleted() sometimes needs access to the original futures in order to see whether any of them failed to handle this i store them in the listener and pass them through to processcompleted() (when necessary)the changes to prod code are net negative in line count at least ignoring the added comments ive also added a couple tests only one of which passed before this cl and i think the model for when fields are nulled out is overall clearer after this cl so hopefully this cl is a step forward despite the complexity of the changes and the remaining complexity in the code (i also included a few unrelated simplifications like not bothering to check collectsvalues before calling collectonevalue())(aside: this cls releaseresources() is like our proposed aftercommit() api but different first releaseresources() may be called even before set() or setasync() in the combinedfuture case second combinedfuture may rely on the fact that its called twice in some cases: its called once when all inputs complete but it doesnt null out `task` and then it can be called again if the output is cancelled at which point it *does* null out `task` but that probably doesnt matter too much because the task was probably handed to an executor in the meantime so combinedfuture is unlikely to hold the final reference to it anyway for more discussion of aftercommit() see https://githubcom/google/guava/issues/2886)41a8adb81e2ebf27e9d85f70671ff8f97fd7721b";;;;;1;1;"release the input futures as soon as we submit the combiner task but really redo how we release resources in generalthis is a followup to cl 265489523 which ""only"" released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadnt if the combiner returned a future that was still pending) that cl was good enough for practical purposes but i wanted to better understand how we release resourcesthis cl standardizes on aggregatefuturereleaseresources() as the way to null out all fields[*] merging logic from releaseresources() releaseresourcesafterfailure() and asynccallableinterruptibletasksetvalue() as part of that it merges aggregatefuture and aggregatefuturestate/runningstate into a single object[*] ok except seenexceptions which gets its own handling as a bonus i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case specifically it clears it when all inputs  rather than when the combiner task has finished runningit turns out that blindly nulling out fields is too aggressive so we need to be careful in 2 cases:1 combinedfuturereleaseresources() cant null out `task` until the future is done or the task is done running thats because it may need to interrupt the task to handle this i dont null out `task` in releaseresources() unless isdone() to ensure that `task` still gets nulled out as soon as its done running i null it out directly in afterraninterruptibly() (ok this is another exception to my claim that releaseresources() handles nulling out ""all"" fields)2 even if the output future is done processcompleted() sometimes needs access to the original futures in order to see whether any of them failed to handle this i store them in the listener and pass them through to processcompleted() (when necessary)the changes to prod code are net negative in line count at least ignoring the added comments ive also added a couple tests only one of which passed before this cl and i think the model for when fields are nulled out is overall clearer after this cl so hopefully this cl is a step forward despite the complexity of the changes and the remaining complexity in the code (i also included a few unrelated simplifications like not bothering to check collectsvalues before calling collectonevalue())(aside: this cls releaseresources() is like our proposed aftercommit() api but different first releaseresources() may be called even before set() or setasync() in the combinedfuture case second combinedfuture may rely on the fact that its called twice in some cases: its called once when all inputs complete but it doesnt null out `task` and then it can be called again if the output is cancelled at which point it *does* null out `task` but that probably doesnt matter too much because the task was probably handed to an executor in the meantime so combinedfuture is unlikely to hold the final reference to it anyway for more discussion of aftercommit() see  by moe: https://githubcom/google/moemoe_migrated_revid266130757";
3586;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> let listenablefuture implement thenable via a default interface method in j2cl  relnotes=let listenablefuture implement thenable via a default interface method in j2cl  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    a793784ba71562cdabf41ba87aad849440b145a7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> let listenablefuture implement thenable via a default interface method in j2clrelnoteslet listenablefuture implement thenable via a default interface method in j2clf6bb300d5fe145486dbeb28c544867f562ddc185-------<p> let listenablefuture implement thenable via a default interface method in j2cl***f45705983f8dbaf48896b8ec783b4d56e7b1f184-------<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable //wwwchromiumorg/developers/calendar#toc-estimated-stable-datesa793784ba71562cdabf41ba87aad849440b145a7;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable: by moe: https://githubcom/google/moemoe_migrated_revid266255422;
3588;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> modify comment about safeoctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> modify comment about safeoctetslength to be consistent with codef7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;;;;1;1;modify comment about safeoctetslength to be consistent with coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid266379201;
3597;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure)98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;;;;1;1;explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid267421508;
3605;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> combine immediatesuccessfulfuture into immediatefuture.  immediatefuture used to have other implementations  but we switched those to extend trustedfuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> fix (and in one case  suppress) low-hanging rawtypes warnings.  it looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt). in fact  i had to revert one similar change because it broke a gwt build. i m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> combine immediatesuccessfulfuture into immediatefutureimmediatefuture used to have other implementations but we switched those to extend trustedfuture insteadd780cd5f2b0ccc2610c039c30c04e987771dd0a5-------<p> rollback previous commit0812745bec6e345b232154d815ad242cbb4fda37-------<p> roll forward previous rollback but without making the type final4c984c649e1f4665a7dbee5f568cfa25def76727-------<p> fix (and in one case suppress) low-hanging rawtypes warningsit looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt) in fact i had to revert one similar change because it broke a gwt build im hoping that that means that the others are safecabc402dbf3805f04e19ba9d72e7f8802ab6bb75-------<p> increase various tests timeouts25842ed29c2c13b949836082552c5fee0cdcb0d5;;;;;1;1;increase various tests timeouts-------------created by moe: https://githubcom/google/moemoe_migrated_revid268726044;
3618;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> export new atomiclongmapbashertest to open-source repo.    704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> add @lazyinit and @retainedwith annotations to the lazily calculated  entries  field of immutablesetmultimap.  this field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl.  this is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220.  it produces a tiny diff between the common.base and common.collect copies of abstractiterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> add splitter.splittostream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> add comment explaining table and multiplier in charmatcher.whitespace  1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> rollback of adding splitter.splittostream().  *** reason for rollback ***  my guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> clean up leftovers from mapmaker.makecomputingmap:  - remove makecomputingmap from the gwt emulation. - deprecate computationexception.  0b93365c2440981c04a94f6e5596d3f723549ea3;;1661.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> export new atomiclongmapbashertest to open-source repo add @lazyinit and @retainedwith annotations to the lazily calculated ""entries"" field of immutablesetmultimapthis field is lazily evaluated by entries() without holding a lock but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance996369d89362e0ec93f7dd6e9a6860aa08858c80-------<p> let listenablefuture implement thenable via a default interface method in j2clthis is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were 44909d9d5fc5b394c710a6b8b0d6c3786c765af5-------<p> add test for behavior described in #19007329a66694d59bb22e2589eb9a2f620c98a881f9-------<p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220it produces a tiny diff between the commonbase and commoncollect copies of abstractiteratorc82f7916879a46539a1e53ac98dda90e9c5537b8-------<p> add splittersplittostream()6c984121f74d5cea97ac1ffabfe98938bc7c96c4-------<p> add comment explaining table and multiplier in charmatcherwhitespace16615430b140cae37b078fd4dda9b1a57a025664cfe1-------<p> rollback of adding splittersplittostream()*** reason for rollback ***my guess is that this change somehow upsets an allowed list ofone-definition violations3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391-------<p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl38c9a029e6cc538bcc46b9ad23fe03a62739d433-------<p> clean up leftovers from mapmakermakecomputingmap:- remove makecomputingmap from the gwt emulation- deprecate computationexception0b93365c2440981c04a94f6e5596d3f723549ea3";i see `splittersplittostream()` was added and removed again are there plans to open-source it in the future?    || > i see `splittersplittostream()` was added and removed again are there plans to open-source it in the future?   it is being reintroduced in #3623 nice :) ||;would like implementation comments explaining charmatcherwhitespace_multiplier; there is a magic number in the charamatcher : whitespace_multiplier  1682554634wanntted a testcase or formula get this value  at least need a javadoc to comment it; hmm  how about put it in wiki or comment it in someplace   anticipate whitespacematchergenerator   || i just came across this and had the same confusion unexplained magic numbers are confusing you dont need formal comments but a brief explanation would demystify the code something like this would suffice:// table is a precomputed hashset of whitespace characters multiplier serves as a hash function// whose key property is that it maps 25 characters into the 32-slot table without collision || fix mirroring out soon || ";1;0;clean up leftovers from mapmakermakecomputingmap:- remove makecomputingmap from the gwt emulation- deprecate computationexception-------------created by moe: https://githubcom/google/moemoe_migrated_revid270019222;
3621;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> test iteration over a collection containing nullf9675a07e0fa21ce705626cdcc95101b95f46531;;;;;1;1;test iteration over a collection containing null-------------created by moe: https://githubcom/google/moemoe_migrated_revid270909197;
3623;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> add splitter.splittostream().  61affd0d3d70fdadf90100d54e1a83425b717f56;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> s/a/an/e2564c321bd3bc71cbb77a6af7ccac1be30e9b46-------<p> add splittersplittostream()61affd0d3d70fdadf90100d54e1a83425b717f56;;;;;1;1;add splittersplittostream()-------------created by moe: https://githubcom/google/moemoe_migrated_revid271168270;
3627;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add futuressubmit()relnotes`utilconcurrent`: added `futuressubmit()`479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;;;;1;1;add futuressubmit()relnotes`utilconcurrent`: added `futuressubmit()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid271840585;
3630;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;fix 2 bugs in mediatype parameter handling:1 make empty parameter values serialize to a quoted string2 require parameter values to be asciifixes   made `mediatype` serialize empty parameter values to quoted strings  made `mediatype` reject non-ascii parameter values-------------created by moe: https://githubcom/google/moemoe_migrated_revid272190935;
3634;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> add constant for the cross-origin-opener-policy header.    relnotes=adds constant for the cross-origin-opener-policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add missing @since 20052ba7eb195ad4c1f8095d99216610df39ce4e644-------<p> add constant for the cross-origin-opener-policy headerrelnotesadds constant for the cross-origin-opener-policy headeraa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;;;;1;1;add constant for the cross-origin-opener-policy headerrelnotesadds constant for the cross-origin-opener-policy header-------------created by moe: https://githubcom/google/moemoe_migrated_revid272415924;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;2677.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;add a mime type mpeg-dash (mpd files);this format is becoming a thing i couldnt find it in guavas media types;   ;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3210.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;quantilesscaleandindexes#computeinplace throws an unexpected arrayindexoutofboundsexception if the array indexes is empty;in `quantilesscaleandindexes#computeinplace` if the array `indexes` of `quantilesscaleandindexes` is empty an unexpected `arrayindexoutofboundsexception` is thrownthe problem is if the last argument(`int indexes`) of `quantilesscaleandindexes` constructor is length of 0 `computeinplace` passes an invalid negative value as the third argument to the private method `selectallinplace` and causes the error to reproduce run this code:```javaimport comgooglecommonmathquantilesimport javautilmappublic class emptyindexes {   public static void main(string args) {       int empty  {}       int scale  10       int dataset {0 1 2 3 4 5}       quantilesscaleandindexes sai  quantilesscale(scale)indexes(empty)       map<integer double> map  saicomputeinplace(datatset_double)   }}```the program throws `arrayindexoutofboundsexception`this is an unfriendly error that can be easily  by using `checkargument()` in constructor of `quantilesscaleandindexes`;link to proposed fix: [pr #3211]( || thanks for this @nhatdinh  i guess we missed this error case ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3211.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;check the array indexes in quantilesscaleandindexes is non empty;fix [issue #3210 ](https://githubcom/google/guava/issues/3210);   ;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3382.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;document the jdk 9+ alternative to `iterators#forenumeration`;- copied the phrasing from the various `streamsstream(optional*)` methods- didnt update the documentation in the android code base (which also mirrors the approach taken for the `streamsstream(optional*)` methods)- not completely sure whether the `unmodifiableiterator`/`iterator` distinction is worth pointing out;the jdk 11 build failures are unrelated to this change ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3580.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;simplify some code;remove some redundant if statementbesides i use toarray(new myclass[0])  replace toarray(new myclass[mylistsize()]) for improving the  efficiency  of the codehttps://stackoverflowcom/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size;       i signed it! || clas look good thanks!  || -1 on the localcache changes just as commented in pr #3492 this fixes what is presumably reported by an ide at the expense of readability for no real reason  || @ljacqu ohsorry i prefer the version that i commit because i would do the same thing in my daily codingi can also understand that different projects have different coding styles do you mean that all the changes of if statement is unnecessary? if you think so i would revert them into the master version! || @ljacqu  i think that sum  0 needs to be preserved because sum  0 itself has the meaning of isempty positive thinking is more conducive to peoples understanding than negative thinkingif you do not agree with that i can also revert other if statement to the master versionlook forward to your reply || sorry if there was any misunderstanding i‘m not in any way affiliated/involved with guava – i just posted a comment as an individual passing by :) || @ljacqu  that’s all righti am very glad that you can reply to this prthanks for your suggestion ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3636;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3;;3453.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add testlib readme34533b0f1e580b4e0bde8fd4806c832389d0aade4063-------<p> change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided6a2d070ac268c138d6ad039605de54f535d5f5f3;;add testlib readme;;;1;0;change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided-------------created by moe: https://githubcom/google/moemoe_migrated_revid272459623;
3637;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83;;3633.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> bump version which went out of date since the previous cl was created90f4a1c88941d1d68ec2fc68397a5e11fefa7355-------<p> use if statement instead of for statement for a single item3633020621e474e228b4b9c12dbd24badd9590b0af8e-------<p> upgrade maven source plugin from 212 to 310fixes  document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes https://githubcom/google/guava/pull/3383145da12d85b536d6f2a527e1ccf2430147fa6b83;;code improvement `if` statement instead of a for `statement` to a single item;code improvement using `if` statement instead of a for `statement` to a single itemi also found some classes with empty methods that are not being used by the project is this correct? if these methods can be removed id like to open a pr for thisex: `allequalordering_customfieldserializerdeserialize(serializationstreamreader reader allequalordering instance)`;     clas look good thanks!  || thanksthe `customfieldserializer` methods are used through reflection by [gwt]( during its gwt-rpc serialization (were actually removing support for that at the beginning of next year but well take care of it then) ||;1;0;document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes  by moe: https://githubcom/google/moemoe_migrated_revid272511395;
3640;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change tryparse methods to explicitly document that they throw npe if the input is null.  this is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  fixes   995c07eb95d5e5fac35f3f1219dbb4e4bed83d11;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change tryparse methods to explicitly document that they throw npe if the input is nullthis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception ""if parsing fails""fixes https://githubcom/google/guava/issues/1259995c07eb95d5e5fac35f3f1219dbb4e4bed83d11";;;;;1;1;"change tryparse methods to explicitly document that they throw npe if the input is nullthis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception ""if parsing fails""fixes  by moe: https://githubcom/google/moemoe_migrated_revid272520863";
3644;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove duplicate null check from enummultiset.  fixes   079d1732c6740da9d499b2ff4c94fb37b1b66b57;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove duplicate null check from enummultisetfixes https://githubcom/google/guava/pull/3559079d1732c6740da9d499b2ff4c94fb37b1b66b57;   ;;;;1;1;remove duplicate null check from enummultisetfixes  by moe: https://githubcom/google/moemoe_migrated_revid272892514;
3648;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> address tsan errors:1 suppress safe racy init in abstractmultiset and hashbimap all the classes that are stored in the newly annotated fields have only final fields (except hashbimapinverse which inherits abstractbimaps keyset and values fields which are themselves @lazyinit) so they are safe to read racily2 mark some graph ""cache"" fields as volatile these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get()) the graph stores the entry in a field that way if the user then queries it again (such as to look up the value associated with a key during iteration) the graph doesnt have to perform a potentially mildly expensive lookup but this caching isnt implemented in a thread-safe way it *ought* to be safe to initialize a graph in one thread safely publish it and then read it concurrently from other threads but because of the racy reads of the cached entry fields i dont think this is guaranteed to be saferelnotes`graph`:  data race07eba15451f7d0dc10ab8328a6d595ab1e68abac";;;;;1;1;"address tsan errors:1 suppress safe racy init in abstractmultiset and hashbimap all the classes that are stored in the newly annotated fields have only final fields (except hashbimapinverse which inherits abstractbimaps keyset and values fields which are themselves @lazyinit) so they are safe to read racily2 mark some graph ""cache"" fields as volatile these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get()) the graph stores the entry in a field that way if the user then queries it again (such as to look up the value associated with a key during iteration) the graph doesnt have to perform a potentially mildly expensive lookup but this caching isnt implemented in a thread-safe way it *ought* to be safe to initialize a graph in one thread safely publish it and then read it concurrently from other threads but because of the racy reads of the cached entry fields i dont think this is guaranteed to be saferelnotes`graph`:  data race-------------created by moe: https://githubcom/google/moemoe_migrated_revid273585560";
3650;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> require tokens to be non-empty.  followup to cl 272190935.  fixes  (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  relnotes=***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> steam -> stream in the names of certain locals in bytestream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [opensearch] add mediatype for  application/opensearchdescription+xml   relnotes=add mediatype for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> revert previous cl:  ============ log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> require tokens to be non-emptyfollowup to cl 272190935fixes  (again :))b080067280ab22f262880d222c0a75d043962f4f-------<p> log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerablerelnotes***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled set the `guavagwtemergency_reenable_rpc` system property to `false`750db498a0108802f3de1905a2a56d956cd9cda3-------<p> steam -> stream in the names of certain locals in bytestream0ee31e21a41be3f87831446374e323c7f08f0011-------<p> [opensearch] add mediatype for ""application/opensearchdescription+xml""relnotesadd mediatype for ""application/opensearchdescription+xml""6be97d88570e0990fbe5a91326620df9f2a09853-------<p> revert previous cl:log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerable82838c5a9a161937c4ac91f3abd3bf7a26202f53";;;;;1;1;revert previous cl:log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerable-------------created by moe: https://githubcom/google/moemoe_migrated_revid273825377;
3654;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3;;3652.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> switch to an internal annotation for ignoring jrerequirements3652relnotesremoved dependency on `animal-sniffer-annotations`3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86-------<p> rename package-private duration apis:  saturatedtonanos() -> tonanossaturated()  saturatedtomillis() -> tomillissaturated()#goodtimef3a053ea12ae808ddd52094d36fcd88fe95881f2-------<p> suppress more goodtime errors9e885c85265c3686aa876acebe6bb6bda18de1f3;;switch to an internal annotation for ignoring jre requirements; this completely removes the dependency on animal-sniffer annotations;(thanks!) ||;1;0;suppress more goodtime errorsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid274023658;
3657;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add stream support to stats and statsaccumulator.  this adds:  - a static method stats.tostats() that returns a collector<number  statsaccumulator  stats>.  - stats.of overloads and statsaccumulator.addall overloads that take doublestream  intstream  and longstream.  - a statsaccumulator.addall overload that takes statsaccumulator.  (in passing  this also improves the tests in a couple of ways. it removes the use of static initializer blocks in statstesting  which is contrary to best practice. and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values. this latter change fixes the errorprone warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. it just happened that everything was close enough before.)  relnotes=add stream support to stats and statsaccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add stream support to stats and statsaccumulatorthis adds: - a static method statstostats() that returns a collector<number statsaccumulator stats> - statsof overloads and statsaccumulatoraddall overloads that take doublestream intstream and longstream - a statsaccumulatoraddall overload that takes statsaccumulator(in passing this also improves the tests in a couple of ways it removes the use of static initializer blocks in statstesting which is contrary to best practice and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values this latter change fixes the errorprone warnings that in some cases the tolerance was actually less than the difference between the expected value and the next nearest double it just happened that everything was close enough before)relnotesadd stream support to stats and statsaccumulatora59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;;;;1;1;add stream support to stats and statsaccumulatorthis adds: - a static method statstostats() that returns a collector<number statsaccumulator stats> - statsof overloads and statsaccumulatoraddall overloads that take doublestream intstream and longstream - a statsaccumulatoraddall overload that takes statsaccumulator(in passing this also improves the tests in a couple of ways it removes the use of static initializer blocks in statstesting which is contrary to best practice and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values this latter change fixes the errorprone warnings that in some cases the tolerance was actually less than the difference between the expected value and the next nearest double it just happened that everything was close enough before)relnotesadd stream support to stats and statsaccumulator-------------created by moe: https://githubcom/google/moemoe_migrated_revid274998178;
3658;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> resolve some rawtypes warnings in converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> resolve some rawtypes warnings in converter4e37244fb859e1f99ce3356ffab5b2e8333ad268;;;;;1;1;resolve some rawtypes warnings in converterrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid275108038;
3664;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix bytestreams.skipupto to avoid making unnecessary allocations.  - fixes  - closes   cb0ac2bf8a3a95862b1209fe11a35403554ca611;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix bytestreamsskipupto to avoid making unnecessary allocations- fixes  closes https://githubcom/google/guava/issues/3663cb0ac2bf8a3a95862b1209fe11a35403554ca611; cla signed @  ||;;;;1;1;fix bytestreamsskipupto to avoid making unnecessary allocations- fixes  closes  by moe: https://githubcom/google/moemoe_migrated_revid275531490;
3675;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2019-10-29;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move the setfuture check into abstractfuture.tostring() and out of pendingtostring()  so that even if the latter is overriden we can include the setfuture detail.  this is useful for futures that initially do some of their own work  but then delegate to setfuture()  as futurecombiner.callasync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;0;moe sync 2019-10-29;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> move the setfuture check into abstractfuturetostring() and out of pendingtostring() so that even if the latter is overriden we can include the setfuture detailthis is useful for futures that initially do some of their own work but then delegate to setfuture() as futurecombinercallasync() does68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;;;;1;1;move the setfuture check into abstractfuturetostring() and out of pendingtostring() so that even if the latter is overriden we can include the setfuture detailthis is useful for futures that initially do some of their own work but then delegate to setfuture() as futurecombinercallasync() doesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid277087923;
3677;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-10-31;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b;;3507.0;moe sync 2019-10-31;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2cathis is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c-------<p> handle stackoverflowerror from both pendingtostring and appenduserobjectadds a bunch of tests to validate error handling in tostring code- verify that a future completing during the tostring call results in a done formatted string- verify that an exception thrown by pendingtostring doesnt cause tostring to fail- verify that cycles dont cause tostring to fail- verify that deep chains of setfuture dont cause tostring to failrelnotescatch stackoverflowerror in abstractfuturetostring to prevent long chains of futures from failing tostring calls29981d416d6b4214e65360ad3d932ba0881a4c8f-------<p> update documentation35078a0d6bb345341fc0ba91781070da5b522d4b714b;;update javadoc of unsignedbytesjava;unsignedbytes ```min()``` and ```max()``` method treat its parameter as unsigned and returns the least and greatest value also too as unsigned respectively it should be updated in the javadoctest case:-input:-```import comgooglecommonprimitivesunsignedbytesclass ex{    static void pr(byte a) {        systemoutprintln(unsignedbytesmin(a)) // 10 is less than -100 when treated as unsigned        systemoutprintln(unsignedbytesmax(a)) // -100 is greater than 10 when treated as unsigned    }    public static void main(string args) {        byte a{-10010}        pr(a)    }}```run it by typing in the terminal:-```javac exjavajava ex```output:-```10-100```;  >  > >     >   for more info** || it looks like we do mention unsignedness in the javadoc of other methods on the class so this seems reasonable ill try to get this submitted internally soon (with a couple small modifications) ||;1;0;update documentation3507-------------created by moe: https://githubcom/google/moemoe_migrated_revid277725484;
3684;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @suppresswarnings( donotmock ) to mocked com.google.common types  @donotmock will be added to these types. this change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> add graphbuilder.incidentedgeorder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> remove usages of deprecated charmatcher functions  3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> have immutablegraph.builder set incidentedgeorder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> migrate org.mockito.matchers#any* to org.mockito.argumentmatchers  the former is deprecated and replaced by the latter in mockito 2. however  there is a functional difference: argumentmatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(class)  or  anyint() ).  any()  will remain to accept anything.  all remaining  any(class)  references are migrated to  nulllable(class)  to maintain the functionality of mockito 1. all remaining  anystring()  references are migrated to  nullable(string.class)  to maintain the functionality of mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d;;3565.0;moe sync 2019-11-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add @suppresswarnings(""donotmock"") to mocked comgooglecommon types@donotmock will be added to these types this change suppresses warnings for current cases where these types are mocked13ed6d3846bb3765b19ec06819a215ae93644b6c-------<p> add graphbuilderincidentedgeorder()2c1db61cfae457a58554f4390c3907f18f406b6a-------<p> remove usages of deprecated charmatcher functions3565213ec90d8647412c4d25870fbc1c8bb3a44798ff-------<p> have immutablegraphbuilder set incidentedgeorder to stable()c43a2bf57ccc089bb64f2704321e175a611cdc4b-------<p> migrate orgmockitomatchers#any* to orgmockitoargumentmatchersthe former is deprecated and replaced by the latter in mockito 2 however there is afunctional difference: argumentmatchers will reject `null` and check the typeif the matcher specified a type (eg `any(class)` or `anyint()`) `any()` willremain to accept anythingall remaining `any(class)` references are migrated to `nulllable(class)` to maintain the functionality of mockito 1all remaining `anystring()` references are migrated to `nullable(stringclass)` to maintain the functionality of mockito 13e96e06575ea0bb1e8be61ce2edd57ac9427c71d";;remove usages of deprecated charmatcher functions;methods like charmatcherdigit() or javaletterdigit() which would match digit and digit or letters in string is being deprecated by guava such methods are replace by inrange methods for example instead of digit() it would be inrange(0 9)this pr closes #3544;           i  it || clas look good thanks!  ||;1;0;migrate orgmockitomatchers#any* to orgmockitoargumentmatchersthe former is deprecated and replaced by the latter in mockito 2 however there is afunctional difference: argumentmatchers will reject `null` and check the typeif the matcher specified a type (eg `any(class)` or `anyint()`) `any()` willremain to accept anythingall remaining `any(class)` references are migrated to `nulllable(class)` to maintain the functionality of mockito 1all remaining `anystring()` references are migrated to `nullable(stringclass)` to maintain the functionality of mockito 1-------------created by moe: https://githubcom/google/moemoe_migrated_revid278736072;
3690;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify some range constraints.  fixes   88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> add javadoc in attempt to help readers differentiate futures.allaslist() vs futures.successfulaslist().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> fix broken links in atomicdouble.  see   6c501c499020db010dd96918c26b3a07a655a1dd;;0;moe sync 2019-11-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify some range constraintsfixes  add javadoc in attempt to help readers differentiate futuresallaslist() vs futuressuccessfulaslist()980e6e68b72c1adb89b01862b12fdf554b1d5f33-------<p> fix broken links in atomicdoublesee https://githubcom/google/guava/pull/36896c501c499020db010dd96918c26b3a07a655a1dd;;;;;1;1;fix broken links in atomicdoublesee  by moe: https://githubcom/google/moemoe_migrated_revid279162422;
3695;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> roll forward cl 269313299.  *** original change description ***  let listenablefuture implement thenable via a default interface method in j2cl  639d873cc139a32b270ba5a11a7ceb87cf8460c0;;0;moe sync 2019-11-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> roll forward cl 269313299*** original change description ***let listenablefuture implement thenable via a default interface method in j2cl639d873cc139a32b270ba5a11a7ceb87cf8460c0;;;;;1;1;roll forward cl 269313299*** original change description ***let listenablefuture implement thenable via a default interface method in j2cl-------------created by moe: https://githubcom/google/moemoe_migrated_revid279693687;
3698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> migrate from arrays to immutablesets in inetaddressestest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740;;0;moe sync 2019-11-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> migrate from arrays to immutablesets in inetaddressestestb827d92dbdd949550ecdf975111e4e0a4a4c7740;;;;;1;1;migrate from arrays to immutablesets in inetaddressestestrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280186277;
3699;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e;;0;moe sync 2019-11-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clean up some unnecessary initializationsdf0d13f964c729a3e0311f0b9db7e42fea70945e;;;;;1;1;clean up some unnecessary initializationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280196393;
3703;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move the big integer conversion code into inetaddresses  relnotes=add tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> add support for scope ids to inetaddresses.isinetaddress().  fixes   1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> format with locale.root.  this guarantees that the message matches across locales  including hi-in  which we test with under maven:    b29efa54b23b3cb28f4e150d045b83b8196d9050;;0;moe sync 2019-11-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> move the big integer conversion code into inetaddressesrelnotesadd tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegersa544e97d10572d0a71c481e2b833ad19a3a7de4f-------<p> add support for scope ids to inetaddressesisinetaddress()fixes  format with localerootthis guarantees that the message matches across locales including hi-in which we test with under maven //travis-ciorg/google/guava/jobs/611945191https://githubcom/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pomxml#l212b29efa54b23b3cb28f4e150d045b83b8196d9050;;;;;1;1;format with localerootthis guarantees that the message matches across locales including hi-in which we test with under maven: by moe: https://githubcom/google/moemoe_migrated_revid280441968;
3704;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use truth assertions instead of junit assertions in inetaddressestest.  make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> correct documentation of getcoercedipv4address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5;;0;moe sync 2019-11-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use truth assertions instead of junit assertions in inetaddressestestmake assertions stronger if possible (check object equality instead of reference equality)79e2c4efcbebf40ad651fddb107273b960874841-------<p> correct documentation of getcoercedipv4address848d95b7e9e998cf9d8c952aeaf661902c364eb5;;;;;1;1;correct documentation of getcoercedipv4addressrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280454590;
3711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the  copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the  copy is updated 3 weeks before the estimated week of stable:    for this update    d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> update to truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a;;0;moe sync 2019-11-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe  copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the  copy is updated 3 weeks before theestimated week of stable: this update d6c3cd99a466583651a7058505371fab8b76e554-------<p> update to truth 10e6225a652e1a4651541fdeed15a400cdcba29b7a;;;;;1;1;update to truth 10-------------created by moe: https://githubcom/google/moemoe_migrated_revid281279350;
3723;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use internal fast path for getting failure without allocating a wrapper executionexception  also fix gwt abstractfuture so that it respects the trusted interface. (more motivation for   relnotes=n/a  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> support incidentedgeorder for directed graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> add @jsoptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. this satisfies jscompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc;;0;moe sync 2019-11-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use internal fast path for getting failure without allocating a wrapper executionexceptionalso fix gwt abstractfuture so that it respects the trusted interface (more motivation for  support incidentedgeorder for directed graphsfd2255edf013f6592b83ee17432d0997d8db74d5-------<p> add @jsoptional annotations to the 2nd parameter of the then method since the second parameter is actually optional this satisfies jscompiler type checking73be65bd36e498f133549ddc24523176152aa8dc;;;;;1;1;add @jsoptional annotations to the 2nd parameter of the then method since the second parameter is actually optional this satisfies jscompiler type checking-------------created by moe: https://githubcom/google/moemoe_migrated_revid282755478;
3726;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make incidentedges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> abstractnetwork: fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  relnotes=fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  originally reported as github issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> refactor abstractgraphtest to allow for tests with immutablegraph.  reason: immutablegraph implementations are undertested compared to mutablegraph implementations. the current tests didn t catch a bug i deliberately introduced in  also  it would be nice to be able to share the incident edge order tests.  note about design: i started out by making an abstractgraphtest subclass for mutable graphs. however  that would lead to a duplication of all 7 subclasses and most of their tests. the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloops=true/false and incidentedgeorder=unordered/stable. the proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> merge abstractxgraphtest and configurablesimplexgraphtest  thus removing one layer from the abstractgraphtest tree.  reason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs). however  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> merge standardmutabledirectedgraphtest and its variant with stable order.  this is in preparation for adding an immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> add standardimmutabledirectedgraphtest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> annotate benign race in abstracttable so as to avoid tsan issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;;3721.0;moe sync 2019-12-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make incidentedges() return edges in insertion orderdf2c5527d5fe4a50135239f0b6b516058a37c5fa-------<p> abstractnetwork: fix bug in abstractnetworkhasedgeconnecting() causing it to throw if either endpoint was not in the graphrelnotesfix bug in abstractnetworkhasedgeconnecting() causing it to throw if either endpoint was not in the graph  originally reported as github issue #37218e0f821430acaa5b77c5c2c05380e3d29f18e410-------<p> refactor abstractgraphtest to allow for tests with immutablegraphreason: immutablegraph implementations are undertested compared to mutablegraph implementations the current tests didnt catch a bug i deliberately introduced in  also it would be nice to be able to share the incident edge order testsnote about design: i started out by making an abstractgraphtest subclass for mutable graphs however that would lead to a duplication of all 7 subclasses and most of their tests the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloopstrue/false and incidentedgeorderunordered/stable the proposed solution is somewhat unconventional but at least allows us to share much more code between the testsa6d0db50f6d678839f17c82a76341bb0d3d60b29-------<p> merge abstractxgraphtest and configurablesimplexgraphtest thus removing one layer from the abstractgraphtest treereason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs) however even though they arent used these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order testsce50502b9bd6fbd909abed1afd1de2976246eef9-------<p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loopsf5ac328e048606d0b40c7e0b1b55bccd6ff177eb-------<p> merge standardmutabledirectedgraphtest and its variant with stable orderthis is in preparation for adding an immutable version that also needs tests for the stable ordera0ebd7b6d2789a168df5e3e0a224513dfe1257ee-------<p> add standardimmutabledirectedgraphtest033535490cf36040b4c2aba6a94e9b0f3e59564e-------<p> annotate benign race in abstracttable so as to avoid tsan issuesa4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;great work on improving the graph tests @nymanjens! looking forward to seeing it merged in 👏 || > great work on improving the graph tests @nymanjens! looking forward to seeing it merged in;mutablenetworkhasedgeconnecting throw illegalargumentexception when node are missing;"according to the javadoc the hasedgeconnecting method is equivalent to nodes()contains(nodeu) && successors(nodeu)contains(nodev)but unlike this expression it throws an exception if the nodes are unknownhere is a simple demonstration```javaimport comgooglecommongraphmutablenetworkimport comgooglecommongraphnetworkbuilderpublic class bug {	public static void main(string args) {		final mutablenetwork<string string> graph  networkbuilderundirected()allowsparalleledges(false)build()		// foolowing line prints false		systemoutprintln(graphnodes()contains(""1"") && graphsuccessors(""1"")contains(""2""))		// next should print false but throws an illegalargumentexception		systemoutprintln(graphhasedgeconnecting(""1"" ""2""))	}}```version guava-281-jre";"it looks like a bit subtle but `successors(nodeu)contains(nodev)` throws an `illegalargumentexception` when `nodeu` is not in the network (which is the actual behavior youre seeing here)however youre right that the short-circuiting behavior of `&&` isnt replicating here that seems like an important part of the documented behavior :) fwiw it appears to also throw an illegalargumentexception even if `""1""` is in the network but `""2""` isnt || this is just a straight-up bug on our parts im coding up a fix nowthe problem originates in the fact that `hasedgeconnecting()` is actually (in effect) calling `edgesconnecting()isempty()`  this seems reasonable on the face of it but `edgesconnecting(u v)` has the contract that it throws if either `u` or `v` are not in the graph this is consistent with the contracts for the other `set`-returning accessors but its not what we want for boolean-returning queries like `hasedgeconnecting()`sorry about that thanks for the catch  :) || ive submitted an internal fix this should be propagating externally soon || this is  in v282:  || ";1;0;annotate benign race in abstracttable so as to avoid tsan issuesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid283176468;
3732;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use  ipv4  instead of  ipv4  for consistency.  this cl goes against the style guide  but we should be consistent within the file. we could instead rename the existing  lightly used methods to match the style guide  but i don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> add @suppresswarnings( goodtime ) to gwt supersource for localcache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> the graph tests now consistently call graphasmutablegraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> make equally named putedge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> support stable incident edge order for directed immutable[value]graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76;;0;moe sync 2019-12-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use ""ipv4"" instead of ""ipv4"" for consistencythis cl goes against the style guide but we should be consistent within the file we could instead rename the existing lightly used methods to match the style guide but i dont think this will be the best use of someones time4a627d3ea2ac16e7e970f78939df6a163335df1c-------<p> add @suppresswarnings(""goodtime"") to gwt supersource for localcache operating in primitive millis95e7e1af8ef059e874f4c00230b010f651322e71-------<p> the graph tests now consistently call graphasmutablegraphfoo() when testing foo() rather than proxy methods1fc1f11779159183f0b4daeb388c6def36a4a2e3-------<p> make equally named putedge() method adjacent9a1f2e28f76a623501e8178262359202055139c2-------<p> support stable incident edge order for directed immutable[value]graphs2608ca43cf15c4b2a7ad21a900550358f5e6fc76";;;;;1;1;support stable incident edge order for directed immutable[value]graphsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid284109953;
3734;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @donotmock to several com.google.common types  relnotes:   - add @donotmock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> add @donotmock to listenablefuture  remove @donotmock from abstractfuture  as it is now covered by @donotmock on listenablefuture  relnotes=n/a  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> fix small error with how caseformat calculates the stringbuilder size when converting one format to another.  fixes   0dc680192f18b7664f900304576736c1914d14ba;;0;moe sync 2019-12-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add @donotmock to several comgooglecommon typesrelnotes:  - add @donotmock to several comgooglecommon typesdbd97473cab26185e48620b7916159915621bb14-------<p> add @donotmock to listenablefutureremove @donotmock from abstractfuture as it is now covered by @donotmock on listenablefuturerelnotesn/aad9d3eae25e3f7a8bb07a0b00105ec4426beab88-------<p> fix small error with how caseformat calculates the stringbuilder size when converting one format to anotherfixes https://githubcom/google/guava/pull/37300dc680192f18b7664f900304576736c1914d14ba;;;;;1;1;fix small error with how caseformat calculates the stringbuilder size when converting one format to anotherfixes  by moe: https://githubcom/google/moemoe_migrated_revid284567420;
3739;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync 2019-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotmock from hashfunction.  users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717;;0;moe sync 2019-12-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove @donotmock from hashfunctionusers need some kind of way to eg easily produce collisions in cases in which collisions should be raremaybe we can provide a better way to do this but for now lets at least not forbid using mocking frameworksc9ae0d314031ac9521d57aab8743ddba0c5f4717;;;;;1;1;remove @donotmock from hashfunctionusers need some kind of way to eg easily produce collisions in cases in which collisions should be raremaybe we can provide a better way to do this but for now lets at least not forbid using mocking frameworksrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid284620519;
3740;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> format the javadoc of bytestreams.read() with @throw tags.  fixes   907ec2ea8655ba1c69d8b003c3e51689ec02b864;;0;moe sync 2019-12-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> format the javadoc of bytestreamsread() with @throw tagsfixes https://githubcom/google/guava/pull/3735907ec2ea8655ba1c69d8b003c3e51689ec02b864;;;;;1;1;format the javadoc of bytestreamsread() with @throw tagsfixes  by moe: https://githubcom/google/moemoe_migrated_revid285774424;
3741;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d;;0;moe sync 2019-12-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> actually map thenable helper interface to js ithenable the name is different to avoid a clash with elemental2 ithenable8207e996f569381719eff09ee836509136734cc0-------<p> use error prones @guardedby enforcement to make sure that mutable state is appropriately synchronizedf6d239520285c399978597c4a6665bf41fe8395d;;;;;1;1;use error prones @guardedby enforcement to make sure that mutable state is appropriately synchronizedrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286044036;
3743;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> expand android access to compact*hash*  also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) to match newcompacthashset(int).  b2723ea162d6c4d7df62722e87f609f70478840a;;0;moe sync 2019-12-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> expand android access to compact*hash*also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) tomatch newcompacthashset(int)b2723ea162d6c4d7df62722e87f609f70478840a;;;;;1;1;expand android access to compact*hash*also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) tomatch newcompacthashset(int)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286449854;
3747;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashmap fall back to a java.util.linkedhashmap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> fix maven test failures from cl 286604248: - make  abstract  class abstract. (and make its constructor package-private while we re at it.) - add a dummy test method (similar to what filteredcollectionstest already has).  these should fix: - warning(junit.framework.testsuite$1): class com.google.common.collect.abstracthashfloodingtest has no public constructor testcase(string name) or testcase() - warning(junit.framework.testsuite$1): no tests found in com.google.common.collect.immutablebimaptest    (also  address a review comment:   8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> add @suppresswarnings for new violations of the guardedby checker.  98736425927413862c058d11f1aaeae53bbe0f91;;0;moe sync 2019-12-23;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make compact(linked)hashmap fall back to a javautillinkedhashmap if hash flooding is detected just as the immutable collections do5dffec12c07ea23bcba653198036e55df27792f0-------<p> fix maven test failures from cl 286604248:- make ""abstract"" class abstract (and make its constructor package-private while were at it)- add a dummy test method (similar to what filteredcollectionstest already has)these should fix:- warning(junitframeworktestsuite$1): class comgooglecommoncollectabstracthashfloodingtest has no public constructor testcase(string name) or testcase()- warning(junitframeworktestsuite$1): no tests found in comgooglecommoncollectimmutablebimaptest address a review comment:  add @suppresswarnings for new violations of the guardedby checker98736425927413862c058d11f1aaeae53bbe0f91";;;;;1;1;add @suppresswarnings for new violations of the guardedby checker-------------created by moe: https://githubcom/google/moemoe_migrated_revid286896398;
3748;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;3745.0;moe sync 2019-12-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor: lambda can be replaced method reference37451d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;refactor lambda can be replaced method reference;;     clas look good thanks!  ||;1;0;refactor: lambda can be replaced method reference3745relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286897808;
3752;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece;;0;moe sync 2019-12-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct @nullable and use intsconstraintorange()5d9fc397a80618ea90786f026962f208b979bece;;;;;1;1;correct @nullable and use intsconstraintorange()relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286925184;
3757;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> assign the result of contains() and containsall() to a variable.  this satisfies the checkreturnvalue checker.   d99aad23b74bf91eb3084b2b40625e787e758ff3;;0;moe sync 2019-12-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> assign the result of contains() and containsall() to a variablethis satisfies the checkreturnvalue checkerd99aad23b74bf91eb3084b2b40625e787e758ff3;;;;;1;1;assign the result of contains() and containsall() to a variablethis satisfies the checkreturnvalue checker-------------created by moe: https://githubcom/google/moemoe_migrated_revid287279350;
3758;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix instances of {#foo} in javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;0;moe sync 2020-01-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix instances of {#foo} in javadoc31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;;;;1;1;fix instances of {#foo} in javadocrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid287583870;
3763;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8;;0;moe sync 2020-01-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update to junit 41315262018825b31559b39e1ea84cccb29903f44e0-------<p> note another case in which our implementation of typevariable throws unsupportedoperationexception55fdde6aee4878820e8fc7615c05ec8d0e365b5f-------<p> suppress ignored return values from collection#contains*i think this is all of them!b574bfaead6951521ba9d174c935b55309fa51b8;;;;;1;1;suppress ignored return values from collection#contains*i think this is all of them!relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid288028198;
3764;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that we generate a non-empty javadoc jar for guava-gwt.  without it  we get an error during sonatype deployment:   missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   i hacked around this on the github release branch for 28.2 by reenabling javadoc:   but as you may recall from cl 276327335  we re soon going to have no classes to generate javadoc for (after we remove gwt-rpc support). so even with javadoc generation enabled  we d end up with no jar.  to ensure that we get a jar  i ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> valuegraph: support incidentedgeorder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> immutablevaluegraph: support incidentedgeorder=stable  relnotes=n/a  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> graph: support stable incidentedgeorder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> add standardimmutableundirectedgraphtest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> suppress guardedby violation in localcache.  this looks like it s just for testing  which i think makes it /probably ok/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d;;0;moe sync 2020-01-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure that we generate a non-empty javadoc jar for guava-gwtwithout it we get an error during sonatype deployment:  missing: no javadoc jar found in folder /com/google/guava/guava-gwt/282-jrei hacked around this on the github release branch for 282 by reenabling javadoc: as you may recall from cl 276327335 were soon going to have no classes to generate javadoc for (after we remove gwt-rpc support) so even with javadoc generation enabled wed end up with no jarto ensure that we get a jar ive introduced a package-private dummy class (and then excluded it from the other steps in which source files are used)80210f266950156ccd1eb56d18af7552f41dd274-------<p> valuegraph: support incidentedgeorderstablef05442beb167e9e7953022983f3885cb219d9968-------<p> immutablevaluegraph: support incidentedgeorderstablerelnotesn/a12b0521095bde73b06c13ccd9558be10cd648d4f-------<p> graph: support stable incidentedgeorder for undirected graphse541ab5ee31f86733a0bfa0caa11f872292f51cd-------<p> add standardimmutableundirectedgraphtest5fddc483ad638b46badddcc44ca0501b9a185c5c-------<p> suppress guardedby violation in localcachethis looks like its just for testing which i think makes it /probably ok/ but feel free to suggest otherwisedb04af06932fe7ff009a7903e44471e945ea057d;;;;;1;1;suppress guardedby violation in localcachethis looks like its just for testing which i think makes it /probably ok/ but feel free to suggest otherwiserelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid288479243;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;3761.0;moe sync 2020-01-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtestaee54682770a3166c231bbfecced91f31c55d32a-------<p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest0aba85dd247e254e10fcd84e7b2940fa0383e14e-------<p> fix off-by-one error in asciidigitsasciidigits initialization37612b27d9f906e18ae1105766d41e0940122ce686a0-------<p> disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`ff0cd947f82d24611e39fb3d86e3d19da4af801f; adding cla:yes label because 2b27d9f906e18ae1105766d41e0940122ce686a0 comes from @perceptron8s pr #3761 ||;fix off-by-one error in asciidigitsasciidigits initialization;`asciidigitsdigit([)` should return -1 instead of 36i changed both loops to consistently use strict inequalities now its clear that there are 10 + 26  36 digits / iterations in totalfortunately this bug doesnt affect anything other than `longstryparse` where it is - by accident - harmless that `longstryparse([ 36)` and `longstryparse(0[ 36)` currently return `null` because of `digit > radix` condition not `digit < 0` as it should be;i said about [  a + 26  z + 1 but i forgot to mention {  a + 26  z + 1 just for the record ||;1;0;disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`-------------created by moe: https://githubcom/google/moemoe_migrated_revid288676838;
3767;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add incidentedgeorder() to the [value]graph interface  relnotes= graph : add  incidentedgeorder()  to the  [value]graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> make incidentedgeorder() public for [value]graph  relnotes= graph : allow setting a stable incident edge order by calling the newly added method  [value]graph.builder.incidentedgeorder(elementorder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;0;moe sync 2020-01-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add incidentedgeorder() to the [value]graph interfacerelnotes`graph`: add `incidentedgeorder()` to the `[value]graph` interfacesae2710e8cb1d0ab80e247334273695da0c7b3afb-------<p> make incidentedgeorder() public for [value]graphrelnotes`graph`: allow setting a stable incident edge order by calling the newly added method `[value]graphbuilderincidentedgeorder(elementorderstable())`0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;;;;1;1;make incidentedgeorder() public for [value]graphrelnotes`graph`: allow setting a stable incident edge order by calling the newly added method `[value]graphbuilderincidentedgeorder(elementorderstable())`-------------created by moe: https://githubcom/google/moemoe_migrated_revid288715042;
3772;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> rewrite the stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7;;0;moe sync 2020-01-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datafea136b2585cd01765e67de83e54dad6a0aebae5-------<p> rewrite the stopwatch docs to explain elapsed vs wall time81b9816a5e8347a05518c7869464e0f357be58b7;;;;;1;1;rewrite the stopwatch docs to explain elapsed vs wall timerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid289974621;
3773;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-01-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update resource.getresource to allow ignoring return value for existence checks.  specifically this impacts getresource(contextclass  resourcename) as this is already present on getresource(resourcename)  relnotes=update resource.getresource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6;;0;moe sync 2020-01-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update resourcegetresource to allow ignoring return value for existence checksspecifically this impacts getresource(contextclass resourcename) as this is already present on getresource(resourcename)relnotesupdate resourcegetresource(*) to allow ignoring return value for existence checks383c278b7b8044feac53153c0dd3202d3fa0b3c6;;;;;1;1;update resourcegetresource to allow ignoring return value for existence checksspecifically this impacts getresource(contextclass resourcename) as this is already present on getresource(resourcename)relnotesupdate resourcegetresource(*) to allow ignoring return value for existence checks-------------created by moe: https://githubcom/google/moemoe_migrated_revid290278034;
3793;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> annotate uppercase and lowercase with @lazyinit.  this eliminates a tsan warning.  f325f04c86c8159f5bd9d771e697217a866c46d2;;0;moe sync 2020-02-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> annotate uppercase and lowercase with @lazyinitthis eliminates a tsan warningf325f04c86c8159f5bd9d771e697217a866c46d2;;;;;1;1;annotate uppercase and lowercase with @lazyinitthis eliminates a tsan warningrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid292973956;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;3784.0;moe sync 2020-02-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security managere589b5c884a5996f7040ae38bdf02709f9e300da; shut down computer - silence ||;abstractfuture and forkjoinpool are incompatible with securitymanager;"i was bitten by the issue described in  \[cpovirk adds (for searchability): might  also be similar?\] when trying to use arrow flight with javas securitymanager since `abstractfuture` tries to check a property as part of initialization and hence cant be created from an `innocuousthread` that doesnt have any privileges the exception looks like this:```caused by: javasecurityaccesscontrolexception: access denied (""javautilpropertypermission"" ""guavaconcurrentgenerate_cancellation_cause"" ""read"")	at javabase/javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:472)	at javabase/javasecurityaccesscontrollercheckpermission(accesscontrollerjava:1044)	at javabase/javalangsecuritymanagercheckpermission(securitymanagerjava:408)	at javabase/javalangsecuritymanagercheckpropertyaccess(securitymanagerjava:1152)	at javabase/javalangsystemgetproperty(systemjava:880)	at comgooglecommonutilconcurrentabstractfuture<clinit>(abstractfuturejava:64)```i can try to put together a small repro if its useful but the tldr is that id like to wrap the call at  in a try/catch since it will throw if access to system properties is not permitted by the securitymanager";"thanks that sounds great if youd like to put together a pull request youre welcome to (though note that it will require [you or your company to sign the cla]( || sorry accidentally submitted early the other thing i wanted to do was link to [a test that loads its own copy of `abstractfuture`]( that would be the ideal test here since it easily can run in the same vm as the rest of our tests alternatively we could probably get away with a separate test class that we configure to run in a separate vm || thanks for the pointer! do you think it would be okay to configure `abstractfuturecancellationcausetest` to use `securitymanager` by default or should i create a separate test file? which directory does it make sense to put the policy file in?im working on something more polished and looking into the cla but i was able to reproduce the failure by creating a hacky test like this:```  public void testinnocuousthreadwithabstractfuture() throws exception {    atomicboolean success  new atomicboolean(false)    thread thread  jdkinternalmiscinnocuousthreadnewthread(      () -> {        try {          future<?> future  newfutureinstance()          asserttrue(futurecancel(false))          asserttrue(futureiscancelled())          successset(true)        } catch (exception e) {          fail(""unexpected exception: "" + etostring())        }      })    threadstart()    threadjoin()    asserttrue(successget())  }```the cumbersome part though is that you have to set up a securitymanager profile and pass some additional command-line arguments i made a permissive policy like this:```grant {  permission javaiofilepermission ""/-"" ""read""  permission javautilpropertypermission ""*"" ""readwrite""  permission javalangreflectreflectpermission ""*""  permission javalangruntimepermission ""*""}```and then used these command-line arguments to java:```-djavasecuritymanager -djavasecuritypolicy/path/to/javapolicy -djavasecuritydebugaccessfailure --add-opens javabase/jdkinternalmiscall-unnamed```the test fails since `successset(true)` is never reached and the test output has:```access: access denied (""javautilpropertypermission"" ""guavaconcurrentgenerate_cancellation_cause"" ""read"")javalangexception: stack trace	at javabase/javalangthreaddumpstack(threadjava:1383)	at javabase/javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:462)	at javabase/javasecurityaccesscontrollercheckpermission(accesscontrollerjava:1044)	at javabase/javalangsecuritymanagercheckpermission(securitymanagerjava:408)	at javabase/javalangsecuritymanagercheckpropertyaccess(securitymanagerjava:1152)	at javabase/javalangsystemgetproperty(systemjava:880)	at comgooglecommonutilconcurrentabstractfuture<clinit>(abstractfuturejava:74)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:567)	at comgooglecommonutilconcurrentabstractfuturecancellationcausetestnewfutureinstance(abstractfuturecancellationcausetestjava:187)	at comgooglecommonutilconcurrentabstractfuturecancellationcausetestlambda$testinnocuousthreadwithabstractfuture$0(abstractfuturecancellationcausetestjava:171)	at javabase/javalangthreadrun(threadjava:835)	at javabase/jdkinternalmiscinnocuousthreadrun(innocuousthreadjava:134)```it should be possible to have the test use `javautilconcurrentforkjoinpool` rather than relying on the internal `innocuousthread` class but at least i was able to get a poc working || i was thinking more along the lines of a separate test class (though using the same classloading trick) im hoping that we dont need a separate policy file given our ability to implement our own `securitymanager` as in [this test]( || sent  comments welcome! || ";1;0;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security manager-------------created by moe: https://githubcom/google/moemoe_migrated_revid293696683;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;3788.0;moe sync 2020-02-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security managere589b5c884a5996f7040ae38bdf02709f9e300da; shut down computer - silence ||;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval;context: https://githubcom/google/guava/issues/3784;   i submitted the corporate cla on behalf of snowflake but i need our authorized signer (our vp) to click through the agreement still once that happens ill trigger the cla/google check again || hmm is there a way to see the test outputs for travis ci? the log indicates that the new test fails but i dont see that `/home/travis/build/google/guava/guava-tests/target/surefire-reports` is made available anywhere || on [the job log page]( you can scroll _way_ to the bottom and click the `$ util/print_surefire_reportssh` line and -- i see that its not working :( i will have a look sorry about that || odd it works for me locally (also maven-surefire-plugin:272 though only maven 35) i wonder whats different about travisif youre lucky the problem will reproduce for you locally:`mvn clean install ""-dtestinclude**/abstractfutureinnocuousthreadtestjava""`(you can probably skip the `clean` part but i am always nervous about doing so) || ok i patched in your pr so i have updates on 2 fronts:first the failure is this:```testabstractfutureinitializationwithinnocuousthread_doesnotthrow(comgooglecommonutilconcurrentabstractfutureinnocuousthreadtest)  time elapsed: 0151 sec  <<< error!javasecurityaccesscontrolexception: access denied (""javalangruntimepermission"" ""closeclassloader"")  at javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:472)  at javasecurityaccesscontrollercheckpermission(accesscontrollerjava:884)  at javalangsecuritymanagercheckpermission(securitymanagerjava:549)  at javaneturlclassloaderclose(urlclassloaderjava:289)  at comgooglecommonutilconcurrentabstractfutureinnocuousthreadtestteardown(abstractfutureinnocuousthreadtestjava:80)```i am able to reproduce it locally -- but _not_ when using the `testinclude` flag from my previous post its possible that this means that your test is affected by a previous tests incomplete cleanup or other poor hygiene (`abstractfuturefallbackatomichelpertest`? `abstractfuturecancellationcausetest`?)second im not completely sure whats up with `util/print_surefire_reportssh` locally i get a ""successful"" run but with no results with your commit patched in thats because im seeing `xml` files for most tests but _not_ seeing one for _your_ test maybe thats related to the `securitymanager`?i dont know why the situation would be different under travis under which there are apparently _no_ `xml` files || now i am more confused!in an attempt to narrow down which tests were causing the problem i ran:`mvn clean install ""-dtestinclude%regex[*utilconcurrent*class]""`that got this far:```running comgooglecommonutilconcurrentabstractexecutionthreadservicetesttests run: 12 failures: 0 errors: 0 skipped: 0 time elapsed: 009 secrunning comgooglecommonutilconcurrentabstractfuturecancellationcausetesttests run: 3 failures: 0 errors: 0 skipped: 0 time elapsed: 0042 secrunning comgooglecommonutilconcurrentabstractfuturefallbackatomichelpertesttests run: 42 failures: 0 errors: 0 skipped: 0 time elapsed: 33034 secrunning comgooglecommonutilconcurrentabstractfutureinnocuousthreadtesttests run: 1 failures: 0 errors: 0 skipped: 0 time elapsed: 0073 sec```those all appear to be successes but then the run aborted claiming:```[error] failed to execute goal orgapachemavenplugins:maven-surefire-plugin test (default-test) on project guava-tests: there are test failures```so im not sure whats up hopefully it will be clearer to you from the code || thanks for taking a look! i wonder if resetting the `securitymanager` to its original state at the end of the test would fix the problemill give that a shot locally without the test filter and then see if it passes then see if another travis run will succeed || i really wish i could see the test output from travisi tried resetting the `securitymanager` with `systemsetsecuritymanager(null)` at the end of the test and both `mvn clean install ""-dtestinclude%regex[*utilconcurrent*class]""` and `mvn clean install ""-dtestinclude**/abstractfutureinnocuousthreadtestjava""` pass for me now but it looks like the tests through travis are still failing based on the result above :(is `/home/travis/build/google/guava/guava-tests/target/surefire-reports` kept around in any logs/outputs? || lets check on the cla status at least since we submitted the corporate one:     i signed it! || clas look good thanks!  || woohoo the cla check passes nowseparately though i found a way to avoid depending on `forkjoinpool` within arrow flight so its fine if `abstractfuture` tries to access properties and im not blocked on this pr any more im happy to try to see it to completion but its not urgent in any case || thanks! i grabbed your test and tweaked it to use a custom `securitymanager` subclass instead of writing a policy file that appears to be enough to get `mvn clean install` to pass do you have any comments on the result  || (you can ignore the second copy of the files (from the `android` directory) i probably should have omitted that copy from the pr) || nice lgtm! thanks for figuring out a way to make it work it sounds like this project doesnt merge changes from github anyway so we can close this pr if you want to proceed with submitting your version to google3 (and then im assuming the changes get exported to github at some point) || right well make the equivalent change internally and then mirror it back out (with your name attached) that will automatically close this pr so we can keep it open just in case i somehow forget about it :) || ";1;0;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security manager-------------created by moe: https://githubcom/google/moemoe_migrated_revid293696683;
3797;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190;;0;moe sync 2020-02-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add missing @nullableafa21015d337d38bbaa752aa29b2d50c700f8190;;;;;1;1;add missing @nullablerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid294351502;
3801;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> rename  configurablex  to  standardx  for [value]graph  which better captures what these implementations represent.  note that this work was already started in the past with the abstract standardgraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504;;0;moe sync 2020-02-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> rename configurablex to standardx for [value]graph which better captures what these implementations representnote that this work was already started in the past with the abstract standardgraph tests1be4110bac4c8540053fb4d096fdbb6d28d8a504;;;;;1;1;rename configurablex to standardx for [value]graph which better captures what these implementations representnote that this work was already started in the past with the abstract standardgraph testsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid294879089;
3802;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memory.  previously this would lead to java.lang.negativearraysizeexception.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> annotate fluentiterable.from(fluentiterable) with @donotcall  relnotes=annotate fluentiterable.from(fluentiterable) with @donotcall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> fixing a typo in some guava javadocs.  relnotes=fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36;;0;moe sync 2020-02-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memorypreviously this would lead to javalangnegativearraysizeexceptione0418c067aea976e3e59e23e035d15177112597a-------<p> annotate fluentiterablefrom(fluentiterable) with @donotcallrelnotesannotate fluentiterablefrom(fluentiterable) with @donotcalle3264687f823752dea2d724d2734b4a18e5c92a3-------<p> fixing a typo in some guava javadocsrelnotesfixing a typo in javadoc5efab94ad9b77695012878c6b7c5a8815c7d2d36;;;;;1;1;fixing a typo in some guava javadocsrelnotesfixing a typo in javadoc-------------created by moe: https://githubcom/google/moemoe_migrated_revid295958517;
3804;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> invalidate delegate iterators during clear() and make fpp tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c;;0;moe sync 2020-02-21;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> invalidate delegate iterators during clear() and make fpp tests more strict2cb0a5968938965027b9fc046f67db565a8cb68c;;;;;1;1;invalidate delegate iterators during clear() and make fpp tests more strictrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid296256794;
3805;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010;;3800.0;moe sync 2020-02-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify redundant `collectionaddall()` calls3800ae564a1d7c39704e800f04cef427f4c8abd6f010;;simplify redundant `collectionaddall()` call;simplify redundant `collectionaddall()` call and optimize performance;      clas look good thanks!  || a couple quick thoughts since i sadly doubt that ill be able to dedicate a lot of time to this:- i somewhat like to create the collection on one line and add to it on another _if_ i am then going to also _remove_ from it (or add more to it) like [here]( the multi-line process is a hint that theres going to be more to the collection than just its initial contents that is were not just making a defensive copy however this is a minor point and others might not see it that way plus were usually modifying the collection _immediately_ after creating so theres not much danger of confusion- for cases in which we add objects and then add more objects im not sure that we necessarily improve performance by presizing to the size of the _first_ set of objects like [here]( it might actually be better to accept the default sizethe unfortunate thing is that this code does need some performance tuning and general cleaning i just fear that it would be a big investment || thanks for your code review this pr was submitted for the following reasons : * using the constructor with parameter it can save one time array copy* improving readability and polishing the codebut i agree with your thoughts : * for the contextual semantic unity in a block of code* the performance improvement may be small* more time can be allocated for implementing features and fixing bugsi respect your decision so what should i do? || thanks im going to skip `derivedcollectiongeneratorsjava` since im not sure if that will help or hurt performance (i notice that that code could probably be simplified even further but i left it alone) im looking to merge the rest ||;1;0;simplify redundant `collectionaddall()` calls3800relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid296511169;
3807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutable.  note: this is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3;;0;moe sync 2020-02-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutablenote: this is a pure refactor no coverage is changing1ae455b65162b8a1adf369e24f1d593b5f2886a3;;;;;1;1;refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutablenote: this is a pure refactor no coverage is changingrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297126494;
3810;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashset fall back to a java.util.linkedhashset if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> make lenienttostring easier for nullness-analysis tools to understand.  and i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?  as far as tools know  string.valueof is capable of throwing an error or runtimeexception  even when it s called with a parameter whose values is null. thus  tools conclude that the flow of the program might reach  o.getclass().getname()  when  o  is null. that would in turn produce nullpointerexception.  tools might not even be wrong  since string.valueof could produce a stackoverflowerror if we were *just* about to run out of space. of course  in that case we re going to have problems in the catch() block no matter what :)  to avoid this  we check for null in lenienttostring itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> make gwt compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> update public suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> rename  configurablex  to  standardx  for network  which better captures what these implementations represent.  note that this work was already done for [value]graph.  ef37cf45afbcd44a75de665b03966a075af7727a;;0;moe sync 2020-02-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make compact(linked)hashset fall back to a javautillinkedhashset if hash flooding is detected just as the immutable collections doa97eccf35da1290e69a2b95375b10cbced95c7b6-------<p> make lenienttostring easier for nullness-analysis tools to understandand i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?as far as tools know stringvalueof is capable of throwing an error or runtimeexception even when its called with a parameter whose values is null thus tools conclude that the flow of the program might reach `ogetclass()getname()` when `o` is null that would in turn produce nullpointerexceptiontools might not even be wrong since stringvalueof could produce a stackoverflowerror if we were *just* about to run out of space of course in that case were going to have problems in the catch() block no matter what :)to avoid this we check for null in lenienttostring itselfe9d2fcc35213b848d2904e82768dc5d42d33039a-------<p> make gwt compilation of tests no longer flakybb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2-------<p> update public suffix data1323cda77015764438d4febdd83240c006b9da48-------<p> rename configurablex to standardx for network which better captures what these implementations representnote that this work was already done for [value]graphef37cf45afbcd44a75de665b03966a075af7727a;;;;;1;1;rename configurablex to standardx for network which better captures what these implementations representnote that this work was already done for [value]graphrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297602755;
3811;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> delete unused method  71f625f15620bf4893322011536977459321c1a5;;0;moe sync 2020-02-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove remaining documentation references to configurable implementations9c3f315f62358c54a0e03fda782eba0e8d39419f-------<p> delete unused method71f625f15620bf4893322011536977459321c1a5;;;;;1;1;delete unused methodrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297620200;
3814;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make nullwriter().append() (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       but that s not true  as the docs go on to say:      csq - the character sequence to append. if csq is null  then the four characters  null  are appended to this writer.      accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:  %20int %20int%29  credit to the checker framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785;;0;moe sync 2020-03-02;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" thats not true as the docs go on to say:""""""csq - the character sequence to append if csq is null then the four characters ""null"" are appended to this writer""""""accepting null in the 2-arg method is arguably even weirder but at least the docs call it out more prominently: to the checker framework for identifying this buga27746a876d9426a7252460ef288f4abf9c0d785";;;;;1;1;"make nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" thats not true as the docs go on to say:""""""csq - the character sequence to append if csq is null then the four characters ""null"" are appended to this writer""""""accepting null in the 2-arg method is arguably even weirder but at least the docs call it out more prominently: to the checker framework for identifying this bugrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid298388993";
3815;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store each result in a  present<v>  instance instead of an optional<v>.  we can t store a plain v because we need to distinguish between optional.absent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete().collecttolist() (#1519)  which is likely to omit failures instead of mapping them to null as successfulaslist does).  we may have problems using optional when we adopt new nullability annotations  since optional<v> might not be a valid instantiation when v is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> migrate from @monotonicnonnull to @nullable.  the features of @monotonicnonnull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  and @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt.    d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  make nullwriter().append(...) (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       29992f2f557770a4c52c78f47750ae12b26d72fd;;0;moe sync 2020-03-04;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> store each result in a ""present<v>"" instance instead of an optional<v>we cant store a plain v because we need to distinguish between optionalabsent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete()collecttolist() (#1519) which is likely to omit failures instead of mapping them to null as successfulaslist does)we may have problems using optional when we adopt new nullability annotations since optional<v> might not be a valid instantiation when v is instantiated with a nullable typee371bf1af65c4c6727d1194fd59ffcc99a8ea084-------<p> migrate from @monotonicnonnull to @nullablethe features of @monotonicnonnull dont buy us anything in our use case since we check the fields for null on every access anywayand @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break8a32d0b35e3c8342ef1cb503de9ef2881958ad68-------<p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54dmake nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())""""""https://docsoraclecom/javase/7/docs/api/java/io/writerhtml#app29992f2f557770a4c52c78f47750ae12b26d72fd";;;;;1;1;"roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54dmake nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" by moe: https://githubcom/google/moemoe_migrated_revid298459337";
3818;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76;;0;moe sync 2020-03-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> document that our racy access is safe2c9301827eab9df3769c09ca1ae74c7c8673ea76;;;;;1;1;document that our racy access is saferelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid299431193;
3819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac;;0;moe sync 2020-03-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessorsa8d9fcb85edea8f185af28da6b4e12f2636e59a6-------<p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removed34ed9b2c6d258e867b043401ebd9614a175476b8-------<p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removed6dfb447e78c21e1e206cb91453f4e4e03e6b261b-------<p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treeee6595018132ed9e859152f0d11450598c168774-------<p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktestthis is similar to an earlier refector of the abstractgraphtest tree45bb762daf790b278f7ceaaab8c94575b70df32d-------<p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removedbd328cd0dfeb89d27225cf9b4caecc5756ed42b3-------<p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treec5d8c5b19184f54be74b27d56e7d4f29824fdeac;;;;;1;1;make standardmutabledirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid300064412;
3823;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replace thread.currentthread().interrupted() with thread.interrupted() or thread.currentthread().interrupt()  whichever seems appropriate.  thread.interrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)  thread.currentthread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> replace threadcurrentthread()interrupted() with threadinterrupted() or threadcurrentthread()interrupt() whichever seems appropriatethreadinterrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)threadcurrentthread()interrupt(): interrupts the current thread744b356fa6769d4ae6924d649ac20da6c7e748ac;;;;;1;1;replace threadcurrentthread()interrupted() with threadinterrupted() or threadcurrentthread()interrupt() whichever seems appropriatethreadinterrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)threadcurrentthread()interrupt(): interrupts the current thread-------------created by moe: https://githubcom/google/moemoe_migrated_revid301162686;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> implement some more tostring() methods for debuggingi added these locally while debugging but they seem potentially generally usefuld52651a64c4965bb06be812b90aee6191e7a80f8;;;;;1;1;implement some more tostring() methods for debuggingi added these locally while debugging but they seem potentially generally usefulrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301170647;
3825;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store  values  in a local first instead of repeatedly reading it from a field.  at worst  this is a no-op. at best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> store `values` in a local first instead of repeatedly reading it from a fieldat worst this is a no-op at best it may perform betterb6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;;;;1;1;store `values` in a local first instead of repeatedly reading it from a fieldat worst this is a no-op at best it may perform betterrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301180270;
3827;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add  duration -based default methods to  listeningscheduledexecutorservice   they just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. this matches existing  duration -based overloads of  (long  timeunit)  methods in the same package.  relnotes=added  duration -based  default  methods to  listeningscheduledexecutorservice .  c7984e7e5c40868ca47faede472ad77c10965114;;0;moe sync 2020-03-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add `duration`-based default methods to `listeningscheduledexecutorservice`they just delegate to the existing methods from the interface using the existing saturated conversion to nanoseconds this matches existing `duration`-based overloads of `(long timeunit)` methods in the same packagerelnotesadded `duration`-based `default` methods to `listeningscheduledexecutorservice`c7984e7e5c40868ca47faede472ad77c10965114;;;;;1;1;add `duration`-based default methods to `listeningscheduledexecutorservice`they just delegate to the existing methods from the interface using the existing saturated conversion to nanoseconds this matches existing `duration`-based overloads of `(long timeunit)` methods in the same packagerelnotesadded `duration`-based `default` methods to `listeningscheduledexecutorservice`-------------created by moe: https://githubcom/google/moemoe_migrated_revid301435427;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;3501.0;moe sync 2020-03-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4;   i consent || ;slicing a bytesource twice throws an unexpected illegalargumentexception;currently trying to slice a `bytesource` twice throws an unexpected `illegalargumentexception` if the `bytesource` returned after the first slice has a length smaller than the offset of the subsequent slice for example this code throws an `illegalargumentexception`:```import comgooglecommoniobytesourcepublic class guavatest {    public static void main(string args) {        bytesourceconcat()slice(0 3)slice(4 3)    }}```that is against the documentation where it is specified that it should return an empty `bytesource`; should this issue be closed? it looks like it was  in #3830 ||;1;0; double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;3829.0;moe sync 2020-03-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4;   i consent || ; double slicing bytesource #3501;as previous pr has commit should not occur so i submit a new pr and add a test;;1;0; double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957;
3831;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f;;3816.0;moe sync 2020-03-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add some unit tests for base64url() in baseencoding3816e1c08a80e340efb4477dd601d6073936cc67617f;;add uts for base64url() decode in baseencoding;i use base64url in code if gerrit to make the base64 url safebut found that it doesnt cover some basic cases;;1;0;add some unit tests for base64url() in baseencoding3816-------------created by moe: https://githubcom/google/moemoe_migrated_revid302064745;
3833;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make sure native.js files are included in the guava gwt release.  this is needed for j2cl compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> add missing  @since  for 1-arg  servicemanager.addlistener .    29d356e629ed4798ba2fe9a71600e708e132b529;;0;moe sync 2020-03-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make sure nativejs files are included in the guava gwt releasethis is needed for j2cl compatibilityb1511bdf9bd51b666d07550ba258f556a6bef2fa-------<p> add missing `@since` for 1-arg `servicemanageraddlistener`https://guavadev/releases/150/api/diffs/changes/comgooglecommonutilconcurrentservicemanagerhtml#comgooglecommonutilconcurrentservicemanageraddlistener_added%28comgooglecommonutilconcurrentservicemanagerlistener%2929d356e629ed4798ba2fe9a71600e708e132b529;;;;;1;1;add missing `@since` for 1-arg `servicemanageraddlistener` by moe: https://githubcom/google/moemoe_migrated_revid302741311;
3836;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb;;0;moe sync 2020-03-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> deprecate 1-arg overload of servicemanageraddlistenerit default to directexecutor() directexecutor() is often useful but it should be an explicit choice as some usages are dangerous: deprecated the 1-arg overload of `servicemanageraddlistener`200056a4525bf28f1d252505f1564fdf26322ccb;;;;;1;1;deprecate 1-arg overload of servicemanageraddlistenerit default to directexecutor() directexecutor() is often useful but it should be an explicit choice as some usages are dangerous: deprecated the 1-arg overload of `servicemanageraddlistener`-------------created by moe: https://githubcom/google/moemoe_migrated_revid303500936;
3837;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add immediatevoidfuture() to futures.java to create an immediately succeeding listenablefuture<void>.  relnotes= util.concurrent : added  immediatevoidfuture .  e90c8bbe566429fc46a33f88930c6379e57a8094;;0;moe sync 2020-03-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add immediatevoidfuture() to futuresjava to create an immediately succeeding listenablefuture<void>relnotes`utilconcurrent`: added `immediatevoidfuture`e90c8bbe566429fc46a33f88930c6379e57a8094;;;;;1;1;add immediatevoidfuture() to futuresjava to create an immediately succeeding listenablefuture<void>relnotes`utilconcurrent`: added `immediatevoidfuture`-------------created by moe: https://githubcom/google/moemoe_migrated_revid303756624;
3839;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset package.  relnotes= com.google.common.collect.immutablesortedset : added  ceiling  and  floor  methods for gwt emulated immutablesortedset  706830ee1c7903af3d1d04478a601c2bd0a763bc;;0;moe sync 2020-03-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset packagerelnotes`comgooglecommoncollectimmutablesortedset`: added `ceiling` and `floor` methods for gwt emulated immutablesortedset706830ee1c7903af3d1d04478a601c2bd0a763bc;;;;;1;1;introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset packagerelnotes`comgooglecommoncollectimmutablesortedset`: added `ceiling` and `floor` methods for gwt emulated immutablesortedset-------------created by moe: https://githubcom/google/moemoe_migrated_revid303898439;
3840;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> making headset(e  boolean)  tailset(e  boolean) public in gwt emulated immutablesortedset.  relnotes= com.google.common.collect.immutablesortedset : making  headset(e  boolean)  and  tailset(e  boolean)  methods public for gwt emulated immutablesortedset.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3;;0;moe sync 2020-03-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> making headset(e boolean) tailset(e boolean) public in gwt emulated immutablesortedsetrelnotes`comgooglecommoncollectimmutablesortedset`: making `headset(e boolean)` and `tailset(e boolean)` methods public for gwt emulated immutablesortedsete6779e404f0cd44fdc4b955acc03ad39250ffbe3;;;;;1;1;making headset(e boolean) tailset(e boolean) public in gwt emulated immutablesortedsetrelnotes`comgooglecommoncollectimmutablesortedset`: making `headset(e boolean)` and `tailset(e boolean)` methods public for gwt emulated immutablesortedset-------------created by moe: https://githubcom/google/moemoe_migrated_revid303959507;
3841;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make  duration  overloads of  awaitrunning  and  awaitterminated   final  in all  abstract*service  classes.  the other overloads already are already  final . these ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> extend deadline to fix flakiness.  it s possible that we don t really need to assert that the pool finishes shutting down at all. maybe the other existing assertions are enough? but i haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca;;0;moe sync 2020-04-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make `duration` overloads of `awaitrunning` and `awaitterminated` `final` in all `abstract*service` classesthe other overloads already are already `final` these ones arent only because we didnt think to do this when adding the new `default` methods929867a724fc2a9b4f881534dca8d1458c9ece9c-------<p> extend deadline to fix flakinessits possible that we dont really need to assert that the pool finishes shutting down at all maybe the other existing assertions are enough? but i havent bothered to look into it1611de32e6a029ef713499b6e878c1af11f613ca;;;;;1;1;extend deadline to fix flakinessits possible that we dont really need to assert that the pool finishes shutting down at all maybe the other existing assertions are enough? but i havent bothered to look into itrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid304194678;
3842;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c;;0;moe sync 2020-04-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add j2cl specializers for doublesmin/max floatsmin/max intsmin/max and shortsmin/max79c378445bb29e204853b80645e6fb0f949c289c;the travis build is green but didnt get pushed back to github ||;;;;1;1;add j2cl specializers for doublesmin/max floatsmin/max intsmin/max and shortsmin/maxrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid304448129;
3846;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> change return type of servicemanager.servicesbystate() to immutablesetmultimap.  but also generate a bridge method with the old signature for binary compatibility.   (which i keep forgetting to mention from commits)    relnotes= util.concurrent : changed the return type of  servicemanager.servicesbystate()  to  immutablesetmultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c;;0;moe sync 2020-04-03;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> change return type of servicemanagerservicesbystate() to immutablesetmultimapbut also generate a bridge method with the old signature for binary compatibility (which i keep forgetting to mention from commits)relnotes`utilconcurrent`: changed the return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility)c467744698d85d56349fbc773cb75fae747a9a4c;;;;;1;1;change return type of servicemanagerservicesbystate() to immutablesetmultimapbut also generate a bridge method with the old signature for binary compatibility (which i keep forgetting to mention from commits)relnotes`utilconcurrent`: changed the return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility)-------------created by moe: https://githubcom/google/moemoe_migrated_revid304613375;
3852;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> add standardimmutabledirectednetworktest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> fix unnecessary method access level escalation.  fixes   8ae733081feff0801bb1fb71e5bd39f713e19595;;0;moe sync 2020-04-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest1f1a0a2fd37345ee966049e54091cb2f66f4c1c3-------<p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes8563c8706b499acd7f1e16c6cf42904f032aa5d1-------<p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktestd50fcf89b5148f12e4d0713e3deab0a75ac47c1a-------<p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktestbbce918101323bbaf2e8f063a1ceca4769d74996-------<p> add standardimmutabledirectednetworktest879cec90e07092bf63d748dbac028f2d2b28a9bc-------<p> fix unnecessary method access level escalationfixes https://githubcom/google/guava/pull/38438ae733081feff0801bb1fb71e5bd39f713e19595;;;;;1;1;fix unnecessary method access level escalationfixes  by moe: https://githubcom/google/moemoe_migrated_revid305559100;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;3418.0;moe sync 2020-04-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea;;remove @beta from service and servicemanager;- in service it looks like it might be nice to use duration instead of (long timeunit) but im not sure were ready to take that plunge soon enough to worry about it -- and of course we want most people to run through servicemanager (where we can add such overloads) anyway(rumor has it that jesse wilson might be interested in this);any idea if this will happen? ive been using this api and id love to see the beta removed from it || i am interested in this || it looks like `javatime` overloads have been added is this reasonable now ? || its been on my list of items for the new issue-planning process ive tied up the other few issues i was looking at so this can be next || other open issues related to `service`:- services that are stopped cannot be restarted #418 - abstractservice needs functionality to triggershutdown or interrupt running tasks #1918- racecondition with abstractexecutionthreadservice? #2966- feature request: allow specifying dependencies in servicemanager #1406- feature request: add logging to servicemanagerstopasync #1405- add servicestateisterminal() #2403most of these look like features we could add after finalizing the existing api the main exception is permitting restarting services but that is a big enough change that we are unlikely to ever change the core `service` classes for it even when they are still `@beta` apis (we may still provide some other way to emulate restartable services just one that doesnt touch the core api) || on the `duration` front we might wish that `abstractscheduledservicecustomscheduler` were the name of the `duration`-based api rather than the `long timeunit`-based (ie `schedule`-based) api but since that name is taken for the latter were likely to pick a clumsier name for the `duration`-based method but im not sure a rename of the existing api would be worth the trouble especially since many android users cant easily use `duration` yet || also: i noticed recently that the `service` and `servicemanager` `await*` methods are `void` methods that throw `timeoutexception` this seems contrary to jdk precedent which appears to [use `timeoutexception` exclusively for non-`void` methods]( there are tradeoffs here (performance vs chance of unintentionally ignoring a failure) it may also be worth noting that our `await*` methods can also throw `illegalstateexception` on failure so were already somewhat exception-oriented anyway this feels more like an arguable wart than something wed actually change || hmm `servicemanager` does have [a no-`executor` overload of its `addlistener` method]( which is contrary to our usual practices we may want to take a look at removing that but that shouldnt interfere with removing `@beta` from the rest of the api || `immutablemultimap` is an unfortunate return type for `servicesbystate()`: we recommend either `immutablelistmultimap` or `immutablesetmultimap` as appropriate (here `immutablesetmultimap`) shockingly this _might_ be the only place that we inappropriately returned `immutablemultimap` / `multimap` we could try to fix that if we wanted || note that we can improve the return type of `servicesbystate()` compatibly by injecting a bridge method || for #418 i think the best solution is to start a fresh instance of the `service` class that also makes it much easier to implement correct servicesfor #1406 i’ve got a full implementation of this in misk heres an [example test]( the trickiest part of our solution was expressing dependency relationships without instantiating service objects first for example we won’t construct `schemamigratorservice` until `databaseconnectionservice` is `running` our solution is deeply coupled to guice because it’s what does the instance creation stuff i found it very convenient to express service dependencies alongside di || thanks i suspect that we will keep the no-`executor` overload of `addlistener` as `@beta` so that we can deprecate and remove it but im optimistic that we can remove `@beta` from the rest ill try to have an update by the end of the week || for #1406 weve done something kind of like what you have @swankjesse but using a kotlin dsl:```kotlinclass coordinatedservicesbuilder {    private val dependencygraph  graphbuilderdirected()build<service>()    fun servicedependson(vararg upstreamservices: service) {        dependencygraphaddnode(this) // allow no dependencies        upstreamservicesforeach { service ->            dependencygraphputedge(this service)        }    }    fun build(): set<service> {        require(!graphshascycle(dependencygraph))        // assemble the set of coordinated services    }}fun createcoordinatedservices(init: coordinatedservicesbuilder() -> unit)     coordinatedservicesbuilder()apply(init)build()```usage is then:```kotlinval servicemanager      servicemanager(        createcoordinatedservices {            serviceadependson(serviceb)            servicebdependson(servicec)            serviceddependson()        }    )```we werent worried about instantiation order we also built an extension to servicemanager to allow it to be used as a service - since we have some services that manage many other services from one class not sure how much general utility that could find || as hinted at [in #2966]( we arent sure if we love the contract of `abstractexecutionservicetriggershutdown` so we might leave that `@beta` too recommending that users who want similar functionality (and want to avoid `@beta` apis) attach a `stopping` listener to do that sort of worknothing new has come up in the past couple days though so ive started work on deprecating the 1-arg `addlistener`\[edit: following after  \] || progress:- deprecated 1-arg overload of `servicemanageraddlistener`- made `duration` overloads of `awaitrunning` and `awaitterminated` `final` in all `abstract*service` classes- changed return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility) \[not yet mirrored out\]im planning to put `@beta` on `abstractexecutionservicetriggershutdown` and `abstractservicedocancelstart` and then remove `@beta` from the types under discussionif anyone objects please speak up soon :) || jesse / others: let me know how this looks (i tweaked jesses cl slightly to keep 2 individual methods `@beta` but other than that it should look just how youd expect) || # 🎉# β# 💯;1;0;remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;3806.0;moe sync 2020-04-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea;;remove @beta from service and servicemanager;this leaves abstractlisteningexecutorservice as @betacloses: https://githubcom/google/guava/issues/3418;;1;0;remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924;
3869;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> this change suppresses defaultpackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  the google java style guide §8.2.1 requires java files to have a (non-default) package declaration.  missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  relnotes=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;0;moe sync 2020-04-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> this change suppresses defaultpackage check for any java class which uses the default java package in preparation for enabling a compiler error that will prevent new instances of the bugthe google java style guide §821 requires java files to have a (non-default) package declaration  missing package declarations can cause odd problems that are difficult to debug such as a class not being included in a test suite or confusion around package-private visibilityrelnotessuppresses warning for using default package6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;;;;1;1;this change suppresses defaultpackage check for any java class which uses the default java package in preparation for enabling a compiler error that will prevent new instances of the bugthe google java style guide §821 requires java files to have a (non-default) package declaration  missing package declarations can cause odd problems that are difficult to debug such as a class not being included in a test suite or confusion around package-private visibilityrelnotessuppresses warning for using default package-------------created by moe: https://githubcom/google/moemoe_migrated_revid307410557;
3875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hide internetdomainname.region() from gwt/j2cl.  the method is not used from gwt/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> update public suffix data.  the guava copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b;;0;moe sync 2020-04-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> hide internetdomainnameregion() from gwt/j2clthe method is not used from gwt/j2clc5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3-------<p> update public suffix datathe guava copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates2cd759cecd0b76ab124d1a32522fb43880b5358b;;;;;1;1;update public suffix datathe guava copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid308028590;
3876;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663;;3873.0;moe sync 2020-04-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #387327506700d2ce3a3a24840aa0ba932dba4a275663;;setscartesianproductcontains complexity depended on now-removed optimization in android version;this was almost certainly my fault but as i look at the implementation of setscartesianproduct i think its `contains` method made the assumption that `immutablesetaslist()indexof` was o(1) which is no longer the case for android  it should probably get a specific `contains` implementation that actually is o(sets) not o(sets*setsize);;1;0;fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #3873-------------created by moe: https://githubcom/google/moemoe_migrated_revid308079008;
3885;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb;;3883.0;moe sync 2020-04-28;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 14350732638838a704a86f565065a7573a13bb95d919a6c5bcbeb;;move comment to a more appropriate location;signed-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>;     clas look good thanks!  || thanks!a quick question in case you happen to have immediate thoughts on it if not no problemis it suspicious that the `putcoalescing` implementation for `subrangemap` has the very kind of `rangeisempty()` check that this comment seems to warn against? || good catch test and fix is in  ||;1;0;move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 1435073263883relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308826616;
3887;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2;;3886.0;moe sync 2020-04-28;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated38866e0e978abc6d3de458ed7e2b9cb0533c735d36a2;; treerangemapsubrangemapputcoalescing;the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violatedsigned-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>;;1;0; treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated3886relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308881996;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;3890.0;moe sync 2020-05-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f;;powersetequals depends on sets iteration order;if `comgooglecommoncollectsetspowerset` is called with two different sets that contain the same elements but in a different iteration order the returned power sets will also contain the same elements but in a different iteration order therefore `setequals` on those power sets is `true` but `comgooglecommoncollectsetspowersetequals` incorrectly returns `false`;wow almost 7 years old! nice find || thanks!   || 👍👍👍👍😀😀 ||;1;0;fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;3891.0;moe sync 2020-05-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f;;fix equals when comparing two powerset instances with different order;fixes https://githubcom/google/guava/issues/3890;thanks for the improvement! that certainly does look like a bug and i appreciate the reproducing testill mirror this change internally and you should see it added back out later today or tomorrow || cool thank you!   im very glad to have helped ||;1;0;fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434;
3893;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035;;3880.0;moe sync 2020-05-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adds constants for `cross-origin-embedder-policy(-report-only)?` headers ([w3]( constants for `cross-origin-embedder-policy(-report-only)?` headersa061f7e066ad470b47b749c0514ac581cf2397e2-------<p> implement trylockuninterruptibly3880c9278360493d074ecc88c9d42adbcde2ad90f035;;implement trylockuninterruptibly;based on awaituninterruptibly(condition );  @arhimondr before this can/will be merged you need to sign the cla check the message from the googlebot || @original-codematrix im on it hopefully im going to be able to sign soon ||    clas look good thanks!  || @original-codematrix done ||;1;0;implement trylockuninterruptibly3880relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid310009910;
3898;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;0;moe sync 2020-05-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure queueworker does not outlive sequentialexecutor on ioswhen `sequentialexecutor` is used on ios as j2objc-transpiled code we need tomake sure that `sequentialexecutorqueueworker` does not outlive its outerclass previously because the inner class was annotated with `@weakouter` itcould happen and when this happened the inner class would then invokemethods on a dangling pointer and crash the process in turn the issue is now by annotating the worker field in the outer class with `@retainedwith`although `@retainedwith` was initially designed for bimaps the annotationaddresses exactly the lifecycle problem here180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;;;;1;1;ensure queueworker does not outlive sequentialexecutor on ioswhen `sequentialexecutor` is used on ios as j2objc-transpiled code we need tomake sure that `sequentialexecutorqueueworker` does not outlive its outerclass previously because the inner class was annotated with `@weakouter` itcould happen and when this happened the inner class would then invokemethods on a dangling pointer and crash the process in turn the issue is now by annotating the worker field in the outer class with `@retainedwith`although `@retainedwith` was initially designed for bimaps the annotationaddresses exactly the lifecycle problem hererelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid311046012;
3899;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;3878.0;moe sync 2020-05-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> in immutableintarray use arrayscopyof when expanding the internal array909bdb290675c41238a194ad32e6686cda58f6dc-------<p> implemented lastindexof in cartesianlist387813da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;issue #3874: improve cartesianproductlastindexof;implemented `lastindexof()` in `certesianlist` and added appropriate tests;;1;0;implemented lastindexof in cartesianlist3878relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid311190643;
3904;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;0;moe sync 2020-05-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress identityhashmapboxing checkthis would soon become an error in blaze0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60-------<p> adding the sec-ch-ua header ignore clangtidy it has to do with the constant naming scheme for  for header: https://wicggithubio/ua-client-hints/bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;;;;1;1;adding the sec-ch-ua header ignore clangtidy it has to do with the constant naming scheme for  for header:  by moe: https://githubcom/google/moemoe_migrated_revid311420502;
3905;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding the rest of the client-hints headers (besides arch which i don t think we need).  header spec here:   relnotes=n/a  fab81c3b8e934e47c7cb846b1428865781ac2200;;0;moe sync 2020-05-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adding the rest of the client-hints headers (besides arch which i dont think we need)header spec here: https://wicggithubio/ua-client-hints/#http-ua-hintsrelnotesn/afab81c3b8e934e47c7cb846b1428865781ac2200;;;;;1;1;adding the rest of the client-hints headers (besides arch which i dont think we need)header spec here:  by moe: https://githubcom/google/moemoe_migrated_revid311801249;
3915;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that ranges are immutable.  fixes   9485ee0fb525dfa69d91561aba0035b371d9c327;;0;moe sync 2020-06-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> document that ranges are immutablefixes https://githubcom/google/guava/issues/18139485ee0fb525dfa69d91561aba0035b371d9c327;;;;;1;1;document that ranges are immutablefixes  by moe: https://githubcom/google/moemoe_migrated_revid313873952;
3919;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;0;moe sync 2020-06-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove @donotcall from fluentiterablefrom(fluentiterable)4ec122fa84a4d3384324250a74120d32e0ccfa1c-------<p> update public suffix datathis copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;;;;1;1;update public suffix datathis copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid314699619;
3921;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement bigintegermath.roundtodouble  which rounds to the nearest representable double value.  partially implements   relnotes= math : added  bigintegermath.roundtodouble .  d01a196043e7d1620f2880da5d35a31da9acd898;;0;moe sync 2020-06-05;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> implement bigintegermathroundtodouble which rounds to the nearest representable double valuepartially implements  added `bigintegermathroundtodouble`d01a196043e7d1620f2880da5d35a31da9acd898;;;;;1;1;implement bigintegermathroundtodouble which rounds to the nearest representable double valuepartially implements  added `bigintegermathroundtodouble`-------------created by moe: https://githubcom/google/moemoe_migrated_revid314837286;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;3911.0;moe sync 2020-06-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991;;unmodifiablemultimapforeach inefficiently uses the default implementation;`unmodifiablemultimapforeach` uses the `multimapforeach` default implementation which involves listing entries and creating a new lambda instead of simply passing the biconsumer through to the protected instance this is safe to pass directly though because `foreach(biconsumer)` is a read-only operation;proposed solution:  ||;1;0;discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;3912.0;moe sync 2020-06-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991;;3911 efficient unmodifiablemultimap foreach;foreach can pass calls directly to the delegate protectedcollection because it is a read-only operation;;1;0;discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918;
3924;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;0;moe sync 2020-06-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress identityhashmapboxing check6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;;;;1;1;suppress identityhashmapboxing check-------------created by moe: https://githubcom/google/moemoe_migrated_revid315558134;
3925;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> break retain-cycle in converter.java  when used in j2objc target.  4e820ef25352203e042bc4fc45547fae3da7c55d;;0;moe sync 2020-06-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> break retain-cycle in converterjava when used in j2objc target4e820ef25352203e042bc4fc45547fae3da7c55d;;;;;1;1;break retain-cycle in converterjava when used in j2objc target-------------created by moe: https://githubcom/google/moemoe_migrated_revid315679614;
3930;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> cleanup bytestreamstest.java to fix a couple of intellij warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> inline  bytestreamstest#assertequals(byte  byte)   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d;;0;moe sync 2020-06-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> cleanup bytestreamstestjava to fix a couple of intellij warnings/suggestions#codehealhacc2296fdea9cb498431a92eb5b363262b74b313-------<p> inline `bytestreamstest#assertequals(byte byte)`#codehealth62ee8a07ad4d3c66e255da66a3382ac790656e2d;;;;;1;1;inline `bytestreamstest#assertequals(byte byte)`#codehealth-------------created by moe: https://githubcom/google/moemoe_migrated_revid315898541;
3931;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34;;0;moe sync 2020-06-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> upgraded bytestreams#copy(inputstream outputstream) to use the faster filechannel if possiblesee also  for some backgroundrelnotes`io`: upgraded `bytestreams#copy(inputstream outputstream)` to use the faster `filechannel` if possible27bc3deb733b2f38bd853953fa21e2e116fc6c34;;;;;1;1;upgraded bytestreams#copy(inputstream outputstream) to use the faster filechannel if possiblesee also  for some backgroundrelnotes`io`: upgraded `bytestreams#copy(inputstream outputstream)` to use the faster `filechannel` if possible-------------created by moe: https://githubcom/google/moemoe_migrated_revid316177487;
3936;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a;;0;moe sync 2020-06-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4causing some internal failures457767d10299005df3f7a3e7aba3eef8ee528b9a;;;;;1;1;revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4causing some internal failures-------------created by moe: https://githubcom/google/moemoe_migrated_revid316509747;
3937;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add a guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> avoid reentrancy in executionsequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> revert db53357fea477695deeaa32746660bf86d6d51c1  broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018;;0;moe sync 2020-06-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add a guava wiki entry about finding the min/max for various circumstances3bb0d85dd8f0e404684bede39c06bc0602b3f0c5-------<p> avoid reentrancy in executionsequencerdb53357fea477695deeaa32746660bf86d6d51c1-------<p> revert db53357fea477695deeaa32746660bf86d6d51c1broke a test2ef8463838b23ae8c40c022fd96e7b143e0de018;;;;;1;1;revert db53357fea477695deeaa32746660bf86d6d51c1broke a test-------------created by moe: https://githubcom/google/moemoe_migrated_revid316808913;
3939;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add longmath.roundtodouble.  relnotes=add longmath.roundtodouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> add a test for the bug introduced by cl 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146;;0;moe sync 2020-06-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add longmathroundtodoublerelnotesadd longmathroundtodouble (#3895)6f176593caf7fe7549c115ada136287ea31e2875-------<p> add a test for the bug introduced by cl 31677947168962e5893c9812d79508d82c8b70e9bb7350146;;;;;1;1;add a test for the bug introduced by cl 316779471-------------created by moe: https://githubcom/google/moemoe_migrated_revid316982088;
3941;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de;;0;moe sync 2020-06-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> avoid reentrancy in executionsequencer37d4506a2874cd223d88ebf98e8d28ff333c11de;;;;;1;1;avoid reentrancy in executionsequencerrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid317189958;
3942;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327;;0;moe sync 2020-06-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc codethe @retainedwith annotation can not be used on both sides of the retain-cycle the regularimmutablebimap does not have this problem because it uses inverse inner class this cl applies similar trick in singletonimmutablebimap although without additional inner classrelnotesupdate singletonimmutablebimap to avoid retain-cycle in transpiled obj-c coded7d07d50c7ae699b71c9a239212f4c3728180327;;;;;1;1;fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc codethe @retainedwith annotation can not be used on both sides of the retain-cycle the regularimmutablebimap does not have this problem because it uses inverse inner class this cl applies similar trick in singletonimmutablebimap although without additional inner classrelnotesupdate singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code-------------created by moe: https://githubcom/google/moemoe_migrated_revid317856944;
3947;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct longmath.roundtodouble for values at and near long.max_value  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> in immutabledoublearray and immutablelongarray  use arrays.copyof when expanding the internal array.  in immutableintarray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> implement bigdecimalmath.roundtodouble.  relnotes=add bigdecimalmath.roundtodouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee;;0;moe sync 2020-06-29;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct longmathroundtodouble for values at and near longmax_value3d88ea8f940ecadea86d12f8993ac58f99684e6b-------<p> in immutabledoublearray and immutablelongarray use arrayscopyof when expanding the internal arrayin immutableintarray where we already made this change remove an inconsistent `this`6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e-------<p> implement bigdecimalmathroundtodoublerelnotesadd bigdecimalmathroundtodouble690b2a6b02bddcaab0a4050a92f490546c71e2ee;;;;;1;1;implement bigdecimalmathroundtodoublerelnotesadd bigdecimalmathroundtodouble-------------created by moe: https://githubcom/google/moemoe_migrated_revid318342542;
3949;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f;;0;moe sync 2020-06-30;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix converterjava by moving @retainedwith annotation to the correct side of the cyclethe annotation should be placed inside the ""parent"" object and not the ""child"" objectreference: https://developersgooglecom/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/retainedwithrelnotesn/a58ad44a9ac2fde40095f28c504c95c6fed902d1f";;;;;1;1;"fix converterjava by moving @retainedwith annotation to the correct side of the cyclethe annotation should be placed inside the ""parent"" object and not the ""child"" objectreference:  by moe: https://githubcom/google/moemoe_migrated_revid319018701";
3950;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3;;0;moe sync 2020-07-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove unnecessary commenta3084e48846ebddfc9d046670f7be8c0f60e6cb3;;;;;1;1;remove unnecessary commentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid319265960;
3954;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hint with the type that  oldfuture  /  newfuture  /  ref  s  future  never contains a value.  being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196;;0;moe sync 2020-07-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> hint with the type that `oldfuture` / `newfuture` / `ref`s `future` never contains a valuebeing clear may become slightly more valuable when we put nullness type annotations on this codee655aa8df4bd53a11edf8bb99e8b35f746f54196;;;;;1;1;hint with the type that `oldfuture` / `newfuture` / `ref`s `future` never contains a valuebeing clear may become slightly more valuable when we put nullness type annotations on this coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid319804826;
3956;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix annotation positions in guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> update public suffix data.  the  copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  for this update    8ec74f444b4903871face31bf10139375749358b;;0;moe sync 2020-07-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix annotation positions in guava795b357bddc097c87340f0ce573160b2d39e97c6-------<p> update public suffix datathe  copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesfor this update 8ec74f444b4903871face31bf10139375749358b;;;;;1;1;update public suffix datathe  copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesfor this update -------------created by moe: https://githubcom/google/moemoe_migrated_revid320112849;
3958;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> declare static types as queue instead of deque.  this may slightly clarify how the object is used.  (i was looking through com.google.common for deque instances that were used as stacks  so i noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb;;0;moe sync 2020-07-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> declare static types as queue instead of dequethis may slightly clarify how the object is used(i was looking through comgooglecommon for deque instances that were used as stacks so i noticed this one that was used only as a queue)752dd15c34f206b2103e2bd338610177088c4feb;;;;;1;1;declare static types as queue instead of dequethis may slightly clarify how the object is used(i was looking through comgooglecommon for deque instances that were used as stacks so i noticed this one that was used only as a queue)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid320498758;
3962;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> speed up traverser and cut about 30 lines of code.  when stacked against the unsubmitted walker  before the change:    breadthfirst was roughly on par     preorder/postorder were about 70% slower (1359 vs. 2358)   after adopting the walker impl  the tree traversal preorder/postorder are improved close to walker impl.  there is still about 10% slowness (2405 vs. 2268) remaining  which i suspect is due to iterator being slower than spliterator  because with spliterator  we can tryadvance() once for each element  while with iterator  we have to call both hasnext() and next().  the graph traversal adoption is similar  with about 15% remaining slowness compared to walker (1583 vs. 1338)  which is likely result of spliterator.tryadvance() vs. iterator.hasnext() + next().  did not adopt the walker s breadth-first impl for the following reasons:  1. adopting the walker s breadth-first impl contributed about 10% slowdown compared to the current impl. i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. in the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  on the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  for follow-up: it might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. plus we can reuse code and delete the two existing breadthfirstiterator classes.  i m going to add the benchmark class in the the labs directory to compare between iteration and traverser.  relnotes=optimize traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> add tostring() for sequentialexecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe;;0;moe sync 2020-07-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> speed up traverser and cut about 30 lines of codewhen stacked against the unsubmitted walker before the change:   breadthfirst was roughly on par   preorder/postorder were about 70% slower (1359 vs 2358)after adopting the walker impl the tree traversal preorder/postorder are improved close to walker implthere is still about 10% slowness (2405 vs 2268) remaining which i suspect is due to iterator being slower than spliterator because with spliterator we can tryadvance() once for each element while with iterator we have to call both hasnext() and next()the graph traversal adoption is similar with about 15% remaining slowness compared to walker (1583 vs 1338) which is likely result of spliteratortryadvance() vs iteratorhasnext() + next()did not adopt the walkers breadth-first impl for the following reasons:1 adopting the walkers breadth-first impl contributed about 10% slowdown compared to the current impl i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator in the full traversal benchmark its likely faster than consuming the successor iterator lazilyon the other hand the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazilyfor follow-up: it might be better to go complete lazy for breadth-first even at the cost of 10% slowdown in the full-traversal benchmark plus we can reuse code and delete the two existing breadthfirstiterator classesim going to add the benchmark class in the the labs directory to compare between iteration and traverserrelnotesoptimize traversere81f5012d5207c4f07b49007eeff3d19ae618cf8-------<p> add tostring() for sequentialexecutors worker runnable1facb168dc541be1afa2bf26e15340b0a2e3cffe;;;;;1;1;add tostring() for sequentialexecutors worker runnablerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid320760882;
3964;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  relnotes=lazier traverser#breadthfirst().  579c06dc9453fc7b09c8b392507cba09e239c363;;0;moe sync 2020-07-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make breadth-first iterators consume the successor iterators lazily and refactor to  cut about 150 lines of coderelnoteslazier traverser#breadthfirst()579c06dc9453fc7b09c8b392507cba09e239c363;;;;;1;1;make breadth-first iterators consume the successor iterators lazily and refactor to  cut about 150 lines of coderelnoteslazier traverser#breadthfirst()-------------created by moe: https://githubcom/google/moemoe_migrated_revid321062203;
3967;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> unconditionally call setexception for rejectedexecutionexception.  under jdk11  the write to thrownbyexecute / thrownfromdelegate is upsetting tsan. i *suspect* that tsan is incorrect (and that it is likely to identify the same  problem  in other code).  however  we years ago questioned whether the code i m removing served any real purpose (fixes  ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current tsan failure.  the code that we re running in the executor is under our control. (that is  we re the ones who implement runnable.run().) we re catching exceptions (and thus any rejectedexecutionexception) in the obvious places. occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op).  the one(?) exception to that is that interruptibletask.run() can call currentthread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. at some point  though  i throw my hands up and say  whatever.   (if the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directexecutor. but i note that rejectionpropagatingexecutor  at least  already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely). so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. i think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> add @donotmock to traverser.  relnotes=add @donotmock to traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9;;0;moe sync 2020-07-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> unconditionally call setexception for rejectedexecutionexceptionunder jdk11 the write to thrownbyexecute / thrownfromdelegate is upsetting tsan i *suspect* that tsan is incorrect (and that it is likely to identify the same ""problem"" in other code)however we years ago questioned whether the code im removing served any real purpose(fixes  now seems like a good time to get rid of it and at minimum hopefully eliminate the current tsan failurethe code that were running in the executor is under our control (that is were the ones who implement runnablerun()) were catching exceptions (and thus any rejectedexecutionexception) in the obvious places occasionally we do call listeners but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op)the one(?) exception to that is that interruptibletaskrun() can call currentthreadinterrupt() which we learned a few years ago can call arbitrary code through nio callbacks at some point though i throw my hands up and say ""whatever""(if the interrupt were to be a problem it would have to be with an executor that executes tasks inline like directexecutor but i note that rejectionpropagatingexecutor at least already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely) so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again only in concert with nio interrupt callbacks i think)238c383c13d05a75bb6b590f1542e5f4b11f0634-------<p> add @donotmock to traverserrelnotesadd @donotmock to traverser83e545cd90bbd64b71ac66ff51267bca670bf8f9";;;;;1;1;add @donotmock to traverserrelnotesadd @donotmock to traverser-------------created by moe: https://githubcom/google/moemoe_migrated_revid321469875;
3970;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> warn about stack overflows from directexecutor  add more warnings (including on abstractfuture.set* and cancel)  and move warnings to directexecutor itself.  e649a158d3202beefd3375c1774db90a31228708;;0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> warn about stack overflows from directexecutor add more warnings (including on abstractfutureset* and cancel) and move warnings to directexecutor itselfe649a158d3202beefd3375c1774db90a31228708;;;;;1;1;warn about stack overflows from directexecutor add more warnings (including on abstractfutureset* and cancel) and move warnings to directexecutor itselfrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid322398596;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;1315.0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`1ec90b045a45b4603ea5bd1c296f284ec1c438db;;add awaitterminationuninterruptibly() for executorservice; the interface executorservice provides the method awaittermination(longtimeunit) it would be nice to have ""uninterruptibly"" pendats in the uninterruptibles-class like:boolean awaitterminationuninterruptibly(executorservice executor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplong timeout&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsptimeunit unit)//await the termination till the end of all daysvoid awaitterminationuninterruptibly(executorservice executor)"; _issue #1595 has been merged into this issue_ || i would also like this lets add votes to this as more people want it || heyi would like to work on this so based on the original issue we need 2 methods:- `boolean awaitterminationuninterruptibly(executorservice executor long timeout timeunit unit)`- `void awaitterminationuninterruptibly(executorservice executor)`and the 1st one will be similar to `boolean awaituninterruptibly(countdownlatch latch long timeout timeunit unit)` but for the executorservice while the 2nd one will call the first one but for a very long time as timeoutdoes this make sense? thanks!for the second one we implement it separately to avoid the calls to `systemnanotime()` entirely (those calls arent _too_ expensive but its straightforward enough to implement both the timed and untimed versions) as youve probably seen we have some [existing examples of untimed implementations]( ||  the `countdownlatch` has 2 methods for await (with and without timeout) which is why we can leverage it to avoid the call to `systemnanotime()` but for executorservice there is just one `awaittermination` which needs the timeout so we will require the call ill see if i can find a way to bring these 2 methods as close as i can to the current method designs thoughthanksnisarg || oops now i understand i guess you can still avoid calling nanotime by repeatedly calling awaittermination with the same large timeout but i see now why its not the same as countdownlatchwe could also consider not providing the infinite-wait version || yeah i dont see any harm in keeping the method for anyone to use if really need to i will handle the case where i will set a large timeout and not call `systemnanotime()` when infinite time method is called what do you think?also along with this code and its corresponding testcases in the test file is there anything else that will be needed (documentation etc)? || thanks that all sounds great i dont think we need anything else || @cpovirk any update on my pull request? ||;1;0;add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`-------------created by moe: https://githubcom/google/moemoe_migrated_revid322581454;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;3908.0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`1ec90b045a45b4603ea5bd1c296f284ec1c438db;;#1315 add awaitterminationuninterruptibly() for executorservice - m…; kindly review the changes and suggest editsthanksnisarg;     i signed it!on thu may 21 2020 at 7:09 pm googlebot <notifications@githubcom> wrote:>  >>>> 📝 *please visit  < to sign*>>>>  > ------------------------------>> what to do if you already signed the cla individual signers>>>>    - its possible we dont have your github username or youre using a>>    different email address on your commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    < corporate signers>>>>    - your company has a point of contact who decides which employees are>>    authorized to participate ask your poc to be added to the group of>>    authorized contributors if you dont know who your point of contact is>>    direct the google project maintainer to go/cla#troubleshoot (public>>    version <    - the email used to register you as an authorized contributor must be>>    the email used for the git commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    <    - the email used to register you as an authorized contributor must>>    also be attached to your github account>>    <  *googlers: go here>> < for more info*>>>> —>> you are receiving this because you authored the thread>> reply to this email directly view it on github>> < or>> unsubscribe>> < >>> || ;1;0;add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`-------------created by moe: https://githubcom/google/moemoe_migrated_revid322581454;
3973;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> shorten tostring for abstractfuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> de-beta toimmutable* methods in gwt variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2;;0;moe sync 2020-07-23;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> shorten tostring for abstractfuture implementations inside utilconcurrent9da95c25c87f8ae009bfa56410db470ed0760f14-------<p> de-beta toimmutable* methods in gwt variants(""emulated"") of commoncollect4e12478cc5955c20ea34095acf274a2c8172a2c2";;;;;1;1;"de-beta toimmutable* methods in gwt variants(""emulated"") of commoncollect-------------created by moe: https://githubcom/google/moemoe_migrated_revid322779681";
3982;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that the set returned by immutablemap<k  v>.keyset() is serializable when k is serializable  and similarly for values().  set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemap.keyset() due to a reference from the returned set back to the original map. when serializing this set  the original map is serialized is well. this change changes this so that only the keys are serialized.  relnotes= collect : ensure that the set returned by  immutablemap<k  v>.keyset()  is serializable when  k  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76;;0;moe sync 2020-08-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure that the set returned by immutablemap<k v>keyset() is serializable when k is serializable and similarly for values()set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemapkeyset() due to a reference from the returned set back to the original map when serializing this set the original map is serialized is well this change changes this so that only the keys are serializedrelnotes`collect`: ensure that the set returned  immutablemap<k v>keyset()` is serializable when `k` is serializable (and similarly for `values()`)cf94f5601b32662a236f5534c1a7d4ceab132e76;;;;;1;1;ensure that the set returned by immutablemap<k v>keyset() is serializable when k is serializable and similarly for values()set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemapkeyset() due to a reference from the returned set back to the original map when serializing this set the original map is serialized is well this change changes this so that only the keys are serializedrelnotes`collect`: ensure that the set returned  immutablemap<k v>keyset()` is serializable when `k` is serializable (and similarly for `values()`)-------------created by moe: https://githubcom/google/moemoe_migrated_revid324749502;
3983;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory-leaks in localcache on ios  caused by:  1. retain-cycle between outer localcache instance and inner values  keyset and entryset instances. the use of @weak and @weakouter is incorrect there  since inner instances can outlive outer localcache instance. the correct solution is to use @retainedwith annotation to inner-classes.  2. retain-cycle between referenceentry objects which internally form a doubly-linked list. fixed by adding @weak annotation to  next  and  previous  links. this is correct  since referenceentry instances are already retained by segments.  the unit test for leak detection is added inside xplat  because the required testing infrastructure is not present inside  google_common  (the iosasserts class). eventually  everything should be moved to  google_common .  relnotes=fix memory-leak in localcache on ios  8fb1cada24cae186226f0d3785704fc19ea2e9fa;;0;moe sync 2020-08-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix memory-leaks in localcache on ios caused by:1 retain-cycle between outer localcache instance and inner values keyset and entryset instances the use of @weak and @weakouter is incorrect there since inner instances can outlive outer localcache instance the correct solution is to use @retainedwith annotation to inner-classes2 retain-cycle between referenceentry objects which internally form a doubly-linked list  by adding @weak annotation to ""next"" and ""previous"" links this is correct since referenceentry instances are already retained by segmentsthe unit test for leak detection is added inside xplat because the required testing infrastructure is not present inside ""google_common"" (the iosasserts class) eventually everything should be moved to ""google_common""relnotesfix memory-leak in localcache on ios8fb1cada24cae186226f0d3785704fc19ea2e9fa";;;;;1;1;"fix memory-leaks in localcache on ios caused by:1 retain-cycle between outer localcache instance and inner values keyset and entryset instances the use of @weak and @weakouter is incorrect there since inner instances can outlive outer localcache instance the correct solution is to use @retainedwith annotation to inner-classes2 retain-cycle between referenceentry objects which internally form a doubly-linked list  by adding @weak annotation to ""next"" and ""previous"" links this is correct since referenceentry instances are already retained by segmentsthe unit test for leak detection is added inside xplat because the required testing infrastructure is not present inside ""google_common"" (the iosasserts class) eventually everything should be moved to ""google_common""relnotesfix memory-leak in localcache on ios-------------created by moe: https://githubcom/google/moemoe_migrated_revid325008493";
3985;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [efficiency] modifies texttonumericformatv4 to parse the input string in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;0;moe sync 2020-08-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices97638e61eb63e1fb3f994cbf3079c33205fa61b9-------<p> [efficiency] modifies texttonumericformatv4 to parse the input string in place0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;;;;1;1;[efficiency] modifies texttonumericformatv4 to parse the input string in placerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid325432680;
3987;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86;;0;moe sync 2020-08-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> avoid boxing in doublesconstraintorange() and floatsconstraintorange()fixes  remove `@beta` from `multimapstomultimap`fixes  removed `@beta` from `multimapstomultimap`b9fe10a7b1c67518d9c6b86fc6611473943c188c-------<p> bring back previously deleted serializedforms so that old data can still be readrelnotes`collect`: data that was previously serialized and that originated from immutablemapkeyset() or values() is now deserializable againd66fda44e127d00e401cadde1834454feffade86;;;;;1;1;bring back previously deleted serializedforms so that old data can still be readrelnotes`collect`: data that was previously serialized and that originated from immutablemapkeyset() or values() is now deserializable again-------------created by moe: https://githubcom/google/moemoe_migrated_revid326086350;
3988;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] modifies testtonumericformatv6 to parse the input string in place.  relnotes= inetaddresses : inetaddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55;;0;moe sync 2020-08-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> [efficiency] modifies testtonumericformatv6 to parse the input string in placerelnotes`inetaddresses`: inetaddress parsing is now more efficient62a8cc4512d12d7afd1960ddca07b595be3eaf55;;;;;1;1;[efficiency] modifies testtonumericformatv6 to parse the input string in placerelnotes`inetaddresses`: inetaddress parsing is now more efficient-------------created by moe: https://githubcom/google/moemoe_migrated_revid326264503;
3994;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t directly call bytebuffer  etc. methods that have covariant returns in java 9+.  doing so produces a jar that doesn t work under java 8.  this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead)  but we should also add safeguards.  the normal solution to this general problem is to use --release  but doing so here is complicated.  for more information  see   406a4eafa25ccd8f456622be19e2ce1e624bc227;;0;moe sync 2020-08-21;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> dont directly call bytebuffer etc methods that have covariant returns in java 9+doing so produces a jar that doesnt work under java 8this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead) but we should also add safeguardsthe normal solution to this general problem is to use --release but doing so here is complicatedfor more information see https://githubcom/google/guava/issues/3990406a4eafa25ccd8f456622be19e2ce1e624bc227;;;;;1;1;dont directly call bytebuffer etc methods that have covariant returns in java 9+doing so produces a jar that doesnt work under java 8this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead) but we should also add safeguardsthe normal solution to this general problem is to use --release but doing so here is complicatedfor more information see  by moe: https://githubcom/google/moemoe_migrated_revid327654073;
3996;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-08-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding sec-ch-ua-arch header.  header spec here:   relnotes=n/a  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> work around an android bug in locksupport  this time with @canignorereturnvalue  a849f7f1264b586d44f2b34f274bac9f1d7eff19;;0;moe sync 2020-08-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adding sec-ch-ua-arch headerheader spec here:  work around an android bug in locksupport this time with @canignorereturnvaluea849f7f1264b586d44f2b34f274bac9f1d7eff19;;;;;1;1;work around an android bug in locksupport this time with @canignorereturnvalue-------------created by moe: https://githubcom/google/moemoe_migrated_revid327861568;
3998;1;1;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> throw if @subscribe is applied to a method that takes a primitive parameter.  fixes   relnotes=prevent @subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;;0;moe sync 2020-08-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> throw if @subscribe is applied to a method that takes a primitive parameterfixes  @subscribe being applied to a method that takes a primitive as that will never be called9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;"i would have to look at bytecode to confirm but i dont think theres any allocation concatenation of literals happens at compile time and checkargument has non-varargs overloads:  || (it remains a fair point that we use checkargument habitually even in some cases where a manual check and throw would be better) || (i do hope that well one day add methods like illegalargument(""foo %s"" bar)) || i like the ""shortness"" of `illegalargument(""foo %s"" bar)`id like it to be clear that it throws an exceptionsomething of the sorts looks very readable:```if (checkfails) {  throw illegalargument(""foo %s"" bar)}````illegalargument` just builds the exception with the string and whatever formatting logic it applies  || ";;;;1;1;throw if @subscribe is applied to a method that takes a primitive parameterfixes  @subscribe being applied to a method that takes a primitive as that will never be called-------------created by moe: https://githubcom/google/moemoe_migrated_revid328195519;
4000;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate files.createtempdir()  noting that better alternatives exist for android as well as for users running java 7 or later.  relnotes= io : deprecated  files.createtempdir() .  9258dd9071c850dde0461f0f0cad81105442fdce;;0;moe sync 2020-08-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> deprecate filescreatetempdir() noting that better alternatives exist for android as well as for users running java 7 or laterrelnotes`io`: deprecated `filescreatetempdir()`9258dd9071c850dde0461f0f0cad81105442fdce;;;;;1;1;deprecate filescreatetempdir() noting that better alternatives exist for android as well as for users running java 7 or laterrelnotes`io`: deprecated `filescreatetempdir()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid328552787;
4003;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a;;0;moe sync 2020-08-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesac1b252294c4c5547384b86d40345e59e3dedc8a;;;;;1;1;update public suffix datathe copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid329222572;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;4012.0;moe sync 2020-09-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65; cla:yes per #4012 ||; typos/grammatical errors;i just ran stuff through grammar checkers and found some typos/grammatical errors since i only added some small changes i didnt think i needed to do anything special like open an issue or something but if i should in the future please tell me if you think i got some stuff wrong ill fix it but there are definitely some typos in there;thanks im going to merge the typo fixes and a simplification the rest of the changes look more neutral (and a few of them look like steps backward) in the interest of getting this merged quickly ill stick to the noncontroversial ones || two of these changes are typo fixes but _none_ of them fixes a grammatical error four go from correct to differently correct one goes from correct to differently correct but definitely less clear one goes from correct to incorrect one goes from debatably correct to definitely incorrect and one goes from correct code formatting to incorrect code formatting || thanks for your feedback i went and changed what i thought you were talking about and now there are only more correct changes (i think) if there is anything else please let me know and sorry about the code formatting i dont know whats going on with that || ok i  everything you said now its just the bare minimal typos ||;1;0;remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;4018.0;moe sync 2020-09-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65; cla:yes per #4012 ||;bump checker-qual from 2111 to 361;; gets us _part_ of the way there (at least to major version 3 which as youve pointed out is the especially important part)bonus: we may actually make a guava release pretty soon || thanks for upgrading to 350 ||;1;0;remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482;
4025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make equalstester test that non-strings are not equal to their string representation.  relnotes=make equalstester test that non-strings are not equal to their string representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;0;moe sync 2020-09-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make equalstester test that non-strings are not equal to their string representationrelnotesmake equalstester test that non-strings are not equal to their string representation5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;;;;1;1;make equalstester test that non-strings are not equal to their string representationrelnotesmake equalstester test that non-strings are not equal to their string representation-------------created by moe: https://githubcom/google/moemoe_migrated_revid331970427;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4004.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;assertionerror from rangegap;@zhanhb [reports]( at comgooglecommoncollectcut$abovealldescribeaslowerbound(cutjava:259)	at comgooglecommoncollectrangetostring(rangejava:674)	at comgooglecommoncollectrange<init>(rangejava:357)	at comgooglecommoncollectrangecreate(rangejava:155)	at comgooglecommoncollectrangegap(rangejava:582)```;;1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4007.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;issue #4004 assertionerror from rangegap;4004 got iae instead of assertionerror;  thanks i suspect that what wed prefer is to avoid calling `describeaslowerbound` at all in this case but id have to look at `gap` more to confirm (and to figure out what to do instead) || i think the problem is the ranges contain each other(intersection) it is illegal for `gap`and i made an opposite case```java rangeatmost(3)gap(rangeatmost(2))``````shelljavalangassertionerror	at comgooglecommoncollectcut$belowalldescribeasupperbound(cutjava:165)	at comgooglecommoncollectrangetostring(rangejava:677)	at comgooglecommoncollectrange<init>(rangejava:358)	at comgooglecommoncollectrangecreate(rangejava:156)	at comgooglecommoncollectrangegap(rangejava:583)```so i added the ranges check for the `gap`ptal   || sounds reasonable thanks would you also:- add your tests for the assertionerror cases- include the 2 input ranges in the exception message || @cpovirk  i added the test and the invalid ranges in the iae message  || thanks i got another set of eyes on this and hopefully well get it submitted internally and merged out soon ||;1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4021.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;; typos;i found multiple typos in comments and class names so i  it;"according to dictionarycom it is in fact ""interruptible"" not ""interruptable"" || thanks i changed it back || ";1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;4002.0;moe sync 2020-09-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix unsupportedoperationexception from treerangesetsubrangeset()add()4019 #40023685507ce36e24f111cabb45c6d5c5dd26565aad-------<p> deal with class#isinstance checks which are guaranteed to be false2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71-------<p> change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes https://githubcom/google/guava/issues/4028204904cbe79852e29aec2e461273f9b6112bd2f9;;unsupportedoperationexception when modify treerangesetsubrangeset(range);"unable to modify subrangeset returned by treerangesetsubrangeset(range)imo it should be availiable to do so as specified in the document```javaimport comgooglecommoncollectrangeimport comgooglecommoncollecttreerangesetimport orgjunitjupiterapitest@suppresswarnings(""unstableapiusage"")public class subrangesettest {    @test    public void testadd() {        treerangeset<integer> set  treerangesetcreate()        range<integer> range  rangeclosedopen(0 5)        setsubrangeset(range)add(range)    }    @test    public void testreplaceadd() {        treerangeset<integer> set  treerangesetcreate()        range<integer> range  rangeclosedopen(0 5)        setadd(range)        setsubrangeset(range)add(range)    }}``````javalangunsupportedoperationexception	at javabase/javautilabstractmapput(abstractmapjava:209)	at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:266)	at comgooglecommoncollecttreerangesetadd(treerangesetjava:216)	at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)	at subrangesettesttestadd(subrangesettestjava:12)``````javalangunsupportedoperationexception	at comgooglecommoncollectunmodifiableiteratorremove(unmodifiableiteratorjava:46)	at comgooglecommoncollectiteratorsclear(iteratorsjava:985)	at comgooglecommoncollectmaps$iteratorbasedabstractmapclear(mapsjava:3562)	at comgooglecommoncollecttreerangesetadd(treerangesetjava:214)	at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)	at subrangesettesttestreplaceadd(subrangesettestjava:20)```";"thanks that sounds like a bug to me tooi see a slightly different stack trace (with both guava-290-jrejar and guava-290-androidjar) so the exact failure may depend on the guava version:```# -jreexception in thread ""main"" javalangunsupportedoperationexception  at javabase/javautilabstractmapput(abstractmapjava:209)  at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:266)  at comgooglecommoncollecttreerangesetadd(treerangesetjava:216)  at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)  at issue4002main(issue4002java:8)# -androidexception in thread ""main"" javalangunsupportedoperationexception  at javabase/javautilabstractmapput(abstractmapjava:209)  at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:268)  at comgooglecommoncollecttreerangesetadd(treerangesetjava:218)  at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:899)  at issue4002main(issue4002java:8)```sorry for the trouble we will have a look || presumably because we dont implement `put` in `subrangesetrangesbylowerbound` || this is a stacktrace of ~~subrangesetremove~~ replace existing range it should meet the same stacktrace(unsupportedoperationexception) ~~over all guava versions~~ since 180 and stackoverflowererror from 140 to 170 || oh thanks i pasted from the email (which has the original text from your post) its good to know that both add _and_ remove fail || the codes and stacktraces updated || `subrangeset` was part of the initial `rangeset` in guava 140 calling `add` against that version i get a `stackoverflowerror` :) i havent checked whether `add` worked in some intermediate version`remove` at least is a successful no-op under 140 so thats a definite regression || oh sorry youre saying that `remove` is ok but that `add` is broken -- both in the case in which `add` has to remove an existing range and in the case in which it doesnt || (`add` is broken at least as far back as guava 200) || ";1;0;change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes  by moe: https://githubcom/google/moemoe_migrated_revid332443901;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;4019.0;moe sync 2020-09-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix unsupportedoperationexception from treerangesetsubrangeset()add()4019 #40023685507ce36e24f111cabb45c6d5c5dd26565aad-------<p> deal with class#isinstance checks which are guaranteed to be false2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71-------<p> change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes https://githubcom/google/guava/issues/4028204904cbe79852e29aec2e461273f9b6112bd2f9;;issue #4002 unsupportedoperationexception when modify treerangesetsubrangeset(range);the same implementation as `remove`;;1;0;change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes  by moe: https://githubcom/google/moemoe_migrated_revid332443901;
4035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add brief test to range for  [_  x].isconnected([x  _])    relnotes: n/a  4629a25981b1ff667315d481fc21bcb094d436dc;;0;moe sync 2020-09-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add brief test to range for `[_ x]isconnected([x _])`relnotes: n/a4629a25981b1ff667315d481fc21bcb094d436dc;;;;;1;1;add brief test to range for `[_ x]isconnected([x _])`relnotes: n/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332926985;
5252;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-09-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea;;4036.0;moe sync 2020-09-29;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal changes to classpath643423a88d854deb863fa08f550a6e41d2823df5-------<p> internal changes to classpathb7e83b114f95f5b776ed60f5932420e5c5fc24ad-------<p> remove unnecessary parens403630c69a1ff047f8dad3abef2c315c305e052da0b2-------<p> also print android test failures0644480db466a331b7bd9fa7a8690f37d05ddda2-------<p> fix classpathtest on android jdk 11037e10c0da8159c06fa471142ae923dceb03e4ea; setting `cla: yes` because the commit by another author is derived directly from pr #4036 from that author ||;remove unnecessary parens;this pr is related to pr #3191in #3191 unnecessary parens in `pairedstats` were omitted but its similar class `stats` was not touchedi found unnecessary parens in the class so removed;    ;1;0;fix classpathtest on android jdk 11relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid334217434;
5256;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;0;moe sync 2020-10-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fully remove gwt-rpc support externallyreally really closes  future work:- be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes (for those files it probably acts only as documentation (of something that is pretty obvious :)) our open-source build used to take action when it saw `@gwtcompatible(emulatedtrue)` but (a) it doesnt anymore (b) those files dont exist externally anymore and (c) they werent `emulatedtrue` :) i believe that our internal build requires @gwtcompatible on most files in our gwt target but i think theres an exception for gwt-target-only sources)- remove some of the gwtserializationdependencies classes however some of these classe are set up as *supertypes* of our prod classes so this would require some surgery keeping them is harmless: it doesnt actually make the classes gwt-serializable- remove the usages of serializabletrue on @gwtcompatible at least externally but maybe just entirelyrelnotes[guava types can no longer be sent over gwt-rpc]( even the earlier temporary way to reenable support (`guavagwtemergency_reenable_rpc`) no longer has an effect4d2eb90089e9115cb00477b815289a2fe56e8a24-------<p> mark bigdecimalmathtest as fully @gwtincompatiblecurrently it has every member annotated as @gwtincompatible this works fine internally but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt //githubcom/google/guava/blob/master/guava-gwt/test/com/google/common/math/bigdecimalmathtest_gwtjava0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;;;;1;1;mark bigdecimalmathtest as fully @gwtincompatiblecurrently it has every member annotated as @gwtincompatible this works fine internally but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt: by moe: https://githubcom/google/moemoe_migrated_revid334778309;
5258;0;0;0;1;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e;;0;moe sync 2020-10-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> begin tweaking guava sources to satisfy copybara- change from  to  (and from githubio links to guavadev/truthdev while im at it)- remove go/ links- add whitespace around moe directives- put moe stripping directives alone in comments moving other comment text to a separate comment- one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (ie /* */) it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment?- add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targetsthis is surely not a complete set of changes but its enough to get me startedb5dce621aed0d374d3abc000eb51cb513e7b496e;;;;;1;1;begin tweaking guava sources to satisfy copybara- change from  to  (and from githubio links to guavadev/truthdev while im at it)- remove go/ links- add whitespace around moe directives- put moe stripping directives alone in comments moving other comment text to a separate comment- one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (ie /* */) it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment?- add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targetsthis is surely not a complete set of changes but its enough to get me startedrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid334840448;
5263;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove gwt tests from open source.  we will continue to run these tests internally.  i m not sure how much value the remaining open-source gwttestsuite file provides us. hopefully it s at least a sanity check on .gwt.xml files. but i haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> tweak todos.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> remove a couple gwtserializationdependencies classes from open-source guava after all.  as noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. as *also* noted there  we have *additional* foogwtserializationdependencies classes that i m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  but i m removing these 2 because it saves me a few lines in the copybara config :)  (followup after   cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;0;moe sync 2020-10-05;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove gwt tests from open sourcewe will continue to run these tests internallyim not sure how much value the remaining open-source gwttestsuite file provides us hopefully its at least a sanity check on gwtxml files but i havent tested by breaking a gwtxml file to see what happens5773612ad40c7ab38e2cc8e5dd5a526d5b672652-------<p> tweak todos58855f44498d1dd61cfad4f812a14bac2079e71c-------<p> remove a couple gwtserializationdependencies classes from open-source guava after allas noted in 0cb89dd110ce88770207889901e95ea2ac896932 this isnt necessary as *also* noted there we have *additional* foogwtserializationdependencies classes that im leaving in place because they are *supertypes* of the prod classes and thus harder to removebut im removing these 2 because it saves me a few lines in the copybara config :)(followup after https://githubcom/google/guava/issues/3680)cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;;;;1;1;remove a couple gwtserializationdependencies classes from open-source guava after allas noted in 0cb89dd110ce88770207889901e95ea2ac896932 this isnt necessary as *also* noted there we have *additional* foogwtserializationdependencies classes that im leaving in place because they are *supertypes* of the prod classes and thus harder to removebut im removing these 2 because it saves me a few lines in the copybara config :)(followup after  by moe: https://githubcom/google/moemoe_migrated_revid335047921;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;3682.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;multimap concurrency unclear javadoc;from  [javadoc for hashmultimap](  states:  > this class is not threadsafe when any concurrent operations update the multimap concurrent read operations will work correctlydoes this mean that it is thread-safe if only one thread writes to the map (while any number of threads may read simultaniously) ? the javadoc for [other multimap implementations]( is the same and i think it should be clearer on that;"this text indeed should be revised  the only way that concurrent reads are safe is if the last write ""happens-before"" every one of them  you cant have one thread continuing to write || ";1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;5265.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;removed all references to now useless workaround;3679;;1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;5266.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;clarified hashmultimap javadoc about concurrency;3682;;1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5275;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;5272.0;moe sync 2020-10-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify how to use `iteratortester`when using `iteratortester` intellij idea automatically imports`abstractiteratortesterknownorder` however `abstractiteratortester`is private and it is not obvious that one was meant to import`iteratortesterknownorder` instead therefore this commit updates thejavadoc to give an example of how to use the api properly5272c3172e1a55041b118a984bc5863082fda32d8243-------<p> add a bunch of warnings to executionsequencersee discussion on cl 3350466400b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;clarify how to use `iteratortester`;partially addresses #5254;;1;0;add a bunch of warnings to executionsequencersee discussion on cl 335046640relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336787854;
5277;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;5276.0;moe sync 2020-10-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> dont call tostring() on the results of successful futuresrelnotesabstractfuturetostring() no longer includes the tostring() of the result771629df701dfe565024db1cabfe19d7a5b2abfc-------<p> fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;fix example in documentation for `iteratortester`;partially addresses #5254 (and fixes my own mistake in https://githubcom/google/guava/commit/9f03c474d92e724d2193ab64b5cfbd2b232a715e);;1;0;fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336911192;
5278;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f;;5250.0;moe sync 2020-10-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify that interner should be preferred instead of stringintern() the existing language implies its intended _only_ for other typessee also  document what happens when futurecallback throws exception5250 #20583d573ac2514c53d678c3855b28d9223fea9c7e8f;;google#2058 add documentation on what happens when exception thrown b…;…y callback;;1;0;document what happens when futurecallback throws exception5250 #2058relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336963896;
5280;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  if we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;0;moe sync 2020-10-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771remove cancellation propagation test as the intent of not propagating cancellation is to make sure run order is as expectedif we propagate cancellations the test failsc8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;;;;1;1;add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771remove cancellation propagation test as the intent of not propagating cancellation is to make sure run order is as expectedif we propagate cancellations the test fails-------------created by moe: https://githubcom/google/moemoe_migrated_revid337100661;
5283;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> encode all primes less-than 66 into a bitmask  use a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> added  @canignorereturnvalue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;0;moe sync 2020-10-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> encode all primes less-than 66 into a bitmaskuse a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these casesa2fcd41b7c10847d22943e083da450749a99c72b-------<p> added `@canignorereturnvalue` to `cancel`a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;;;;1;1;added `@canignorereturnvalue` to `cancel`relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337401866;
5285;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove deprecated method files.filetreetraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54;;0;moe sync 2020-10-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove deprecated method filesfiletreetraverser() that isnt being used anymore295dd8008d06d73a99ffe076d1c302113b5a8f54;;;;;1;1;remove deprecated method filesfiletreetraverser() that isnt being used anymorerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337513335;
5286;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf;;5281.0;moe sync 2020-10-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> prepare for release 30006c1d37ea914125b88bc27d0a570df84fe900a4f-------<p> remove deprecated 1-arg servicemanageraddlistenerrelnotes`utilconcurrent`: removed the deprecated 1-arg `servicemanageraddlistener(listener)` use the 2-arg `addlistener(listener executor)` overload setting the executor to `directexecutor()` for equivalent behaviord13ebb04258a0caecea56d908a391e7e694004b2-------<p> update iteratortester example with a greater ""steps"" valuethis allows iteratortester to check the edge case that when an iterator has been exhausted (that is ""next"" has been called repeatedly until ""hasnext"" returns false) then calling ""next"" on the iterator again exhibits the same behavior as the users chosen ""known good"" reference implementation5281b094a4b3f43645298a7c9bce9b5d72184d7ff4cf";;"update iteratortester example with a greater ""steps"" value";builds upon my earlier work in  and  whilst also addressing  a bit;;1;0;"update iteratortester example with a greater ""steps"" valuethis allows iteratortester to check the edge case that when an iterator has been exhausted (that is ""next"" has been called repeatedly until ""hasnext"" returns false) then calling ""next"" on the iterator again exhibits the same behavior as the users chosen ""known good"" reference implementation5281relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337541752";
5293;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add classinfo.istoplevel().  seems like a useful method? i can t remember why i didn t add it in the first place. perhaps just an oversight.  partially addresses   relnotes= reflect : added  classinfo.istoplevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;;0;moe sync 2020-10-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add classinfoistoplevel()seems like a useful method? i cant remember why i didnt add it in the first place perhaps just an oversightpartially addresses  added `classinfoistoplevel()`14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;thanks for the comments! ill fix this up internally and itll end up on the next push out tomorrow ||;;;;1;1;add classinfoistoplevel()seems like a useful method? i cant remember why i didnt add it in the first place perhaps just an oversightpartially addresses  added `classinfoistoplevel()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid338738055;
5294;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-26;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix minor documentation typos  thanks to @stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b;;0;moe sync 2020-10-26;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix minor documentation typos thanks to @stephan202 and @jbduncanfe37cd815ed687f7bd6881cb60717e0d641b3e1b;;;;;1;1;fix minor documentation typos thanks to @stephan202 and @jbduncanrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid339045611;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;5298.0;moe sync 2020-11-10;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor classpath: replace scanner with location class75c2c543c6ac64943037630cfa40945feff10f42-------<p> fix documentation for hashcodetostring() that incorrectly claimed it returned in big-endian orderthe implementation of tostring() goes through the bytes in the same order that asbytes() returns so if the order of the underlying bytes is little-endian (as is the case for longhashcode) then the string will also be little-endian contradicting what the documentation says841129afbd77f8c78bb469de2ece758b418d322b-------<p> optimize hashingcrc32c() by eliminating two xors for every byte of inputbenchmarks suggest a modest speedup around 8%b685bf7068044cfef0c73163408a0ccebacef203-------<p> add constant for origin isolation headerspec:  constant for the origin-isolation headerf3d79119d1e1f9937f332a8c73ed1690dfbb8ffb-------<p> remove outdated reference in docs3ac6e42a8622be4b122dfd4b9eef989148141148-------<p> add additional test for `crc32chashfunction`4f7e925397e6ca2b17ce3d563ba1968e94959bd1-------<p> verify maximumweight before settingthe maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform5298f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068-------<p> do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available6d9e9e33c6a784f86b51c3fac785532351374271-------<p> rollback*** original change description ***do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available***916807371db167b99bb8b591a22c9ec07fe2bac2-------<p> backport `combine` to java7 for `immutablelist` & `immutableset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsa275458c2601c33bfb5ba6ec54e2458feeeff06a-------<p> fix `loadingcache` minor documentation typofixes #550359a9556d82fc233acf8c0a3ad00de14e02384f75-------<p> added submitasync to closingfuturerelnotes""added `submitasync(asyncclosingcallable)` to `closingfuture`""187db6d240a896be6efb6fc98f014b9d4690fe30-------<p> add `x-request-id` to ` #5306relnotesadd `x-request-id` to ` fix android test failure in classpathtestreproduced the error and verified that this change fixes itc1f6ac185f0e72998ed30ae72a0983804c5a4f5a"; setting `cla: yes` since all commits with different authors come directly from prs by those authors ||;verify maximumweight before setting;the maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform;;1;0;fix android test failure in classpathtestreproduced the error and verified that this change fixes it-------------created by moe: https://githubcom/google/moemoe_migrated_revid341509765;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;5306.0;moe sync 2020-11-10;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor classpath: replace scanner with location class75c2c543c6ac64943037630cfa40945feff10f42-------<p> fix documentation for hashcodetostring() that incorrectly claimed it returned in big-endian orderthe implementation of tostring() goes through the bytes in the same order that asbytes() returns so if the order of the underlying bytes is little-endian (as is the case for longhashcode) then the string will also be little-endian contradicting what the documentation says841129afbd77f8c78bb469de2ece758b418d322b-------<p> optimize hashingcrc32c() by eliminating two xors for every byte of inputbenchmarks suggest a modest speedup around 8%b685bf7068044cfef0c73163408a0ccebacef203-------<p> add constant for origin isolation headerspec:  constant for the origin-isolation headerf3d79119d1e1f9937f332a8c73ed1690dfbb8ffb-------<p> remove outdated reference in docs3ac6e42a8622be4b122dfd4b9eef989148141148-------<p> add additional test for `crc32chashfunction`4f7e925397e6ca2b17ce3d563ba1968e94959bd1-------<p> verify maximumweight before settingthe maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform5298f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068-------<p> do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available6d9e9e33c6a784f86b51c3fac785532351374271-------<p> rollback*** original change description ***do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available***916807371db167b99bb8b591a22c9ec07fe2bac2-------<p> backport `combine` to java7 for `immutablelist` & `immutableset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsa275458c2601c33bfb5ba6ec54e2458feeeff06a-------<p> fix `loadingcache` minor documentation typofixes #550359a9556d82fc233acf8c0a3ad00de14e02384f75-------<p> added submitasync to closingfuturerelnotes""added `submitasync(asyncclosingcallable)` to `closingfuture`""187db6d240a896be6efb6fc98f014b9d4690fe30-------<p> add `x-request-id` to ` #5306relnotesadd `x-request-id` to ` fix android test failure in classpathtestreproduced the error and verified that this change fixes itc1f6ac185f0e72998ed30ae72a0983804c5a4f5a"; setting `cla: yes` since all commits with different authors come directly from prs by those authors ||;add `x-request-id` to `httpheaders`;;    ;1;0;fix android test failure in classpathtestreproduced the error and verified that this change fixes it-------------created by moe: https://githubcom/google/moemoe_migrated_revid341509765;
5308;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> backport  combine  to java7 for  immutablemap .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  the java8/java7 implementations branched once again  where java8 uses an array of entries  whereas java7 uses an array of alternating key/value pairs. either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> backport combine to java7 for  immutablerangeset / immutablerangeset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  i saved this for last  but they turned out to be the easiest to do. tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> backport  combine  to java7 for sorted collections & (immutable)bimap.  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code.  450bf69d33c855032e3698ee96bae3994cc0377e;;0;moe sync 2020-11-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> backport `combine` to java7 for `immutablemap`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsthe java8/java7 implementations branched once again where java8 uses an array of entries whereas java7 uses an array of alternating key/value pairs either way the implementations were pretty trivial this time2afe372fb9fd390ceb671003588c053b7d463399-------<p> backport combine to java7 for `immutablerangeset`/`immutablerangeset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsi saved this for last but they turned out to be the easiest to do tests are kind of crap but honestly baseline tests also seemed a little bit light to mea742fca6c4f0f96bfedac86b0722efec196b9052-------<p> backport `combine` to java7 for sorted collections & (immutable)bimapthis is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections4c7fe5993f6938d60ecbf90494c93b827253101e-------<p> fix memory leaks and potential crashes in hashbimap which occur in transpiled objc code450bf69d33c855032e3698ee96bae3994cc0377e;;;;;1;1;fix memory leaks and potential crashes in hashbimap which occur in transpiled objc coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid341781311;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;0;moe sync 2020-11-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> replaces cycle_finder references to ""--whitelist"" with ""--suppress-list"" and ""--blacklist"" with ""--restrict-to""relnotesnone3bf14a6ebdcaba662e39ea1d98e20e15cf53370d-------<p> add androidaccesstocollectorsthis adds the base immutable collectors already in collectcollectors but is still lacking the table-collections multi-collections and mutable-collectionse93c0557542e53a90ac3b5bae31a41bc102da806-------<p> backport immutabletablecombinethat should be the last combine to backport all remainging collectors are implemented in terms of existing collection transformations564439f883f709843801bb260e998ed6ac6a427d-------<p> add to[immutable]multiset to androidaccesstocollectors2a232a71cb980c689ee6b43ac241a0764d41cfbf-------<p> backport combine to immutable[list|set]multimapinterestingly immutablemultimap already had combine implemented by lowasser since 2017 probably a backport oversightc9dd38f640734604397db8fdeea3f315afb8c487-------<p> add multimap collectors to androidaccesstocollectors4a89571b10379e2e885ce221173365c7deb1b1be-------<p> add tablecollectors to androidaccesstocollectors7b5f741e939c80f0924bec4353d3b1f672d79eb4-------<p> fix open source “no tests found in comgooglecommoncollecttablecollectorstest”d5f07055a1a38227c98c4ec038d74ce7504b3d6f-------<p> update public suffix dataa132338a913fba14384234649f2a6a170f7b7dca";;;;;1;1;update public suffix data-------------created by moe: https://githubcom/google/moemoe_migrated_revid342455735;
5322;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutableenum[set|map] to androidaccesstocollectors  i think that’s the last of them.  the implementations i moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e;;0;moe sync 2020-11-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make toimmutableenum[set|map] to androidaccesstocollectorsi think that’s the last of themthe implementations i moved verbatim and there was no change of code there660f036a37966bbee88b3b002d1ad9d1afa8e50e;;;;;1;1;make toimmutableenum[set|map] to androidaccesstocollectorsi think that’s the last of themthe implementations i moved verbatim and there was no change of code thererelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid342853260;
5331;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutablesortedmap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b;;0;moe sync 2020-11-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make toimmutablesortedmap levarage collect collectorsb499958c1439b0c1c76732ec50daec8b46a1789b;;;;;1;1;make toimmutablesortedmap levarage collect collectorsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344044740;
5332;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2;;0;moe sync 2020-11-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal change412db47018be7ccee39905468f65cd1f7b9f0eb2;;;;;1;1;internal changerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344065888;
5338;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> public: add missing override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce;;0;moe sync 2020-11-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> public: add missing override annotationsda5e9d98f43b039c64a62182614f74ca188cd2ce;;;;;1;1;public: add missing override annotationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344396802;
5339;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress tsan errors for benign races.  compare other usages of  @lazyinit  on collection views  such as  hashbimap.inverse  and  abstracttable.cellset .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;0;moe sync 2020-12-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress tsan errors for benign racescompare other usages of `@lazyinit` on collection views such as `hashbimapinverse` and `abstracttablecellset`2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;;;;1;1;suppress tsan errors for benign racescompare other usages of `@lazyinit` on collection views such as `hashbimapinverse` and `abstracttablecellset`relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid345023158;
5343;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;0;moe sync 2020-12-03;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> explain when standardsystempropertyvalue() can return a null value and deprecate java_ext_dirsvalue()s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8 but i had forgotten the details about why despite past cls to update the test for specific missing keysi assume that well never actually *remove* java_ext_dirs(just slightly relevant to  deprecated `standardsystempropertyjava_ext_dirs` we do not plan to remove the api but in recent versions of java that property always has a value of `null`5cdf73749704cdb752b922ec8c66dff2d36b22de-------<p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751*** reason for rollback ***causing sheets ios crash*** original change description ***fix memory leaks and potential crashes in hashbimap which occur in transpiled objc codeadd ios specific unit tests in xplat because guava is missing infrastructure for ios tests***d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;;;;1;1;automated rollback of 67517b5a5b7627eee39a47917197998b9f974751*** reason for rollback ***causing sheets ios crash*** original change description ***fix memory leaks and potential crashes in hashbimap which occur in transpiled objc codeadd ios specific unit tests in xplat because guava is missing infrastructure for ios tests***-------------created by moe: https://githubcom/google/moemoe_migrated_revid345445573;
5347;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a;;0;moe sync 2020-12-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> systemgetproperties()getproperty > systemgetpropertymy motivation was that its slightly easier for a nullness checker to determine that systemgetproperty(standardproperty) is (generally speaking) non-null but it turns out that javaruntimename is not a standard property!still this is a slight simplification so i guess im submitting96203a3d7a76dda7190e30d58431515fd9ad4ea3-------<p> fix a bug in hashbimap which was causing crashes in sheets on iosthe crash was caused by the fact that linked-list of bientry instances inside a bucket were using @weak references and only the first entry in the list was strongly referenced the remaining ones were deallocatedwith this change sheets ios is not crashing anymore847c0235ef0a768a4d19274a1fe8264bcbfc190a;;;;;1;1;fix a bug in hashbimap which was causing crashes in sheets on iosthe crash was caused by the fact that linked-list of bientry instances inside a bucket were using @weak references and only the first entry in the list was strongly referenced the remaining ones were deallocatedwith this change sheets ios is not crashing anymorerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid345638671;
5354;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34;;0;moe sync 2020-12-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter8d571ca36055d207635d84db4159607c511de649-------<p> log a warning if running under a java 7 vmmore precisely log a warning if lambda expressions or type annotations in our classes would produce an exception if someone wants to use retrolambda or a similar tool to rewrite our classes thats fine with us if it works and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotationsthis is a step toward removing java 7 support entirely:  a warning log message when running under java 7 this warning is not _guaranteed_ to be logged when running under java 7 so please dont rely on it as your only warning about future problems if the warning _itself_ causes you trouble you can eliminate it by silencing the logger for `comgooglecommonbasemoreobjects$tostringhelper` (which is used _only_ for this warning) this warning prepares for [removing support for java 7 in 2021]( please report any problems0357006a920c9cf84d47901471a525da85deba34;;;;;1;1;log a warning if running under a java 7 vmmore precisely log a warning if lambda expressions or type annotations in our classes would produce an exception if someone wants to use retrolambda or a similar tool to rewrite our classes thats fine with us if it works and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotationsthis is a step toward removing java 7 support entirely:  a warning log message when running under java 7 this warning is not _guaranteed_ to be logged when running under java 7 so please dont rely on it as your only warning about future problems if the warning _itself_ causes you trouble you can eliminate it by silencing the logger for `comgooglecommonbasemoreobjects$tostringhelper` (which is used _only_ for this warning) this warning prepares for [removing support for java 7 in 2021]( please report any problems-------------created by moe: https://githubcom/google/moemoe_migrated_revid346795766;
5355;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-12-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858;;0;moe sync 2020-12-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> prepare for release 30181e941f66865d6bece7c3f09cde513a6cc50b858;;;;;1;1;prepare for release 301relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid347382364;
5357;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744;;0;moe sync 2020-12-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal changes965731aaf97ab84a3af5c21db64e76152bcba744;;;;;1;1;internal changesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid347456805;
5373;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;update public suffix data.;update public suffix data.  relnotes=n/a;;0;update public suffix data;update public suffix datarelnotesn/a;;;;;1;1;update public suffix datarelnotesn/apiperorigin-revid: 349591280;
5415;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;remove redundant  else  blocks.;remove redundant  else  blocks.  3974.  relnotes=n/a;;3974.0;remove redundant `else` blocks;remove redundant `else` blocks3974relnotesn/a;;removed some redundant elses using early return;;  hi @pradipta many of these look good and well push out a commit that incorporates them attributed to you soon were not taking the ones where the else branch is of roughly the same size as the if branch because those seem to have more parallelism ||;1;0;remove redundant `else` blocks3974relnotesn/apiperorigin-revid: 359299673;
5431;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;internal change.;internal change.  relnotes=n/a;;0;internal change;internal changerelnotesn/a;;;;;1;1;internal changerelnotesn/apiperorigin-revid: 362406969;
5452;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;mark  abstract*.delegate  methods in  graph  as package-private.;mark  abstract*.delegate  methods in  graph  as package-private.  the method was exposing the package-private  basegraph  type through the public type  immutablegraph .  (but it was exposing it only as  protected   and no one could subclass  immutablegraph  outside the package. so this should be mostly academic.)  fixes   relnotes=n/a;;0;mark `abstract*delegate` methods in `graph` as package-private;mark `abstract*delegate` methods in `graph` as package-privatethe method was exposing the package-private `basegraph` type through the public type `immutablegraph`(but it was exposing it only as `protected` and no one could subclass `immutablegraph` outside the package so this should be mostly academic)fixes https://githubcom/google/guava/issues/5450relnotesn/a;;;;;1;1;mark `abstract*delegate` methods in `graph` as package-privatethe method was exposing the package-private `basegraph` type through the public type `immutablegraph`(but it was exposing it only as `protected` and no one could subclass `immutablegraph` outside the package so this should be mostly academic)fixes  365607207;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;0;annotate converter for nullness;annotate converter for nullnessrelnotesn/a;;;;;1;1;annotate converter for nullnessrelnotesn/apiperorigin-revid: 368077392;
5500;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrent  relnotes=n/a;;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrentrelnotesn/a;;;;;1;1;suppress or fix all compiler warnings in util/concurrentrelnotesn/apiperorigin-revid: 368896197;
5501;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;annotate most of  reflect  for nullness.;annotate most of  reflect  for nullness.  and add some documentation relevant to   relnotes=n/a;;0;annotate most of `reflect` for nullness;annotate most of `reflect` for nullnessand add some documentation relevant to https://githubcom/google/guava/issues/3349relnotesn/a;;;;;1;1;annotate most of `reflect` for nullnessand add some documentation relevant to  368916206;
5503;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;link to the immutable collectors from the utility classes.;link to the immutable collectors from the utility classes.  relnotes=n/a;;0;link to the immutable collectors from the utility classes;link to the immutable collectors from the utility classesrelnotesn/a;;;;;1;1;link to the immutable collectors from the utility classesrelnotesn/apiperorigin-revid: 369235289;
5505;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify  atomicdoublearray.set()  javadocs.;clarify  atomicdoublearray.set()  javadocs.  relnotes=n/a;;0;clarify `atomicdoublearrayset()` javadocs;clarify `atomicdoublearrayset()` javadocsrelnotesn/a;;;;;1;1;clarify `atomicdoublearrayset()` javadocsrelnotesn/apiperorigin-revid: 369248396;
5511;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix javadoc typos;fix javadoc typos  relnotes=n/a;;0;fix javadoc typos;fix javadoc typosrelnotesn/a;;;;;1;1;fix javadoc typosrelnotesn/apiperorigin-revid: 369285465;
5512;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify lru behavior of  cachebuilder .;clarify lru behavior of  cachebuilder .  relnotes=n/a;;0;clarify lru behavior of `cachebuilder`;clarify lru behavior of `cachebuilder`relnotesn/a;;;;;1;1;clarify lru behavior of `cachebuilder`relnotesn/apiperorigin-revid: 369288424;
5533;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .  this brings its behavior in line with other  writer  implementations. unfortunately  the docs don t describe this behavior:    note also that this behavior differs from the behavior of  writer.append(null)   which is to write the four characters  null.  that behavior is itself poorly documented  since the docs for  append(charsequence)  claim that it is equivalent to  out.write(csq.tostring())   which would throw npe... though at least *that* is contradicted in the  @param  tag. (the difference between  write  and  append  presumably arises from inheriting  append  from the newer  appendable  api.)  relnotes= io : changed  charstreams.aswriter(appendable).write(string[  ...])  to reject a null  string .;;0;reject `null` in `charstreamsaswriter(appendable)write(string)`;"reject `null` in `charstreamsaswriter(appendable)write(string)`this brings its behavior in line with other `writer` implementations unfortunately the docs dont describe this behavior: also that this behavior differs from the behavior of `writerappend(null)` which is to write the four characters ""null"" that behavior is itself poorly documented since the docs for `append(charsequence)` claim that it is equivalent to `outwrite(csqtostring())` which would throw npe though at least *that* is contradicted in the `@param` tag (the difference between `write` and `append` presumably arises from inheriting `append` from the newer `appendable` api)relnotes`io`: changed `charstreamsaswriter(appendable)write(string)` to reject a null `string`";;;;;1;1;"reject `null` in `charstreamsaswriter(appendable)write(string)`this brings its behavior in line with other `writer` implementations unfortunately the docs dont describe this behavior: also that this behavior differs from the behavior of `writerappend(null)` which is to write the four characters ""null"" that behavior is itself poorly documented since the docs for `append(charsequence)` claim that it is equivalent to `outwrite(csqtostring())` which would throw npe though at least *that* is contradicted in the `@param` tag (the difference between `write` and `append` presumably arises from inheriting `append` from the newer `appendable` api)relnotes`io`: changed `charstreamsaswriter(appendable)write(string)` to reject a null `string`piperorigin-revid: 370516874";
5534;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.  relnotes=n/a;;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursivelyrelnotesn/a;;;;;1;1;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursivelyrelnotesn/apiperorigin-revid: 370523726;
5536;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;annotate  io  for nullness.;annotate  io  for nullness.  relnotes=n/a;;0;annotate `io` for nullness;annotate `io` for nullnessrelnotesn/a;;;;;1;1;annotate `io` for nullnessrelnotesn/apiperorigin-revid: 370699928;
5538;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate  math  for nullness.;annotate  math  for nullness.  relnotes=n/a;;0;annotate `math` for nullness;annotate `math` for nullnessrelnotesn/a;;;;;1;1;annotate `math` for nullnessrelnotesn/apiperorigin-revid: 370909734;
5539;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.  also  standardize todos.  relnotes=n/a;;0;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one location;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one locationalso standardize todosrelnotesn/a;;;;;1;1;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one locationalso standardize todosrelnotesn/apiperorigin-revid: 370940739;
5556;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;generalize  function  and  predicate  factories to let callers specify the desired input type.;generalize  function  and  predicate  factories to let callers specify the desired input type.  relnotes= base : changed  functions.forsupplier  and  predicates.instanceof  to accept an additional type argument to specify the input type for the returned  function / predicate . the flexibility we re adding should typically not be necessary if users follow the [pecs]( principle  but it can be useful in some cases  particularly around nullness analysis. note that this change may require updates to callers  source code (to specify an additional type argument). still  it maintains _binary_ compatibility.;;0;generalize `function` and `predicate` factories to let callers specify the desired input type;generalize `function` and `predicate` factories to let callers specify the desired input typerelnotes`base`: changed `functionsforsupplier` and `predicatesinstanceof` to accept an additional type argument to specify the input type for the returned `function`/`predicate` the flexibility were adding should typically not be necessary if users follow the [pecs]( principle but it can be useful in some cases particularly around nullness analysis note that this change may require updates to callers source code (to specify an additional type argument) still it maintains _binary_ compatibility;;;;;1;1;generalize `function` and `predicate` factories to let callers specify the desired input typerelnotes`base`: changed `functionsforsupplier` and `predicatesinstanceof` to accept an additional type argument to specify the input type for the returned `function`/`predicate` the flexibility were adding should typically not be necessary if users follow the [pecs]( principle but it can be useful in some cases particularly around nullness analysis note that this change may require updates to callers source code (to specify an additional type argument) still it maintains _binary_ compatibilitypiperorigin-revid: 373757473;
5572;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.;clarify comments discussed in   relnotes=n/a;;0;clarify comments discussed in https://githubcom/google/guava/pull/5546#discussion_r626856415;clarify comments discussed in https://githubcom/google/guava/pull/5546#discussion_r626856415relnotesn/a;;;;;1;1;clarify comments discussed in  375718171;
5582;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.;fix typo noted by @ben-manes in   relnotes=n/a;;0;fix typo noted by @ben-manes in https://githubcom/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526;fix typo noted by @ben-manes in https://githubcom/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526relnotesn/a;;;;;1;1;fix typo noted by @ben-manes in  377137506;
5583;1;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;split  java.time  tests out of  stopwatchtest .;split  java.time  tests out of  stopwatchtest .  relnotes=n/a;;0;split `javatime` tests out of `stopwatchtest`;split `javatime` tests out of `stopwatchtest`relnotesn/a;;;;;1;1;split `javatime` tests out of `stopwatchtest`relnotesn/apiperorigin-revid: 376890185;
5584;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;remove  service.state.isterminal() .;remove  service.state.isterminal() .  it was only referenced in one place. since we guarantee that transitions between the states in the  service.state  enum are always from an earlier to a later value  we know that the terminal states must be last. so it s enough to compare with the first terminal state   terminated . the code in question already does something very similar with the  running  state a few lines earlier.  relnotes=n/a;;0;remove `servicestateisterminal()`;remove `servicestateisterminal()`it was only referenced in one place since we guarantee that transitions between the states in the `servicestate` enum are always from an earlier to a later value we know that the terminal states must be last so its enough to compare with the first terminal state `terminated` the code in question already does something very similar with the `running` state a few lines earlierrelnotesn/a;;;;;1;1;remove `servicestateisterminal()`it was only referenced in one place since we guarantee that transitions between the states in the `servicestate` enum are always from an earlier to a later value we know that the terminal states must be last so its enough to compare with the first terminal state `terminated` the code in question already does something very similar with the `running` state a few lines earlierrelnotesn/apiperorigin-revid: 376892852;
