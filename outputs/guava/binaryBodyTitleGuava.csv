pr;DB;Interpreter;Logging;Thread;Data Structure;DevOps;i18n;Logic;Microservices;ML;Test;Search;IO;UI;Parser;Security;Cloud;Big Data;App;GIS;Util;NLP;APM;Network;Title;Body;prIssue;issue;issueTitle;issueBody;issueComments;issueTitleLink;issueBodyLink;issueCommentsLink;isPR;isTrain;commitMessage;Comments
2942;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;propagate close for to the inputs of streamszip and streamsmapwithindex-------------created by moe: https://githubcom/google/moemoe_migrated_revid169073180;
2942;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;add multimap_agg aggregation function;```multimap_agg(key value isdistinctvalue issortvalue) → map<karray<v>>    returns a multimap created from the input key / value pairs     difference from map_agg() is each key can be associated with multiple values    value array will be distinct if isdistinctvalue is true    value array will be sorted if issortvalue is true```;"whats your use case for this? does the following sql equivalent work for you?```select map_agg(k v)from(select k array_agg(v) as vfrom group by k)``` || @cberner thanks for your reply these two queries are equivalent actually we have considered to use the query you mentioned here is our thoughtswith the multimap_agg it benefits us:- simple query  -  `select multimap(k v) from table` is much easier to write/understand for our users than the two level query  - easier to generate query we have a query generate portal which is a ui tool for our users to generate presto queries with multimap_agg its also much easier for this tool to generate queries- performance  -  the performance of `multimap_agg` is better `multimap_agg` will only have one shuffle stage(aggregate) but `map_agg` + `array_agg` involves two shuffles it will be great if we can have some optimizers to avoid the second shuffle cause  map_agg`  -  please find the query plan below which shows the difference between these two approaches- query plans comparison  for each customer get orderdates of orderpriority   - query plan using `multimap_agg` (**one shuffle**)``` sqlpresto:default> explain select custkey multimap_agg(orderpriority orderdate false false)             -> from tpchtinyorders             -> group by custkey                                                                    query plan--------------------------------------------------------------------------------------------------------------------------------------------------- - output[custkey _col1] > [custkey:bigint multimap_agg:map<varchararray<date>>]         _col1 : multimap_agg     - exchange[gather] > custkey:bigint multimap_agg:map<varchararray<date>>         - aggregate(final)[custkey] > [custkey:bigint multimap_agg:map<varchararray<date>>]                 multimap_agg : ""multimap_agg""(""multimap_agg_10"")             - exchange[repartition] > custkey:bigint multimap_agg_10:varbinary                 - aggregate(partial)[custkey] > [custkey:bigint multimap_agg_10:varbinary]                         multimap_agg_10 : ""multimap_agg""(""orderpriority"" ""orderdate"" ""expr"" ""expr"")                     - project > [custkey:bigint orderpriority:varchar orderdate:date expr:boolean]                             expr : false                         - tablescan[tpch orders:sf001 original constrainttrue] > [custkey:bigint orderdate:date orderpriority:varchar]                                 custkey : tpch 1                                 orderdate : tpch 4                                 orderpriority : tpch 5(1 row)```- query plan using `map_agg` + `array_agg` (**two shuffle**)``` sqlpresto:default> explain select custkey map_agg(orderpriority orderdate_array)             -> from (             ->     select custkey orderpriority array_agg(orderdate) orderdate_array             ->     from tpchtinyorders             ->     group by custkey orderpriority             -> )             -> group by custkey                                                                        query plan----------------------------------------------------------------------------------------------------------------------------------------------------------- - output[custkey _col1] > [custkey:bigint map_agg:map<varchararray<date>>]         _col1 : map_agg     - exchange[gather] > custkey:bigint map_agg:map<varchararray<date>>         - aggregate(final)[custkey] > [custkey:bigint map_agg:map<varchararray<date>>]                 map_agg : ""map_agg""(""map_agg_25"")             - exchange[repartition] > custkey:bigint map_agg_25:varbinary                 - aggregate(partial)[custkey] > [custkey:bigint map_agg_25:varbinary]                         map_agg_25 : ""map_agg""(""orderpriority"" ""array_agg"")                     - aggregate(final)[custkey orderpriority] > [custkey:bigint orderpriority:varchar array_agg:array<date>]                             array_agg : ""array_agg""(""array_agg_24"")                         - exchange[repartition] > custkey:bigint orderpriority:varchar array_agg_24:varbinary                             - aggregate(partial)[custkey orderpriority] > [custkey:bigint orderpriority:varchar array_agg_24:varbinary]                                     array_agg_24 : ""array_agg""(""orderdate"")                                 - tablescan[tpch orders:sf001 original constrainttrue] > [custkey:bigint orderdate:date orderpriority:varchar]                                         custkey : tpch 1                                         orderdate : tpch 4                                         orderpriority : tpch 5(1 row)``` || @yaoxin226 that makes sense thanks for the details! i think we should remove the boolean parameters and just have it be `multimap_agg(k v) -> map<k array<v>>` which includes duplicates and does not sort the values@martint or @electrum could you approve the signature? || @cberner i agree with you the function looks neat without the boolean parameterswe added this parameter is because - little performance gain  - after we have build the multimap we will visit the array multiple times each time we need to scan the whole array to get the min/max/distinct_count value with the array already distinct sorted we can directly get the max and min- lack of `array_max` `array_min`   - we need to add these two functions to get the min/max of the arraysql comparison - multimap_agg **with** distinct and sort``` sqlselect     custkey     map[high][0] first_high_order     map[high][-1] last_high_orderfrom (    select custkey multimap_agg(orderpriority orderdate true true) map    from tpchtinyorders    group by custkey)```- multimap_agg **without** distinct and sort``` sqlselect     custkey     array_max(map[high]) first_high_order     array_min(map[high]) last_high_order     cardinality(distinct map[high]) distinct_high_order_sizefrom (    select custkey multimap_agg(orderpriority orderdate) map    from tpchtinyorders    group by custkey)``` || @cberner @martint @electrum could we finalize the signature `multimap_agg(k v) -> map<k array<v>>`? then i will update the code accordingly || @yaoxin226 that signature looks ok to me || this pr is ready to be reviewed || great! im out of the country at the moment but i should have time to review this next week  || thanks @cberner  have a nice trip || rebased on the latest master || ping || sorry this is still on my list of things to review but ive been busy with a bunch of other code reviews || totally understand take your time || this is going to conflict with  which i want to merge soon can you rebase your pr on top of that one? || the approach looked reasonable to me let me know when youve rebased on @haozhun s branch and ill review this more thoroughly || thanks for the review is haozhuns branch relatively stable for this pr to rebase on now? || i think so ya at least the parts related to functions should be the main change is that now arrays/maps use `block` as their native container type instead of `slice` || @cberner rebased on current master || i think the test failure is related to #3381  || merged thanks! sorry that took so long last couple months have been super busy || @cberner thanks for your review really glad it has been merge! seems like you have change some code before merge i will take a look at the changes and learn from it || ";;;;0;1;;
2942;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;pull 1;;;;;;0;1;;
3050;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo in immutablebimaptest.  2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> correct a typo in immutablebimaptest2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;;;;1;1;correct a typo in immutablebimaptest-------------created by moe: https://githubcom/google/moemoe_migrated_revid187268361;
3050;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo in immutablebimaptest.  2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;0;enable streaming results for jdbc connector #2960;proposed solution for customisation database #2960;;;;;0;1;;
3050;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo in immutablebimaptest.  2c5dd53d4a4830bf6cb3a50f26d3d73429932833;;0;backpressure support for most bufferuntilsubscriber use places;ive added backpressure support to `bufferuntilsubscriber` however the internal workings of `groupby` were in conflict with my clean approach therefore i kept the original `bufferuntilsubscriber` use in `groupby` and added `bufferuntilsubscriberv2` and made the various `window()` operators use it insteadive also added a two unbounded spsc queue implementations from jctools which can reduce the allocation-rate of these linked-node queuesthe problem with `groupby` seems to be that it sets a producer on the `subscriber` before it is actually subscribed to the `bufferuntilsubscriber` the v2 however sets its on producer to support proper replay and kicks out the original coordinator producer i dont know how to make the two work together yet maybe the `groupby` has to be rewritten from scratch and inline the group backpressure support request coordination and queueing more directly an alternative might be to expose the single child request amount in `bufferuntilsubscriber` through a callback to the group somehow;"holding off on this  its is a non-trivial change and i dont have time to review it right now and yes `groupby` is a very tricky one to solve we have rewritten it a couple times already there are some very tricky edge cases such as ""time gap"" and head-of-line-blocking  || @akarnokd im about to review this with @stevegury but before we do do you want anything changed on this? it does need to be rebased at a minimum if its still all valid || no changes planned to this i need to manually reapply the changes to a fresh version because my eclipses git is broken maybe it is better to review a mergeable version instead of this || see #3150 || ";;;;0;1;;
3056;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> traverser.java: add support for multiple start nodes.  update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashcode().  relnotes= common.graph.traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> fix list<foo<?>>.issubtypeof(list<foo<?>>).  this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter  turning it into foo<c>  and then list<foo<c>> isn t a subtype of list<foo<?>>.  wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). but for resolving in covariant context  wildcard should remain as is.  i found this when trying to add issubtypeof() precondition check in getsubtype()  in response to   relnotes=typetoken.issubtypeof() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> add issubtypeof()  pre -condition check before getsubtype() returns.  we have to call it before return because before type variable substitution  issubtypeof() can t apply.  see   relnotes=validate  typetoken.getsubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> traverserjava: add support for multiple start nodesupdate documentation (in this file and in graphs_explainedmd) relating to behavior and definitions of equals() and hashcode()relnotes`commongraphtraverser`: add support for traversing from multiple start nodes9dce1c3302ec118f73921c9319e7822114325a2d-------<p> fix list<foo<?>>issubtypeof(list<foo<?>>)this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter turning it into foo<c> and then list<foo<c>> isnt a subtype of list<foo<?>>wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters) but for resolving in covariant context wildcard should remain as isi found this when trying to add issubtypeof() precondition check in getsubtype() in response to  bug fix9918890013cd07ff00074a28afefd3af2c00c515-------<p> add issubtypeof() ""pre""-condition check before getsubtype() returnswe have to call it before return because before type variable substitution issubtypeof() cant applysee  `typetokengetsubtype()`f6d1461e2579f05f1106892c817681a61fc401ae";;;;;1;1;"add issubtypeof() ""pre""-condition check before getsubtype() returnswe have to call it before return because before type variable substitution issubtypeof() cant applysee  `typetokengetsubtype()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid187777105";
3056;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> traverser.java: add support for multiple start nodes.  update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashcode().  relnotes= common.graph.traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> fix list<foo<?>>.issubtypeof(list<foo<?>>).  this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter  turning it into foo<c>  and then list<foo<c>> isn t a subtype of list<foo<?>>.  wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). but for resolving in covariant context  wildcard should remain as is.  i found this when trying to add issubtypeof() precondition check in getsubtype()  in response to   relnotes=typetoken.issubtypeof() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> add issubtypeof()  pre -condition check before getsubtype() returns.  we have to call it before return because before type variable substitution  issubtypeof() can t apply.  see   relnotes=validate  typetoken.getsubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae;;0;replace tabs with spaces when showing query text in ui;;@electrum i want to take this task but can you elaborate a little bit more about the issue? when i browse ui i see query not formatted at all is summary section (query printed as a single line) so there is no tabs at all? || this tasks is for the query detail page when the original query has tabs in it || i think that to solve this issue i need to use parser to format the query because i cannot just replace all the tabs to spaces as tabs could take part in query like:```select * from t wher v  \t``` ||;;;;0;1;;
3056;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> traverser.java: add support for multiple start nodes.  update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashcode().  relnotes= common.graph.traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> fix list<foo<?>>.issubtypeof(list<foo<?>>).  this used to return false because issubtypeof() does a wildcard capture of the foo<?> type parameter  turning it into foo<c>  and then list<foo<c>> isn t a subtype of list<foo<?>>.  wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). but for resolving in covariant context  wildcard should remain as is.  i found this when trying to add issubtypeof() precondition check in getsubtype()  in response to   relnotes=typetoken.issubtypeof() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> add issubtypeof()  pre -condition check before getsubtype() returns.  we have to call it before return because before type variable substitution  issubtypeof() can t apply.  see   relnotes=validate  typetoken.getsubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae;;0;new experimental operator to switch the types on the completion of empty observables;for the issue #3037 a new operator that let consumer of an empty observable tie additional work to follow after the completion;"seems like an ok idea to me but `switchempty` and  `switchifempty` are confusing to distinguish though i like them being close together alphabetically for discoverability || aah @abersnaze i did not see that you have the changes here for #3037 i have created a pr #3060  for it too although it contains an additional operator `mergeerror` || i implemented `switchempty` as you call it as a `switchmap()concatwith()` is there a reason why that does not work? || i tried to reuse the switchifempty and merge the switchempty functionality but couldnt get the generics to work  i decided to copy and edit because switchifempty looked complicated enough with backpressure support```****************** 6579 ****          @override          public void oncompleted() {!             if (!empty) {!                 childoncompleted()!             } else if (!childisunsubscribed()) {                  subscribetoalternate()              }          }--- 6476 ----          @override          public void oncompleted() {!             if (!childisunsubscribed()) {                  subscribetoalternate()              }          }****************** 8592 ****          @override          public void onnext(t t) {!             empty  false!             childonnext(t)              arbiterproduced(1)          }      }--- 8288 ----          @override          public void onnext(t t) {!             childonerror(new runtimeexception(""switchempty used on a non empty observable possible fix is to add ignoreelements() before switchempty()""))              arbiterproduced(1)          }      }```the overhead of the switchmap and concatwith seem pretty high for such a constrained use case || @abersnaze i updated my pr with the things we discussed offline and it now has custom operator implementations optimized for this usecase where the source `observable` is never expected to emit any item || closing out so we can merge these efforts with  after agreeing upon naming:  || ";;;;0;1;;
3057;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change all instances of encoded.subsequence() to use a simple start index offset  which reduces the java memory footprint for trieparser by at at least 130 mbs. this is because the original call to subsequence() would generate a new string on the heap for each call  where as just using an offset avoids the need to generate a new string all together.  this memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.outofmemoryerror: gc overhead limit exceeded  mostly in the trieparser class.  100-test runs at original code: memory usage - maximum: 503mib (527 769 600 bytes) - average: 388mib (407 225 077 bytes)  100-test runs with my changes: memory usage - maximum: 316mib (325 271 552 bytes) - average: 221mib (239 355 320 bytes)  at maximum: 187 mb saved at average: 167 mb saved  relnotes=reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change all instances of encodedsubsequence() to use a simple start index offset which reduces the java memory footprint for trieparser by at at least 130 mbs this is because the original call to subsequence() would generate a new string on the heap for each call where as just using an offset avoids the need to generate a new string all togetherthis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: javalangoutofmemoryerror: gc overhead limit exceeded mostly in the trieparser class100-test runs at original code:memory usage- maximum: 503mib (527769600 bytes)- average: 388mib (407225077 bytes)100-test runs with my changes:memory usage- maximum: 316mib (325271552 bytes)- average: 221mib (239355320 bytes)at maximum: 187 mb savedat average: 167 mb savedrelnotesreduced heap memory usage when parsing domain names521c77000b665d5077524842cc0902583015043f;;;;;1;1;change all instances of encodedsubsequence() to use a simple start index offset which reduces the java memory footprint for trieparser by at at least 130 mbs this is because the original call to subsequence() would generate a new string on the heap for each call where as just using an offset avoids the need to generate a new string all togetherthis memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: javalangoutofmemoryerror: gc overhead limit exceeded mostly in the trieparser class100-test runs at original code:memory usage- maximum: 503mib (527769600 bytes)- average: 388mib (407225077 bytes)100-test runs with my changes:memory usage- maximum: 316mib (325271552 bytes)- average: 221mib (239355320 bytes)at maximum: 187 mb savedat average: 167 mb savedrelnotesreduced heap memory usage when parsing domain names-------------created by moe: https://githubcom/google/moemoe_migrated_revid188111053;
3057;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change all instances of encoded.subsequence() to use a simple start index offset  which reduces the java memory footprint for trieparser by at at least 130 mbs. this is because the original call to subsequence() would generate a new string on the heap for each call  where as just using an offset avoids the need to generate a new string all together.  this memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.outofmemoryerror: gc overhead limit exceeded  mostly in the trieparser class.  100-test runs at original code: memory usage - maximum: 503mib (527 769 600 bytes) - average: 388mib (407 225 077 bytes)  100-test runs with my changes: memory usage - maximum: 316mib (325 271 552 bytes) - average: 221mib (239 355 320 bytes)  at maximum: 187 mb saved at average: 167 mb saved  relnotes=reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f;;0;any tutorial / example for writing a presto-elasticsearch connector ?;i want to write an elasticsearch connector to perform joins in elasticsearch using prestocan anyone pls suggest on how to start any guidance will be of lot of help;"elasticsearch has several java clients available -- use the scroll method for large result sets: has an sql adapter on top of the elasticsearch code base which could be of some help || crate does not support joins its mentioned in the faq -   does crate support joins?not yet joins are on our roadmap and we try to do them the right way in usual quality and well performingfor a lot of use cases there are other ways to achieve the same result as with joins the best way to start is to take a look at the array and object data types to denormalise your data``` || i would start by forking the  plugin and adapting it to be able to read from elastic search  last time i used elastic search the apis were all rest based so the presto-example- plugin should be pretty close to what you need  once you get that working you’ll want to work on getting predicate push down working but i’d start by just getting it to read at all-dain> on jun 9 2015 at 6:14 am sumanth bandi notifications@githubcom wrote:> > i want to write an elasticsearch connector to perform joins in elasticsearch using presto> can anyone pls suggest on how to start any guidance will be of lot of help> > —> reply to this email directly or view it on github || in the legacy spi that the example connector implements a table is logically divided in partitions and partitions are divided into splits  a partition can provide a `tupledomain` which describes the bounds of the values present in the partition which presto can use to skip sections of the table that can not match the filter predicate  a split is simply a part of a partition presto will enumerate and filter the partitions and then enumerate the splits for the partitions  then presto reads data in parallel from splits    if your system does not support parallel reading simply return a single partition and a single split  if your system has a more sophisticated physical layout you will want to use the new tablelayouts spi so that presto can take advantage of the data organization || i wrote a basic connector with the necessary classes implemented i also added a properties file in etc/catalog and also edited the pluginbundles etc/configproperties file : (added /presto-elasticsearch/pomxml) ```pluginbundles\  /presto-raptor/pomxml\  /presto-hive-cdh4/pomxml\  /presto-example-  /presto-kafka/pomxml \  /presto-tpch/pomxml\  /presto-elasticsearch/pomxml\  /presto-mysql/pomxml```but i get this error : ```2015-06-25t19 22214+0530    info    main    comfacebookprestometadatacatalogmanager -- loading catalog etc/catalog/elasticsearchproperties --2015-06-25t19 22215+0530    error   main    comfacebookprestoserverprestoserver no factory for connector elasticsearchjavalangillegalargumentexception: no factory for connector elasticsearch```the problem is here : ```private void loadplugin(urlclassloader pluginclassloader)            throws exception    {        serviceloader<plugin> serviceloader  serviceloaderload(pluginclass pluginclassloader)        list<plugin> plugins  immutablelistcopyof(serviceloader)        if (pluginsisempty()) {            logwarn(""no service providers of type %s"" pluginclassgetname())        }        for (plugin plugin : plugins) {            loginfo(""installing %s"" plugingetclass()getname())            installplugin(plugin)        }    }```the size of plugins when loading this new plugin is 0 whereas for other old plugins  it is 1```list<plugin> plugins  immutablelistcopyof(serviceloader)```can you please help why the first 2 lines of this code are not working as expected ?can you please elaborate on this part of the developer docs which i could not understand properly ?```each plugin identifies an entry point: an implementation of the plugin interface this class name is provided to presto via the standard java serviceloader interface: the classpath contains a resource file named comfacebookprestospiplugin in the meta-inf/services directory the content of this file is a single line listing the name of the plugin class:```how should i provide the classname of my new plugin to presto ? || the above problem solved after i added a file with the name comfacebookprestospiplugin in the meta-inf/services directory : ```presto/presto-elasticsearch/src/main/resources/meta-inf/services/comfacebookprestospiplugin```but i observed that for the other connectors (except tpch) the same file is present in a different directory : ```presto/presto-kafka/target/classes/meta-inf/services/comfacebookprestospipluginpresto/presto-raptor/target/classes/meta-inf/services/comfacebookprestospipluginkafka and raptor do not have a src/main/resources/meta-inf/services directory at all```then how is the serviceloader loading the connectors kafka and raptor ? can anybody please give an explanation ? || pls tell me how to accurately implement these 3 function in the recordcursor interface while writing a connector```    long gettotalbytes()    long getcompletedbytes()    long getreadtimenanos()```please help  plsplspls || those functions are only for stats if they dont mean anything for your connector or that info is not available just return 0 || @electrum  @dain : does presto support dynamic columns in tables (for example data stores which contain json documents where new properties can be added in a json doc residing in an index/type) ?in the example connector all the columns are hardcoded in example-metadatajson what if new columns are added in the csv doc ? how to handle these newly added columns in the csv (or new properties in json docs in elasticsearch indices) without restarting the presto server every time a new column is added in a table ? can this be handled by presto at all ? any suggestions will be of great help whats the status on this one? any progress made?  @robinus2  here is a basic version of the connector it needs to be developed further and optimised || slightly off topic but still relevant for people looking into this topic we have released a first version of a jdbc driver for elasticsearch called [sql4es]( it supports most common sql statements and can be use from any system supporting the jdbc interface || should not be better to have a connector to apache lucene instead elasticsearch  api ?btw you could use hive external table elastisearch (via elasticsearch-hadoop official hive connector) and query it from prestodb || well first of all the driver uses the transport api and not the  one i think you actually do want to use elasticsearch because it provides distributed query execution and high availabilitythe hive connection you mention should work i think although i must admit i have never used it || @sumanth232 are you still working on this? any progress? ||  || i found this other fork today :  with an `elastic` branch || this issue is obsolete now closingas to the elasticsearch connector if the above mentioned implementations are applicable to general audience it would be valuable to have one in presto codebase || ";;;;0;1;;
3057;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change all instances of encoded.subsequence() to use a simple start index offset  which reduces the java memory footprint for trieparser by at at least 130 mbs. this is because the original call to subsequence() would generate a new string on the heap for each call  where as just using an offset avoids the need to generate a new string all together.  this memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.outofmemoryerror: gc overhead limit exceeded  mostly in the trieparser class.  100-test runs at original code: memory usage - maximum: 503mib (527 769 600 bytes) - average: 388mib (407 225 077 bytes)  100-test runs with my changes: memory usage - maximum: 316mib (325 271 552 bytes) - average: 221mib (239 355 320 bytes)  at maximum: 187 mb saved at average: 167 mb saved  relnotes=reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f;;0;new subscribers helper method?;this sort of code is in a lot of places in the rxjava codebase:``` java    new subscriber<t>(s) {            @override            public void onnext(t t) {                sonnext(t)            }            @override            public void onerror(throwable e) {                sonerror(e)            }            @override            public void oncompleted() {                soncompleted()            }        }```id like to add a utility method in `subscribers` that does this any suggestions for a name to squeeze into the static namespace of this class? `from` would have been nice but is used  subscribersfrom(observer)` and this would be a breaking change if i added `subscribersfrom(subscriber)` because they do different things and a `subscriber` is an `observer`perhaps:- `subscribersfromchained(subscriber)`- `subscriberspassthrough(subscriber)`- `subscriberschained(subscriber)`im sure someone will have a nicer suggestion than these;`subscriberswrap(s)`? || i like `wrap` thanks @wujek-srujek  || this has been ;;;;0;1;;
3070;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add x-download-options header (ie8 header to control the  open  button on the download dialog).  relnotes=defined an [x-download-options]( header  b3acfc69329e40befab52f50a5ee66e37ad9f602;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add x-download-options header (ie8 header to control the ""open"" button on the download dialog)relnotesdefined an [x-download-options]( headerb3acfc69329e40befab52f50a5ee66e37ad9f602";;;;;1;1;"add x-download-options header (ie8 header to control the ""open"" button on the download dialog)relnotesdefined an [x-download-options]( header-------------created by moe: https://githubcom/google/moemoe_migrated_revid188866409";
3070;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add x-download-options header (ie8 header to control the  open  button on the download dialog).  relnotes=defined an [x-download-options]( header  b3acfc69329e40befab52f50a5ee66e37ad9f602;;0;support date and timestamp pushdown for hive connector;;is anybody working on this? otherwise i will take this one || @electrum does this ticket mean pushing down date and timestamp predicates? || yes the raptor connector supports this || i have browsed through the code and ive noticed that predicates are described by toupledomain object the toupledomain effectivepredicate instance is pushed down to hivepagesourcefactory level however only orcpagesourcefactory seems to make use of this object should filtering mechanism be implemented for other types of pagesource? is there some other pushdown/filtering mechanism that i havent noticed? || no other file formats support push down so it is only used for partition pruning || from the code i see that date is supported for orc:  also stores min/max statistics for each data page so maybe its also worth adding pruning for parquet and possibly other file formats too? did you consider some kind of lazily computed page statistics (eg gathering min/max when reading data during query)?  || it looks that there is support for timestamp predicates in orc too am i right? timestamp column has stats represented by integercolumnstatistics which store min/max long values for the column || @zhenxiao is working on predicate push down for parquet #3027 and that should be able to take advantage of this also when it landsfor orc statistics the important thing is to test the stats orc produces  orc had/has a bunch of bugs with collecting and rolling up statistics so any code using them needs to adapt around these bugs  for example the date statistics are rolled up wrong ( || what about timestamp statistics? i believe timestamp domain is created at  but  does not check if isrowgroup is false shouldnt code path be the same as for date? || well maybe we can contribute to orc and fix the bugs as well :)one challenge might be with already existing orc files if they contain unreliable stats and we want to use to filter things out that might be an issue || they already  the ones i found  for old files they added the version of the writer to the file footer so if you know which writers are broken you can work around old data  we have not updated our code to deal with this yet || there are two parts to this: supporting for partition pruning and supporting pushdown for orc these are independent changes i would start with partitions since that should be easier though for both changes you need to deal with hives craziness around timezones for timestamps || thanks @dain yes i am doing predicate pushdown for parquet using parquets min/max stats it is in  it would be nice if this is done parquet side could make use of it || @electrum isnt partition prunning for date and timestamps already implemented in  and  by looking at orc code i thought that data and timestamp predicates are already supported (as ints and longs) ||;;;;0;1;;
3070;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add x-download-options header (ie8 header to control the  open  button on the download dialog).  relnotes=defined an [x-download-options]( header  b3acfc69329e40befab52f50a5ee66e37ad9f602;;0;iterable vs onsubscribe 5x performance difference;im using observables for scanning a database and there seems to be around 5x performance difference between obersvablefrom(iterable) vs observablecreate(onsubscribe) is this expected? why would i use onsubscribe over iterable?;how did you measure this 5x? || with the following jmh test ``` bashbenchmark                               mode  cnt        score        error  unitskeyvalueforwardrangeiterateiterate    thrpt    5  2389179423 ± 933607641  ops/skeyvalueforwardrangeiteratesubscribe  thrpt    5   575274233 ±  78946022  ops/s`````` java@benchmarkmode(modethroughput)@outputtimeunit(timeunitseconds)@state(scopethread)@measurement(iterations  5)@warmup(iterations  10)@fork(value  2)public class keyvalueforwardrangeiterate {  static rangedrowssetup setup  new rangedrowssetup(keyvalueforwardrangeiterateclass)  @state(scopethread)  public static class iteratethread {    static atomicinteger thread_id  new atomicinteger(0)    public final int id  thread_idgetandincrement()    public rxtx tx    public iterator<keyvalue> values    public iteratethread() {      thistx  setuplmdbreadtx()      thisvalues  collectionsemptyiterator()    }    public final void next() {      if (valueshasnext()) {        valuesnext()      } else {        values  setupdbiterate(tx new scanscandefault() setupkeyranges[id])          toblocking()toiterable()iterator()      }    }  }  @state(scopethread)  public static class subscribethread {    static atomicinteger thread_id  new atomicinteger(0)    public final int id  thread_idgetandincrement()    public rxtx tx    public iterator<keyvalue> values    public subscribethread() {      thistx  setuplmdbreadtx()      thisvalues  collectionsemptyiterator()    }    public final void next() {      if (valueshasnext()) {        valuesnext()      } else {        values  setupdbsubscribe(tx new scanscandefault() setupkeyranges[id])          toblocking()toiterable()iterator()      }    }  }  @setup  public void setup() {    setupwriteranges()  }  @benchmark  public void iterate(iteratethread t) {    tnext()  }  @benchmark  public void subscribe(subscribethread t) {    tnext()  }}``` || ``` java  public <t> observable<t> subscribe(rxtx tx scan<t> scan keyrange range) {    return observablecreate(new observableonsubscribe<t>() {      @override      public void call(subscriber<? super t> subscriber) {        try {          buffercursor cursor  dbbuffercursor(txtx)          directbuffer stop  new directbuffer(rangestop)          boolean hasnext  cursorseek(rangestart)          while (hasnext) {            if (subscriberisunsubscribed()) {              return            } else if (compareto(cursorkeybuffer() stop) < 0) {              t result  scanmap(cursorkeybuffer() cursorvalbuffer())              if (result ! null) {                subscriberonnext(result)              }            }            hasnext  cursornext()          }        } catch (exception e) {          eprintstacktrace()        }        subscriberoncompleted()      }    })  }  public <t> observable<t> iterate(rxtx tx scan<t> scan keyrange range) {    directbuffer stop  new directbuffer(rangestop)    return observablefrom(() -> {      buffercursor cursor  dbbuffercursor(txtx)      boolean hasnext  cursorseek(rangestart)      return new iterator<t>() {        @override        public boolean hasnext() {          cursornext()          if (compareto(cursorkeybuffer() stop) < 0) {            return true          }          return false        }        @override        public t next() {          return scanmap(cursorkeybuffer() cursorvalbuffer())        }      }    })  }``` || i dont fully understand your example as it contains unfamiliar classes however here are some general points you could check:- you dont use blackhole to consume the value of next() which may allow dead code elimination and skip most of the code- the iterator you create seems odd i dont know if hasnext() conforms the apis requirement of idempotence: you should be able to call hasnext() any number of times before you call next() and shouldnt affect the state- id also check if both routines actually return the same amount of data || yes the implementation is a bit sloppy and only intended for this actual test i will try the blackhole and double check the data for each case brb || the tests runs similarly with the blackhole and the data for both tests are identical i will run them with flight recorder to see if something shows up || nothing useful is showing up in flight recorder not sure whats going on i could try the same thing without the database || i implemented the same with plain list of values as the source which show 15x performance difference which is not nearly as bad but still quite a differenceeither my code is entirely broken or maybe something more interesting is going on here``` java@benchmarkmode(modethroughput)@outputtimeunit(timeunitseconds)@state(scopethread)@measurement(iterations  5)@warmup(iterations  10)@fork(value  2)public class iterator {  static arraylist<integer> source  new arraylist<>()  static {    for (int i  0 i < 100000 i++) {      sourceadd(i)    }  }  @state(scopethread)  public static class iteratethread {    static atomicinteger thread_id  new atomicinteger(0)    public final int id  thread_idgetandincrement()    public javautiliterator<integer> values    public blackhole blackhole    public iteratethread() {      thisvalues  collectionsemptyiterator()    }    @setup    public void setup(final blackhole blackhole) {      thisblackhole  blackhole    }    public final void next() {      if (valueshasnext()) {        blackholeconsume(valuesnext())      } else {        values  observablefrom(source)          toblocking()toiterable()iterator()      }    }  }  @state(scopethread)  public static class subscribethread {    static atomicinteger thread_id  new atomicinteger(0)    public final int id  thread_idgetandincrement()    public javautiliterator<integer> values    public blackhole blackhole    public subscribethread() {      thisvalues  collectionsemptyiterator()    }    @setup    public void setup(final blackhole blackhole) {      thisblackhole  blackhole    }    public final void next() {      if (valueshasnext()) {        blackholeconsume(valuesnext())      } else {        values  observablecreate(new observableonsubscribe<integer>() {          @override          public void call(subscriber<? super integer> subscriber) {            for (int value : source) {              subscriberonnext(value)            }            subscriberoncompleted()          }        })toblocking()toiterable()iterator()      }    }  }  @benchmark  public void iterate(iteratethread t) {    tnext()  }  @benchmark  public void subscribe(subscribethread t) {    tnext()  }}``` || i get the following results with forks  1 warmup  5 x 1s measure  5 x 5s i7 4770k win7 64x java 18u45```riteratorperfiterate      thrpt         5 12686462527   664860341    ops/sriteratorperfsubscribe    thrpt         5 14100699742   335966166    ops/s```iterate is slower because it sets the producer every time and it gets requrested it is recreated whereas subscribe doesnt bother backpressure has some synchronization overhead when the producer is set inside the subscriber || oh i see might be hardware and os thats playing tricks found that iterate and subscribe perform equally well if changing this (on subscribe)``` javawhile (hasnext) {  if (compareto(cursorkeybuffer() stop) < 0) {    subscriberonnext(new keyvalue(cursorkeybuffer() cursorvalbuffer()))  }  hasnext  cursornext()}``` into this ``` javawhile (cursornext() && compareto(cursorkeybuffer() stop) < 0) {  subscriberonnext(new keyvalue(cursorkeybuffer() cursorvalbuffer()))}```not really sure why this is? heres the iterator``` javareturn new iterator<keyvalue>() {  @override  public boolean hasnext() {    if (cursornext() && compareto(cursorkeybuffer() stop) < 0) {      return true    }    return false  }  @override  public keyvalue next() {    return new keyvalue(cursorkeybuffer() cursorvalbuffer())  }}``` || unrelated to rxjava as far as i can tell closing ||;;;;0;1;;
3074;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> in ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> in ascii define a constant for the character case bitmask and use it in place of 0x20 and 0x5f throughout the classc58f51bd68f89cd6119131a256e9de9d0f02b45f;;;;;1;1;in ascii define a constant for the character case bitmask and use it in place of 0x20 and 0x5f throughout the classrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid189264305;
3074;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> in ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f;;0;jdbc driver: javasqlstatementsetmaxrows not implemented;this method doesnt do anything in terms of limiting the number of rows returned the implementation should be the same as using the limit clause in sqlimplementing this method is important for gui tools many client tools will use a separate text box where users define the maximum number of rows to preview since there is no ansi sql way to limit rows from sql (yes there is limit but thats rarely supported and non generic) using the presto driver on a big database is risky and can make the client tools run out of memory very easily;the simple fix is to implement this entirely in the `resultset` though it would be better to pass this to the server so it can stop processing as soon as possible (even if the driver hasnt read all the results) we need to figure out a good way to do that (preferably without something hacky like rewriting the sql in the driver) || we should add a new header `x-presto-max-rows` rather than modifying the sql || @electrum i really need this feature do you know how to take down this one? || as far as i unterstand we simply enable `statementresourcecreatequery` to read new header and pass the limit to method `querymanagercreatequery`in method `querymanagercreatequery` before executing the statement we set the limit in a copy of the statement```if (statement instanceof query && limit > 0) {    query query  (query) statement    statement  new query(querygetlocation() querygetquerybody() querygetorderby() integertostring(limit) querygetapproximate())}```@electrum do you agree with the solution? || @fmeiser i think its more complicated than that there are other types of queries like `show tables` that should also work with this the query modification probably needs to happen after analysis otherwise we might return the wrong type of error for certain invalid queries@martint where would you put this?start with the simple fix of implementing this in the drivers `resultset` well want this anyway to allow the feature to work with older server versions both `setmaxrows` and `setlargemaxrows` should be  @electrum as a simple fix i implemented `setmaxrows` and `setlargemaxrows` in `prestoresultset` || pr #5413 merged to master and released with 0149 ||;;;;0;1;;
3074;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> in ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f;;0;reference leak via safesubscriberactual?;is there any reason for safesubscriber to retain `actual` after `unsubscribe()`? im seeing a reference leak through the actual subscriber and it looks like it should probably be broken by dropping that reference;if the actual leaks it means the subscriber leaks because it is retained somewhere outside the library otherwise it provides performance benefits and avoids null checks || i _was_ holding a reference to the _subscription_ but it had been unsubscribed nulling that reference allowed the subscriber to be collected i suppose it was naive to expect that unsubscribing a subscription would release internal references but theres no indication in the api how subscription behaves with respect to references or how a user should manage them to avoid leaks it also appears to be inconsistent unless im misreading (entirely possible): subscriptionlist and compositesubscription for instance do appear to release references to their member subscriptions when unsubscribed || for what its worth it looks like subscriptionlist got the same change im proposing in #1440 as a response to discussion in #1292 || i also faced this undocumented behaviour now i release my **subscribtion** references or use a **subscriptionlist**this should be documented !also i dont see any performance issues the safesubscriber already checks if oncompleted or onerror was previously called via the boolean field named **done** || improving the documentation is a good thing and i encourage you @loganj  or @adi1133 to post a pr with your proposed changes || any move on this issue? || does this issue only involve safesubscriber ? ||;;;;0;1;;
3077;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make bytesource.read() use sizeifknown()  if available  to help avoid extra byte array allocations/copies.  also don t use 32 as the initial bytearrayoutputstream size in either version of bytestreams.tobytearray()  just seems way too small. use the default size for buffers instead  at a minimum.  also change concatenatedbytesource.sizeifknown() to return absent if its iterable of sources is not a collection  this is to prevent sizeifknown() trying to loop over an infinite iterable  which previous caused an infinite loop. that is also fixed in this cl  concatenatedbytesource.size() and sizeifknown() now stop and return long.max_value if the result would exceed that rather than going negative and continuing. but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeifknown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> set serialversionuid in typetoken.java  relnotes=add a  serialversionuid  to  typetoken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> make bytesourceread() use sizeifknown() if available to help avoid extra byte array allocations/copiesalso dont use 32 as the initial bytearrayoutputstream size in either version of bytestreamstobytearray() just seems way too small use the default size for buffers instead at a minimumalso change concatenatedbytesourcesizeifknown() to return absent if its iterable of sources is not a collection this is to prevent sizeifknown() trying to loop over an infinite iterable which previous caused an infinite loop that is also  in this cl concatenatedbytesourcesize() and sizeifknown() now stop and return longmax_value if the result would exceed that rather than going negative and continuing but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop and as such against the spirit of sizeifknown() which should be fast27d33d4fd1bbbf6f5aacd8835633943da33300a3-------<p> stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it47530cebb974612862c1e0f12e304ae1773ca9ce-------<p> set serialversionuid in typetokenjavarelnotesadd a `serialversionuid` to `typetoken`dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;;;;1;1;set serialversionuid in typetokenjavarelnotesadd a `serialversionuid` to `typetoken`-------------created by moe: https://githubcom/google/moemoe_migrated_revid189785498;
3077;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make bytesource.read() use sizeifknown()  if available  to help avoid extra byte array allocations/copies.  also don t use 32 as the initial bytearrayoutputstream size in either version of bytestreams.tobytearray()  just seems way too small. use the default size for buffers instead  at a minimum.  also change concatenatedbytesource.sizeifknown() to return absent if its iterable of sources is not a collection  this is to prevent sizeifknown() trying to loop over an infinite iterable  which previous caused an infinite loop. that is also fixed in this cl  concatenatedbytesource.size() and sizeifknown() now stop and return long.max_value if the result would exceed that rather than going negative and continuing. but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeifknown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> set serialversionuid in typetoken.java  relnotes=add a  serialversionuid  to  typetoken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;0;jdbc driver hardly usable w/ apache dbcp;when using presto jdbc connections with apache dbcp some of the settings of dbcp will call into unimplemented methods which throw an errorthis is a deviation from the usual implementation guidelines ie setreadonly can be called by the pool but it is assumed that the driver will only throw an exception if there is a server error _not_ because it is not supported see the api details here prevents us from using generic pool parameters and require knowledge of what will throw exception and what wont before using a generic set of parameters;"is the issue calling it with `false`? if set to `false` the driver throws `sqlfeaturenotsupportedexception(""disabling read-only mode not supported"")` when the driver was originally written presto only supported `select` so this was correct but it never got updatedi filed  for this || i created #3101 to fix the `setreadonly()` issue by always ignoring the call i dont think we can ignore other methods for example ignoring `setautocommit(false)` would be wrong since an `insert` statement or similar would still commit at the end of the statementif there are other methods causing a problem with dbcp please file a new issue for each one along with the parameter values allowing us to evaluate and fix each one independentlythanks for helping us improve presto! || ";;;;0;1;;
3077;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make bytesource.read() use sizeifknown()  if available  to help avoid extra byte array allocations/copies.  also don t use 32 as the initial bytearrayoutputstream size in either version of bytestreams.tobytearray()  just seems way too small. use the default size for buffers instead  at a minimum.  also change concatenatedbytesource.sizeifknown() to return absent if its iterable of sources is not a collection  this is to prevent sizeifknown() trying to loop over an infinite iterable  which previous caused an infinite loop. that is also fixed in this cl  concatenatedbytesource.size() and sizeifknown() now stop and return long.max_value if the result would exceed that rather than going negative and continuing. but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeifknown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> set serialversionuid in typetoken.java  relnotes=add a  serialversionuid  to  typetoken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc;;0;"add ""since"" annotations to javadocs for new experimental/beta methods";;probably a good time to regenerate and deploy the javadocs too ||  can the plp branch be deleted? || yeson thu jul 23 2015 at 6:14 am david karnok notifications@githubcomwrote:> can the plp branch be deleted?> > —> reply to this email directly or view it on github>  david m grossplp consulting ||;;;;1;1;window() behavior changed so did marble diagram & thus its size;
3079;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** reason for rollback ***  causing outofmemoryerror in some tests.  *** original change description ***  stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128*** reason for rollback ***causing outofmemoryerror in some tests*** original change description ***stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it***8e341060fcef24921ecc5a079c256b184ca164f2;;;;;1;1;automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128*** reason for rollback ***causing outofmemoryerror in some tests*** original change description ***stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it***relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid189797802;
3079;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** reason for rollback ***  causing outofmemoryerror in some tests.  *** original change description ***  stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2;;0;make presto jdbc driver work with java 6;currently presto jdbc requires java 8 on the client sideit is common that client applications use older version of java (6 is still quite popular)it would be nice to have version of jdbc driver which work with java 6one option is to create another project - presto-jdbc-java6 - totally separate from presto codebase such project would not share any code with driver in java 8 driver in presto codebasethe drawback of such approach is that we need to duplicate work as new jdbc related features are added to presto implement them both in java-6 and java-8 codebase or even three times if we also want the java-7 versionmaybe a better option would be to generally move jdbc implementation out of presto codebase to separate repository presto-jdbc there we could have separate maven projects for different java versions (678) - with shared modules containing common codeon automation we would compile each of the projects using jdk in matching versionthe benefit of such approach - compared to leaving java8 implementation in presto repository - is that we have less code duplication and as the jdbc project would not be very big - it should be maintainable even if we support multiple jdk versionsour (teradata) intention is to do major enhancements to presto jdbc driver and we feel that it would be beneficial to the project if we targeted multiple jdk/jdbc versionswhat do you think?;one challenge for moving the java8 implementation out of the presto repository is that itd be impossible to do it without breaking up the repo into multiple projects the verifier and benchmark driver have a dependency on the jdbc driver which would result in circular dependencies between the two projects || i see the problem you mention i dont see any easy way around it that doesnt make the motivation for the change to be less important ) lets hope theres a way to get therein the long run i think it would be desirable to be able to allow different subprojects to allow connect to presto breaking this up into separated modules with defined and separated responsibilities would be a way to implement that as you mention for now to unblock our work i think we should copy-paste the necessary code to a separate project and manually keep track of the changes made to this code on both sides (yuck!) in the background i propose we start fixing the problem more systematically **the problem** is we have a set of model classes on the wire and some logic to manipulate them on each end **one option** is to copy-paste it to every project that needs to talk to presto i would strongly opt we throw this out the window **second option** would be to break the presto project into subprojects have a presto-cli-base that is java 6 compatible and other projects (including presto verifier jdbc ) depend on it that should allow to overcome the circular dependencies this requires a lot of effort and rearranges things a lot maybe too much and not worth the effort maybe on the other hand there are other reasons to do it eg some of the presto sub-modules today should be external tools depending on presto not inside presto i dont know havent analyzed it all just speculating that there may be more motivation for such a separation the net result could be a cleanly separated set of projects then again it may complicate the daily development too much if there is a lot of work spanning all potential sub-projects **third option** we could consider is to describe the protocol in a way that allows the clients the automatically generate the necessary model depending on the implementation choice the presto listener side keeps its hand-coded version or wraps the generated classes with some more custom validation logic which is today present there leveraging current implementation choice (jax rs) we could express the protocol via a wadl file problem we would have is that presto today send meta information in headers and handle them by hand wadl supports header information but wed need to change the way we handle it another approach would be to reimplement the meta-information to embed it in the json last (not least) way to do would be to start using something like grpc or sth else instead of jax rs do you have any other ideas? which of those would you prefer? || the client protocol is rather simple and stable it has to be since there are implementations in many languages we dont worry about duplicate model definitions in other languages so i dont think it is a big deal for the java 6 jdbc driverone advantage of a separate driver is that it can be smaller by using the jdk  client etc rather than all the dependencies that the one in presto uses (not that anyone has ever cared about the driver size and possibly never will but mentioning it anyway) || the client data structures is pretty stable at this point maybe thats the reason for it being stable that there was not too much of development that mandated changes to the interface hopefully there will be few changes to it during the implementation of new jdbc features and well live with it like i said we will start with a separate project copy-pasting things not setting things in stone i wanted to test the ground and just see how you feel about moving that situation forward which of the options and their variations you view as optimal if this is to happen somewhere in the future id like our thinking to start aligning as early in the process as possible  closing this one there is no work planned in near future and there is closed-source alternative which works under java6 ||;;;;0;1;;
3079;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** reason for rollback ***  causing outofmemoryerror in some tests.  *** original change description ***  stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2;;0;fix foreach javadoc;`observableforeach` javadoc suffered from a bit of copy-and-paste and neglected to mention the possible throw of `onerrornotimplementedexception`also added a couple of unit tests;;;;;1;1;fix foreach javadoc;
3080;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hashbimap: unnecessary call to rehashifnecessary  closes   532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> hashbimap: unnecessary call to rehashifnecessarycloses  stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it(roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are )e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;stop using bytearrayoutputstream in bytestreamstobytearray methodsthey were using bytestreamscopy to copy the source to the baos this meant reading from the source into a buffer then copying from that buffer to a different buffer in the baos additionally the way baos operates is not great: whenever it needs more space it creates a new array twice as large as the previous copies all bytes from the previous array to the new one and discards the previous arrayinstead read directly from the source into a sequence of buffers when a buffer fills up dont discard it but instead create a new twice as large buffer and start reading into it(roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are )relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid190008826;
3080;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hashbimap: unnecessary call to rehashifnecessary  closes   532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;;0;provide optimized array_intersect flags;an optimized array_intersect method could be provided a flag which indicates that the arrays being used are sorted sets and can be traversed as a sorted intersection;i think the right way to do this would be to implement the multiset type which is part of the sql standard  || see:  ||;;;;0;1;;
3080;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hashbimap: unnecessary call to rehashifnecessary  closes   532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking inputstream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b;;0;slow performance of groupby;"hiheres some silly code for testing the performance of groupby not sure if im doing something wrong but the groupby seems very slow ~ 10x in comparison to the plain case and it gets worse as number of items go up is the code and performance figures correct and fair? are there smarter ways to do this?cheers-kristoffer``` java  static int num  100_000  static observable<integer> obs  new observable{    observablerange(0 num)    observablerange(0 num)    observablerange(0 num)  }  public static void main(string args) {    for (int i  0 i < 100 i++) {      long now  systemcurrenttimemillis()      plain()      systemoutprintln(""plain "" + (systemcurrenttimemillis() - now))      now  systemcurrenttimemillis()      rx()      systemoutprintln(""rx "" + (systemcurrenttimemillis() - now))    }  }  public static void plain() {    hashmap<integer arraylistwrapper> map  new hashmap<>()    for (observable<integer> o : obs) {      for (int number : otoblocking()toiterable()) {        arraylistwrapper list  mapget(number)        if (list  null) {          list  new arraylistwrapper(number)          mapput(number list)        }        listadd(number)      }    }    atomicinteger count  new atomicinteger()    mapentryset()stream()foreach(e -> countincrementandget())  }  public static void rx() {    observable<arraylistwrapper> result  observablefrom(new integer{0 1 2})      flatmap(i -> obs[i])      groupby(i -> new arraylistwrapper(i))      flatmap(group ->        groupcollect(() -> groupgetkey() (list number) -> listadd(number)))    atomicinteger count  new atomicinteger()    resulttoblocking()foreach(l -> countincrementandget())  }```";why do you group by the arraylistwrapper? || a way to emulate hashmap<integer list> and be able to add items to each of them in the collect() || should be hashmap[integer list] || the result of each is[0 0 0][1 1 1][2 2 2][3 3 3] and so on || what is the `hashcode()` of `arraylistwrapper`? if it isnt constant then it can play havoc in `groupby` || in addition im not sure what you try to accomplish but the `plain()` is very similar to the behavior of `tomultimap()` || the hashcode of arraylistwrapper is the integer passed into the constructor yes multimap works for what im trying to accomplish and its as fast as youd expect still im not sure whats going on with the groupby? || could you create a fully runnable gist for your case? ||  || if i pick a bigger num like 500_000 the plain case takes about 35 sec and the groupby doesnt complete at all maybe a deadlock?thread dump looks like threads are idle and main is waiting for the blocking operation || i think i know whats happening: the (horizontally unbounded) flatmap is accumulating the open groups which causes o(n \* n) maintenance cost and o(n) cost per a new group since flatmap needs to loop over n groups to see if they have any new item for the downstream so in total grouping by and merging n values costs o(n \* n) in total steps || ah that makes sense but not immediately obvious :-)ok so tomultimap is fine but not that efficient since it must wait for all observables to finish but in my use case the source observables are actually sorted and contain equally many items so i think zip() would be the correct operation here || helloany way to avoid `o(n * n)` cost for grouping and merging  operation (in 1x) ? our use-case is market data where one has to throttle events (market ticks) per symbol (key) but not of entire stream think about ui grid where only latest event (per symbol) is important and not more frequently than every x secondsso far we have came up with:```java// flat mapreturn observablegroupby(bysymbol())flatmap(obs -> obsthrottlelast(100 timeunitmilliseconds)) // publish subjectpublishsubject<t> subject  publishsubjectcreate()observablegroupby(bysymbol())subscribe( obs ->  obsthrottlelast(100 timeunitmilliseconds)subscribe(subject))return subject```elegant but unfortunately not very performant  || @aseredahow many symbols do you have? the throttlelasts 100ms is likely way bigger than the time to scan 1000 symbolsthe `publishsubject` version violates the `observer` contract you have to use `publishsubject<symboltype>create()toserialized()`your case may be best solved with a custom operator that performs the per-symbol timed latest operation without splitting into sub-observables || @akarnokd we have about 1m symbols (products) so quadratic time becomes noticeableat thousands (~500-1k symbols)  the difference between rx (`o(n * n)`) and handmade (`o(n)`) throttler  is negligible  || wow thats a lot of flows and delayed/scheduled emissions if you have 1m unique groups the periodic (active) sampling of those is going to be expensive no matter what || @asereda can you afford to store a copy of the last seen values? if you can you could use a scan/throttle to keep latest state youll have to optimise the memory management though```return observablescan(    initialstate()    (lastseenstate nextevent) -> lastseenstateupdatewith(nextevent)  )   throttlelast()```edit: helps if i get the right operator! || @jamesgorman2  thanks will try it outwhat exactly do you mean by > optimise the memory management  || mostly just making sure that if youre going down the immutable state route youre data state objects arent eating up your gc time and if its mutable youre happy with how youre managing the race between state updates and reads || so i wrote a little benchmark using [jmh]( comparisons are below :```# run complete total time: 00 36benchmark                  (buckets)        (factory)  (window)   mode  cnt  score   error   unitsthrottlebenchmarkconsume    1048576         executor       100  thrpt   50  0655 ± 0067  ops/usthrottlebenchmarkconsume    1048576   rxjava_flatmap       100  thrpt   50  0001 ± 0001  ops/usthrottlebenchmarkconsume    1048576   rxjava_subject       100  thrpt   50  0048 ± 0009  ops/usthrottlebenchmarkconsume    1048576  rxjava_operator       100  thrpt   50  0572 ± 0027  ops/us````executor` benchmark is home-made solution using jdk [scheduledexecutorservice]( and `executor` implementations seem comparable within error margin @akarnokd do you find these results plausible ? || could you post the benchmark code? || sorry for late responseplease take a look here: [rxjava-throttle-bench]( || seeing the code the results are plausible with the operator version you have only one timed task whereas the flatmap version has as many timed tasks as there are groups ||;;;;0;1;;
3087;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> supersource nulltoempty and emptytonull in strings.java to native js.  this allows us to improve performance in docs/xplat code that uses those methods.  relnotes=gwt: supersource  strings.nulltoempty()  and  strings.emptytonull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> open source refactorings directory.  this is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> supersource nulltoempty and emptytonull in stringsjava to native jsthis allows us to improve performance in docs/xplat code that uses those methodsrelnotesgwt: supersource `stringsnulltoempty()` and `stringsemptytonull()`1850b425de37bf017b0fc57dd02e9de3302b08dc-------<p> open source refactorings directory  this is knowingly very simple without yet documentation or many refactorings its a prototype first694060c9ab57a299607f025902ff920fcd438f25-------<p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9ae891f29a5ccba8ef90a6733dc26be22eca3426b;;;;;1;1;ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid190513510;
3087;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> supersource nulltoempty and emptytonull in strings.java to native js.  this allows us to improve performance in docs/xplat code that uses those methods.  relnotes=gwt: supersource  strings.nulltoempty()  and  strings.emptytonull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> open source refactorings directory.  this is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b;;0;cassandra: randomly select host to connect via thrift to spread load on thrift queries;currently when presto calculates the split it calls out to the `describe_splits` thrift function when doing a full table scan on some cfs this can take a while be resource intensive since (i think) the thrift api doesnt take into account multiple hosts or load balancing presto-cassandra simply selects the first `contactpoint` provided (unless its down then it selects the second one) this means a single cassandra node can be put under a lot load while  planning (multiple) splitsbelow is a graph of my cassandra cluster (8 dedi nodes 32gb ram 1tb ssd vnodes 4 core)s load while evaluating presto![screen shot 2015-06-14 at 5 09 23 pm]( first green spike is caused by a presto query i ran (this node does not have presto installed all load is from cassandra) and this node is `cass1` the first contact point in my `cassandraproperties` file the second (set) of spikes is completely unrelated to presto and is regular operation for us after that however i ran another presto query and you can see `cass1` spike again while presto is planning (planning took ~10min on full table scan with a table with ~100b rows)what this pr does is simply does is copy the addresses into a new array shuffle them and iterate over them as normal the copy here is because im not sure if multiple threads can call `create()` so i copied the list to be safe i dont do much multithreaded java so let me know if there is a better solution here likewise i opted for randomization over something like round-robin because of ease of implementation (i dont think this case will have great performance differences with random vs round-robin) (could have also randomly selected an integer as the start index but i think this is clearer)on a separate note would it be possible for the cassandra-driver to somehow cache the results of `getsplits` somewhere?;" regarding caching that seems like a good idea though im not very familiar with the cassandra code so its not clear what exactly should be cached (and thus where the cache should go) || in this case for the planning stage the cassandra connector calculates ""splits"" which essentially divides the entire 2^64 keyspace in 1024 (depending on your settings) evenly sized ranged (as in each range holds the same amount of data)in my view this looks like schema metadata its metadata for the table that doesnt get updated very often (unless you are doing a ton writes) so it could live there i havent really understood the presto code base yet but would be kosher for a connector to save some information in the schema metadata? || ";;;;0;1;;
3087;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> supersource nulltoempty and emptytonull in strings.java to native js.  this allows us to improve performance in docs/xplat code that uses those methods.  relnotes=gwt: supersource  strings.nulltoempty()  and  strings.emptytonull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> open source refactorings directory.  this is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> ignore finalizablereferencequeueclassloaderunloadingtest in jdk 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b;;0;accepting collection<observable<t>> as argument in observableconcat or observableamb;this is not really an issue but a comment i dont understand why your observableconcat observableamb or observablecombinelatest dont take a collection of observable<t> as argument maybe something like concatall would be great that would be practical i know you can do the trick without but i dont see any obvious reasons why not providing the option in the first place;- there is an `amb(iterable)` overload which is more broad and should suffice- i dont see any reason for `combinelatest` to have at least `collection` but that would be an incompatible api change by now- there was a `concat(iterable)` proposed a long time ago but was rejected because of api surface concerns (too many overloads) || ive looked at `combinelatest` and the reason it limits the the number of concurrent sources due to the limits of rxringbuffer: the buffer size is predetermined and the downstream request have to be divided among sources that means each source has to be requested 1 element at leastid also let you know that 2x doesnt have this limitation and the other operators have extra overloads you were looking fori dont know if or when this feature-request for 1x gets accepted || both `amb` and `combinelatest` now have an overload with `iterable` if you wish you can post a pr for `concat()` ||;;;;0;1;;
3097;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix   a446dd1890a324769ef7dc829052d5118e053abb;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix https://githubcom/google/guava/issues/3081a446dd1890a324769ef7dc829052d5118e053abb;;;;;1;1;fix  by moe: https://githubcom/google/moemoe_migrated_revid190674741;
3097;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix   a446dd1890a324769ef7dc829052d5118e053abb;;0;jdbc executeupdate support;replacement for https://githubcom/teradatacenterforhadoop/presto-td/pull/2;@electrum comment applied || can you squash these together? im not sure who the author should be || i squashed them i selected @sogorkis  to be an author as imo did the most of this patchi also rebased and  some tests || it appeared that checking the error in prepared statement revealed some intermittent error i do not know  why it happens from time to time only and not always i pushed a fix in this pr see log of mentioned error occurence:  || travis build failed although it is passing on my sandbox || rebased || rebased on top of master @electrum can you take a look?i kinda do not like how this patch validates if proper method `executequery`/`executeupdate` was used for `select`/`insert` query it is currently verified after query is sent to presto for execution probably better solution would be to prevalidate it in driver itselfor pass the request type (query/update) to presto in initial `/v1/statement` request and do validation on presto sidei personally lean toward second solution so we keep driver logic as simple as possible and keep query parsing stuff only in presto server codebasewhat do you think?cc: @kokosing @ilfrin @sopel39 @sogorkis  || @losipiuk second option sounds good to me || rebased and unit tests fixes || i rebased onto master and applied commentsplease take a look @electrum || ;;;;0;1;;
3097;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix   a446dd1890a324769ef7dc829052d5118e053abb;;0;add visibility of proguard rules to readme or wiki please;are there examples of proguard rules that will work with minifyenabled set to true?  im currently getting:   ``` javalangnosuchmethoderror: no virtual method doonsubscribe(lrx/functions/action0)lrx/observable```;"+1the `unsafe` package does some reflective lookups of fields that get lost in obfuscation and the resulting `nosuchfieldexception` gets thrown up || +1actually i have `nosuchfieldexception: producerindex` with the release `1014` (not happens in `1013`)my current proguard settings for rxjava is```-keep class rxschedulersschedulers {    public static <methods>}-keep class rxschedulersimmediatescheduler {    public <methods>}-keep class rxschedulerstestscheduler {    public <methods>}-keep class rxschedulersschedulers {    public static ** test()}``` || im able to avoid it by keeping everything in `rxinternalutilunsafe` but would be nice to avoid the reflection entirely if possible || yes this is what i did to patch this issue || full stack trace for nosuchfieldexception that @julienbanse mentioned```08-14 14 28619    7362-7429/commarkavipapp e/androidruntime﹕ fatal exception: pool-1-thread-1    process: commarkavipapp pid: 7362    javalangillegalstateexception: fatal exception thrown on schedulerworker thread            at rxinternalschedulersscheduledactionrun(sourcefile:62)            at rxschedulersexecutorscheduler$executorschedulerworkerrun(sourcefile:98)            at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)            at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)            at javalangthreadrun(threadjava:818)     caused by: javalanginternalerror            at rxinternalutilunsafeunsafeaccessa(sourcefile:103)            at rxinternalutilunsafespscarrayqueueproducerfields<clinit>(sourcefile:39)            at rxinternaloperatorsoperatorobserveon$observeonsubscriber<init>(sourcefile:102)            at rxinternaloperatorsoperatorobserveona(sourcefile:64)            at rxinternaloperatorsoperatorobserveona(sourcefile:44)            at rxobservable$2a(sourcefile:158)            at rxobservable$2a(sourcefile:154)            at rxobservablea(sourcefile:7710)            at rxinternaloperatorsoperatorsubscribeon$1$1a(sourcefile:62)            at rxinternalschedulersscheduledactionrun(sourcefile:55)            at rxschedulersexecutorscheduler$executorschedulerworkerrun(sourcefile:98)            at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)            at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)            at javalangthreadrun(threadjava:818)     caused by: javalangnosuchfieldexception: producerindex            at javalangclassgetdeclaredfield(classjava:890)            at rxinternalutilunsafeunsafeaccessa(sourcefile:100)            at rxinternalutilunsafespscarrayqueueproducerfields<clinit>(sourcefile:39)            at rxinternaloperatorsoperatorobserveon$observeonsubscriber<init>(sourcefile:102)            at rxinternaloperatorsoperatorobserveona(sourcefile:64)            at rxinternaloperatorsoperatorobserveona(sourcefile:44)            at rxobservable$2a(sourcefile:158)            at rxobservable$2a(sourcefile:154)            at rxobservablea(sourcefile:7710)            at rxinternaloperatorsoperatorsubscribeon$1$1a(sourcefile:62)            at rxinternalschedulersscheduledactionrun(sourcefile:55)            at rxschedulersexecutorscheduler$executorschedulerworkerrun(sourcefile:98)            at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)            at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)            at javalangthreadrun(threadjava:818)``` || thing is this used to justwork(tm) because the reflective call was done directly on the target class (eg `spscarrayqueueproducerfieldsclassgetdeclaredfield(""producerindex"")`) and proguard could figure out that this field needed to be kept (see [the ""reflection"" chapter of the proguard documentation]( with `1014` the reflective call is now indirected through a utility class (`unsafeaccess#addressof`) and i guess proguard dont detect the field to keep anymorefor now we can either keep everything in package `unsafe` or selectively keep reflected field with```-keepclassmembers class rxinternalutilunsafe*arrayqueue*field* {    long producerindex    long consumerindex}-keepclassmembers class rxinternalutilunsafebaselinkedqueueproducernoderef {    long producernode    long consumernode}```while waiting for them to be annotated appropriately in the source || fwiw for android at least this is going to be handled by  automatically for consumers this obviously does not solve if you are proguarding for another target (or simply not using rxandroid on android) || @julienbanse + @desseim responses together worked for me  || @desseim adding those rules produces these ""noted"" warnings but it works!:```note: the configuration refers to the unknown field long producernode in class rxinternalutilunsafebaselinkedqueueproducernoderefnote: the configuration refers to the unknown field long consumernode in class rxinternalutilunsafebaselinkedqueueproducernoderef``` || @jaredsburrows youre right thanks for noticingseems like a dumb copy-paste error anyway the proper settings should be:```-keepclassmembers class rxinternalutilunsafe*arrayqueue*field* {    long producerindex    long consumerindex}-keepclassmembers class rxinternalutilunsafebaselinkedqueueproducernoderef {    rxinternalutilatomiclinkedqueuenode producernode}-keepclassmembers class rxinternalutilunsafebaselinkedqueueconsumernoderef {    rxinternalutilatomiclinkedqueuenode consumernode}```on my code base (and yours too apparently) `baselinkedqueueproducernoderef` and `baselinkedqueueconsumernoderef` classes altogether were stripped away by proguard anyway so that no problem arosefor anyone whose code ended up `baselinkedqueue` though it would have probably thrown at runtime || @desseim @felipesci thank you so much for posting thisi have recently updated `rxandroid` and `rxjava`:```    compile ioreactivex 110    compile ioreactivex 110```and those current proguard rules do not seem to work anymore || @jaredsburrows ive backed proguard rules for rxjava as `aar` and we successfully use it in production for several months (updated each rxjava release) can you please try it?  // if youll face a problem — feel free to create an issue in the repository of the rules and ill make a fix and ship new version || @artem-zinnatullin sure! i believe i am using the same rules as your dependency is providing you have tested this against `110`? || @jaredsburrows yep we use it with `110` can you please post your problem (stacktraces/etc) as an issue to the [repository]( or here as a comment though im not sure that its the right place || @artem-zinnatullin i am using this with retrofit and i see the logs with proguard on but i am not seeing the ui get updated i am still investigating and i will try to keep you updated || @artem-zinnatullin just a quick update the issue i was seeing was related to another issue with a few proguard rules and not related to the rules you have provided your rules work very well thanks for your support || ok thanks for update  im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || were using rxjava 115 in production currently for android with proguard and according to crash logs this issue pops up time to time on certain device + os conditions to be specific the conditions seem to be (out of literally millions of sessions):- only on android 50 501 or 502- only on samsung devices (sm_g900f sm_n9005 gt_i9505 and some unknown but still supposedly samsung ones)- proguard is on but obfuscation is off and the relevant proguard config is as follows:-keep class rx*\* { _ }-dontwarn rxinternal_*the crash rate is really low but its certainly happening has anyone encountered with this? there seem to be some funky vendor-specific thing going on there so far we couldnt test this in house with the problematic devicesedit:apparently samsung doesnt really give much support on this:   || see  || with those rules theres no point in using proguard youre keeping theentire library and preventing proguard from actually doing anythingon sun jun 12 2016 5:04 am artem zinnatullin notifications@githubcomwrote:> see #3459  > —> you are receiving this because you commented> reply to this email directly view it on github>  or mute the thread>   || just to clear this up again please see @desseims post here:  || probably they want to shrink all other libraries and keep rxjava to avoidcrash on samsung ¯_(ツ)_/¯on sun 12 jun 2016 18:05 jake wharton notifications@githubcom wrote:> with those rules theres no point in using proguard youre keeping the> entire library and preventing proguard from actually doing anything> > on sun jun 12 2016 5:04 am artem zinnatullin notifications@githubcom> wrote:> > > see #3459  > > > —> > you are receiving this because you commented> > reply to this email directly view it on github> > < > > > or mute the thread> > <> >  > > > > > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || well yes this proguard config doesnt do a thing with rxjava we mostly use to to shrink down other stuff this might not be the most optimal thing to do but the point here is that were keeping everything from rx and the issue still happensi might miss something but the way i see it the links you provided discuss how proguard might screw things up with a config that enables it to shrink rxjava my hunch is still that this is due to some funky samsung-specific thing on their android versions i mentioned as a short-term workaround ill use the rxunsafe-disable to disable unsafe || you can disable unsafe only on samsung devices btwon mon 13 jun 2016 11:00 zsombor erdődy-nagy notifications@githubcomwrote:> well yes this proguard config doesnt do a thing with rxjava we mostly> use to to shrink down other stuff this might not be the most optimal thing> to do but the point here is that were keeping everything from rx and the> issue still happens> > i might miss something but the way i see it the links you provided> discuss how proguard might screw things up with a config that enables it to> shrink rxjava as a short-term workaround ill use the rxunsafe-disable> to disable unsafe> > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || @rzsombor we encountered a very similar issue with a different library (greendao) maybe it could shed some light on the issue you encountered herewe get  caused by: javalangnosuchfieldexception: tablenamesystemerr:     at javalangclassgetfield(classjava:1104)systemerr:     at degreenrobotdaointernaldaoconfig<init>(sourcefile:56)only happens on samsung 50/501/502 devices in the wild we cant reproduce this issue in-housewe have the recommended greendao proguard [configuration]( our apk shows that the ""problematic"" class does indeed have a public tablename field:field public static final tablename:ljava/lang/string  ""glide_user""so we can only join your conclusion that its a weird samsung bug unfortunately we dont even have a work-around kinda hoping the guys in this project can come up with somethingbtw other people encountered the same issue with greendao (note that the suggested solutions such as adding proguard rules or upgrading to the latest version do not solve the issue): || @artem-zinnatullin oh yes forgot to add that  - only switching unsafe off on these problematic device - os combinations@eranpolo thanks the extra info im still trying to get my hands on an affected device to get to the bottom of thisedit: for reference our current naive workaround for the samsung-issue:```if (buildversionsdk_int  buildversion_codeslollipop && ""samsung""equalsignorecase(buildmanufacturer)) {    systemsetproperty(""rxunsafe-disable"" ""true"")}``` || @rzsombor a list of devices that it happened to here are:- sm-n915v- sm-s978l- sm-n900t- sm-g900v- smg900p- samsung-sm-g870a- sm-t530nu- sm-t350- sm-p550- gt-i9515all of those devices had this crash after adding the proguard rules from  || ";;;;0;1;;
3103;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> slightly discourage the use of the <long  timeunit> overloads on cachebuilder.  babed10eeb8bc5571bdebecec94d48eb3b4748e8  -------  <p> fix tests that failed if we couldn t recursively delete securely by using jimfs and just getting rid of the whole file system each time.  fixes   1974d26799780c448ef72c09eee2201dc7812fbb  -------  <p> fix typo in future javadoc.  7416b725e7a657cd215783651984217aad0840cc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> slightly discourage the use of the <long timeunit> overloads on cachebuilderbabed10eeb8bc5571bdebecec94d48eb3b4748e8-------<p> fix tests that failed if we couldnt recursively delete securely by using jimfs and just getting rid of the whole file system each timefixes  fix typo in future javadoc7416b725e7a657cd215783651984217aad0840cc;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;fix typo in future javadocrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid191789473;
3103;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> slightly discourage the use of the <long  timeunit> overloads on cachebuilder.  babed10eeb8bc5571bdebecec94d48eb3b4748e8  -------  <p> fix tests that failed if we couldn t recursively delete securely by using jimfs and just getting rid of the whole file system each time.  fixes   1974d26799780c448ef72c09eee2201dc7812fbb  -------  <p> fix typo in future javadoc.  7416b725e7a657cd215783651984217aad0840cc;;0;fix formatting for release notes;;;;;;0;1;;
3103;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> slightly discourage the use of the <long  timeunit> overloads on cachebuilder.  babed10eeb8bc5571bdebecec94d48eb3b4748e8  -------  <p> fix tests that failed if we couldn t recursively delete securely by using jimfs and just getting rid of the whole file system each time.  fixes   1974d26799780c448ef72c09eee2201dc7812fbb  -------  <p> fix typo in future javadoc.  7416b725e7a657cd215783651984217aad0840cc;;3098.0;materialize() - add backpressure support;as mentioned in #3098 the existing version of  `materialize` could deliver one more event than requested being the termination event (completion or error)this pr ensures that a termination event is buffered till requested;thanks @akarnokd ive updated with those fixes and rebased || a quick question about synchronized blocks vs using volatile variables in general it would also be possible to atomically change a pair like `busy` and `missed` using an immutable wrapping object `busyandmissed` and storing it in an `atomicreference<busyandmissed>` and use spinning to modify it could involve some gc pressure if rapidly changing of course have you any experience of advantages/disadvantages with this approach? || that approach is wasteful you only need an atomicinteger and its increment/decrement methods 0 means not busy 1+ means busy and 2+ means there is still work to be done the pair of booleans + synchronized however plays into the hands of lock elision and biased locking which affects our benchmarks if it were up to me id use atomics everywhere so we avoid the chance of unnecessary thread suspension due to a lock not available around 2 bytes || thanks quite right for that pair of objects was probably a bad example so under circumstances where we are getting significant lock elision and biased locking is it also the case that the volatile read and write of `terminalnotification` is just like a non-volatile read and write? i left it as non-volatile to favour lock elision and biased locking in the first place || that is a terminal event that happens once but when the lock optimizations dont happen you may get a hefty delay paying a few dozen nanoseconds for a single volatile write is way better || makes sense  ;materialize() and dematerialize() backpressure support;just a note that im working on prs for backpressure support for `materialize()` and `dematerialize()` let me know if you are already working on thisthe problems are these- `materialize` can emit one more than requested (the completion or  error notification)- `dematerialize` on a source of n items should emit n-1 items but requires a request of n to also report the completion event;solved via #3103 ||;1;0;add backpressure to operatormaterialize;
3109;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    3c3aedeb600306c689655fc8ca950f662cada625;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunctiond7874ed808bad3031796854432c39358894eff08-------<p> update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id6104953c3aedeb600306c689655fc8ca950f662cada625;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid192451340;
3109;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    3c3aedeb600306c689655fc8ca950f662cada625;;0;improve cast varchar to date time type;;;;;;0;1;;
3109;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    3c3aedeb600306c689655fc8ca950f662cada625;;0;unit tests and cleanup of jctools queues;increased test coverage of jctools queues and unsafe activities  inconsistencies in the queues;;;;;1;1;unit tests and cleanup of jctools queues;
3117;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422;;0;fix jitter for shard compaction discovery;;;;;;0;1;;
3117;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422;;0;operator replay() now supports backpressure (again);and applied the hardenings as well;ive merged this and cache() so people can look at the code and try out the snapshot versions ||;;;;1;1;operator replay() now supports backpressure (again);
3117;0;0;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422;;3107.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring of nonserializablememoizingsupplier31079185822ee16cdd641657c0f8e7ead755c9e9a564-------<p> use splitter instead of stringsplit in internetdomainnamee56f1aa3d21b04eed8f5481d4103c05af5c51ec7-------<p> use splitter for ipv6 too this eliminates usage of javautilregex from this file (which is used via stringsplit otherwise)65a2a7de4ef4eea913f769a5cbbce6e35e1fccce-------<p> use diamond27eb336c2a2d9068878edbf49edcca493cd69cd8-------<p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174eit looks like the original change can cause an infinite loop in localcacheloadingvaluereferenceget()c2266a6ff8c6f298673688d6779b8b7368fe9147-------<p> dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addresses263bbcf6cf0cfae6768ddf9e9f3d749da555e422;    <!-- cla_yes --> || cla verified in #3107 ||;fix tostring of nonserializablememoizingsupplier;delegate is set to null once the value has been computed but is still referenced by the tostring method when its null use the value instead;first solution i thought of ||;1;0;dont enable use of unsafegetlong() on aarch64 devicesandroid devices may report to run aarch64 while running in 32-bit mode and thencrash when loading 64-bit values at unaligned addressesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193371483;
3121;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adding a new (initially internal  pending api review) static factory to striped.  this allows for custom lock injection  which might be useful for cases not covered by the currently existing factories. with this  striped<lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adding a new (initially internal pending api review) static factory to stripedthis allows for custom lock injection which might be useful for cases not covered by the currently existing factories with this striped<lock> with fair sync is possible69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;;;;1;1;adding a new (initially internal pending api review) static factory to stripedthis allows for custom lock injection which might be useful for cases not covered by the currently existing factories with this striped<lock> with fair sync is possiblerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193545335;
3121;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adding a new (initially internal  pending api review) static factory to striped.  this allows for custom lock injection  which might be useful for cases not covered by the currently existing factories. with this  striped<lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;0;remove debug mode logging for cli;;looks good  ||;;;;0;1;;
3121;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adding a new (initially internal  pending api review) static factory to striped.  this allows for custom lock injection  which might be useful for cases not covered by the currently existing factories. with this  striped<lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379;;3119.0;improve performance of newthreadworker disable search for setremoveoncancelpolicy() on android api < 21;3119this pr adds methods for detecting android api version and disables `newthreadworkertryenablecancelpolicy()` on android api < 21 which has significant performance cost on androidpr also improves performance of `newthreadworkertryenablecancelpolicy()` via caching reflection;checked on jvm (java 8) android 412 (api 16) android 511 (api 22) ||  all comments removed test with reflection added more javadoc and comments tests are now compilable on jdk 6 (didnt check but they should work fine) @akarnokd @jakewharton ptal  || great ;newthreadworkertryenablecancelpolicy doing costly reflection on android;i was  analyzing startup time in the ny times android app and started method profiling on startup using android device monitor  total time from the beginning of the application class to end of oncreate for first activity is roughly  22seconds diving deeper i was able to observe that `newthreadworkertryenablecancelpolicy` was taking 1200ms to execute with the offending line being  `for (method m : execgetclass()getmethods())` (1017ms)diving deeper shows a call to `collectionutilsremoveduplicates (992 ms)`  which will call `collectionsort` (719ms) & `reflectcompare`(259ms)tryenablecancelpolicy has the following comment: ``` /**     * tries to enable the java 7+ setremoveoncancelpolicy     * <p>{@code public} visibility reason: called from other package(s) within rxjava     * if the method returns false the {@link #registerexecutor(scheduledthreadpoolexecutor)} may     * be called to enable the backup option of purging the executors     * @param exec the executor to call setremoveoncaneclpolicy if available     * @return true if the policy was successfully enabled      */ ```i tried creating a scheduler from an executor but still hit the offending code  is there a way to avoid this code or fix the large performance hit that it is causing?;"woah if the signature of the to-be-reflected method is known why is a direct lookup not being done? || @digitalbuddha you can use the system property ""rxschedulerjdk6purge-force"" set to ""true"" to avoid the loop the reason for the loop is to avoid nosuchmethodexception being thrown on jdk 6 which is more costly than looping through ~70 methods although i admit evaluating that all the time is unnecessary as executorsnewscheduledexecutor() wont change is ability during runtime || thankfully that property _just_ squeezes under androids 31 character max at 29 chars! || can we use `platformdependentisandroid()` to default this to `true`? || my google search indicates the method `setremoveoncancelpolicy` is supported from api level 22 if there could be a way to discover the api level programmatically and cross-platform safe then sure || the `androidosbuildversion` class has an `sdk_int` int constant which can be read the presence of the class could replace the check for `androidappapplication` || @akarnokd what do you mean by >  cross-platform safe? `androidosbuildversion` is safe to call for all android versions documentation:  || android is one platform || great would you like to submit a pr? || just pushed the pr #3121android [supports `scheduledthreadpoolexecutorsetremoveoncancelpolicy()` since api 21]( || little gist for those who want to fix this in android app with rxjava:  || your gist says ""static initializer block"" and then proceeds to use an instance initializer block || such a stupid mistake…uh  ";1;0;improve performance of newthreadworkertryenablecancelpolicy()disable search for scheduledexecutorservicesetremoveoncancelpolicy() on android api < 21;
3125;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> strip @donotmock annotations  relnotes=n/a  88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> strip @donotmock annotationsrelnotesn/a88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;;;;1;1;strip @donotmock annotationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid193962447;
3125;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> strip @donotmock annotations  relnotes=n/a  88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;0;remove skip dependency check for rpm;with aircheckskip-dependency enabled themaven-dependency-plugins unpack goal was being skipped so mvn install-p rpmbuild failed since the unpacked presto-server artifacts weremissingtesting: mvn clean install and mvn clean install -p rpmbuild;thank you for your pull request and welcome to our community we require contributors to sign our contributor license agreement and we dont seem to have you on file in order for us to review and merge your code please sign up at  - and if you have received this in error or have any questions please drop us a line at cla@fbcom  ;;;;0;1;;
3125;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> strip @donotmock annotations  relnotes=n/a  88134a2ed0b37c219b2912bdbff320e15dbe1a2e;;0;subscriber onerrror not called if exception is null;rxjava version 1013subscriber onerrror not called if exception passed to onerror is null @overridepublic void onerror(throwable e) {           //this is method in subscriber}if this is called onerror is not called subscriberonerror(null) if works if subscriberonerror(new exception());"in what context does this happen? || i have observable:``` javaobservablecreate(new observableonsubscribe<arraylist<string>>() {    @override    public void call(subscriber<? super arraylist<string>> subscriber) {         arraylist<string> result  new restapi()getfromurl(""someurl"")         if (result ! null) {            subscriberonnext(result)            subscriberoncompleted()         } else {            subscriberonerror(null) //this doesnt work            //  subscriberonerror(new exception())//this works         }    }})subscriber<arraylist<string>> subscriber  new subscriber<arraylist<string>>() {            @override            public void oncompleted() {            }            @override            public void onerror(throwable e) {             //this is not called when  subscriberonerror(null)            }            @override            public void onnext(arraylist<string> result) {            }        }``` || your example works for me if i put `systemoutprintln(e)` into the onerror method and prints `null` || @akarnokd ive found that `testsubscriberasserterror()` does not allow to use `null` as error because it uses `errorequals()` which throws `nullpointerexception` if we pass `null` as error so i made pr for that and also added test which asserts that we can pass `null` as error to the subscribersee pr #3126@vandzi i think you have some problem in your code try to remove anything but `subscriberonerror(null)` and check that subscriber receives in in `onerror()` || it is invalid to call `onerror(null)` similar to how ""throw null"" is invalid  || if onerror(null) is invalid it will be good to throw exception if null is passed as parameter this way you will not figure out there is problem until you realise that callback is not called || whenever you want to throw or send `null` throw or send `new nullpointerexception()` instead || ";;;;0;1;;
3130;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use @safevarargs annotation for sets.cartesianproduct().  fixes  fixes   63a2f5a3928b64f9892f9751269ad1e27a718162;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use @safevarargs annotation for setscartesianproduct()fixes  https://githubcom/google/guava/issues/272463a2f5a3928b64f9892f9751269ad1e27a718162;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  i am ok with changes! || @ronshapiro can you please tell me how i can make googlebot happy by informing that i am ok with changes in this pr? || oh id missed the message that the cla bot wont change its status so were all set here ;;;;1;1;use @safevarargs annotation for setscartesianproduct()fixes   by moe: https://githubcom/google/moemoe_migrated_revid194451754;
3130;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use @safevarargs annotation for sets.cartesianproduct().  fixes  fixes   63a2f5a3928b64f9892f9751269ad1e27a718162;;0;replace filter node that contain only false expression with valuenode;the original issue was that the queries like ```select * from (select count(*) from nation) where 01```returns ``` _col0 -------     0 (1 row)```when they should return``` _col0 -------(0 rows)```it happens because predicatepushdown optimizer does the pushdown of that false predicate to the aggregation queryso instead of duplicating such predicates in pushdown and postaggregation we can just prune sub-queries that return empty result sets;thank you for your pull request and welcome to our community we require contributors to sign our contributor license agreement and we dont seem to have you on file in order for us to review and merge your code please sign up at  - and if you have received this in error or have any questions please drop us a line at cla@fbcom  thank you for signing our contributor license agreement we can now accept your code for this (and any) facebook open source project thanks! || can you provide tests for that?czw 18 cze 2015 22:35 facebook community bot użytkownik <notifications@githubcom> napisał:> thank you for signing our contributor license agreement we can now accept> your code for this (and any) facebook open source project thanks!> > —> reply to this email directly or view it on github>  || good catch! the fix is actually a bit more complicated it turns out that predicatepushdown is broken for any constant expression that evaluates to false when it sits on top of an aggregation im working on a more comprehensive fix ||;;;;0;1;;
3130;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use @safevarargs annotation for sets.cartesianproduct().  fixes  fixes   63a2f5a3928b64f9892f9751269ad1e27a718162;;0;"switch to privateconstructorchecker for ""testnotinstantiable"" tests";@akarnokd as i promised in #3112 i am adding nice class that allows to assert that:- class has **only one constructor without args and that its private**- constructor throws exception (optional) with some type and/or messagehere is the repository:  youll find it nice & useful!previous solution didnt check that constructor is private that class has only one constructor and it required a lot of boilerplate code!;"instead of another library you could create a utility method on a test class that does this check and call it from all places || i can just copy `privateconstructorchecker` to the rxjava tests you wont have problems with licence because author of `privateconstructorchecker` is me :)okay? || sounds good || added `privateconstructorchecker` to the test utils and switched all previous `testnotinstantiable` tests to this checker@akarnokd ill add missing tests for other non-instantiable classes in a separate pr to make it easier for review || i dont understand why we need this assertion or the ability to assert this via tests  || @benjchristensen because we are humans and we make mistakes somebody may delete private constructor in some huge pr and it can be merged and api will become publicquote from  **goal**> **max code coverage!**> it means that **you need to test** even private constructors of classes that must not be instantiated> **q**: why would i want to test that constructor is private and that it throws exception??> **a**: because if you not the only developer in the project — others may change this (make constructor public etc) and you may miss this on the code review because you are human)> **a2**: because if you want to have as max code coverage as possible — you need to test even such ""unreacheable"" code ||  without having an external dependency that removes my strong opinion now i dont have strong opinions one way or another on this i cant think of a single time when a private constructor becoming public has been an issue nor do i think people will ever remember to write unit tests asserting this behavior but if it is deemed worthwhile by others it is fine by me @reactivex/rxjava-committers what do you think? || i loved to see the coverage max out with this kind of test in my related prs and i planned to factor out the common check in the next improvement run im in favor but the checkers package should be rxinternalutil instead || @akarnokd i hope you mean `rxinternalutil` in the tests? or you mean `rxinternalutil` in the main source set? if second — i dont think its a good idea to deliver test util class to the clients itll make jar bigger and add more methods which is not very good for android || keep it among the tests of course || @akarnokd done! || is the motivation here to get a higher score on code coverage reports? why is it necessary to create private constructors? 100% is not achievable nor is it an effective measure of good tests  || @stealthcode not only higher score on code coverage but also verification of the class contractwould you test `public` or `protected` constructor or `static factory`? i guess yes so why not test `private` constructor? its a method of a class it has behavior and this behavior should be tested (my personal opinion) || okay i cant see any harm (or benefit) from asserting that the `actions` `functions` `observers` and `subscribers` classes cannot be instantiated i personally dont think these contracts are at risk of changing that said it couldnt hurt   plus having the utility class could help in areas (ie the `rxobservable` private constructor)  || fair enough :) im going to add such tests for all other classes (`rxobservable` too) with private constructors in a separate pr  || i dont want to discourage writing good tests submitting prs to improve the quality of tests is certainly welcome and thats what i see that this pr is doing that said the tests that you are modifying are making assertions and establishing certain contracts that are not necessarily essential or permanent we are making a conscious decision not to require code coverage (or other such tools) in the release process nor are we taking a stance on which tools we want people to use however we encourage and hope to provide a mechanism by which contributors can standardize tools configuration if you the individual developer choose to use these tools (see #3089) a larger decision should be made as to how we will address the use of build or bug finding tools in rxjava im going to open an issue so that people can comment with suggestions or requests  || id support merging the helper utility if we can use it to assert that public constructors dont exist for the classes where we have static method helpers to build them i think this list includes:- rx(observable | notification)- rxobservables(blockingobservable | connectableobservable | groupedobservable)- rxpluginsrxjavaplugins- rxsubjects(asyncsubject | behaviorsubject | publishsubject | replaysubject)and (unless someone objects) i think we could delete the tests to assert non-public constructors for- rxobservers(subscribers | observers)- rxfunctions(functions | actions)i think these are valid contract assertions (but anyone feel free to correct me) also i opened the issue to discuss tools (as mentioned in my previous comment) please see #3164  || @artem-zinnatullin can this be closed or is there still work to be done in this pull request? || lets close this looks like not a lot of people see sense in this (its ok no problem) || ";;;;0;1;;
3132;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a few formatting nits  relnotes=n/a  6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a few formatting nitsrelnotesn/a6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;;;;1;1;fix a few formatting nitsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid195263207;
3132;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a few formatting nits  relnotes=n/a  6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;0;dont push predicates through non-grouped aggregations;;supersedes #3130 || ;;;;0;1;;
3132;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a few formatting nits  relnotes=n/a  6251cc89ad889458ed7ad4911f5b41d9733cc0b1;;0;documentation: observable contract;the _observable contract_ is mentioned in many places in reactivex documentation rxjava wiki and in `subject` javadocs but without links or clarification to what it is and where to find it (i think!)i believe the contract is defined in rx design guidelinespdf section 4 from microsoft but at the moment this fact is not easily discoverable in the documentation my first idea is to create a page in reactivex documentation say called _observable contract_ which itself references the pdf for the moment and then all links would be to that _observable contract_ page@davidmgross your thoughts?;i think it should be part of the `observable` javadoc and link to it at the relevant places via hash-anchor || that sounds good to me and i suppose a copy of it needs to go in the more generic reactivex doco by _it_ you mean the details of the contract extracted from the pdf? || ill see if i can work up a summary page about the observable contract for the website  are there important elements of this contract that are not reflected in the 2010 microsoft design guidelines?  for example should there be any discussion of backpressure (eg what an observable should do if it does not support backpressure and an observer attempts to apply it)? || heres a first attempt:  || should this page also perhaps discuss the correct behavior of an observable if an observer does not implement onnext onerror and/or oncompleted or of any of those methods throws an exception? || thanks @davidmgross > observables must send notifications serially in a single thread and not in parallelsingle thread is not required as long as the emissions happen serially (which basically means not in parallel) you could say > observables must send notifications serially (not in parallel) the notifications may be sent from different threads but there must be a formal _happens-before_ relationship between the notifications@akarnokd will be good for cleaning up this statement! ||  covers most of it and includes backpressure it could be translated into rxjava speak and bulked up a bit (the reactive-streams-jvm specification itself is going to be bulked up with comments when people get round to it) || please see  for my latest draft of the contract including a discussion of backpressure id appreciate your comments and corrections || thanks dave thats very usefulon thu aug 6 2015 at 8:46 pm dave moten notifications@githubcom wrote:>  covers most of it and includes backpressure it could be translated into> rxjava speak and bulked up a bit (the reactive-streams-jvm specification> itself is going to be bulked up with comments when people get round to it)> > —> reply to this email directly or view it on github>  david m grossplp consulting || i think ive got this pretty well nailed down let me know if you have any comments corrections or additions ||;;;;0;1;;
3139;1;1;0;1;0;0;1;1;0;0;1;0;1;1;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> support type annotations in nullpointertester  relnotes=n/a  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> continue type annotation preparations in nullpointertester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> add token binding  header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> use the type annotation version of @nullable in the java 8 branch  relnotes=use the type annotation version of @nullable in the java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> support type annotations in nullpointertesterrelnotesn/afeefa807349f68c90589aca91d121ba2991fe7f5-------<p> continue type annotation preparations in nullpointertester9f4014505d9d368f4fbd607586b7349081e3b021-------<p> add token binding  header names to header libraries5406f50eb39519a00062ab1e0cf5b1ac0ef76e80-------<p> use the type annotation version of @nullable in the java 8 branchrelnotesuse the type annotation version of @nullable in the java 8 branchdaa53ccf373aedee90abbceb3a33c2355d189e5c;;;;;1;1;use the type annotation version of @nullable in the java 8 branchrelnotesuse the type annotation version of @nullable in the java 8 branch-------------created by moe: https://githubcom/google/moemoe_migrated_revid195842620;
3139;1;1;0;1;0;0;1;1;0;0;1;0;1;1;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> support type annotations in nullpointertester  relnotes=n/a  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> continue type annotation preparations in nullpointertester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> add token binding  header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> use the type annotation version of @nullable in the java 8 branch  relnotes=use the type annotation version of @nullable in the java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c;;0;fix documentation error for comparison operators;compare should be `a  b` instead of `a  a`3138;;;;;0;1;;
3139;1;1;0;1;0;0;1;1;0;0;1;0;1;1;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> support type annotations in nullpointertester  relnotes=n/a  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> continue type annotation preparations in nullpointertester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> add token binding  header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> use the type annotation version of @nullable in the java 8 branch  relnotes=use the type annotation version of @nullable in the java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c;;0;fusing filter() with an emission/drain loop;ive been experimenting with operator fusion (for my future work chapter in my dissertation) and it is simple to inline a filter function into the emission/drain loop so that the overhead of `request(1)` for a skipped value can be avoided/amortized giving some interesting throughput improvements here are some benchmark (i7 4770k windows 7 x64 java 8u51 jmh 1103) results that compare an rxjava from()filter() with an absolute minimalist reactive-streams implementation of the two operators + fusing capability:```benchmark                (times)   mode  cnt         score        error  unitsfilterperffilter              1  thrpt   15  24873462666 ? 419852680  ops/sfilterperffilter           1000  thrpt   15    723886848 ?   2070738  ops/sfilterperffilter        1000000  thrpt   15       661785 ?     23987  ops/sfilterperffilter3             1  thrpt   15  22287395076 ?  62387334  ops/sfilterperffilter3          1000  thrpt   15    216723981 ?    480625  ops/sfilterperffilter3       1000000  thrpt   15       217875 ?      0464  ops/sfilterperffilternofuse        1  thrpt   15  21124310001 ? 215214806  ops/sfilterperffilternofuse     1000  thrpt   15    217239919 ?    671578  ops/sfilterperffilternofuse  1000000  thrpt   15       211587 ?      3689  ops/sfilterperfrxfilter            1  thrpt   15   3775438637 ?  44175577  ops/sfilterperfrxfilter         1000  thrpt   15    159261153 ?    986562  ops/sfilterperfrxfilter      1000000  thrpt   15       163976 ?      1132  ops/sfilterperfrxfilter3           1  thrpt   15   2906599609 ?  17758800  ops/sfilterperfrxfilter3        1000  thrpt   15     76846788 ?    742776  ops/sfilterperfrxfilter3     1000000  thrpt   15        78284 ?      0997  ops/s```observations:- rxjava has quite the overhead of creating a sort lived observable sequence observable sequence- rxjavas `func1<t boolean>` has higher overhead than a primitive boolean returning predicate from java 8  (+33% throughput)- fusing a filter into an emission loop can decrease the overhead drastically fusing 3 filters has the roughly the same throughput as having 1 unfused filteri personally dont often use `filter()` so i dont know if there is some typical chain of operators involving filter that could be optimized this way even if `filter()` is not fused into `from()` combining subsequent filter functions can reduce the allocation cost of a chain (similar fusing is possible with `map()`)thoughts?;looks great ive been meaning to put through optimizations with empty for a while (not inlining of course just straightforward collapsing of composed operators)a common pattern for me is `create(abstractonsubscribe)map()filter()` so id like to see `map` and `filter` fusion  || sounds promising im certainly interested in seeing more about this  || operator-fusion if it ever happens will take care of this in 2x ||;;;;0;1;;
3142;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a documentation error.  fluentfuture.catchingasync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a documentation errorfluentfuturecatchingasync does not take a future as an argumentbf25a56ef0d350b2a631536809e4f9b958abf9e3;;;;;1;1;fix a documentation errorfluentfuturecatchingasync does not take a future as an argumentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid195984943;
3142;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a documentation error.  fluentfuture.catchingasync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3;;0;add split_to_map function to string operations;ref issue #2544 this commit adds a function which is expected to work almost the same as hives str_to_map() function that generates a map based on input string and two delimitersadditionally we might need to discuss a proper function name;"ping me after you rebase and resolve the comments  this function is useful however it doesnt look like the original author is still working on itif any one is interested feel free to submit a new pull request || hi @haozhunsorry for my late response i rebased and modified my pr based on your suggestions please review it if you have time thankstwo minor concerns:1 do you think i could roughly assign [`32` as expectedentries when creating `blockbuilder`]( ?   not sure what number to assign as we cant get the exact number of entries for key-value pairs beforehand2 or do you think itd be better to create `hashmap<slice slice>()` first and put key-value pairs then create `blockbuilder` and add keys and values using the hashmap? finally we can build `build` is it nice with regard to performance in our case? || i think we should make some changes in the way a couple edge cases work:1) an empty value should not be skipped it should be empty string instead that is `split_to_map(1  )` is equal to `map(array[1] array)`2) duplicate keys are not allowed that is `split_to_map(1a1b  )` should throw `invalid_function_argument` error code3) entry delimiter and key-value delimiter must not be equal that is `split_to_map(1  )` should throw `invalid_function_argument` error code4) key-value delimiter must appear exactly once in each entry that is `split_to_map(1  )` and `split_to_map(1  )` should throw `invalid_function_argument` error code || hi @cbernerthanks for your advice i rebased and applied your ideas ill squash all the commits into one after everything looks fine to you> 1) an empty value should not be skipped it should be empty string instead that is split_to_map(1  ) is equal to map(array[1] array)i think this is already satisfied according to this [test]( right?do you think we could allow an [empty key]( as well or not?> 2) duplicate keys are not allowed that is split_to_map(1a1b  ) should throw invalid_function_argument error codesure [done]( i used map to check if therere duplicate keys if this is not fine please let me know the better way :)> 3) entry delimiter and key-value delimiter must not be equal that is split_to_map(1  ) should throw invalid_function_argument error codeagree ive done [it]( 4) key-value delimiter must appear exactly once in each entry that is split_to_map(1  ) and split_to_map(1  ) should throw invalid_function_argument error codei think this requirement is necessary to solve the ambiguity of ""which word is used(deleted) to split key-value entry""? then i agree :) [commit]( || made some minor changes and  thanks for your help!i think you might close [ as well? || ";;;;0;1;;
3142;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a documentation error.  fluentfuture.catchingasync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3;;0;remove redundant final modifier from static method in actions;;this will conflict with #3123 || yep i saw #3123 thats why i didnt remove `t9`if youll merge #3123 ill just update this pr || ive merged #3123 could you update this pr? || updated! || great! ||;;;;1;1;remove redundant final modifier from static method in actions;
3144;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    16cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id61049516cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid196136837;
3144;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    16cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;0;add launcher for testingprestoserver;this commit adds testingprestoserverlauncher which allows spawninginstance of testingprestoserver as separate java processthis is needed for integration tests when we cannot spawntestingprestoserver in the same jvm which runs the test codeexample of such situation is integration testing of java 6 based jdbcdriver for presto;"is that good to go? || is this meant to produce a standalone executable? it so take a look at how we do that in the cli:  || the tool fails with the following error if no options are provided:```exception in thread ""main"" javalangillegalstateexception: some plugins must be defined    at comgooglecommonbasepreconditionscheckstate(preconditionsjava:173)    at comfacebookprestoservertestingtestingprestoserverlauncheroptionsvalidate(testingprestoserverlauncheroptionsjava:77)    at comfacebookprestoservertestingtestingprestoserverlaunchervalidateoptions(testingprestoserverlauncherjava:83)    at comfacebookprestoservertestingtestingprestoserverlaunchermain(testingprestoserverlauncherjava:77)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:483)    at comintellijrtexecutionapplicationappmainmain(appmainjava:140)```it should print the help output instead || > is this meant to produce a standalone executable? it so take a look at how we do that in the cli:  not i started by putting tpsl class in presto-main module but i had to move it out to separate module due to some dependency issues as we can do it now we will make the jar executable || i have added maven configuration to build standalone executable as requested however im stuck with airlift/airline i have marked ""plugins"" and ""catalogs"" arguments as required so without those arguments i get somehow acceptable error:```$ presto-testing-server-launcher/target/presto-testing-server-launcher-0108-snapshot-executablejarexception in thread ""main"" ioairliftcommandparseoptionmissingexception: required option --catalog is missing    at ioairliftcommandsinglecommandvalidate(singlecommandjava:106)    at ioairliftcommandsinglecommandparse(singlecommandjava:65)    at ioairliftcommandsinglecommandparse(singlecommandjava:56)    at comfacebookprestoservertestingtestingprestoserverlaunchermain(testingprestoserverlauncherjava:73)```but this prevents to view full help message```$ presto-testing-server-launcher/target/presto-testing-server-launcher-0108-snapshot-executablejar --helpexception in thread ""main"" ioairliftcommandparseoptionmissingexception: required option --catalog is missing    at ioairliftcommandsinglecommandvalidate(singlecommandjava:106)    at ioairliftcommandsinglecommandparse(singlecommandjava:65)    at ioairliftcommandsinglecommandparse(singlecommandjava:56)    at comfacebookprestoservertestingtestingprestoserverlaunchermain(testingprestoserverlauncherjava:73)```am i missing something or is the ""required"" option in airline useless? || @pnowojski i will take a look at this || rebased please take a look when you find some time ||  ";;;;0;1;;
3144;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    16cb0383e37d26e1da4b6f7cfb7a9d21078d0912;;0;remove redundant cast in exceptions;;;;;;1;1;remove redundant cast in exceptions;
3146;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move type annotations immediately before the type they apply to  3145  relnotes=n/a  4270efbda891a947c1bfdb3e5707741a63b40551;;0;optimize create table as select;"1 plans for the queries which have static ""false"" predicate (eg `create table nation_copy as select * from nation where 01`) should be rewritten in a way that they will not produce any tablewriternodes2 in tablewriteroperator we should create page sink only when at least one row arrived now page sink is created in constructor it causes empty files creation for hive tables it will prevent from empty files creation in the cases when the output is empty but we cant determine it on a planning phase";i ran the query with presto version 0115 and verified that this does not result into creating empty files any more what remains to be done is the code optimization (ie taking care of the tablewriternodes that are being created) in light of the re-designing of the optimizer i assume that this will be taken care of soon? ||;;;;0;1;;
3146;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move type annotations immediately before the type they apply to  3145  relnotes=n/a  4270efbda891a947c1bfdb3e5707741a63b40551;;0;onsubscribecombinelatest multisourceproducer request method;why is the atomicbolean started get and compareandset methods both called in the if statement on line 114 of the onsubscribecombinelatest class?if (!startedget() && startedcompareandset(false true)) is compareandset alone not good enough?;"it is much faster that way because after the first call all subsequent calls would fail the cas and it costs 15-45 cycles whereas `get()` is likely to  cost 3-10 cycles only since `request` is called quite frequently the optimization helps greatly in reducing the overhead see the `atomicperf` benchmark that measures this effect however if said check is likely to get executed once the extra get actually makes it slightly slower (something to do with how cpus behave when they read-then-write the same memory location) therefore we dont call `get()` in for example subscription implementations || thank you for your clear explanation so when we expect get() to return true proportionally more often than false and request to be executed a reasonable number of times we can use this ""pattern"" to potentially improve performance i will run the benchmark to see the effects || ";;;;0;1;;
3146;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move type annotations immediately before the type they apply to  3145  relnotes=n/a  4270efbda891a947c1bfdb3e5707741a63b40551;;3145.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> move type annotations immediately before the type they applyto3145relnotesn/a4270efbda891a947c1bfdb3e5707741a63b40551;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  the cla for 4270efbda891a947c1bfdb3e5707741a63b40551 was signed in #3145 ||;put type annotations on types not declarations;"to improve readability the java language specification recommends that type annotations are written ""immediately before the type to which they apply"" (  this pull request makes guava conform to that style guideline";;1;0;move type annotations immediately before the type they applyto3145relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196531789;
3148;0;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> introduce strings.lenientformat()  copied from preconditions.format(). rewrote documentation but the method body remains unchanged.  relnotes=introduce  strings.lenientformat()   copied from  preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> branch eventbus  net  and escape for java 7  relnotes=n/a  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> swap preconditions and verify over to strings.lenientformat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> introduce stringslenientformat() copied from preconditionsformat() rewrote documentation but the method body remains unchangedrelnotesintroduce `stringslenientformat()` copied from `preconditionsformat()`a728cdc8f254ad9ff5049199e4cf9cee9a573270-------<p> branch eventbus net and escape for java 7relnotesn/aeeee4ba1b814f540dcb4516bf1079c3a83bc3e68-------<p> swap preconditions and verify over to stringslenientformat2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;;;;1;1;swap preconditions and verify over to stringslenientformatrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196692442;
3148;0;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> introduce strings.lenientformat()  copied from preconditions.format(). rewrote documentation but the method body remains unchanged.  relnotes=introduce  strings.lenientformat()   copied from  preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> branch eventbus  net  and escape for java 7  relnotes=n/a  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> swap preconditions and verify over to strings.lenientformat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;0;add getobject writeobject to block and blockbuilder;;looks good but make sure you address all the comments ||;;;;0;1;;
3148;0;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> introduce strings.lenientformat()  copied from preconditions.format(). rewrote documentation but the method body remains unchanged.  relnotes=introduce  strings.lenientformat()   copied from  preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> branch eventbus  net  and escape for java 7  relnotes=n/a  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> swap preconditions and verify over to strings.lenientformat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935;;0;leak of subscriber in case of long blocking execution after unsubscribe();"@nsk-mironov pointed me to the leak of the `subscriber` in case of long blocking call inside of the `observable`problem is that `subscriber` stores reference to the ""child"" `subscriber` in `final` field and after `unsubscribe()` this reference is not nulledimagine youre doing long blocking call in the `observable` for example io operation which can take seconds or even minutes and before it completes you decide to unsubscribe from it (for example user leaves the `screen` and we no longer want to keep references to this `screen` and leave it to the gc) result — memory leak of the `subscriber` which can also hold references to other huge objects such as `screen` (`activity` `fragment` in case of android) which will be alive until `observable` will be completed**simple test that shows the problem:**``` java@testpublic void shouldreleasereferencetothesubscriberafterunsubscribe() {    final countdownlatch countdownlatch  new countdownlatch(1)    subscriber<object> subscriber  new testsubscriber<object>()    subscription subscription  observable            create(new onsubscribe<object>() {                @override                public void call(subscriber<? super object> subscriber) {                    try {                        // it could be anything: long network request db query file read anything                        countdownlatchawait()                        subscriberoncompleted()                    } catch (interruptedexception e) {                        subscriberonerror(e)                    }                }            })            subscribeon(schedulersio())            subscribe(subscriber)    subscriptionunsubscribe()    // even after unsubscribe() there will be strong reference to the subscriber    // 1: subscriber line 39 final field ""subscriber""    // 2: safesubscriber line 62 final field ""actual""    // 3: operatorsubscribeon and our onsubscribe keeps strong reference to the 2 2 also keeps reference additional reference to the 1    countdownlatchcountdown()    // just to keep reference visible to the debugger after last real usage    subscriptiontostring()}```i can provide more information later its about 5 am i need to sleepto see references to the object in the intellij idea you need to debug the code do right click on the object and select ""show referring objects"" you will see something like this:<img width""579"" alt""screen shot 2015-08-11 at 04 17 32"" src""https://cloudentcom/assets/967132/9188015/ef7358e8-3fdf-11e5-8ad3-32cc3cfc8f46png"">";"holding it in a final reference is a tradeoff between overhead and retention a final field has the lowest overhead and since it isnt volatile the jit can do more optimizations with the chainmost blocking i/o i know of can be interrupted or at least closed asynchronously for example if you open a file you can wrap the `close()` call into a `subscription` and add it to the `subscriber`the test example might not run the observable body at all it really depends on how fast an `io()` thread can jump into life || > holding it in a final reference is a tradeoff between overhead and retention a final field has the lowest overhead and since it isnt volatile the jit can do more optimizations with the chainyep i understand this we need to measure performance difference between `final` and `non-final` reference to the `subscriber` in `subscribersubscriber` and `safesubscriberactual` to make a decision> most blocking i/o i know of can be interrupted or at least closed asynchronously for example if you open a file you can wrap the close() call into a subscription and add it to the subscriberits not a solution for most usages of rxjava that we have at the moment in our projects and i guess its not a solution for other apps teams and companies for example: application is doing slow network request wrapped into `observable` and we dont want to interrupt it if user leaves the screen we want to unsubscribe from it and keep its execution also there are a lot of places where nobody does interruption of blocking operations wrapped into the `observable`: 3rd-partly libraries that offers rx support such as retrofit user-defined `onsubscribe` and so oni see 3 possible solutions:1 make `subscribersubscriber` and  `safesubscriberactual` non-final and `null` them if `subscriber` unsubscribed looks like its best solution2 use `weakreference` in `subscribersubscriber` and `safesubscriberactual` but this variant is slower than first3 actual ""leakers"" — implementations of `observableonsubscribe` we can store reference to the `subsriber` as `weakreference` but its a solution because there a lot of operators and custom `onsubscribe` implementations in the user code> the test example might not run the observable body at all it really depends on how fast an io() thread can jump into lifethis test example is not an actual test (it never fails im not sure how to write test that fails if there are references to the `subscriber` after `unsubscribe()`) its just a sample code that can be easily debugged to see the problem || i assume this problem comes up with android development where you tend to leak the view or some other resource you could apply your suggestions to the reference to such resources instead of the `subscriber` || @akarnokd yes this problem is significant for android development and i guess its significant for any other client-side development with rxjavatypical usage of rxjava in android projects:``` javavoid onsendtweet() {  tweetsservice    sendtweet(""@akarnokd lets fix memory leak in rxjava pleeeeease"")    subscribeon(io())    observeon(mainthread())    subscribe(result -> {      someviewontweetsent() // we are leaking someview and instance of the root class    })}```to avoid this leak we need to create `static class` with `weakreference` for the `subscriber` each time we want to do something with rxjava its crazy :(``` javavoid onsendtweet() {  tweetsservice    sendtweet(""@akarnokd lets fix memory leak in rxjava pleeeeease"")    subscribeon(io())    observeon(mainthread())    subscribe(new sendtweetsubscriber(this))}static class sendtweetsubscriber extends subscriber<result> {  private final weakreference<myview> myviewweakreference  sendtweetsubscriber(myview myview) {    myviewweakreference  new weakreference<>(myview)  }  @override public void oncompleted() {    final myview myview  myviewweakreferenceget()    if (myview ! null) {      myviewsomeviewontweetsent()    }  }}```a **lot of boilerplate code** required each time to just subscribe to the operationi understand that performance is major part of rxjava but lets meause difference in the performance between `final` and `non-final` reference to the `subscriber` first? || alternative solution — `weaksubscriber` which stores reference to the original `subscriber` in the `weakreference` i guess it can be part of rxjava || @artem-zinnatullin `weaksubscriber` is a bad idea the original `subscriber` is an anonymous object in most cases and it will be almost instantly collected  gc` || the issue can be solved by using custom operator and actually ive already implemented one long time ago  || @nsk-mironov damn youre right || this is a lot of text to parse through so im going to try to simplify (and see if my understanding is correct): 1 you have a long-running `subscription` created within an `activity`2 you want the `subscription` to clear its references to the `activity` after it dies (to avoid memory leaks)3 you want the `subscription` to live on past the death (to avoid redoing work)as an alternative to clearing out the `subscription` why not use an `observable` that can be resubscribed to? eg use `cache()` then each `activity` using the `observable` can handle its own references (and properly unsubscribe/null out references after death) || > as an alternative to clearing out the `subscription` why not use an `observable` that can be resubscribed to? eg use `cache()` then each `activity` using the `observable` can handle its own references (and properly unsubscribe/null out references after death)ive also done this with subjects in the past which were owned by components that live outside of the view/activity lifecycle even using `cache()` is going to require some location independent of lifecycle from which the observable can be shared || i dont think that we should call this a leak this is a known behaviour we can just document it || here is another thought: if we will nullify the reference then we will lose the ability to resubscribe a second time because the chain is broken now || now a lot of projects are facing memory leaks by using rxjava due to the final references some people suggest to use clear method instead of unsubscribe and some others sugguest to null out the subscription can anybody give me a efficient answer? || depends on how you store the references if in `compositesubscription` clear it if in a local `subscription` field null it after calling `unsubscribe()` || im using compositesubscription with clear method but still gets memory leak || can you trace the source of the leak with leakcanary or similar tools? || ";;;;0;1;;
3149;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> continue migrating to type annotations for @nullable  relnotes=n/a  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include calipermain anymore.  such benchmarks should be run via the java_benchmarks generated binary directly.  github_breaking_changes=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> continue migrating to type annotations for @nullablerelnotesn/af642763e15c2814c2ed6208fb7302235d6518829-------<p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks dont need to (and shouldnt) include calipermain anymoresuch benchmarks should be run via the java_benchmarks generated binary directlygithub_breaking_changesn/a84d45bc4e1a9b2a87256e30374c517fed329dcae;;;;;1;1;remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks dont need to (and shouldnt) include calipermain anymoresuch benchmarks should be run via the java_benchmarks generated binary directlygithub_breaking_changesn/arelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid196848071;
3149;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> continue migrating to type annotations for @nullable  relnotes=n/a  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include calipermain anymore.  such benchmarks should be run via the java_benchmarks generated binary directly.  github_breaking_changes=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae;;0;hive test updates;;;;;;0;1;;
3149;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> continue migrating to type annotations for @nullable  relnotes=n/a  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include calipermain anymore.  such benchmarks should be run via the java_benchmarks generated binary directly.  github_breaking_changes=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae;;3022.0;scheduler shutdown capability;repost of #3022;we still need to decide on the reset vs shutdown distinction:  is your perspective? do you have a strong opinion one way or another? || with start/shutdown there is a clear intention to stop everybody with reset any running code could respawn the threads and the new threads will resume leaking i prefer start/shutdown || agree it will be great to have ability to stop schedulers and prevent new workers from scheduling for apps that run in servlets and other similar containers which can be stopped externally || im happy with the start/shutdown pair which seems to support my primary use cases:- resource release on webapp shutdown in container- resource release on completion of programs run by a framework that looked for unreleased threads (maven)- on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)thanks @akarnokd! || the `start`/`shutdown` semantic looks good to me more explicit best enforcement of shutdown   and good compatibility with items mentioned by @davidmoten (which are pretty much our use cases as well)    || ill following this thread to be notified when its merged thanks @akarnokd  || @benjchristensen do you consider we have consensus on naming? after that itd be showtime     ||   because so many customers from us run into this || @daschl   i would like a bit more context on what the goal is for the scheduler shutdown capability @davidmoten and any others please respond thanks > resource release on webapp shutdown in containerwhat resources exactly need to be freed? shutting down the schedulers would prevent new workers from being scheduled and would free up threads from the executor is this the desired behavior or is there some side effect that you are looking for?> resource release on completion of programs run by a framework that looked for unreleased threads (maven)could anyone name a framework thats impacted? is the concern that open threads keep the framework from properly terminating?> on ad-hoc basis ensuring schedulers are not running in the background on entry into a unit test (when running a suite)would the `testscheduler` solve this problem for you? this doesnt rely on singleton values and can be used to precisely test scheduling behavior  || @stealthcode i can answer the question 2 i hope it help you could anyone name a framework thats impacted? is the concern that open threads keep the framework from properly terminating?- couchbase java sdkcb sdk are not able to finish some of they own threads because it is referring rxcomputationthreadpool threads who cant be finishedyou can see more details about how this issue are affecting this framework here || @stealthcode i can give you the answer to your questions tooid like to use rxjava in the container (eg id like to use jersey rx client on tomcat) unfortunately it is impossible to shutdown _rxcomputationthreadpool-*_ threads and container has memory leaks that causes that rxjava is inapplicable for my purposes :( and in my case - regarding question 1 - yes shutting down all schedulers permanently is a desired behaviour and testscheduler is not a solution so im really looking forward to seeing this pr accepted and released! || @mjakubowski84 :+1:  similar case here || @mjakubowski84 understood regarding the testscheduler - this is meant for use in tests and highly recommended when it comes to a container you would definitely want to use a real scheduler so what i hear is that there is no desire to resume the scheduler once it is shut down my concern is that by offering a `schedulerlifecyclestart()` method we are inviting non-deterministic behavior in the case that someone wants to use this to teardown and then resume (in integration tests for example) would it be acceptable to remove the `start()` method from the public interface and rename `shutdown()` to `teardown()` to more accurately describe the intent? || i dont have strong opinion between shutdown/teardown`teardown` makes the intent clearer but `shutdown` is more idiomatic (in the context of java executor)otherwise the code lgtm  another thing if we want to be more java idiomatic maybe hiding the `start()` is the right thing to doit will also have the benefit of avoiding bug by misusage of the library (calling `start()` after a `shutdown()`) || i can make `schedulersstart()` package private so the tests can use it but i the `scheduler` implementations have to keep their start public || please do i believe that would be better || done || @akarnokd @stevegury folks do you think its possible to get this into 1015? || @akarnokd thanks  || i think this is fine  do you guys have a plan date to merge it? || @akarnokd i think its appropriate that you merge this pr since you are most familiar with this code if you think you are happy with it then feel free  || oh sorry didnt recount the number of likes merging || where can i get the latest build with this fix? maven central is still at 1014 || @chiangh123 you can clone the project and build it from master good luck :) || `rxjava` uses bintray for binaries and also publishes snapshots in jfrogs oss artifactory so you can add the following repository to your `pomxml`:``` xml<repository>  <snapshots />  <id>snapshots</id>  <name>libs-snapshot</name>  <url> that you should be able to depend on rxjava `1015-snapshot` ||;scheduler shutdown capability;this comes back from time to time (#1730): some containers when removing rxjava enabled applications expect it to shut down all its threads but by default computation threads cant be shut down manually and io threads take 1 minute to shut down on their own this pr adds the capability to make them shut down their worker threads more eagerly since such shutdown would be terminal and thus break any subsequent test a restart capability is requiredtherefore ive introduced the optional `schedulerlifecycle` interface which if implemented by a scheduler makes it eligible for the `schedulers` factory to trigger a shutdown or restart for all kinds of schedulersnaturally this implies some extra cost:- the underlying pool of the computation scheduler is no longer constant and involves a volatile get every time a worker is requested i havent benchmarked this but it just adds a cheap load on x86 and shouldnt be a performance hit- since we need to track all threadworkers of the io scheduler this involves a `compositesubscription` and the cost of starting new workers is increased by the synchronization and hashsetadd() operations however since starting a new thread in itself is somewhat expensive again this shouldnt be a performance hit although its hard to benchmark itin addition to support proper task rejection after the scheduler has shut down both scheduler types require a constant shutdown worker these workers are created at class load time and will spin up a thread for a short duration before they shut it down they dont affect performance wise the normal operations but the app startup time might get increased the tradeoff here is to save on a mandatory class cast whenever a worker is requested;it appears ive made a copy-paste error and missed the `rxscheduledexecutorpool` || i think this all looks good @abersnaze id appreciate your review of this as wellmy only real question is whether we should have `shutdown`/`start` or just `shutdown` or `reset` that shuts everything down and resets it to a state where it will automatically start up again if anything is used without needing an explicit `start`everything else seems to be internal changes and not public api || cool i was hoping for this feature!small question: would it make sense for the user to be able to control wether the threads execute in daemon mode when the user controls the lifecycle of the threads ? schedulerscomputation() threads are created in daemon mode by default || holding off as i want to finish discussing the shutdown/start vs reset api decision  || ill submit a new pr since eclipse rebase is [broken]( at the moment || @akarnokd why not to rebase from the terminal? i can help you with that :)had never trusted ides for such git actions… ||;1;0;hiding start() moved test to compensate;
3163;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add duration info to checkarugment() call in suppliers.memoizewithexpiration()  relnotes=add duration info to checkarugment() call in suppliers.memoizewithexpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> some changes to the guava readme.  move most information about the latest release to the release badge at the top  which now links to the github release page for the latest release and automatically displays the latest release version number.  note: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. there are ways we could deal with that  but i didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> fix  by implementing a proper collectspliterators.flatmapto{int long double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** reason for rollback ***  appears to tickle a j2cl bug.  *** original change description ***  fix  by implementing a proper collectspliterators.flatmapto{int long double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add duration info to checkarugment() call in suppliersmemoizewithexpiration()relnotesadd duration info to checkarugment() call in suppliersmemoizewithexpiration()3eadb52dcb210704fefa547853b17e7bfa57e06c-------<p> some changes to the guava readmemove most information about the latest release to the release badge at the top which now links to the github release page for the latest release and automatically displays the latest release version numbernote: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from there are ways we could deal with that but i didnt want to deal with that yet0f364779d314470c8855a6c0c805f858ed418c65-------<p> fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}9e6e1d02faa4ff07f2c5746a1902ae36cd54335b-------<p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b*** reason for rollback ***appears to tickle a j2cl bug*** original change description ***fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}***15db5b7f84531a19e7e0ab6f7932208e35b8b068;;;;;1;1;automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b*** reason for rollback ***appears to tickle a j2cl bug*** original change description ***fix  by implementing a proper collectspliteratorsflatmapto{intlongdouble}***-------------created by moe: https://githubcom/google/moemoe_migrated_revid198112871;
3163;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add duration info to checkarugment() call in suppliers.memoizewithexpiration()  relnotes=add duration info to checkarugment() call in suppliers.memoizewithexpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> some changes to the guava readme.  move most information about the latest release to the release badge at the top  which now links to the github release page for the latest release and automatically displays the latest release version number.  note: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. there are ways we could deal with that  but i didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> fix  by implementing a proper collectspliterators.flatmapto{int long double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** reason for rollback ***  appears to tickle a j2cl bug.  *** original change description ***  fix  by implementing a proper collectspliterators.flatmapto{int long double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068;;0;remove boxing for in lists of primitives;https://githubcom/facebook/presto/blob/master/presto-main/src/main/java/com/facebook/presto/sql/gen/incodegeneratorjava#l129;i would like to try this one || i think this can be closed || yes we have solved all the problems we know of related to in lists ||;;;;0;1;;
3163;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add duration info to checkarugment() call in suppliers.memoizewithexpiration()  relnotes=add duration info to checkarugment() call in suppliers.memoizewithexpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> some changes to the guava readme.  move most information about the latest release to the release badge at the top  which now links to the github release page for the latest release and automatically displays the latest release version number.  note: i probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. there are ways we could deal with that  but i didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> fix  by implementing a proper collectspliterators.flatmapto{int long double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** reason for rollback ***  appears to tickle a j2cl bug.  *** original change description ***  fix  by implementing a proper collectspliterators.flatmapto{int long double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068;;0;making a cross between defer() and just();that takes advantage of existing scalar synchronous optimizations;;;;;0;1;;
3170;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a grammar mistake  3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> in open-source guava  completely skip trying to discover pluggable patterncompiler implementations.  it s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  fixes   relnotes= base : fixed the  serviceconfigurationerror  that some users encountered when using guava as a jpms module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> suppress exceptions raised from argument s tostring methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4j.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  relnotes=fix a bug where cache.asmap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af;;0;fix typo in document: connectormetdata -> connectormetadata;;;;;;0;1;;
3170;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a grammar mistake  3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> in open-source guava  completely skip trying to discover pluggable patterncompiler implementations.  it s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  fixes   relnotes= base : fixed the  serviceconfigurationerror  that some users encountered when using guava as a jpms module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> suppress exceptions raised from argument s tostring methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4j.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  relnotes=fix a bug where cache.asmap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af;;0;version 2x maven central identification;the intent of 2x is to live side-by-side with 1x the package name (ioreactivex vs rx) is insufficient though as the maven central artifactid needs to also be different otherwise both cant be imported so instead of `rxjava` should it just be `rxjava2` like this?```compile ioreactivex 2xycompile ioreactivex 1xy```;"@rspieldenner rob i cant figure out what i need to change in the gradle properties to change the name from `rxjava` to `rxjava2` other than changing ""projectname"" which also changes everything elseif i change `projectname` i end up with this:```/io/reactivex/rxjava2/200-dp1-snapshot/rxjava2-200-dp1-snapshotjar```is that what it should be? or can it be this somehow with just rxjava in the filename?```/io/reactivex/rxjava2/200-dp1-snapshot/rxjava-200-dp1-snapshotjar``` || seems that the artifactid is most commonly or always also the prefix for the filename that suggests something like rxjava2 as above changing the complete name would also have the side-benefit of allowing two separate projects with different names in an ide at the same time: rxjava and rxjava2 however i winder about the name rxjava2 if we need to make a 3x but want to retain the same package names we would be stuck with the artifactid rxjava2 with version 3x is there a better name to represent this next version of rxjava?ioreactivex – rxjava2 – rxjava2-200jarioreactivex – rxjava2 – rxjava2-300jarioreactivex – rxjava – rxjava-200jar (i really wish this could work) || why wouldnt this ""ioreactivex – rxjava – rxjava-200jar"" work?on thu aug 20 2015 at 9:33 pm ben christensen notifications@githubcomwrote:> seems that the artifactid is most commonly or always also the prefix for> the filename that suggests something like rxjava2 as above changing the> complete name would also have the side-benefit of allowing two separate> projects with different names in an ide at the same time: rxjava and> rxjava2> > however i winder about the name rxjava2 if we need to make a 3x but> want to retain the same package names we would be stuck with the artifactid> rxjava2 with version 3x> > is there a better name to represent this next version of rxjava?> > ioreactivex – rxjava2 – rxjava2-200jar> ioreactivex – rxjava2 – rxjava2-300jar> > ioreactivex – rxjava – rxjava-200jar (i really wish this could work)> > —> reply to this email directly or view it on github>  || a separate project makes things much easier no need to switch back-and-forth between two branches we could call it `rsjava` but i can see the confusion due to the one letter change having just `rxjava-200` is also attractive how about copying the current 1x to a new project rxjava1 and have the 20 start in a cleared out rxjava project?a separate project has also the benefit of not being intermixed with issues and prs targeting the two versions || i think changing the group and artifact name are some of the worst thingsyou can do when you do that the 2 versions would no longer participate inconflict resolution so a gradle/maven/sbt etc resolve could pull in 2different versions of rxjava if you do anything besides moving toioreactivex 2xxon fri aug 21 2015 at 1:27 am david karnok notifications@githubcomwrote:> a separate project makes things much easier no need to switch> back-and-forth between two branches we could call it rsjava but i can> see the confusion due to the one letter change having just rxjava-200> is also attractive how about copying the current 1x to a new project> rxjava1 and have the 20 start in a cleared out rxjava project?> > —> reply to this email directly or view it on github>  || thats the point of the change they are able to operate next to each otheron fri aug 21 2015 10:04 am rob spieldenner notifications@githubcomwrote:> i think changing the group and artifact name are some of the worst things> you can do when you do that the 2 versions would no longer participate in> conflict resolution so a gradle/maven/sbt etc resolve could pull in 2> different versions of rxjava if you do anything besides moving to> ioreactivex 2xx> > on fri aug 21 2015 at 1:27 am david karnok notifications@githubcom> wrote:> > > a separate project makes things much easier no need to switch> > back-and-forth between two branches we could call it rsjava but i can> > see the confusion due to the one letter change having just rxjava-200> > is also attractive how about copying the current 1x to a new project> > rxjava1 and have the 20 start in a cleared out rxjava project?> > > > —> > reply to this email directly or view it on github> > < > > > —> reply to this email directly or view it on github>  || > could pull in 2 different versions of rxjava@rspieldenner as @jakewharton said thats the point otherwise as soon as v2 comes out it will break every application and basically be unusable without herculean efforts to upgrade everything from v1 to v2 - and that could only be possible if and once v2 accounts for every piece of functionality v1 had (not necessary a good thing to force upon v2)rxjava is not a library that hides well as it is intended to be exposed in the public apis and be used for composing libraries and systems together thus a breaking change would mean coordinating all systems and libraries to all upgrade at the same timefor example at netflix we would need to upgrade hystrix for the entire company at the same time not going to happen i consider this an even harder upgrade than guava (which typically take many months of effort to upgrade) since guava generally is not part of our public apis just internal implementation details an application could have the following dependencies rxjava:rxjava-1014ioreactivex rxjava2-200they would then use different types like this:rxobservable (from rxjava-1)ioreactivexobservable (from rxjava-2) (or whatever we call the package and class names) || @akarnokd im not a fan of splitting the projects we split the community lose the collaboration between 1x and 2x issues (which will be very common) will end up cross-posting things a lot and would complicate the branding the branding includes the github url contributors forks and stars those statistics (as superficial as it sounds) are meaningful they represent the community around the project community branding and marketing are honestly a massive part of a project like this the code itself honestly is the easiest part || @benjchristensen there is one alternative since you are also changing source package names which is to retain the same maven coordinate but also provide a shim library that bridges 2x functionality to the old package names  effectively anybody needing both 2x and 1x to coexist would just add an additional dependency on the shim  this is a little more in-your-face and encourages upgrades  think of the slf4j log4j shim as a not-entirely-similar case || @jkschneider can you give me an example of how that would work? that sounds intriguing  || i think i may understand is it as follows?we could double publish rxjava v1 like this:- ioreactivex 1xy- ioreactivex 1xy (or whatever name we want like rxjava-v1 or rxjava_1 etc)then we publish v2 as:- ioreactivex 2xyso if someone gets upgraded to v2 and it breaks their world and they need both to live together they would have dependencies like:- ioreactivex 1xy- ioreactivex 2xyso instead of us changing artifactids for new versions we actually add one for the old version? || @benjchristensen thats right -- the main benefit is a natural bias toward upgrading especially for first order dependents  depending on how easy it is to bridge new concepts to old it may also provide an easy way for you to deliver bugfixes to older uses of the api without working on two distinct core branches of rxjava itselfperhaps call it something like `ioreactivex:rxjava-compat:2xy` and have the compat librarys version track the version of rxjava itself  after all the compat shim and rxjava will be feature coupled || @jkschneider i think its possible that someone uses both a library a that depends on ioreactivex 1xy and a library b that depends on ioreactivex 2xy then the user needs to fix the dependency tree manually since maven/gradle only selects one version of `ioreactivex:rxjava` || @jkschneider @benjchristensen @zsxwing that could indeed be the case for instance if said user depends on the couchbase sdk (which in turn depends on `rxjava`) || @simonbasle @zsxwing while conflict resolution would evict ioreactivex 1xy adding the shim would make any dependency that requires rxjava 1x happy just not with the exact same binary it had before || > @simonbasle @zsxwing while conflict resolution would evict ioreactivex 1xy adding the shim would make any dependency that requires rxjava 1x happy just not with the exact same binary it had beforei see however my concern is that the user has to fix it manually (excluding incompatible dependency and adding new dependency) sometimes the dependency tree is very complicated and its hard for the user to figure out how to fix it eg i remember that i spent several hours on understanding the slf4j log4j shim things when i encountered the conflicts at the first time :( || @zsxwing that is a legitimate concern and the principle tradeoff || talked with @rspieldenner about this today to get some guidance we can make rxjava v1 double-publish artifacts for us to solve thisthe way it would work is:##### rxjava v2 only``` groovycompile ioreactivex 2xy```##### rxjava v1 only``` groovycompile ioreactivex 1xy```##### rxjava v1 and v2 togetherif someone needs both v2 would override v1 and transitive dependencies would break they would then manually opt-in to having rxjava_v1 included and theyll end up with both jars``` groovycompile ioreactivex 1xycompile ioreactivex 2xy```##### rxjava v2 and v3 togethereventually (hopefully never or at least many years from now) if we need to do the same for v2/v3 we could add an artifact for v2 (and yet another set of package names for 3x):``` groovycompile ioreactivex 2xycompile ioreactivex 3xy```---the change from v1 to v2 is too significant for a thin shim virtually every single class in the entire project is going to be touched in the move from v1 to v2 thus we really do want to just provide all v1 byte code untouched with a different artifact so both can live side-by-side we also intend on v1 living for a long time (at least while android doesnt support java 8) though hope that server-side projects will upgrade over a 12-18 month period from v1 to v2 so that most server environments would only need to be importing v2 so unless there is dispute with what is stated above its time to debate the artifactid i suggest `rxjava_v1` || :+1: for this solution (great one):+1: for the name `rxjava_v1` (dont have a strong opinion on any other name anyway) || @benjchristensen :+1: for your proposal this is just a tradeoff thanks for explaining why you made this choice || as rxjava 2 has yet to be released i would like to propose `ioreactivexrxjava2:rxjava` as the maven coordinates for the 20 major version release the details on both group id naming and artifact id naming are encapsulated in [my blog post]( comments from this issue are addressed in the post:> the package name (ioreactivex vs rx) is insufficient though as the maven central artifactid needs to also be different otherwise both cant be importedcovered in the post> is there a better name to represent this next version of rxjava?covered in the post group id changes is the simple way to break this apart> they would then manually opt-in to having rxjava_v1 included and theyll end up with both jarsand> eventually (hopefully never or at least many years from now) if we need to do the same for v2/v3 we could add an artifact for v2 (and yet another set of package names for 3x):this solution plays to the always-upgrading nature of consumers and some libraries while it represents a non-zero effort on consumers part the naive remain blissfully unaware and allow natural progression of these apis to take place || jake thanks for the followup on this im good with accepting the artifact name you propose  || :+1: to be able to import them the same time || jakes suggestion for `ioreactivexrxjava2:rxjava` sounds reasonable for me it also allows upgrading the neighboring libraries and have all of 2x under the same groupid pattern (`ioreactivexrxjava2:rxjava-math`)unfortunately im not sure where this new group id could be applied (hidden inside the nebula plugin?) || @akarnokd yeah looks like its in [nebula rxjava plugin]( but you can override it inside rxjavas `buildgradle` add `group  ioreactivexrxjava2` when i run `/gradlew publishtomavenlocal` it publishes it to overridden group || 👍 for jakes proposal about `groupid` change to `ioreactivexrxjava2` || might be a good time to shed some nebula? rxandroid got rid of all of themand never looked backon fri jun 17 2016 8:56 am artem zinnatullin notifications@githubcomwrote:> 👍 for jakes proposal about groupid change to ioreactivexrxjava2> > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || sounds good @jakewharton  was there something in rxandroid regarding nebula that had to be replaced (such as travis-maven publish on release builds)? || yes the challenging part was retaining the part which does the releasebuilds @dlew helped set it up and while its not pretty it doesnt feelany less brittle than nebula already wason fri jun 17 2016 at 11:39 am david karnok notifications@githubcomwrote:> sounds good @jakewharton   was there> something in rxandroid regarding nebula that had to be replaced (such as> travis-maven publish on release builds)?> > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || great not sure if we can actually test it before rc1 (release rc0 as is at the time of testing?) || 👍 for the groupid change@akarnokd i can try to find someone from our tools team to help with the migration out of nebula || @stevegury any help in this regard is appreciated  changing the group id while still using nebula does work for the snapshot release:  discussion about removing the plugin continues in #4032 || ";;;;0;1;;
3170;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix a grammar mistake  3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> in open-source guava  completely skip trying to discover pluggable patterncompiler implementations.  it s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  fixes   relnotes= base : fixed the  serviceconfigurationerror  that some users encountered when using guava as a jpms module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> suppress exceptions raised from argument s tostring methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4j.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  relnotes=fix a bug where cache.asmap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af;;3161.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix a grammar mistake3161d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8-------<p> in open-source guava completely skip trying to discover pluggable patterncompiler implementationsits never been possible to create such implementations externally anyway and users are now seeing problems running the useless discovery code under the module systemfixes   the `serviceconfigurationerror` that some users encountered when using guava as a jpms module0954b82dc4e3fe400550fcba78ae2878a8604c3b-------<p> suppress exceptions raised from arguments tostring methods during lenient formatting - take 260c6e22c0ba9c7b305c787bd72e0fd4f1f005afc-------<p> create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and icu4je0eae79a5ba94850ca447116cd033447240d489e-------<p> fix b/80241237 to correctly *not* change segment weight nor report an eviction when a compute() call does not change the present valuerelnotesfix a bug where cacheasmapcompute* methods could cause nonsensical weights to be stored breaking cache eviction21b52f64ceda0119daec68f6be2712bee55f02af;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;fix a grammar mistake;fix a grammar mistake;"    @aywwwww to make sure that your commit is signed with the email address you use for logging into github try following [these instructions]( and then running `git commit --amend --reset-author` before force-pushing your ""fix a grammar mistake"" commit again :) ||  @jbduncan i googled and solved it  thanks anyway || @aywwwww cool glad you managed to find your own way of solving it :) || ";1;0;fix b/80241237 to correctly *not* change segment weight nor report an eviction when a compute() call does not change the present valuerelnotesfix a bug where cacheasmapcompute* methods could cause nonsensical weights to be stored breaking cache eviction-------------created by moe: https://githubcom/google/moemoe_migrated_revid198618238;
3171;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a direct dependency from guava-gwt to checker-qual.  the gwt sources (specifically  gwtserializationdependencies) use @nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  however  what actually prompted this is a strange behavior in compile-testing  which truth uses. this cl should help  though it might not be a fully solution.   5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> fix mangled javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a direct dependency from guava-gwt to checker-qualthe gwt sources (specifically gwtserializationdependencies) use @nullable directly so we shouldnt rely on relying on it indirectly through guava-jrehowever what actually prompted this is a strange behavior in compile-testing which truth uses this cl should help though it might not be a fully solution fix mangled javadocs5928882017809a1d0e57bd1b55dd6abdcf5604d0;;;;;1;1;fix mangled javadocsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid198884357;
3171;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a direct dependency from guava-gwt to checker-qual.  the gwt sources (specifically  gwtserializationdependencies) use @nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  however  what actually prompted this is a strange behavior in compile-testing  which truth uses. this cl should help  though it might not be a fully solution.   5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> fix mangled javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0;;0;bad error message when casting to parametric type without type parameters;```select cast(null as map)```fails with:```query 20150625_162057_09252_bhbmd failed: expected two typesjavalangillegalargumentexception: expected two types    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:122)    at comfacebookprestotypemapparametrictypecreatetype(mapparametrictypejava:41)    at comfacebookprestotypemapparametrictypecreatetype(mapparametrictypejava:23)    at comfacebookprestotypetyperegistryinstantiateparametrictype(typeregistryjava:136)    at comfacebookprestotypetyperegistrygettype(typeregistryjava:110)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitcast(expressionanalyzerjava:726)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitcast(expressionanalyzerjava:206)    at comfacebookprestosqltreecastaccept(castjava:61)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyze(expressionanalyzerjava:179)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyzeexpression(expressionanalyzerjava:1018)    at comfacebookprestosqlanalyzertupleanalyzeranalyzeexpression(tupleanalyzerjava:1106)    at comfacebookprestosqlanalyzertupleanalyzeranalyzeselect(tupleanalyzerjava:913)    at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:353)    at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:135)    at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:520)    at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:115)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzeranalyzeranalyze(analyzerjava:52)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:252)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:238)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:202)    at comfacebookprestoexecutionqueuedexecutionlambda$start$130(queuedexecutionjava:68)    at comfacebookprestoexecutionqueuedexecution$$lambda$237/901458406run(unknown source)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```;oh sorry @zhenxiao didnt see that you were already working on this one i think the right way to fix this is  || @cberner sure i will close the pr ||;;;;0;1;;
3171;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a direct dependency from guava-gwt to checker-qual.  the gwt sources (specifically  gwtserializationdependencies) use @nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  however  what actually prompted this is a strange behavior in compile-testing  which truth uses. this cl should help  though it might not be a fully solution.   5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> fix mangled javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0;;3168.0;scan backpressure and first emission fix;3168if there is no initial value there is no need to manipulate the request amountsif there is an initial value we must do a full emitter-loop with value queueing because now the downstream request can race with the first onnext or the setting of the upstream producer the downside is the increased overhead which should be reduced when the spsc unbounded queues get merged; ;behaviorsubjectscan not picking up initial value;"i would expect this:```final observable<void> ob  behaviorsubjectcreate()obscan(0 (accum x) -> 123)  subscribe(x -> {    timberd(""hit!"")  })```to emit a value (and indeed it does in the equivalent rxjs code)is this a bug?";this is odd the initial value is emitted just before the first accumulated value or a completion event || fix available via #3171 ||;1;0;scan backpressure and first emission fix;
3179;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix nonpublic identifiers and documentation that use ""whitelist"" or ""blacklist"" to use less problematic terms8a21b1c960067ef89e729eeeaeeb3e224692ee37";;;;;1;1;"fix nonpublic identifiers and documentation that use ""whitelist"" or ""blacklist"" to use less problematic termsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid199834981";
3179;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37;;0;add rand(seed) function;add a random function that accepts the given seed to produce deterministic random values for reproducibility of the generates random values randcache provides a session-local `random` object initialized with the seed valuea question:this rand(seed) is not 100% deterministic depending on the number of tasks in a query that executes this function so should i use `deterministic  false` annotation?;how do you expect this to work?  specifically what happens with parallel readers on distributed machines?  the engine doesnt provide any guarantees on the order in which rows are processed || this function is definitely non-deterministic because it is not directly dependent on its inputs (it has state preserved across invocations) so it wouldnt be safe to constant fold itcan you explain the motivation for this? i dont see how it is possible to use in any reliable way this could be useful in something like mysql where you can guarantee a specific query plan (and they do similar hacky things with variables that you can set as part of a query expression) and anything in presto that seems to work that way could change in a future release (or based on parallelism config flags optimizers etc) || stable sampling from a data set is one of the target applications i have in mind that is useful for preparing training data set for machine learning makoto yui @myui a developer of hivemall (  machine learning algorithm collections for hive) may be able to show other usages my expectation is if the input data (training data) is stable the same set of splits will be generated and if we can make the number of tasks stable (eg via `min-candidates` parameter) this `rand(seed)` will give the same set of random numbers every time || apache hive has `rand(seed)` to produce a stable random number for each task am assuming the following usage:``` sqlcreate table src_rnd asselect rand(seed) as rnd * from src -- assume src produces same splitscreate table train asselect * from src_rnd where rnd < 07create table test asselect * from src_rnd where rnd > 07```the `create table src_rnd` is idempotent as far as `src` and its splits do not change the train/test table is reproducible no matter how each split is allocated to a task executor because each task executor uses a stable seed || i dont think the engine can the kind of ordering and only-once-per-row guarantees that this feature would require to work correctlyif you want a stable random across executions i can thing of a couple of ways to do this  1 persistent random: when you insert your data you could add a random column to the data which would always be stable 2 hash row: you could hash the full row data and use that to select  this is cpu intensive and if you had duplicates you would get the full set of duplicates3 hash row physical position: modify hive connector to contain a hidden column for the filename and row position then hash these values4 window random: write a new window function that generates a random number for each row  the window operator will establish an ordering and can partition data so you still get parallelism  for the seed you would use a hash of the the user supplied seed and the partition values @cberner might have some more ideas || thats all the ideas i can think of at the moment (1) seems like the best if this is for one-off cases if you need to do this a lot then option (3) seems pretty reasonable to me and it could be useful for other things too || hash-based option 2 will not yield random values following the uniform distribution and can be problematic when evaluating the same machine learning algorithm by changing the seed value having a hidden column (option 3) for the file name would be useful to generate file name-unique random objects initialized with the given seed could you suggest how to modify presto to allow passing such information (eg file name) to udfs?  @xerial for option 2 you would initialize the hash function using the seed  of course this assumes you have a good hash functionfor option 3 i would add hidden columns for both the file name and the file row number  as for how to use a hidden column they already work in presto as a normal column  for example the tpch connector has hidden column `row_number` added to every table ( row_number nationkey name from tpchtinynation row_number | nationkey |      name      ------------+-----------+----------------          0 |         0 | algeria                  1 |         1 | argentina                2 |         2 | brazil                   3 |         3 | canada         ``` || initializing with a seed in a distributed system is also not guaranteed to produce a good distribution of values since all workers will start with the same seed youll end up with samples that are not truly statistically independentto do so itd be necessary to implement something like java 8s `splittablerandom` where the main instance with the seed is created at planning time and each worker is assigned an instance derived from it || @martint splittablerandom approach also looks promising if we can produce stable assignments of the random objects in order to do so we may need to use hidden metadata (eg file name row number) as @dain suggested || im closing this pr since we dont want to add this function please feel free to create a new issue and we can discuss concrete alternatives || ok thanks for the discussion  ||;;;;0;1;;
3179;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37;;0;observable nullpointerexception;there is an error which makes me so puzzled，and here is the code:```    protected void subscribetodatastoreinternal() {        observable<photo> observable  preprocess(                observable<discoverpage>concat(trdiscoverfinddiscoverpage() request()))        if (null ! observable&&null!msubscriber) {            observablesubscribe(                    msubscriber::onrefreshnext                    msubscriber::onerror                    msubscriber::oncompleted)        }    }```the exception as follow:    javalangnullpointerexception            discoverviewmodelsubscribetodatastoreinternal(discoverviewmodeljava:39)    msubscriber::onrefreshnext;is msubscriber set to null somewhere? || thanksi fingered out! msubscriber is null! ||;;;;0;1;;
3191;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate ;;;;1;1;omit some unnecessary parensrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid201703715;
3191;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;query stalls in presto 0108;although i couldnt find the exact cause but some queries started to stall in presto 0108 for example the following queries stalled:```select * from nasdaq tablesample bernoulli (1)select count(l_linenumber) from tpch_s1lineitem tablesample bernoulli(1)```this is not specific to tablesample operation since the other type of queries (eg joins) also stalls this bug might be related to our connector implementation but it looks like when skipping entries this stall happens please let me if you know anything on this problem thanks;"i also encountered the similar problem try to use presto 0108 + jdk180_45 + hdp 21 + centos 65i use hive connectorsome queries dont return at presto 0108 but return at presto 0107 could you look in the web ui and tell me what the status of the query is? in particular it would be helpful to know:- does the ui report it as blocked?- what state are the different stages in?- for stages that are still running what state are the tasks in? || also when you say ""stall"" do you mean that it never finishes or does it just take a long time? || @cberner - yes it shows blocked at the root stage and the child stages are in running state-  stall` i mean it never finishes without any progress in processed rows (eg `outputpositions` count) || i see what state are the tasks in the child stage in? || all of the child tasks are in running state  im going to check the heap dump or thread stacks (/v1/thread) to see where the query is blocked  || im seeing an issue where stages never get any tasks scheduled might be the same problem did not happen with 0107it occurred twice after restart where we sent ~10 queries at all once all were stuck the same way and never recovered no other queries running subsequent queries were fine || @xerial also take a look at the task info (json document) which you can find by clicking on the link from the task on the query page if you dont mind sharing the info in there it would be helpful to debugging too || is this helpful?when restarting a presto cluster execute `show tables` it also never finished and the web page looks like below:![timline 20150630140035]( || my case is the following query is the following```with  as     (    select           from        presto_view    where             group by             )select        sum()        over(            partition by                        ) as from    ``` || @cberner sure after excluding some private information ill share it || here is the json data of the tasks of a stalled query:  looks like the child tasks already finished processing the data but the parent task is still waiting the result  || @xerial it looks like the problem is that the tablescan is hung/slow in your screen shot it shows that none of the splits have finished running and from the json stats it looks like none of the tasks have produced output for example `20150630_071237_06262_zieat10` shows 0 `outputpositions` can you try running jstack on one of your workers to see if the tablescan thread is stuck? || @yuananf we have seen that one internally  there is some bug where a stage fails immediately during setup but the query misses the notification@xerial if you open the info for one of the table scan tasks (click the task id in the table) then look for ""getoutputcalls"" wait a minute and check it again  the number should increment each time the output method on the operator is called  there are stats for each of the main methods of an operator so using this technique you can see if the operators are still being invoked  if they are not it is likely all of the worker threads are hung || here is the jstack result of presto 0108 worker in my case || @dain i think this will fix the issue with stages that fail during setup not failing the query:  doesnt explain some of the other hangs though || we found this bug  which would cause stalls for joins not sure about the table sample ones though || this might be related to our connector implementation let me close this ticket for now if we can find another cause we will open a new ticket  ";;;;0;1;;
3191;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;operators map and flatmap;with all `flatmap` `merge` and `mergedelayerror` overloads;;;;;1;1;operators map and flatmap;
3197;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;so theres good news and bad news  the good news is that everyone that needs to sign a cla (the pull request submitter and all commit authors) have done so  everything is all good there  the bad news is that it appears that one or more commits were authored or co-authored by someone other than the pull request submitter  we need to confirm that all authors are ok with their commits being contributed to this project  please have them confirm that here in the pull request*note to project maintainer: this is a terminal state meaning the `cla/google` commit status will not change from this state its up to you to confirm consent of the commit author(s) and merge this pull request when appropriate  before merging this can we update 893d350 to correctly reflect @hadrienk as the author?i can take care of this if you want @cgdecker  ||  the author field and force pushed the updated commits ||;;;;1;1;change filesmap(file mapmode) to get the size of the file from the channel just before mapping rather than before opening the filesee  by moe: https://githubcom/google/moemoe_migrated_revid202535742;
3197;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;fix cast between json and varchar;"#### whatprovide a way to convert between json values and other sql types eg json number and `bigint`  json string and `varchar`  json array of numbers and `array<bigint>`  json object of numbers and `map<varchar bigint>` etctoday we allow casts between json and varchar it returns json text when casting to varchar and it treats varchar as json text when casting to json this is not what we wantfor clarity in demonstrating the issue well use explicit `varchar` literal (eg `varchar a` which is equivalent to `a`) well also use `json` literal- `cast(varchar a as json)` should return `json ""a""` (a json document that contains a string a) it fails today- `cast(varchar ""a"" as json)` should return `json ""\""a\""""` (a json document that contains a 3-character string ""a"") it returns `json ""a""` today- `cast(json ""a"" as varchar)` should return `a` it returns `varchar ""a""` today- `cast(x as varchar)` where x is `json a` should fail it returns `varchar a` today- `cast(json [1 2] as varchar)` should fail it returns `varchar [12]` today2 functions (names may be `json_format` and `json_parse`) will be added that behaves exactly the same as todays cast between json and varchar#### whyif we keep the current cast behavior between `json` and `varchar` but add support for conversions between `json` and `bigint` it will be bad because the semantics of converting between `json` and other types become inconsistentif we add support between `json` and `array` it will become even worse conversion from `json` to `array<varchar>` should give the same result as converting `json` to `array<json>` and then to `array<varchar>` now conversion between `array<json>` to `array<varchar>` must be equivalent to applying json to varchar conversion on every element of the array as a result conversion between `json` and `array<bigint>` will mean different things as conversion between `json` and `array<varchar>` this makes the inconsistency even worse consider `map<varchar bigint>`as a result we cant add cast between `json` and other types unless we change the behavior of casting between `json` and `varchar`alternatively we may implement the above new behavior as new functions but we will run into exponential explosion problems for the possible types we want to support if we implement them as functionsthe only option we have left is change the behavior of casting between `json` and `varchar`#### compatibilitythis change will most likely break every existing query that has an explicit cast between json and varchar";;;;;0;1;;
3197;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;operator tolist and tosortedlist;`tosortedlist` is implemented with `tolist()map()`;;;;;1;1;operator tolist and tosortedlist;
3204;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for sec-metadata header.    relnotes=adds constants for sec-metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> add @nullable to abstractsequentialiterator s computenext() method return value so that  doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> internally  use patterncompiler from doubles.tryparse.  (redo of cl 202132002  which was partially rolled back in cl 202139691.)  this time including tests to cover the re2j approach. to avoid the errors of last time  i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent  see the pattern javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adds constants for sec-metadata header constants for sec-metadata header2035a276dcecb354dcf68b41f11480786cdeb109-------<p> update public suffix datathis copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: add @nullable to abstractsequentialiterators computenext() method return value so that  doesnt complaine59ed3d738accabf895ede47ae07b9cf320b6c8a-------<p> internally use patterncompiler from doublestryparse(redo of cl 202132002 which was partially rolled back in cl 202139691)this time including tests to cover the re2j approachto avoid the errors of last time i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent see the pattern javadoc)e51afe5a60f68c169e1aec6d30112bb77e423fdd;;;;;1;1;internally use patterncompiler from doublestryparse(redo of cl 202132002 which was partially rolled back in cl 202139691)this time including tests to cover the re2j approachto avoid the errors of last time i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent see the pattern javadoc)-------------created by moe: https://githubcom/google/moemoe_migrated_revid204301262;
3204;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for sec-metadata header.    relnotes=adds constants for sec-metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> add @nullable to abstractsequentialiterator s computenext() method return value so that  doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> internally  use patterncompiler from doubles.tryparse.  (redo of cl 202132002  which was partially rolled back in cl 202139691.)  this time including tests to cover the re2j approach. to avoid the errors of last time  i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent  see the pattern javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd;;0;fix missed failed signal;queries with a stage that fails while the query is still in the startingstate will never complete due to the transition being ignored;;;;;0;1;;
3204;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for sec-metadata header.    relnotes=adds constants for sec-metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> add @nullable to abstractsequentialiterator s computenext() method return value so that  doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> internally  use patterncompiler from doubles.tryparse.  (redo of cl 202132002  which was partially rolled back in cl 202139691.)  this time including tests to cover the re2j approach. to avoid the errors of last time  i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent  see the pattern javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd;;0;operator concatmap and related convenience methods;this includes- concatmap- concat- startwith- endwith- concatwith- mergewith (via merge);;;;;1;1;operator concatmap and related convenience methods;
3205;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change hostandport equals() and hashcode() to stop depending on whether brackets were included  now they depend only on host and port.  useful for storing ipv6 addresses in set and map  relnotes= net.hostandport : changed equals() and hashcode() to stop depending on whether brackets were included. now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change hostandport equals() and hashcode() to stop depending on whether brackets were includednow they depend only on host and portuseful for storing ipv6 addresses in set and maprelnotes`nethostandport`: changed equals() and hashcode() to stop depending on whether brackets were included now they depend only on host and port6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;;;;1;1;change hostandport equals() and hashcode() to stop depending on whether brackets were includednow they depend only on host and portuseful for storing ipv6 addresses in set and maprelnotes`nethostandport`: changed equals() and hashcode() to stop depending on whether brackets were included now they depend only on host and port-------------created by moe: https://githubcom/google/moemoe_migrated_revid204509648;
3205;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change hostandport equals() and hashcode() to stop depending on whether brackets were included  now they depend only on host and port.  useful for storing ipv6 addresses in set and map  relnotes= net.hostandport : changed equals() and hashcode() to stop depending on whether brackets were included. now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;0;add release notes for 0109;;;;;;0;1;;
3205;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change hostandport equals() and hashcode() to stop depending on whether brackets were included  now they depend only on host and port.  useful for storing ipv6 addresses in set and map  relnotes= net.hostandport : changed equals() and hashcode() to stop depending on whether brackets were included. now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0;;0;lambda-based subscribe and lifecycle tracking methods;- foreachwhile that allows stopping the stream from within the onnext callback by returning falsethe lambda subscribe()s return a disposable so they can be asynchronously cancelled;;;;;1;1;lambda-based subscription and lifecycle tracking methods;
3218;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix initialcapacity calculation for a maximum size over integer.max_value.  noticed during discussion of   813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> remove futures methods that implicitly use directexecutor().  relnotes=removed the  futures  methods that implicitly use  directexecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> reduce proguard retained code from usages of multimaps.synchronizedxyzmultimap.  effects on multimapsynchronizedproguard: jar bytes: 148295 bytes => 50236 bytes (-66%) classes: 67 classes => 28 classes (-58%) methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> remove deprecated charmatcher constants.  relnotes=removed deprecated  public static  fields from  charmatcher . use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> move executionsequencer into guava as @beta.  relnotes=added  executionsequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** original change description ***  move executionsequencer into guava as @beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix initialcapacity calculation for a maximum size over integermax_valuenoticed during discussion of  remove futures methods that implicitly use directexecutor()relnotesremoved the `futures` methods that implicitly use `directexecutor()`52fa8683024d7093bb90df2789ac0a8ebf5aea04-------<p> reduce proguard retained code from usages of multimapssynchronizedxyzmultimapeffects on multimapsynchronizedproguard:jar bytes: 148295 bytes > 50236 bytes (-66%)classes: 67 classes > 28 classes (-58%)methods: 458 methods > 155 methods (-66%)b42b6d20bb20ff239a361d990fc3f42048a4d217-------<p> remove deprecated charmatcher constantsrelnotesremoved deprecated `public static` fields from `charmatcher` use the equivalent `public static` methods instead2786afac3ef177232a2e543703c97d42a277c2d8-------<p> move executionsequencer into guava as @betarelnotesadded `executionsequencer` a new utility to run a series of asynchronous operations serially3b25fe7882459991f2336c5021c46f0c374a152b-------<p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918*** original change description ***move executionsequencer into guava as @beta***35aa102cfe256bdf8a23aa89d259ba4916f50c62;;;;;1;1;automated rollback of c7aa4671cd70853515171333c823e3cdece92918*** original change description ***move executionsequencer into guava as @beta***-------------created by moe: https://githubcom/google/moemoe_migrated_revid206620316;
3218;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix initialcapacity calculation for a maximum size over integer.max_value.  noticed during discussion of   813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> remove futures methods that implicitly use directexecutor().  relnotes=removed the  futures  methods that implicitly use  directexecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> reduce proguard retained code from usages of multimaps.synchronizedxyzmultimap.  effects on multimapsynchronizedproguard: jar bytes: 148295 bytes => 50236 bytes (-66%) classes: 67 classes => 28 classes (-58%) methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> remove deprecated charmatcher constants.  relnotes=removed deprecated  public static  fields from  charmatcher . use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> move executionsequencer into guava as @beta.  relnotes=added  executionsequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** original change description ***  move executionsequencer into guava as @beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62;;0;order by desc on a column containing nulls values returns wrong results;the default null ordering for desc should be nulls first but it is doing nulls lastpostgres:```tpch# select * from (select cast(null as bigint) union all select 1) t order by 1 desc int8 ------    1(2 rows)```presto:```presto:tiny> select * from (select cast(null as bigint) union all select 1) t order by 1 desc _col0 -------     1  null  (2 rows)```;i just saw in another bug that null ordering may be implementation-defined if its not specified if that is the case and this is intentional i can close but it might be nice to match behavior of other dbs if there is some consistency that is  this is actually intentional it is legal per the sql specification for `<sort specification list>`:> if `<null ordering>` is not specified then an implementation-defined `<null ordering>` is implicit the implementation-defined default for `<null ordering>` shall not depend on the context outside of `<sort specification list>`we always default to `nulls last` because users generally do not want to see nulls the most common use of `order by` in presto is with `limit` so having nulls first would often result in a result set with all nulls which is almost never what the user wantsbut we definitely should document this behavior || the `<null ordering>` specification only arrived in sql:2003 and like many things in the sql specification im guessing different existing implementations had varying behavior though it appears mysql postgresql and oracle all share the same default sql server appears to always do nulls first and does not support explicit null ordering thus it seems we are the opposite of microsoft :) ||;;;;0;1;;
3218;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix initialcapacity calculation for a maximum size over integer.max_value.  noticed during discussion of   813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> remove futures methods that implicitly use directexecutor().  relnotes=removed the  futures  methods that implicitly use  directexecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> reduce proguard retained code from usages of multimaps.synchronizedxyzmultimap.  effects on multimapsynchronizedproguard: jar bytes: 148295 bytes => 50236 bytes (-66%) classes: 67 classes => 28 classes (-58%) methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> remove deprecated charmatcher constants.  relnotes=removed deprecated  public static  fields from  charmatcher . use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> move executionsequencer into guava as @beta.  relnotes=added  executionsequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** original change description ***  move executionsequencer into guava as @beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62;;0;20 testsubscriberassertvalue should not assert completion;"right now testsubscriberassertvalue has this:``` java    public final void assertvalue(t value) {        string prefix  """"        if (donegetcount() ! 0) {            prefix  ""subscriber still running! ""        }```it should not assert completion as that means values cant progressively be asserted while synchronously delivering values prior to completion same for the other assertvalue methods";it doesnt assert it just prefixes the error message to let the dev know if the subscriber hung such ability in 1x could have saved me hours with some bugs ||;;;;0;1;;
3226;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a note about the relative ordering of afterdone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> insulate abstractfuture from futures.java/moreexecutors.java dependency  made directexecutor package-private so that we can refer to it directly in abstractfuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> remove reference to strings.isnullorempty from abstractfuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a note about the relative ordering of afterdone and listener execution25ab9de6336c2040a36aff7bed96b20fc5c30111-------<p> insulate abstractfuture from futuresjava/moreexecutorsjava dependencymade directexecutor package-private so that we can refer to it directly in abstractfuture660d9154e553b97df367979ccfe19971c9154bff-------<p> remove reference to stringsisnullorempty from abstractfuturec72e9c73cf468c2c55092912a0178a668f975e2e-------<p> introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture227d67fc6600a6041a3a3881f1e1b6652d3cf75c-------<p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;;;;1;1;automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***-------------created by moe: https://githubcom/google/moemoe_migrated_revid207326809;
3226;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a note about the relative ordering of afterdone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> insulate abstractfuture from futures.java/moreexecutors.java dependency  made directexecutor package-private so that we can refer to it directly in abstractfuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> remove reference to strings.isnullorempty from abstractfuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;0;change getjavatype of array map and row to block;depends on ~~#2912~~;dependency  had some comments i only skimmed through the rest of it so assign back to me when youre done with these || addressed comments and rebased (mainly histogram) || general comment: check all the places your newing up `blockbuilder` s and see if you can replace them with `typecreateblockbuilder` itll make it easier if we ever change one of these (like moving map to a different native container type) || back to you for some comments || (add them as another fixup commit if you can) || addressed all but two comments:- return `t` in `recordcursorgetobject()`- change `singleobjectvector` to `singleblockbuildervector` || check the integration tests we talked about and make sure to squash the commits otherwise looks good :) oh and wait for the release too ||;;;;0;1;;
3226;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a note about the relative ordering of afterdone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> insulate abstractfuture from futures.java/moreexecutors.java dependency  made directexecutor package-private so that we can refer to it directly in abstractfuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> remove reference to strings.isnullorempty from abstractfuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8;;0;operator collect tomap and tomultimap based on it;i know `tolist` can be also implemented this way but its frequent use makes it eligible for a custom operator;;;;;1;1;operator collect tomap and tomultimap based on it;
3229;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** reason for rollback ***  the test that caused the inital rollback is buggy  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> optimize immutablecollection.toarray(t) as per   the key goal being to avoid the necessity of zeroing a newly created array where possible.  addresses   f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> adds wasm as a supported media type to google java utilities. adds wasm support to the staticfileaction in devserver (so that it is served with the correct content type).  relnotes=adds wasm as a supported media type to google java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> allow service to transition from starting to terminated. add a new  docancelstart  method that is called when a service is stopped while still starting. this gives implementations a chance to abort code which may be preventing the service from starting.  relnotes=added  docancelstart  protected method to  abstractservice   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> fix javadoc typo in linkedlistmultimap  fixes   1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> add callable s tostring to null failure message.  i find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> enhance tostring() for futures returned from executionsequencer.  also make tests for executionsequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> make ordering of primitives#all{wrapper primitive}types deterministic  relnotes=n/a  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1*** reason for rollback ***the test that caused the inital rollback is buggy*** original change description ***introduce trusted interfaceso we can create fluentfuturetrusted without introduction of a dependency on fluentfuture in abstractfuture***683eb054a0c9846e73aa9a4f1a47d4821ea5ef60-------<p> optimize immutablecollectiontoarray(t) as per  the key goal being to avoid the necessity of zeroing a newly created array where possibleaddresses  adds wasm as a supported media type to google java utilitiesadds wasm support to the staticfileaction in devserver (so that it is servedwith the correct content type)relnotesadds wasm as a supported media type to google java utilities67bb79e4ea2e0f6da956c29dd700ad7d756948b7-------<p> allow service to transition from starting to terminated add a new ""docancelstart"" method that is called when a service is stopped while still starting this gives implementations a chance to abort code which may be preventing the service from startingrelnotesadded `docancelstart` protected method to `abstractservice`6cdea3a7b0fe3953e181cb9660df5834550ba498-------<p> fix javadoc typo in linkedlistmultimapfixes  add callables tostring to null failure messagei find this happens in mock-heavy tests and this makes it easier to identify the source of the bad mock call9c03abcca29fb267ed55fc80e668327e5d46e230-------<p> enhance tostring() for futures returned from executionsequenceralso make tests for executionsequencer actually run by porting them to junit3 :-(0c2b6fb916214ffe092edc8577bd7818d58fe664-------<p> make ordering of primitives#all{wrapperprimitive}types deterministicrelnotesn/ac8ad64d04071f0fc20cbcba0bb9ee944746b5ef2";;;;;1;1;make ordering of primitives#all{wrapperprimitive}types deterministicrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid207985657;
3229;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** reason for rollback ***  the test that caused the inital rollback is buggy  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> optimize immutablecollection.toarray(t) as per   the key goal being to avoid the necessity of zeroing a newly created array where possible.  addresses   f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> adds wasm as a supported media type to google java utilities. adds wasm support to the staticfileaction in devserver (so that it is served with the correct content type).  relnotes=adds wasm as a supported media type to google java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> allow service to transition from starting to terminated. add a new  docancelstart  method that is called when a service is stopped while still starting. this gives implementations a chance to abort code which may be preventing the service from starting.  relnotes=added  docancelstart  protected method to  abstractservice   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> fix javadoc typo in linkedlistmultimap  fixes   1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> add callable s tostring to null failure message.  i find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> enhance tostring() for futures returned from executionsequencer.  also make tests for executionsequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> make ordering of primitives#all{wrapper primitive}types deterministic  relnotes=n/a  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2;;0;increase test timeouts to avoid travis failures;;hm its very surprising that these tests take longer than 2 seconds to run || ;;;;0;1;;
3229;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** reason for rollback ***  the test that caused the inital rollback is buggy  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> optimize immutablecollection.toarray(t) as per   the key goal being to avoid the necessity of zeroing a newly created array where possible.  addresses   f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> adds wasm as a supported media type to google java utilities. adds wasm support to the staticfileaction in devserver (so that it is served with the correct content type).  relnotes=adds wasm as a supported media type to google java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> allow service to transition from starting to terminated. add a new  docancelstart  method that is called when a service is stopped while still starting. this gives implementations a chance to abort code which may be preventing the service from starting.  relnotes=added  docancelstart  protected method to  abstractservice   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> fix javadoc typo in linkedlistmultimap  fixes   1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> add callable s tostring to null failure message.  i find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> enhance tostring() for futures returned from executionsequencer.  also make tests for executionsequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> make ordering of primitives#all{wrapper primitive}types deterministic  relnotes=n/a  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2;;0;operator sample with time or with another publisher;id like to state that i try to use `publisher` as much as possible: this adds the benefit that rxjava can use someone elses publisher without the explicit need to wrap it into an `observable` all the time;;;;;1;1;operator sample with time or with another publisher;
3238;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a gap method to range which computes the range that lies between two ranges. this operation is particularly useful as a replacement for joda time s interval.gap when migrating to java time which has no interval class.  joda time: interval interval =   interval gap = interval.gap(interval)   java time (after this cl): range<instant> interval = ...  range<instant> gap = interval.gap(otherinterval)   relnotes=adds a gap() method to range that computes the range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> use gradle formatting  fixes   44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> add missing @since tag.    noticed because of   2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> remove unnecessary local.  it is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> switch fluentfuture and abstractfuture in inheritance chain  relnotes=abstractfuture doesn t expose fluentfuture apis anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a gap method to range which computes the range that lies between two ranges this operation is particularly useful as a replacement for joda times intervalgap when migrating to java time which has no interval classjoda time:interval interval  interval gap  intervalgap(interval)java time (after this cl):range<instant> interval  range<instant> gap  intervalgap(otherinterval)relnotesadds a gap() method to range that computes the range that lies between them856f3bc431f7f145f35c6a42a07e1f7158964467-------<p> use gradle formattingfixes  add missing @since tag because of  add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futuresb155e35606632c756e8db2c414145237a02ef9ca-------<p> remove unnecessary localit is a holdover from when we used the value locally rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d894134ff0559baefa9ecc8df2a7c61945b6dfc523-------<p> make delayed get() test more resilient to thread scheduling delayscc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f-------<p> switch fluentfuture and abstractfuture in inheritance chainrelnotesabstractfuture doesnt expose fluentfuture apis anymore4d8e0a81d78cea279441625adc96467a5b7d0879; ;;;;1;1;switch fluentfuture and abstractfuture in inheritance chainrelnotesabstractfuture doesnt expose fluentfuture apis anymore-------------created by moe: https://githubcom/google/moemoe_migrated_revid208673292;
3238;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a gap method to range which computes the range that lies between two ranges. this operation is particularly useful as a replacement for joda time s interval.gap when migrating to java time which has no interval class.  joda time: interval interval =   interval gap = interval.gap(interval)   java time (after this cl): range<instant> interval = ...  range<instant> gap = interval.gap(otherinterval)   relnotes=adds a gap() method to range that computes the range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> use gradle formatting  fixes   44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> add missing @since tag.    noticed because of   2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> remove unnecessary local.  it is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> switch fluentfuture and abstractfuture in inheritance chain  relnotes=abstractfuture doesn t expose fluentfuture apis anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879;;0;remove boxing for in lists of primitives #3163;using primitive fastutil sets removes need for boxing valuewhen checking if the value is in huge constants set;fyi: @electrum @losipiuk  || #3163  || an update || @cberner this pull request seems good to me except 2 minor points that i can fix as i merge:- helper:103 `<object>` to `<?>`- incodegenerator:142 keep the `todo`if you agree ill merge it~~additionally i believe there is 1 fix necessary but they can be done outside of this pull request~~- ~~test for this code path (>1000 elements in `in`)~~- ~~fix the todo mentioned above which feels pretty trivial~~ **edit**: im wrong actually i have no idea how to fix this || @haozhun thanks for the review actually testhugein does test more than 1000 elements in in || @sopel39 thank you for letting me know i totally missed it i was only looking at `abstracttestqueriestestin` || @sopel39 ill merge this pull request as soon as you address these comments there was a deleted comment dont worry about that one || i have updated pr according to the commends thxfyi: @haozhun  || merged thank you ||;;;;0;1;;
3238;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a gap method to range which computes the range that lies between two ranges. this operation is particularly useful as a replacement for joda time s interval.gap when migrating to java time which has no interval class.  joda time: interval interval =   interval gap = interval.gap(interval)   java time (after this cl): range<instant> interval = ...  range<instant> gap = interval.gap(otherinterval)   relnotes=adds a gap() method to range that computes the range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> use gradle formatting  fixes   44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> add missing @since tag.    noticed because of   2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> remove unnecessary local.  it is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> switch fluentfuture and abstractfuture in inheritance chain  relnotes=abstractfuture doesn t expose fluentfuture apis anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879;;0;operator retrywhen repeatwhen notification;- a fix to operatoronerrornext;;;;;1;1;operator retrywhen repeatwhen notification;
3245;1;0;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> don t allocate a cancellationexception if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> dont allocate a cancellationexception if cancellation causes are not enabled99393cf80ba7a5c861b564b3289debbf5dbbeb51;;;;;1;1;dont allocate a cancellationexception if cancellation causes are not enabledrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid209011426;
3245;1;0;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> don t allocate a cancellationexception if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51;;0;use varbinary and varchar not binary and string because presto doest have binary and string type;;the parameters in the documentation are names not types for example `from_base(string radix)` or `strpos(string substring)` this is similar to the postgresql documentation we actually cant do both name and type because we are using the sphinx domain for python (which doesnt have types) see  #1882 || thanks for trying to improve the documentation but we want to keep the current naming ||;;;;0;1;;
3245;1;0;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> don t allocate a cancellationexception if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51;;0;blockingobservable next latest mostrecent first last single;subscribe stream foreach iteratornow it extends both publisher and iterable directly;;;;;1;1;blockingobservable next latest mostrecent first last singlesubscribe stream foreach iterator;
3247;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add javadoc for mediatype.kml+kmz+mbox  via   original author=simon legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add javadoc for mediatypekml+kmz+mboxvia  authorsimon legner (simon04)7ac917c8d73768129499bd76fe41aa651391ba93-------<p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrentb6726e17f9aa455ff5aa8ee7cee6089d37feb1ba; ;;;;1;1;[guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid209449236;
3247;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add javadoc for mediatype.kml+kmz+mbox  via   original author=simon legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba;;0;remove discovery-based hive;no one was using discoverylocatedhivecluster so remove it related to #1434testing: mvn clean install;;;;;0;1;;
3247;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add javadoc for mediatype.kml+kmz+mbox  via   original author=simon legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba;;0;unicastsubject onbackpressurebuffer-like behavior for a single;subscriber onlyshould be the official api replacement of bufferuntilsubscriber;;;;;1;1;unicastsubject onbackpressurebuffer-like behavior for a singlesubscriber only;
3248;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix parameter name in javadoc   name  doesn t exist in the current context.  #codehealth  relnotes=fix parameter name in javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix parameter name in javadoc`name` doesnt exist in the current context#codehealthrelnotesfix parameter name in javadoc9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;;;;1;1;fix parameter name in javadoc`name` doesnt exist in the current context#codehealthrelnotesfix parameter name in javadoc-------------created by moe: https://githubcom/google/moemoe_migrated_revid209811377;
3248;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix parameter name in javadoc   name  doesn t exist in the current context.  #codehealth  relnotes=fix parameter name in javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;0;do type-aware equality comparison in fieldsetfilteringrecordset;;is there a simple way to add a test for this? || looks good but see the comments ||;;;;0;1;;
3248;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix parameter name in javadoc   name  doesn t exist in the current context.  #codehealth  relnotes=fix parameter name in javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344;;0;operators buffer: size time size + time;the boundary version will come next;;;;;1;1;operators buffer: size time size + time;
3254;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> suppress violation of missingequalscall for equalstestertest  given it quite legitimately fails to call #testequals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** reason for rollback ***  test depends on incorrect future implementation  *** original change description ***  add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    5fafe7832579ab221804480a7545d486a14d083d;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabledf380040f0041f94c83d24623c10f32de58d436c4-------<p> suppress warnings on thread suspending testd51037de530cfe76884271f164b3fbe914493fdb-------<p> suppress violation of missingequalscall for equalstestertest given it quite legitimately fails to call #testequals16e6fcebf07c0f2ce92411604bd3c9d03407374c-------<p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4*** reason for rollback ***test depends on incorrect future implementation*** original change description ***add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabled***47d758e506f838ebc14da5cb85b7f3150efe00fb-------<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates //bugschromiumorg/p/chromium/issues/detail?id6104955fafe7832579ab221804480a7545d486a14d083d;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: by moe: https://githubcom/google/moemoe_migrated_revid210378042;
3254;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> suppress violation of missingequalscall for equalstestertest  given it quite legitimately fails to call #testequals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** reason for rollback ***  test depends on incorrect future implementation  *** original change description ***  add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    5fafe7832579ab221804480a7545d486a14d083d;;0;predict upper limit on memory usage for queries;all queries are given the default maximum for distributed memory usage we should analyze the query plan to determine if they will actually use this much (a scan-filter-project query will never hit it for example) and reduce the limit for that query this will make it easier to predict when the cluster will run out of memory;@cberner any updates on this? || i dont think anyone is actively working on it || ;;;;0;1;;
3254;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> suppress violation of missingequalscall for equalstestertest  given it quite legitimately fails to call #testequals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** reason for rollback ***  test depends on incorrect future implementation  *** original change description ***  add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    5fafe7832579ab221804480a7545d486a14d083d;;0;operator debounce (time selector) throttlewithtimeout (alias);(taking a break from `window()` operators);;;;;1;1;operator debounce (time selector) throttlewithtimeout (alias);
3256;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> bail early without a cancellationexception in abstracttransformfuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add more validation to abstractfuture when cancellation causes are enabled so that it matches the behavior when they are disabled49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255-------<p> bail early without a cancellationexception in abstracttransformfuture2ba14fdad20628de9eb7ea537af22e198d4d31a0;;;;;1;1;bail early without a cancellationexception in abstracttransformfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid211143128;
3256;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> bail early without a cancellationexception in abstracttransformfuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0;;0;fix the serviceprincipal format;;;;;;0;1;;
3256;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> bail early without a cancellationexception in abstracttransformfuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0;;0; debounce behavior added throttlefirst throttlelast alias;ive implemented the wrong debounce logic in #3254;;;;;1;1; debounce behavior added throttlefirst throttlelast alias;
3257;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use trustedfuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use trustedfuture where possible5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;;;;1;1;use trustedfuture where possiblerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid211511882;
3257;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use trustedfuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;0;hive columns with varchar(x) or char(x) data types are ignored;apologies if this is a known issue i was unable to find out if this was previously reported or noti have an external hive table with columns defined as varchar(255) and char(1) and presto seems to be ignoring them presto is not able to find these columns when included in a query similarly when doing a describe on the table all other columns are shown except thesei am running hive 0131 and presto 0110;presto does not currently support types with integer parameters (see pending pr #2478 which adds support for varchar(x)) the behavior you see is expected: describe does not return columns of types that presto does not support  the list of supported types is here:  || edit: sorry i just saw the pr you mentioned is this issue resolved?  the current doc for presto 0146 here:  seems to indicate that varchar now supports an  optional integer length parameter like varchar(256) || varchar(x) is  now for hive and will be available in 0147 were working on support for varchar for all of the connectors i believe that varchar(x) will also be available in 0147 for the redis and kafka connectors ||;;;;0;1;;
3257;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use trustedfuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf;;0;operator timeout onbackpressurebuffer(onoverflow) fixes to parameter;types- fullarbiter and fullarbitersubscriber to work with total-ordered notifications across sourcesive also sorted `observable` members;;;;;1;1;operator timeout onbackpressurebuffer(onoverflow) fixes to parametertypes+ fullarbiter and fullarbitersubscriber to work with total-orderednotifications across sources;
3261;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;; ;;;;1;1;use newguard() to make example in monitor class javadoc moreconcisethis commit also cleans up the method javadoc for newguard() itself andreplaces a lingering throw throwablespropagate(throwable) with simply`throw throwable` (not related to newguard() but good to clean up)3236relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid212669316;
3261;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;add max_n and min_n;this is a precursor of adding max_by_n and min_by_n;can you rebase this on your array rewrite and then assign back to me? || rebased now depends on #3226 || add docs and release notes || back to you for some comments ||  comments added a new separate commit for depended test fix || ;;;;0;1;;
3261;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;fixes to replaysubject and behaviorsubject;"replaysubject: time and size bound trimming was incorrectly deleting the terminal notificationbehaviorsubject: double emission of the same value the following loop fails (prints `bad pattern received: [2 2]`) with 1x:``` javafor (int i  0 i < 1_000_000 i++) {    if (i % 1000  0) {        systemoutprintln(""--> "" + i)    }    behaviorsubject<object> bs  behaviorsubjectcreate(1)    list<object> list  new arraylist<>()    cyclicbarrier cb  new cyclicbarrier(2)    countdownlatch cdl  new countdownlatch(1)    forkjoinpoolcommonpool()submit(() -> {        cbawait()        bsonnext(2)        cdlcountdown()        return null    })    cbawait()    bssubscribe(v -> listadd(v))    cdlawait()    if (arraysaslist(2)equals(list)) {        continue    }    if (arraysaslist(1 2)equals(list)) {        continue    }    systemoutprintln(""bad pattern received: "" + list)        break    }}```";;;;;1;1;fixes to replaysubject and behaviorsubject;
3262;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove trustedgetexception()  tryinternalfastpathgetfailure gives access to similar fast-path  relnotes=n/a  9d9d4d253c377a41919542ac65c5fa7205bd7f52;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove trustedgetexception()tryinternalfastpathgetfailure gives access to similar fast-pathrelnotesn/a9d9d4d253c377a41919542ac65c5fa7205bd7f52;;;;;1;1;remove trustedgetexception()tryinternalfastpathgetfailure gives access to similar fast-pathrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid212701154;
3262;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove trustedgetexception()  tryinternalfastpathgetfailure gives access to similar fast-path  relnotes=n/a  9d9d4d253c377a41919542ac65c5fa7205bd7f52;;0;fix typo;;;;;;0;1;;
3262;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove trustedgetexception()  tryinternalfastpathgetfailure gives access to similar fast-path  relnotes=n/a  9d9d4d253c377a41919542ac65c5fa7205bd7f52;;0;operator window with boundary (exact selector exact + supplier);im not 100% certain about the state management: when to let the mainsource keep running and when to stop ie the in the selector versionif the other completes it means no new window will be opened but theactive should keep receiving values until their closer fires if allsuch closers have fired the main can be stopped;;;;;1;1;operator window with boundary (exact selector exact + supplier)im not 100% certain about the state management: when to let the mainsource keep running and when to stop ie the in the selector versionif the other completes it means no new window will be opened but theactive should keep receiving values until their closer fires if allsuch closers have fired the main can be stopped;
3270;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;  one change is by a googler the other has a verified cla in  ||;;;;1;1;properly handle input cancellations in futurescatching[async]currently if input future is cancelled and the fallback handler does not handle cancellationexception the output future will end up as failed with cancellationexception instead the more logical result should be that output future ends up as cancelled as wellrelnotes`concurrent`: when the input to `futurescatching*` is cancelled cancel the output rather than failing the output with a `cancellationexception` (unless the exception is caught)-------------created by moe: https://githubcom/google/moemoe_migrated_revid213597852;
3270;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;add shard checksums to raptor;need to decide what checksums to use possibly multiple: xxhash64 sha256 etc using both could allow more frequent verification using the fast one but still have the larger checksum for less frequent or manual verification when a problem occurs;;;;;0;1;;
3270;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;unicastsubject javadoc support for oncancelled notification;the cancellation notification will come in handy with window (and ingroupby) it helps with the case when the main source has been cancelledbut the individual windows/groups are still being consumed if those getcancelled by their single subscribers this notification will reach thesource and once all windows/groups get cancelled the main source can becancelledfix to generator production accounting;;;;;1;1;unicastsubject javadoc support for oncancelled notificationthe cancellation notification will come in handy with window (and ingroupby) it helps with the case when the main source has been cancelledbut the individual windows/groups are still being consumed if those getcancelled by their single subscribers this notification will reach thesource and once all windows/groups get cancelled the main source can becancelledfix to generator production accounting;
3281;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;;;;;1;1;clarify a comment in futuresnoncancellationpropagatingfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid214975745;
3281;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;removed hivebinary from unsupported parquet types list;"when running presto with parquet binary data (in hive table) it returns an error that it ""can not read parquet column:"" however support for this should have been added removing hivebinary from the unsupported parquet types list in parquetrecordcursorproviderjava prevents this error and allows proper use of parquet binary data (tested this with multiple functions and seems to give no problems) https://groupsgooglecom/forum/#!topic/presto-users/jnzi9z5n3na";;;;;0;1;;
3281;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;synconsubscribetesttestunsubscribeoutsideofloop failed;@stealthcode ```rxobservablessynconsubscribetest > testunsubscribeoutsideofloop failed    javalangassertionerror: not unsubscribed        at rxobserverstestsubscriberassertunsubscribed(testsubscriberjava:250)        at rxobservablessynconsubscribetesttestunsubscribeoutsideofloop(synconsubscribetestjava:645)```;when does this fail? that test passes on my machine  || i got it to fail after 2969 iterations ill fix it || see #3285   via #3285 ||;;;;0;1;;
3298;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime api checker for guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> enable goodtime api checker for guava753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;;;;1;1;enable goodtime api checker for guavarelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid217557131;
3298;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime api checker for guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;0;literal parameter;;fyi: @dain @losipiuk this is based on rebased dain patch for bounded typesi have also  visitstringliteral method from sqltorowexpressiontranslator to return varchar(x) instead of plain varchar ||;;;;0;1;;
3298;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime api checker for guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba;;0;2x: tests for refcount and timer fixes to flatmap publish and range;;;;;;1;1;2x: tests for refcount and timer fixes to flatmap and publish range;
3305;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime-api for guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  this is in response to (and should resolve)   9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> suppress warnings in classes that implement equals() without also implementing hashcode().  the contract for object.hashcode states that if two objects are equal  then calling the hashcode() method on each of the two objects must produce the same result. implementing equals() but not hashcode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> enable goodtime-api for guava (with some exceptions)603ecca60c11d9a343423ae908bbc325521a7f50-------<p> *builderjava: add @param documentation for the node/value/edge types that clarifies their behaviorthis is in response to (and should resolve)  suppress warnings in classes that implement equals() without also implementinghashcode()the contract for objecthashcode states that if two objects are equal thencalling the hashcode() method on each of the two objects must produce the sameresult implementing equals() but not hashcode() causes broken behaviour whentrying to store the object in a collection73f7e84a345805dc4fcc9927201e03fdbf408c5f;travis seemed to have missed this pr during githubs partial outage yesterday closing and reopening with the hopes that it will run the tests ||;;;;1;1;suppress warnings in classes that implement equals() without also implementinghashcode()the contract for objecthashcode states that if two objects are equal thencalling the hashcode() method on each of the two objects must produce the sameresult implementing equals() but not hashcode() causes broken behaviour whentrying to store the object in a collection-------------created by moe: https://githubcom/google/moemoe_migrated_revid218187142;
3305;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime-api for guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  this is in response to (and should resolve)   9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> suppress warnings in classes that implement equals() without also implementing hashcode().  the contract for object.hashcode states that if two objects are equal  then calling the hashcode() method on each of the two objects must produce the same result. implementing equals() but not hashcode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f;;0;window clauses for common window frames;in queries with multiple common window frames presto should support the window clause```select sum(salary) over w avg(salary) over w  from empsalary  window w as (partition by depname order by salary desc)```;closing duplicate (#5362) ||;;;;0;1;;
3305;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime-api for guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  this is in response to (and should resolve)   9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> suppress warnings in classes that implement equals() without also implementing hashcode().  the contract for object.hashcode states that if two objects are equal  then calling the hashcode() method on each of the two objects must produce the same result. implementing equals() but not hashcode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f;;0;2x: classes single and nbpobservable;`single` is a deferred single-value emitting observable`nbpobservable` is the non-backpressure observable named this way untilthe main observable gets all its tests ported so a refactor can dealwith all of themive implemented the most basic construction and operator methods onthem;+1 || im merging this so the independent work on both can be started ||;;;;1;1;2x: classes single and nbpobservable`single` is a deferred single-value emitting observable`nbpobservable` is the non-backpressure observable named this way untilthe main observable gets all its tests ported so a refactor can dealwith all of themive implemented the most basic construction and operator methods onthem;
3306;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> document that chars.lexicographicalordering is different than alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> document that charslexicographicalordering is different than alphabeticalordering which is more appropriate for user text5377565bc5be4bcce52a07952595b50c11c75f1a;;;;;1;1;document that charslexicographicalordering is different than alphabeticalordering which is more appropriate for user textrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid219121417;
3306;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> document that chars.lexicographicalordering is different than alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a;;0;fix limit push in windowfilterpushdown optimizer;3304 limit is pushed down to each partition of rownumbernode but not limited when wegather all the result from each partition which is wrongadded a limitnode above rownumbernodewith this fix query plan with this fix:```presto:tiny> explain select row_number() over(partition by clerk) row_number clerk from orders limit 10                                                query plan--------------------------------------------------------------------------------------------------------- - output[row_number clerk] > [row_number_1:bigint clerk:varchar]         row_number : row_number_1     - limit[10] > [clerk:varchar row_number_1:bigint]         - exchange[gather] > clerk:varchar row_number_1:bigint             - limit[10] > [clerk:varchar row_number_1:bigint]                 - rownumber[partition by (clerk)  limit (10) ] > [clerk:varchar row_number_1:bigint]                         row_number_1 : row_number()                     - exchange[repartition] > clerk:varchar                         - tablescan[tpch orders:sf001 original constrainttrue] > [clerk:varchar                                 layout: tpch sf001                                 clerk : tpch:clerk```;thanks for sending this fix! can you add a test query to abstracttestqueries that fails without the fix? || i think the bug is present when nodegetpartitionby() is not empty and limit is present || @electrum added regression testes || ;;;;0;1;;
3306;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> document that chars.lexicographicalordering is different than alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a;;0;2x: operators cast and concat tests;the concat reuses the same inner subscriber to save on its allocationcost which works only if the inner source conforms with the spec anddoesnt emit any event after an oncomplete() there is a test thatexplicitly calls oncomplete() twice to test the resilience of concatthe current workaround makes this test pass but any async non-conformingsource may still bug out the operator this is a tradeoff between safety and performance if wed expect suchnon-conforming behavior the current optimization has to be turned intoa regular individually allocated inner subscribers;;;;;1;1;2x: operators cast and concat teststhe concat reuses the same inner subscriber to save on its allocationcost which works only if the inner source conforms with the spec anddoesnt emit any event after an oncomplete() there is a test thatexplicitly calls oncomplete() twice to test the resilience of concatthe current workaround makes this test pass but any async non-conformingsource may still bug out the operator this is a tradeoff between safety and performance if wed expect suchnon-conforming behavior the current optimization has to be turned intoa regular individually allocated inner subscribers;
3313;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct documentation for splitter#withkeyvalueseparator(splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  internally  immutabletable.builder.build() delegates to two classes  {dense sparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detected.  prior to this cl  sparseimmutabletable had a message formatted like:    duplicate value for row=%rowkey%  column=%columnkey%: %newvalue%  %oldvalue%  whereas denseimmutabletable had:    duplicate key: (%rowkey%  %columnkey%)   after this cl both classes will format the message like:    duplicate key: (row=%rowkey%  column=%columnkey%)  values: [%newvalue%  %oldvalue%].   relnotes=standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph packagesanitytests: specify a default object for endpointpair inputs. this should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> correct documentation for splitter#withkeyvalueseparator(splitter)8340e5a770401494da5194e33153079754381006-------<p> standardise message format for ""duplicate key"" illegalargumentexception thrown from immutabletablebuilderbuild()internally immutabletablebuilderbuild() delegates to two classes {densesparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detectedprior to this cl sparseimmutabletable had a message formatted like:  ""duplicate value for row%rowkey% column%columnkey%: %newvalue% %oldvalue%""whereas denseimmutabletable had:  ""duplicate key: (%rowkey% %columnkey%)""after this cl both classes will format the message like:  ""duplicate key: (row%rowkey% column%columnkey%) values: [%newvalue% %oldvalue%]""relnotesstandardise message format for ""duplicate key"" illegalargumentexception thrown from immutabletablebuilderbuild()96e21ae4f9fce2dc622658cff322b01f1721012e-------<p> commongraph packagesanitytests: specify a default object for endpointpair inputsthis should resolve a few internal flaky test issues4210f57678985b51439b0fa37779ec5b369024b8";;;;;1;1;commongraph packagesanitytests: specify a default object for endpointpair inputsthis should resolve a few internal flaky test issues-------------created by moe: https://githubcom/google/moemoe_migrated_revid220529228;
3313;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct documentation for splitter#withkeyvalueseparator(splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  internally  immutabletable.builder.build() delegates to two classes  {dense sparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detected.  prior to this cl  sparseimmutabletable had a message formatted like:    duplicate value for row=%rowkey%  column=%columnkey%: %newvalue%  %oldvalue%  whereas denseimmutabletable had:    duplicate key: (%rowkey%  %columnkey%)   after this cl both classes will format the message like:    duplicate key: (row=%rowkey%  column=%columnkey%)  values: [%newvalue%  %oldvalue%].   relnotes=standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph packagesanitytests: specify a default object for endpointpair inputs. this should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8;;0;fix limit for partitioned row_number with order by;the limit was only applied for each order by-ed partition of the windowfunction and not for the entire querywithout this fix following query will only apply limit to each partition instead of the whole query```select row_number() over (partition by orderstatus order by orderkey) rn orderkey from orderslimit 5```;good catch! merged  thanks for the review ||;;;;0;1;;
3313;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct documentation for splitter#withkeyvalueseparator(splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  internally  immutabletable.builder.build() delegates to two classes  {dense sparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detected.  prior to this cl  sparseimmutabletable had a message formatted like:    duplicate value for row=%rowkey%  column=%columnkey%: %newvalue%  %oldvalue%  whereas denseimmutabletable had:    duplicate key: (%rowkey%  %columnkey%)   after this cl both classes will format the message like:    duplicate key: (row=%rowkey%  column=%columnkey%)  values: [%newvalue%  %oldvalue%].   relnotes=standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph packagesanitytests: specify a default object for endpointpair inputs. this should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8;;0;2x: operator test for groupby fix to groupby and type argument swap;for groupedobservable- added booleansubscription to detect cancellation without caring about  requestsim still not 100% convinced the groupby request coordination worksproperly (ie no stall due lack of requests from one of the groups);;;;;1;1;2x: operator test for groupby fix to groupby and type argument swapfor groupedobservable+ added booleansubscription to detect cancellation without caring aboutrequestsim still not 100% convinced the groupby request coordination worksproperly (ie no stall due lack of requests from one of the groups);
3318;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address why users should prefer our immutable collections to things like collections.emptylist().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> add the origin-trial  response header.  229188e18e6504ffa9747e8bd00622d28e460477;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> address why users should prefer our immutable collections to things like collectionsemptylist()2b9f74c16acbb9bbe18bc20e171996c79a476e31-------<p> add the origin-trial  response header229188e18e6504ffa9747e8bd00622d28e460477;;;;;1;1;add the origin-trial  response headerrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid221639042;
3318;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address why users should prefer our immutable collections to things like collections.emptylist().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> add the origin-trial  response header.  229188e18e6504ffa9747e8bd00622d28e460477;;0;convert hive timezone config to a string;the jdk tostring() method for timezone is extremely long andmakes the bootstrap config printing hard to read;;;;;0;1;;
3318;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address why users should prefer our immutable collections to things like collections.emptylist().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> add the origin-trial  response header.  229188e18e6504ffa9747e8bd00622d28e460477;;0;2x: operator tests: publish reduce repeat + fixes;- added tosingle and tonbpobservable to observable-  bugs in many operators and in the io schedulers release logic;;;;;1;1;2x: operator tests: publish reduce repeat + fixes+ added tosingle and tonbpobservable to observable+  bugs in many operators and in the io schedulers release logic;
3325;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessary;;;;;1;1;replace usages of truths deprecated hasmessage() with hasmessagethat() in guava tests-------------created by moe: https://githubcom/google/moemoe_migrated_revid222834185;
3325;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;remove gettype method from windowfunction;;;;;;0;1;;
3325;1;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.;;0;2x: operator tests: take family + fixes;-  a deadlock possibility in one of the merge tests;;;;;1;1;2x: operator tests: take family + fixes;
3327;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    648071f0c529c87cb28537488f27f971bce3c3c5;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable //wwwchromiumorg/developers/calendar#toc-estimated-stable-dates648071f0c529c87cb28537488f27f971bce3c3c5;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable: by moe: https://githubcom/google/moemoe_migrated_revid222877055;
3327;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    648071f0c529c87cb28537488f27f971bce3c3c5;;0;add cast between json and primitive casts;depends on ~~#3320~~(merged);"dependency merged rebased || @cberner @dain take a look at the tests first and see if- you can think of more corner cases- the output is reasonable || i think we should survey other databases/libraries to see how they handle json-to-primitive conversions we generally dont do auto-coercions of data in presto for example unlike hive `1 ! 1` in presto however with the current implementation of these casts its hard to have type safety in your json structures for example suppose i have a logging framework that logs a struct `{userid: 123}` if i make a mistake and log it as `{userid: ""123""}` everything will work fine until one day when i log `{userid: ""abc""}`also i think it makes it harder to rationalize why `cast(json 1 as varchar)` works but `cast(json [1] as varchar)` results in an errorall that said if this is a common way of handling json conversions then im fine with it || had one comment also lets not land this until at least version 0118 otherwise  ";;;;0;1;;
3327;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    648071f0c529c87cb28537488f27f971bce3c3c5;;0;2x: operator tests: timestamp tomap tomultimap tolist tosortedlist;- signature fix to tomultimap and removed deprecated markers;;;;;1;1;workaround for javac added missing headers;
3330;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> add the @immutable a few more classes. both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> internal change3e74359d4e0479bf6c461d031bb4761b06cf2e66-------<p> add the @immutable a few more classes both annotations enforce at compile-time that the annotated class meets the annotation’s requirements16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;;;;1;1;add the @immutable a few more classes both annotations enforce at compile-time that the annotated class meets the annotation’s requirements-------------created by moe: https://githubcom/google/moemoe_migrated_revid223369138;
3330;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> add the @immutable a few more classes. both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;0;port system connector to tablelayout api;;other than that comment it ;;;;0;1;;
3330;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> add the @immutable a few more classes. both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0;;0;2x: operator test zip and safesubscribertest;;;;;;1;1;2x: operator test zip and safesubscribertest;
3332;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing documentation and @since tags to mediatype entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> remove  media type for  or similar phrasing for visible constants in the mediatype class.  172bb45c149601a52e45bff8b2e3aa409f66d658;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add missing documentation and @since tags to mediatype entries that were addedafter its initial relase of 120b545d0ed1066906d238852f2f510132cbfcc4af8-------<p> remove ""media type for"" or similar phrasing for visible constants in the mediatype class172bb45c149601a52e45bff8b2e3aa409f66d658";;;;;1;1;"remove ""media type for"" or similar phrasing for visible constants in the mediatype classrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid223540269";
3332;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing documentation and @since tags to mediatype entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> remove  media type for  or similar phrasing for visible constants in the mediatype class.  172bb45c149601a52e45bff8b2e3aa409f66d658;;0;update release notes for 0112;;;;;;0;1;;
3332;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing documentation and @since tags to mediatype entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> remove  media type for  or similar phrasing for visible constants in the mediatype class.  172bb45c149601a52e45bff8b2e3aa409f66d658;;0;2x: subject tests and bugfixes;-  the `testnestedasyncconcat` test- fixed memory leak in `newthreadworker`;;;;;1;1; testnestedasyncconcat not waiting for the parent to complete andmisses the last oncomplete;
3334;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make example compile (i.e. supply a path/file) and use depth first instead of breadth first.  reason: depth first is more common for file traversal.  relnotes=n/a  e7b80454e4d463af61fc81c3beb96b5e46b07312;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> make example compile (ie supply a path/file) and use depth first instead of breadth firstreason: depth first is more common for file traversalrelnotesn/ae7b80454e4d463af61fc81c3beb96b5e46b07312;;;;;1;1;make example compile (ie supply a path/file) and use depth first instead of breadth firstreason: depth first is more common for file traversalrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid223782436;
3334;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make example compile (i.e. supply a path/file) and use depth first instead of breadth first.  reason: depth first is more common for file traversal.  relnotes=n/a  e7b80454e4d463af61fc81c3beb96b5e46b07312;;0;fix using clause for joins;2311;thanks for fixing this! two more test cases:```select x from (values (1) (2)) a (x) left join (values (1)) b (x) using (x)select x from (values (1)) a (x) right join (values (1) (2)) b (x) using (x)```both should return two rows with the values from the outer side of the join (`1 2`) i verified them in postgresql || oh i missed something here the output column should always be the joins base tablewill fix it || @electrum comments addressed || @yuananf please add this test```select x from (values (1) (2)) a (x) full join (values (2) (3)) b (x) using (x)```and make sure it returns``` x--- 1 2 3(3 rows)``` || @haozhun @electrum my understanding is the following queries should return same resultfull join`select x from (values (1) (2)) a (x) full join (values (2) (3)) b (x) using (x)``select coalesce(ax bx) from (values (1) (2)) a (x) full join (values (2) (3)) b (x) using (x)`left join`select x from (values (1) (2)) a (x) left join (values (2) (3)) b (x) using (x)``select coalesce(ax bx) from (values (1) (2)) a (x) left join (values (2) (3)) b (x) using (x)`right join`select x from (values (1) (2)) a (x) right join (values (2) (3)) b (x) using (x)``select coalesce(ax bx) from (values (1) (2)) a (x) right join (values (2) (3)) b (x) using (x)`but the `select *` should return both `ax` and `bx`correct me if im wrong || you understanding of `select x` is correct additionally as you are aware of `coalesce` in left join and right join can be simplified for example `coalesce(ax bx)` is equivalent to `ax` in the left join example you gave`select *` should produce the same output as `select x` in the query example you give there should be only 1 column you can confirm this by running the query in postgres or oracle we also looked at spec to confirm this || after discussion with the team we believe wed like to see this problem  in a different wayin `statementanalyzervisitjoin` the output `relationtype` should be changed so that only 1 output column is produced for the `using` fieldfor outer join either a `coalesce` projection or something similar will likely be necessarygiven this approach is quite different ill close it for now if you are still interested in fixing this issue feel free to reopen || thats ok maybe ill look at it when im free || @yuananf thank you for your understanding ||;;;;0;1;;
3334;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make example compile (i.e. supply a path/file) and use depth first instead of breadth first.  reason: depth first is more common for file traversal.  relnotes=n/a  e7b80454e4d463af61fc81c3beb96b5e46b07312;;0;2x: disposable unit tests + fix to refcountdisposable behavior;- sorted `observable` and added `@backpressuresupport` and  `schedulersupport` annotations- created `@beta` and `@experimental` annotations nothing is marked  with them because i intent everything to be standard at this point;;;;;1;1;2x: disposable unit tests + fix to refcountdisposable behavior+ sorted `observable` and added `@backpressuresupport` and`schedulersupport` annotations+ created `@beta` and `@experimental` annotations nothing is markedwith them because i intent everything to be standard at this point;
3337;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use the primitive  number  type instead of the object counterpart  number  to avoid a jscompiler error.  an upcoming change to j2cl that simplifies how casting logic is transpiled will make the code  (number) (object) 3  here transpile to just  /** @type {number} */ (3)  and jscompiler will see the  invalid cast  since  3  is not  number  in the closure type system.  065a831ca171767dcc73b7b74c996029a5f286e3;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use the primitive ""number"" type instead of the object counterpart ""number"" to avoid a jscompiler erroran upcoming change to j2cl that simplifies how casting logic is transpiled will make the code ""(number) (object) 3"" here transpile to just ""/** @type {number} */ (3)"" and jscompiler will see the ""invalid cast"" since ""3"" is not ""number"" in the closure type system065a831ca171767dcc73b7b74c996029a5f286e3";;;;;1;1;"use the primitive ""number"" type instead of the object counterpart ""number"" to avoid a jscompiler erroran upcoming change to j2cl that simplifies how casting logic is transpiled will make the code ""(number) (object) 3"" here transpile to just ""/** @type {number} */ (3)"" and jscompiler will see the ""invalid cast"" since ""3"" is not ""number"" in the closure type systemrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid225046969";
3337;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use the primitive  number  type instead of the object counterpart  number  to avoid a jscompiler error.  an upcoming change to j2cl that simplifies how casting logic is transpiled will make the code  (number) (object) 3  here transpile to just  /** @type {number} */ (3)  and jscompiler will see the  invalid cast  since  3  is not  number  in the closure type system.  065a831ca171767dcc73b7b74c996029a5f286e3;;0;first draft of mongodb plugin;;"this looks awesome! very complete docs too!nit: the preferred capitalization from looking at their website seems to be ""mongodb"" ||  ive rebased on 0123-snapshot and  various typos in the document || @electrum apologies if im missing something is there a merge plan for this? || @gonewandering yes were super backlogged processing pull requests but this is definitely on our list || @martint awesome thanks looking forward || hi i am using this as a plugin with my current version of prestodb and may have found a bug  when creating a schema for a collection the connector fails with error whenever the db collection has a field name with a mixture or lower-case and upper-case characters  if i rename the field in the collection to be all lower-case the queries then work fine  this has to be tested with a mongodb server hosted on a case-sensitive o/s like linux  the problem does not happen when i use a mongodb on osx which has a case-insensitive file system || can you rebase on latest master? ||  ";;;;0;1;;
3337;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use the primitive  number  type instead of the object counterpart  number  to avoid a jscompiler error.  an upcoming change to j2cl that simplifies how casting logic is transpiled will make the code  (number) (object) 3  here transpile to just  /** @type {number} */ (3)  and jscompiler will see the  invalid cast  since  3  is not  number  in the closure type system.  065a831ca171767dcc73b7b74c996029a5f286e3;;0;2x: observablegenerate confusing with subscriber;it is confusing that the `observablegenerate` methods pass in a `subscriber` that has an `onsubscribe` method on them when using `generate` i should never have to or be able to call `onsubscribe` and involve myself in the flow control;i tried to avoid adding to many new interfaces we can change it to something like `generateoutput` `childobserver` `clientobserver` or `outputobserver` || /cc @jakewharton || we should probably avoid using the `observer` term since this interface can be re-used for both `observable` and `flowable`s `generate` methods and `observer` is only associated with non-backpressure typesit could be called `emitter` and both `flowableemitter` and `observableemitter` could extend from it || closing via #4410 ||;;;;0;1;;
3339;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add the application/jose and application/jose+json media types.      relnotes=add mediatype for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> suppress soon to be goodtime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add the application/jose and application/jose+json media types mediatype for ""application/jose"" and ""application/jose+json""e846cdf26bb7cc52b664e8f78e670222da88ac51-------<p> suppress soon to be goodtime errors (time is now considered a keyword)2705b06e3c61dfe16eb14befe52de2c37d9e0313";;;;;1;1;suppress soon to be goodtime errors (time is now considered a keyword)-------------created by moe: https://githubcom/google/moemoe_migrated_revid225199757;
3339;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add the application/jose and application/jose+json media types.      relnotes=add mediatype for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> suppress soon to be goodtime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313;;0;fix unaliasing of symbols for exchangenode inputs;;;;;;0;1;;
3339;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add the application/jose and application/jose+json media types.      relnotes=add mediatype for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> suppress soon to be goodtime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313;;0;2x: fix delaysubscription with supplied publisher: wrong value to trigger subscription;the subscription was triggered by the supplied publisher and not one of its value or completionbtw should an `oncomplete` from this inner publisher be treated as an indication to not subscribe to the actual source?;"what is the purpose of this operator? why is it added? || huh that exists in 1x?! never seen or heard of it || > btw should an oncomplete from this inner publisher be treated as an indication to not subscribe to the actual source?thats a good question  the 1x docs say it subscribes if the given observable emits `oncomplete` is not an ""emission"" in the normal sense so probably not || ill add this fix and unit test to a larger set of unit tests + fixes coming separately || ";;;;0;1;;
3350;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hide files methods that are @deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> hide files methods that are @deprecated internallycf8ea79dc50d7c0441045b020873561a4bb3791b;;;;;1;1;hide files methods that are @deprecated internallyrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid226486688;
3350;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hide files methods that are @deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b;;0;refactor session apis;;;;;;0;1;;
3350;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> hide files methods that are @deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b;;0;2x design: creation/destruction;how to create and destroy streamsthe wording of this can become much better once agreement occurs in  intent of this is:1) specify how to create streams (observable/flowable) of the various flavors and account for flow control2) evolve towards what the creation/generation apis are3) specify that it is not the responsibility of the final subscriber to call unsubscribe/cancel upstream;"just read the hot and cold stuff i threw down some cogitations on hot and cold in a gist just in the last couple of days its [here]( my thoughts on the matter not really matured yet but the vagueness about hot and cold observables was something i wanted to clarify for myself one characteristic of hot observables that doesnt seem to get mentioned is that multiple concurrent subscribers will see the same stream at some point || i see a few cases when one wants to ""create"" an `observable`:- there is a hot source in some other library (such as mouse events) and one wants to bring it into the `observable` world the safest way to do this is to add in a `subject`- there is a cold source (such as a jdbc query) that would be consumed in a pull-fashion anyway and one wants to bring it into the `observable` world too that case could use a generator such as `abstractonsubscribe` or `synconsubscribe`- other cases should be (already) covered by static factory methods such as `just` `fromcallable` etc || @davidmoten the definition of hot/cold as ive put in this document comes from @headinthebox it is about side-effects it is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time which is only assured if `connectableobservableconnect()` is usedhere is reactive cocoa 30 on hot/cold:  they have separated the types into `signal` (hot) and `signalproducer` (cold)the temperature of an `observable` does not prevent flow control from being applied thus this is not true:> once subscribed to if no requests are made that eventually available storage (memory/disk) will exceed any given bound (due to events being buffered)if `publish()` is being used then the flow control prior to `publish()` would be equivalent for all consumers if each consumer chooses to apply their own flow control then they are choosing to not see ""the same stream"" as their siblings as they have created different streams from the same sourceand nothing about being ""hot"" requires everything to be buffered that is purely a choice of flow control note that an operating system already is doing flow control before it sends mouse events it is absolutely not sending every event it is sending sampled events and that sampling happens at the hardware and software levels before it ever hits us anyways flow control is everywhere  || > i see a few cases when one wants to ""create"" an observable:the approaches you gave all work a few comments:- a `subject` is not the only way (or safest  not sure what safety has to do with this) to do this as `observablecreate` which then listens and stops listening on cancellation is equally effective and can be better than an always-on `subject` if the use of the stream is not constant- missing is the ability to do async batched fetching such as `asynconsubscribe` which is needed for more advanced cold sources over network boundaries (for example fetching 5000 items 100 at a time)- the static factory methods today are legit but i think we should revisit their naming and anything from a cold pullable source should return a `flowable` not an `observable` if we agree upon that distinction in  || do you all agree that we do not need an `unsubscribe`/`cancel` send from a `safesubscriber` wrapper after every `onerror`/`oncomplete`? i find it wasteful unnecessary and affecting performance (in cases such as a stream of 1 where the extra unsubscribe is noticeable when the stream itself only emitted 1 item) || i agree there is no need to force a cancel call on a final subscriber anymore upstream will cancel the subscription for you  (maybe before calling you maybe after they called you: see observeon) || @benjchristensen re hot/cold> it is also only assured for multiple concurrent subscribers to see the same stream at some point if they all subscribe at the exact same time which is only assured if connectableobservableconnect() is usedthis is how to make this precise and not demand mention of `connectableobservable` (not part of the reactive streams spec for instance):- once two subscribers are subscribed to source there exists a finite non-negative integer n such that events1skip(n) is equal to events2 or events1 is equal to events2skip(n) that is _eventually_ the streams have the same elements till terminationyour point about sampling doesnt change the fact that an infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growth its irrelevant that the os gives me one mouse event a millisecond or one per year because im not talking about a practical measuring test but a theoretical one its certainly the case that any consumer could apply flow control measures to such an observable but im trying to arrive at at a way of deciding that an observable is hot or cold by just observing it (having no knowledge of its internals) i guess once flow control has been applied to a hot observable then the resultant observable is by my definition no longer hot this may be a confusing distinction and i might have to come up with a new name for it say red hot observable just semantics i guess but i think interesting to explore a bit || > not part of the reactive streams spec for instancethe reactive streams spec does not talk about hot cold or multicast nor is rxjava going to be 100% about reactive streams that spec represents a type but it certainly doesnt address everything one example of that is shown in  the contract requirements of reactive streams are only applicable to types that implement the reactive streams interfaces > this is how to make this precisei dont understand what precision you are aiming for we can not redefine what ""hot"" and ""cold"" mean since those are beyond rxjava the definitions ( that i have included in the document come from @headinthebox and exist in other reactivex implementations and documentation (such as here:  and here:  what specifically are you suggesting to make more precise than what is already accepted as the definition of ""hot"" and ""cold""?> infinite backpressure supporting hot observable like mouse events if subscribed to and say have only 1 element requested of it then wait forever will bring about unbounded buffer growthi dont understand this what does being ""hot"" have to do with having an unbounded buffer?> im trying to arrive at at a way of deciding that an observable is hot or cold by just observing itsince ""hot"" and ""cold"" is about side-effects and nothing to do with the data flowing through it then you would need to look at whether there are side-effects when a subscribe happens a type system can attempt to try and communicate when a source represents a hot or cold source such as reactive cocoa does with `signal` (hot) and `signalproducer` (cold):  determining whether we should use types to represent these was the point of the discussion in  i guess once flow control has been applied to a hot observable then the resultant observable is by my definition no longer hot i dont see how the application of flow control is related to whether a source is ""hot"" or ""cold"" since flow control does not impact the side-effects or lack of side-effects of subscription  || is this pr good for merge or are there things that need to change?any further additions (such as more precision if needed) can come through followup prs we dont need to get everything done in this pr as long as this pr is correct thus farif this pr is okay id like to merge so we can move forward in defining the design and allow maturation of the picture for v2cc @reactivex/rxjava-committers for vote || ping @reactivex/rxjava-committers @akarnokd @davidmoten  ||  thanks @akarnokd @stealthcode let me know what you need changed in this before youre okay || :+1: all good thanks!  || thank you  ";;;;1;1;2x design: creation/destructionhow to create and destroy streamsthe wording of this can become much better once agreement occurs in  intent of this is:1) specify how to create streams (observable/flowable) of the various flavors and account for flow control2) evolve towards what the creation/generation apis are3) specify that it is not the responsibility of the final subscriber to call unsubscribe/cancel upstream;
3359;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  fixes   relnotes=specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparablefixes  that range static factories can throw classcastexception if the provided endpoints are not mutually comparable7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;;;;1;1;specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparablefixes  that range static factories can throw classcastexception if the provided endpoints are not mutually comparable-------------created by moe: https://githubcom/google/moemoe_migrated_revid227525705;
3359;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  fixes   relnotes=specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;0;remove catalog from raptor metadata;we do not need catalog information in the raptor schema (as we cannot have more than one catalog) use the following script to change the schema: https://gistgithubcom/nileema/794a941bc810f8a2812a;;;;;0;1;;
3359;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  fixes   relnotes=specify that range static factories can throw classcastexception if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4;;0;2x: non-backpressure subject implementations;they can be renamed later as necessary no unit tests but the regularsubject tests can be ported easily;ill repost this with a full pr of other nbp changes ||;;;;0;1;;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;0;handle rowgroupdictionaries correctly in dictionary reader;;;;;;0;1;;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;0;110: promote testsubscriber methods to public; the experimental testsubscriber methods can now be partof the public apiin addition ive added the missing javadocs for the create() factorymethods and one of the constructors;;;;;0;1;;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;146.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";filler for non-existent issue;146;;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;3356.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";remove unused imports and warnings;* remove unused imports* remove suppress warning annotations where not applicable and/or update suppression types;@liach thanks added similar changes to android as well || looks good (imo this has a big chance of merging as its a bugfix) || not sure what were doing with `serial` warnings nowadays but ill import the rest of this ;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3393;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add report-to header.    504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> remove unused imports and warnings.  3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> reformat with google-java-format  relnotes=n/a  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> add missing @override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> document the retention of listeners added to guava implementations of listenablefuture.  relnotes=document the retention of listeners added to guava implementations of  listenablefuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> reformat with google-java-format  relnotes=n/a  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> name the method parameter  unused  for immutablesortedset.readobject(objectinputstream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> remove @beta from apis:  collect - most collectors (aside from bloomfilter and immutablerange*  as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity)) - maps: asconverter  immutableenummap - multimapbuilder - streams: stream(iterable)  concat  io - bytestreams: copy  tobytearray - charstreams: copy  tostring - files: as(char|byte)(source|sink)  util.concurrent - futures: addcallback  getdone  getunchecked  immediatecancelledfuture  immediatefailedfuture  immediatefuture - listeningscheduledexecutorservice - uninterruptibles  other - htmlescapers - splitter.splittolist - ticker  fixes  fixes  (aside from immutablerange*  but those whole classes are @beta  anyway) addresses the main concerns of  but doesn t cover the broader request fixes  partially addresses   relnotes=removed  @beta  from a number of frequently used apis.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> add some known utf-8 hash values to murmur3_32 tests. utf-8 is more comparable between platforms than relying on java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> remove @canignorereturnvalue from ordering.sortedcopy() and immutablesortedcopy().  relnotes=remove  @canignorereturnvalue  from  ordering.sortedcopy()  and  immutablesortedcopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> make a constructor private.  (i m looking into enummap stuff for other reasons  and i got to wondering if this was used outside the file. nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> delete wellbehavedmap.  the bug it worked around was fixed in java 7:   and i don t believe it was ever present under android:   i haven t looked for the absolute first version ever of gwt  but the still very old gwt file doesn t have the bug  either.  deleting this class will simplify some work i m doing around our enummap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> internal gwt change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** original change description ***  internal gwt change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.keyset to prevent crashes on ios.  tested=created a map inside a autorelease pool and saved a reference to the keyset. checked that the keyset functions correctly outside the autorelease pool. checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. did this test with both immutablemap.of(<2 entries>) and immutablebimap.of(<2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.keyset() .  76c954518752acb36256009840ed004eef412291  -------  <p> annotate checknotnull s input and output as @nonnull.  we don t want to go down the road of annotating most things @nonnull  as we eventually want to use tools that assume that that s the default. however  it s pretty weird for checknotnull() to return a @nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  relnotes=annotated  checknotnull  s input and output as  @nonnull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> document the jdk 9+ alternative to  maps#immutableentry   fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> create constants for the sourcemap header  none of the tests like this header name  so each required some workarounds.  relnotes=add the sourcemap header to   81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> internal gwt change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.values to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the values collection. checked that the values collection functions correctly outside the autorelease pool. checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. did this test with immutablemap.of(<2 entries>) and immutablemap.copyof(<enummap with 2 entries>).  relnotes=j2objc: fixes crashes from use of  immutablemap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> fix javadoc breakage under jdk11 canary.     d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> remove gwt emulations that are no longer needed as of gwt 2.8.2.  relnotes=removed gwt emulations that are no longer needed as of gwt 2.8.2. this means that gwt projects that use this version of guava must use gwt 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32;;3385.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add report-to header remove unused imports and warnings3356f0945a2ca741ead2a435cf52ddae2217763cc092-------<p> reformat with google-java-formatrelnotesn/a7809097021927058b21523e7b4d24d1f7fdb91b8-------<p> add missing @override annotations8843b6ca39c8baddcf01991ea34ad91f87b30d82-------<p> document the retention of listeners added to guava implementations of listenablefuturerelnotesdocument the retention of listeners added to guava implementations of `listenablefuture`f6287e1b85eb4daf5678d252aaaf215a82f4fd2d-------<p> reformat with google-java-formatrelnotesn/a28cff42bc92b7685937c5771868167e0c03155d3-------<p> name the method parameter unused for immutablesortedsetreadobject(objectinputstream) (so the static analysis doesnt complain)0967c796d6e6be72b0d9e8d68af66d6a7b524b54-------<p> remove @beta from apis:collect- most collectors (aside from bloomfilter and immutablerange* as those whole classes are @beta (though i did remove the redundant @beta annotation from the collector-returning methods for clarity))- maps: asconverter immutableenummap- multimapbuilder- streams: stream(iterable) concatio- bytestreams: copy tobytearray- charstreams: copy tostring- files: as(char|byte)(source|sink)utilconcurrent- futures: addcallback getdone getunchecked immediatecancelledfuture immediatefailedfuture immediatefuture- listeningscheduledexecutorservice- uninterruptiblesother- htmlescapers- splittersplittolist- tickerfixes   (aside from immutablerange* but those whole classes are @beta anyway)addresses the main concerns of  but doesnt cover the broader requestfixes  addresses  `@beta` from a number of frequently used apis068cb9005cc701ed98e31df9b56117b86df21d0f-------<p> add some known utf-8 hash values to murmur3_32 tests utf-8 is more comparable between platforms than relying on javas internal encodinge7ec53773bcf89533496de1611ac4dddd876fb54-------<p> remove @canignorereturnvalue from orderingsortedcopy() and immutablesortedcopy()relnotesremove `@canignorereturnvalue` from `orderingsortedcopy()` and `immutablesortedcopy()`da2895f5c3a55b84771488e0f8a38c67e0f63543-------<p> make a constructor private(im looking into enummap stuff for other reasons and i got to wondering if this was used outside the file nope)b1933ce7d8c8ff0fac90b494b33ab8af159e1906-------<p> delete wellbehavedmapthe bug it worked around was  in java 7: i dont believe it was ever present under android: havent looked for the absolute first version ever of gwt but the still very old gwt file doesnt have the bug eitherdeleting this class will simplify some work im doing around our enummap usage for j2cl2115c74c21ab47c3a41c2fb73a16aa6d051bf784-------<p> internal gwt change1d49ade94c3e7d2c056893a630739c8a6b897f66-------<p> automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66*** original change description ***internal gwt change***46a2123f4b077840b4b466fe6344579ac4b52bad-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapkeysetto prevent crashes on iostestedcreated a map inside a autorelease pool and saved a reference to thekeyset checked that the keyset functions correctly outside the autoreleasepool checked that both the keyset and the map are deallocated by theautorelease pool when not holding a reference to the keyset did this test withboth immutablemapof(<2 entries>) and immutablebimapof(<2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapkeyset()`76c954518752acb36256009840ed004eef412291-------<p> annotate checknotnulls input and output as @nonnullwe dont want to go down the road of annotating most things @nonnull as we eventually want to use tools that assume that thats the default however its pretty weird for checknotnull() to return a @nullable value in the minds of some tools so lets annotate just that method and see how it goesrelnotesannotated `checknotnull`s input and output as `@nonnull`63d0b31e62b4d4da33ec61a1d84d026391ffd126-------<p> document the jdk 9+ alternative to `maps#immutableentry`fixes #3385998858f9abd06b3774bf72a3b4f2fdaa18a88ceb-------<p> modernize book reference7eafede7552490351956e8038bb07596b227e3ef-------<p> create constants for the sourcemap headernone of the tests like this header name so each required some workaroundsrelnotesadd the sourcemap header to  internal gwt changedb6ada7b4f9db07b8de6ec549ca7e2ab6079b354-------<p> use j2objcs @retainedwith annotation instead of @weak on immutablemapvaluesto prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to thevalues collection checked that the values collection functions correctlyoutside the autorelease pool checked that both the values collection and themap are deallocated by the autorelease pool when not holding a strong referenceto the values collection did this test with immutablemapof(<2 entries>) andimmutablemapcopyof(<enummap with 2 entries>)relnotesj2objc: fixes crashes from use of `immutablemapvalues()`05ac56322f6c3a4b0109aab2b46671716f109cb5-------<p> fix javadoc breakage under jdk11 canary remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higherbe02df5ad4a530d5cb206a7042de8c2f5dbbff32;" > annotate checknotnulls input and output as @nonnullhi just curious about the motivation behind this decision (well behind part of this decision) i totally agree that ""its pretty weird for checknotnull() to return a @nullable value in the minds of some tools"" and am in favor of `checknotnull()` returning a non-null valueim just unclear on why the input is considered `@nonnull` now instead of `@nullable` maybe im misusing it but i use `checknotnull()` as a fluent assertion on expressions where the compiler cant infer the nullability but i know its `@nonnull` for my uses the ideal signature would be:```java@canignorereturnvalue@nonnullpublic static <t> t checknotnull(@nullable t ref) {  }``` || ";document the jdk 9+ alternative to `maps#immutableentry`;i think this suggestion is worthwhile for two reasons:- the jdk 9+ alternative is null-hostile fully in line with guavas philosophy (in fact my colleagues and i were surprised to learn that `mapsimmutableentry` allows nulls)- the excellent arguments in favour of `immutable*` types put forth in #2969 do not hold here since `mapsimmutableentry` does not have a special return type that communicates its immutability;(were merging this one in a sec thank you for it!) ||;1;0;remove gwt emulations that are no longer needed as of gwt 282relnotesremoved gwt emulations that are no longer needed as of gwt 282 this means that gwt projects that use this version of guava must use gwt 282 or higher-------------created by moe: https://githubcom/google/moemoe_migrated_revid235524613;
3399;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.entryset() to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the entry set. checked that the entry set functions correctly outside the autorelease pool. checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. did this test with the following constructions to cover all entry set implementations: - immutablemap.of(<2 entries>) - immutablemap.copyof(<enummap with 2 entries>) - immutablesortedmap.of(<2 entries>) - immutablebimap.of(<2 entries>).inverse()  relnotes=j2objc: fixes crashes from use of immutablemap.entryset().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> use j2objcs @retainedwith annotation instead of @weak onimmutablemapentryset() to prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to theentry set checked that the entry set functions correctly outside theautorelease pool checked that both the entry set and the are deallocated by theautorelease pool when not holding a strong reference to the entry set did thistest with the following constructions to cover all entry set implementations:- immutablemapof(<2 entries>)- immutablemapcopyof(<enummap with 2 entries>)- immutablesortedmapof(<2 entries>)- immutablebimapof(<2 entries>)inverse()relnotesj2objc: fixes crashes from use of immutablemapentryset()c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;;;;1;1;use j2objcs @retainedwith annotation instead of @weak onimmutablemapentryset() to prevent crashes on iostestedcreated a map inside an autorelease pool and saved a reference to theentry set checked that the entry set functions correctly outside theautorelease pool checked that both the entry set and the are deallocated by theautorelease pool when not holding a strong reference to the entry set did thistest with the following constructions to cover all entry set implementations:- immutablemapof(<2 entries>)- immutablemapcopyof(<enummap with 2 entries>)- immutablesortedmapof(<2 entries>)- immutablebimapof(<2 entries>)inverse()relnotesj2objc: fixes crashes from use of immutablemapentryset()-------------created by moe: https://githubcom/google/moemoe_migrated_revid237300208;
3399;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.entryset() to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the entry set. checked that the entry set functions correctly outside the autorelease pool. checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. did this test with the following constructions to cover all entry set implementations: - immutablemap.of(<2 entries>) - immutablemap.copyof(<enummap with 2 entries>) - immutablesortedmap.of(<2 entries>) - immutablebimap.of(<2 entries>).inverse()  relnotes=j2objc: fixes crashes from use of immutablemap.entryset().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;0;fixing fragment numbers in explain;"fragment numbering did not match stage numbers as first was done is post-order andlatter in pre-order manner this commit changes fragment numbering to match stagenumberingissue: #3157 manually tested on this query:```presto:tpch_10gb_orc> explain (type distributed) select * from nation n inner join region r on nregionkey  rregionkey                                                                                                query plan                                                                                                 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- fragment 0 [single]                                                                                                                                                                                            output layout: [nationkey name regionkey comment regionkey_0 name_1 comment_2]                                                                                                                       - output[nationkey name regionkey comment regionkey name comment] > [nationkey:bigint name:varchar regionkey:bigint comment:varchar regionkey_0:bigint name_1:varchar comment_2:varchar]              regionkey : regionkey_0                                                                                                                                                                                   name : name_1                                                                                                                                                                                             comment : comment_2                                                                                                                                                                                   - remotesource[1] > [nationkey:bigint name:varchar regionkey:bigint comment:varchar regionkey_0:bigint name_1:varchar comment_2:varchar]                                                    fragment 1 []                                                                                                                                                                                             output layout: [nationkey name regionkey comment regionkey_0 name_1 comment_2]                                                                                                                       - innerjoin[(""regionkey""  ""regionkey_0"")] > [nationkey:bigint name:varchar regionkey:bigint comment:varchar regionkey_0:bigint name_1:varchar comment_2:varchar]                                       - remotesource[2] > [nationkey:bigint name:varchar regionkey:bigint comment:varchar]                                                                                                                   - remotesource[3] > [regionkey_0:bigint name_1:varchar comment_2:varchar]                                                                                                                       fragment 2 [source]                                                                                                                                                                                            output layout: [nationkey name regionkey comment]                                                                                                                                                       output partitioning: [regionkey]                                                                                                                                                                           - tablescan[hive tpch_10gb_orc:nation originalconstraint  true] > [nationkey:bigint name:varchar regionkey:bigint comment:varchar]                                                                      nationkey : hivecolumnhandle{clientidhive namenationkey ordinalposition0 hivetypebigint hivecolumnindex0 partitionkeyfalse}                                                                    name : hivecolumnhandle{clientidhive namename ordinalposition1 hivetypestring hivecolumnindex1 partitionkeyfalse}                                                                              regionkey : hivecolumnhandle{clientidhive nameregionkey ordinalposition2 hivetypebigint hivecolumnindex2 partitionkeyfalse}                                                                    comment : hivecolumnhandle{clientidhive namecomment ordinalposition3 hivetypestring hivecolumnindex3 partitionkeyfalse}                                                            fragment 3 [source]                                                                                                                                                                                            output layout: [regionkey_0 name_1 comment_2]                                                                                                                                                            output partitioning: [regionkey_0]                                                                                                                                                                         - tablescan[hive tpch_10gb_orc:region originalconstraint  true] > [regionkey_0:bigint name_1:varchar comment_2:varchar]                                                                                  regionkey_0 : hivecolumnhandle{clientidhive nameregionkey ordinalposition0 hivetypebigint hivecolumnindex0 partitionkeyfalse}                                                                  name_1 : hivecolumnhandle{clientidhive namename ordinalposition1 hivetypestring hivecolumnindex1 partitionkeyfalse}                                                                            comment_2 : hivecolumnhandle{clientidhive namecomment ordinalposition2 hivetypestring hivecolumnindex2 partitionkeyfalse}                                                         (1 row)```please note that root node is not wrapped around `exchangenode` so numbering needs to start from 1 and root node has directly assigned 0 valuewe might want to consider using `fragmentid` as `stageid` which is currently separately assigned in `sqlstageexecution`";;;;;0;1;;
3399;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use j2objc s @retainedwith annotation instead of @weak on immutablemap.entryset() to prevent crashes on ios.  tested=created a map inside an autorelease pool and saved a reference to the entry set. checked that the entry set functions correctly outside the autorelease pool. checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. did this test with the following constructions to cover all entry set implementations: - immutablemap.of(<2 entries>) - immutablemap.copyof(<enummap with 2 entries>) - immutablesortedmap.of(<2 entries>) - immutablebimap.of(<2 entries>).inverse()  relnotes=j2objc: fixes crashes from use of immutablemap.entryset().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd;;0;110: promote switchifempty with observable to the public api; the switchifempty overload with observable cannow be part of the public api;;;;;0;1;;
3404;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> lazily allocate compacthash backing arrays on first write  empty maps/sets are extremely common. lazily allocating the backing arrays can save hundreds of kb of heap and reduce load on the garbage collector.  while here: - use serialized size to pre-size the arrays - respect ordering during serialization (without using an iterator) - consistently mark unused links as unset  memory savings before first write (bytes): - compacthashmap.create(): 184 -> 64 - compactlinkedhashmap.create(): 240 -> 80 - compacthashset.create(): 136 -> 40 - compactlinkedhashset.create(): 200 -> 56 - compacthashmap.createwithexpectedsize(0): 136 -> 64 - compactlinkedhashmap.createwithexpectedsize(0): 168 -> 80 - compacthashset.createwithexpectedsize(0): 96 -> 40 - compactlinkedhashset.createwithexpectedsize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> lazily allocate compacthash backing arrays on first writeempty maps/sets are extremely common lazily allocating the backing arrays cansave hundreds of kb of heap and reduce load on the garbage collectorwhile here:- use serialized size to pre-size the arrays- respect ordering during serialization (without using an iterator)- consistently mark unused links as unsetmemory savings before first write (bytes):- compacthashmapcreate(): 184 -> 64- compactlinkedhashmapcreate(): 240 -> 80- compacthashsetcreate(): 136 -> 40- compactlinkedhashsetcreate(): 200 -> 56- compacthashmapcreatewithexpectedsize(0): 136 -> 64- compactlinkedhashmapcreatewithexpectedsize(0): 168 -> 80- compacthashsetcreatewithexpectedsize(0): 96 -> 40- compactlinkedhashsetcreatewithexpectedsize(0): 144 -> 56801e018184d2f5196c80e2b2168a883c093ffe5a;;;;;1;1;lazily allocate compacthash backing arrays on first writeempty maps/sets are extremely common lazily allocating the backing arrays cansave hundreds of kb of heap and reduce load on the garbage collectorwhile here:- use serialized size to pre-size the arrays- respect ordering during serialization (without using an iterator)- consistently mark unused links as unsetmemory savings before first write (bytes):- compacthashmapcreate(): 184 -> 64- compactlinkedhashmapcreate(): 240 -> 80- compacthashsetcreate(): 136 -> 40- compactlinkedhashsetcreate(): 200 -> 56- compacthashmapcreatewithexpectedsize(0): 136 -> 64- compactlinkedhashmapcreatewithexpectedsize(0): 168 -> 80- compacthashsetcreatewithexpectedsize(0): 96 -> 40- compactlinkedhashsetcreatewithexpectedsize(0): 144 -> 56relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid237817874;
3404;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> lazily allocate compacthash backing arrays on first write  empty maps/sets are extremely common. lazily allocating the backing arrays can save hundreds of kb of heap and reduce load on the garbage collector.  while here: - use serialized size to pre-size the arrays - respect ordering during serialization (without using an iterator) - consistently mark unused links as unset  memory savings before first write (bytes): - compacthashmap.create(): 184 -> 64 - compactlinkedhashmap.create(): 240 -> 80 - compacthashset.create(): 136 -> 40 - compactlinkedhashset.create(): 200 -> 56 - compacthashmap.createwithexpectedsize(0): 136 -> 64 - compactlinkedhashmap.createwithexpectedsize(0): 168 -> 80 - compacthashset.createwithexpectedsize(0): 96 -> 40 - compactlinkedhashset.createwithexpectedsize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a;;0;support for limit all;added support for all argument in limit clause which has the same effectas removing the limit clause from the queryissue: #3158sample:```presto:default> select count(*) from (select * from tpchsf1nation limit 10) _col0 -------    10 (1 row)query 20150805_151333_00004_z2in4 finished 1 nodesplits: 5 total 5 done (10000%)0:03 [25 rows 0b] [8 rows/s 0b/s]presto:default> select count(*) from (select * from tpchsf1nation limit all) _col0 -------    25 (1 row)query 20150805_151340_00005_z2in4 finished 1 nodesplits: 5 total 5 done (10000%)0:00 [25 rows 0b] [255 rows/s 0b/s]presto:default> select count(*) from (select * from tpchsf1nation limit)query 20150805_151343_00006_z2in4 failed: line 1  no viable alternative at input )select count(*) from (select * from tpchsf1nation limit)```;should i create `limititem` in antlr grammar? right now there is some duplication || this is a duplicate of another pending pull request:  || closing this pr as there is other one ||;;;;0;1;;
3404;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> lazily allocate compacthash backing arrays on first write  empty maps/sets are extremely common. lazily allocating the backing arrays can save hundreds of kb of heap and reduce load on the garbage collector.  while here: - use serialized size to pre-size the arrays - respect ordering during serialization (without using an iterator) - consistently mark unused links as unset  memory savings before first write (bytes): - compacthashmap.create(): 184 -> 64 - compactlinkedhashmap.create(): 240 -> 80 - compacthashset.create(): 136 -> 40 - compactlinkedhashset.create(): 200 -> 56 - compacthashmap.createwithexpectedsize(0): 136 -> 64 - compactlinkedhashmap.createwithexpectedsize(0): 168 -> 80 - compacthashset.createwithexpectedsize(0): 96 -> 40 - compactlinkedhashset.createwithexpectedsize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a;;0;110: promote subscriptionsunsubscribed to be part of the public api; subscriptionsunsubscribed can now be part ofthe public api;;;;;0;1;;
3428;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add (unimplemented) api for grapbbuilder.immutable() and immutablegraph.builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> adds constants for prefetch headers.  of note  x-purpose is not just a google specific header as previously defined.      relnotes=adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> implement graphbuilder.immutable().  relnotes= graph : added  graphbuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> add fluentfuture.from(fluentfuture) factory method.  this follows the steps of fluentiterable.from(fluentiterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  relnotes=added deprecated  fluentfuture.from(fluentfuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> use byte/short/int for hashtable depending on size  the hashtable is stored as an object and cast to the correct type using instanceof checks.  memory: byte sizes (2-89): 12-41% better (average: 32% better) short sizes (90-22937): 20-29% better (average: 24% better) int sizes (22938+): unchanged  runtime on a pixel 2: createandpopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iteratewithkeysetandget: 9% better to 13% worse (average: 3.2% worse) iteratewithentryset: unchanged (doesn t use hashtable)  effects on immutablemapproguard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  effects on immutablebimapproguard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> add valuegraphbuilder.immutable().  relnotes= graph : added  valuegraphbuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> remove unnecessary type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> add networkbuilder.immutable().  relnotes= graph : added  networkbuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add (unimplemented) api for grapbbuilderimmutable() and immutablegraphbuilder50eddd03e92dc2855a3ae05c3b8d93de18e6bddd-------<p> adds constants for prefetch headersof note x-purpose is not just a google specific header as previously defined constants for prefetch headers966879ff982425a4418341c9ccbe9a7249bb0a4d-------<p> implement graphbuilderimmutable()relnotes`graph`: added `graphbuilderimmutable()` for building immutable graphs in a fluent way7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b-------<p> add fluentfuturefrom(fluentfuture) factory methodthis follows the steps of fluentiterablefrom(fluentiterable) and other“migration aid” methods that are deprecated from inception and are just here topoint out code that is no longer neededrelnotesadded deprecated `fluentfuturefrom(fluentfuture)` to point out redundant code2d060028e9d99f798a29fd1ec09c844f4fc58a1d-------<p> use byte/short/int for hashtable depending on sizethe hashtable is stored as an object and cast to the correct type usinginstanceof checksmemory:byte sizes (2-89): 12-41% better (average: 32% better)short sizes (90-22937): 20-29% better (average: 24% better)int sizes (22938+): unchangedruntime on a pixel 2  9% better to 6% worse (average: 43% better)get: 1% better to 8% worse (average: 35% worse)iteratewithkeysetandget: 9% better to 13% worse (average: 32% worse)iteratewithentryset: unchanged (doesnt use hashtable)effects on immutablemapproguard:59105 bytes > 60369 bytes (+21%)21 classes > 21 classes (0%)200 methods > 201 methods (+05%)effects on immutablebimapproguard:68893 bytes > 70235 bytes (+19%)25 classes > 25 classes (0%)232 methods > 233 methods (+04%)b1a11396bd731ddcd1efd60850b0aa004c9f874b-------<p> add valuegraphbuilderimmutable()relnotes`graph`: added `valuegraphbuilderimmutable()` for building immutable value graphs in a fluent way79e0a573fc00db17f0916426ce2107d3bf63d481-------<p> remove unnecessary type parameter6f0b66d172a9532aaa82dac8a1add496c916ad97-------<p> add networkbuilderimmutable()relnotes`graph`: added `networkbuilderimmutable()` for building immutable networks in a fluent waya812af75ee14d8cb01a1a180b2c369c2f16311a3;;;;;1;1;add networkbuilderimmutable()relnotes`graph`: added `networkbuilderimmutable()` for building immutable networks in a fluent way-------------created by moe: https://githubcom/google/moemoe_migrated_revid240318306;
3428;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add (unimplemented) api for grapbbuilder.immutable() and immutablegraph.builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> adds constants for prefetch headers.  of note  x-purpose is not just a google specific header as previously defined.      relnotes=adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> implement graphbuilder.immutable().  relnotes= graph : added  graphbuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> add fluentfuture.from(fluentfuture) factory method.  this follows the steps of fluentiterable.from(fluentiterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  relnotes=added deprecated  fluentfuture.from(fluentfuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> use byte/short/int for hashtable depending on size  the hashtable is stored as an object and cast to the correct type using instanceof checks.  memory: byte sizes (2-89): 12-41% better (average: 32% better) short sizes (90-22937): 20-29% better (average: 24% better) int sizes (22938+): unchanged  runtime on a pixel 2: createandpopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iteratewithkeysetandget: 9% better to 13% worse (average: 3.2% worse) iteratewithentryset: unchanged (doesn t use hashtable)  effects on immutablemapproguard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  effects on immutablebimapproguard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> add valuegraphbuilder.immutable().  relnotes= graph : added  valuegraphbuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> remove unnecessary type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> add networkbuilder.immutable().  relnotes= graph : added  networkbuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3;;0;discovery server could not start while running presto server in idea;i follow the readme building steps and load the project into idea  while running the main class prestoserver with run configurations the error met:with the configproperties as below by default:> nodeidffffffff-ffff-ffff-ffff-ffffffffffff> nodeenvironmenttest>  > discovery-serverenabledtrue> discoveryuri > exchange exchange exchange exchange > scheduler scheduler scheduler scheduler > queryclienttimeout5m> querymax-age30m> > pluginbundles\>   /presto-jmx/pomxml\>   /presto-raptor/pomxml\>   /presto-hive-cdh4/pomxml\>   /presto-example-   /presto-kafka/pomxml \>   /presto-tpch/pomxml> > prestoversiontestversion> experimental-syntax-enabledtrue> distributed-joins-enabledtrue---```2015-08-08t13 56717+0800    error   discovery-0 ioairliftdiscoveryclientcachingserviceselector  cannot connect to discovery server for refresh (collector/general): lookup of collector failed for     error   discovery-4 ioairliftdiscoveryclientcachingserviceselector  cannot connect to discovery server for refresh (presto/general): lookup of presto failed for     info    main    orgeclipsejettyserverserver jetty-9211v201505292015-08-08t13 57904+0800    warn    main    orgeclipsejettyserverhandlerabstracthandler    no server set for orgeclipsejettyserverhandlererrorhandler@4c361f632015-08-08t13 58650+0800    warn       comfacebookprestomemoryremotenodememory error fetching memory info from  server refused connection:     at ioairlift    at ioairlift    at ioairlift    at ioairlift    at ioairlift    at orgeclipsejettyclientresponsenotifiernotifycomplete(responsenotifierjava:193)    at orgeclipsejettyclientresponsenotifiernotifycomplete(responsenotifierjava:185)    at orgeclipsejettyclient    at orgeclipsejettyclient    at orgeclipsejettyclient    at orgeclipsejettyclient    at orgeclipsejettyclient    at orgeclipsejettyclientpooling    at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:635)    at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:555)    at javalangthreadrun(threadjava:745)caused by: javanetconnectexception: connection refused    at sunniochsocketchannelimplcheckconnect(native method)    at sunniochsocketchannelimplfinishconnect(socketchannelimpljava:717)    at orgeclipsejettyioselectormanagerfinishconnect(selectormanagerjava:340)    at orgeclipsejettyioselectormanager$managedselectorprocessconnect(selectormanagerjava:675)    at orgeclipsejettyioselectormanager$managedselectorprocesskey(selectormanagerjava:644)    at orgeclipsejettyioselectormanager$managedselectorselect(selectormanagerjava:611)    at orgeclipsejettyioselectormanager$managedselectorrun(selectormanagerjava:549)    at orgeclipsejettyutilthreadnonblockingthreadrun(nonblockingthreadjava:52)     3 more```;"but it can load plugins normally and execute the sql query normally even though the exception throwed || it seems to me that this is #3381 looking at the ""error fetching memory"" which makes this issue a duplicate || ";;;;0;1;;
3428;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add (unimplemented) api for grapbbuilder.immutable() and immutablegraph.builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> adds constants for prefetch headers.  of note  x-purpose is not just a google specific header as previously defined.      relnotes=adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> implement graphbuilder.immutable().  relnotes= graph : added  graphbuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> add fluentfuture.from(fluentfuture) factory method.  this follows the steps of fluentiterable.from(fluentiterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  relnotes=added deprecated  fluentfuture.from(fluentfuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> use byte/short/int for hashtable depending on size  the hashtable is stored as an object and cast to the correct type using instanceof checks.  memory: byte sizes (2-89): 12-41% better (average: 32% better) short sizes (90-22937): 20-29% better (average: 24% better) int sizes (22938+): unchanged  runtime on a pixel 2: createandpopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iteratewithkeysetandget: 9% better to 13% worse (average: 3.2% worse) iteratewithentryset: unchanged (doesn t use hashtable)  effects on immutablemapproguard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  effects on immutablebimapproguard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> add valuegraphbuilder.immutable().  relnotes= graph : added  valuegraphbuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> remove unnecessary type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> add networkbuilder.immutable().  relnotes= graph : added  networkbuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3;;3425.0;groupby backpressure fix;this is a backport of the 2x groupby operator which solves #3425one unit test in operatorretrytest had to be altered a bit i believethe original code relied on a groupby behavior which caused the bug in#3425;the following test starts breaking with this branch it prints out 1 to 128 then stops and does not print anything else (apparently no progress is made) in branch 1x this continues to print past 128 ``` javarange(1 rxringbuffersize *4)repeat()    groupby((d) -> d)    flatmap((go) ->        godoonnext(systemout::println)            subscribeon(schedulersio())    )    subscribe()``` || this is because the lack of horizontal unboundedness of flatmap and the bug in groupby together made it work in 1014 if i run this code with the 2x fix and add 1024 as the max concurrency value it prints lots of values indefinitely || ive updated the comments || ;outer groupby doesnt obey backpressure;someone here brought by some code that was throwing a missingbackpressureexception aaron and i narrowed it down to this snippet`merge(range(0 500)groupby(i -> i % (rxringbuffersize + 2))observeon(computation()))toblocking()last()`it comes down observeon requesting 128 observables from groupby and groupby hard coded to request 1024 from rangewe  his problem changing the `observeon(computation())` to `flatmap(grp -> grpsubscribeon(computation()))`2;it fails with 2x too ill have a look at this within 2x || ive looked into this with 2x the problem is that a `request(n)` may result in a new group beyond the requested amount by the main subscriber (ie the one that receives `groupedobservable`s) since consuming groups requires value replenishment from main one cant be sure what the next value will be or where it will go (into the same group into another group or into a completely new group)the solution is to buffer the `groupedobservable`s for the main subscriber and hand them out based on requests while letting the groups be consumed since we cant know the number of groups this buffering has to be unbounded similar to how each group has to be unbounded (due to the same reason as before: asking for replenishment for a group may result in a value for another group)i dont fully understand 1x groupby so i dont know how to fix it with minimal changes the best i can do is to port back the 2x groupby however that requires `spsclinkedarrayqueue` from #3169 ||;1;0;1x: groupby backpressure fix;
3431;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove unused configuration of load factor  this allows removal of loadfactor/threshold which saves 8 bytes per object.  while here: - reduce diff between map/set classes - make base foreach() work for linked classes  shallow object size (bytes): - compacthashmap: 64 -> 56 - compactlinkedhashmap: 80 -> 72 - compacthashset: 40 -> 32 - compactlinkedhashset: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove unused configuration of load factorthis allows removal of loadfactor/threshold which saves 8 bytes per objectwhile here:- reduce diff between map/set classes- make base foreach() work for linked classesshallow object size (bytes):- compacthashmap: 64 -> 56- compactlinkedhashmap: 80 -> 72- compacthashset: 40 -> 32- compactlinkedhashset: 56 -> 48062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;;;;1;1;remove unused configuration of load factorthis allows removal of loadfactor/threshold which saves 8 bytes per objectwhile here:- reduce diff between map/set classes- make base foreach() work for linked classesshallow object size (bytes):- compacthashmap: 64 -> 56- compactlinkedhashmap: 80 -> 72- compacthashset: 40 -> 32- compactlinkedhashset: 56 -> 48relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241053148;
3431;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove unused configuration of load factor  this allows removal of loadfactor/threshold which saves 8 bytes per object.  while here: - reduce diff between map/set classes - make base foreach() work for linked classes  shallow object size (bytes): - compacthashmap: 64 -> 56 - compactlinkedhashmap: 80 -> 72 - compacthashset: 40 -> 32 - compactlinkedhashset: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;0;common table expression (with) executed multiple times;"we were trying to optimize a few queries which basically have the issue that there is one (or multiple) results of a with-statement that can be reused to speedup the results of other subqueries and the final resulti wrote an example query (see below) where the `expensive_input_data` would take the majority of the time of the query (time & resources like cpu) the top_a top_b and top_c are only examples and could in reality have very different logiccurrently i attempt to re-use the results of that in 3 sub queries from my point of view it should only run once and then stream the results into the other subqueries what we see however (version 0114) is that it is executed once for every sub query that depends on it (in this example 3 times) is there a way we can optimize by rewriting the query? if not how can we improve the source code to support these kind of use cases? can we trick the execution plan to distributed the results to the splits? is there something that needs to be coded (happy to do so if you can point out the major steps and what syntax we need to ""hint"" for this)?```with expensive_input_data as   (            select   cola                     colb                     colc                     count(1) as c            from     my_table            join     other_table            on       (                              my_tableidother_tableparent_id)            where    11                     /** expensive filter etc */            group by 1                     2                     3 ) top_a as   (            select   cola   as k                     sum(c) as c            from     input_data            group by 1            order by 2 desc            limit    10 )   top_b as   (            select   colb   as k                     sum(c) as c            from     input_data            group by 1            order by 2 desc            limit    10 )   top_c as   (            select   colc   as k                     sum(c) as c            from     input_data            group by 1            order by 2 desc            limit    10 )   select *   from   top_a   union   select *   from   top_b   union   select *   from   top_c```thanks for looking into this!";"can you try a brute-force approach to save the common subquery output into a new (temporary) table and then reuse it x3? i dont know of any better way today in presto || thanks @kbp-tdc for your reply we have tested that and yes it does work but it is not very flexible as it will cause a lot of overhead and unnecessary pressure on the metastores (from hive)it feels to me that this shouldnt be too hard to accomplish looking at the streaming data that is already in place || in the latest release you should be able to do this in a transaction like this``` sqlstart transaction-- materialize ""with"" clauses from abovecreate expensive_input_data as select create top_b as select create top_c as select select rollback```with this presto will not write the tables to the metastore at all  if you want to create a table and commit in the transaction simply drop the tables at the end || that sounds like a much better workaround 👍  thanks!  ";;;;0;1;;
3431;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove unused configuration of load factor  this allows removal of loadfactor/threshold which saves 8 bytes per object.  while here: - reduce diff between map/set classes - make base foreach() work for linked classes  shallow object size (bytes): - compacthashmap: 64 -> 56 - compactlinkedhashmap: 80 -> 72 - compacthashset: 40 -> 32 - compactlinkedhashset: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7;;0;zip$innersubscriber does not respect backpressure on rxringbuffer;"this test throws a `missingbackpressureexception` while attempting to call onnext on the internal rxringbuffer this can be solved by adding a `onbackpressuredrop()` to the interval observable before zipping ``` javaobservable<integer> cache  observablerange(1 50)cache()repeat()observable<long> interval  observableinterval(10_000 timeunitnanoseconds)observablezip(interval cache (i c) ->c)toblocking()last()```stacktrace:```exception in thread ""main"" javalangruntimeexception: rxexceptionsmissingbackpressureexception    at rxobservablesblockingobservableblockforsingle(blockingobservablejava:455)    at rxobservablesblockingobservablelast(blockingobservablejava:219)    at wtfwtfmain(wtfjava:31)caused by: rxexceptionsmissingbackpressureexception    at rxinternalutilrxringbufferonnext(rxringbufferjava:352)    at rxinternaloperatorsoperatorzip$zip$innersubscriberonnext(operatorzipjava:329)    at rxinternaloperatorsonsubscribetimerperiodically$1call(onsubscribetimerperiodicallyjava:52)    at rxscheduler$worker$1call(schedulerjava:120)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)    at javautilconcurrentfuturetaskrun(futuretaskjava:266)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:180)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:293)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```";this looks right `interval` doesnt support `backpressure` there is nothing to do for `zip$innersubscriber` || thanks  yes i realized this im not sure that there can be any better solution but there is no obvious solution from the stack trace since the zip doesnt have context of the subscriber above it (or which observables onnext caused the problem) || this is why 20 operators track their clients requested amount and report the missingbackpressureexception themselves || okay great ;;;;0;1;;
3434;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix @param tag as per   cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix @param tag as per  @jbduncanc691708b4c214b5caf9a92826cdfa07b19485f6e;;;;;1;1;fix @param tag as per  @jbduncanrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241525141;
3434;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix @param tag as per   cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e;;0;"queries with complex and many stages result in ""unable to create new native thread"" ";it looks like that theres too much of new threads spawned instantly once a very complex query is started it feels to me that presto shouldnt crash under whatever query so we can make it reliable and robust to whatever someone inputs the cluster become unresponsive after such a query with new queries hanging in queued state we havent seen it recover from this automaticallypossible solution would be to limit the amount of threads which currently doesnt seem the case ```javalangoutofmemoryerror: unable to create new native thread    at javalangthreadstart0(native method)    at javalangthreadstart(threadjava:714)    at javautilconcurrentthreadpoolexecutoraddworker(threadpoolexecutorjava:950)    at javautilconcurrentthreadpoolexecutorexecute(threadpoolexecutorjava:1368)    at javautilconcurrentabstractexecutorservicesubmit(abstractexecutorservicejava:112)    at comfacebookprestoexecutionsqlstageexecutionschedulestarttasks(sqlstageexecutionjava:401)    at comfacebookprestoexecutionsqlstageexecution$$lambda$371/1864740512accept(unknown source)    at javalangiterableforeach(iterablejava:75)    at comfacebookprestoexecutionsqlstageexecutionschedulestarttasks(sqlstageexecutionjava:400)    at comfacebookprestoexecutionsqlstageexecution$$lambda$371/1864740512accept(unknown source)    at javalangiterableforeach(iterablejava:75)    at comfacebookprestoexecutionsqlstageexecutionschedulestarttasks(sqlstageexecutionjava:400)    at comfacebookprestoexecutionsqlstageexecution$$lambda$371/1864740512accept(unknown source)    at javalangiterableforeach(iterablejava:75)    at comfacebookprestoexecutionsqlstageexecutionschedulestarttasks(sqlstageexecutionjava:400)    at comfacebookprestoexecutionsqlstageexecutionstart(sqlstageexecutionjava:392)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:216)    at comfacebookprestoexecutionqueuedexecutionlambda$start$85(queuedexecutionjava:68)    at comfacebookprestoexecutionqueuedexecution$$lambda$230/808613438run(unknown source)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```version 0114;"do you have an example query that reproduces this on say tpch data? ive never seen this  || essentially its a query consisting of about 700 different (problem seems to relate a bit to what happens   #3431 ) stages which all seem to start a new thread (or multiple)we have 24gb of ram allocated per node || ah i think thats an issue with how the scheduler currently works can you try  and see if that fixes it? || the phased execution policy in that patch should fix the problem with everything stating at once but i would expect that you will run into other problems with having 700 stages  if it does work i would love to knowto enable the phased execution policy set the session property “execution_policy  ‘phased’” or set the configuration parameter ""queryexecution-policy  phased” || @cberner @dain  that sounds like something that would improve this indeed thanks for thinking with me i will have to find some time to build from that branch setup a test cluster and run the queries which might take a few days || @robinus2 could you please close the issue now? unless the problem is not solved and you can share further insights || fyi we found that adding the following lines to the `/etc/security/limitsconf` file on all presto nodes:```presto    soft    nproc 32768presto    hard    nproc    65536presto soft nofile 32768presto hard nofile 65536```helped with similar issues || ";;;;0;1;;
3434;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix @param tag as per   cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e;;0;add singlefinallydo();@akarnokd ive found a problem with `null` action ill create separate issue about this soon;could you verify what happens ig the callback throws?one should check null in assembly time (ie when calling singlefinallydo || @akarnokd unfortunately very bad thing happens — not only this exception will be swallowed but also `finallyaction` executed twice… im investigating this and will create issue soon ||  um i just noticed that we `doonterminate` and `finallydo` on `observable`![the number of methods is too damn high]( we make this look like `doon*()`? || `doonterminate` happens before subscriber notification `finallydo` happens after || rebased || it can be called `doonaftercomplete()` but since `finallydo` is established im not sure this rename can happen for 10x || id rather it were called doaftercomplete finallydo only exists for the observable and it doesnt follow the do\* convention we could choose to have 2 conventions (naming singles variant similarly) or deprecate observable#finallydo and create observable#doaftercomplete i vote for the latter naming them both doaftercomplete || i think it would have to be doaftertermination since it runs on bothcomplete and erroron sat oct 17 2015 2:45 pm aaron tull notifications@githubcom wrote:> id rather it were called doaftercomplete finallydo only exists for the> observable and it doesnt follow the do\* convention we could choose to have> 2 conventions (naming singles variant similarly) or deprecate> observable#finallydo and create observable#doaftercomplete i vote for the> latter naming them both doaftercomplete> > —> reply to this email directly or view it on github>  || does anyone have any objection to creating `observabledoaftertermination` as an alias for `finallydo` and deprecating the original `finallydo`? if thats acceptable then this pr should name it `singledoaftertermination`  || :+1: `doaftertermination` || a bit of consistency in tenses would be nice thoughwe have ```dooncompleteddoonterminatedoonsubscribedoonrequest````dooncompleted` is the odd one out but may as well live with that to be consistent call the method in question `doafterterminate` or `doafterterminated`? || i think `doafterterminate` sounds best to me its consistent with theoncomplete of 2xon sat dec 5 2015 01:53 dave moten notifications@githubcom wrote:> a bit of consistency in tenses would be nice though> > we have> > dooncompleted> doonterminate> doonsubscribe> doonrequest> > > dooncompleted is the odd one out but may as well live with that to be> consistent call the method in question doafterterminate or> doafterterminated?> > —> reply to this email directly or view it on github>  || renamed to `doafterterminate` & rebased ptal || > does anyone have any objection to creating observabledoaftertermination as an alias for finallydo and deprecating the original finallydo? @artem-zinnatullin would you like to deprecate `finallydo` -> `doafterterminate` in this pr? || id prepare a separate pr after this if you dont mindon mon dec 7 2015 23:13 aaron tull notifications@githubcom wrote:> does anyone have any objection to creating observabledoaftertermination> as an alias for finallydo and deprecating the original finallydo?> > @artem-zinnatullin  would you like> to deprecate finallydo -> doafterterminate in this pr?> > —> reply to this email directly or view it on github>  > ## @artem_zin || rebase please so we can merge  || rebased! ||   ;;;;1;1;add singledoafterterminate();
3436;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bumped the fpp to prevent ooms on jdk 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> bumped the fpp to prevent ooms on jdk 118acb5b990f7fe0467dd318e262dd423b19b710b7;;;;;1;1;bumped the fpp to prevent ooms on jdk 11relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid241778584;
3436;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bumped the fpp to prevent ooms on jdk 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7;;0;web app fix reading length of null;```uncaught typeerror: cannot read property length of null```which points to this code in webapp/indexhtml```render: function() {        if (thisstatequerieslength > 0) { // this line```is thrown if a call to /v1/query fails (eg no connectivity presto restart etc)this checks for the variable to be null so auto-update keeps refreshing;;;;;0;1;;
3436;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bumped the fpp to prevent ooms on jdk 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7;;3435.0;1x: add action ! null check in operatorfinally;part of #3435personally id also add same test to `observablefinallydo()` and `singlefinallydo()` because there are no guarantees that in future they will use exact same operator as implementation and this contract is more a contract of `observablefinallydo()` and `singlefinallydo()`; ;operatorfinally calls action twice if action throws exception exception thrown by action is swallowed;while i was implementing #3434 ive found two problems with `operatorfinally`ill call `operatorfinallyaction` as `finallyaction` for better readability1 if `finallyaction` is `null` — `nullpointerexception` will be swallowed  safesubscriber` this can be solved via `action ! null` check in the `operatorfinally` (ill make pr)2 if `finallyaction` throws exception `lift` calls `onerror()` and `operatorfinally` invokes `finallyaction` again (this may brake user-defined logic)! and second exception is swallowed by the `safesubscriber` (see problem 1)i vote for solving both of these problems before 1015/1110;"here are the tests:``` java@testpublic void nullfinallyactionshouldbecheckedasap() {    try {        observable                just(""value"")                finallydo(null)        fail()    } catch (nullpointerexception expected) {    }}@testpublic void iffinallyactionthrowsexceptionshouldnotbeswallowedandactionshouldbecalledonce() {    action0 finallyaction  mock(action0class)    dothrow(new illegalstateexception())when(finallyaction)call()    testsubscriber<string> testsubscriber  new testsubscriber<string>()    observable            just(""value"")            finallydo(finallyaction)            subscribe(testsubscriber)    testsubscriberassertvalue(""value"")    verify(finallyaction)call()    // actual result:    // not only illegalstateexception was swallowed    // but finallyaction was called twice!}``` || ill try to send prs with fixes asap `null` check is easy but second problem looks tricky || if the action throws you cant do much but call `rxjavapluginsgetinstance()geterrorhandler()handleerror()` for it || we can throw it as `error` leaving the app in an unknown state is very bad idea especially in something like `finallydo()` || the sequence has already terminated at that point and this operator is there to have side-effects after it the exception has nowhere to go and there is no guarantee a thrown error reaches its intended target because of a potential async boundary so it either propagates up to a synchronous caller gets thrown away by the `executorservice` or gets sent to the error handler || can this be closed? || @akarnokd wont be able to work on this for at least 2 days feel free to run the tests i posted  ^ and see what we can do here or ill investigate this in the end of the weekas far as i remember the biggest problem is that `action` gets called twice if it throws exception and it may break apps logic in a dramatic manner || fix posted in #3823 || closing via #3823 || ";1;0;add action ! null check in operatorfinally;
3440;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add websocket headers to  header listings.  this adds five headers  as defined in rfc 6455: sec-websocket-accept  sec-websocket-extensions  sec-websocket-key  sec-websocket-protocol  and sec-websocket-versions.  this also changes the c++ per-header unit test so that it can recognize the alternate capitalization of websocket  instead of adding five special cases. the go and java versions use the  websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add websocket headers to  header listingsthis adds five headers as defined in rfc 6455: sec-websocket-acceptsec-websocket-extensions sec-websocket-key sec-websocket-protocol andsec-websocket-versionsthis also changes the c++ per-header unit test so that it can recognize thealternate capitalization of websocket instead of adding five special cases thego and java versions use the ""websocket"" capitalization instead78fe31027ec67c0648667582e40d49351757cfe9";;;;;1;1;"add websocket headers to  header listingsthis adds five headers as defined in rfc 6455: sec-websocket-acceptsec-websocket-extensions sec-websocket-key sec-websocket-protocol andsec-websocket-versionsthis also changes the c++ per-header unit test so that it can recognize thealternate capitalization of websocket instead of adding five special cases thego and java versions use the ""websocket"" capitalization insteadrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid242732915";
3440;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add websocket headers to  header listings.  this adds five headers  as defined in rfc 6455: sec-websocket-accept  sec-websocket-extensions  sec-websocket-key  sec-websocket-protocol  and sec-websocket-versions.  this also changes the c++ per-header unit test so that it can recognize the alternate capitalization of websocket  instead of adding five special cases. the go and java versions use the  websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9;;0;add start_time to systemruntimenode;3406;already a pr:  #3413 || @cawallin aha thanks i somehow missed that ||;;;;0;1;;
3440;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add websocket headers to  header listings.  this adds five headers  as defined in rfc 6455: sec-websocket-accept  sec-websocket-extensions  sec-websocket-key  sec-websocket-protocol  and sec-websocket-versions.  this also changes the c++ per-header unit test so that it can recognize the alternate capitalization of websocket  instead of adding five special cases. the go and java versions use the  websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9;;0;singleonerrorresumenext;observable has a onerrorresumenext to continue with a new observable if onerror is called id like something similar for single so:``` javasingle<t> onerrorresumenext(single<? extends t> resumesingle)single<t> onerrorresumenext(func1<? super throwable ? extends single<? extends t>> resumefunction)```single already has onerrorreturn it makes sense to have onerrorresumenext as well;related:  || ill work on this || @akarnokd i can do it in 2 ways: 1 convert `single` to `observable` and `lift` already implemented and tested `operatoronerrorresumenextviafunction` and `operatoronerrorresumenextviaobservable`2 re-implement these operators for `single` it may give some performance boost but adds two classes to the libraryi guess youll vote for 2nd way but i think it worth to ask :) || frankly im not satisfied with 1x single and how it tries to reuse observable components it leads to wrappers and un-wrappers and so on even for the trivial operators if they were `retrywhen` then id say convert back and forth like i do with 2x so yes i vote for option 2 || ok no problem :) ||;;;;0;1;;
3449;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> mitigate  by guessing that sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in immutableset creation.  relnotes=mitigate   f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> update valuegraphbuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> update networkbuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> enable goodtime-api  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> fix misspelled sec-websocket-version header.  the correct name is sec-websocket-version  not sec-websocket-versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> match the casing of the websocket  headers to the rfc directly.  relnotes=match the casing of the websocket  headers to the rfc directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> update public suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> remove outdated references to the  next release of guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> update to truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> migrate from isnotsameas to isnotsameinstanceas.  the two behave identically  and isnotsameas is being removed.  8c4225f652e289025040f2454fefeaa90671310f;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> override a method instead of special-casing it75e7b296f6530a9f58b501822457fc3be03e7948-------<p> mitigate  by guessing that sets are already deduplicated and making ""half and half"" expectations about un-duplicated inputs in immutableset creationrelnotesmitigate  update valuegraphbuilder documentation with option of building an immutable graph5879ed3133f4154ccca013941166be8c61f1ed97-------<p> update networkbuilder documentation with option of building an immutable graphcdb288c576ff3c1e71e0315cde03cc68e4af33f3-------<p> enable goodtime-apib34102f9b9ea11187de8f9961d02ab4d7e603fae-------<p> fix misspelled sec-websocket-version headerthe correct name is sec-websocket-version not sec-websocket-versions86ffa6e267b88db547b7aab9587d3e8a19081bf0-------<p> match the casing of the websocket  headers to the rfc directlyrelnotesmatch the casing of the websocket  headers to the rfc directly517b59607597d659fb54bc6c71e33e974c41c494-------<p> update public suffix data646d0e06333a3b64b101fdbe0ef93fa948b62c49-------<p> remove outdated references to the ""next release of guava""f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237-------<p> update to truth 044b61237ca571489a0a0ac738f707a4a0359c59e86-------<p> migrate from isnotsameas to isnotsameinstanceasthe two behave identically and isnotsameas is being removed8c4225f652e289025040f2454fefeaa90671310f";;;;;1;1;migrate from isnotsameas to isnotsameinstanceasthe two behave identically and isnotsameas is being removed-------------created by moe: https://githubcom/google/moemoe_migrated_revid245089419;
3449;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> mitigate  by guessing that sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in immutableset creation.  relnotes=mitigate   f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> update valuegraphbuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> update networkbuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> enable goodtime-api  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> fix misspelled sec-websocket-version header.  the correct name is sec-websocket-version  not sec-websocket-versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> match the casing of the websocket  headers to the rfc directly.  relnotes=match the casing of the websocket  headers to the rfc directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> update public suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> remove outdated references to the  next release of guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> update to truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> migrate from isnotsameas to isnotsameinstanceas.  the two behave identically  and isnotsameas is being removed.  8c4225f652e289025040f2454fefeaa90671310f;;0;make functions pow and power aliases;currently pow() was the name of the method supportedand this commit added pow as an alias and renamed themethod as power which is conistent with ansitesting: added unit test;closing created in error ||;;;;0;1;;
3449;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> mitigate  by guessing that sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in immutableset creation.  relnotes=mitigate   f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> update valuegraphbuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> update networkbuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> enable goodtime-api  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> fix misspelled sec-websocket-version header.  the correct name is sec-websocket-version  not sec-websocket-versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> match the casing of the websocket  headers to the rfc directly.  relnotes=match the casing of the websocket  headers to the rfc directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> update public suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> remove outdated references to the  next release of guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> update to truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> migrate from isnotsameas to isnotsameinstanceas.  the two behave identically  and isnotsameas is being removed.  8c4225f652e289025040f2454fefeaa90671310f;;0;2x: remove duplication of optional api behavior;get() throws nse when absent and orelse(t) returns the provided value when absent; friendly ping! just need a second collaborator to review || ;;;;1;1;remove duplication of optional api behaviorget() throws nse when absent and orelse(t) returns the provided value when absent;
3455;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fixed some links.  the comparisons to the android hash* classes haven t been accurate since at least cl 81367572  so i ve removed them entirely.  3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named() to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> migrate from is(not)sameas to is(not)sameinstanceas.  they behave identically  and the old names are being removed.  open-source note: the new methods are available in truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> a few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> remove checkedfuture from guava.  relnotes=removed deprecated  checkedfuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7;;0;update to airlift 0114;;;;;;0;1;;
3455;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fixed some links.  the comparisons to the android hash* classes haven t been accurate since at least cl 81367572  so i ve removed them entirely.  3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named() to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> migrate from is(not)sameas to is(not)sameinstanceas.  they behave identically  and the old names are being removed.  open-source note: the new methods are available in truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> a few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> remove checkedfuture from guava.  relnotes=removed deprecated  checkedfuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7;;0;onerrorfailedexception fix;https://githubcom/reactivex/rxjava/issues/2998;"looks good to me  could you also fix the similar issues in `observablesubscribe` and `observableunsubscribe`? here are tests to reproduce them:```    @test(expected  onerrorfailedexceptionclass)    public void testonerrorexceptionisthrownfromsubscribe() {        observable<integer>create(s1 ->                        observable<integer>create(s2 -> {                            throw new illegalargumentexception(""original exception"")                        })subscribe(s1)        )subscribe(systemout::println e -> {            throw new runtimeexception()        })    }    @test(expected  onerrorfailedexceptionclass)    public void testonerrorexceptionisthrownfromunsafesubscribe() {        observable<integer>create(s1 ->                        observable<integer>create(s2 -> {                            throw new illegalargumentexception(""original exception"")                        })unsafesubscribe(s1)        )subscribe(systemout::println e -> {            throw new runtimeexception()        })    }``` || i would replace error handling in both of these methods with simple```    } catch (throwable e) {        exceptionsthrowiffatal(e)        try {            subscriberonerror(hookonsubscribeerror(e))        } catch (throwable e2) {            throw new onerrorfailedexception(e2)        }        return subscriptionsunsubscribed()    }```however i think that the problem should be handled more generally the entire error handling policy should be reviewed and enforcedotherwise we will always see swallowed exceptions here and thereunfortunately i dont have time right now to investigate the issue ive just  what creates troubles for my current project || thanks for digging in to help with this i thought we had squashed all of these swallowing of errors! apparently not :-( || :+1: go ahead with this @akarnokd if youre still good with it  || it is good as it is merging the thing @zsxwing asked for can be done in a separate pr || ";;;;1;1;onerrorfailedexception fix;
3455;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fixed some links.  the comparisons to the android hash* classes haven t been accurate since at least cl 81367572  so i ve removed them entirely.  3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named() to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> migrate from is(not)sameas to is(not)sameinstanceas.  they behave identically  and the old names are being removed.  open-source note: the new methods are available in truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> a few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> remove checkedfuture from guava.  relnotes=removed deprecated  checkedfuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7;;3398.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p>  some linksthe comparisons to the android hash* classes havent been accurate since at least cl 81367572 so ive removed them entirely33981dc514b56a0fa213baa242acf9e58163638abef8-------<p> migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be presente70a2f9e53583c1c508a0f7b16bdcad8c3f2f740-------<p> migrate from is(not)sameas to is(not)sameinstanceasthey behave identically and the old names are being removedopen-source note: the new methods are available in truth as of version 044c19256717b493127a355fabf1eeb827fd0c64973-------<p> a few more doc tweaks caught by @jbduncan in f2591b5c2a414084c20aeb4b74fb85eab5cf0a787d76234939-------<p> remove checkedfuture from guavarelnotesremoved deprecated `checkedfuture` and related utilitiescae1b9190e4bad3b6c01afbb08d9b0a366813c99-------<p> migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be present1f5c4780e522c32f9412e29cd2880124c81275e7";; some links;updated invalid links where i could find an alternative removed others;;1;0;"migrate from assertthat(foo)named(""foo"") to assertwithmessage(""foo"")that(foo)(the exact change is slightly different in some cases like when using custom subjects or check() but its always a migration from named() to [assert]withmessage())named() is being removedthis cl may slightly modify the failure messages produced but all the old information will still be present-------------created by moe: https://githubcom/google/moemoe_migrated_revid246367399";
3474;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add faketicker.advance(duration) and setautoincrementstep(duration).  #goodtime  relnotes=add faketicker.advance(duration) and setautoincrementstep(duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> add queues.drain(blockingqueue  collection  int  duration) and drainuninterruptibly(blockingqueue  collection  int  duration).  relnotes=add duration-based queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> add a new header field  cdn-loop  to   more details:   relnotes=add cdn-loop header to library according to rfc8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> remove app.link from the public suffix list.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add faketickeradvance(duration) and setautoincrementstep(duration)#goodtimerelnotesadd faketickeradvance(duration) and setautoincrementstep(duration)dcb5d431e288374666b70214de836ee09053b425-------<p> add queuesdrain(blockingqueue collection int duration) and drainuninterruptibly(blockingqueue collection int duration)relnotesadd duration-based queues drain methods5963112d7548abb44f5502d0bec1edda91d530fc-------<p> add a new header field ""cdn-loop"" to  details:  cdn-loop header to library according to rfc8586d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae-------<p> remove applink from the public suffix list8fa55701cc99c3016e9bda5b2807921c0e8b39cd";;;;;1;1;remove applink from the public suffix list-------------created by moe: https://githubcom/google/moemoe_migrated_revid247658982;
3474;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add faketicker.advance(duration) and setautoincrementstep(duration).  #goodtime  relnotes=add faketicker.advance(duration) and setautoincrementstep(duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> add queues.drain(blockingqueue  collection  int  duration) and drainuninterruptibly(blockingqueue  collection  int  duration).  relnotes=add duration-based queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> add a new header field  cdn-loop  to   more details:   relnotes=add cdn-loop header to library according to rfc8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> remove app.link from the public suffix list.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd;;0;inserting into a view fails with wrong error message;``` javapresto:test> create view tmp_view as select * from tmp_srccreate viewpresto:test> insert into tmp_view select * from tmp_srcquery 20150819_235034_04115_tyk28 failed: table raptortesttmp_view does not existcomfacebookprestosqlanalyzersemanticexception: table raptortesttmp_view does not exist    at comfacebookprestosqlanalyzerstatementanalyzervisitinsert(statementanalyzerjava:371)    at comfacebookprestosqlanalyzerstatementanalyzervisitinsert(statementanalyzerjava:115)    at comfacebookprestosqltreeinsertaccept(insertjava:46)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzeranalyzeranalyze(analyzerjava:52)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:256)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:242)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:206)    at comfacebookprestoexecutionqueuedexecutionlambda$start$65(queuedexecutionjava:68)    at comfacebookprestoexecutionqueuedexecution$$lambda$523/1798497265run(unknown source)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```;;;;;0;1;;
3474;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add faketicker.advance(duration) and setautoincrementstep(duration).  #goodtime  relnotes=add faketicker.advance(duration) and setautoincrementstep(duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> add queues.drain(blockingqueue  collection  int  duration) and drainuninterruptibly(blockingqueue  collection  int  duration).  relnotes=add duration-based queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> add a new header field  cdn-loop  to   more details:   relnotes=add cdn-loop header to library according to rfc8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> remove app.link from the public suffix list.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd;;0;fix indentation;; :+1:// id also add `{}` to the `if`s   ||  great thanks for contributing ||;;;;1;1;add brackets to the ifs;
3486;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> copy durations.saturatedtonanos(duration) to package-private c.g.c.u.c.internal so it can be used by the concurrent package (and in guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> tighten the goodtime suppression locations in ratelimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> add duration-based overloads to uninterruptibles.  #goodtime  relnotes=add duration-based overloads to uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> always complete timeoutfuture  even if tostring() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> add duration-based overloads to moreexecutors.  #goodtime  relnotes=add duration-based overloads to moreexecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> add duration-based overloads to fluentfuture.  #goodtime  relnotes=add duration-based overloads to fluentfuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> add duration-based overloads to futures.  #goodtime  relnotes=add duration-based overloads to futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> add duration-based overloads to abstractscheduledservice.  #goodtime  relnotes=add duration-based overloads to abstractscheduledservice.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> add duration-based overloads to service.  #goodtime  relnotes=add duration-based overloads to service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> add duration-based overloads to servicemanager.  #goodtime  relnotes=add duration-based overloads to servicemanager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> remove checkedfuture utilities from util.concurrent.futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> add duration-based overloads to ratelimiter.  #goodtime  relnotes=add duration-based overloads to ratelimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> add duration-based overload to monitor.  #goodtime  relnotes=add duration-based overload to monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> define project build source encoding as utf-8  closes   196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> fix  apache license  version 2.0  spelling  there are many java libraries licensed under  apache license  version 2.0  that do not use its official spelling. this causes issues like  with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. this pr changes the license spelling to the official one  as advised by maven developers.  closes   eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> fix streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> add mediatype for  application/geo+json .  via   relnotes=add mediatype for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> upgrade maven-javadoc-plugin to 3.1.0.  fixes   34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> add cross-origin-resource-policy header name constants.  details   relnotes=add cross-origin-resource-policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> fix javadoc links.  fixes   86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> update documentation to refer correct method name.    relnotes=n/a  a6f7253500de9a6a88c56e94858759c437dee20b;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add a link back to the goodtime rate bug5750fb6c05d0f8b32060f56b0a94a12a52c89260-------<p> copy durationssaturatedtonanos(duration) to package-private cgcucinternal so it can be used by the concurrent package (and in guava)#goodtime568cbb67101fdb56436e75467a23de8d027b1089-------<p> tighten the goodtime suppression locations in ratelimiter#goodtime0df55a98cf54e2c3ccf1c1180ad4a20419d69a55-------<p> add duration-based overloads to uninterruptibles#goodtimerelnotesadd duration-based overloads to uninterruptiblese194e7578e5e8fea2edddd5a9544ebdeac961141-------<p> always complete timeoutfuture even if tostring() throws6c09c1732c040050752b5a087a1070ebf899ae9f-------<p> add duration-based overloads to moreexecutors#goodtimerelnotesadd duration-based overloads to moreexecutorse2da132822d1e62d000564e51816c789dc823998-------<p> add duration-based overloads to fluentfuture#goodtimerelnotesadd duration-based overloads to fluentfuture7f5390dcb99c6930facb2a91cca056a25b8581a4-------<p> add duration-based overloads to futures#goodtimerelnotesadd duration-based overloads to futures070e07da83e8320f2c368709cb773f08a383797f-------<p> add duration-based overloads to abstractscheduledservice#goodtimerelnotesadd duration-based overloads to abstractscheduledservicee7a7a1f0c4962231d73f72d101deeaa2c2b0144c-------<p> add duration-based overloads to service#goodtimerelnotesadd duration-based overloads to service76718f4617a2d4daea00a578f808cae59c5cdc59-------<p> add duration-based overloads to servicemanager#goodtimerelnotesadd duration-based overloads to servicemanager6c6edfa0b24148d5665a8e31a1811df7045b9460-------<p> remove checkedfuture utilities from utilconcurrentfuturesd3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b-------<p> add duration-based overloads to ratelimiter#goodtimerelnotesadd duration-based overloads to ratelimiter7aee4f5c283e501c854ae06aaa201fc5328ebe4f-------<p> add duration-based overload to monitor#goodtimerelnotesadd duration-based overload to monitorac540c41979ade6931d9d604eff1e6223e247a9a-------<p> define project build source encoding as utf-8closes  fix ""apache license version 20"" spellingthere are many java libraries licensed under ""apache license version 20"" that do not use its official spellingthis causes issues like  with every library defining its own spelling its difficult in large projects to have a clear view of all licenses in usethis pr changes the license spelling to the official one as advised by maven developerscloses  fix streamszip documentation typo8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65-------<p> add mediatype for ""application/geo+json""via  mediatype for ""application/geo+json""b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42-------<p> upgrade maven-javadoc-plugin to 310fixes  add cross-origin-resource-policy header name constantsdetails  cross-origin-resource-policy header to library161241d58e93dfdba5a9021d2ee8dc64e3cd3937-------<p> fix javadoc linksfixes  update documentation to refer correct method namehttps://docsoraclecom/javase/8/docs/api/java/util/maphtml#getordefault-javalangobject-v-relnotesn/aa6f7253500de9a6a88c56e94858759c437dee20b";;;;;1;1;update documentation to refer correct method name by moe: https://githubcom/google/moemoe_migrated_revid250009325;
3486;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> copy durations.saturatedtonanos(duration) to package-private c.g.c.u.c.internal so it can be used by the concurrent package (and in guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> tighten the goodtime suppression locations in ratelimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> add duration-based overloads to uninterruptibles.  #goodtime  relnotes=add duration-based overloads to uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> always complete timeoutfuture  even if tostring() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> add duration-based overloads to moreexecutors.  #goodtime  relnotes=add duration-based overloads to moreexecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> add duration-based overloads to fluentfuture.  #goodtime  relnotes=add duration-based overloads to fluentfuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> add duration-based overloads to futures.  #goodtime  relnotes=add duration-based overloads to futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> add duration-based overloads to abstractscheduledservice.  #goodtime  relnotes=add duration-based overloads to abstractscheduledservice.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> add duration-based overloads to service.  #goodtime  relnotes=add duration-based overloads to service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> add duration-based overloads to servicemanager.  #goodtime  relnotes=add duration-based overloads to servicemanager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> remove checkedfuture utilities from util.concurrent.futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> add duration-based overloads to ratelimiter.  #goodtime  relnotes=add duration-based overloads to ratelimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> add duration-based overload to monitor.  #goodtime  relnotes=add duration-based overload to monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> define project build source encoding as utf-8  closes   196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> fix  apache license  version 2.0  spelling  there are many java libraries licensed under  apache license  version 2.0  that do not use its official spelling. this causes issues like  with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. this pr changes the license spelling to the official one  as advised by maven developers.  closes   eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> fix streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> add mediatype for  application/geo+json .  via   relnotes=add mediatype for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> upgrade maven-javadoc-plugin to 3.1.0.  fixes   34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> add cross-origin-resource-policy header name constants.  details   relnotes=add cross-origin-resource-policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> fix javadoc links.  fixes   86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> update documentation to refer correct method name.    relnotes=n/a  a6f7253500de9a6a88c56e94858759c437dee20b;;0;interrupt rewrites if the thread is interrupted;;;;;;0;1;;
3486;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> copy durations.saturatedtonanos(duration) to package-private c.g.c.u.c.internal so it can be used by the concurrent package (and in guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> tighten the goodtime suppression locations in ratelimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> add duration-based overloads to uninterruptibles.  #goodtime  relnotes=add duration-based overloads to uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> always complete timeoutfuture  even if tostring() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> add duration-based overloads to moreexecutors.  #goodtime  relnotes=add duration-based overloads to moreexecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> add duration-based overloads to fluentfuture.  #goodtime  relnotes=add duration-based overloads to fluentfuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> add duration-based overloads to futures.  #goodtime  relnotes=add duration-based overloads to futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> add duration-based overloads to abstractscheduledservice.  #goodtime  relnotes=add duration-based overloads to abstractscheduledservice.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> add duration-based overloads to service.  #goodtime  relnotes=add duration-based overloads to service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> add duration-based overloads to servicemanager.  #goodtime  relnotes=add duration-based overloads to servicemanager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> remove checkedfuture utilities from util.concurrent.futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> add duration-based overloads to ratelimiter.  #goodtime  relnotes=add duration-based overloads to ratelimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> add duration-based overload to monitor.  #goodtime  relnotes=add duration-based overload to monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> define project build source encoding as utf-8  closes   196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> fix  apache license  version 2.0  spelling  there are many java libraries licensed under  apache license  version 2.0  that do not use its official spelling. this causes issues like  with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. this pr changes the license spelling to the official one  as advised by maven developers.  closes   eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> fix streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> add mediatype for  application/geo+json .  via   relnotes=add mediatype for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> upgrade maven-javadoc-plugin to 3.1.0.  fixes   34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> add cross-origin-resource-policy header name constants.  details   relnotes=add cross-origin-resource-policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> fix javadoc links.  fixes   86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> update documentation to refer correct method name.    relnotes=n/a  a6f7253500de9a6a88c56e94858759c437dee20b;;0;1x: remove unused imports;;   lets merge this? || thanks for the contribution ||;;;;1;1;remove unused imports;
3495;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  setfuture .  relnotes=removed  @beta  from  setfuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> upgrade maven-gpg-plugin to 1.6  fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> clarify behavior of  immutablelist#copyof  for null argument.  3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> make the incidentedges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> simplify implementation of graphs.reachablenodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> make the adjacentnodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> delete deprecated callwithtimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249;;0;minor refactoring for raptorsplitmanager;;this is in preparation of a larger refactoring that we need to do for `storagemanager` || ;;;;0;1;;
3495;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  setfuture .  relnotes=removed  @beta  from  setfuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> upgrade maven-gpg-plugin to 1.6  fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> clarify behavior of  immutablelist#copyof  for null argument.  3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> make the incidentedges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> simplify implementation of graphs.reachablenodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> make the adjacentnodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> delete deprecated callwithtimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249;;0;1x: benchmark just() and its optimizations;this add a perf class that benchmarks just() and optimizations it allows ill use this as a baseline to compare the upcoming backpressure-aware version againstbenchmark results of throughput (ops/s) (i7 4790 windows 7 x64 java 8u66):(https://cloudentcom/assets/1269832/10963349/0d15c6e8-83a0-11e5-9f28-646b57d08879png);;;;;1;1;1x: benchmark just() and its optimizations;
3495;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  setfuture .  relnotes=removed  @beta  from  setfuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> upgrade maven-gpg-plugin to 1.6  fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> clarify behavior of  immutablelist#copyof  for null argument.  3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> make the incidentedges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> simplify implementation of graphs.reachablenodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> make the adjacentnodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> delete deprecated callwithtimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249;;3485.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `setfuture`relnotesremoved `@beta` from `setfuture`2c717c0092ad5abbbe6a34d426e084623c651354-------<p> upgrade maven-gpg-plugin to 16fixes githubcom/google/guava/pull/3490c10a1647ffa968a96273d0961a6f9e0181a4fe70-------<p> clarify behavior of `immutablelist#copyof` for null argument34856f655fb940809499719ba7679a425961e39a8feb-------<p> make the incidentedges() documentation a little bit more clearb0a05097900ab2decf17681d3dcd9154f225d91f-------<p> simplify implementation of graphsreachablenodes()b917492c31401a2e6092c8f3f6bc60040c1dcebe-------<p> make the adjacentnodes() documentation a little bit more clear7a5a43b66a4f0a22077918404fa95a165ede2811-------<p> delete deprecated callwithtimeout()fa13235f2c8edff9cd6c434f8a164250decf0249;;clarify behavior of `immutablelist#copyof` for null argument;;afaik this is the behavior of all immutablecollection types the class javadoc on immutablelist explicitly refers to the immutablecollection which mentions this at the top so these changes don‘t seem necessary || the factories are tested by other automated null tests so lets not add more teststhe existing doc is trying to say that the methods reject null elements but its saying it poorly so thanks for raising this how about this?```@throws nullpointerexception if {@code elements} contains a null element```that skips mentioning that `elements` itself might be `null` but we always skip that preferring to annotate the parameters that _can_ be `null` with `@nullable` (otherwise nearly all of our methods would have `@throws nullpointerexception if x y or z is null`) ||;1;0;delete deprecated callwithtimeout()relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid251819931;
3525;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix typo in immutablelist.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  relnotes=update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> add a test for longadder overflow behavior.  see   558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> saturate longadder.sum() results to long.max_value during an overflow.  fixes   relnotes=fix potential overflow/iae during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> add rangemap#merge  analogous to map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** reason for rollback ***  breaking a number of projects  *** original change description ***  add rangemap#merge  analogous to map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix typo in immutablelistjava922214b3068213d28b20316997a9bbab77080d52-------<p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now its been adopted by webappsecrelnotesupdate fetch metadata (formerly sec-metadata) headers to point to w3c documentation now its been adopted by webappsec2ae2f73318946f99f05af4e0867fb04495ee66bf-------<p> add a test for longadder overflow behaviorsee  fix some rawtypes in comgooglecommoncache310de86d74c2c77924c1a69d22c7acdf286bd258-------<p> saturate longaddersum() results to longmax_value during an overflowfixes  potential overflow/iae during cache stats calculationsb28a260a3b847b627cc4c33dd4fd6bed05d4e2f6-------<p> add rangemap#merge analogous to map#merge8dc46a72fa5417d02063052f05fd0355703411fc-------<p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc*** reason for rollback ***breaking a number of projects*** original change description ***add rangemap#merge analogous to map#merge***44d0870b7e4d6a9fa8cca847bf35652111bd7539;;;;;1;1;automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc*** reason for rollback ***breaking a number of projects*** original change description ***add rangemap#merge analogous to map#merge***-------------created by moe: https://githubcom/google/moemoe_migrated_revid256288437;
3525;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix typo in immutablelist.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  relnotes=update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> add a test for longadder overflow behavior.  see   558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> saturate longadder.sum() results to long.max_value during an overflow.  fixes   relnotes=fix potential overflow/iae during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> add rangemap#merge  analogous to map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** reason for rollback ***  breaking a number of projects  *** original change description ***  add rangemap#merge  analogous to map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539;;0;validate schema name in show tables;;please add a test for this || added unit tests || looks like there are test failures || @cberner updated the tests || ;;;;0;1;;
3525;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix typo in immutablelist.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  relnotes=update fetch metadata (formerly sec-metadata) headers to point to w3c documentation now it s been adopted by webappsec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> add a test for longadder overflow behavior.  see   558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> saturate longadder.sum() results to long.max_value during an overflow.  fixes   relnotes=fix potential overflow/iae during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> add rangemap#merge  analogous to map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** reason for rollback ***  breaking a number of projects  *** original change description ***  add rangemap#merge  analogous to map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539;;0;deploy 1016 javadocs to http://reactivexio/rxjava/javadoc/;current javadocs on the web site point to 1011 if the release javadocs are available somewhere update a symlink related issue is #2631; in #3705 ;;;;0;1;;
3531;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that sortedsetmultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.  09bf107763561ae37ddd99cf024d6c5604eedfff  -------  <p> remove unneeded @suppresswarnings from @benchmark methods.  relnotes=none  3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f  -------  <p> rename a method to avoid j2objc collisions  prevent j2objc from treating  getaddsuppressed  as a getter by renaming it  generateaddsuppressed . this silences a -wobjc-property-implementation warning  soon  such warnings will become errors. see the referenced bug for full context.  cc5a55e487791db6ab2b7a98bcfd1be69d7a3638;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> clarify that sortedsetmultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order09bf107763561ae37ddd99cf024d6c5604eedfff-------<p> remove unneeded @suppresswarnings from @benchmark methodsrelnotesnone3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f-------<p> rename a method to avoid j2objc collisionsprevent j2objc from treating `getaddsuppressed` as a getter by renaming it `generateaddsuppressed` this silences a -wobjc-property-implementation warning soon such warnings will become errors see the referenced bug for full contextcc5a55e487791db6ab2b7a98bcfd1be69d7a3638;@ronshapiro the comment above looks like a very strange attempt at spam vote to remove it? :)(if you agree ill remove this comment too to prevent confusion) ||;;;;1;1;rename a method to avoid j2objc collisionsprevent j2objc from treating `getaddsuppressed` as a getter by renaming it `generateaddsuppressed` this silences a -wobjc-property-implementation warning soon such warnings will become errors see the referenced bug for full contextrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid257616241;
3531;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that sortedsetmultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.  09bf107763561ae37ddd99cf024d6c5604eedfff  -------  <p> remove unneeded @suppresswarnings from @benchmark methods.  relnotes=none  3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f  -------  <p> rename a method to avoid j2objc collisions  prevent j2objc from treating  getaddsuppressed  as a getter by renaming it  generateaddsuppressed . this silences a -wobjc-property-implementation warning  soon  such warnings will become errors. see the referenced bug for full context.  cc5a55e487791db6ab2b7a98bcfd1be69d7a3638;;0;push projections through join;for  @dain @electrum @cberner comments are appreciated;did you try adding this to `projectionpushdown`? || @nileema i could add this to projectionpushdown then this projectionpushthroughjoin will interleaved with projectionpushthroughunion in visitproject() i think then i need a system session property to configure whether to enable this or not currently i am using featureconfig what do you think? is it better to be in projectionpushdown? || lets keep it separate fwiw thats where were going with the new optimizer (small targeted rules that get explored and applied independently) || it looks like there are test failures can you look into those? || thanks @cberner get them  || thanks @martint get comments addressed || kindly ping || rebased to the current master @martint @cberner @electrum @nileema would you please review? || rebased @martint @nileema @cberner could you take a review when you are free? || @martint @erichwang @cberner ur comments are welcome || sorry i missed your comment could you rebase this and then i can take a look? || @cberner rebased || i see a lot of test failures in travis can you take a look at those? || @cberner get it updated your comments are appreciated || @cberner @dain @electrum @martint would you please review when you are free? || @martint @nileema @cberner could you please review when you are free? || thank you @martint get comments addressedwould you please review when you are free? || @martint kindly ping || @martint kindly ping || @martint kindly ping || @sopel39 @martint could you revisit this pr and either close or apply the requested changes? || this pull request has been automatically marked as stale because it has not had recent activity if youd still like this pr merged please comment on the task make sure youve addressed reviewer comments and rebase on the latest master thank you for your contributions! ||;;;;0;1;;
3533;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add rangemap#merge  analogous to map#merge.  rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add rangemap#merge analogous to map#mergerollback of 8000dc992d0124372972729b20df40a42b27a849cebc1985b8d64f3960e363b5641428447e6d33ae;;;;;1;1;add rangemap#merge analogous to map#mergerollback of 8000dc992d0124372972729b20df40a42b27a849-------------created by moe: https://githubcom/google/moemoe_migrated_revid258637808;
3533;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add rangemap#merge  analogous to map#merge.  rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae;;0;keep partitions during hivetablelayouthandle json serde;;this is a pre-requisite for hive metadata delete || back to you for some comments || shelving this pull request because of impacts on other uses of tablelayouthandle as a result serializing partitions given we observed hive table with 1m partitions ||;;;;0;1;;
3533;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add rangemap#merge  analogous to map#merge.  rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae;;0;adjust backpressure buffer (onbackpressurelatest/observeon used);"rxjava 1016:i have an `interval()` which emits items (created in `computation` thread) with a rate of eg 100msi then change the thread and my scheduler can consume with are rate of 1s and requests 1 item per time(android) code:``` javainterval(0 100 timeunitmilliseconds) // computation thread        doonnext(along -> wtf(""interval onnext"" stringvalueof(along)))        onbackpressurelatest()        observeon(androidschedulersmainthread())        subscribe(new subscriber<long>() {            @override            public void onstart() {consumed                superonstart()                request(1)            }            @override            public void oncompleted() {            }            @override            public void onerror(throwable e) {                eprintstacktrace()            }            @override            public void onnext(long along) {                try {                    threadsleep(1000)                    wtf(""consumed"" stringvalueof(along))                    request(1)                } catch (interruptedexception e) {                    eprintstacktrace()                }            }        })```the code above will print:```interval onnext: 0interval onnext: 1    interval onnext: 10consumed: 0interval onnext: 11// and after a while:interval onnext: 162consumed: 15interval onnext: 163    interval onnext: 173consumed: 162interval onnext: 174```---##### feature question/proposal:the jump form ""consumed 15"" to ""324"" is because the rxringbuffersize in android is 16 the only way to make it lower number is to create a new `operatorobserveon` which requests 1 instead of the 16 which is ugly solution any thoughts on that?---##### question:even if my new ""operatorobserveon"" which requests only 1 item (described above) is used instead of the observeon then the ""consumed"" will not be a sequence of 16 but a ""more real time-ish"" result:```interval onnext: 0    interval onnext: 10consumed: 0interval onnext: 11    interval onnext: 20consumed: 10interval onnext: 21    interval onnext: 30consumed: 20```still the ""consumed"" is receiving the emition of the last ""inverval onnext"" is the lock in `operatoronbackpressurelatestlatestemitter` working as expected?is something like ""as soon as my subscriber requests i want the really latest object - drop the previous ones"" with rxjava? the example below will look like the expected behavior assuming always that we have a slower consumption that object generation and different threads ```interval onnext: 0    interval onnext: 10consumed: 10interval onnext: 11    interval onnext: 20consumed: 20interval onnext: 21    interval onnext: 30consumed: 30```---thanks!";the operator `onbackpressurelatest` can introduce disontinuity especially if the drain happens on another thread and the latest value keeps changing underneath even if there are plenty of requeststhe javadoc states this:> note that due to the nature of how backpressure requests are propagated through subscribeon/observeon requesting more than 1 from downstream doesnt guarantee a continuous delivery of onnext events || i dont know if `observeon` will expose its prefetch amount in 1xim closing this old question for now let me know if you need further assistance ||;;;;0;1;;
3551;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove inaccurate comment.  2cc9ccd8f58402927f4903ebf40f19a63f47c789  -------  <p> change the splitter::limit arg to maxitems  for ide usage.  the old name of  limit  was uninformative when presented in e.g. ide autocompletions.  maxitems  will help distinguish it from the alternative meaning of max number of splits to make.  013d0f1b058f7c6e3ac159745fcead5f481f5b66  -------  <p> gwt.xml change from internal change.  a13896bd6b55883dbe1f4ae71603597f3831a89d  -------  <p> add mediatype for  image/heif  and  image/jp2   relnotes=add mediatype for  image/heif  and  image/jp2   4c70d7f3c3083946aa74e59098b51f521da27239  -------  <p> change a use of iterable.foreach  which isn t available under desugar.  6508a374b7483ea2ec7f5170b94489cb9dc3537d;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove inaccurate comment2cc9ccd8f58402927f4903ebf40f19a63f47c789-------<p> change the splitter::limit arg to maxitems for ide usagethe old name of `limit` was uninformative when presented in eg ide autocompletions `maxitems` will help distinguish it from the alternative meaning of max number of splits to make013d0f1b058f7c6e3ac159745fcead5f481f5b66-------<p> gwtxml change from internal changea13896bd6b55883dbe1f4ae71603597f3831a89d-------<p> add mediatype for ""image/heif"" and ""image/jp2""relnotesadd mediatype for ""image/heif"" and ""image/jp2""4c70d7f3c3083946aa74e59098b51f521da27239-------<p> change a use of iterableforeach which isnt available under desugar6508a374b7483ea2ec7f5170b94489cb9dc3537d";;;;;1;1;change a use of iterableforeach which isnt available under desugar-------------created by moe: https://githubcom/google/moemoe_migrated_revid260986815;
3551;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove inaccurate comment.  2cc9ccd8f58402927f4903ebf40f19a63f47c789  -------  <p> change the splitter::limit arg to maxitems  for ide usage.  the old name of  limit  was uninformative when presented in e.g. ide autocompletions.  maxitems  will help distinguish it from the alternative meaning of max number of splits to make.  013d0f1b058f7c6e3ac159745fcead5f481f5b66  -------  <p> gwt.xml change from internal change.  a13896bd6b55883dbe1f4ae71603597f3831a89d  -------  <p> add mediatype for  image/heif  and  image/jp2   relnotes=add mediatype for  image/heif  and  image/jp2   4c70d7f3c3083946aa74e59098b51f521da27239  -------  <p> change a use of iterable.foreach  which isn t available under desugar.  6508a374b7483ea2ec7f5170b94489cb9dc3537d;;0;fix bug in bigintgroupbyhash;when set is rehashed and contains a null the value zero will appear tobe contained in the set in addition to null;looks good  ||;;;;0;1;;
3551;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove inaccurate comment.  2cc9ccd8f58402927f4903ebf40f19a63f47c789  -------  <p> change the splitter::limit arg to maxitems  for ide usage.  the old name of  limit  was uninformative when presented in e.g. ide autocompletions.  maxitems  will help distinguish it from the alternative meaning of max number of splits to make.  013d0f1b058f7c6e3ac159745fcead5f481f5b66  -------  <p> gwt.xml change from internal change.  a13896bd6b55883dbe1f4ae71603597f3831a89d  -------  <p> add mediatype for  image/heif  and  image/jp2   relnotes=add mediatype for  image/heif  and  image/jp2   4c70d7f3c3083946aa74e59098b51f521da27239  -------  <p> change a use of iterable.foreach  which isn t available under desugar.  6508a374b7483ea2ec7f5170b94489cb9dc3537d;;0;update changesmd for v1017;;is there anything else not yet merged that is urgent or high priority that we should consider before cutting this release?  || well i hoped to add some `rxsingle` operators but looks like i wont be able to do it this week can we expect 111 this month? || @artem-zinnatullin there isnt a release schedule so i really couldnt tell you  || okay lgtm  #3491 ||  #3491 from me too we really need this bug fix in || im looking at #3491 || ive gone ahead and merged #3491 sorry for the delay  || ;;;;1;1;update changesmd for v1017;
3560;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix an issue where the inputstream returned by baseencoding.decodingstream(reader) could fail to throw decodingexception while decoding an invalid string.  this was caused by the default behavior of inputstream.read(byte  int  int)  which swallows any ioexception thrown by any call to the single-byte read() method other than the first. to fix it  just override that method with an implementation that does not swallow any exceptions.  fixes   4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> add more clarification on what  access  means in expireafteraccess(). previous comment doesn t mention  containskey()   copied from   relnotes=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> document that hashbimap.containsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmap.containsvalue()).  1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> add note about {@code bytesource.wrap} s use of the given byte array.  fixes   9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> fix  by implementing a proper  collectspliterators.flatmapto{int long double} .  also  modify the existing  collectspliterators.flatmap  to accept  null  from its  function  by treating it as an empty  stream   like  stream.flatmap  does. add tests for this behavior.  to test that the new methods also accept  null  through both their  {int long double}consumer  apis and their  consumer  apis  add  of{int long double}  methods to  spliteratortester . they test the given  spliterator.of{int long double}  through both apis.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> temporarily update public_suffix to include web.app  without this  developers are not able to set up google oauth clients with urls in firebase hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262;;0;categorize hdfs read error for orc;;;;;;0;1;;
3560;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix an issue where the inputstream returned by baseencoding.decodingstream(reader) could fail to throw decodingexception while decoding an invalid string.  this was caused by the default behavior of inputstream.read(byte  int  int)  which swallows any ioexception thrown by any call to the single-byte read() method other than the first. to fix it  just override that method with an implementation that does not swallow any exceptions.  fixes   4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> add more clarification on what  access  means in expireafteraccess(). previous comment doesn t mention  containskey()   copied from   relnotes=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> document that hashbimap.containsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmap.containsvalue()).  1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> add note about {@code bytesource.wrap} s use of the given byte array.  fixes   9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> fix  by implementing a proper  collectspliterators.flatmapto{int long double} .  also  modify the existing  collectspliterators.flatmap  to accept  null  from its  function  by treating it as an empty  stream   like  stream.flatmap  does. add tests for this behavior.  to test that the new methods also accept  null  through both their  {int long double}consumer  apis and their  consumer  apis  add  of{int long double}  methods to  spliteratortester . they test the given  spliterator.of{int long double}  through both apis.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> temporarily update public_suffix to include web.app  without this  developers are not able to set up google oauth clients with urls in firebase hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262;;0;operatorbufferwithtime error;"hiaccording to the java docs > when the source {@link observable} completes or produces an error the current buffer is emitted and the event is propagated to all subscribed {@link subscriber}s""but in the code on error method clears chunks swallowing them without emitting:```        @override        public void onerror(throwable e) {            synchronized (this) {                if (done) {                    return                }                done  true                chunksclear()            }            childonerror(e)            unsubscribe()        }```according to the documentation  behaviour is expected so the java docs need correction ";the documentation is wrong it might be worth extending the api with the usual delayerror in 2x though || fix via #3561 ||;;;;0;1;;
3560;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix an issue where the inputstream returned by baseencoding.decodingstream(reader) could fail to throw decodingexception while decoding an invalid string.  this was caused by the default behavior of inputstream.read(byte  int  int)  which swallows any ioexception thrown by any call to the single-byte read() method other than the first. to fix it  just override that method with an implementation that does not swallow any exceptions.  fixes   4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> add more clarification on what  access  means in expireafteraccess(). previous comment doesn t mention  containskey()   copied from   relnotes=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> document that hashbimap.containsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmap.containsvalue()).  1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> add note about {@code bytesource.wrap} s use of the given byte array.  fixes   9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> fix  by implementing a proper  collectspliterators.flatmapto{int long double} .  also  modify the existing  collectspliterators.flatmap  to accept  null  from its  function  by treating it as an empty  stream   like  stream.flatmap  does. add tests for this behavior.  to test that the new methods also accept  null  through both their  {int long double}consumer  apis and their  consumer  apis  add  of{int long double}  methods to  spliteratortester . they test the given  spliterator.of{int long double}  through both apis.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> temporarily update public_suffix to include web.app  without this  developers are not able to set up google oauth clients with urls in firebase hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262;;1973.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix an issue where the inputstream returned by baseencodingdecodingstream(reader) could fail to throw decodingexception while decoding an invalid stringthis was caused by the default behavior of inputstreamread(byte int int) which swallows any ioexception thrown by any call to the single-byte read() method other than the first to fix it just override that method with an implementation that does not swallow any exceptionsfixes  add more clarification on what ""access"" means in expireafteraccess()previous comment doesnt mention ""containskey()""copied from  changef2bd7744e575393f065253c8f1bc2a512d452b63-------<p> document that hashbimapcontainsvalue() tends to run in faster-than-linear time (overriding the default documentation from abstractmapcontainsvalue())19737d57c233c9922ca9adbbef552b5f8f66bd7856f0-------<p> add note about {@code bytesourcewrap}s use of the given byte arrayfixes  fix  by implementing a proper `collectspliteratorsflatmapto{intlongdouble}`also modify the existing `collectspliteratorsflatmap` to accept `null` from its `function` by treating it as an empty `stream` like `streamflatmap` does add tests for this behaviorto test that the new methods also accept `null` through both their `{intlongdouble}consumer` apis and their `consumer` apis add `of{intlongdouble}` methods to `spliteratortester` they test the given `spliteratorof{intlongdouble}` through both apis0763099e769963bd0d93f865a4e7c3a5b320085a-------<p> temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain41b8aeaeb71cab1a151d4359a409bfd54bb81262";;javadoc of hashbimap#containsvalue #inverse;the inherited doc should be overridden and mentioned that containsvalue works in o(1) time in contrast to o(n) with a normal hashmapthe javadoc for #inverse should mention that it always returns the same inverse instance and thus saving the inverse as a separate instance variable is not mandatory to reduce overhead;ill put this on my list thankson fri feb 13 2015 at 5:05 am louis-cyphre notifications@githubcomwrote:> the inherited doc should be overridden and mentioned that containsvalue> works in o(1) time in contrast to o(n) with a normal hashmap> > the javadoc for #inverse should mention that it always returns the same> inverse instance and thus saving the inverse as a separate instance> variable is not mandatory to reduce overhead> > —> reply to this email directly or view it on github>  kevin bourrillion | java librarian | google inc | googlecom || is this issue approved? ||;1;0;temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain-------------created by moe: https://githubcom/google/moemoe_migrated_revid263577879;
3572;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add tostring() to forwardingfluentfuture  to match forwardingfuture  relnotes=n/a  cedfa4a718a128d30f9af953f304b425b52b6f94;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add tostring() to forwardingfluentfuture to match forwardingfuturerelnotesn/acedfa4a718a128d30f9af953f304b425b52b6f94;;;;;1;1;add tostring() to forwardingfluentfuture to match forwardingfuturerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid264467645;
3572;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add tostring() to forwardingfluentfuture  to match forwardingfuture  relnotes=n/a  cedfa4a718a128d30f9af953f304b425b52b6f94;;0;planning error in union query that requires coercions;``` sqlselect 0 0union allselect 10 0``````javalangillegalargumentexception    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:108)    at comfacebookprestosqlplannerrelationplannerprocessandcoerceifnecessary(relationplannerjava:494)    at comfacebookprestosqlplannerrelationplannerlambda$visitunion$141(relationplannerjava:528)    at comfacebookprestosqlplannerrelationplanner$$lambda$684/65557749apply(unknown source)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:512)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:502)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerrelationplannervisitunion(relationplannerjava:529)    at comfacebookprestosqlplannerrelationplannervisitunion(relationplannerjava:94)    at comfacebookprestosqltreeunionaccept(unionjava:51)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerqueryplannerplanquerybody(queryplannerjava:150)    at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:106)    at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:79)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:386)    at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:94)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerlogicalplannercreaterelationplan(logicalplannerjava:197)    at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:87)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:263)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:242)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:206)    at comfacebookprestoexecutionqueuedexecutionlambda$start$138(queuedexecutionjava:68)    at comfacebookprestoexecutionqueuedexecution$$lambda$267/903215923run(unknown source)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```;;;;;0;1;;
3572;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add tostring() to forwardingfluentfuture  to match forwardingfuture  relnotes=n/a  cedfa4a718a128d30f9af953f304b425b52b6f94;;0;20: extending observable/single;during my work on #3564 ive realized that `observable` and `single` are not very friendly for extending i mean you can extend them but as soon as you apply any operator from `observable` or `single` you wont be able to work with child class anymoreexample:``` javatestobservable  from(observablefrom(aslist(1 2 3 4 5))  map(number -> tojson(number)) // returns observable instead of testobservable  expecterror(illegalargumentexceptionclass) // we can not apply this operator because its not testobservable anymore  subscribe()```maybe we can change it in rxjava 2? its tricky but doable (and rxjava already has some kind of such thing — `extend` operator) i know several projects with custom `observable`s but not sure if it worth in general for the librarywhat do you think about this? if you want an example of a library that does something similar — assertj does it with its assertions  guess for rxjava it would require kind of `abstractobservable` where all common operators will live and then libraries/users will be able to extend it to add additional functionality with keeping child type after applying operators;+1 || [i dont think]( this is possible with javas typesystem the main reason for this is the need to return `<u extends abstractobservable>` from each method but u requires target typing to work ie if chained the compiler can only infer `abstractobservable` and not your subtype  || ok lets close it for now were currently solving it kotlins extention functions  ||;;;;0;1;;
3573;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;automated g4 rollback of changelist 263577879*** original change description ***temporarily update public_suffix to include webappwithout this developers are not able to set up google oauth clients with urls in firebase hosting webapp domain***-------------created by moe: https://githubcom/google/moemoe_migrated_revid264649425;
3573;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;fix null pointer exception caused by checksum();;;;;;0;1;;
3573;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;test pr;;;;;;0;1;;
3575;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constant for the upgrade-insecure-requests header.    relnotes=adds constant for the upgrade-insecure-requests header.  7e5aa662985c6e54396b1e751149bef17236bc27;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> adds constant for the upgrade-insecure-requests header constant for the upgrade-insecure-requests header7e5aa662985c6e54396b1e751149bef17236bc27;is there any reason why the javadoc for the user-agent field has been removed while adding the new field? || thanks looks like a mistake will fix ||;;;;1;1;adds constant for the upgrade-insecure-requests header constant for the upgrade-insecure-requests header-------------created by moe: https://githubcom/google/moemoe_migrated_revid264984423;
3575;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constant for the upgrade-insecure-requests header.    relnotes=adds constant for the upgrade-insecure-requests header.  7e5aa662985c6e54396b1e751149bef17236bc27;;0;add unit tests for displaying complex types;relates to https://githubcom/facebook/presto/commit/8a97b144eac4131225cda815c0561a0b9982bfab;thanks for the review!  addressed comments || ;;;;0;1;;
3575;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constant for the upgrade-insecure-requests header.    relnotes=adds constant for the upgrade-insecure-requests header.  7e5aa662985c6e54396b1e751149bef17236bc27;;0;fix typo in compositeexception documentation;;  ;;;;1;1;fix typo in compositeexception documentation;
3578;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> restore javadoc unintentionally lost in cl 264984423.    0a9ddbca861d787f2b1d110905e043c25dacfc89;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> restore javadoc unintentionally lost in cl 264984423https://githubcom/google/guava/pull/3575#issuecomment-5244402210a9ddbca861d787f2b1d110905e043c25dacfc89;;;;;1;1;restore javadoc unintentionally lost in cl 264984423 by moe: https://githubcom/google/moemoe_migrated_revid265346398;
3578;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> restore javadoc unintentionally lost in cl 264984423.    0a9ddbca861d787f2b1d110905e043c25dacfc89;;0;add unit test for reading parquet by column name;if useparquetcolumnnames is set to true the hive connector uses thecolumn name rather than the index in the hive table to look up thecolumn add testing for this casesee  for background and this test is for https://githubcom/facebook/presto/commit/0457f03bd703258e28f479d4d82cf72e97210d1b;;;;;0;1;;
3578;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> restore javadoc unintentionally lost in cl 264984423.    0a9ddbca861d787f2b1d110905e043c25dacfc89;;0;observable share() with skip() usage issue;"i have a code where the shared observable is used one of the shared instances there uses extra skip and debounce operators the problem is that sometimes the action for the instance where skip and debounce is used is not called```observable<integer> beginchanged  rxbindingutils        valuechanged(begin)        dooneach(value -> timberd(""begin value changed: "" + valuegetvalue()))        share()monitor(        beginchanged                map(minutes -> minutestotime(minutes))                subscribe(begintimeasaction()))monitor(        beginchanged                map(minutes -> minutes / interval)                subscribe(rangebeginasaction()))monitor(        beginchanged                 skip(1)// skip initial value emitted automatically right after the                        // subsription                debounce(500 timeunitmilliseconds)// such as range bar may change the                        // value very quickly use the                        // debounce function for the timeout                        // based processing                dooneach(value -> timberd(""begin value changed 2: "" + valuegetvalue()))                subscribe(mschedulerrangebeginasaction()))```if i replace the last occurrence of the beginchanges with the new observable it works as expected```monitor(        rxbindingutils                valuechanged(begin) // cant use shared observable because of unexpected behaviour with skip call                skip(1)// skip initial value emitted automatically right after the                        // subsription                debounce(500 timeunitmilliseconds)// such as range bar may change the                        // value very quickly use the                        // debounce function for the timeout                        // based processing                dooneach(value -> timberd(""begin value changed 2: "" + valuegetvalue()))                subscribe(mschedulerrangebeginasaction()))```are there any restrictions which dont allow to use skip and debounce on shared observables?";"there are no such restrictions what do you do when the action is not triggered? what happens if you dont have `debounce`? || the action is not triggered when i have single calls of the beginset() method (changing value manually in dialog) when i have multiple value changes within short interval (moving rangebar) the action is triggered properly || i can say that it works without skip regarding debounce i will check || removing debounce doesnt change the behaviour (the issue is still there) || strange could you try and use `publish()` instead of `share()` capture it with `connectableobservable` and call `connect()` after the last monitor call? it is likely `valuechanged` is hot could you completely remove `share` and see if it works or not? || @akarnokd thank you very much for your help with the publish - connect it works as expectedcode:```connectableobservable<integer> beginchanged  rxbindingutils        valuechanged(begin)        dooneach(value -> timberd(""begin value changed: "" + valuegetvalue()))        publish()monitor(        beginchanged                map(minutes -> minutestotime(minutes))                subscribe(begintimeasaction()))monitor(        beginchanged                map(minutes -> minutes / interval)                subscribe(rangebeginasaction()))monitor(        beginchanged // cant use shared observable because of unexpected behaviour with skip call                skip(1)// skip initial value emitted automatically right after the                        // subsription                debounce(500 timeunitmilliseconds)// such as range bar may change the                        // value very quickly use the                        // debounce function for the timeout                        // based processing                dooneach(value -> timberd(""begin value changed 2: "" + valuegetvalue()))                subscribe(mschedulerrangebeginasaction()))beginchangedconnect()``` || the problem with `share` in general is that it tends to reconnect if the number of interested parties fluctuate but i dont see this happening in this setup and `share` should work (you can check this by adding `doonunsubscribe` + logging before `share` what is this `rxbindingutils` you use? || rxbindingutils is a custom tool to build observable for android data binding bindable fields should i check in the doonunsubscribe ?the interesting thing that if i use share and change order of the subscriptions and put the one with the skip to the first place the second and the third will not be called || ill look into the helper utility> what should i check in the doonunsubscribe ?``` javaobservable<integer> beginchanged  rxbindingutils        valuechanged(begin)        dooneach(value -> timberd(""begin value changed: "" + valuegetvalue()))        doonunsubscribe(() -> systemoutprintln(""unshared?!""))        share()```> the interesting thing that if i use share and change order of the subscriptions and put the one with the skip to the first place the second and the third will not be calledthis may indicate there is a hidden failure somewhere could you use the two argument `subscribe` version and see if it receives an error? || no errors are catched but i can see the ""unshared?!"" in the log```12-17 14 32689 3533-3533/comappmissednotificationsreminderdebug d/schedulerviewmodel: unshared?!12-17 14 34960 3533-3533/comappmissednotificationsreminderdebug d/schedulerviewmodel: begin value changed: 475``` || are the `observer`s `asaction()` returns by any chance call unsubscribe or otherwise use `take`? || no asaction method is very simple```public action1<? super t> asaction() {    return new action1<t>() {      @override public void call(t value) {        set(value)      }    }  }``` || okay if you are willing to diagnose this further that would be greatthe next step is to find out where the unsubscribe call comes could you change the `doonunsubscribe` to this:``` java() -> new exception()printstacktrace()``` || ill try to prepare test case for you also will try that instruction || here is a test case which fails on last value comparison || could you post something that doesnt depend on the android platform? || there are no android import there || `androiddatabindingobservableonpropertychangedcallback callback  new androiddatabindingobservableonpropertychangedcallback()` || i was wrong regarding unsubscribe is called it is not called i will try to fix the test case || embedded all dependencies || okay i see whats wrong the `begin` emits its current value on subscription which is triggered by the first subscriber to share() and since all is synchronous the subsequent subscribers dont get anything at that point because they are not yet subscribed when the first event arrives it gets skipped and only the second event is then processed if you replace `share` with `replay()refcount()` the test passes || thank you very much for your time how to explain that all future beginset calls could be ignored by last action if they were called with some long interval (so not only initial value was ignored)? it is just curiosity because ive solved the initial issue by using publish-connect approach i can try to reproduce issue in test if required || if you could create a test which demonstrates this problem it would be great you could use `doonnext` before debounce and after to see if `debounce` drops values unnecessarily or not || i cant reproduce that in test case yet even in android test case but i can reproduce it in the android app intself very weird || but i can say that both `publish-connect` and `replay()refcount()` approaches work fine || @ any new input here? will be great if you could close the issue with your findings or add something to continue investigation// trying to prevent issues hell in rxjava… || for a now i cant reproduce issue in the plain java test case only in live android app lets close the issue if ill find a way to reproduce the problem constantly ill reopen it thank you guys for your great library and fast feedback and help ||  ";;;;0;1;;
3579;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix  bug  link that was actually a cl.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> simplify while+break into do-while.  3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> release resources of whenallsucceed/whenallcomplete once input futures are complete.  relnotes=fixes potential memory leak in futures.whenallsucceed/whenallcomplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> prepare for removing gwt-rpc support for guava types by adding a system property that disables it.  when the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.    967010aa4d5ecf35fd3861913c3f17c10c4f6d40;;0;change parameter type of valuestreamskip from int to long;3563 more than 2g positions can legitimately be skipped at once;ping @dain  ||  merged #3579  ||;;;;0;1;;
3579;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix  bug  link that was actually a cl.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> simplify while+break into do-while.  3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> release resources of whenallsucceed/whenallcomplete once input futures are complete.  relnotes=fixes potential memory leak in futures.whenallsucceed/whenallcomplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> prepare for removing gwt-rpc support for guava types by adding a system property that disables it.  when the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.    967010aa4d5ecf35fd3861913c3f17c10c4f6d40;;0;1x: no more need to convert singles to observables for singlezip();ptal; could you add `final` back for all these methods? otherwise  sorry was busy… @zsxwing added `final` back will send separate pr to remove them everywhere once this  ;;;;1;1;no more need to convert singles to observables for singlezip();
3579;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix  bug  link that was actually a cl.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> simplify while+break into do-while.  3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> release resources of whenallsucceed/whenallcomplete once input futures are complete.  relnotes=fixes potential memory leak in futures.whenallsucceed/whenallcomplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> prepare for removing gwt-rpc support for guava types by adding a system property that disables it.  when the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.    967010aa4d5ecf35fd3861913c3f17c10c4f6d40;;3577.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix ""bug"" link that was actually a cl4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8-------<p> simplify while+break into do-while357739aadb3531f7d73ed634780abe2679c9e42bcb17-------<p> release resources of whenallsucceed/whenallcomplete once input futures are completerelnotesfixes potential memory leak in futureswhenallsucceed/whenallcompletea840d5bec35b56a6a6e195477e35a1b0e92d3681-------<p> prepare for removing gwt-rpc support for guava types by adding a system property that disables itwhen the time comes well flip the default value and users who didnt see our earlier warnings can use a system property to restore support until they can stop serializing our types967010aa4d5ecf35fd3861913c3f17c10c4f6d40";;simply code rp;;     clas look good thanks!  || thanks we mostly avoid lambdas because we have a java 7 backport and we want to minimize diffs between the mainline and the backport ill get the `while` change   ok i have received your messag ||;1;0;prepare for removing gwt-rpc support for guava types by adding a system property that disables itwhen the time comes well flip the default value and users who didnt see our earlier warnings can use a system property to restore support until they can stop serializing our types-------------created by moe: https://githubcom/google/moemoe_migrated_revid265490471;
3583;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> release the input futures as soon as we submit the combiner task. but really  redo how we release resources in general.  this is a followup to cl 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadn t if the combiner returned a future that was still pending). that cl was good enough for practical purposes  but i wanted to better understand how we release resources.  this cl standardizes on aggregatefuture.releaseresources() as the way to null out all fields[*]  merging logic from releaseresources()  releaseresourcesafterfailure()  and asynccallableinterruptibletask.setvalue(). as part of that  it merges aggregatefuture and aggregatefuturestate/runningstate into a single object.  [*] ok  except seenexceptions  which gets its own handling. as a bonus  i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case. specifically  it clears it when all inputs   rather than when the combiner task has finished running.  it turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. combinedfuture.releaseresources() can t null out  task  until the future is done or the task is done running. that s because it may need to interrupt the task. to handle this  i don t null out  task  in releaseresources() unless isdone(). to ensure that  task  still gets nulled out as soon as it s done running  i null it out directly in afterraninterruptibly(). (ok  this is another exception to my claim that releaseresources() handles nulling out  all  fields....)  2. even if the output future is done  processcompleted() sometimes needs access to the original futures in order to see whether any of them failed. to handle this  i store them in the listener and pass them through to processcompleted() (when necessary).  the changes to prod code are net negative in line count  at least ignoring the added comments. i ve also added a couple tests  only one of which passed before this cl. and i think the model for when fields are nulled out is overall clearer after this cl. so hopefully this cl is a step forward  despite the complexity of the changes and the remaining complexity in the code. (i also included a few unrelated simplifications  like not bothering to check collectsvalues before calling collectonevalue(...).)  (aside: this cl s releaseresources() is like our proposed aftercommit() api but different. first  releaseresources() may be called even before set() or setasync() in the combinedfuture case. second  combinedfuture may rely on the fact that it s called twice in some cases: it s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . but that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so combinedfuture is unlikely to hold the final reference to it. anyway  for more discussion of aftercommit()  see     41a8adb81e2ebf27e9d85f70671ff8f97fd7721b;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> release the input futures as soon as we submit the combiner task but really redo how we release resources in generalthis is a followup to cl 265489523 which ""only"" released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadnt if the combiner returned a future that was still pending) that cl was good enough for practical purposes but i wanted to better understand how we release resourcesthis cl standardizes on aggregatefuturereleaseresources() as the way to null out all fields[*] merging logic from releaseresources() releaseresourcesafterfailure() and asynccallableinterruptibletasksetvalue() as part of that it merges aggregatefuture and aggregatefuturestate/runningstate into a single object[*] ok except seenexceptions which gets its own handling as a bonus i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case specifically it clears it when all inputs  rather than when the combiner task has finished runningit turns out that blindly nulling out fields is too aggressive so we need to be careful in 2 cases:1 combinedfuturereleaseresources() cant null out `task` until the future is done or the task is done running thats because it may need to interrupt the task to handle this i dont null out `task` in releaseresources() unless isdone() to ensure that `task` still gets nulled out as soon as its done running i null it out directly in afterraninterruptibly() (ok this is another exception to my claim that releaseresources() handles nulling out ""all"" fields)2 even if the output future is done processcompleted() sometimes needs access to the original futures in order to see whether any of them failed to handle this i store them in the listener and pass them through to processcompleted() (when necessary)the changes to prod code are net negative in line count at least ignoring the added comments ive also added a couple tests only one of which passed before this cl and i think the model for when fields are nulled out is overall clearer after this cl so hopefully this cl is a step forward despite the complexity of the changes and the remaining complexity in the code (i also included a few unrelated simplifications like not bothering to check collectsvalues before calling collectonevalue())(aside: this cls releaseresources() is like our proposed aftercommit() api but different first releaseresources() may be called even before set() or setasync() in the combinedfuture case second combinedfuture may rely on the fact that its called twice in some cases: its called once when all inputs complete but it doesnt null out `task` and then it can be called again if the output is cancelled at which point it *does* null out `task` but that probably doesnt matter too much because the task was probably handed to an executor in the meantime so combinedfuture is unlikely to hold the final reference to it anyway for more discussion of aftercommit() see https://githubcom/google/guava/issues/2886)41a8adb81e2ebf27e9d85f70671ff8f97fd7721b";;;;;1;1;"release the input futures as soon as we submit the combiner task but really redo how we release resources in generalthis is a followup to cl 265489523 which ""only"" released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadnt if the combiner returned a future that was still pending) that cl was good enough for practical purposes but i wanted to better understand how we release resourcesthis cl standardizes on aggregatefuturereleaseresources() as the way to null out all fields[*] merging logic from releaseresources() releaseresourcesafterfailure() and asynccallableinterruptibletasksetvalue() as part of that it merges aggregatefuture and aggregatefuturestate/runningstate into a single object[*] ok except seenexceptions which gets its own handling as a bonus i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case specifically it clears it when all inputs  rather than when the combiner task has finished runningit turns out that blindly nulling out fields is too aggressive so we need to be careful in 2 cases:1 combinedfuturereleaseresources() cant null out `task` until the future is done or the task is done running thats because it may need to interrupt the task to handle this i dont null out `task` in releaseresources() unless isdone() to ensure that `task` still gets nulled out as soon as its done running i null it out directly in afterraninterruptibly() (ok this is another exception to my claim that releaseresources() handles nulling out ""all"" fields)2 even if the output future is done processcompleted() sometimes needs access to the original futures in order to see whether any of them failed to handle this i store them in the listener and pass them through to processcompleted() (when necessary)the changes to prod code are net negative in line count at least ignoring the added comments ive also added a couple tests only one of which passed before this cl and i think the model for when fields are nulled out is overall clearer after this cl so hopefully this cl is a step forward despite the complexity of the changes and the remaining complexity in the code (i also included a few unrelated simplifications like not bothering to check collectsvalues before calling collectonevalue())(aside: this cls releaseresources() is like our proposed aftercommit() api but different first releaseresources() may be called even before set() or setasync() in the combinedfuture case second combinedfuture may rely on the fact that its called twice in some cases: its called once when all inputs complete but it doesnt null out `task` and then it can be called again if the output is cancelled at which point it *does* null out `task` but that probably doesnt matter too much because the task was probably handed to an executor in the meantime so combinedfuture is unlikely to hold the final reference to it anyway for more discussion of aftercommit() see  by moe: https://githubcom/google/moemoe_migrated_revid266130757";
3583;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> release the input futures as soon as we submit the combiner task. but really  redo how we release resources in general.  this is a followup to cl 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadn t if the combiner returned a future that was still pending). that cl was good enough for practical purposes  but i wanted to better understand how we release resources.  this cl standardizes on aggregatefuture.releaseresources() as the way to null out all fields[*]  merging logic from releaseresources()  releaseresourcesafterfailure()  and asynccallableinterruptibletask.setvalue(). as part of that  it merges aggregatefuture and aggregatefuturestate/runningstate into a single object.  [*] ok  except seenexceptions  which gets its own handling. as a bonus  i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case. specifically  it clears it when all inputs   rather than when the combiner task has finished running.  it turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. combinedfuture.releaseresources() can t null out  task  until the future is done or the task is done running. that s because it may need to interrupt the task. to handle this  i don t null out  task  in releaseresources() unless isdone(). to ensure that  task  still gets nulled out as soon as it s done running  i null it out directly in afterraninterruptibly(). (ok  this is another exception to my claim that releaseresources() handles nulling out  all  fields....)  2. even if the output future is done  processcompleted() sometimes needs access to the original futures in order to see whether any of them failed. to handle this  i store them in the listener and pass them through to processcompleted() (when necessary).  the changes to prod code are net negative in line count  at least ignoring the added comments. i ve also added a couple tests  only one of which passed before this cl. and i think the model for when fields are nulled out is overall clearer after this cl. so hopefully this cl is a step forward  despite the complexity of the changes and the remaining complexity in the code. (i also included a few unrelated simplifications  like not bothering to check collectsvalues before calling collectonevalue(...).)  (aside: this cl s releaseresources() is like our proposed aftercommit() api but different. first  releaseresources() may be called even before set() or setasync() in the combinedfuture case. second  combinedfuture may rely on the fact that it s called twice in some cases: it s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . but that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so combinedfuture is unlikely to hold the final reference to it. anyway  for more discussion of aftercommit()  see     41a8adb81e2ebf27e9d85f70671ff8f97fd7721b;;0;string(varchar) operation in orcfile table runs too slow;hello~~i have a presto cluster with 9 servers one of them is the coordinator without workereach server have 16 cpu cores and 128g ram (32g give to presto)when i execute the sql it runs too slow(below 200m/s)select count(distinct a_string_column) from t_an_orcfile_table_with_a_billion_rowsan other textfile table with the same data runs well (more than 4gb/s)both of the table without compressionmy presto conf is:taskmax-memory16gbquerymax-memory128gbquerymax-memory-per-node16gboptimizeroptimize-hash-generationtruetaskwriter-count8;how do they compare in rows per second?  in the case of a text file presto must read 100% of the file select out the column you are performing distinct on and then discard the data  with orc presto only reads the one column  additionally orc files are gzip compressed which typically makes them 4-10x smaller  given both of these 200mb of orc may contain more column values than 4gb of text data || i have run the sql for 30sselect count(distinct a_string_column) from t_a_table_with_a_billion_rowsin orcfile0:33 [ 258m rows 325gb] [771m rows/s 994mb/s]in textfile0:30 [ 819m rows 102gb] [269m rows/s 336gb/s]---when i select a int column from the same table runs wellselect count(distinct **a_int_column**) from t_a_table_with_a_billion_rowsorcfilesplits: 443 total 443 done (10000%)0:04 [986m rows 142gb] [254m rows/s 365gb/s]textfilesplits: 2024 total 2024 done (10000%)2:06 [986m rows 123gb] [784m rows/s 1005mb/s]---the string column content is random (using as id)| the a_string_column content || --- || 7b4c8ea6-fff8-4fbe-a0ca-d07ca8761eb7 || 52f018c127a1d5066d2562db6ac3976c || 791c0450293a01c6188cf0f71aa7b3fd || c3a754d8210be8effea9778ec99d8c20 || 0aebe0ea-461e-4d31-8746-f3626cea9b75 || 09b2a7ba-5384-41be-906d-efb9681eacd1 || e26e1e0e-bd4b-4b86-a099-8d4221627693 || 4d42cf8d11aa419f8acc3f6247569277 || 52877c63-36cc-444a-a73d-2d7a415517cc || e7cbd3dd18714ab6a3960afab80ffcea |the presto version is 0115 || one other thing that happens with orc is because the compression is so much better than text you can end up with less files  so you end up having more cores than you have splits  if you run the cli with the --debug option it will show you the stats per node and the number of cpus you are using || but how to solve the problem?now i have no choice but to keep the table in two types(orc and textfile) and select these two tables in my java program || @martint  @joshk  @electrum  @dsp do you have any idea? || my guess that orc is compressing the data so much that it all ends up in a small number of small files  presto parallelizes the based file chunks based on size  if your orc files are much smaller than the text files you are comparing against there will be less parallel workers applied to the data  you can verify this by running the queries in the presto cli with the `--debug` option which will print the number of nodes and splits in the query  unfortunately there is currently nothing that can be done to speed up this kind of file other than to rewrite the file in another format like rcfile ;;;;0;1;;
3583;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> release the input futures as soon as we submit the combiner task. but really  redo how we release resources in general.  this is a followup to cl 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that cl but hadn t if the combiner returned a future that was still pending). that cl was good enough for practical purposes  but i wanted to better understand how we release resources.  this cl standardizes on aggregatefuture.releaseresources() as the way to null out all fields[*]  merging logic from releaseresources()  releaseresourcesafterfailure()  and asynccallableinterruptibletask.setvalue(). as part of that  it merges aggregatefuture and aggregatefuturestate/runningstate into a single object.  [*] ok  except seenexceptions  which gets its own handling. as a bonus  i believe that this cl clears seenexceptions earlier than it used to be cleared in the combinedfuture case. specifically  it clears it when all inputs   rather than when the combiner task has finished running.  it turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. combinedfuture.releaseresources() can t null out  task  until the future is done or the task is done running. that s because it may need to interrupt the task. to handle this  i don t null out  task  in releaseresources() unless isdone(). to ensure that  task  still gets nulled out as soon as it s done running  i null it out directly in afterraninterruptibly(). (ok  this is another exception to my claim that releaseresources() handles nulling out  all  fields....)  2. even if the output future is done  processcompleted() sometimes needs access to the original futures in order to see whether any of them failed. to handle this  i store them in the listener and pass them through to processcompleted() (when necessary).  the changes to prod code are net negative in line count  at least ignoring the added comments. i ve also added a couple tests  only one of which passed before this cl. and i think the model for when fields are nulled out is overall clearer after this cl. so hopefully this cl is a step forward  despite the complexity of the changes and the remaining complexity in the code. (i also included a few unrelated simplifications  like not bothering to check collectsvalues before calling collectonevalue(...).)  (aside: this cl s releaseresources() is like our proposed aftercommit() api but different. first  releaseresources() may be called even before set() or setasync() in the combinedfuture case. second  combinedfuture may rely on the fact that it s called twice in some cases: it s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . but that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so combinedfuture is unlikely to hold the final reference to it. anyway  for more discussion of aftercommit()  see     41a8adb81e2ebf27e9d85f70671ff8f97fd7721b;;0;osgi equinox mars rxjava not installing/starting on bundle startup in linux;"i am unable to get rxjava to install during during osgi equinox startup it doesnt even show in list of bundles after issuing ss commandit does work once osgi console comes up and i manually issue install command and then start bundlesteps:install file:plugins/rxjava-1017jar*doing an ss after that will show the bundle in the installed state  you can then start it and it will work fine  but i cant seem to get a working bundlesinfo entry to do this tried with both rxjava 11 and 1017 and same outcomenote: works perfectly on windows (only issue on lunx)here is the bundlesinfo entryioreactivexrxjava1017plugins/rxjava-1017jar4truehere is the manifest (note: i did remove the sunmisc entry referencing this issue   as this would not allow bundle to start on linux windows or manually on osgi command line )manifest-version: 10export-package: rxversion""1017""uses:""rxfunctionsrxobservables rxschedulersrxsingles""rxannotationsversion""1017""rxexcepti onsversion""1017""uses:rxrxfunctionsversion""1017""rxintern aloperatorsversion""1017""uses:""rxrxfunctionsrxobservablesr xschedulersrxsubjects""rxinternalproducersversion""1017""uses :rxrxinternalschedulersversion""1017""uses:""rxrxfunctionsr xinternalutilrxsubscriptions""rxinternalutilversion""1017""u ses:""rxrxexceptionsrxfunctionsrxinternalschedulers""rxintern alutilatomicversion""1017""rxinternalutilunsafeversion""10 17""uses:""rxinternalutilatomicsunmisc""rxobservablesversion"" 1017""uses:""rxrxfunctions""rxobserversversion""1017""uses:"" rxrxfunctions""rxpluginsversion""1017""uses:""rxrxfunctions"" rxschedulersversion""1017""uses:rxrxsinglesversion""1017""u ses:rxrxsubjectsversion""1017""uses:""rxrxinternaloperators rxschedulers""rxsubscriptionsversion""1017""uses:""rxrxfunctio ns""implementation-title: ioreactivex#rxjava1017built-by: travischange: a65ca70gradle-version: 221tool: bnd-21020130426-122213built-os: linuxbuild-host: testing-worker-linux-docker-dc38aa25-3188-linux-5prodtra vis-ciorgbuild-number: localmodule-origin:  ioreactivexrxjavabuild-id: localx-compile-target-jdk: 16implementation-version: 1017module-owner: benjchristensen@netflixcombundle-name: rxjavacreated-by: 170_76-b13 (oracle corporation)build-job: localbuild-date: 2015-12-02_20 10x-compile-source-jdk: 16build-java-version: 170_76bundle-vendor: reactivexbuilt-status: releasebundle-version: 1017bnd-lastmodified: 1449087991000bundle-manifestversion: 2bundle-docurl:  benjchristensen@netflixcommodule-source: please advise";"can you try rxjava v110 with oracle jdk/jre on linux in your setup?// would be great if you could close the issue if it was successfully resolved (with some info for others) or add more input to continue investigation || hii tried that as suggested and oracle jdk does seem to work where openjdk fails  is there any reason that it works but openjdk has trouble?  doing a manual ""install"" on the jar after startup with openjdk does seem to work  if at all possible i would like to get this working on openjdk  thanks for your help! || why was this closed were the issues supporting via openjdkresolved? || @artem-zinnatullin posted a possible solution but there was no response for a month if you think you can add more input id be glad to reopen the issue || i tried that as suggested and oracle jdk does seem to work where openjdk fails is there any reason that it works but openjdk has trouble? doing a manual ""install"" on the jar after startup with openjdk does seem to work if at all possible i would like to get this working on openjdkthanks for your help! || ";;;;0;1;;
3586;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> let listenablefuture implement thenable via a default interface method in j2cl  relnotes=let listenablefuture implement thenable via a default interface method in j2cl  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    a793784ba71562cdabf41ba87aad849440b145a7;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> let listenablefuture implement thenable via a default interface method in j2clrelnoteslet listenablefuture implement thenable via a default interface method in j2clf6bb300d5fe145486dbeb28c544867f562ddc185-------<p> let listenablefuture implement thenable via a default interface method in j2cl***f45705983f8dbaf48896b8ec783b4d56e7b1f184-------<p> update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable //wwwchromiumorg/developers/calendar#toc-estimated-stable-datesa793784ba71562cdabf41ba87aad849440b145a7;;;;;1;1;update public suffix datathe copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the copy is updated 3 weeks before theestimated week of stable: by moe: https://githubcom/google/moemoe_migrated_revid266255422;
3586;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> let listenablefuture implement thenable via a default interface method in j2cl  relnotes=let listenablefuture implement thenable via a default interface method in j2cl  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    a793784ba71562cdabf41ba87aad849440b145a7;;0;add presto 0118 release notes;;;;;;0;1;;
3586;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> let listenablefuture implement thenable via a default interface method in j2cl  relnotes=let listenablefuture implement thenable via a default interface method in j2cl  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    a793784ba71562cdabf41ba87aad849440b145a7;;0; typo;;  thanks a lot @mariusznet  ||;;;;1;1; typo;
3588;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> modify comment about safeoctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> modify comment about safeoctetslength to be consistent with codef7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;;;;1;1;modify comment about safeoctetslength to be consistent with coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid266379201;
3588;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> modify comment about safeoctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;0;print error to stderr;this error is being output to stdout which makes it difficult to detect when invoked programatically;;;;;0;1;;
3588;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> modify comment about safeoctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9;;0;fix the initialization order in genericscheduledexecutorservice;the static `genericscheduledexecutorservicenone` should be initialized before creating any genericscheduledexecutorservice instance although the previous codes happen to work its sill worth to fix it;the situation cant happen because class initialization locks out callersotherwise the cleanup never hurts;;;;1;1;fix the initialization order in genericscheduledexecutorservicethe static `genericscheduledexecutorservicenone` should be initialized before creating any genericscheduledexecutorservice instance;
3597;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure)98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;;;;1;1;explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid267421508;
3597;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;0;presto can select data from cassandras memtable?;i used presto to select data from cassandrabut i found thatcql in cassandra can select data real timebut presto can notanyone can tell me why?;;;;;0;1;;
3597;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> explicitly document that whenallcomplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988;;0;1x: fix counted buffer and window operators backpressure behavior;this pr fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changesthe main issue lies when `count > skip` in the operators yielding overlapping buffers/windows for `buffer` when the upstream completed the logic emitted all remaining partial buffers even if there was no request for new buffers which can result in `missingbackpressureexception` somewhere the proper handling of the final buffers required a new backpressure management algorithm which is now part of the `backpressureutils` class and consists of two new methods: `postcompletedone` called from oncomplete to take over the emission of queued values and `postcompleterequest` which manages requests before and after the completed statefor `window` the new window opened was emitted regardless of requests which was common due to request-amplification (ie requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront to avoid the overflow the individual windows have to go through the usual queue/drain logic as well ive also updated the javadoc to reflect the backpressure behavior along with parameter validationin addition the window case didnt manage cancellation properly when the outer observable is unsubscribed the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows instead the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (ie count reaches zero) the upstream is unsubscribed to accomplish this the `unicastsubject` had to be retrofitted with a new optional callback `action0` which gets called at most once whenever either `onerror` or `oncompleted` is called or when the single `subscriber` unsubscribesa secondary issue was with the `testsubscriber`s initial request some upstream operators could get triggered with `longmax_value` despite the initial request amount was set this pr changes it to be set at construction time instead of in `onstart`;fresh version in #3678 ||;;;;0;1;;
3605;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> combine immediatesuccessfulfuture into immediatefuture.  immediatefuture used to have other implementations  but we switched those to extend trustedfuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> fix (and in one case  suppress) low-hanging rawtypes warnings.  it looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt). in fact  i had to revert one similar change because it broke a gwt build. i m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> combine immediatesuccessfulfuture into immediatefutureimmediatefuture used to have other implementations but we switched those to extend trustedfuture insteadd780cd5f2b0ccc2610c039c30c04e987771dd0a5-------<p> rollback previous commit0812745bec6e345b232154d815ad242cbb4fda37-------<p> roll forward previous rollback but without making the type final4c984c649e1f4665a7dbee5f568cfa25def76727-------<p> fix (and in one case suppress) low-hanging rawtypes warningsit looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt) in fact i had to revert one similar change because it broke a gwt build im hoping that that means that the others are safecabc402dbf3805f04e19ba9d72e7f8802ab6bb75-------<p> increase various tests timeouts25842ed29c2c13b949836082552c5fee0cdcb0d5;;;;;1;1;increase various tests timeouts-------------created by moe: https://githubcom/google/moemoe_migrated_revid268726044;
3605;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> combine immediatesuccessfulfuture into immediatefuture.  immediatefuture used to have other implementations  but we switched those to extend trustedfuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> fix (and in one case  suppress) low-hanging rawtypes warnings.  it looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt). in fact  i had to revert one similar change because it broke a gwt build. i m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5;;0;change orcreader to return blocks instead of vectors;;1st commit (add generic lazyblock): looks good2nd commit (max_vector_length -> max_batch_size): static import in a consistent manner either static import all usage of max_batch_size or none this comment also applies to other commits3rd commit (change orcreader to return block): null handling is subtle but it seems good except for one minor comment4th commit (remove orc vectors): looks good5-7th commit (list struct map reader): looks good except minor comments8th commit (cleanup): ;;;;0;1;;
3605;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> combine immediatesuccessfulfuture into immediatefuture.  immediatefuture used to have other implementations  but we switched those to extend trustedfuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> fix (and in one case  suppress) low-hanging rawtypes warnings.  it looks like at least some of these may once have been necessary for the eclipse compiler (used by gwt). in fact  i had to revert one similar change because it broke a gwt build. i m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5;;0;mytextviewsettext () can be performed in a non-ui thread why;"hello i have a question on the use of schedulers in the process the operation of the ui in android development should be the main thread of execution why i use the observeon (schedulersio ()) textview can still assignment which is how to do please help me to answer very gratefulcode is as follows:``` javamytextviewsettext(""thread 1 id"" + threadcurrentthread()getid())observablejust(1 2 3 4)    subscribeon(schedulersio())    observeon(schedulersnewthread())    map(new func1<integer string>() {        @override        public string call(integer integer) {            mytextviewsettext(mytextviewgettext() + ""\n"" + ""thread 2 id "" +                 threadcurrentthread()getid())            return ""5"" + integer        }    })    observeon(schedulersio())    map(new func1<string integer>() {        @override        public integer call(string s) {            mytextviewsettext(mytextviewgettext() + ""\n"" + ""thread 3 id "" +                   threadcurrentthread()getid())            return integerparseint(s)        }    })```results ： textview normal display";"you didnt schedule on the proper thread you have to use `observeon(androidschedulersmainthread())` so `settext` runs on the main thread || first of all thank you for your answer but i mean that i did not use observeon (androidschedulersmainthread ()) however still settext assignment success under normal situation the program should throw an exception and fail the assignment but using observeon (schedulersio ()) did not appear abnormal || im not an android expert so i dont know why the `settext` didnt throw on an off-main-thread || anyway thank you very much || the results show that the mytextview：- thread 1 id1- thread 2 id 13567- thread 3 id 13755- this is very weirdbut i can not find the reason o~ || @yonghuiluo link some sample code that exhibits this only way for anyone to really debug it also i think you should post this in rxandroid as its a little too specific for rxjava by itself unless theres a problem in `observeon` || all view code does not throw if accessed off the main thread most callssilently failon wed jan 6 2016 8:10 pm zac sweers notifications@githubcom wrote:> @yonghuiluo  link some sample code that> exhibits this only way for anyone to really debug it also i think you> should post this in rxandroid as its a little too specific for rxjava by> itself unless theres a problem in observeon> > —> reply to this email directly or view it on github>  || @hzsweers  im very sorry ive realized that  i should post this in rxandroid also i should submit a complete code on my question i will note this in the future  || @jakewharton  privately my colleagues and i call you to jake great god thank you for answering my questions however i would like to know more about the related informationfor example already silently fail why <addr>textviewsettext <addr>still display correctly i will complete my question and submit my questions in rxandroid project my english is not very good but i will try to describe clearly i want to express the meaning of this || did you run your code in oncreate method? it has no relationship with rxjava you can create a new thread to set the text and run it in oncreate method and it will also work ``` javaclass testthread extends thread{        public void run() {            mytextviewsettext(mytextviewgettext() + ""\n"" + ""thread 2 id "" +                    threadcurrentthread()getid())        }    }```the reason why it can work need further study  || @chaoba i  dont know the reason for you saidand i try write the code as you writebut it is wrongwho can tell me the reason ?  > i dont know the reason for you saidand i try write the code as you writebut it is wrong> who can tell me the reason ? thanksdid you run the thread in oncreate() method? it works ok for me and will not work if you run it in onresume etc || any clue about the reason why it is work on oncreate method? || ";;;;0;1;;
3618;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> export new atomiclongmapbashertest to open-source repo.    704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> add @lazyinit and @retainedwith annotations to the lazily calculated  entries  field of immutablesetmultimap.  this field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl.  this is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220.  it produces a tiny diff between the common.base and common.collect copies of abstractiterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> add splitter.splittostream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> add comment explaining table and multiplier in charmatcher.whitespace  1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> rollback of adding splitter.splittostream().  *** reason for rollback ***  my guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> clean up leftovers from mapmaker.makecomputingmap:  - remove makecomputingmap from the gwt emulation. - deprecate computationexception.  0b93365c2440981c04a94f6e5596d3f723549ea3;;0;re-evaluate table after pasting entry or editing an antry;"-  i have tested the latest master version from  and the problem persistssteps to reproduce:pre-condition: have a group with keyword ""adr""( case 1: edit entry to contain keyword adrbefore:![grafik]( case 2: paste entry with keywordas is:![grafik](https://user-imagesentcom/1366654/34679596-c24162e8-f496-11e7-922f-a6a00c9d1fadpng)expected:![grafik](https://user-imagesgithubusercontentcom/1366654/34679614-ca9d4b8c-f496-11e7-9df9-7e1c15b0f699png)";"should be  with #3591 || kk i put it ""on-hold"" to reduce the number of issues it will be fixed and it seems i am currently the only one touching this issue :) || it is indeed fixed with  i hence remove the ""on-hold"" tag || ";;;;0;1;;
3618;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> export new atomiclongmapbashertest to open-source repo.    704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> add @lazyinit and @retainedwith annotations to the lazily calculated  entries  field of immutablesetmultimap.  this field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl.  this is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220.  it produces a tiny diff between the common.base and common.collect copies of abstractiterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> add splitter.splittostream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> add comment explaining table and multiplier in charmatcher.whitespace  1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> rollback of adding splitter.splittostream().  *** reason for rollback ***  my guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> clean up leftovers from mapmaker.makecomputingmap:  - remove makecomputingmap from the gwt emulation. - deprecate computationexception.  0b93365c2440981c04a94f6e5596d3f723549ea3;;0;create new orc dictionary even when dictionary is empty;a new dictionary array must be create each time the dicitonary is openedotherwise the null slot may inherit a value from the previous dictionary;;;;;0;1;;
3618;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> export new atomiclongmapbashertest to open-source repo.    704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> add @lazyinit and @retainedwith annotations to the lazily calculated  entries  field of immutablesetmultimap.  this field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl.  this is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220.  it produces a tiny diff between the common.base and common.collect copies of abstractiterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> add splitter.splittostream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> add comment explaining table and multiplier in charmatcher.whitespace  1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> rollback of adding splitter.splittostream().  *** reason for rollback ***  my guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> clean up leftovers from mapmaker.makecomputingmap:  - remove makecomputingmap from the gwt emulation. - deprecate computationexception.  0b93365c2440981c04a94f6e5596d3f723549ea3;;0;improve readmemd by adding links to the source files of @beta and @experimental;there are no links to the annotations mentioned above in the documentation and this makes their source unaccessible a bit;closing via #3623 ||;;;;0;1;;
3618;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> export new atomiclongmapbashertest to open-source repo.    704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> add @lazyinit and @retainedwith annotations to the lazily calculated  entries  field of immutablesetmultimap.  this field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl.  this is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220.  it produces a tiny diff between the common.base and common.collect copies of abstractiterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> add splitter.splittostream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> add comment explaining table and multiplier in charmatcher.whitespace  1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> rollback of adding splitter.splittostream().  *** reason for rollback ***  my guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> clean up leftovers from mapmaker.makecomputingmap:  - remove makecomputingmap from the gwt emulation. - deprecate computationexception.  0b93365c2440981c04a94f6e5596d3f723549ea3;;1661.0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> export new atomiclongmapbashertest to open-source repo add @lazyinit and @retainedwith annotations to the lazily calculated ""entries"" field of immutablesetmultimapthis field is lazily evaluated by entries() without holding a lock but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance996369d89362e0ec93f7dd6e9a6860aa08858c80-------<p> let listenablefuture implement thenable via a default interface method in j2clthis is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were 44909d9d5fc5b394c710a6b8b0d6c3786c765af5-------<p> add test for behavior described in #19007329a66694d59bb22e2589eb9a2f620c98a881f9-------<p> undo test cl 9a50815df26be7416be0fac489e29feee7a3c220it produces a tiny diff between the commonbase and commoncollect copies of abstractiteratorc82f7916879a46539a1e53ac98dda90e9c5537b8-------<p> add splittersplittostream()6c984121f74d5cea97ac1ffabfe98938bc7c96c4-------<p> add comment explaining table and multiplier in charmatcherwhitespace16615430b140cae37b078fd4dda9b1a57a025664cfe1-------<p> rollback of adding splittersplittostream()*** reason for rollback ***my guess is that this change somehow upsets an allowed list ofone-definition violations3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391-------<p> rollback of change to let listenablefuture implement thenable via a default interface method in j2cl38c9a029e6cc538bcc46b9ad23fe03a62739d433-------<p> clean up leftovers from mapmakermakecomputingmap:- remove makecomputingmap from the gwt emulation- deprecate computationexception0b93365c2440981c04a94f6e5596d3f723549ea3";i see `splittersplittostream()` was added and removed again are there plans to open-source it in the future?    || > i see `splittersplittostream()` was added and removed again are there plans to open-source it in the future?   it is being reintroduced in #3623 nice :) ||;would like implementation comments explaining charmatcherwhitespace_multiplier; there is a magic number in the charamatcher : whitespace_multiplier  1682554634wanntted a testcase or formula get this value  at least need a javadoc to comment it; hmm  how about put it in wiki or comment it in someplace   anticipate whitespacematchergenerator   || i just came across this and had the same confusion unexplained magic numbers are confusing you dont need formal comments but a brief explanation would demystify the code something like this would suffice:// table is a precomputed hashset of whitespace characters multiplier serves as a hash function// whose key property is that it maps 25 characters into the 32-slot table without collision || fix mirroring out soon || ";1;0;clean up leftovers from mapmakermakecomputingmap:- remove makecomputingmap from the gwt emulation- deprecate computationexception-------------created by moe: https://githubcom/google/moemoe_migrated_revid270019222;
3621;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> test iteration over a collection containing nullf9675a07e0fa21ce705626cdcc95101b95f46531;;;;;1;1;test iteration over a collection containing null-------------created by moe: https://githubcom/google/moemoe_migrated_revid270909197;
3621;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531;;0; main table javafx migration;"this pr tracks the progress of the migration of the maintable to javafx see also the [maintable in javafx project]( the current version can be downloaded [here]( report any bugs that appear or missing features which are not listed below moreover we appreciate feedback about the general design (what do guys like what not)known bugs:---  some input controls (like check boxes) look odd-  smaller things outlined [here]( and [here](  drag & drop to and from the table does not work #3765 -  ranking is not shown (and thus not editable)-  float mode does not work (partly because of [unresolved feature request for java](  [code to fix](  linux / mac os: resizing the columns per drag & drop does not work nicely (  linux: column separator are not shown on hover (  performance of search is poor for large databases   <s>magnifier icon is not colored correctly - we accept that workaround until we implement something really cool as proposed at  follow up at   <s>mouse wheel for tabs in entry editor works in the wrong way - up/down reversed in comparison to firefox (by @koppor)</s> follow up at   <s>when in the maintable <kbd>ctrl</kbd>+<kbd>f</kbd> does not focus the search field  (by @koppor)</s> follow up at   import does not work see   trailing thread even after jabref is closed   the colors have to harmonized and sometimes the text is hard to read (black on dark background eg in the search or for active rows) reported in   deleting of entries does not work leads to exception-  when columns are reorded by drag & drop then the new order is not saved (ie lost after closing jabref)-  reordering of tabs using dragndrop is not possible any more (by @koppor): [code to fix]( or wait until [java 10](  columns cannot be resized even if there is an <-> arrow indicated that it would be possible (by @koppor)- [x] the size of the entry editor sometimes resets leading to a very small editor- [x] the columns are slightly sized too large if a vertical scrollbar is visible- [x] the icons in the right toolbar of the entry editor are sized to small- [x] saving a file leads to an illegalstateexception- [x] the searchbar sometimes steals the focus from the maintable- [x] jabref might no longer start on macos  [x] jabref might freeze on linux  [x] ctrl + tab does only sometimes work the toolbar steals the focus might be  by #3684 - [x] changes to entries dont mark database as changed- [x] file annotation tab is not shown and throws exception  [x] paste of new entries does not work- [x] it is no longer possible to select multiple entries by holding mouse button: [code to fix]( italic text is now rendered correctly  the entry editor no longer gets corrupted after using the source tab    we fixed multiple issues where entries did not show up after import if a search was active   we fixed an issue where the group tree was not updated correctly after an entry was changed  we fixed an issue where a right-click in the main table selected a wrong entry  we fixed an issue where in rare cases entries where overlayed in the main table  we fixed an issue where selecting a group messed up the focus of the main table / entry editor  we fixed an issue where composite author names were sorted incorrectly  we fixed an issue where the custom file column were sorted incorrectly  we fixed an issues where the entry losses focus when a field is edited and at the same time used for sorting  we fixed an issue where the menu on mac os was not displayed in the usual mac-specific way  we fixed an issue where the groups tree of the last database was still shown even after the database was already closed- we fixed an issue where the ""open file dialog"" may disappear behind other windows  we fixed an issue where the default icon of a group was not colored correctly- we reworked the ""edit file"" dialog to make it resizeable and improved the workflow for adding and editing files  we fixed an issue where the month was not shown in the preview  the special fields like `printed` and `read status` now show gray icons when the row is hovered- we added a button in the tab header which allows you to close the database with one click  sorting in the main table now takes information from cross-referenced entries into account  if a group has a color specified then entries matched by this group have a small colored bar in front of them in the main table- change default icon for groups to a circle because a colored version of the old icon was hard to distinguish from its black counterpart- in the main table the context menu appears now when you press the ""context menu"" button on the keyboard [feature request in the forum]( we added icons to the group side panel to quickly switch between `union` and `intersection` group view mode  the feature to ""mark entries"" was removed and merged with the groups functionality  for migration a group is created for every value of the `__markedentry` field and the entry is added to this group- the number column was removed- we removed the coloring of cells in the maintable according to whether the field is optional/required- we removed a few commands from the right-click menu that are not needed often and thus dont need to be placed that prominently:  - print entry preview: available through entry preview  - all commands related to marking: marking is not yet reimplemented  - set/clear/append/rename fields: available through edit menu  - manage keywords: available through edit menu  - copy linked files to folder:  available through file menu  migrated features:- [x] sorting (shift + click for multi-column sort)- [x] filtering by search and groups - [x] context menu (with linked files) for the file icon- [x] right-click menu- [x] setting special fields like reading status / priority /  through the main table  i would like to ask all contributors with write-access to complete the lists above (with links to a comment with further details if necessary) with new bugs or missing features as they are discovered";"heres a little present for you i  the ""changes to entries dont mark database as changed"" problemas much as i hate adding to `basepanel` it is probably the best if the panel decides on its own whether it should be marked or not || currently the file annotation tab throws an exception:```17 39294 [javafx application thread] error orgjabrefguidefaultinjector - cannot instantiate dependency: interface orgjabrefmodelutilfileupdatemonitorjavalanginstantiationexception: orgjabrefmodelutilfileupdatemonitor	at javalangclassnewinstance(classjava:427) ~[?:180_162]	at orgjabrefguidefaultinjectorcreatedependency(defaultinjectorjava:43) ~[main/:?]	at comairhacksafterburnerinjectioninjectorinstantiatemodelorservice(injectorjava:114) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerinjectioninjectorinjectmembers(injectorjava:147) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerinjectioninjectorinjectmembers(injectorjava:132) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerinjectioninjectorinjectandinitialize(injectorjava:125) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerinjectioninjectorregisterexistingandinject(injectorjava:105) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerinjectioninjectorinstantiatepresenter(injectorjava:57) ~[afterburnerfx-170jar:?]	at orgjabrefguidefaultinjectorinstantiatepresenter(defaultinjectorjava:58) ~[main/:?]	at comairhacksafterburnerviewsfxmlviewlambda$loadsynchronously$1(fxmlviewjava:96) ~[afterburnerfx-170jar:?]	at javafxfxmlfxmlloader$valueelementprocessattribute(fxmlloaderjava:929) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$instancedeclarationelementprocessattribute(fxmlloaderjava:971) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$elementprocessstartelement(fxmlloaderjava:220) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$valueelementprocessstartelement(fxmlloaderjava:744) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderprocessstartelement(fxmlloaderjava:2707) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2527) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerviewsfxmlviewinitializefxmlloader(fxmlviewjava:125) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerviewsfxmlviewgetview(fxmlviewjava:137) ~[afterburnerfx-170jar:?]	at orgjabrefguiabstractviewgetview(abstractviewjava:28) ~[main/:?]	at orgjabrefguientryeditorfileannotationtabfileannotationtabbindtoentry(fileannotationtabjava:29) ~[main/:?]	at orgjabrefguientryeditorentryeditortablambda$0(entryeditortabjava:36) ~[main/:?]	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295) ~[jfxrtjar:?]	at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_162]	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294) ~[jfxrtjar:?]	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95) ~[jfxrtjar:?]	at comsunglassuiwinwinapplication_runloop(native method) ~[jfxrtjar:?]	at comsunglassuiwinwinapplicationlambda$null$147(winapplicationjava:177) ~[jfxrtjar:?]	at javalangthreadrun(threadjava:748) [?:180_162]caused by: javalangnosuchmethodexception: orgjabrefmodelutilfileupdatemonitor<init>()	at javalangclassgetconstructor0(classjava:3082) ~[?:180_162]	at javalangclassnewinstance(classjava:412) ~[?:180_162]	 30 more17 39348 [javafx application thread] error orgjabreffallbackexceptionhandler - uncaught exception occurred in thread[javafx application thread5main]javalangillegalstateexception: cannot load orgjabrefguientryeditorfileannotationtabfileannotationtab	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:101) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerviewsfxmlviewinitializefxmlloader(fxmlviewjava:125) ~[afterburnerfx-170jar:?]	at comairhacksafterburnerviewsfxmlviewgetview(fxmlviewjava:137) ~[afterburnerfx-170jar:?]	at orgjabrefguiabstractviewgetview(abstractviewjava:28) ~[main/:?]	at orgjabrefguientryeditorfileannotationtabfileannotationtabbindtoentry(fileannotationtabjava:29) ~[main/:?]	at orgjabrefguientryeditorentryeditortablambda$0(entryeditortabjava:36) ~[main/:?]	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295) ~[jfxrtjar:?]	at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_162]	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294) ~[jfxrtjar:?]	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95) ~[jfxrtjar:?]	at comsunglassuiwinwinapplication_runloop(native method) ~[jfxrtjar:?]	at comsunglassuiwinwinapplicationlambda$null$147(winapplicationjava:177) ~[jfxrtjar:?]	at javalangthreadrun(threadjava:748) [?:180_162]caused by: javafxfxmlloadexception: /e:/workspace/jabref/jabref/bin/main/org/jabref/gui/entryeditor/fileannotationtab/fileannotationtabfxml:21	at javafxfxmlfxmlloaderconstructloadexception(fxmlloaderjava:2601) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2579) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[afterburnerfx-170jar:?]	 12 more``` || if someone has a little time on his hands it would be good if this were re-aligned with master i just wanted to try cherry-picking something into this branch as suggested here  but its not possible to do that because of the current divergence || i just tested #3730 on this branch and both bugs reported (entry type change crashes entry editor toggling quality assurance crashes entry editor) seem to be fixedhowever i could no longer save the file anymore and got the usual non-informative stack trace instead ie `javalangillegalstateexception: not on fx application thread currentthread  awt-eventqueue-0` (ill add this to the list of known bugs here)a number of tests are still failing i would be cool if we could get the build back into a working state and then go on fixing the remaining bugs || some of the failing tests are due to language keys no longer needed/missing i will take a look at that later  || i started removing some obsolete language keys yesterday but then stopped since im not sure which of those are still needed when we readd some of the toolbar buttons thus i would wait with the language keys until after the devcall speaking of language keys @koppor can already start contemplating how we merge the menu and usual language files using crowdin javafx does not the special treatment for menu titles and thus the separation is obsolete || @tobiasdiez finally we can get rid off these two different files  better we structure the files inside: first the menu entries then the other keys || i finally fixed the weird npe that was haunting me today with the fileannotationtab apparenlty an instance of the defaultfileupdatemonitor was injected and not the interface the previously instance was just initialized without starting the watching thread therefore the watcher threw an npe || current status: this branch still not starts the gui under macos```> task   info 23-02-2018 14:26 18: configuration file has been successfully found as resource14 28416 [awt-eventqueue-0] info  orgjabreflogicimporteropendatabase - opening: /users/dietzl/git/literature/masterbib<-->  ";;;;1;1;fix build;
3621;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531;;0;add support for grant and revoke;add authorization support on the sql front-end;i am looking at implementing this feature  ||;;;;0;1;;
3621;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531;;0;doonempty() operator?;"is it possible we can add an `observabledoonempty()` operator? sometimes when im debugging or want to handle an empty `observable` id like to raise an error display a message or some other action to handle the emptiness```observable<string> source  sourcedoonempty(() -> systemoutprintln(""no items were emitted!""))subscribe(systemout::println)```";"put in a pr with this operator implemented #3624 || the name of `doonempty` is not consistent with other methods eg doonnext means triggering a function when `onnext` is called however there is no method called `onempty` || technically that is true but i cant really think of a better operator name that expresses the intent as clearly as `doonempty()` trying to conform with `dooncompletedifempty()` or some other excessively descriptive name can make it verboseyou all are welcome to change it if you feel its warranted though || although it does not follow the strict definition of ""event"" by rx standards one could argue that emptiness is an event resulting from the `oncompleted()` event i guess the real question is will rxjava users get confused by the name `doonempty()` implying there is a nonexistant `onempty()` event or is it more intuitive to call it that? || i think `doonempty` is a natural name for this one || whats the status on this? is this planned for a layer release? || you can achieve a similar effect via composition``` javaobservableempty()switchifempty(observableempty()dooncompleted(() -> {  }))subscribe()``` || oh nice thats clever and it doesnt even require any custom operator implementation i can go ahead and close this then ive started using kotlin with extension functions so its marginalized the need personally for me to put this in a centralized library  || sorry to necro this but i still think this would be useful as a public api even if its a small composition under the hood theres precedent for it a few other areas in the api that just call a few other top-level methods under the hood || you can try convincing @akarnokd as i agree this would be a good operator if not seriously check out kotlin you can add your own operators to observable via extension functions without any call to lift() or compose() kotlin is officially supported on android as well || android is supported by jetbrains kotlin is not officially supported by android its nice but not everyone is using kotlin in their projects || ";;;;0;1;;
3623;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> add splitter.splittostream().  61affd0d3d70fdadf90100d54e1a83425b717f56;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> s/a/an/e2564c321bd3bc71cbb77a6af7ccac1be30e9b46-------<p> add splittersplittostream()61affd0d3d70fdadf90100d54e1a83425b717f56;;;;;1;1;add splittersplittostream()-------------created by moe: https://githubcom/google/moemoe_migrated_revid271168270;
3623;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> add splitter.splittostream().  61affd0d3d70fdadf90100d54e1a83425b717f56;;0;fix errorprone errors;"this fixes```/home/ubuntu/jabref/src/main/java/org/jabref/logic/citationstyle/citationstylejava  error: [streamresourceleak] streams that encapsulate a closeable resource should be closed using try-with-resources                list<path> allstyles  filesfind(jarfsgetrootdirectories()iterator()next() 1 (file attr) -> filetostring()endswith(""csl""))collect(collectorstolist())                                                 ^    (see   did you mean list<path> allstyles ?note: some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details1 error```";@tobiasdiez @siedlerchr can you have a look if the exception handling is correct now? see c93ae63 for that || @linusdietz thanks the code looks good to me! ||;;;;1;1;catch uncheckedioexceptions;
3623;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> add splitter.splittostream().  61affd0d3d70fdadf90100d54e1a83425b717f56;;0;replace nativecodeloader in shaded hadoop builds;hadoop `nativecodeloader` always logs warnings about not loading the native code and we use some hacky reflection in `hadoopnative` to make it work it would be cleaner just replace the class with our own compatible version;this issue has been automatically marked as stale because it has not had recent activity it will be closed if no further activity occurs ||;;;;0;1;;
3623;0;1;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> add splitter.splittostream().  61affd0d3d70fdadf90100d54e1a83425b717f56;;3618.0;1x: adding source links for @beta and @experimental;solution for issue #3618;  lets merge this? looks trivial and useful ||  @adam-arold could you also submit a pr again 1x branch?  okay will do tomorrow! ||;improve readmemd by adding links to the source files of @beta and @experimental;there are no links to the annotations mentioned above in the documentation and this makes their source unaccessible a bit;closing via #3623 ||;1;0;#3618 adding source links for @beta and @experimental;
3627;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add futuressubmit()relnotes`utilconcurrent`: added `futuressubmit()`479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;;;;1;1;add futuressubmit()relnotes`utilconcurrent`: added `futuressubmit()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid271840585;
3627;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;0;new crowdin translations;enjoy!; please delete the branch after the merge crowdin recreates it || ok i wasnt sure about that next time i will ||;;;;1;1;new translations jabref_enproperties (french);
3627;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;0;remove redundant call to setendpoint;;;;;;0;1;;
3627;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc;;0;1x: added mergedelay operators for iterable of observables;pr for issue #3577; just few things about code style otherwise lgtm  :+1: once you fix the style issue || :+1: after renaming the `mergeiterable` method || :+1: @johnwowus can you please squash commits in your pr into one? || @johnwowus could you squash commits?  @zsxwing done || ;;;;1;1;added mergedelay operators for iterable of observables;
3630;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;moe sync;;;;;;1;1;fix 2 bugs in mediatype parameter handling:1 make empty parameter values serialize to a quoted string2 require parameter values to be asciifixes   made `mediatype` serialize empty parameter values to quoted strings  made `mediatype` reject non-ascii parameter values-------------created by moe: https://githubcom/google/moemoe_migrated_revid272190935;
3630;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;add gitter badge;this addresses  the devcall we decided that we will try to use gitter and see how it goesthe main arguments were:- easy to join for new users- offer help for new developers since the burden of initial jabref development is high for newcomers - even if we have  and  nearly none of the developers uses slack- does not clutter the skype chat of the developers- developers can use [pinned tabs]( to keep gitter always openedwe will shutdown gitter in case there wont be much support from @jabref/developers there (because lack of time) nevertheless we give it a chance 😇;"since testing gitter has been tentatively decided at the devcall ill merge this right away || the gitter chat is meant as a platform to discuss developers question and not to give user support right? in this case i would suggest to follow the [rails example]( and create a `contributing` section in the readme with the two badges ""code helpers"" and ""gitter"" to make the context clear in this new section we could also add links to the contributing faq and the related wiki pages to make contributing even easier || yes you are right: gitter is for developers questions maybe i was to quick with merging apologies! || ";;;;1;1;add gitter badge and hint;
3630;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;0;move tuning and web interface to admin section;;;;;;0;1;;
3630;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;;;3629.0;1x: concatmapeager allow nulls from inner observables;the operator was not allowing `null`s in the inner observablesrelated: #3629;;concatmapeager blows up on null values;"while flatmap and concatmap are fine with flattening null values concatmapeager blows up```import rxobservablepublic class rxjavanullvaluetolerance {    public static void main(string args) {        observablejust(""just me"")                flatmap(nextstring -> observablejust(null))                subscribe(nextobject -> systemoutprintln(""got: "" + nextobject))        systemoutprintln(""flatmap is fine with null values"")        observablejust(""just me"")                concatmap(nextstring -> observablejust(null))                subscribe(nextobject -> systemoutprintln(""got: "" + nextobject))        systemoutprintln(""concatmap is fine with null values"")        observablejust(""just me"")                concatmapeager(nextstring -> observablejust(null))                subscribe(nextobject -> systemoutprintln(""got: "" + nextobject))        systemoutprintln(""concatmapeager is fine with null values"")    }}```(rxjava 110)output:```got: nullflatmap is fine with null valuesgot: nullconcatmap is fine with null valuesexception in thread ""main"" rxexceptionsonerrornotimplementedexception: null elements not allowed    at rxobservable$27onerror(observablejava:7923)    at rxobserverssafesubscriber_onerror(safesubscriberjava:159)    at rxobserverssafesubscriberonerror(safesubscriberjava:120)    at rxinternaloperatorsoperatoreagerconcatmap$eageroutersubscriberdrain(operatoreagerconcatmapjava:216)    at rxinternaloperatorsoperatoreagerconcatmap$eagerinnersubscriberonerror(operatoreagerconcatmapjava:302)    at rxobservableunsafesubscribe(observablejava:8105)    at rxinternaloperatorsoperatoreagerconcatmap$eageroutersubscriberonnext(operatoreagerconcatmapjava:144)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:46)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:35)    at rxobservable$2call(observablejava:162)    at rxobservable$2call(observablejava:154)    at rxobservablesubscribe(observablejava:8191)    at rxobservablesubscribe(observablejava:8158)    at rxobservablesubscribe(observablejava:7914)    at rxjavanullvaluetolerancemain(rxjavanullvaluetolerancejava:18)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:497)    at comintellijrtexecutionapplicationappmainmain(appmainjava:144)caused by: javalangnullpointerexception: null elements not allowed    at rxinternalutilunsafespscarrayqueueoffer(spscarrayqueuejava:104)    at rxinternaloperatorsoperatoreagerconcatmap$eagerinnersubscriberonnext(operatoreagerconcatmapjava:294)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:46)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:35)    at rxobservableunsafesubscribe(observablejava:8098)     14 more```this is imo critical since these three operators are closely related and often replaced thru each other depending on the concrete ""flattening"" requirements";@akarnokd what do you think about this one? best regards peti || yes this is yet another oversight in eager concatmap ill post the fix soon || @akarnokd  thanks a lot! ||  in #3630  ||;1;0;1x: concatmapeager allow nulls from inner observables;
3634;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> add constant for the cross-origin-opener-policy header.    relnotes=adds constant for the cross-origin-opener-policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add missing @since 20052ba7eb195ad4c1f8095d99216610df39ce4e644-------<p> add constant for the cross-origin-opener-policy headerrelnotesadds constant for the cross-origin-opener-policy headeraa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;;;;1;1;add constant for the cross-origin-opener-policy headerrelnotesadds constant for the cross-origin-opener-policy header-------------created by moe: https://githubcom/google/moemoe_migrated_revid272415924;
3634;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> add constant for the cross-origin-opener-policy header.    relnotes=adds constant for the cross-origin-opener-policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;0;incorrect ris fields;greetingsim the developer of the academic bloggers toolkit plugin for wordpress and some of my users were having difficulty importing ris from jabref upon further investigation it looks like you are currently mis-keying some fields  to the ris specification `a1-a4` are exclusively _author_ fields only the `ed` field should be used for editorsrelated: https://githubcom/dsifford/academic-bloggers-toolkit/issues/409#issuecomment-357453191;"also while i have your attention it appears that your ris exporter is leaving tons of blank lines (ostensibly where optional fields were skipped)heres an example that i just tried:```txtty  - bookau  - smith bobau  - doe janau  - brown judya2  - martin stevea2  - clark joet1  - testing book titlepb  - test publishery1  - 2015/octobervl  - 1er  -``` || thanks for reporting! this shouldnt be too hard to fixrelated issue: #2607 || sure thing happy to helpheres the list of field mappings that i use for ris files:  fields:  finally these: above fields include the standardized fields that youd expect but also non-standard (but highly used) fields that ive seen other applications export into (eg zotero endnote etc) hope thats useful!  || the import-related problems described in this issue should be  by #3642 the export-related formatting issues are still present but since this is about formatting and not functional correctness ill reclassify this issue from bug to enhancement || the blank lines in the export are now resolved as well by  #3661so i am closing this issue || ";;;;0;1;;
3634;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> add constant for the cross-origin-opener-policy header.    relnotes=adds constant for the cross-origin-opener-policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;0;split scheduling causes scalability bottleneck on large clusters;the split scheduler is by far the largest consumer of cpu on large active clusters:as reported by perf:```1232% comfacebookprestoexecutionnodescheduler$nodeselectorcomputeassignments1078% comfacebookprestoexecutionnodetaskmapgetpartitionedsplitsonnode278% comfacebookprestoexecutionnodescheduler$nodeselectorselectnodes252% javautilconcurrentconcurrenthashmaptransfer241% comfasterxmljacksoncorejsonutf8streamjsonparsernexttoken```;merged in  ||;;;;0;1;;
3634;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> add constant for the cross-origin-opener-policy header.    relnotes=adds constant for the cross-origin-opener-policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466;;0;1x: redo performance checker;this pr adds a perf test to measure the redo-based operators: repeat repeatwhen retry retrywhenresults (intel celeron 1005m windows 7 x64 java 8u72):```benchmark                     (params)        score  score errorroredoperfbaseline              11  9507538496   384265883roredoperfbaseline           11000   127236123     6322513roredoperfbaseline        11000000      131491        7443roredoperfbaseline           10001   126830429     8161593roredoperfbaseline        10001000      130795        8571roredoperfbaseline        10000001      130097        0936roredoperfrepeatcounted         11   473245445    16574938roredoperfrepeatcounted      11000     2039161       64254roredoperfrepeatcounted   11000000        2304        0376roredoperfrepeatcounted      10001    28622433     2896427roredoperfrepeatcounted   10001000       35208        2312roredoperfrepeatcounted   10000001       56978        7278roredoperfrepeatwhen            11   452640724     5506024roredoperfrepeatwhen         11000     2151821      352059roredoperfrepeatwhen      11000000        2159        0066roredoperfrepeatwhen         10001    23919436      217644roredoperfrepeatwhen      10001000       20947        1615roredoperfrepeatwhen      10000001       25316        0970roredoperfretrycounted          11   176470291     4570641roredoperfretrycounted       11000      588985       38103roredoperfretrycounted    11000000        0589        0037roredoperfretrycounted       10001     7178699      123423roredoperfretrycounted    10001000       14470        0699roredoperfretrycounted    10000001        7842        0252roredoperfretrywhen             11   310407136     8052067roredoperfretrywhen          11000      567338       13511roredoperfretrywhen       11000000        0587        0036roredoperfretrywhen          10001    10388639      269817roredoperfretrywhen       10001000       10657        1471roredoperfretrywhen       10000001       11550        0287```the `params` is a composite of number of elements and number of repetitions;;;;;1;1;1x: redo performance checker;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;0;1x: zip performance measure;performance measurement of `zip` and upgrade to jmh 1113results (intel celeron 1005m windows 7 x64 java 8u72):overall throughput values:( fully sync and fully async dual sources:![image]( when either the first or the second is an async source:![image]( the order of sources matter having the async first allows it to start early and not after the synchronous source completes its prefetch run;one comment otherwise looks good ;;;;1;1;1x: zip performance measure;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;0;update documentation to new workflow using crowdin;thanks to crowdin the workflow to add new keys is simplerthis addresses  but not completely fixes it more work is required at `synclangpy` that script however is not absolutely required any more crowdin de facto replaced it-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  <s>if you changed the localization: did you run `gradle ate`?</s>;the current state in `master` was confusing so i merged to keep things flowing  is still open to track issues with the `ate` task that task wont be necessary for all contributors only for maintainers wanting to cleanup the files (like sorting ) however this is not absolutely necessary anymore since crowdin basically takes care ||;;;;1;1;update documentation to new workflow using crowdin- adapt synclangpy to write non-empty values in other languages only- remove nonenglishfilesmusthavesubsetofkeys() test;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;0;reorder hivemetadata allow flags;;;;;;0;1;;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3210.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;quantilesscaleandindexes#computeinplace throws an unexpected arrayindexoutofboundsexception if the array indexes is empty;in `quantilesscaleandindexes#computeinplace` if the array `indexes` of `quantilesscaleandindexes` is empty an unexpected `arrayindexoutofboundsexception` is thrownthe problem is if the last argument(`int indexes`) of `quantilesscaleandindexes` constructor is length of 0 `computeinplace` passes an invalid negative value as the third argument to the private method `selectallinplace` and causes the error to reproduce run this code:```javaimport comgooglecommonmathquantilesimport javautilmappublic class emptyindexes {   public static void main(string args) {       int empty  {}       int scale  10       int dataset {0 1 2 3 4 5}       quantilesscaleandindexes sai  quantilesscale(scale)indexes(empty)       map<integer double> map  saicomputeinplace(datatset_double)   }}```the program throws `arrayindexoutofboundsexception`this is an unfriendly error that can be easily  by using `checkargument()` in constructor of `quantilesscaleandindexes`;link to proposed fix: [pr #3211]( || thanks for this @nhatdinh  i guess we missed this error case ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3211.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;check the array indexes in quantilesscaleandindexes is non empty;fix [issue #3210 ](https://githubcom/google/guava/issues/3210);   ;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3580.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;simplify some code;remove some redundant if statementbesides i use toarray(new myclass[0])  replace toarray(new myclass[mylistsize()]) for improving the  efficiency  of the codehttps://stackoverflowcom/questions/174093/toarraynew-myclass0-or-toarraynew-myclassmylist-size;       i signed it! || clas look good thanks!  || -1 on the localcache changes just as commented in pr #3492 this fixes what is presumably reported by an ide at the expense of readability for no real reason  || @ljacqu ohsorry i prefer the version that i commit because i would do the same thing in my daily codingi can also understand that different projects have different coding styles do you mean that all the changes of if statement is unnecessary? if you think so i would revert them into the master version! || @ljacqu  i think that sum  0 needs to be preserved because sum  0 itself has the meaning of isempty positive thinking is more conducive to peoples understanding than negative thinkingif you do not agree with that i can also revert other if statement to the master versionlook forward to your reply || sorry if there was any misunderstanding i‘m not in any way affiliated/involved with guava – i just posted a comment as an individual passing by :) || @ljacqu  that’s all righti am very glad that you can reply to this prthanks for your suggestion ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;3382.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;document the jdk 9+ alternative to `iterators#forenumeration`;- copied the phrasing from the various `streamsstream(optional*)` methods- didnt update the documentation in the android code base (which also mirrors the approach taken for the `streamsstream(optional*)` methods)- not completely sure whether the `unmodifiableiterator`/`iterator` distinction is worth pointing out;the jdk 11 build failures are unrelated to this change ||;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3635;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> check the array indexes in quantiles.scaleandindexes is non empty.  3210 fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> simplify some code.  fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> document the jdk 9+ alternative to  iterators#forenumeration   fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> add a mime type mpeg-dash (mpd files)  fixes #2677  relnotes= net : added the  mediatype  constant for mpeg-dash.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> fix the logic that decides whether to use currentrequestthreadfactory() under app engine.  while there  also support thread renaming under app engine.  fixes  relevant to  (also  the cl in which i experimented with  before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33;;2677.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> check the array indexes in quantilesscaleandindexes is non empty3210fixes #3211823a432ddaa2d274b539e12ed2bb46e5be0658ee-------<p> simplify some codefixes #3580e2362def3408478a4a74d24671aef39171a1e93f-------<p> document the jdk 9+ alternative to `iterators#forenumeration`fixes #3382e432be553038b4c67f22abb8c27f82ab6d480f3d-------<p> add a mime type mpeg-dash (mpd files)fixes #2677relnotes`net`: added the `mediatype` constant for mpeg-dash579ccf6c0181097be7b895ec145f04502234ef0e-------<p> fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)7bd4b2351c1483f34e7192768b4f3e7a10447c33; all non-googler contributions are taken from prs ||;add a mime type mpeg-dash (mpd files);this format is becoming a thing i couldnt find it in guavas media types;   ;1;0;fix the logic that decides whether to use currentrequestthreadfactory() under app enginewhile there also support thread renaming under app enginefixes  to  the cl in which i experimented with  before backing it out)-------------created by moe: https://githubcom/google/moemoe_migrated_revid272446666;
3636;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3;;0;add facebook and twitter icons to the toolbar;"before:![before]( also add entry ""twitter"" to ""jabref resources""- put ""opens jabrefs x page"" together in jabref_*propertiesdoes not connect to twitter directly thus no spying by twitter facebook  refs   change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?";;;;;1;1;"add facebook and twitter icons to the toolbar- also add to ""jabref resources""- put ""opens jabrefs x page"" together in jabref_*properties";
3636;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3;;0;add nested rowtype reference support;;"""dereference"" should we spelled as one word throughout the code || back to you for comments || there are a couple edge cases you missed had a couple other minor comments too so just put the updates in a separate commit and ill review again :) || @joy-yao this pr fixes  right? || thanks chris updated with your review comments also fixes two issues -- one is with row field in join on clause and the other is the one you pointed out select sum(acol1[1]col1)  group by acol1[1] added test cases for both cases || @cberner  yes this 3371 || had a minor comment looks goodwait for the release though and remember to squash the commits || thanks a lot @cberner ! addressed your comment squashed and will merge after the release : ) || ";;;;0;1;;
3636;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3;;0;throttlefirst - discrepancy between implementation & marble diagrams;by [implementation]( the operators window isnt  width whenever a new item is emitted a window is started and the operator makes sure that another item isnt emitted before the window expires there is no fixed width window or ticking at scheduled intervals**discrepancies**- the [doc]( says that it has fixed width window- the marble diagrams - [diagram 1]( & [diagram 2]( depict as if it ticks at scheduled intervals;closing via  the updated diagram should appear on the webpage with the next reactivexgithubio update i guess ||;;;;0;1;;
3636;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add testlib readme.  3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> change quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  fixes   relnotes= math :  quantiles   compute()  methods which return a  map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3;;3453.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add testlib readme34533b0f1e580b4e0bde8fd4806c832389d0aade4063-------<p> change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided6a2d070ac268c138d6ad039605de54f535d5f5f3;;add testlib readme;;;1;0;change quantiles compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes()fixes  `quantiles` `compute()` methods which return a `map` now return a map with entries in the same order in which the indexes were provided-------------created by moe: https://githubcom/google/moemoe_migrated_revid272459623;
3637;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83;;0;new crowdin translations;enjoy!;;;;;1;1;merge branch master into l10n_master;
3637;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83;;0;"""entering secondary queue failed"" when greater than maxqueued queries enter queue for which they have slots reserved";"consider queues:```    ""user${user}"": {      ""maxconcurrent"": 2      ""maxqueued"": 2    }    ""dashboard${user}"": {      ""maxconcurrent"": 1      ""maxqueued"": 1    }```then we start two queries at the same time two slots will be reserved in `dashboard${user}` queue due to the current implementation of the queues the queries will first be enqueued in the `dashboard${user}` (even though one of them could be immediately started) in this case `queryqueuesize` will be 2 and greater than `maxqueued` this will cause `entering secondary queue failed` error to be thrown (`comfacebookprestoexecutionqueuedexecutionstart(queuedexecutionjava:74`)to reproduce this issue on your machine comment out line nr 56 (waiting for the first query to start) in  `testsqlqueryqueuemanager` and run the testfyi: @cberner @electrum @kokosing ";i will try to solve this issue ||;;;;0;1;;
3637;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83;;0;handle predicate exceptions properly in skipwhile;a non-fatal exception thrown  predicatecall()` in `operatorskipwhile` could result in the error being reported by an upstream operator this pr ensures that the error is reported by the operator in which it occursive added a unit test for this scenario that failed with the original code and a couple of other teststhere are a few more of these floating around that ill submit prs for as well;unrelated unit test failure `backpressureteststestmergeasync` ||  ;;;;1;1;handle predicate exceptions properly in skipwhile;
3637;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> bump version  which went out of date since the previous cl was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> use if statement instead of for statement for a single item.  3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> upgrade maven source plugin from 2.1.2 to 3.1.0  fixes   e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> document the jdk 9+ alternative to  moreobjects#firstnonnull   fixes   145da12d85b536d6f2a527e1ccf2430147fa6b83;;3633.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> bump version which went out of date since the previous cl was created90f4a1c88941d1d68ec2fc68397a5e11fefa7355-------<p> use if statement instead of for statement for a single item3633020621e474e228b4b9c12dbd24badd9590b0af8e-------<p> upgrade maven source plugin from 212 to 310fixes  document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes https://githubcom/google/guava/pull/3383145da12d85b536d6f2a527e1ccf2430147fa6b83;;code improvement `if` statement instead of a for `statement` to a single item;code improvement using `if` statement instead of a for `statement` to a single itemi also found some classes with empty methods that are not being used by the project is this correct? if these methods can be removed id like to open a pr for thisex: `allequalordering_customfieldserializerdeserialize(serializationstreamreader reader allequalordering instance)`;     clas look good thanks!  || thanksthe `customfieldserializer` methods are used through reflection by [gwt]( during its gwt-rpc serialization (were actually removing support for that at the beginning of next year but well take care of it then) ||;1;0;document the jdk 9+ alternative to `moreobjects#firstnonnull`fixes  by moe: https://githubcom/google/moemoe_migrated_revid272511395;
3640;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change tryparse methods to explicitly document that they throw npe if the input is null.  this is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  fixes   995c07eb95d5e5fac35f3f1219dbb4e4bed83d11;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> change tryparse methods to explicitly document that they throw npe if the input is nullthis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception ""if parsing fails""fixes https://githubcom/google/guava/issues/1259995c07eb95d5e5fac35f3f1219dbb4e4bed83d11";;;;;1;1;"change tryparse methods to explicitly document that they throw npe if the input is nullthis is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception ""if parsing fails""fixes  by moe: https://githubcom/google/moemoe_migrated_revid272520863";
3640;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change tryparse methods to explicitly document that they throw npe if the input is null.  this is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  fixes   995c07eb95d5e5fac35f3f1219dbb4e4bed83d11;;0;redo not working;"i am using jabref 41 on macos and the redo feature (after a redo) is not working when i call ""undo"" ""redo"" does not appear as clickable and the shortcut does not work";thank you for your report :+1:this should be  in current `master` please try the latest build from  ||;;;;0;1;;
3640;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change tryparse methods to explicitly document that they throw npe if the input is null.  this is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  fixes   995c07eb95d5e5fac35f3f1219dbb4e4bed83d11;;0;fix arraytypeequalto to work with comparable non-orderable types;attempt to 3542 still having some trouble passing the new test because its not clear how comparable non-orderable types should be handled at lower layers;let me know when you address the comments || @cberner this pull request seems good to me please take a look and then assign back to me@raghavsethi squash your commits || ;;;;0;1;;
3640;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change tryparse methods to explicitly document that they throw npe if the input is null.  this is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  fixes   995c07eb95d5e5fac35f3f1219dbb4e4bed83d11;;0;fix error handling in onbackpressuredrop;`ondropcall()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operatorthis pr includes a unit test that failed on the original code; ;;;;1;1;fix onbackpressuredrop error handling of failure in ondrop action;
3644;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove duplicate null check from enummultiset.  fixes   079d1732c6740da9d499b2ff4c94fb37b1b66b57;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> remove duplicate null check from enummultisetfixes https://githubcom/google/guava/pull/3559079d1732c6740da9d499b2ff4c94fb37b1b66b57;   ;;;;1;1;remove duplicate null check from enummultisetfixes  by moe: https://githubcom/google/moemoe_migrated_revid272892514;
3644;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove duplicate null check from enummultiset.  fixes   079d1732c6740da9d499b2ff4c94fb37b1b66b57;;0;add 0119 release notes;;;;;;0;1;;
3644;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove duplicate null check from enummultiset.  fixes   079d1732c6740da9d499b2ff4c94fb37b1b66b57;;0;1x: fix synconsubscribe not signalling onerror if the generator crashes;discovered in a [stackoverflow]( question;  @stealthcode do you have time to review #3631 see what else can be included into 111 and hopefully release it this week? || sure ill see what we can do ||;;;;1;1;1x: fix synconsubscribe not signalling onerror if the generator crashes;
3648;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> address tsan errors:1 suppress safe racy init in abstractmultiset and hashbimap all the classes that are stored in the newly annotated fields have only final fields (except hashbimapinverse which inherits abstractbimaps keyset and values fields which are themselves @lazyinit) so they are safe to read racily2 mark some graph ""cache"" fields as volatile these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get()) the graph stores the entry in a field that way if the user then queries it again (such as to look up the value associated with a key during iteration) the graph doesnt have to perform a potentially mildly expensive lookup but this caching isnt implemented in a thread-safe way it *ought* to be safe to initialize a graph in one thread safely publish it and then read it concurrently from other threads but because of the racy reads of the cached entry fields i dont think this is guaranteed to be saferelnotes`graph`:  data race07eba15451f7d0dc10ab8328a6d595ab1e68abac";;;;;1;1;"address tsan errors:1 suppress safe racy init in abstractmultiset and hashbimap all the classes that are stored in the newly annotated fields have only final fields (except hashbimapinverse which inherits abstractbimaps keyset and values fields which are themselves @lazyinit) so they are safe to read racily2 mark some graph ""cache"" fields as volatile these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get()) the graph stores the entry in a field that way if the user then queries it again (such as to look up the value associated with a key during iteration) the graph doesnt have to perform a potentially mildly expensive lookup but this caching isnt implemented in a thread-safe way it *ought* to be safe to initialize a graph in one thread safely publish it and then read it concurrently from other threads but because of the racy reads of the cached entry fields i dont think this is guaranteed to be saferelnotes`graph`:  data race-------------created by moe: https://githubcom/google/moemoe_migrated_revid273585560";
3648;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac;;0;chaining of modifiers does not work (in all cases?);-  i have tested the latest master version from  and the problem persistsjabref version 41 on debian buster/sidsteps to reproduce:1 chain modifiers for the bibtex key generator [as described in the docs]( have a bibtex file where both modifiers would have an effect3 observe that only the last modifier will be applied<details>despite the configured pattern `[auth:(_):lower][veryshorttitle (_)]`  the example bibtex:```@article{interesting  title      {the interesting title}}```leads to the bibtex key as seen aboveexpected key (and bibtex again):```@article{_interesting  title      {the interesting title}}```</details>thanks for this powerful piece of floss!;great thank you very much @tobiasdiez ! ||;;;;0;1;;
3648;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac;;0;passwords with diactric characters are not parsed correctly;i had a connector with a password containing the letter ö via native mysql client i was able to connect with the username and password supplied in the properties file but prestodb could not access anything;presto uses the javautilproperties ( class to parse this file  you should be able to encode unicode characters using the java escape form (eg `\u0009` for a tab) || javautilproperties uses iso 8859-1 encoding by default we might want to change the loader to decode the files with utf-8 ;;;;0;1;;
3648;1;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac;;0;2x: add support for concurrently inserting actions while advancing time;this change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the testscheduler;im in for this small change could you rebase/redo this for the current 2x branch? || sure will do that today || ;;;;1;1;removing the unit test proving the thread safety ofa blockingpriorityqueue;
3650;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> require tokens to be non-empty.  followup to cl 272190935.  fixes  (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  relnotes=***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> steam -> stream in the names of certain locals in bytestream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [opensearch] add mediatype for  application/opensearchdescription+xml   relnotes=add mediatype for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> revert previous cl:  ============ log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53;;0;moe sync;"this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> require tokens to be non-emptyfollowup to cl 272190935fixes  (again :))b080067280ab22f262880d222c0a75d043962f4f-------<p> log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerablerelnotes***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled set the `guavagwtemergency_reenable_rpc` system property to `false`750db498a0108802f3de1905a2a56d956cd9cda3-------<p> steam -> stream in the names of certain locals in bytestream0ee31e21a41be3f87831446374e323c7f08f0011-------<p> [opensearch] add mediatype for ""application/opensearchdescription+xml""relnotesadd mediatype for ""application/opensearchdescription+xml""6be97d88570e0990fbe5a91326620df9f2a09853-------<p> revert previous cl:log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerable82838c5a9a161937c4ac91f3abd3bf7a26202f53";;;;;1;1;revert previous cl:log warnings for users who send guava types over gwt-rpcive left this change out of the android branch for starters its not necessary there since we dont support gwt but normally wed include it anyway to minimize diffs however doing so increases the number of classes retained after running proguard (thanks i assume to the logger field) there are other ways of getting around this but for a temporary feature the diffs seem tolerable-------------created by moe: https://githubcom/google/moemoe_migrated_revid273825377;
3650;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> require tokens to be non-empty.  followup to cl 272190935.  fixes  (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  relnotes=***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> steam -> stream in the names of certain locals in bytestream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [opensearch] add mediatype for  application/opensearchdescription+xml   relnotes=add mediatype for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> revert previous cl:  ============ log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (french);
3650;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> require tokens to be non-empty.  followup to cl 272190935.  fixes  (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  relnotes=***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> steam -> stream in the names of certain locals in bytestream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [opensearch] add mediatype for  application/opensearchdescription+xml   relnotes=add mediatype for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> revert previous cl:  ============ log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53;;0;turn compaction off at table level;;;;;;0;1;;
3650;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> require tokens to be non-empty.  followup to cl 272190935.  fixes  (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  relnotes=***warning to users of gwt-rpc:*** the first guava release of 2020 will [remove support for gwt-serializing guava types]( to test ahead of time with gwt-rpc support for guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> steam -> stream in the names of certain locals in bytestream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [opensearch] add mediatype for  application/opensearchdescription+xml   relnotes=add mediatype for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> revert previous cl:  ============ log warnings for users who send guava types over gwt-rpc.  i ve left this change out of the android branch. for starters  it s not necessary there  since we don t support gwt. but normally we d include it anyway to minimize diffs. however  doing so increases the number of classes retained after running proguard (thanks  i assume  to the logger field). there are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53;;0;observablerepeat(final long count) marble diagram is misleading;the repeat marble diagram is incorrect - the actual documentation is ok but the diagram referenced here  shows `repeat(1)` causing 2 repetitions of the source observablethe diagram in question: https://rawentcom/wiki/reactivex/rxjava/images/rx-operators/repeatonpng;that was something i noticed when combining the retrywhen and repeatwhen i looked around and having repeat(0) mean do nothing seemed to be consistent with other apis || repeat(0) doing nothing is documented in the text i would also normally expect repeat(1) to cause 2 instances of the source observable (the original and 1 repeat) to be seen but thats not how its   i changed the labels on those diagrams to be repeat(2) || confirmed the diagram reflects the behavior  great! ||;;;;0;1;;
3654;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3;;0;fix icar fetcher test which resulted in build failure;   -->merge if green-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);ok ill merge right away but indeed why does this break the build? is it not sorted into the fetcher tests? ||;;;;1;1;fix icar fetcher test which resulted in build failure;
3654;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3;;0;exception on cli;```presto> show tables from raptorsystem table-------- shards(1 row)query 20150922_190632_00002_88uiv finished 1 node 2 total 2 done (10000%)cpu time: 00s total   111 rows/s 325kb/s 81% activeper node: 01 parallelism     7 rows/s   223b/sparallelism: 010:00 [1 rows 30b] [7 rows/s 223b/s]presto> [error] failed to disable interrupt characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisableinterruptcharacter(unixterminaljava:153)    at jlineconsoleconsolereaderreadline(consolereaderjava:2445)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)[error] failed to disable litteral next characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisablelitteralnextcharacter(unixterminaljava:185)    at jlineconsoleconsolereaderreadline(consolereaderjava:2448)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)```;happens to me also seems to be happening under the following conditions:1 the query has some results and i immediately press q to exit the viewer2 i define the json schema for the tables i am querying adding just the `kafka_key` field as described here:  || same problem here is a basic query against a sample table:```presto-cli --catalog hivepresto> use defaultpresto:default> show tables   table   ----------- sample_07  sample_08 (2 rows)query 20151011_043327_00012_vs6yp finished 2 nodessplits: 2 total 2 done (10000%)0:00 [2 rows 60b] [22 rows/s 674b/s]presto:default> select count(*) from sample_07 _col0 -------   823 (1 row)query 20151011_043336_00013_vs6yp finished 1 nodesplits: 2 total 2 done (10000%)0:00 [823 rows 45kb] [395k rows/s 216kb/s]presto:default> [error] failed to disable interrupt characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisableinterruptcharacter(unixterminaljava:153)    at jlineconsoleconsolereaderreadline(consolereaderjava:2445)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)[error] failed to disable litteral next characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisablelitteralnextcharacter(unixterminaljava:185)    at jlineconsoleconsolereaderreadline(consolereaderjava:2448)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)]``` || facing the same issue presto> select \* from defaultpresto_hive_test##                              note                               presto is accessing hive table thanks fb for creating this (1 row)query 20151018_211002_00023_uvnc3 finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 61b] [8 rows/s 535b/s]presto> select \* from defaultpresto_hive_test##                              note                               presto is accessing hive table thanks fb for creating this (1 row)query 20151018_211003_00024_uvnc3 finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 61b] [11 rows/s 676b/s]presto> select \* from defaultpresto_hive_test##                              note                               presto is accessing hive table thanks fb for creating this (1 row)query 20151018_211004_00025_uvnc3 finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 61b] [7 rows/s 485b/s]presto> select \* from defaultpresto_hive_test##                              note                               presto is accessing hive table thanks fb for creating this (1 row)query 20151018_211005_00026_uvnc3 finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 61b] [8 rows/s 514b/s]presto> [error] failed to disable interrupt characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisableinterruptcharacter(unixterminaljava:153)    at jlineconsoleconsolereaderreadline(consolereaderjava:2445)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)[error] failed to disable litteral next characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisablelitteralnextcharacter(unixterminaljava:185)    at jlineconsoleconsolereaderreadline(consolereaderjava:2448)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32)select \* from defaultpresto_hive_testerror running command: javalanginterruptedexceptionpresto> [error] failed to disable interrupt characterjavalanginterruptedexception    at javalangobjectwait(native method)    at javalangobjectwait(objectjava:502)    at javalangunixprocesswaitfor(unixprocessjava:396)    at jlineinternalterminallinesettingswaitandcapture(terminallinesettingsjava:339)    at jlineinternalterminallinesettingsexec(terminallinesettingsjava:311)    at jlineinternalterminallinesettingsstty(terminallinesettingsjava:282)    at jlineinternalterminallinesettingsundef(terminallinesettingsjava:158)    at jlineunixterminaldisableinterruptcharacter(unixterminaljava:153)    at jlineconsoleconsolereaderreadline(consolereaderjava:2445)    at jlineconsoleconsolereaderreadline(consolereaderjava:2372)    at comfacebookprestoclilinereaderreadline(linereaderjava:51)    at jlineconsoleconsolereaderreadline(consolereaderjava:2360)    at comfacebookprestocliconsolerunconsole(consolejava:149)    at comfacebookprestocliconsolerun(consolejava:128)    at comfacebookprestocliprestomain(prestojava:32) || looking through the presto-cli code linereader which is extended from jlines consolereader has an api call to sethandleuserinterrupt(true) i set that one to false so that jvm performs its default action and added sethandlelitteralnext(false) so far the exceptions havent come up i am curious about why presto cli needs to be able to handle literals next || this happens to me also when using `presto-cli` via ssh onto an aws emr master node ive noticed it happens when you press the `up` arrow key to retrieve a previously used query or command then hitting the `enter` key  || :+1: with mysql query as well || i am going to fix thisfyi @haozhun this is related to  (in this case main) is interrupted when it is setting some stty properties || here is a fix:  ||;;;;0;1;;
3654;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3;;0;add support for adding multiple subscriptions to a composite subscription at once;instead of multiple `compositesubscriptionadd(subscription)` calls it would be nice to be able to do something like `compositesubscriptionadd(subscription subscriptions)`currently you can only do something like this in the constructor for `compositesubscription`;hi what is your use case for it? does it have to be atomic?i particularly never needed such a method but prs are welcome || it would help reduce the verbosity of multiple `compositiesubscriptionadd(subscription)` callsim calling it from the main thread (android) to register for events so no it would not need to be atomic for my specific use case || #3720  || closing via #3720 ||;;;;0;1;;
3654;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> switch to an internal annotation for ignoring jre requirements  3652  relnotes=removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> rename package-private duration apis:   saturatedtonanos() -> tonanossaturated()   saturatedtomillis() -> tomillissaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> suppress more goodtime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3;;3652.0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> switch to an internal annotation for ignoring jrerequirements3652relnotesremoved dependency on `animal-sniffer-annotations`3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86-------<p> rename package-private duration apis:  saturatedtonanos() -> tonanossaturated()  saturatedtomillis() -> tomillissaturated()#goodtimef3a053ea12ae808ddd52094d36fcd88fe95881f2-------<p> suppress more goodtime errors9e885c85265c3686aa876acebe6bb6bda18de1f3;;switch to an internal annotation for ignoring jre requirements; this completely removes the dependency on animal-sniffer annotations;(thanks!) ||;1;0;suppress more goodtime errorsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid274023658;
3657;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add stream support to stats and statsaccumulator.  this adds:  - a static method stats.tostats() that returns a collector<number  statsaccumulator  stats>.  - stats.of overloads and statsaccumulator.addall overloads that take doublestream  intstream  and longstream.  - a statsaccumulator.addall overload that takes statsaccumulator.  (in passing  this also improves the tests in a couple of ways. it removes the use of static initializer blocks in statstesting  which is contrary to best practice. and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values. this latter change fixes the errorprone warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. it just happened that everything was close enough before.)  relnotes=add stream support to stats and statsaccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> add stream support to stats and statsaccumulatorthis adds: - a static method statstostats() that returns a collector<number statsaccumulator stats> - statsof overloads and statsaccumulatoraddall overloads that take doublestream intstream and longstream - a statsaccumulatoraddall overload that takes statsaccumulator(in passing this also improves the tests in a couple of ways it removes the use of static initializer blocks in statstesting which is contrary to best practice and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values this latter change fixes the errorprone warnings that in some cases the tolerance was actually less than the difference between the expected value and the next nearest double it just happened that everything was close enough before)relnotesadd stream support to stats and statsaccumulatora59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;;;;1;1;add stream support to stats and statsaccumulatorthis adds: - a static method statstostats() that returns a collector<number statsaccumulator stats> - statsof overloads and statsaccumulatoraddall overloads that take doublestream intstream and longstream - a statsaccumulatoraddall overload that takes statsaccumulator(in passing this also improves the tests in a couple of ways it removes the use of static initializer blocks in statstesting which is contrary to best practice and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values this latter change fixes the errorprone warnings that in some cases the tolerance was actually less than the difference between the expected value and the next nearest double it just happened that everything was close enough before)relnotesadd stream support to stats and statsaccumulator-------------created by moe: https://githubcom/google/moemoe_migrated_revid274998178;
3657;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add stream support to stats and statsaccumulator.  this adds:  - a static method stats.tostats() that returns a collector<number  statsaccumulator  stats>.  - stats.of overloads and statsaccumulator.addall overloads that take doublestream  intstream  and longstream.  - a statsaccumulator.addall overload that takes statsaccumulator.  (in passing  this also improves the tests in a couple of ways. it removes the use of static initializer blocks in statstesting  which is contrary to best practice. and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values. this latter change fixes the errorprone warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. it just happened that everything was close enough before.)  relnotes=add stream support to stats and statsaccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;0;problem when building from source for v41;"-  i have tested the latest master version from  and the problem persistsheyi am having problems installing jabref from source which i could do before apparently there is some usage of a deprecated function (see the tail of the log below) i am not sure if i can solve this problem myself or i should simply install from `master` i would like to track if at all possible the tagged versions jabref version `v41` on arch linuxsteps to reproduce:``` ~/d/m/r/jabref   master   git checkout -b install v41switched to a new branch install ~/d/m/r/jabref   install   gradle --version------------------------------------------------------------gradle 441------------------------------------------------------------build time:   2017-12-20 15 23 utcrevision:     10ed9dc355dc39f6307cc98fbd8cea314bdd381cgroovy:       2412ant:          apache ant(tm) version 199 compiled on february 2 2017jvm:          180_144 (oracle corporation 25144-b01)os:           linux 41414-1-arch amd64 ~/d/m/r/jabref   install   gradle releasejar```<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```> task :compilejava processing annotationsannotations processedprocessing annotationsno elements to process/home/aytekin/documents/my_gits/research/jabref/src/main/java/org/jabref/logic/citationstyle/citationstylejava  error: [streamresourceleak] streams that encapsulate a closeable resource should be closed using try-with-resources                list<path> allstyles  filesfind(jarfsgetrootdirectories()iterator()next() 1 (file attr) -> filetostring()endswith(""csl""))collect(collectorstolist())                                                 ^    (see   did you mean list<path> allstyles ?note: some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details1 errorfailure: build failed with an exception* what went wrong:execution failed for task :compilejava> compilation failed with exit code 1 see the compiler error output for details* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights* get more help at  failed in 40s4 actionable tasks: 4 executed  ```</details>";"hi this is a bug we recently  i suggest you direclty compile the latest master || i am asking just out of curiosity: would it not be possible to have semantic versioning that also includes patches like *eg* `v411`? or is `master` always stable? i was preferring tagged versions as they *do* imply the version is stable but i do not know of your policy of course :) || hi we do not follow semantic versioning but we have tags for the release versions due to time and manpower constraints (we all work in our freetime on this project) we do not maintain release branchesso the master is always based on the latest release version + new features/bug fixes which have been merged since release the latest commit leveljust out of curiosity: why dont you use prebuilt jar version of the release? || > hi we do not follow semantic versioning but we have tags for the release versions due to time and manpower constraints (we all work in our freetime on this project) we do not maintain release branchesso the master is always based on the latest release version + new features/bug fixes which have been merged since release the latest commit leveli understand well thank you above all for the amazing product i really like it and i really appreciate your work in my opinion `jabref` is the only solution that i can use with my `git`-tracked documents> just out of curiosity: why dont you use prebuilt jar version of the release?do you mean the `jar`-files in the [releases]( section of the repository? well i can use them i am used to building from source and tracking git repositories other than that for `jabref` especially i would not mind the prebuilt binary i suppose i have a script that traverses my git repositories in a folder and checks for new upstream releasesone question though i am not knowledgeable about java and forgive me if the question is _very_ stupid will it matter if i use oracle version or the openjdk version on my machine when it comes to using the prebuilt binaries? || oracle vs openjdk does not really matters we had some troubles with openjdk in the past but they should be fixed if you use recent versions (of jabref and of openjdk) so it comes down to your personal preference and whats easier to install and run on your particular systemsince the original problem is fixed in `master` ill close this issue now || thank you both of you @siedlerchr and @tobiasdiez for your prompt responses || @aytekinar i think you are a pro and know that jabref depends on javafx i think the arch package is prepared for that for the other distros we have a howto here:  main slogan for the master branch is:>  the master branch is always release readyno separate develop branch ""master"" is the main integration branch and we always use that version in our daily scientific workwe know about [release early release often]( but we try to collect new features togetherfor internal reference: the compile error got fixed at  || thank you @koppor for clarifying the `master` branch issue i will follow this branch and install whenever i feel like it :)> i think you are a pro and know that jabref depends on javafxyes i realized it a couple of versions ago and i installed it:``` ~  pacman -ss javafxextra/java-openjfx 8u172-1 [installed]    java openjfx 8 client application platform (open-source implementation of javafx)```> i think the arch package is prepared for that for the other distros so you say that i am safe with `openjfx` installation i have? sorry for asking this again but as i said i am a noob when it comes to java --- i have not programmed java in my life and i do not know what different implementations mean :) || @aytekinar i would say so we had issues with old openjfx packages but arch always ships the newest ones so this is good to go! || ";;;;0;1;;
3657;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add stream support to stats and statsaccumulator.  this adds:  - a static method stats.tostats() that returns a collector<number  statsaccumulator  stats>.  - stats.of overloads and statsaccumulator.addall overloads that take doublestream  intstream  and longstream.  - a statsaccumulator.addall overload that takes statsaccumulator.  (in passing  this also improves the tests in a couple of ways. it removes the use of static initializer blocks in statstesting  which is contrary to best practice. and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values. this latter change fixes the errorprone warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. it just happened that everything was close enough before.)  relnotes=add stream support to stats and statsaccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;0;"make ""zone"" keyword non-reserved";;;;;;0;1;;
3657;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add stream support to stats and statsaccumulator.  this adds:  - a static method stats.tostats() that returns a collector<number  statsaccumulator  stats>.  - stats.of overloads and statsaccumulator.addall overloads that take doublestream  intstream  and longstream.  - a statsaccumulator.addall overload that takes statsaccumulator.  (in passing  this also improves the tests in a couple of ways. it removes the use of static initializer blocks in statstesting  which is contrary to best practice. and it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with integer_many_values and long_many_values should scale up the tolerance to match the order of magnitude of the values. this latter change fixes the errorprone warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. it just happened that everything was close enough before.)  relnotes=add stream support to stats and statsaccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d;;0;sample operator: last item before termination is dropped after sampling;hi recently i found that `sample` operator drops last value before `oncompleted` event this is behaviour is valid according to these discussions  and  and this [test]( it originated in rxnet and still exists in rxjava to be consistent across all implementations as far as i understoodbut marble diagram in documentation shows otherwise: item 5 is emitted before termination and sampled by sampler![sample_marble]( behaviour is odd and unexpectable i stumbled across it trying to resolve backpressure issue with observables where last emitted item is the most importantso my question is whether it can be changed? i prepared [a commit]( with fixes and corresponding tests or at least marble diagram should be changed to showcase this behaviour and it would be good to have a note about it in documentationthank you;what about when the source completes and the sampler doesnt? || @akarnokd it would emit the last item from completed source and nothing after that no? || right the diff tricked me i expected 3 calls to emit 1 in samplers onnext 1 in samplers oncompleted and 1 in parents oncompletedbesides i can see that operator still has some issues with unsubscription and backpressure management || yep 2 calls is enough: 1 in samplers onnext and 1 in parents oncompleted || so if the sampler completes then the value should be dropped just like now? || it is ok in my usecase if sampler completes before source completes it means no values are expected before completion but if source completes before sampler does it should emit last value however it worth discussing || see #3658 that contains other fixes || great! also `operatorsamplewithtime` will require fixes too || would you like to submit a pr? || @akarnokd i would like to will submit soon || done  || #3757 ;;;;0;1;;
3658;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> resolve some rawtypes warnings in converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> resolve some rawtypes warnings in converter4e37244fb859e1f99ce3356ffab5b2e8333ad268;;;;;1;1;resolve some rawtypes warnings in converterrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid275108038;
3658;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> resolve some rawtypes warnings in converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268;;0;rename the review tab into comments tab;after a discussion with colleagues it became apparent that the review tab is maybe named a bit misleadingly after all i know it is meant for comments about this paper and i guess few really use it for actual peer-reviews~to keep consistency i have just changed the wording~i wrote a migration and handled conflict cases by asking the user-----  change in changelogmd described-  manually tested changed features in running jabref-  test created-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"@tobiasdiez i did not change the field name to ensure backwards compatibility (otherwise we would have to write a migration)is this a good  (enough) argument?second the tab is not an own class but a custom tab initialized here:  || yeah backwards compatibility is a good point but on the other hand i also find it confusing that the content of the ""comments"" tab is stored in the field `review` i dont know how to proceed maybe we should indeed write a migration || well i just realized that the comments field is also displayed in the general tab :/ thus is might be that users have both the review field and the comments field filledanyways this makes it clear that the solution as it is right now cannot be used and we definitely have to write a migration if we want to rename this tabproposed migration: concatenate the review to the comment field afterwards delete the review fieldthe comment field should go from the general tab to the comments tab || so as discussed this pr does the following:-  rename the review tab into comments tab-  remove the comment field from the general tab-  migrate the review field into comment according to  || i think this pr is quite ready now || @lenhard i have incorporated your suggestions the solution i used for remembering the change in the database was to add a field in the parserresult class and check that when instantiating the basepanel || thanks for all the feedback! ill merge this now and start with the refactoring in the next pr || ";;;;1;1;getters and setters;
3658;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> resolve some rawtypes warnings in converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268;;0;fix planning of huge in lists;;;;;;0;1;;
3658;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> resolve some rawtypes warnings in converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268;;3657.0;1x: fix unsubscription and producer issues in sample(other);this pr fixes 2 bugs with `sample`- termination of the main or sampler subscriber unsubscribed the child subscriber which is not allowed- the sampler wrapped the child subscriber and thus it allowed setting a producer on the child (thus sampling based on request with some sources)in addition #3657 wants to emit the very last item on completion to which i marked the required changes in comments (to be uncommented in a separate pr if needed);restored original completion-unsubscription order + verification ||  ;sample operator: last item before termination is dropped after sampling;hi recently i found that `sample` operator drops last value before `oncompleted` event this is behaviour is valid according to these discussions  and  and this [test]( it originated in rxnet and still exists in rxjava to be consistent across all implementations as far as i understoodbut marble diagram in documentation shows otherwise: item 5 is emitted before termination and sampled by sampler![sample_marble]( behaviour is odd and unexpectable i stumbled across it trying to resolve backpressure issue with observables where last emitted item is the most importantso my question is whether it can be changed? i prepared [a commit]( with fixes and corresponding tests or at least marble diagram should be changed to showcase this behaviour and it would be good to have a note about it in documentationthank you;what about when the source completes and the sampler doesnt? || @akarnokd it would emit the last item from completed source and nothing after that no? || right the diff tricked me i expected 3 calls to emit 1 in samplers onnext 1 in samplers oncompleted and 1 in parents oncompletedbesides i can see that operator still has some issues with unsubscription and backpressure management || yep 2 calls is enough: 1 in samplers onnext and 1 in parents oncompleted || so if the sampler completes then the value should be dropped just like now? || it is ok in my usecase if sampler completes before source completes it means no values are expected before completion but if source completes before sampler does it should emit last value however it worth discussing || see #3658 that contains other fixes || great! also `operatorsamplewithtime` will require fixes too || would you like to submit a pr? || @akarnokd i would like to will submit soon || done  || #3757 ;1;0;1x: fix sample(other) backpressure and unsubscription behavior;
3664;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix bytestreams.skipupto to avoid making unnecessary allocations.  - fixes  - closes   cb0ac2bf8a3a95862b1209fe11a35403554ca611;;0;moe sync;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix bytestreamsskipupto to avoid making unnecessary allocations- fixes  closes https://githubcom/google/guava/issues/3663cb0ac2bf8a3a95862b1209fe11a35403554ca611; cla signed @  ||;;;;1;1;fix bytestreamsskipupto to avoid making unnecessary allocations- fixes  closes  by moe: https://githubcom/google/moemoe_migrated_revid275531490;
3664;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix bytestreams.skipupto to avoid making unnecessary allocations.  - fixes  - closes   cb0ac2bf8a3a95862b1209fe11a35403554ca611;;0;annotations tab - annotation selection not visible for even numbered annotations;version:jabref 42-dev--snapshot--2018-01-20--macinstall4j--3d5e9f251mac os x 10132 x86_64 java 180_152steps to reproduce:1 open the file annotations tab for a reference with a pdf linked and highlighted text2 click on the first annotation and notice it becomes blue while the text is shown in the right panel3 click on the second annotation **the annotation does not become blue (provides no feedback)** the right panel _does_ update to show the correct information howeverbug: **highlighting of even numbered annotations on click is absent functionality is fine however**first annotation selected:![annotation1_selected]( annotation selected:![annotation2_selected](https://user-imagesentcom/777410/35380868-605cd192-01b2-11e8-89fa-9ce9d725feb8png);this seems like the same issue with the file list view in the general tab  || i tested the file list in the **general tab** as @siedlerchr said yes - its exactly the same issue following this i explored other lists and found the same problem in the **optional fields** tab - month drop down list || okay thanks for your quick test i hope this helps us to narrow the error down as it seems to be a more general problem with the listviewrefs #3639 || this should be  in the latest development version could you please check the build from  ;;;;0;1;;
3664;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix bytestreams.skipupto to avoid making unnecessary allocations.  - fixes  - closes   cb0ac2bf8a3a95862b1209fe11a35403554ca611;;0;rewrite a very slow test for cross join;;;;;;0;1;;
3664;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix bytestreams.skipupto to avoid making unnecessary allocations.  - fixes  - closes   cb0ac2bf8a3a95862b1209fe11a35403554ca611;;0;javadoc of empty() method at subscribers class still mentions emptyobserver;`emptyobserver` was removed on  but `empty()` method at `subscribers` class still mentions it:``` java    /**     * returns an inert {@link subscriber} that does nothing in response to the emissions or notifications from     * any {@code observable} it subscribes to this is different however from an {@code emptyobserver} in     * that it will throw an exception if its {@link subscriber#onerror onerror} method is called (whereas     * {@code emptyobserver} will swallow the error in such a case)     *     * @return an inert {@code observer}     */```if i had a good description change for that id create a pr but since i dont have i created this issue :)thanks;how about ```/**     * returns an inert {@link subscriber} that does nothing in response to the emissions or notifications from     * any {@code observable} it subscribes to  will throw an exception if {@link subscriber#onerror onerror} method is called     *     * @return an inert {@code observer}     */``` ||  opening pr or should i? || i will just need to finish some work stuffon tue feb 2 2016 at 5:43 pm mike nakhimovich notifications@githubcomwrote:> opening pr or should i?> > —> reply to this email directly or view it on github>  || already opened i was looking for my first pr to this project :-) || no problem :) || closing via #3665 ||;;;;0;1;;
3675;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2019-10-29;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move the setfuture check into abstractfuture.tostring() and out of pendingtostring()  so that even if the latter is overriden we can include the setfuture detail.  this is useful for futures that initially do some of their own work  but then delegate to setfuture()  as futurecombiner.callasync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;0;moe sync 2019-10-29;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> move the setfuture check into abstractfuturetostring() and out of pendingtostring() so that even if the latter is overriden we can include the setfuture detailthis is useful for futures that initially do some of their own work but then delegate to setfuture() as futurecombinercallasync() does68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;;;;1;1;move the setfuture check into abstractfuturetostring() and out of pendingtostring() so that even if the latter is overriden we can include the setfuture detailthis is useful for futures that initially do some of their own work but then delegate to setfuture() as futurecombinercallasync() doesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid277087923;
3675;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2019-10-29;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move the setfuture check into abstractfuture.tostring() and out of pendingtostring()  so that even if the latter is overriden we can include the setfuture detail.  this is useful for futures that initially do some of their own work  but then delegate to setfuture()  as futurecombiner.callasync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;0;export all fields with their latex free equivalent for ms office;fixes  tests are already  in master (fetcher)   -->(i did not create a new test as i didnt want to mess up #3665 )-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);test cases will hopefully come in another pr ^^ ||;;;;1;1;export all fields with their latex free equivalent;
3675;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2019-10-29;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move the setfuture check into abstractfuture.tostring() and out of pendingtostring()  so that even if the latter is overriden we can include the setfuture detail.  this is useful for futures that initially do some of their own work  but then delegate to setfuture()  as futurecombiner.callasync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;0;add release notes for  throttling changes;;;;;;0;1;;
3675;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2019-10-29;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> move the setfuture check into abstractfuture.tostring() and out of pendingtostring()  so that even if the latter is overriden we can include the setfuture detail.  this is useful for futures that initially do some of their own work  but then delegate to setfuture()  as futurecombiner.callasync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485;;0;1x: fix take(-1) not completing;originally only 0 was checked which resulted in `oncompleted()` but negative values werent when the downstream requested c became -1 and was requested from the source `range` ignores negative requests but other sources may throw iae in that casewith the fix the operator will throw iae in assembly time; why not iae on negative values for the operator? this seems like it could hide errors in math-based `take` values || i dont know could be some historical reasons from the early days of rxjava || just checked rxnet and rxjs both them throw an error for negative values: i suggest lets throw iae || could you also check `skip`? || skip(0) and skip(-1) just returns the source without applying the operator to itfor 2x definitely but im not certain about 1x sounds like an api change || cc @reactivex/rxjava-committers thoughts about this? || for invalid inputs weve typically blown up as early as possible  || i think we need to throw exception we can highlight this in changelog and call it a bug fix because it actually is i guess  || i vote for throwing iaei dont consider its an api change more a bug fix || changed the fix to throw || any reason for not using [`expectedexception`]( that way the exception message can also be verified plus it can be nailed down where the exception is thrown (the moment you call `take(-1)`) || because it is irrelevant in this case what matters is the type iae || ;;;;1;1;1x: change take(negative) to throw iae;
3677;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-10-31;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b;;0;update deps;merge if green;;;;;1;1;fix typo;
3677;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-10-31;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b;;0;presto 0119 can not get table info from mysql database;we face the same problem ashttps://groupsgooglecom/forum/#!topic/presto-users/fy_p3uwhwhm;@martint i think we can close it as a duplicate of #3763 || hellodid you solve the issue ?i actually defined the file mysqlproperties in /presto/etc/catalog and when i try to see the tables in mysql it says there is no catalog with the namecould you please help me with this;;;;0;1;;
3677;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-10-31;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b;;0;1x: negative argument check for skips count and merges maxconcurrent;as per #3675 we should also check the `count` argument of `skip` also added the missing check for `merge`s `maxconcurrent`;id suggest to check exception message here and in the other tests otherwise  > id suggest to check exception message here and in the other tests otherwisedone || thanks @zsxwing! :+1:   ;;;;1;1;1x: negative argument check for skips count and merges maxconcurrent;
3677;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-10-31;this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  this is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> handle stackoverflowerror from both pendingtostring and appenduserobject.  adds a bunch of tests to validate error handling in tostring code - verify that a future completing during the tostring call results in a done formatted string - verify that an exception thrown by pendingtostring doesn t cause tostring to fail - verify that cycles don t cause tostring to fail - verify that deep chains of setfuture don t cause tostring to fail  relnotes=catch stackoverflowerror in abstractfuture.tostring to prevent long chains of futures from failing tostring calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> update documentation  3507  8a0d6bb345341fc0ba91781070da5b522d4b714b;;3507.0;moe sync 2019-10-31;this code has been reviewed and submitted internally feel free to discuss on the pr and we can submit follow-up changes as necessarycommits:<p> fix tostring exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2cathis is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c-------<p> handle stackoverflowerror from both pendingtostring and appenduserobjectadds a bunch of tests to validate error handling in tostring code- verify that a future completing during the tostring call results in a done formatted string- verify that an exception thrown by pendingtostring doesnt cause tostring to fail- verify that cycles dont cause tostring to fail- verify that deep chains of setfuture dont cause tostring to failrelnotescatch stackoverflowerror in abstractfuturetostring to prevent long chains of futures from failing tostring calls29981d416d6b4214e65360ad3d932ba0881a4c8f-------<p> update documentation35078a0d6bb345341fc0ba91781070da5b522d4b714b;;update javadoc of unsignedbytesjava;unsignedbytes ```min()``` and ```max()``` method treat its parameter as unsigned and returns the least and greatest value also too as unsigned respectively it should be updated in the javadoctest case:-input:-```import comgooglecommonprimitivesunsignedbytesclass ex{    static void pr(byte a) {        systemoutprintln(unsignedbytesmin(a)) // 10 is less than -100 when treated as unsigned        systemoutprintln(unsignedbytesmax(a)) // -100 is greater than 10 when treated as unsigned    }    public static void main(string args) {        byte a{-10010}        pr(a)    }}```run it by typing in the terminal:-```javac exjavajava ex```output:-```10-100```;  >  > >     >   for more info** || it looks like we do mention unsignedness in the javadoc of other methods on the class so this seems reasonable ill try to get this submitted internally soon (with a couple small modifications) ||;1;0;update documentation3507-------------created by moe: https://githubcom/google/moemoe_migrated_revid277725484;
3684;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @suppresswarnings( donotmock ) to mocked com.google.common types  @donotmock will be added to these types. this change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> add graphbuilder.incidentedgeorder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> remove usages of deprecated charmatcher functions  3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> have immutablegraph.builder set incidentedgeorder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> migrate org.mockito.matchers#any* to org.mockito.argumentmatchers  the former is deprecated and replaced by the latter in mockito 2. however  there is a functional difference: argumentmatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(class)  or  anyint() ).  any()  will remain to accept anything.  all remaining  any(class)  references are migrated to  nulllable(class)  to maintain the functionality of mockito 1. all remaining  anystring()  references are migrated to  nullable(string.class)  to maintain the functionality of mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d;;0;make javafx a first-class citizen;   -->with this pr the main frame is converted to use javafx thus the role is now inverted and instead of embedding javafx in a swing app we now embedded the old swing controls in a real javafx app hopefully this leads to less problemsthe current state is very very basic and a lot of stuff is missing (side bar menu lila header instead of toolbar) the main reason for putting it out right now is to test if pushing the migration further fixes the issues encountered with linux and macos@siedlerchr @linusdietz could you please try out this version and see if jabref starts and shows a maintable (the latter only works if jabref normally opens a bib file for you since there is currently no gui to open a new file)-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"xbuntu 1604( || @siedlerchr thanks a lot for the active support! only four more menus to go || @tobiasdiez  what do we do with the actions that require a basepanel instance? for example the content selector dialog || for these actions that work against the currently open database i wrote a small wrapper `olddatabasecommandwrapper` this is a bit ugly and should be changed in the long term but i didnt had the motivation to change all actions in `basepanel` so for the content selectors you just pass `actionsmanage_selectors` || i now converted the tools menu - only push to external files and openoffice is missing for the latter i was not sure how i should show that side pane (same applies to web search as well) || this is the current state:![image]( you see is javafx and only two menus are missing concerning the color we still have to experiment a bit (you are welcome to do so just play around with `fx-theme-base` in `maincss`) here in a typical business-blue:![image]( || yeah! which menus are missing? then i could try to work on that || library and quality are the only ones missing || i tried to convert some more actions but still getting some npe when i try to call framegetcurrentbasepanel() inside the actionthats the only showstopper atm  || this pr is now ready for reviewhowever it is big enough to be completely unreviewable sorry for this but converting the menu was not possible in smaller steps i thus would propose to merge it (into the javafx branch) and let our users test it thoroughly i clicked on every menu item to see if something happens and no exception is directly thrown but of course is only a very shallow test and im pretty sure some functionality is broken with this prbtw nice side-effect: jabrefframe has a 30% size decrease (-800 lines net but still sits at 1700)thanks @siedlerchr for the help! @person who merges: please dont squash the commits || i will do play around with the menu items tomorrow and see if i encounter any errosedit// when you open a dabatase for the first time the group side pane covers nearly the width of the whole window seems like to be sth wrong with the pref sizes || i did an extensive test and  some issues i encounteredthe rest works as expectedthe only issue i have is staring: the group panel pref? size is set to half of the windowresizing the window to the right makes the groups panel to increase its size too oh and when i decrease the window width from right to left the groups panel seems to keep its size( resize: ![grafik]( more general thing which currently fails: undo````22 49572 [javafx application thread] error orgjabrefguibasepanel - runcommand error: field value must not be nulljavalangnullpointerexception: field value must not be null	at javautilobjectsrequirenonnull(objectsjava:228) ~[?:180_162]	at orgjabrefmodelentrybibentrysetfield(bibentryjava:396) ~[main/:?]	at orgjabrefmodelentrybibentrysetfield(bibentryjava:442) ~[main/:?]	at orgjabrefmodelentrybibentrysetcitekey(bibentryjava:189) ~[main/:?]	at orgjabrefguiundoundoablekeychangeundo(undoablekeychangejava:39) ~[main/:?]	at javaxswingundocompoundeditundo(compoundeditjava:63) ~[?:180_162]	at javaxswingundoundomanagerundoto(undomanagerjava:335) ~[?:180_162]	at javaxswingundoundomanagerundo(undomanagerjava:413) ~[?:180_162]	at orgjabrefguiundocountingundomanagerundo(countingundomanagerjava:30) ~[main/:?]	at orgjabrefguibasepanel$undoactionaction(basepaneljava:1969) ~[main/:?]	at orgjabrefguibasepanelruncommand(basepaneljava:972) ~[main/:?]	at orgjabrefguiactionsolddatabasecommandwrapperexecute(olddatabasecommandwrapperjava:37) ~[main/:?]	at orgjabrefguiactionsjabrefactionlambda$2(jabrefactionjava:23) ~[main/:?]	at orgcontrolsfxcontrolactionactionhandle(actionjava:419) ~[controlsfx-84015-snapshotjar:84015snapshot]	at orgcontrolsfxcontrolactionactionhandle(actionjava:64) ~[controlsfx-84015-snapshotjar:84015snapshot]	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:86) ~[jfxrtjar:?]	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238) ~[jfxrtjar:?]	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191) ~[jfxrtjar:?]	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58) ~[jfxrtjar:?]	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74) ~[jfxrtjar:?]	at comsunjavafxeventeventutilfireevent(eventutiljava:49) ~[jfxrtjar:?]	at javafxeventeventfireevent(eventjava:198) ~[jfxrtjar:?]	at javafxscenecontrolmenuitemfire(menuitemjava:462) ~[jfxrtjar:?]	at comsunjavafxscenecontrolskincontextmenucontent$menuitemcontainerdoselect(contextmenucontentjava:1405) ~[jfxrtjar:?]	at comsunjavafxscenecontrolskincontextmenucontent$menuitemcontainerlambda$createchildren$343(contextmenucontentjava:1358) ~[jfxrtjar:?]	at comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218) ~[jfxrtjar:?]	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80) ~[jfxrtjar:?]	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238) ~[jfxrtjar:?]	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191) ~[jfxrtjar:?]	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59) ~[jfxrtjar:?]	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58) ~[jfxrtjar:?]	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74) ~[jfxrtjar:?]	at comsunjavafxeventeventutilfireevent(eventutiljava:54) ~[jfxrtjar:?]	at javafxeventeventfireevent(eventjava:198) ~[jfxrtjar:?]``` || for some reason i am getting localization warnings when executing this branch eg:```14 52075 [javafx application thread] warn  orgjabreflogicl10nlocalization - warning: could not get menu item translation for ""library"" for locale en```apart from that a bigger thing that is still missing imho are most of the toolbar itemswe definitely should do one more release before we merge this imho this might even justify upgrading the version number to jabref 50 || @lenhard which toolbar icons do you miss? i added all which i found reasonable to be placed that prominently (eg actions that the user does on a regular basis) better have too few icons than too many in my opinion || i tried to merge master into this and hope i did not break too many features on the way feel free to revert if it doesnt work out we really need more frequent synchronization otherwise there is no change of getting this together imho this branch should be synced very urgentlyheres the toolbars of this branch and master:![toolbar]( is a huge difference in available functionality i think if we drop nearly all toolbar items then many users will be pissedadded to that: the web search sidebar needs to be rewritten as well at the moment it basically crashes when you resize || new toolbar:![grafik]( too empty for me!!old toolbar:![grafik]( marked the things absolutely necessary for me (refs  i dont use the other buttons i toggle the interfaces via the full menu or via shortcut copy and paste also not via these menus navigation also not via the toolbaras ""good developers"" we could have a user votingor do we have azure analytics in place saying us which buttons are used?current opinion: add my loved buttons and install azure analytics in parallel for that release 42 and collect statistics for jabref 43 || @lenhard thanks for merging with master however this pr is based on the other maintable migration branch now all those other changes in master occur as diff for this pr does everything work fine if we merge this pr now into the maintable branch?are the buttons for the shared databases needed? i always thought that changes are synced completely automatically what extra value does the user gets from a facebook or github icon in the toolbar? how many users regularly open the terminal through jabref? probably we need an option to allow the users to decide if he wants some buttons or notin general im hugely in favor of a data-based decision we have some data about which dialogs are used how often however not every action is currently tracked (eg new library just opens a os-file dialog and is thus not captured in the list below but also a few of our own dialogs are not tracked for some reason - for example the cleanup dialog)the results below are nonetheless relatively clear and point in one direction: the majority of the users does not use any of our dialogs except the ""new entry"" one and a few dialogs that are triggered automatically (import duplicates )so i would propose to try-out a as minimal as possible version and then slowly add buttons as the users ask for them and/or our data shows that many users click on a certain action in the menu quite oftenname | count-- | --orgjabrefguientrytypedialog | 2640orgjabrefguiimporterimportinspectiondialog | 1251orgjabrefguiduplicateresolverdialog | 516orgjabrefguimergeentriesmergefetchedentrydialog | 260orgjabrefpdfimportimportdialog | 138orgjabrefguipreftabspreferencesdialog | 122orgjabrefguigroupsgroupdialog | 75orgjabrefguicollabchangedisplaydialog | 40orgjabrefguistringdialog | 26orgjabrefguiimporterfetcherpreviewdialog | 26orgjabrefguimergeentriesmergeentriesdialog | 24orgjabrefguireplacestringdialog | 24orgjabrefguihelpnewversiondialog | 22orgjabrefguisharedconnecttoshareddatabasedialog | 20orgjabrefguidbpropertiesdatabasepropertiesdialog | 19orgjabrefguicustomentrytypesentrycustomizationdialog | 16orgjabrefguipreftabsfontselectordialog | 14orgjabrefguigenfieldscustomizer | 13orgjabrefguimergedialog | 12orgjabrefguipreftabspreferencesfilterdialog | 9orgjabrefguiexternalfilessynchronizefilefield$optionsdialog | 8orgjabrefguiauximportfromauxdialog | 8orgjabrefguifindunlinkedfilesdialog | 7orgjabrefguiplaintextimporttextinputdialog | 7orgjabrefguiexporterexportcustomizationdialog | 6orgjabrefguiopenofficestyleselectdialog$addfiledialog | 3orgjabrefguiexternalfiletypeexternalfiletypeeditor | 3orgjabrefguiexternalfileswritexmpaction$optionsdialog | 2orgjabrefguicontentselectorcontentselectordialog | 2orgjabrefguiexportercustomexportdialog | 2orgjabrefguiimporterimportcustomizationdialog | 1since i was playing with the data here the distribution of new entries (not really surprising):![image]( || we should discuss this in a devcall and maybe do a user survey?from my point of view:cleanup generate bibtexkeys toogle groups preview webseach etc push to application donate button help search field and search mode changingsave/save all || you can easily merge it to the other branch git automatically recognizes existing commits of other branches- social media: my aim is to get followers at these profiles so i want to make it easy for users to follow us- database: mysql does not offer pub/sub so you have to pull changes manually as outlined at  console: wished by @simonharrer at  am unsure whether this is a chicken/egg thing what happens if i start writing blog posts advertising our features? i think most features are unused because people just do not know about itwill be a good discussion at the devcall || i merged this pr now to have a somewhat workable maintable-beta branch again that is also head-to-head with the current master (thanks @lenhard !)you all raised good points concerning the toolbar i think this will be lively discussion in the next dev-call i marked the related issue  with the corresponding label so that we dont forget it @siedlerchr can you please open a new issue for the undo problem this appears to be independent of the changes in this pr but not a proper handling of empty cite keys in the undo code  || ";;;;1;1;merge branch maintable-beta of  into javafxglobaleverything;
3684;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @suppresswarnings( donotmock ) to mocked com.google.common types  @donotmock will be added to these types. this change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> add graphbuilder.incidentedgeorder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> remove usages of deprecated charmatcher functions  3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> have immutablegraph.builder set incidentedgeorder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> migrate org.mockito.matchers#any* to org.mockito.argumentmatchers  the former is deprecated and replaced by the latter in mockito 2. however  there is a functional difference: argumentmatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(class)  or  anyint() ).  any()  will remain to accept anything.  all remaining  any(class)  references are migrated to  nulllable(class)  to maintain the functionality of mockito 1. all remaining  anystring()  references are migrated to  nullable(string.class)  to maintain the functionality of mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d;;0;fix concurrentmodificationexception in statemachine listener management;when cleaning up listener future acquire lock on futurestatechange;"looks goodprobably should mark the listeners variable as guarded by ""this"" as well || ";;;;0;1;;
3684;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @suppresswarnings( donotmock ) to mocked com.google.common types  @donotmock will be added to these types. this change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> add graphbuilder.incidentedgeorder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> remove usages of deprecated charmatcher functions  3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> have immutablegraph.builder set incidentedgeorder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> migrate org.mockito.matchers#any* to org.mockito.argumentmatchers  the former is deprecated and replaced by the latter in mockito 2. however  there is a functional difference: argumentmatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(class)  or  anyint() ).  any()  will remain to accept anything.  all remaining  any(class)  references are migrated to  nulllable(class)  to maintain the functionality of mockito 1. all remaining  anystring()  references are migrated to  nullable(string.class)  to maintain the functionality of mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d;;1511.0;1x: javadoc for producer;see #1511; ;missing javadoc comments for producerjava;"the producer interface needs an interface description in the javadocsive flagged areas that need help in the javadocs with ""@warn"" tags that tag is not part of the javadoc standard so it triggers a javadoc compilation warning please remove those tags from any areas that you fix";closing via #3684 ||;1;0;1x: javadoc for producer;
3684;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @suppresswarnings( donotmock ) to mocked com.google.common types  @donotmock will be added to these types. this change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> add graphbuilder.incidentedgeorder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> remove usages of deprecated charmatcher functions  3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> have immutablegraph.builder set incidentedgeorder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> migrate org.mockito.matchers#any* to org.mockito.argumentmatchers  the former is deprecated and replaced by the latter in mockito 2. however  there is a functional difference: argumentmatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(class)  or  anyint() ).  any()  will remain to accept anything.  all remaining  any(class)  references are migrated to  nulllable(class)  to maintain the functionality of mockito 1. all remaining  anystring()  references are migrated to  nullable(string.class)  to maintain the functionality of mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d;;3565.0;moe sync 2019-11-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add @suppresswarnings(""donotmock"") to mocked comgooglecommon types@donotmock will be added to these types this change suppresses warnings for current cases where these types are mocked13ed6d3846bb3765b19ec06819a215ae93644b6c-------<p> add graphbuilderincidentedgeorder()2c1db61cfae457a58554f4390c3907f18f406b6a-------<p> remove usages of deprecated charmatcher functions3565213ec90d8647412c4d25870fbc1c8bb3a44798ff-------<p> have immutablegraphbuilder set incidentedgeorder to stable()c43a2bf57ccc089bb64f2704321e175a611cdc4b-------<p> migrate orgmockitomatchers#any* to orgmockitoargumentmatchersthe former is deprecated and replaced by the latter in mockito 2 however there is afunctional difference: argumentmatchers will reject `null` and check the typeif the matcher specified a type (eg `any(class)` or `anyint()`) `any()` willremain to accept anythingall remaining `any(class)` references are migrated to `nulllable(class)` to maintain the functionality of mockito 1all remaining `anystring()` references are migrated to `nullable(stringclass)` to maintain the functionality of mockito 13e96e06575ea0bb1e8be61ce2edd57ac9427c71d";;remove usages of deprecated charmatcher functions;methods like charmatcherdigit() or javaletterdigit() which would match digit and digit or letters in string is being deprecated by guava such methods are replace by inrange methods for example instead of digit() it would be inrange(0 9)this pr closes #3544;           i  it || clas look good thanks!  ||;1;0;migrate orgmockitomatchers#any* to orgmockitoargumentmatchersthe former is deprecated and replaced by the latter in mockito 2 however there is afunctional difference: argumentmatchers will reject `null` and check the typeif the matcher specified a type (eg `any(class)` or `anyint()`) `any()` willremain to accept anythingall remaining `any(class)` references are migrated to `nulllable(class)` to maintain the functionality of mockito 1all remaining `anystring()` references are migrated to `nullable(stringclass)` to maintain the functionality of mockito 1-------------created by moe: https://githubcom/google/moemoe_migrated_revid278736072;
3690;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify some range constraints.  fixes   88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> add javadoc in attempt to help readers differentiate futures.allaslist() vs futures.successfulaslist().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> fix broken links in atomicdouble.  see   6c501c499020db010dd96918c26b3a07a655a1dd;;0;moe sync 2019-11-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify some range constraintsfixes  add javadoc in attempt to help readers differentiate futuresallaslist() vs futuressuccessfulaslist()980e6e68b72c1adb89b01862b12fdf554b1d5f33-------<p> fix broken links in atomicdoublesee https://githubcom/google/guava/pull/36896c501c499020db010dd96918c26b3a07a655a1dd;;;;;1;1;fix broken links in atomicdoublesee  by moe: https://githubcom/google/moemoe_migrated_revid279162422;
3690;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify some range constraints.  fixes   88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> add javadoc in attempt to help readers differentiate futures.allaslist() vs futures.successfulaslist().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> fix broken links in atomicdouble.  see   6c501c499020db010dd96918c26b3a07a655a1dd;;0;how to save/export result into hdfs in presto shell?;how to save the output of sql statements to hdfs in presto shell client ? is there any semantic like the hive `insert overwrite [local] directory /tmp/output/ select * ` ?;the closest you can get is to create another table with your results:`create table xxx as select `you can export data to a local directory by invoking the cli with `--execute` or `--file` (though what out for  also been considering adding a new connector that can read/write from distributed filesystems (s3 hdfs etc) without the need for a hive metastore but when and exactly how itd be implemented is to be determined || @martint can presto support read/write from distributed filesystems (s3 hdfs etc) without the need for a hive metastore now? ||;;;;0;1;;
3690;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify some range constraints.  fixes   88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> add javadoc in attempt to help readers differentiate futures.allaslist() vs futures.successfulaslist().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> fix broken links in atomicdouble.  see   6c501c499020db010dd96918c26b3a07a655a1dd;;0;update nebula gradle plugin;update the gradle-rxjava-project-plugin to the latest versionupdate gradle to version 210 as well;gradle 211 is out can you not use that? || @hzsweers i didnt check recently it has just been released!ive updated the version to 211 ||   also cherry-pick to 2x? || done -> #3693 ||;;;;1;1;update nebula gradle plugin;
3690;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify some range constraints.  fixes   88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> add javadoc in attempt to help readers differentiate futures.allaslist() vs futures.successfulaslist().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> fix broken links in atomicdouble.  see   6c501c499020db010dd96918c26b3a07a655a1dd;;3679; file link deletion dialog improvements;"this pull request fixes the following issues:* when a file link in a bibliography entry is deleted by the user a dialog is displayed previously the default (first) dialog option deleted the linked file from disk the default behaviour has been changed to just removing the file link from the entry  this is a fix to issue #3679 3679 * when clicking the ""cancel"" button in the file link deletion dialog the file  was being deleted from the list this behaviour has been  by changing the return value of the `delete()` method when the ""cancel"" button is chosen## example screenshot:![2018-02-04-001057_477x142_scrot]( checklist:-  change in changelogmd described-  -  -  manually tested changed features in running jabref-   ( [helpjabreforg]( am unsure whether the remaining checklist items are applicable to this pull requesti would be willing to provide tests for the `delete()` method however the `dialogservice` member cannot be stubbed-in/mocked as it is (as it is marked `final`) and therefore i cant control the returned chosen option from inside the unit testi would appreciate any pointers and suggestions";thanks for your contribution! i have tested the changes locally and it works as expecteda little step for you a great step for ~~humanity~~ jabref users )just add the suggestions by  @tobiasdiez  and we can merge it in ps: if you include the word  `xxxx` then the corresponding issue will be closed automatically when the pr is merged  || thank you for your pointers! i have locally added `buttondatayes` and now i will attempt to prepare a test suite for the `remove()` method at least and push everything out when its ready    || okay i pushed out the changes adding the button data restored the original button order (at least on linux) but the remove button is now clearly the default and as far as i can tell from [javafx docs]( this is the desired behaviourthe test code im not too proud of -- theres some weird hacking going on there to get the tests running and i had to balance between not making them brittle and not worsening the implementations readability just for tests sake if you have ideas for improvements id be happy to go back and fix the ugliness || well if im this close might as well try and make this pr as good as possible!ive added the suggested changes however i did leave some of the parentheses as they were -- near those long mock setup calls to be precise because i couldnt make them look decent otherwise || nice thanks again for your contributions we are looking forward to see more prs from you 😄  ||;delete from disk should not be default option/selected on delete in file tab;( the buttons should be sufficient;"hi!   i have submitted a pull request (#3690) aiming to fix this issue (and another issue with the ""cancel"" button which i discovered during testing my first change) i would appreciate it if you could review the changes and suggest possible improvements! || ";1;0;code style adjustments in dialog test cases* added non-empty link to file in one test for clarity* removed unnecessary newlines* changed test method names to adhere to chosen naming convention;
3695;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> roll forward cl 269313299.  *** original change description ***  let listenablefuture implement thenable via a default interface method in j2cl  639d873cc139a32b270ba5a11a7ceb87cf8460c0;;0;moe sync 2019-11-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> roll forward cl 269313299*** original change description ***let listenablefuture implement thenable via a default interface method in j2cl639d873cc139a32b270ba5a11a7ceb87cf8460c0;;;;;1;1;roll forward cl 269313299*** original change description ***let listenablefuture implement thenable via a default interface method in j2cl-------------created by moe: https://githubcom/google/moemoe_migrated_revid279693687;
3695;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> roll forward cl 269313299.  *** original change description ***  let listenablefuture implement thenable via a default interface method in j2cl  639d873cc139a32b270ba5a11a7ceb87cf8460c0;;0;code formatting;none of the codes functionallity was actually changed all i did was to click ´source -> format´ to clean up the code slightly especially useful for java source code as well as xml files----not necessary just for a simple code formatting :)-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);the xml files are generated for the test cases please adopt `editorconfig` to match the formatting of the files and not the other way round ||;;;;0;1;;
3695;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> roll forward cl 269313299.  *** original change description ***  let listenablefuture implement thenable via a default interface method in j2cl  639d873cc139a32b270ba5a11a7ceb87cf8460c0;;0;fail casts between json and varchar;;back to you to make these throw an exception like we discussed || looks good check that those travis failures arent related though ||;;;;0;1;;
3695;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> roll forward cl 269313299.  *** original change description ***  let listenablefuture implement thenable via a default interface method in j2cl  639d873cc139a32b270ba5a11a7ceb87cf8460c0;;0;release 111 changesmd;preparation for 111;   typo || @stevegury feel free to merge and make the release also happen ||;;;;1;1;release 111 changesmd;
3698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> migrate from arrays to immutablesets in inetaddressestest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740;;0;moe sync 2019-11-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> migrate from arrays to immutablesets in inetaddressestestb827d92dbdd949550ecdf975111e4e0a4a4c7740;;;;;1;1;migrate from arrays to immutablesets in inetaddressestestrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280186277;
3698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> migrate from arrays to immutablesets in inetaddressestest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740;;0;annnotation tab new design;   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);closed in favor of #3701 ||;;;;0;1;;
3698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> migrate from arrays to immutablesets in inetaddressestest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740;;0;update docs for release;;;;;;0;1;;
3698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> migrate from arrays to immutablesets in inetaddressestest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740;;0;operatorgroupby doesnt complete when children are not subscribed to;this issue affects < 1017 but seems to be  in the 111 back-port of the 2x operatorgroupbythe problem:when `groupbysubscriber` receives a completed event from upstream it immediately emits calls oncompleted() on all children but then waits for all children to unsubscribe before propagating oncompleted() to the immediate downstream subscribersit seems to me that the operator ought to immediately complete the `observable<groupedobservable>` since there will be no further `groupedobservable`s  it would then be the responsibility of downstream operators to manage the output groups and await termination as appropriate - eg as operatormerge doesthis can be seen in two primary scenarios:1 where one or more of the `groupedobservable`s are never subscribed to2 where the `observable<groupedobservable>` is collected into a list or similar collection typein both cases the chain will never complete;ive pushed a failing test case on a fork of the 1017 release along with a simple fix for it that passes the test cases on that branch should there ever be a 1018 releaseive also cherry-picked the tests onto 1x (where they all pass) as a regression test im not sure if cherry-picking is an acceptable practice on the reactivex repos - let me know if youd rather i merge it or something || the test has been merged in #3699 i dont think versions of the pattern 10x will be updated any further we will only support 1x and 2x together ||;;;;0;1;;
3699;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e;;0;moe sync 2019-11-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clean up some unnecessary initializationsdf0d13f964c729a3e0311f0b9db7e42fea70945e;;;;;1;1;clean up some unnecessary initializationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280196393;
3699;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e;;0;fix space leads to jump in entry editor;   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;fix space leads to jump in entry editor;
3699;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e;;0;fix error when reading a nested struct with missing optional fields in parquet;"to reproduce have the schema like this with the ""firstoptionalint"" missing and ""secondstring"" as some string bigger than 8 characters and run a select \* query on it```(justfirstnonimportantthing bigint anestedstruct struct(        firstoptionalint bigint        secondstring string))```the relevant part of stacktrace looks something like this:```caused by: javalangillegalstateexception: expected entry size to be exactly 8 but was 12    at comfacebookprestospiblockwidthblockbuildercloseentry(fixedwidthblockbuilderjava:175)    at comfacebookprestospiblockinterleavedblockbuildercloseentry(interleavedblockbuilderjava:210)    at comfacebookprestospiblockarrayelementblockwritercloseentry(arrayelementblockwriterjava:118)    at comfacebookprestospitypevarbinarytypewriteslice(varbinarytypejava:109)    ```the problem is that the blockbuilders entryadded() function is called only for the values that are present so the ""secondstring"" is being written into the fixedwidthblockbuilder that was meant for the bigint before this in this particular case string size was 12";;;;;0;1;;
3699;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e;;0;1x: groupby regression test case;this is passing against 111 with the back-ported operatorgroupby but would be good to have it in as a regression testsee also: #3698;could you please squash the commits? ||;;;;1;1;3698] correct indentation;
3703;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move the big integer conversion code into inetaddresses  relnotes=add tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> add support for scope ids to inetaddresses.isinetaddress().  fixes   1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> format with locale.root.  this guarantees that the message matches across locales  including hi-in  which we test with under maven:    b29efa54b23b3cb28f4e150d045b83b8196d9050;;0;moe sync 2019-11-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> move the big integer conversion code into inetaddressesrelnotesadd tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegersa544e97d10572d0a71c481e2b833ad19a3a7de4f-------<p> add support for scope ids to inetaddressesisinetaddress()fixes  format with localerootthis guarantees that the message matches across locales including hi-in which we test with under maven //travis-ciorg/google/guava/jobs/611945191https://githubcom/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pomxml#l212b29efa54b23b3cb28f4e150d045b83b8196d9050;;;;;1;1;format with localerootthis guarantees that the message matches across locales including hi-in which we test with under maven: by moe: https://githubcom/google/moemoe_migrated_revid280441968;
3703;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move the big integer conversion code into inetaddresses  relnotes=add tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> add support for scope ids to inetaddresses.isinetaddress().  fixes   1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> format with locale.root.  this guarantees that the message matches across locales  including hi-in  which we test with under maven:    b29efa54b23b3cb28f4e150d045b83b8196d9050;;0;orgjson should not be used - update unirest library to new version;orgjson is non-free software:  is the way to go;"i would prefer gson i use that in share latex and we already have guava as deps  || is it this library?!  we could make a pr there if you want to || ( || more readings:-   ||   seems to be most modern drop-in alternative || the reason i prefer gson over the standard json  is because it directly supports generics and allows to have a clear hierarchy (all classes are dervied from jsonelement - such kind of structure does not exist in orgjson/openjson) and you can always chain methods eg getasjsonarray()get(0)getasint() furthermore it is already java 9 compatible  || @siedlerchr feel free to rewrite the code of jabref to use gson instead of `orgjson` 😇  || the dependency comes from unirest  think we decided on the jabcon to remove that dependency and stick with jersey the official reference implementation i will convert the code to use jersey + gson || yeah - this is the way to go!side story: i tried to replace the dependency by [openjson]( during the gradle build however they changed the package name to `comgithubopenjson` replacing it  comvaadinexternalgoogle:android-json:0020131108vaadin1` leads to an additional exception `jsonexception` which needs to be handled by our code somehow  || i currently try to use it with gson it works in general but is has the  disadvantage against the openjson implementation that it does not have these pseudo-optional methods:openjson can return pseudo optionals//defaults  eg if a field is not present it can return an empty string by default || so the only reason why we have to rewrite everything json and unirest-related is because of a single stupid line in a license file? can we not just ignore this as we have done so far? || yes because we want to keep jabref distributed in linux distributions otherwise jabref is not open source and free software> this license is considered non-free by debian gnu project fedora google red hat legal free software foundationsource:  for devcall || which binary of jabref introduced the non free library first? we have to adjust the license settings in distributions please update the wrong license file according to the real license until it is please inform distributions next time you recognize that your license information was wrong || @jonasstein  it was an external dependency see abovei see there is now  it also uses orgjson but it seems to be under active developmend so they could replace it with openjson i hope || @siedlerchr excuse me if i misunderstand your reply as far i could see you provide a jabref jar which includes the non free orgjson library || refs  || ok  seems to be the recent ""cool""  client:  alternatives:  of what we do we need an[adr]( || @koppor kong/unirest-java#176 is resolved and allows use of gson instead of orgjson || as unirest now has removed orgjson it should be safe to upgrade to the newest versionnote that the library name has changed  || @siedlerchr could you provide more details (from which name to which name) or just replace the dependency and make a pr? 😇  || i will try to look into it if no one else is interested could be a good first issuesee the upgrade guide:  namespace is now:```<dependency>    <groupid>comkonghq</groupid>    <artifactid>unirest-java</artifactid>    <version>3100</version></dependency>``` || thanks to @johahu  this issue is now resolved || ";;;;0;1;;
3703;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move the big integer conversion code into inetaddresses  relnotes=add tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> add support for scope ids to inetaddresses.isinetaddress().  fixes   1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> format with locale.root.  this guarantees that the message matches across locales  including hi-in  which we test with under maven:    b29efa54b23b3cb28f4e150d045b83b8196d9050;;0;fix reversed condition in incodegenerator;;;;;;0;1;;
3703;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move the big integer conversion code into inetaddresses  relnotes=add tobiginteger and fromipv4biginteger/fromipv6biginteger to inetaddresses for manipulating inetaddresses as bigintegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> add support for scope ids to inetaddresses.isinetaddress().  fixes   1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> format with locale.root.  this guarantees that the message matches across locales  including hi-in  which we test with under maven:    b29efa54b23b3cb28f4e150d045b83b8196d9050;;0;confused about documentation of replay();in the [documentation of the `replay()` operator in rxjava]( it says> in rxjava there is a variety of the replay operator that returns a connectable observable you must publish this connectable observable before observers can subscribe to it and then connect to it in order to observe its emissionsthis means i should do the following right?```connectableobservable replayedandpublished  sourceobservable    replay()    publish()replayedandpublishedsubscribe()replayedandpublishedsubscribe()replayedandpublishedconnect()```why is that? why do i have to add a `publish()` after the `replay()`? like `publish()` `replay()` also returns a `connectableobservable` so why cant i just `subscribe()` to one returned  replay()` and then `connect()` to _that_?and regarding the second variety of `replay()` - the one that returns an ordinary `observable`:- is the resulting observable also meant to be subscribed to by multiple `subscriber`s?- since it does not have a `connect()` it will subscribe to its source observable immediately when the first subscriber subscribes to it?- when will it unsubscribe?- how is it different from `replay()map(new func1())` - or maybe `cache()map(new func1())`?i am asking about the second variety more out of curiosity but i use the first variety every now and then so id really like to understand it properly;that sentence is bad you dont have to publish a `connectableobservable`the `publish` and `replay` operators that simply return an `observable` publish or replay for the sake of the function you also have to pass each subscriber will get an individually published/replayed connection to the upstream for example you can consume a source twice but without duplicating the side-effects of subscribing to the upstream:``` javaobservablerange(1 10)publish(o -> observableconcat(otake(2) otakelast(2)))subscribe()```here `range` will be subscribed once even though the inner functions take/takelast would suggest otherwisewith `replay()map` you are mapping the items whereas `replay(func1) you are reusing the same shared`observable` || 1) thanks for the confirmation!2) ah! yes that makes sense and in that case it also obviously different from `map()` the signature of that variant of the method should have given me clue:```    public final <r> observable<r> replay(func1<? super observable<t> ? extends observable<r>> selector)```but in that case isnt the documentation wrong again? it says:>  this function accepts an item emitted by the source observable as its parameter and returns an item to be emitted by the resulting observablethis reads almost exactly like the description of `map()`:> the map operator applies a function of your choosing to each item emitted by the source observable and returns an observable that emits the results of these function applicationsshouldnt that me something more along the lines of> this function accepts the source observable as its parameter and returns a transformed version of that observableone last thing: i think ill have to post another question about hot vs cold observables soon but applied to replay(): is it true that the first variety transforms the source into a hot observable while the second one leaves it cold? || > shouldnt that me something more along the lines ofthe function will receive an observable which can be subscribed to as many times as necessary without causing multiple subscriptions to the upstream observable the function then should return an observable whose values will be emitted to the downstream subscriber> is it true that the first variety transforms the source into a hot observable while the second one leaves it cold?yes || this should be  via  now ||;;;;0;1;;
3704;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use truth assertions instead of junit assertions in inetaddressestest.  make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> correct documentation of getcoercedipv4address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5;;0;moe sync 2019-11-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use truth assertions instead of junit assertions in inetaddressestestmake assertions stronger if possible (check object equality instead of reference equality)79e2c4efcbebf40ad651fddb107273b960874841-------<p> correct documentation of getcoercedipv4address848d95b7e9e998cf9d8c952aeaf661902c364eb5;;;;;1;1;correct documentation of getcoercedipv4addressrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid280454590;
3704;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use truth assertions instead of junit assertions in inetaddressestest.  make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> correct documentation of getcoercedipv4address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5;;0; multi module build;"this is a huge step towards  and prepares  somehowthis enables gradle multi module buildthe dependencies of ""logic"" were not as clean as i thought i removed dependencies to gui or moved packages back to gui (shared remote)we should get this in asap open issues:-  `src/main/gen` should be removed from version control - generated code like jabrefgui/src/main/gen/org/jabref/logic/importer/fileformat/mods/roletermdefinitionjava is put under version control is this desired?-  inherit more from root project avoid duplication of plugins dependencies and tasks (  gui does not start: `cannot load file grouptreefxml`-  install4j does not find the generated jars-  the oo preferences should be  (reading/writing not fully supported yet) all other features should work - done in   `jar` are not uploaded to circleci - are they stored somewhere else?    tests not executed on travis ` junitplatformtest`  - this works locally though-  tests fail on travis eg `[main] error orgjabreflogicl10nlocalization - messages are not initialized before accessing all entries`";"the fxml and css files should lie in the same folder as the view `grouptreeview` || @koppor please dont move the fxml and css files from source to resources if this somehow possible! these files function as code (in the sense that you could alternatively define everything in java if you want) and it is very convenient to have them right next to the java classes (controller view model) since you usually edit them in parallel  || `abstractdialogviewclassgetresource(""maincss"")` returns `null` with the current multi-module build i have no clue how to convince the jre (?) to also search next to the class files maybe i have to manually adapt the gradle file to copy all files not ending with `java` to the output || mhhh okso far it worked with || **solved via  state: compiles fine on windows but on linux:```failure: build failed with an exception* where:build file /home/ubuntu/jabref/orgjabreflogic/buildgradle line: 73* what went wrong:execution failed for task  processresources> no signature of method: static orggradleapiprojectgetrootproject() is applicable for argument types: () values: ```reproducible via    docker run -it --rm --name my-maven-project -v ""d:/git-repositories/jabref/jabref:/usr/src/mymaven"" -w /usr/src/mymaven jabref/javafx /gradlew release || this will be frozen until  is merged reason: that pr also does huge refactorings || i close this pr as this is unfinishedi created  as follow up the small changes are filed as prs       only thing not followed-up is the gradle multi-module-build (co-authored-by @stefan-kolb) i propose to leave it to @florian-beetz to investigate the gradle scripts and see whether they help him to get jabref ready for java9 || ";;;;0;1;;
3704;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use truth assertions instead of junit assertions in inetaddressestest.  make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> correct documentation of getcoercedipv4address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5;;0;" not fetching data: failing with ""unable to create class comfacebookprestoexecutiontaskinfo from json response""";"allspend quite about a day to figure out the problem but unable to nail down 1) created exampleproperties in etc/catalog as below:-```connectornameexample- started presto server and executed the command line client with catalog example3) please refer to the following output:```[cloudera@quickstart downloads]$ java -jar presto-cli-0121-executablejarpresto> describe exampletpchorders    column     |  type   | null | partition key | comment---------------+---------+------+---------------+--------- orderkey      | bigint  | true | false         |         custkey       | bigint  | true | false         |         orderstatus   | varchar | true | false         |         totalprice    | double  | true | false         |         orderdate     | varchar | true | false         |         orderpriority | varchar | true | false         |         clerk         | varchar | true | false         |         shippriority  | bigint  | true | false         |         comment       | varchar | true | false         |        (9 rows)query 20151002_092609_00006_spxuf finished 1 nodesplits: 2 total 2 done (10000%)0:00 [9 rows 700b] [70 rows/s 533kb/s]```but when we execute below no luck is this a bug?```presto> select comment from exampletpchordersquery 20151002_092146_00004_spxuf failed 1 nodesplits: 1 total 0 done (000%)0:00 [0 rows 0b] [0 rows/s 0b/s]query 20151002_092146_00004_spxuf failed: unable to create class comfacebookprestoexecutiontaskinfo from json response  invalid json for java type comfacebookprestoservertaskupdaterequest    at ioairliftjaxrsjsonmapperreadfrom(jsonmapperjava:162)    at orgglassfishjerseymessageinternalreaderinterceptorexecutor$terminalreaderinterceptorinvokereadfrom(readerinterceptorexecutorjava:258)    at orgglassfishjerseymessageinternalreaderinterceptorexecutor$terminalreaderinterceptoraroundreadfrom(readerinterceptorexecutorjava:234)    at orgglassfishjerseymessageinternalreaderinterceptorexecutorproceed(readerinterceptorexecutorjava:154)    at orgglassfishjerseyserverinternalmappableexceptionwrapperinterceptoraroundreadfrom(mappableexceptionwrapperinterceptorjava:73)    at orgglassfishjerseymessageinternalreaderinterceptorexecutorproceed(readerinterceptorexecutorjava:154)    at orgglassfishjerseymessageinternalmessagebodyfactoryreadfrom(messagebodyfactoryjava:1124)    at orgglassfishjerseymessageinternalinboundmessagecontextreadentity(inboundmessagecontextjava:851)    at orgglassfishjerseyservercontainerrequestreadentity(containerrequestjava:270)    at orgglassfishjerseyserverinternalinjectentityparamvaluefactoryprovider$entityvaluefactoryprovide(entityparamvaluefactoryproviderjava:96)    at orgglassfishjerseyserverspiinternalparametervaluehelpergetparametervalues(parametervaluehelperjava:81)    at orgglassfishjerseyservermodelinternaljavaresourcemethoddispatcherprovider$abstractmethodparaminvokergetparamvalues(javaresourcemethoddispatcherproviderjava:121)    at orgglassfishjerseyservermodelinternaljavaresourcemethoddispatcherprovider$responseoutinvokerdodispatch(javaresourcemethoddispatcherproviderjava:152)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherdispatch(abstractjavaresourcemethoddispatcherjava:104)    at orgglassfishjerseyservermodelresourcemethodinvokerinvoke(resourcemethodinvokerjava:387)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:331)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:103)    at orgglassfishjerseyserverserverruntime$1run(serverruntimejava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:267)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:315)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:297)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:267)    at orgglassfishjerseyprocessinternalrequestscoperuninscope(requestscopejava:297)    at orgglassfishjerseyserverserverruntimeprocess(serverruntimejava:254)    at orgglassfishjerseyserverapplicationhandlerhandle(applicationhandlerjava:1030)    at orgglassfishjerseyservletwebcomponentservice(webcomponentjava:373)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:381)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:344)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:221)    at orgeclipsejettyservletservletholderhandle(servletholderjava:808)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1669)    at orgeclipsejettyservletsuseragentfilterdofilter(useragentfilterjava:83)    at orgeclipsejettyservletsgzipfilterdofilter(gzipfilterjava:300)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at orgeclipsejettyservletservlethandlerdohandle(servlethandlerjava:585)    at orgeclipsejettyserverhandlercontexthandlerdohandle(contexthandlerjava:1127)    at orgeclipsejettyservletservlethandlerdoscope(servlethandlerjava:515)    at orgeclipsejettyserverhandlercontexthandlerdoscope(contexthandlerjava:1061)    at orgeclipsejettyserverhandlerscopedhandlerhandle(scopedhandlerjava:141)    at orgeclipsejettyserverhandlerhandlercollectionhandle(handlercollectionjava:110)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverhandlerstatisticshandlerhandle(statisticshandlerjava:159)    at orgeclipsejettyserverhandlerhandlerlisthandle(handlerlistjava:52)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverserverhandle(serverjava:499)    at orgeclipsejettyserver    at orgeclipsejettyserver    at orgeclipsejettyioabstractconnection$2run(abstractconnectionjava:540)    at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:635)    at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:555)    at javalangthreadrun(threadjava:745)caused by: comfasterxmljacksondatabindjsonmappingexception: can not find a deserializer for non-concrete collection type [collection type class comgooglecommoncollectimmutablelist contains [simple type class comfacebookprestospihostaddress]] (through reference chain: javautilarraylist[0]->javautilhashset[0])    at comfasterxmljacksondatabinddeserdeserializercache_createandcache2(deserializercachejava:266)    at comfasterxmljacksondatabinddeserdeserializercache_createandcachevaluedeserializer(deserializercachejava:241)    at comfasterxmljacksondatabinddeserdeserializercachefindvaluedeserializer(deserializercachejava:142)    at comfasterxmljacksondatabinddeserializationcontextfindcontextualvaluedeserializer(deserializationcontextjava:380)    at comfasterxmljacksondatabinddeserstdstddeserializerfinddeserializer(stddeserializerjava:842)    at comfasterxmljacksondatabinddeserbeandeserializerbaseresolve(beandeserializerbasejava:437)    at comfasterxmljacksondatabinddeserdeserializercache_createandcache2(deserializercachejava:292)    at comfasterxmljacksondatabinddeserdeserializercache_createandcachevaluedeserializer(deserializercachejava:241)    at comfasterxmljacksondatabinddeserdeserializercachefindvaluedeserializer(deserializercachejava:142)    at comfasterxmljacksondatabinddeserializationcontextfindcontextualvaluedeserializer(deserializationcontextjava:380)    at comfasterxmljacksondatabindjsontypeimpltypedeserializerbase_finddeserializer(typedeserializerbasejava:181)    at comfasterxmljacksondatabindjsontypeimplaspropertytypedeserializer_deserializetypedforid(aspropertytypedeserializerjava:99)    at comfasterxmljacksondatabindjsontypeimplaspropertytypedeserializerdeserializetypedfromobject(aspropertytypedeserializerjava:84)    at comfasterxmljacksondatabindjsontypeimplaspropertytypedeserializerdeserializetypedfromany(aspropertytypedeserializerjava:156)    at comfacebookprestometadataabstracttypedjacksonmodule$internaltypedeserializerdeserialize(abstracttypedjacksonmodulejava:80)    at comfasterxmljacksondatabinddesersettablebeanpropertydeserialize(settablebeanpropertyjava:538)    at comfasterxmljacksondatabinddeserbeandeserializer_deserializeusingpropertybased(beandeserializerjava:344)    at comfasterxmljacksondatabinddeserbeandeserializerbasedeserializefromobjectusingnondefault(beandeserializerbasejava:1064)    at comfasterxmljacksondatabinddeserbeandeserializerdeserializefromobject(beandeserializerjava:264)    at comfasterxmljacksondatabinddeserbeandeserializerdeserialize(beandeserializerjava:124)    at comfasterxmljacksondatabinddesersettablebeanpropertydeserialize(settablebeanpropertyjava:538)    at comfasterxmljacksondatabinddeserbeandeserializer_deserializeusingpropertybased(beandeserializerjava:344)    at comfasterxmljacksondatabinddeserbeandeserializerbasedeserializefromobjectusingnondefault(beandeserializerbasejava:1064)    at comfasterxmljacksondatabinddeserbeandeserializerdeserializefromobject(beandeserializerjava:264)    at comfasterxmljacksondatabinddeserbeandeserializerdeserialize(beandeserializerjava:124)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:232)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:206)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:25)    at comfasterxmljacksondatabinddesersettablebeanpropertydeserialize(settablebeanpropertyjava:538)    at comfasterxmljacksondatabinddeserbeandeserializer_deserializeusingpropertybased(beandeserializerjava:344)    at comfasterxmljacksondatabinddeserbeandeserializerbasedeserializefromobjectusingnondefault(beandeserializerbasejava:1064)    at comfasterxmljacksondatabinddeserbeandeserializerdeserializefromobject(beandeserializerjava:264)    at comfasterxmljacksondatabinddeserbeandeserializerdeserialize(beandeserializerjava:124)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:232)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:206)    at comfasterxmljacksondatabinddeserstdcollectiondeserializerdeserialize(collectiondeserializerjava:25)    at comfasterxmljacksondatabinddesersettablebeanpropertydeserialize(settablebeanpropertyjava:538)    at comfasterxmljacksondatabinddeserbeandeserializer_deserializeusingpropertybased(beandeserializerjava:344)    at comfasterxmljacksondatabinddeserbeandeserializerbasedeserializefromobjectusingnondefault(beandeserializerbasejava:1064)    at comfasterxmljacksondatabinddeserbeandeserializerdeserializefromobject(beandeserializerjava:264)    at comfasterxmljacksondatabinddeserbeandeserializerdeserialize(beandeserializerjava:124)    at comfasterxmljacksondatabindobjectmapper_readvalue(objectmapperjava:3038)    at comfasterxmljacksondatabindobjectmapperreadvalue(objectmapperjava:1691)    at ioairliftjaxrsjsonmapperreadfrom(jsonmapperjava:149)     55 morecaused by: javalangillegalargumentexception: can not find a deserializer for non-concrete collection type [collection type class comgooglecommoncollectimmutablelist contains [simple type class comfacebookprestospihostaddress]]    at comfasterxmljacksondatabinddeserbasicdeserializerfactorycreatecollectiondeserializer(basicdeserializerfactoryjava:841)    at comfasterxmljacksondatabinddeserdeserializercache_createdeserializer2(deserializercachejava:390)    at comfasterxmljacksondatabinddeserdeserializercache_createdeserializer(deserializercachejava:348)    at comfasterxmljacksondatabinddeserdeserializercache_createandcache2(deserializercachejava:261)     98 more```4)  i thought that  may be the url is not giving ""application/json"" mime content type so i created a servlet in tomcat and set the header and application type  but same above output is repeated5) believe some jar conflict can anyone assist me to direct or fixbest regardsravion";this can be reproduced simply by starting the server with the development config and running a query:```select * from exampleexamplenumbers``` || how can we solve this problem? im trying to ask everywhere but no one is responding on this problem to know the status of this issue  by the way im using 0126 || @syed72 can you try my patch? ||;;;;0;1;;
3704;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2019-11-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use truth assertions instead of junit assertions in inetaddressestest.  make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> correct documentation of getcoercedipv4address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5;;0;1x: make the javadoc task generate correct docs;this pr modified the javadoc task to make it generate the same format of  `gradle/stylesheetcss` is copied from  supports both java 7 and java 8 however docs generated by java 8 have a totally different style hence we should use java 7 to generate javadoc and publish it to http://reactivexio/rxjava/javadoc/indexhtml;  ;;;;1;1;make the javadoc task generate correct docs;
3711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the  copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the  copy is updated 3 weeks before the estimated week of stable:    for this update    d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> update to truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a;;0;moe sync 2019-11-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe  copy is updated whenever chromes copy is updated which istypically every 6 weeks star the following to watch chromes updates: that bug is not updated the  copy is updated 3 weeks before theestimated week of stable: this update d6c3cd99a466583651a7058505371fab8b76e554-------<p> update to truth 10e6225a652e1a4651541fdeed15a400cdcba29b7a;;;;;1;1;update to truth 10-------------created by moe: https://githubcom/google/moemoe_migrated_revid281279350;
3711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the  copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the  copy is updated 3 weeks before the estimated week of stable:    for this update    d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> update to truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a;;0;migrate majority of tests to junit5;please check if i didnt forget one test annotation   -->-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);i am not sure if i should merge this or wait for #3704 @koppor  merge or wait for #3704 ? || i am still struggling with install4j not sure when ill have one that fight ||;;;;1;1;fix some more testsconvert architecture test to junit5;
3711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the  copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the  copy is updated 3 weeks before the estimated week of stable:    for this update    d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> update to truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a;;0;fix typeutilshashposition for structural types;- fixes hashcode generation for maps that contain complex types and enables group by on them;seems good to me @cberner please take a second look its one line of real change and a new test in abstracttestqueries || @cberner this fixes the production issue you mentioned this morning || one comment but looks good otherwise || ;;;;0;1;;
3711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the  copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the  copy is updated 3 weeks before the estimated week of stable:    for this update    d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> update to truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a;;0;flatmapiterable with maxconcurrent;as far as i saw flatmapiterable doesnt have maxconcurrent parameter and thus doesnt offer a way to apply backpressure in order to align it with other flatmap would be good to add an overload with maxconcurrentwhat do you think?;pr is welcome || although you stated here that this was useless   is it really the case?i believe with current implementation this would be usefull to control backpressure  || i was wrong back then || closing via #3722 ||;;;;0;1;;
3723;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use internal fast path for getting failure without allocating a wrapper executionexception  also fix gwt abstractfuture so that it respects the trusted interface. (more motivation for   relnotes=n/a  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> support incidentedgeorder for directed graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> add @jsoptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. this satisfies jscompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc;;0;moe sync 2019-11-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use internal fast path for getting failure without allocating a wrapper executionexceptionalso fix gwt abstractfuture so that it respects the trusted interface (more motivation for  support incidentedgeorder for directed graphsfd2255edf013f6592b83ee17432d0997d8db74d5-------<p> add @jsoptional annotations to the 2nd parameter of the then method since the second parameter is actually optional this satisfies jscompiler type checking73be65bd36e498f133549ddc24523176152aa8dc;;;;;1;1;add @jsoptional annotations to the 2nd parameter of the then method since the second parameter is actually optional this satisfies jscompiler type checking-------------created by moe: https://githubcom/google/moemoe_migrated_revid282755478;
3723;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use internal fast path for getting failure without allocating a wrapper executionexception  also fix gwt abstractfuture so that it respects the trusted interface. (more motivation for   relnotes=n/a  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> support incidentedgeorder for directed graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> add @jsoptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. this satisfies jscompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc;;0;et al formatting in group citation;"i added some stylefiles in the jstyle section on github (as issue) and am working on another one for this one i need author-year citations with the et al in italics - like this:(nader _et al_ 1983 rueffer _et al_ 2001 di bisceglie _et al_ 2013)what i do get is:(nader _et al_ 1983 rueffer et al 2001 di bisceglie et al 2013)  the first et al is in italics the rest not if the citations are added separately they are put separately and the et al string is italic in both:(yang _et al_ 2011) (campo _et al_ 2011) in the stylefile the citation arguments are defined like this:citationauthorfieldauthor/editoryearfield""year""maxauthors2authorseparator"" ""authorlastseparator"" & ""etalstring"" et al""italicetal""true""citationseparator"" ""multicitechronologicaltruebracketbefore""(""bracketafter"")""citationcharacterformat""default style""formatcitations""true""uniquefierseparator"" ""intextyearseparator"" ""yearseparator"" ""so according to documentaion the et al should be in italics why is in a group only the first et al formatted and not the rest?";thanks for reporting!~~this is not really down to jabref as far as i know we just use [citeproc-java]( for processing the style files and formatting the output we dont do any customization here so you should probably report the issue there~~ || @lenhard  in this case it is part of jabref jstyle files are the files jabref uses for formatting citations in openoffice/libreoffice thats our custom things in the future we should get rid of our custom thing and use csl #2146  || darn sorry for the confusion and thanks for correcting me @siedlerchr  || this issue has been inactive for half a year since jabref is constantly evolving this issue may not be relevant any longer and it will be closed in two weeks if no further activity occursas part of an effort to ensure that the jabref team is focusing on important and valid issues we would like to ask if you could update the issue if it still persists this could be in the following form:- if there has been a longer discussion add a short summary of the most important points as a new comment (if not yet existing)- provide further steps or information on how to reproduce this issue- upvote the initial post if you like to see it implemented soon votes are not the only metric that we use to determine the requests that are implemented however they do factor into our decision-making process- if all information is provided and still up-to-date then just add a short comment that the issue is still relevantthank you for your contribution! ||;;;;0;1;;
3723;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use internal fast path for getting failure without allocating a wrapper executionexception  also fix gwt abstractfuture so that it respects the trusted interface. (more motivation for   relnotes=n/a  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> support incidentedgeorder for directed graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> add @jsoptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. this satisfies jscompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc;;0;autocomplete in cli does not go through a pager;if you have a lot of possible matches for autocomplete then the results are printed without a pager if there are a lot of results this can take a non-trivial amount of time and is a bad user experience;this issue has been automatically marked as stale because it has not had recent activity it will be closed if no further activity occurs ||;;;;0;1;;
3723;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-11-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use internal fast path for getting failure without allocating a wrapper executionexception  also fix gwt abstractfuture so that it respects the trusted interface. (more motivation for   relnotes=n/a  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> support incidentedgeorder for directed graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> add @jsoptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. this satisfies jscompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc;;0;serializedbehaviorsubject;looking at the changes in #2470 a useful `getvalue()` method was added to `behaviorsubject` this goes away though if you want to serialize it would there be feasible to have something like a `serializedbehaviorsubject` that maintains the api of `behaviorsubject`?;you can keep a reference to the original behaviorsubject the method is threadsafe by itself || ah! good to know ;;;;0;1;;
3726;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make incidentedges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> abstractnetwork: fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  relnotes=fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  originally reported as github issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> refactor abstractgraphtest to allow for tests with immutablegraph.  reason: immutablegraph implementations are undertested compared to mutablegraph implementations. the current tests didn t catch a bug i deliberately introduced in  also  it would be nice to be able to share the incident edge order tests.  note about design: i started out by making an abstractgraphtest subclass for mutable graphs. however  that would lead to a duplication of all 7 subclasses and most of their tests. the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloops=true/false and incidentedgeorder=unordered/stable. the proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> merge abstractxgraphtest and configurablesimplexgraphtest  thus removing one layer from the abstractgraphtest tree.  reason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs). however  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> merge standardmutabledirectedgraphtest and its variant with stable order.  this is in preparation for adding an immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> add standardimmutabledirectedgraphtest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> annotate benign race in abstracttable so as to avoid tsan issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;;0; issue 298;   --> issue 298-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg]( (for an exercise):florian grotepaß;for future prs you should specify a short title describing the content of the pr(github takes the title from the first line of the commit) in the body of the pr you should add xxx then github will close the corresponding issue (if its in the main repo) automatically  || after merging i realized that this pr did not build on master the branch this built on will eventually also be merged into master which will get the change in nevertheless with an issue like this there is no reason to base on a branch different from masternext time please make sure that you base on master || the changelog should be     298]( space and `koppor` in front we will fix that in master as soon as comment-tab is merged :)nevertheless thank you for the quick action taken @grotepfn hope to see another issue  ||;;;;1;1;update changelogmd;
3726;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make incidentedges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> abstractnetwork: fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  relnotes=fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  originally reported as github issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> refactor abstractgraphtest to allow for tests with immutablegraph.  reason: immutablegraph implementations are undertested compared to mutablegraph implementations. the current tests didn t catch a bug i deliberately introduced in  also  it would be nice to be able to share the incident edge order tests.  note about design: i started out by making an abstractgraphtest subclass for mutable graphs. however  that would lead to a duplication of all 7 subclasses and most of their tests. the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloops=true/false and incidentedgeorder=unordered/stable. the proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> merge abstractxgraphtest and configurablesimplexgraphtest  thus removing one layer from the abstractgraphtest tree.  reason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs). however  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> merge standardmutabledirectedgraphtest and its variant with stable order.  this is in preparation for adding an immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> add standardimmutabledirectedgraphtest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> annotate benign race in abstracttable so as to avoid tsan issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;;0;add release 0122 notes;;;;;;0;1;;
3726;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make incidentedges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> abstractnetwork: fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  relnotes=fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  originally reported as github issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> refactor abstractgraphtest to allow for tests with immutablegraph.  reason: immutablegraph implementations are undertested compared to mutablegraph implementations. the current tests didn t catch a bug i deliberately introduced in  also  it would be nice to be able to share the incident edge order tests.  note about design: i started out by making an abstractgraphtest subclass for mutable graphs. however  that would lead to a duplication of all 7 subclasses and most of their tests. the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloops=true/false and incidentedgeorder=unordered/stable. the proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> merge abstractxgraphtest and configurablesimplexgraphtest  thus removing one layer from the abstractgraphtest tree.  reason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs). however  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> merge standardmutabledirectedgraphtest and its variant with stable order.  this is in preparation for adding an immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> add standardimmutabledirectedgraphtest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> annotate benign race in abstracttable so as to avoid tsan issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;;0;completablesubscribe() swallows errors by default;the default behavior of `completablesubscribe()` for errors is different from that of `observable` or `single` errors in `completable` are just passed to `rxjavaerrorhandler` which does nothing by default while `observable` and `single` cause runtime `onerrornotimplementedexception` which is expected _completablejava_```        @override        public void onerror(throwable e) {            error_handlerhandleerror(e)        }```_observablejava_```        @override        public final void onerror(throwable e) {            throw new onerrornotimplementedexception(e)        }```;throwing like `observable` relies on the expectation that the execution wont switch to other thread this `onerrornotimplemented` is remnant of the imperative style of programming using try-catch around a sequence doesnt make sense and throwing upward has no guarantees either || i do not want to wrap the `subscribe()` call in try-catch problem is that when i do not specify `onerror` callback in `completablesubscribe()` i do not expect the `completable` to emit and error but when the `completable` emits an unexpected error that is an programming error and shall be processed as such the `onerrornotimplementedexception` is then expected to eg crash the applicationsimilar to  but for `completable`this should be the respective test for `observable`: || @akarnokd throwing upward does have a crucial guarantee-- reaching the threads uncaught exception handler  delivering to the plugin is effectively swallowing the exception since it receives all exceptions and cannot safely propagate any of them anywherefailing to propagate exceptions was a huge problem (#1682) in scheduled actions before 10 || prs are welcome || :+1: working on one now just going to deliver to the uncaught exception handler after the plugin wherever it seems to make sense || @akarnokd can you explain the usage of `tonpe()` in completable eg here?:  || you can replace/precede them with `exceptionsthrowiffatal` ||;;;;0;1;;
3726;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make incidentedges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> abstractnetwork: fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  relnotes=fix bug in abstractnetwork.hasedgeconnecting() causing it to throw if either endpoint was not in the graph.  originally reported as github issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> refactor abstractgraphtest to allow for tests with immutablegraph.  reason: immutablegraph implementations are undertested compared to mutablegraph implementations. the current tests didn t catch a bug i deliberately introduced in  also  it would be nice to be able to share the incident edge order tests.  note about design: i started out by making an abstractgraphtest subclass for mutable graphs. however  that would lead to a duplication of all 7 subclasses and most of their tests. the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloops=true/false and incidentedgeorder=unordered/stable. the proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> merge abstractxgraphtest and configurablesimplexgraphtest  thus removing one layer from the abstractgraphtest tree.  reason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs). however  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> merge standardmutabledirectedgraphtest and its variant with stable order.  this is in preparation for adding an immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> add standardimmutabledirectedgraphtest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> annotate benign race in abstracttable so as to avoid tsan issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;;3721.0;moe sync 2019-12-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make incidentedges() return edges in insertion orderdf2c5527d5fe4a50135239f0b6b516058a37c5fa-------<p> abstractnetwork: fix bug in abstractnetworkhasedgeconnecting() causing it to throw if either endpoint was not in the graphrelnotesfix bug in abstractnetworkhasedgeconnecting() causing it to throw if either endpoint was not in the graph  originally reported as github issue #37218e0f821430acaa5b77c5c2c05380e3d29f18e410-------<p> refactor abstractgraphtest to allow for tests with immutablegraphreason: immutablegraph implementations are undertested compared to mutablegraph implementations the current tests didnt catch a bug i deliberately introduced in  also it would be nice to be able to share the incident edge order testsnote about design: i started out by making an abstractgraphtest subclass for mutable graphs however that would lead to a duplication of all 7 subclasses and most of their tests the issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowselfloopstrue/false and incidentedgeorderunordered/stable the proposed solution is somewhat unconventional but at least allows us to share much more code between the testsa6d0db50f6d678839f17c82a76341bb0d3d60b29-------<p> merge abstractxgraphtest and configurablesimplexgraphtest thus removing one layer from the abstractgraphtest treereason: nobody in  is using these abstract test classes (even though they are designed for general purpose graphs) however even though they arent used these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of immutablegraph tests and stable incident edge order testsce50502b9bd6fbd909abed1afd1de2976246eef9-------<p> make the abstractgraphtest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loopsf5ac328e048606d0b40c7e0b1b55bccd6ff177eb-------<p> merge standardmutabledirectedgraphtest and its variant with stable orderthis is in preparation for adding an immutable version that also needs tests for the stable ordera0ebd7b6d2789a168df5e3e0a224513dfe1257ee-------<p> add standardimmutabledirectedgraphtest033535490cf36040b4c2aba6a94e9b0f3e59564e-------<p> annotate benign race in abstracttable so as to avoid tsan issuesa4c3bcd7d1c8438d02d368a18c46c1b39f27e80d;great work on improving the graph tests @nymanjens! looking forward to seeing it merged in 👏 || > great work on improving the graph tests @nymanjens! looking forward to seeing it merged in;mutablenetworkhasedgeconnecting throw illegalargumentexception when node are missing;"according to the javadoc the hasedgeconnecting method is equivalent to nodes()contains(nodeu) && successors(nodeu)contains(nodev)but unlike this expression it throws an exception if the nodes are unknownhere is a simple demonstration```javaimport comgooglecommongraphmutablenetworkimport comgooglecommongraphnetworkbuilderpublic class bug {	public static void main(string args) {		final mutablenetwork<string string> graph  networkbuilderundirected()allowsparalleledges(false)build()		// foolowing line prints false		systemoutprintln(graphnodes()contains(""1"") && graphsuccessors(""1"")contains(""2""))		// next should print false but throws an illegalargumentexception		systemoutprintln(graphhasedgeconnecting(""1"" ""2""))	}}```version guava-281-jre";"it looks like a bit subtle but `successors(nodeu)contains(nodev)` throws an `illegalargumentexception` when `nodeu` is not in the network (which is the actual behavior youre seeing here)however youre right that the short-circuiting behavior of `&&` isnt replicating here that seems like an important part of the documented behavior :) fwiw it appears to also throw an illegalargumentexception even if `""1""` is in the network but `""2""` isnt || this is just a straight-up bug on our parts im coding up a fix nowthe problem originates in the fact that `hasedgeconnecting()` is actually (in effect) calling `edgesconnecting()isempty()`  this seems reasonable on the face of it but `edgesconnecting(u v)` has the contract that it throws if either `u` or `v` are not in the graph this is consistent with the contracts for the other `set`-returning accessors but its not what we want for boolean-returning queries like `hasedgeconnecting()`sorry about that thanks for the catch  :) || ive submitted an internal fix this should be propagating externally soon || this is  in v282:  || ";1;0;annotate benign race in abstracttable so as to avoid tsan issuesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid283176468;
3732;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use  ipv4  instead of  ipv4  for consistency.  this cl goes against the style guide  but we should be consistent within the file. we could instead rename the existing  lightly used methods to match the style guide  but i don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> add @suppresswarnings( goodtime ) to gwt supersource for localcache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> the graph tests now consistently call graphasmutablegraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> make equally named putedge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> support stable incident edge order for directed immutable[value]graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76;;0;moe sync 2019-12-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> use ""ipv4"" instead of ""ipv4"" for consistencythis cl goes against the style guide but we should be consistent within the file we could instead rename the existing lightly used methods to match the style guide but i dont think this will be the best use of someones time4a627d3ea2ac16e7e970f78939df6a163335df1c-------<p> add @suppresswarnings(""goodtime"") to gwt supersource for localcache operating in primitive millis95e7e1af8ef059e874f4c00230b010f651322e71-------<p> the graph tests now consistently call graphasmutablegraphfoo() when testing foo() rather than proxy methods1fc1f11779159183f0b4daeb388c6def36a4a2e3-------<p> make equally named putedge() method adjacent9a1f2e28f76a623501e8178262359202055139c2-------<p> support stable incident edge order for directed immutable[value]graphs2608ca43cf15c4b2a7ad21a900550358f5e6fc76";;;;;1;1;support stable incident edge order for directed immutable[value]graphsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid284109953;
3732;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use  ipv4  instead of  ipv4  for consistency.  this cl goes against the style guide  but we should be consistent within the file. we could instead rename the existing  lightly used methods to match the style guide  but i don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> add @suppresswarnings( goodtime ) to gwt supersource for localcache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> the graph tests now consistently call graphasmutablegraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> make equally named putedge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> support stable incident edge order for directed immutable[value]graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76;;0;new crowdin translations;enjoy!;i dont see new translations only removed lines?! close?! || this seems to be a revert of  this happends more often we have to debug:1 what change was in `jabref_enproperties` since the previous pr of crowdin2 what did change at crowdins side? ||;;;;1;1;new translations jabref_enproperties (vietnamese);
3732;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use  ipv4  instead of  ipv4  for consistency.  this cl goes against the style guide  but we should be consistent within the file. we could instead rename the existing  lightly used methods to match the style guide  but i don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> add @suppresswarnings( goodtime ) to gwt supersource for localcache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> the graph tests now consistently call graphasmutablegraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> make equally named putedge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> support stable incident edge order for directed immutable[value]graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76;;0;replace isnullliteral with stream operators;as discussed [here](https://githubcom/facebook/presto/pull/3709#discussion_r41449474);id leave it as isnullliteral invert the check inside the method and call `iterablesnone` instead having negatives in method names make the code harder to read || iterables doesnt look it has a none method and the presence of instanceof literal check complicates this a bit || ah i guess i was thinking of `streamnonematch()` we should update that code to use java 8 streams instead of guava `iterables` anyway || thanks made the replacements you suggested good to go? || ;;;;0;1;;
3732;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> use  ipv4  instead of  ipv4  for consistency.  this cl goes against the style guide  but we should be consistent within the file. we could instead rename the existing  lightly used methods to match the style guide  but i don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> add @suppresswarnings( goodtime ) to gwt supersource for localcache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> the graph tests now consistently call graphasmutablegraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> make equally named putedge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> support stable incident edge order for directed immutable[value]graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76;;0;request: singleusing;to match `observableusing````public static <t resource> single<t> using(        func0<resource> resourcefactory        func1<? super resource ? extends single<? extends t>> singlefactory        action1<? super resource> disposeaction)```and```public static <t resource> single<t> using(        func0<resource> resourcefactory        func1<? super resource ? extends single<? extends t>> singlefactory        action1<? super resource> disposeaction boolean disposeeagerly)```;ill do this || see #3752 || pr was merged and released as part of v112 this issue can be closed! || closing via #3752 ||;;;;0;1;;
3734;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @donotmock to several com.google.common types  relnotes:   - add @donotmock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> add @donotmock to listenablefuture  remove @donotmock from abstractfuture  as it is now covered by @donotmock on listenablefuture  relnotes=n/a  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> fix small error with how caseformat calculates the stringbuilder size when converting one format to another.  fixes   0dc680192f18b7664f900304576736c1914d14ba;;0;moe sync 2019-12-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add @donotmock to several comgooglecommon typesrelnotes:  - add @donotmock to several comgooglecommon typesdbd97473cab26185e48620b7916159915621bb14-------<p> add @donotmock to listenablefutureremove @donotmock from abstractfuture as it is now covered by @donotmock on listenablefuturerelnotesn/aad9d3eae25e3f7a8bb07a0b00105ec4426beab88-------<p> fix small error with how caseformat calculates the stringbuilder size when converting one format to anotherfixes https://githubcom/google/guava/pull/37300dc680192f18b7664f900304576736c1914d14ba;;;;;1;1;fix small error with how caseformat calculates the stringbuilder size when converting one format to anotherfixes  by moe: https://githubcom/google/moemoe_migrated_revid284567420;
3734;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @donotmock to several com.google.common types  relnotes:   - add @donotmock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> add @donotmock to listenablefuture  remove @donotmock from abstractfuture  as it is now covered by @donotmock on listenablefuture  relnotes=n/a  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> fix small error with how caseformat calculates the stringbuilder size when converting one format to another.  fixes   0dc680192f18b7664f900304576736c1914d14ba;;0;views created with uppercase column reference cannot be queried;the bug seems to be related to column references:```presto> create view test as select xfoo from (select 123 foo) xcreate viewpresto> select * from testquery  failed: view test is stale it must be re-createdpresto> describe test column |  type  | null | partition key | comment --------+--------+------+---------------+--------- foo    | bigint | true | false         |         (1 row)```note that the following works:```create view test_dphillips as select 123 foo```;s select xfoo from (select 123 foo) x    you can try  （ select xfoo from (select 123 foo) x ） || i just tried it out and it looks like this issue has been ```presto:default> create view test as select xfoo from (select 123 foo) xcreate viewpresto:default> select * from test foo ----- 123 (1 row)``` ||;;;;0;1;;
3734;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @donotmock to several com.google.common types  relnotes:   - add @donotmock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> add @donotmock to listenablefuture  remove @donotmock from abstractfuture  as it is now covered by @donotmock on listenablefuture  relnotes=n/a  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> fix small error with how caseformat calculates the stringbuilder size when converting one format to another.  fixes   0dc680192f18b7664f900304576736c1914d14ba;;0;"proposal: add ""help wanted"" labels for feature requests that the project is open to prs for";`help wanted` `prs welcome` etc would be helpful for those looking to contribute;":+1:  good idea || id like to encourage feature-requesters to go ahead and implement their proposals as prs its not about our lack of technical knowledge or time to do it ourselves but the opportunity to get others engaged in rxjava so in that sense many community content would be flagged as either of these which i already do with the feature-request tag || good point maybe the collaborators can be more proactive aboutsuggesting/inviting that in issues rather than the help wanted label mymain point is that just putting the ""feature request"" label alone might notmake it clear to the issue author or others if its something thecollaborators would be interested in so they wont put in the work to opena pron thu feb 25 2016 5:52 am david karnok notifications@githubcom wrote:> id like to encourage feature-requesters to go ahead and implement their> proposals as prs its not about our lack of technical knowledge or time to> do it ourselves but the opportunity to get others engaged in rxjava so in> that sense many community content would be flagged as either of these> which i already do with the feature-request tag> > —> reply to this email directly or view it on github>  || added a label see the example on this issue ||  ";;;;0;1;;
3734;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add @donotmock to several com.google.common types  relnotes:   - add @donotmock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> add @donotmock to listenablefuture  remove @donotmock from abstractfuture  as it is now covered by @donotmock on listenablefuture  relnotes=n/a  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> fix small error with how caseformat calculates the stringbuilder size when converting one format to another.  fixes   0dc680192f18b7664f900304576736c1914d14ba;;3536;add parser for german months (#3536);changed the month parse that it can also parse german months now this should solve issue #3536have i missed something?(for pe1718: name: johannes preßmar)-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"please merge jabrefs branch `master` (should be available at `upstream/master`) to resolve conflicts in changelogmd || the tests are still failing from looking at the code i think that ""mär"" is not parsed correctly could you please investigate this?once all tests are passing on travis i think we can merge this || ill merge into `wip` finish the pr and merge it into `master` || i  the issues at  the java files had the wrong encoding (utf8 was not used)2 the implementation for ""mär"" and ""märz"" was missing || "; add support for german months at the normalizer functionality;my library exports bibtex in a strange format ( i cannot get this  so jabref has to-----  change in changelogmd described-  -  <s> ()</s>-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?;i wasnt sure cause this seemed a seldom case i can move it there || superseeded by #3734  ||;1;0;merge branch master into add-parser-for-german-months-issue-3536;
3739;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync 2019-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotmock from hashfunction.  users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717;;0;moe sync 2019-12-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove @donotmock from hashfunctionusers need some kind of way to eg easily produce collisions in cases in which collisions should be raremaybe we can provide a better way to do this but for now lets at least not forbid using mocking frameworksc9ae0d314031ac9521d57aab8743ddba0c5f4717;;;;;1;1;remove @donotmock from hashfunctionusers need some kind of way to eg easily produce collisions in cases in which collisions should be raremaybe we can provide a better way to do this but for now lets at least not forbid using mocking frameworksrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid284620519;
3739;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync 2019-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotmock from hashfunction.  users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717;;0; toggle group intersection/union solved;   -->added new menu entry with the needed actionthe action gets and sets the group intersection/union preferences3269pe1_blatt_5aufgabe 7gmatrikelnummer: 3325847name: tobias stöver-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);@siedlerchr please decide whether you take over or just close the pr ||;;;;0;1;;
3739;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync 2019-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotmock from hashfunction.  users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717;;0;use the max response size provided by the httppagebufferclient;;@dain i noticed that we send `presto_max_size` in the header but never use it is there a reason why we always use the `default_max_size`? || there was a test failure so i restarted the travis build for this commit  assuming it passes ;;;;0;1;;
3739;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;0;moe sync 2019-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotmock from hashfunction.  users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717;;0;safesubscriberjava the 141 line always throw the exception;safesubscriberjava the 141 line always throw the nullpointexceptionthe actualsubscriber is nullbut i dont know why;do you have a code example to help us repoduce the problem? || i find out the reason:``` java  public subscriber<week> getsubscriber() {        return new subscriber<week>() {……          @override            public void onnext(week week) {                iviewsetmodel(week)                iviewsetloading(false)                if(week!null) {                    oncompleted()                }            }  ……}}```in activity which implements iviewsetmodel<t>i do this work:``` java @override    public void setmodel(week week) {        if(week!null) {            msyllabusviewsetweek(week)            msyllabusviewshow()        }else{            times--            if(times>0) {                syllabuspresenterstart()            }        }    }```and the really error is from  msyllabusviewshow() this method throws a nullpoint exceptionbut it doest  evident in the console || great! ||;;;;0;1;;
3740;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> format the javadoc of bytestreams.read() with @throw tags.  fixes   907ec2ea8655ba1c69d8b003c3e51689ec02b864;;0;moe sync 2019-12-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> format the javadoc of bytestreamsread() with @throw tagsfixes https://githubcom/google/guava/pull/3735907ec2ea8655ba1c69d8b003c3e51689ec02b864;;;;;1;1;format the javadoc of bytestreamsread() with @throw tagsfixes  by moe: https://githubcom/google/moemoe_migrated_revid285774424;
3740;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> format the javadoc of bytestreams.read() with @throw tags.  fixes   907ec2ea8655ba1c69d8b003c3e51689ec02b864;;0;automatic conversions for literals;it would be nice if this worked:``` sqlcreate table foo (ds date)select * from foo where ds  2015-10-09```;"i dont think this is a good idea it amounts to allowing implicit coercions between types that would normally not be allowed in some contexts unless we can clearly describe whats the general rule its going to be a problem to reason about and do safelyfor example given that bigint implicitly casts to double how should this be resolved if `x` is bigint?```x  10```would 10 be implicitly converted to a bigint assuming it follows the same rule as the example you posted above?it also makes the language very inconsistent for instance should this work?```ds  (2015- || 10-09)10 + 2  1 || 2 ```it would also allow for expressions like these:```1 + 2    > 3?1 || 2   > 12?```it can also result in ambiguities for instance if theres an `foo(date)` and a `foo(varchar)` defined what would `foo(2015-10-09)` do? one answer would be ""it binds to the most specific function"" this is problematic because if you only start with a `foo(date)` any queries that rely on the implicit conversion would break if the `foo(varchar)` form is introduced later  ";;;;0;1;;
3740;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> format the javadoc of bytestreams.read() with @throw tags.  fixes   907ec2ea8655ba1c69d8b003c3e51689ec02b864;;0;single#doonsubscribe is missing;just noticed that we have a `singledoonunsubscribe()` but not `singledoonsubscribe()` in rxjava 111;closing via #3741 ||;;;;0;1;;
3740;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> format the javadoc of bytestreams.read() with @throw tags.  fixes   907ec2ea8655ba1c69d8b003c3e51689ec02b864;;3737;inline locorg xsds;3737 not sure if this works and is the way to goif we need to update the mods schema we need to alter the paths againalso i dont know if we may inline this here;we have combined our two efforts in inlining and updating the mods xsd filesthis pr fixes  and  ||;jabref xjc gradle task fails due to outage of the library of congress;```> task :xjc[ant:xjc] [warning] schema_reference4: failed to read schema document  because 1) could not find the document 2) the document could not be read 3) the root element of the document is not <xsd:schema>```see  websites down feb 16-19 reading rooms and library shop closed feb 17 and 19due to a planned power outage most of the library’s public websites (locgov and others) will be unavailable from 7 pm et friday feb 16 through monday feb 19 the copyright online registration system will be unavailable beginning 5 pm thursday feb 15 throughout the weekendjabref holidays! (side note: we should fix such a dependency on a website being available;damn and i was wondering what the build broke when the website is on again we should copy that schema to the other file ||;1;0;update mods from 37 -> 37 (#3741);
3741;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d;;0;moe sync 2019-12-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> actually map thenable helper interface to js ithenable the name is different to avoid a clash with elemental2 ithenable8207e996f569381719eff09ee836509136734cc0-------<p> use error prones @guardedby enforcement to make sure that mutable state is appropriately synchronizedf6d239520285c399978597c4a6665bf41fe8395d;;;;;1;1;use error prones @guardedby enforcement to make sure that mutable state is appropriately synchronizedrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286044036;
3741;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d;;0;update mods from 36 -> 37;since the mods schema is backwards-compatible to 36  we can update it without any issuesthis fixes  but not https://githubcom/jabref/jabref/issues/3737;;;;;1;1;merge branch inline-loc-xsds of  into mods-xsd;
3741;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d;;0;add error code for communication failures with coordinator;;;;;;0;1;;
3741;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d;;3740.0;add doonsubscribe for single;ref #3740i didnt write much unit tests for `doonsubscribe` because it internally uses `operatordoonsubscribe` which is well covered;   thanks @aaronhe42!  ||;single#doonsubscribe is missing;just noticed that we have a `singledoonunsubscribe()` but not `singledoonsubscribe()` in rxjava 111;closing via #3741 ||;1;0;add doonsubscribe for single;
3743;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> expand android access to compact*hash*  also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) to match newcompacthashset(int).  b2723ea162d6c4d7df62722e87f609f70478840a;;0;moe sync 2019-12-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> expand android access to compact*hash*also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) tomatch newcompacthashset(int)b2723ea162d6c4d7df62722e87f609f70478840a;;;;;1;1;expand android access to compact*hash*also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) tomatch newcompacthashset(int)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286449854;
3743;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> expand android access to compact*hash*  also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) to match newcompacthashset(int).  b2723ea162d6c4d7df62722e87f609f70478840a;;0;add a developers section w/ style guidelines to readme;this is the second half of the style guidelines discussed during the boston presto meetup (the other half is here  i split the guidelines into two sections: one that is more general (to be merged in codestyle) and another section that is more specific to the presto codebase (this pr);addressed all of @electrums comments and rebased || i just realized that the `--force` i did to rebase erased @electrums comments sorry about that if you look at the diff of my second commit it mirrors his suggestions exactly || @martint this looks fine to me but ill let you merge || ;;;;0;1;;
3743;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> expand android access to compact*hash*  also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) to match newcompacthashset(int).  b2723ea162d6c4d7df62722e87f609f70478840a;;0;caused by: rxexceptionsmissingbackpressureexception;javalangillegalstateexception: exception thrown on schedulerworker thread add `onerror` handling    at rxinternalschedulersscheduledactionrun(scheduledactionjava:60)    at androidoshandlerhandlecallback(handlerjava:733)    at androidoshandlerdispatchmessage(handlerjava:95)    at androidoslooperloop(looperjava:136)    at androidappactivitythreadmain(activitythreadjava:5315)    at javalangreflectmethodinvokenative(native method)    at javalangreflectmethodinvoke(methodjava:515)    at comandroidinternaloszygoteinit$methodandargscallerrun(zygoteinitjava:864)    at comandroidinternaloszygoteinitmain(zygoteinitjava:680)    at dalviksystemnativestartmain(native method)caused by: rxexceptionsonerrornotimplementedexception    at rxobservable$27onerror(observablejava:7535)    at rxobserverssafesubscriber_onerror(safesubscriberjava:154)    at rxobserverssafesubscriberonerror(safesubscriberjava:111)    at rxinternaloperatorsoperatorsubscribeon$1$1$1onerror(operatorsubscribeonjava:71)    at rxinternaloperatorsoperatoronbackpressuredrop$2onerror(operatoronbackpressuredropjava:76)    at rxinternaloperatorsoperatorobserveon$observeonsubscriberpollqueue(operatorobserveonjava:197)    at rxinternaloperatorsoperatorobserveon$observeonsubscriber$2call(operatorobserveonjava:170)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)     9 morecaused by: rxexceptionsmissingbackpressureexception    at rxinternaloperatorsoperatorobserveon$observeonsubscriberonnext(operatorobserveonjava:138)    at rxinternaloperatorsoperatormap$1onnext(operatormapjava:55)    at rxinternaloperatorsonsubscribetimerperiodically$1call(onsubscribetimerperiodicallyjava:51)    at rxscheduler$worker$1call(schedulerjava:120)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)    at javautilconcurrentfuturetaskrun(futuretaskjava:237)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)    at javalangthreadrun(threadjava:841)rxexceptionsonerrornotimplementedexception    at rxobservable$27onerror(observablejava:7535)    at rxobserverssafesubscriber_onerror(safesubscriberjava:154)    at rxobserverssafesubscriberonerror(safesubscriberjava:111)    at rxinternaloperatorsoperatorsubscribeon$1$1$1onerror(operatorsubscribeonjava:71)    at rxinternaloperatorsoperatoronbackpressuredrop$2onerror(operatoronbackpressuredropjava:76)    at rxinternaloperatorsoperatorobserveon$observeonsubscriberpollqueue(operatorobserveonjava:197)    at rxinternaloperatorsoperatorobserveon$observeonsubscriber$2call(operatorobserveonjava:170)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at androidoshandlerhandlecallback(handlerjava:733)    at androidoshandlerdispatchmessage(handlerjava:95)    at androidoslooperloop(looperjava:136)    at androidappactivitythreadmain(activitythreadjava:5315)    at javalangreflectmethodinvokenative(native method)    at javalangreflectmethodinvoke(methodjava:515)    at comandroidinternaloszygoteinit$methodandargscallerrun(zygoteinitjava:864)    at comandroidinternaloszygoteinitmain(zygoteinitjava:680)    at dalviksystemnativestartmain(native method)caused by: rxexceptionsmissingbackpressureexception    at rxinternaloperatorsoperatorobserveon$observeonsubscriberonnext(operatorobserveonjava:138)    at rxinternaloperatorsoperatormap$1onnext(operatormapjava:55)    at rxinternaloperatorsonsubscribetimerperiodically$1call(onsubscribetimerperiodicallyjava:51)    at rxscheduler$worker$1call(schedulerjava:120)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)    at javautilconcurrentfuturetaskrun(futuretaskjava:237)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)    at javalangthreadrun(threadjava:841)rxexceptionsmissingbackpressureexception    at rxinternaloperatorsoperatorobserveon$observeonsubscriberonnext(operatorobserveonjava:138)    at rxinternaloperatorsoperatormap$1onnext(operatormapjava:55)    at rxinternaloperatorsonsubscribetimerperiodically$1call(onsubscribetimerperiodicallyjava:51)    at rxscheduler$worker$1call(schedulerjava:120)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)    at javautilconcurrentfuturetaskrun(futuretaskjava:237)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)    at javalangthreadrun(threadjava:841);you applied the `onbackpressuredrop` at the wrong location you should apply it just after `interval` || @akarnokd thanks for your answer but i don‘t known whats wrong in my code`observabletimer(1 1 timeunitseconds)        map(along -> calclefttime())        observeon(androidschedulersmainthread())        onbackpressuredrop()        subscribeon(schedulersio())        subscribe(new action1<long>() {          @override public void call(long along) {            if (along > 0) {              counttimeupdateshow(along)            } else {              counttimesetvisibility(viewinvisible)            }          }        } throwable::printstacktrace)` || @itxuye 1 apply `onbackpressuredrop()` after `timer()`2 you dont need `subscribeon()` since `observabletimer()` will run on `schedulerscomputation()` by default and youre not overriding it via `subscribeon()` || @artem-zinnatullin   the reason is the observeon is a producer/consumer queue between the timer and the work being done in the main thread that queue is filling up because the producer is faster || @artem-zinnatullin thanks ||;;;;0;1;;
3743;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> expand android access to compact*hash*  also rename newcompacthashmapwithexpectedsize(int) to newcompacthashmap(int) to match newcompacthashset(int).  b2723ea162d6c4d7df62722e87f609f70478840a;;3573;fix synclangpy script;3573 as already mentioned in my comment here:  was a logical issue hidden within the merging process when synchronizing the files i  this issue and added/changed a couple of other things-----  change in changelogmd described-  -   ()-  manually tested changed features ~~in running jabref~~-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"thanks a lot! || ## escapingslook at this:( file:    executing\ command\ \""%0\""executing command \""%0\""    the\ marked\ area\ does\ not\ contain\ any\ legible\ text!the marked area does not contain any legible text!i think one has to rewrite the english file to not escape `!` and `""`## empty translationsempty strings must not be added because of the new crowdin workflowalternative: add english as default  (and not the empty ones) || does this run with jython? || all of the code related to python 3 is within a try block this keeps its compatibility to python2 so it should be no problem to run it with jythonby the way there is already a repository for a jython version which is compatible to python 35 here: since its not a stable version at all i wouldnt recommend switching to jython3 || @koppor in order to fix the issue with the escapings i think i have to rework the logging output first the output is currently not helpful at all which is just printing a lot of unreadable spam into the console once this is  it will be much easier to see which keys are causing some trouble during the merging process || quick update:today ive been working on the command-line interface using the [argparse ]( library this took me way longer than i expected next step will be to rework the logging output as mentioned before || @koppor i think the script is now good to go due to my changes in the logging functionality i found out all malformed strings will be replaced by the correct ones but they have to be translated again unless the formatting is corrected manually (i think there are ""only"" 5 malformed keys in the german file which should be done quickly)the command-line options are still working exactly the same as before but i also added a new option called **print** this option allows to print specific status information for one particular fileexamples:`synclangpy print missing -file jabref_deproperties` prints missing keys of the jabref_deproperties file`synclangpy print obsolete -file jabref_deproperties` prints obsolete keys of the jabref_deproperties file`synclangpy print duplicates -file jabref_deproperties` prints duplicate keys of the jabref_deproperties filewould you mind testing the latest version and let me know if you still want to have any changes? || that comes right in time for checking the localization on the maintable beta branch! || -  would it be possible that `print missing` can also go through a complete directory and check all files at once? as default it should use the directory `src/main/resources/l10n` so that `print missing` works without any additional options-  it should output if nothing is found -- oh it does not output if there was something the `status` output missing keys    > python scripts\synclangpy print missing -f src\main\resources\l10n\jabref_deproperties    info unable to use pathfinder classotherwise it looks good to me have to change the crowdin config then @jabref/developers jabref will now contain values (the english text!) for each translation in the non-english files this is supported by crowdin || ok i changed the print command the file argument is no longer required for all subcommands (missing obsolete duplicates)you can now use `synclangpy print missing` but keep in mind this might be a little spammy || @koppor i have the vague memory that we already discussed the problematic of having english as the default value for the other language and decided against this option because it would make the established way of editing the language files directly more difficult not sure how relevant this still is because every translation contribution now seems to come through crowdin || @tobiasdiez i think it was only because we could not recognize easily with the script that the keys have been translated for instance following line    ok  okis this translated or not? (in german yes in chinese not)imho this is the edge case with the change that the english values come into the other language files we enable the guys not working with crowdin to be able to translate for instance @josephace135 wants to use github to get rewarded via  || @brainsucker92 is it easily possible to add test cases for python?it would be really great to test following ```actionaktion%0\ contains\ the\ regular\ expression\ <b>%1</b>%0 enthält den regulären ausdruck <b>%1</b>the\ marked\ area\ does\ not\ contain\ any\ legible\ text\!der markierte bereich enthält keinen lesbaren text\!generating\ bibtex\ key\ forerzeuge bibtex-key fürhint\:\ to\ search\ specific\ fields\ only\ enter\ for\ example\:<p><tt>author\smith\ and\ title\electrical</tt>hinweis\: um ausschließlich bestimmte felder zu durchsuchen geben sie zb ein\:<p><tt>author\smith and title\electrical</tt>```not translated:```actionaction%0\ contains\ the\ regular\ expression\ <b>%1</b>%0 contains the regular expression <b>%1</b>the\ marked\ area\ does\ not\ contain\ any\ legible\ text!the marked area does not contain any legible text!generating\ bibtex\ key\ forgenerating bibtex key forhint\:\ to\ search\ specific\ fields\ only\ enter\ for\ example\:<p><tt>author\smith\ and\ title\electrical</tt>hint: to search specific fields only enter for example:<p><tt>authorsmith and titleelectrical</tt>```these are the strings i would look up manually and think whether they work one can document code by adding test cases and it would be really great if we had that for our synclangpy script too || @koppor yes those test cases are possible for sure by using the [unittest]( libraryi might add another python file with sone test cases laterby the way i will be at stuttgart university at 3:15 pm today || @brainsucker92 forget about that test caseswe keep the non-translated strings removed reason: intellij can perfectly deal with it:![grafik]( || @brainsucker92 i am sorry to say but could you remove the functionality to add missing keys in the other language files? reporting etc is ok but not the additionreason: i find non-existing lines better than existing lines with strings from other languages || sure i can do that but i think ill do some other changes as well the  `__update_properties` method seems to be way to overloaded by things that should be moved to external methods  || sorry for the delay i was working on another improvement of the script but due to upcoming exams i think i wont be able to complete the improvement any time soon so i simply uploaded the change you requested || hi i just tried to run your script from gradle under windows and got (apart for the missing python 3 exception):i tried to run that on a new empty property file for #3776 actually it fails already with da_properties```$ /gradlew ateextendedtask :jmh last added: null root:unable to use pathfinder classtraceback (most recent call last):  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 660 in <module>    main()  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 656 in main    parsed_argsfunc(parsed_args)  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 594 in update_command    syncerupdate_properties()  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 296 in update_properties    self__update_jabref_properties()  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 303 in _synclang__update_jabref_properties    self__update_properties(main_property_fileselfmain_jabref_preferences other_property_filesself__other_jabref_properties())  file ""e:\workspace\jabref\jabref\scripts\synclangpy"" line 460 in _synclang__update_properties    if keys[key] ! """  uwhat\\ is\\ mr\\ dlib? failed``` || thanks for the hint should be fixed now try again || i fixed it myway (i switched to my pyhton 3 installation)```python         if key is not none:                    # do not write empty keys                    if keysget(key) ! """" and keysget(key) is not none:                        other_lines_to_writeappend(keysformat_key_and_value(keykey valuekeys[key]) + ""\n"")                else:```that worked for me however no keys are copied to my empty properties only newlines and comments```info processing file menu_tlproperties with 0 keysinfo 	added 110 missing keys```just create a new empty property file:menu_tlpropertiesjabref_tlproperties> no keys are inserted or is this expected and managed by crowdin? || yes because thats what @koppor requested to change > could you remove the functionality to add missing keys in the other language files?thats what i didall you have to do to revert this change is to uncomment lines 448 and 450 || okay: i have an idea after i found out that missing properties make jabref crash (those keys that are used in the fxml files) it would be wise to either auto add these ones or you just could add an additional gradle task to add the missing keys || to be honest: in my opinion we should seriously consider rewriting the whole script to java if there is no specific reason not to do this the more changes are made on the script and the more functionality we add the more complex the script becomes and at some point python is no longer a viable language because its primarily well suited for small and simple code which is slowly but surely overextended rewriting into java would also solve any compatibility problems with py2x and py3 and also get rid of any jython requirement for the whole jabref project (if there is no other python code in use) || yes that sounds like a valid reasonable thing i think for the moment we can keep it as is and we should discuss this in the next devcall || @tobiasdiez is it really true that jabref crashes due to missing keys? i thought you wrote a comment at some other place that this is not really the case and this can be fixed i would like to keep the files clean now that [utopian]( allows for having [crowdin]( as platform to get [steem coins]( i would say we do not need to change our workflow and let the language files be lean and clean especially because of the issue `okok` is this translated or not (see  || i tried to collect the options using [madr 201]( only translated strings in language file## context and problem statementjabref has translation files `jabref_itproperties` there are translated and unstranslated stringswhich ones should be in the translation file?## decision drivers* translators should find new strings to translate easily* new strings to translate should be written into `jabref_enproperties` to enable translation by the translators* crowdin should be kept as translation platform because 1) it is much easier for the translators than the github workflow and 2) it is free for oss projects## considered options* only translated strings in language file* translated and untranslated strings in language file have value the untranslated string to indicate untranslated* translated and untranslated strings in language file have empty to indicate untranslated## decision outcomechosen option: ""only translated strings in language file"" because comes out best (see below## pros and cons of the options### only translated strings in language file* good because crowdin supports it* bad because translators need tooling to see untranslated strings* bad because issues with fxml ( translated and untranslated strings in language file have value the untranslated string to indicate untranslated* good because no issues with fxml* good because crowin supports it* bad because untranslated strings cannot be identified easily in latin languages### translated and untranslated strings in language file have empty to indicate untranslated* good because untranslated strings can be identified easily* good because works with fmxl (?)* bad because crowdin does not support it || i just merged to move things forward but the discussion on the options is not finalized || i think we need the script if crowdin changes its policy or vanishes from the market in all other cases our current workflow should be ""good enough""? we can add new english language keys (by following the output of the failing tests) these are then synced to crowdin after a translator translated something it goes into jabref as pull requestnevertheless it is nice to have and other projects may benefit from it thus a pip package (and thus a separate repo) might be the way to go || regarding the fxml issues @tobiasdiez  fixed that in #3820  || ";gradle task ate does not work;`ate` leads to resorting and adding of many language keys due to the recent changes thus at the moment it is not possible to remove a pair from the english file and propagate this change to the other languages;"i think i can work on that in january meanwhile you should be able to log in at crowdin and remove the key there need to make you maintainer there though || please do not remove obsolete keys in other language files this is done by crowdin automatically:  will remove the task completely or have it output that there is no need for a check because of crowdin! || @koppor right now we have tests in place that require to remove obsolete language keys from other languages it would be nice if we could remove the `ate` step completely (less things to do manually) but then the tests should be adopted accordingly || i thought i adapted the tests seems i missed something have to checkam 05012018 12:01 schrieb ""tobias diez"" <notifications@githubcom>:> @koppor < right now we have tests in place that> require to remove obsolete language keys from other languages it would be> nice if we could remove the localizationupdate step completely (less> things to do manually) but then the tests should be adopted accordingly>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or mute> the thread> < > || this test fails if you remove language keys from the english file but not from the others: crowdin handles this case automatically then there is no need for this test right?)a few other tests still refer to the `localizationupdate` (which should not be invoked right?) eg || it is not as straight-forward as i thoughtenglish escapes more characters than non-english:    executing\ command\ \""%0\""executing command \""%0\""german:    executing\ command\ ""%0""ausfã¼hrung des kommandos ""%0"" || any updates on this? i think we dont need the script anylonger or? || an admin might still need it quoting:  that task wont be necessary for all contributors only for maintainers wanting to cleanup the files (like sorting ) however this is not absolutely necessary anymore since crowdin basically takes carei think i just close it and put an ""on-hold"" label on it || maybe we need to rework the quotes in the english file || finally i found some time to take a closer look at the synclangpy script to be honest its pretty difficult to determine the exact origin of this problem my very first thought was that there might be a problem with different character encodings the script always assumes the content of the property files is written in utf-8 encoding but eclipse is using iso-8859-1 encoding by default which is determined by the content type after some more research within the script i found some really nasty little mistake if you have a closer look at lines 52 and 53: not 100% certain if this will fix the whole problem but were going to find out real soon i guessi pushed the fix for this issue here: i added a new class that allows the script to locate its position within the repositorythis might be helpful at some pointupdate:i did it! i found a logical issue deep within the merging process of the files have a look here: keys are added as empty strings to the dictionary so far so good but then: that contain empty strings are not written to the new properties file which leads to missing keys over and over again i simply removed the if and everything worked perfectly finenew commit: || ";1;0; missing key issue;
3747;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashmap fall back to a java.util.linkedhashmap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> fix maven test failures from cl 286604248: - make  abstract  class abstract. (and make its constructor package-private while we re at it.) - add a dummy test method (similar to what filteredcollectionstest already has).  these should fix: - warning(junit.framework.testsuite$1): class com.google.common.collect.abstracthashfloodingtest has no public constructor testcase(string name) or testcase() - warning(junit.framework.testsuite$1): no tests found in com.google.common.collect.immutablebimaptest    (also  address a review comment:   8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> add @suppresswarnings for new violations of the guardedby checker.  98736425927413862c058d11f1aaeae53bbe0f91;;0;moe sync 2019-12-23;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make compact(linked)hashmap fall back to a javautillinkedhashmap if hash flooding is detected just as the immutable collections do5dffec12c07ea23bcba653198036e55df27792f0-------<p> fix maven test failures from cl 286604248:- make ""abstract"" class abstract (and make its constructor package-private while were at it)- add a dummy test method (similar to what filteredcollectionstest already has)these should fix:- warning(junitframeworktestsuite$1): class comgooglecommoncollectabstracthashfloodingtest has no public constructor testcase(string name) or testcase()- warning(junitframeworktestsuite$1): no tests found in comgooglecommoncollectimmutablebimaptest address a review comment:  add @suppresswarnings for new violations of the guardedby checker98736425927413862c058d11f1aaeae53bbe0f91";;;;;1;1;add @suppresswarnings for new violations of the guardedby checker-------------created by moe: https://githubcom/google/moemoe_migrated_revid286896398;
3747;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashmap fall back to a java.util.linkedhashmap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> fix maven test failures from cl 286604248: - make  abstract  class abstract. (and make its constructor package-private while we re at it.) - add a dummy test method (similar to what filteredcollectionstest already has).  these should fix: - warning(junit.framework.testsuite$1): class com.google.common.collect.abstracthashfloodingtest has no public constructor testcase(string name) or testcase() - warning(junit.framework.testsuite$1): no tests found in com.google.common.collect.immutablebimaptest    (also  address a review comment:   8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> add @suppresswarnings for new violations of the guardedby checker.  98736425927413862c058d11f1aaeae53bbe0f91;;0;pressing escape during search clears search field & selects first entry;   -->fixes:  the user to clear the search field by pressing the escape key as requested as well the first entry in the table is automatically selected afterwards if such an entry exists-----  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"thank you very much for your contribution! codewise looks good!but as we are in the migration to javafx would you mind trying to implement this on top of the maintable-beta branch/javafxgloba everything? (i think you better open a new pr for that javafx part then) || will do no worries are both branches _maintable-beta_ & _javafxglobaleverything_ equivalent or should i choose one over the other? || please base it at `javafxglobaleverything` there were some major changes to the menu and toolbar as @siedlerchr said  @mohamean i just merged the globaleverything branch into ""maintable-beta"" thus you can now use the latter as the base  || ";;;;1;1; changelog message with closing tag;
3747;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashmap fall back to a java.util.linkedhashmap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> fix maven test failures from cl 286604248: - make  abstract  class abstract. (and make its constructor package-private while we re at it.) - add a dummy test method (similar to what filteredcollectionstest already has).  these should fix: - warning(junit.framework.testsuite$1): class com.google.common.collect.abstracthashfloodingtest has no public constructor testcase(string name) or testcase() - warning(junit.framework.testsuite$1): no tests found in com.google.common.collect.immutablebimaptest    (also  address a review comment:   8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> add @suppresswarnings for new violations of the guardedby checker.  98736425927413862c058d11f1aaeae53bbe0f91;;0;add column support for raptor;;thanks @electrum for your review! ive made the changes in the last commit please review again || looks good please squash last commit before pushing || the travis build failed though seems unrelated please make sure a command line build for presto-raptor works || thanks @electrum  local build and test passed merging ||;;;;0;1;;
3747;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashmap fall back to a java.util.linkedhashmap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> fix maven test failures from cl 286604248: - make  abstract  class abstract. (and make its constructor package-private while we re at it.) - add a dummy test method (similar to what filteredcollectionstest already has).  these should fix: - warning(junit.framework.testsuite$1): class com.google.common.collect.abstracthashfloodingtest has no public constructor testcase(string name) or testcase() - warning(junit.framework.testsuite$1): no tests found in com.google.common.collect.immutablebimaptest    (also  address a review comment:   8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> add @suppresswarnings for new violations of the guardedby checker.  98736425927413862c058d11f1aaeae53bbe0f91;;0;why always retry;"why has been retry procedurethis is helper class:``` javapublic class retrywhenprocess implements func1<observable<? extends throwable> observable<?>> {    private long minterval    public retrywhenprocess(long interval) {        minterval  interval    }    @override    public observable<?> call(final observable<? extends throwable> observable) {        return observableflatmap(new func1<throwable observable<?>>() {            @override            public observable<?> call(throwable throwable) {                return observableflatmap(new func1<throwable observable<?>>() {                    @override                    public observable<?> call(throwable throwable) {                        systemoutprintln(""throwable>>>>>""+throwabletostring())                        if (throwable instanceof unknownhostexception) {                            return observableerror(throwable)                        }                        return observablejust(throwable)zipwith(observablerange(1 5) new func2<throwable integer integer>() {                            @override                            public integer call(throwable throwable integer i) {                                systemoutprintln(""throwable>>>>>""+throwabletostring()+""i>>>""+i)                                return i                            }                        })flatmap(new func1<integer observable<? extends long>>() {                            @override                            public observable<? extends long> call(integer retrycount) {                                systemoutprintln(""retrycount>>>>>""+retrycount)                                return observabletimer((long) mathpow(minterval retrycount) timeunitseconds)                            }                        })                    }                })            }        })    }}```this use class:``` javapostloginresultusecaseexecute()retrywhen(new retrywhenprocess(5))subscribe(new subscriber<loginmodel<user>>() {                @override                public void oncompleted() {                }                @override                public void onerror(throwable e) {                }                @override                public void onnext(loginmodel<user> userloginmodel) {                    systemoutprintln(userloginmodel)                    listeneronsuccess()                }            })```";what is the question? || @akarnokd ，i want to implement retry timeout but it has been a retry dont stop || there is a library called [rxjava-extras]( that has a bunch of backoff retry strategies ||;;;;0;1;;
3748;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;0;add link to contributejabreforg;i am not sure about a good way to link  wdyt?;"what about putting it in the ""contributing"" section? but not so prominently the stuff written on this page is not that important (except the help which nobody updates except us and the translation stuff which works quite well)by the way why are some links with  and others with  i noticed this recently with the donations link which only works for  || it is in the contributing section: 😇 ( || ah sorry its late the location and style is fine with me maybe hide the url eg ""[we also need help with other things](contributing)"" || ![grafik]( || how about: ""not a programmer? learn how you can help""? || ![grafik]( || ";;;;1;1;rewrote sentence;
3748;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;0;add slack integration for travis;;;;;;0;1;;
3748;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;0;replay()connect() does not complete on current thread;"this test case:``` java  @test  public void test() {    final atomicboolean onnext  new atomicboolean(false)    final atomicboolean oncompleted  new atomicboolean(false)    observable<string> o  observablejust(""hallo"")        doonnext(new action1<string>() {          @override          public void call(string s) {            onnextset(true)          }        })        dooncompleted(new action0() {          @override          public void call() {            oncompletedset(true)          }        })    connectableobservable<string> connectable  oreplay()    connectableconnect()    asserttrue(onnextget())    asserttrue(oncompletedget())  }```started failing for me on the latest snapshot `git bisect` says c925e860c01c30edc15c59c592c1d5e9b9777a90 is the first bad commit `publish()` is not affected";previously `just()` didnt support backpressure and emitted its value immediately after subscription now it waits for a proper downstream request which doesnt happen because `replay()` requests upstream only when there is a downstream request just add `connectablesubscribe()` to trigger `just()` || @akarnokd thanks for the explanation! ||;;;;0;1;;
3748;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor: lambda can be replaced method reference  3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;3745.0;moe sync 2019-12-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor: lambda can be replaced method reference37451d8ab4f96855dcb9a7cd3990a671f4e5696faa4e;;refactor lambda can be replaced method reference;;     clas look good thanks!  ||;1;0;refactor: lambda can be replaced method reference3745relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286897808;
3752;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece;;0;moe sync 2019-12-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct @nullable and use intsconstraintorange()5d9fc397a80618ea90786f026962f208b979bece;;;;;1;1;correct @nullable and use intsconstraintorange()relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid286925184;
3752;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece;;0;unable to drag-and-drop an item to the group tree;"*  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-02-20--master--ae3aed804windows 81 63 x86 java 180_161step to reproduce:1 drag an item into a groupthe item wont be added to the group the cursor shows a ""forbidden"" sign<details>  <summary>log file</summary>    ```  13 36563 [javafx application thread] error orgjabreffallbackexceptionhandler - uncaught exception occurred in thread[javafx application thread5main]javalangnoclassdeffounderror: could not initialize class orgjabrefguidraganddropdataformats        at orgjabrefguigroupsgroupnodeviewmodelacceptabledrop(groupnodeviewmodeljava:251) ~[jabref-42-dev--snapshot--2018-02-20--master--ae3aed804jar:?]        at orgjabrefguigroupsgrouptreecontrollerlambda$initialize$14(grouptreecontrollerjava:213) ~[jabref-42-dev--snapshot--2018-02-20--master--ae3aed804jar:?]        at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:86) ~[jfxrtjar:?]        at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238) ~[jfxrtjar:?]        at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191) ~[jfxrtjar:?]        at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59) ~[jfxrtjar:?]        at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58) ~[jfxrtjar:?]        at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]        at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]        at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]        at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]        at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]        at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]        at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]        at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56) ~[jfxrtjar:?]        at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114) ~[jfxrtjar:?]        at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74) ~[jfxrtjar:?]        at comsunjavafxeventeventutilfireevent(eventutiljava:54) ~[jfxrtjar:?]        at javafxeventeventfireevent(eventjava:198) ~[jfxrtjar:?]        at javafxscenescene$dndgesturefireevent(scenejava:2933) ~[jfxrtjar:?]        at javafxscenescene$dndgestureprocesstargetenterover(scenejava:3105) ~[jfxrtjar:?]        at javafxscenescene$dndgestureaccess$6100(scenejava:2909) ~[jfxrtjar:?]        at javafxscenescene$droptargetlistenerdragover(scenejava:2830) ~[jfxrtjar:?]        at comsunjavafxtkquantumglassscenedndeventhandlerlambda$handledragover$309(glassscenedndeventhandlerjava:110) ~[jfxrtjar:?]        at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_161]        at comsunjavafxtkquantumglassscenedndeventhandlerhandledragover(glassscenedndeventhandlerjava:107) ~[jfxrtjar:?]        at comsunjavafxtkquantumembeddedscenedtlambda$handledragover$320(embeddedscenedtjava:115) ~[jfxrtjar:?]        at comsunjavafxtkquantumembeddedscenedndlambda$executeonfxthread$301(embeddedscenedndjava:113) ~[jfxrtjar:?]        at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295) ~[jfxrtjar:?]        at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_161]        at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294) ~[jfxrtjar:?]        at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95) ~[jfxrtjar:?]        at comsunglassuiwinwinapplication_runloop(native method) ~[jfxrtjar:?]        at comsunglassuiwinwinapplicationlambda$null$147(winapplicationjava:177) ~[jfxrtjar:?]        at javalangthreadrun(unknown source) [?:180_161]  ```</details>";i just tested this on the current master (both by building it from source and by installing the version available at buildsjabreforg) and unfortunately i cannot reproduce your problem dragging entries onto groups works just finealso your error message is very strange i have no clue how its possible to not find the class `draganddropdataformats` except if something went really wrong during packagingi guess we are going to need more information to reproduce that eg every tiny step from installing jabref to getting the error || closing this issue due to inactivity   please reopen the issue with additional information if the problem persists ||;;;;0;1;;
3752;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece;;0;respect hive immutable table property for inserts;;this issue has been automatically marked as stale because it has not had recent activity it will be closed if no further activity occurs ||;;;;0;1;;
3752;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece;;3732.0;1x: singleusing();this pr adds the factory method `using()` +1 overload to `single` as requested in #3732for convenience ive also added `singlesubscribe(observer)`; lgtm;request: singleusing;to match `observableusing````public static <t resource> single<t> using(        func0<resource> resourcefactory        func1<? super resource ? extends single<? extends t>> singlefactory        action1<? super resource> disposeaction)```and```public static <t resource> single<t> using(        func0<resource> resourcefactory        func1<? super resource ? extends single<? extends t>> singlefactory        action1<? super resource> disposeaction boolean disposeeagerly)```;ill do this || see #3752 || pr was merged and released as part of v112 this issue can be closed! || closing via #3752 ||;1;0;1x: singleusing();
3757;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> assign the result of contains() and containsall() to a variable.  this satisfies the checkreturnvalue checker.   d99aad23b74bf91eb3084b2b40625e787e758ff3;;0;moe sync 2019-12-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> assign the result of contains() and containsall() to a variablethis satisfies the checkreturnvalue checkerd99aad23b74bf91eb3084b2b40625e787e758ff3;;;;;1;1;assign the result of contains() and containsall() to a variablethis satisfies the checkreturnvalue checker-------------created by moe: https://githubcom/google/moemoe_migrated_revid287279350;
3757;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> assign the result of contains() and containsall() to a variable.  this satisfies the checkreturnvalue checker.   d99aad23b74bf91eb3084b2b40625e787e758ff3;;0;add ** to the import file filter dialog;from the forum: jabref only allows the import of files with the list of supported file extensionsso as there is now file extension bibtex for bib files import we should add a ** (all file types) filterthe import should then use the automatism (as its now the case for all avaiable import formats);;;;;0;1;;
3757;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> assign the result of contains() and containsall() to a variable.  this satisfies the checkreturnvalue checker.   d99aad23b74bf91eb3084b2b40625e787e758ff3;;0;add catalogschema option for displaying column name in showtables & showschemas;;can you explain the motivation for the change? i think the current behavior of having a simple consistent name is better || @electrum  there will be the same table name or the same schema name in different catalog/schema add catalog/schema option to list tables/schemas more clear || `show tables` and `show schemas` operate in a single schema/catalog so i dont think theres any confusion about where the tables/schemas are if other databases work this way though feel free to re-open for discussion! ||;;;;0;1;;
3757;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2019-12-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> assign the result of contains() and containsall() to a variable.  this satisfies the checkreturnvalue checker.   d99aad23b74bf91eb3084b2b40625e787e758ff3;;0;1x: operator sample emits last sampled value before termination;changes:- `operatorsamplewithtime` emits last stored value if it is set before `oncompleted`- `operatorsamplewithobservable` emits last sampled value if source or sample completeas discussed in https://githubcom/reactivex/rxjava/issues/3657; ;;;;1;1;operator sample emits last sampled value before termination;
3758;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix instances of {#foo} in javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;0;moe sync 2020-01-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix instances of {#foo} in javadoc31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;;;;1;1;fix instances of {#foo} in javadocrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid287583870;
3758;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix instances of {#foo} in javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;0;"reorder checklist in pr template and add ""good commit message""";i found  in the net and i really like it maybe we should promote that here too? wdyt?i also reordered the checklist at the pr template to go from ui to technical issues although the documentation is still the last bullet point;i agree with christoph please put the changelog entry to the top after all no changelog entry is a blocker for merging most of the time whereas a missing screenshot is not || and added tests are more important than manually tried it in jabref -) ||;;;;1;1;reorder again;
3758;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix instances of {#foo} in javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;0;error using dbvisualiser;hi all looks like the following query``` sqlselect table_cat table_schem table_name column_name data_type  type_name column_size buffer_length decimal_digits num_prec_radix  nullable remarks column_def sql_data_type sql_datetime_sub  char_octet_length ordinal_position is_nullable  scope_catalog scope_schema scope_table  source_data_type is_autoincrement is_generatedcolumnfrom systemjdbccolumnswhere table_cat  dwh and table_schem like default and table_name like rate_rules and column_name like %order by table_cat table_schem table_name ordinal_position```makes the following exception```2015-10-14t09 25305z        error   remote-task-callback-11 comfacebookprestoexecutionstagestatemachine stage 20151014_091525_00015_8gsza1 failedjavalangillegalargumentexception: expected value 4 to be an instance of long but is a integer        at comfacebookprestospiinmemoryrecordsetcheckargument(inmemoryrecordsetjava:256)        at comfacebookprestospiinmemoryrecordsetaccess$500(inmemoryrecordsetjava:36)        at comfacebookprestospiinmemoryrecordset$builderaddrow(inmemoryrecordsetjava:229)        at comfacebookprestoconnectorsystemjdbccolumnjdbctableaddcolumnrows(columnjdbctablejava:126)        at comfacebookprestoconnectorsystemjdbccolumnjdbctablecursor(columnjdbctablejava:113)        at comfacebookprestoconnectorsystemsystemrecordsetprovider$1cursor(systemrecordsetproviderjava:116)        at comfacebookprestosplitmappedrecordsetcursor(mappedrecordsetjava:53)        at comfacebookprestospirecordpagesource<init>(recordpagesourcejava:37)        at comfacebookprestosplitrecordpagesourceprovidercreatepagesource(recordpagesourceproviderjava:41)        at comfacebookprestosplitpagesourcemanagercreatepagesource(pagesourcemanagerjava:48)        at comfacebookprestooperatorscanfilterandprojectoperatorcreatesourceifnecessary(scanfilterandprojectoperatorjava:254)        at comfacebookprestooperatorscanfilterandprojectoperatorisfinished(scanfilterandprojectoperatorjava:169)        at comfacebookprestooperatordriverprocessinternal(driverjava:377)        at comfacebookprestooperatordriverprocessfor(driverjava:303)        at comfacebookprestoexecutionsqltaskexecution$driversplitrunnerprocessfor(sqltaskexecutionjava:587)        at comfacebookprestoexecutiontaskexecutor$prioritizedsplitrunnerprocess(taskexecutorjava:505)        at comfacebookprestoexecutiontaskexecutor$runnerrun(taskexecutorjava:640)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)        at javalangthreadrun(threadjava:745)2015-10-14t09 25305z        error   query-execution-10      comfacebookprestoexecutionquerystatemachine query 20151014_091525_00015_8gsza failedjavalangillegalargumentexception: expected value 4 to be an instance of long but is a integer        at comfacebookprestospiinmemoryrecordsetcheckargument(inmemoryrecordsetjava:256)        at comfacebookprestospiinmemoryrecordsetaccess$500(inmemoryrecordsetjava:36)        at comfacebookprestospiinmemoryrecordset$builderaddrow(inmemoryrecordsetjava:229)        at comfacebookprestoconnectorsystemjdbccolumnjdbctableaddcolumnrows(columnjdbctablejava:126)        at comfacebookprestoconnectorsystemjdbccolumnjdbctablecursor(columnjdbctablejava:113)        at comfacebookprestoconnectorsystemsystemrecordsetprovider$1cursor(systemrecordsetproviderjava:116)        at comfacebookprestosplitmappedrecordsetcursor(mappedrecordsetjava:53)        at comfacebookprestospirecordpagesource<init>(recordpagesourcejava:37)        at comfacebookprestosplitrecordpagesourceprovidercreatepagesource(recordpagesourceproviderjava:41)        at comfacebookprestosplitpagesourcemanagercreatepagesource(pagesourcemanagerjava:48)        at comfacebookprestooperatorscanfilterandprojectoperatorcreatesourceifnecessary(scanfilterandprojectoperatorjava:254)        at comfacebookprestooperatorscanfilterandprojectoperatorisfinished(scanfilterandprojectoperatorjava:169)        at comfacebookprestooperatordriverprocessinternal(driverjava:377)        at comfacebookprestooperatordriverprocessfor(driverjava:303)        at comfacebookprestoexecutionsqltaskexecution$driversplitrunnerprocessfor(sqltaskexecutionjava:587)        at comfacebookprestoexecutiontaskexecutor$prioritizedsplitrunnerprocess(taskexecutorjava:505)        at comfacebookprestoexecutiontaskexecutor$runnerrun(taskexecutorjava:640)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)        at javalangthreadrun(threadjava:745)```using parquet files on hdfs via hive if that helps; in #3760 || many thanks for the fast turnaround ||;;;;0;1;;
3758;1;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix instances of {#foo} in javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c;;0;threading in a serializedsubject;"with usual `observable` the `observer` is executed on the same thread as the one that the `observable` is created with `serializedsubject` theres some magic that is unclear below is the code snippet:``` scalaobject launcher extends app {  val pubsub  publishsubjectcreate[int]  val sersub  new serializedsubject(pubsub)  val observable  observablejust(1 2)subscribeon(schedulerscomputation())  sersubsubscribe(new action1[int] {    override def call(t: int): unit       println(s""subject subscribeon $t ${threadcurrentthread()getname}"")  })  observablesubscribe(sersub)  observablejust(6)subscribe(sersub)  while (true) {}}```one would expect that the numbers 1 and 2 are printed inside some computation thread and the 6 is printed inside main thread now if i remove the `observablejust(6)` line everything is printed inside the computation thread is that the expected behavior? if so how does the `serializedsubject` decide which thread to run?now i can modify a code a bit (publish to pubsub and subscribe to sersub)``` scalaobject launcher extends app {  val pubsub  publishsubjectcreate[int]  val sersub  new serializedsubject(pubsub)  val observable  observablejust(1 2)subscribeon(schedulerscomputation())  sersubsubscribe(new action1[int] {    override def call(t: int): unit       println(s""subject subscribeon $t ${threadcurrentthread()getname}"")  })  observablesubscribe(pubsub)  observablejust(6 7 8 9 10)subscribe(pubsub)  while (true) {}}```then things get printed in the expected thread is this the legit way to do it if i want this behavior?";"im not looking at the source code at the moment but i suspect my description wont be far off the mark  when a thread a sends an item to a `publishsubject` that item is added to a queue and if no drain loop is currently running on that queue (to emit the elements in the queue to all the subscribers of the `publishsubject`) then the thread a runs the drain on the queue and will emit items on thread a if thread b is currently running the drain loop then it will iterate through the queue items emitting them and eventually pop the element off the queue that thread a put there and emit it (on thread b)thus what you are seeing is a race to get the drain loop by the main thread and the computation threaddoes that help? || @davidmoten thanks a lot! but im still a bit confused so essentially i have```val pubsub  publishsubjectcreate[int]val sersub  new serializedsubject(pubsub)```and all my actions are subscribed to `sersub` now if i do `onnext` on `sersub` from two threads its always the case that everything gets invoked on just one of the thread which is the behavior that you described but if i do `onnext` on `pubsub` from two different threads then the actions are executed in the correct threadit would be great to know if these are expected behaviors and moreover if the second way (`onnext` on `pubsub` but `subscribe` to `sersub`) is a legal way to use a `serializedsubject`thanks!!! || calling `onnext` from multiple threads on a `publishsubject` violates its contract its just coincidental that such call doesnt cause problems with the subscriber downstream if you want to stay on the ""correct"" thread dont use a subject but set up a sequence for each thread via `subscribeon` || @akarnokd thanks for the reply just to confirm calling `onnext` from multiple threads on a `publishsubject` still violate the contract even if i only subscribes to the `serializedsubject`?could you please explain more about what you mean by setting up a sequence for each thread?my main goal was to create an `eventbus` using rxjava instead of using `subject` what should i use instead? || > still violate the contractyes serializedsubject wraps the publishsubject and makes sure concurrent calls to serializedsubjectonnext are serialized into a single likely hopping thread thus `publishsubject` will be driven by non-concurrent onnext callsif you can distingush between events then you can have different receivers:``` javasubject<integer integer> subject  publishsubject<integer>create()toserialized()observable<integer> odd  subjectfilter(v -> v % 2 ! 0)observeon(schedulersio())observable<integer> even  subjectfilter(v -> v % 2  0)observeon(schedulersnewthread())oddsubscribe()evensubscribe()``` || @akarnokd thats a very helpful answer! i noticed that you are using `observeon` in your example instead of `subscribeon` (as you mentioned in the previous comment) since `subscribeon` usually changes the thread up in the stream i would expect that it changes the thread where the `subject`s `onnext` is called and hence where the subscribed action is executed however when i play with it `subscribeon` doesnt actually affect anything is it because `serializedsubject` doing some _serializing_ which makes `subscribeon` useless? in general due to what @davidmoten said the actual thread where things get executed (without using `observeon` to modify it) is essentially only determined at run time is my understanding correct?thanks again! || there is a significant difference between `subscribeon` and `observeon` simply put `subscribeon` moves the subscription to another thread:``` javasubjectsubscribe() // current threadexecutorsubmit(() -> subjectsubscribe()) // another thread``` and `observeon` moves the observation of onxxx calls to another thread:``` javasubscriberonnext() // current threadexecutorsubmit(() -> subscriberonnext()) // other thread``` || i like describing them as if they were for loops  `subscribeon` as scheduling outside the for loop:`executorsubmit( () -> for(item : items) { onnext(item) } )`and `observeon` as scheduling inside the for loop:`for(item : items) { executorsubmit( () -> onnext(item) } )` || @akarnokd and @abersnaze so usually people say that `subscribeon` changes the thread _upstream_ is it because things are evaluated lazily when the for loop is inside the new thread the items are evaluated on the new thread as well?so now back to my question about `serializedsubject` due to some magic that `serializedsubject` does the actual thread where an `action` (in `subjectsubscribe()`) is executed is undetermined until real time right? || if there is an emission race from multiple sources to a `serializedsubject` any of the participating thread may end up emitting to the subscribers onnext method and keep emitting the others values as well || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || what || ";;;;0;1;;
3763;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8;;0;moe sync 2020-01-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update to junit 41315262018825b31559b39e1ea84cccb29903f44e0-------<p> note another case in which our implementation of typevariable throws unsupportedoperationexception55fdde6aee4878820e8fc7615c05ec8d0e365b5f-------<p> suppress ignored return values from collection#contains*i think this is all of them!b574bfaead6951521ba9d174c935b55309fa51b8;;;;;1;1;suppress ignored return values from collection#contains*i think this is all of them!relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid288028198;
3763;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8;;0;"the ""biblatex source"" text field is deselected after every key";-  i have tested the latest master version from  and the problem persistsjabref version 42-devsteps to reproduce:1 open the source tab of an entry2 try to change the type by typing between @ and {workaround: a mouse click on the position where the cursor was before after every key stroke;though its not obvious this is caused by the same changes as #3730: changing the entry typewell either find a solution to this or revert the underlying changes before the release of 42 || with #3872  typing works fine except betwen changing the entrytype but that is in my opinion an edge case its way easier to do a rightclick and select --> change entry type is a cause of the runinfxthreadandwait but its necessary to have this as otherwise the maintable is f*cked up ||;;;;0;1;;
3763;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8;;0;"we find a bug when mysql table name have ""_"" ";"the problem is when mysql have ""_"" in the table name the  ""escapenamepattern"" function change the nameso the sql can`t run on mysqlin the file  presto-mysql/src/main/java/com/facebook/presto/plugin/mysql/mysqlclientjava    line 93  to line 97for example:  table ""aaa_bbb"" change to ""aaa\_bbb""   the bug find above release 0119 ";"yes the 0123 version still have this problem  || i can take care of this bug || this is the same as #3677  || @uranusmars `_` have to be escaped as it a wildcard which `represents any single character` see:  tried to reproduce it but with no success everything seem to be working as expected here is my test which was expected to reproduce the issue but it is passing:  should also fail because of described issue but it is passingpresto testing infrastructure is using mysql at 559 versioni need more detailed information about how to reproduce it or this issue is eligible to be closed as not being able to be reproduced || @kokosing  the escape sql will like select \* from test_tables but this sql can not be execute，this problem  is same as postgresqli change code like  below worked fine``` java @override    protected resultset gettables(connection connection string schemaname string tablename)            throws sqlexception    {        // mysql maps their ""database"" to sql catalogs and does not have schemas        databasemetadata metadata  connectiongetmetadata()       // string escape  metadatagetsearchstringescape()        return metadatagettables(                schemaname                null                tablename                new string {""table""})    }``` || @sunli1223 i updated the test so it runs select now see  is still passing i suspect it may have something related to your mysql server or jdbc configuration can you tell me what `metadatagetsearchstringescape()` returns for you? || @kokosing  i used mysql-connector-java-5135metadatagetsearchstringescape() will call ``` javacommysqljdbcdatabasemetadatagetsearchstringescape(){   return ""\\""}```soreturn ""\"" from me and the the same as postresqljdbc document say" textthis is the string that can be used to escape _ or  in the string pattern style catalog search parametersthe _ character represents any single characterthe  character represents any sequence of zero or more characters```i guess the escape string is  used for some sql like ""where field like  %a\%%  ""but not for table name。 || @sunli1223 from jdbc documentation for `databasemetadata#gettables````     * @param tablenamepattern a table name pattern must match the     *        table name as it is stored in the database     * @see #getsearchstringescape```and for `databasemetadata#getsearchstrnigescape()````     * retrieves the string that can be used to escape wildcard characters     * this is the string that can be used to escape _ or % in     * the catalog search parameters that are a pattern (and therefore use one     * of the wildcard characters)```as you can see escape string is used in pattern in catalog searches and gettable is using it imo everything is ok in the code i will try to repeat the tests with jdbc at version you specified to reproduce the problem || @kokosing this is our mysql versionserver version: 5625-731-log percona server (gpl) release 731 revision 07b797fyou can try to reproduce the problem || @kokosing  the jdbc version is included in presto i test mysql versio with ""5531-mariadb-log"" ""5532-log"" and ""5624-722-log"" i download the latest version presto-server-0126 just nowthen test``` textmysql> show tables from test_test+---------------------+| tables_in_test_test |+---------------------+| test                || test_abc            |+---------------------+2 rows in setpresto:default> show tables from mysqltest_test table -------(0 rows)query 20151120_094143_00006_w8rni finished 1 nodesplits: 2 total 2 done (10000%)0:00 [0 rows 0b] [0 rows/s 0b/s]```at the same time i run tcpdump to see the sql send to mysqlserverbelow is the output``` textsudo tcpdump -i lo -s 0 -l -w - dst port 3306|stringstcpdump: listening on lo link-type en10mb (ethernet) capture size 65535 bytesrootmysql_native_password[  j[+  j[0  j/* mysql-connector-java-5135 ( revision: 5fb9c5849535c13917c2cf9baaece6ef9693ef27 ) */show variables where variable_name language or variable_name  net_write_timeout or variable_name  interactive_timeout or variable_name  wait_timeout or variable_name  character_set_client or variable_name  character_set_connection or variable_name  character_set or variable_name  character_set_server or variable_name  tx_isolation or variable_name  transaction_isolation or variable_name  character_set_results or variable_name  timezone or variable_name  time_zone or variable_name  system_time_zone or variable_name  lower_case_table_names or variable_name  max_allowed_packet or variable_name  net_buffer_length or variable_name  sql_mode or variable_name  query_cache_type or variable_name  query_cache_size or variable_name  license or variable_name  init_connect//* mysql-connector-java-5135 ( revision: 5fb9c5849535c13917c2cf9baaece6ef9693ef27 ) */select @@sessionauto_increment_increment/_w  jset names latin1/_l  jset character_set_results  null/set autocommit1/set sql_modestrict_trans_tables/show databases/<+""@4+#@4+$@u+%@rootmysql_native_password8+&@9+@/* mysql-connector-java-5135 ( revision: 5fb9c5849535c13917c2cf9baaece6ef9693ef27 ) */show variables where variable_name language or variable_name  net_write_timeout or variable_name  interactive_timeout or variable_name  wait_timeout or variable_name  character_set_client or variable_name  character_set_connection or variable_name  character_set or variable_name  character_set_server or variable_name  tx_isolation or variable_name  transaction_isolation or variable_name  character_set_results or variable_name  timezone or variable_name  time_zone or variable_name  system_time_zone or variable_name  lower_case_table_names or variable_name  max_allowed_packet or variable_name  net_buffer_length or variable_name  sql_mode or variable_name  query_cache_type or variable_name  query_cache_size or variable_name  license or variable_name  init_connect//* mysql-connector-java-5135 ( revision: 5fb9c5849535c13917c2cf9baaece6ef9693ef27 ) */select @@sessionauto_increment_increment/i+*@set names latin1/y++@set character_set_results  null/i+@set autocommit1/[+-@set sql_modestrict_trans_tables/d+@show full tables from `test\_test` like %/9+/@4+0@^c31 packets captured62 packets received by filter0 packets dropped by kernel```the sql ""show full tables from `test\_test` like %"" can not execute at mysql server for me``` textmysql> show full tables from `test\_test` like %1049 - unknown database test\_test```and i use idea ide  to debug ![- 2015 11 20 - 18 24 23]( || ``` bash$ docker run --name mariadb -e mysql_root_passwordmariadb -e mysql_databasemariadb -e mysql_usermariadb -e mysql_passwordmariadb -p 3306:3306 -d mariadb table creatin$ echo show tables |  mysql -p 3306 -u mariadb -h 192168093 -p mariadbtables_in_mariadbtest_table$ echo show variables like ""%version%"" |  mysql -p 3306 -u mariadb -h 192168093 -p mariadbenter password: variable_name   valueinnodb_version  5626-740protocol_version        10slave_type_conversions  version 10022-mariadb-1~jessieversion_comment mariadborg binary distributionversion_compile_machine x86_64version_compile_os      debian-linux-gnuversion_malloc_library  bundled jemalloc$ cat catalog/mariadbproperties connectornamemysqlconnection-urljdbc //192168093connection-usermariadbconnection-passwordmariadb$ echo select * from mariadbmariadbtest_table | presto-cli --server localhost:8080presto> select * from mariadbmariadbtest_table 1 --- 1 (1 row)query 20151120_140747_00014_9tyku finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 0b] [19 rows/s 0b/s]presto> $ echo select * from test_table |  mysql -p 3306 -u mariadb -h 192168093 -p mariadbenter password: 11```test with a table containing `_` worked  / i will try with database now || ``` bash$ echo select * from test_table |  mysql -p 3306 -u mariadb -h 192168093 -p test_databaseenter password: 22$ echo select * from mariadbtest_databasetest_table | presto-cli --server localhost:8080presto> select * from mariadbtest_databasetest_tablequery 20151120_141748_00015_9tyku failed: line 1  table mariadbtest_databasetest_table does not existselect * from mariadbtest_databasetest_tablepresto> $ echo show schemas from mariadb | presto-cli --server localhost:8080presto> show schemas from mariadb       schema       -------------------- information_schema  mariadb             test_database      (3 rows)query 20151120_141815_00016_9tyku finished 1 nodesplits: 2 total 2 done (10000%)0:00 [3 rows 57b] [75 rows/s 14kb/s]presto> $ echo show tables from mariadbtest_database | presto-cli --server localhost:8080presto> show tables from mariadbtest_database table -------(0 rows)query 20151120_141836_00017_9tyku finished 1 nodesplits: 2 total 2 done (10000%)0:00 [0 rows 0b] [0 rows/s 0b/s]presto> ```ok i reproduced it when a database contains `_` then i am not able to list its tables || @sunli1223 i have just posted a pull request #4006 it is very similar to what you suggested can you check if it fixes your problem? || @kokosing  yesits worked for methank you || @kokosing @sunli1223 great job thank you two : ) || i was running queries in postgresql and noticed that postgresql also suffers from this even if there are tables in pg_catalog schema in postgresql ""show tables"" command returns zero tables || regarding similar behaviour for postgres connector i was unable to reproduce it so i suspect it is totally different issue i put underscore in database schema and table name and still i was able to access them_presto_```presto> select * from postgrestest_schematest_table2 t ---(0 rows)query 20151127_073927_00004_ju4bn finished 1 nodesplits: 2 total 2 done (10000%)0:00 [0 rows 0b] [0 rows/s 0b/s]presto> show tables from postgrestest_schema    table    ------------- test_table2 (1 row)query 20151127_073936_00005_ju4bn finished 1 nodesplits: 2 total 2 done (10000%)0:00 [1 rows 40b] [8 rows/s 335b/s]presto>```_connector_``` bash$ cat presto-main/etc/catalog/postgresproperties connectornamepostgresqlconnection-urljdbc //localhost:5432/test_databaseconnection-userpostgresconnection-passwordpostgres``` || postgres seems good in our environment || as noted by @kokosing  postgre case related to pg_catalog is unrelated to this ""_"" issue || fix landed in the master 0128 release should not suffer for this any longer || presto-server-0139 still have this problem create database in mysql:```create database tutorial_1use tutorial_1 create table users (userid varchar(15) gender char(1) age smallintcountry varchar(50) sign_up varchar(50))presto> show tables from mysqltutorial_1 table -------(0 rows)query 20160301_082814_00005_fjdbm finished 2 nodessplits: 2 total 2 done (10000%)0:00 [0 rows 0b] [0 rows/s 0b/s]``` || i am also facing same issue database - retail5mtables - item sales store online_sales sales_testpresto is not able to read this metadata please help( || ";;;;0;1;;
3763;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8;;0;1x: combinelatestdelayerror;this pr exposes the `delayerror` option in `combinelatest` as `combinelatestdelayerror`(note that we have convenience overloads with 2-9 sources that could also use an overload but that just expands the api surface drastically);:+1: (im starting feeling bad for guy who asked for map with indexes since his request we added so many overloads of other operators…) ||  ;;;;1;1;1x: combinelatestdelayerror;
3764;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that we generate a non-empty javadoc jar for guava-gwt.  without it  we get an error during sonatype deployment:   missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   i hacked around this on the github release branch for 28.2 by reenabling javadoc:   but as you may recall from cl 276327335  we re soon going to have no classes to generate javadoc for (after we remove gwt-rpc support). so even with javadoc generation enabled  we d end up with no jar.  to ensure that we get a jar  i ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> valuegraph: support incidentedgeorder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> immutablevaluegraph: support incidentedgeorder=stable  relnotes=n/a  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> graph: support stable incidentedgeorder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> add standardimmutableundirectedgraphtest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> suppress guardedby violation in localcache.  this looks like it s just for testing  which i think makes it /probably ok/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d;;0;moe sync 2020-01-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure that we generate a non-empty javadoc jar for guava-gwtwithout it we get an error during sonatype deployment:  missing: no javadoc jar found in folder /com/google/guava/guava-gwt/282-jrei hacked around this on the github release branch for 282 by reenabling javadoc: as you may recall from cl 276327335 were soon going to have no classes to generate javadoc for (after we remove gwt-rpc support) so even with javadoc generation enabled wed end up with no jarto ensure that we get a jar ive introduced a package-private dummy class (and then excluded it from the other steps in which source files are used)80210f266950156ccd1eb56d18af7552f41dd274-------<p> valuegraph: support incidentedgeorderstablef05442beb167e9e7953022983f3885cb219d9968-------<p> immutablevaluegraph: support incidentedgeorderstablerelnotesn/a12b0521095bde73b06c13ccd9558be10cd648d4f-------<p> graph: support stable incidentedgeorder for undirected graphse541ab5ee31f86733a0bfa0caa11f872292f51cd-------<p> add standardimmutableundirectedgraphtest5fddc483ad638b46badddcc44ca0501b9a185c5c-------<p> suppress guardedby violation in localcachethis looks like its just for testing which i think makes it /probably ok/ but feel free to suggest otherwisedb04af06932fe7ff009a7903e44471e945ea057d;;;;;1;1;suppress guardedby violation in localcachethis looks like its just for testing which i think makes it /probably ok/ but feel free to suggest otherwiserelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid288479243;
3764;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that we generate a non-empty javadoc jar for guava-gwt.  without it  we get an error during sonatype deployment:   missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   i hacked around this on the github release branch for 28.2 by reenabling javadoc:   but as you may recall from cl 276327335  we re soon going to have no classes to generate javadoc for (after we remove gwt-rpc support). so even with javadoc generation enabled  we d end up with no jar.  to ensure that we get a jar  i ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> valuegraph: support incidentedgeorder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> immutablevaluegraph: support incidentedgeorder=stable  relnotes=n/a  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> graph: support stable incidentedgeorder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> add standardimmutableundirectedgraphtest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> suppress guardedby violation in localcache.  this looks like it s just for testing  which i think makes it /probably ok/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d;;0;make the cachinghivemetastore use the imetastoreclient  interface instead of directly calling the thrifthivemetastore client;change the cachinghivemetastore to use the imetastoreclient interface instead of directly calling the thrifthivemetastore client this allows for the cachinghivemetastore implementation to use other implementations of the imetastoreclient interface without having to change any codein the cachinghivemetastore implementationcorporate cla completed by amazon;is this a feature request or something you plan to work on? || i sent the pr which youve seen || i will send a new pr with the approach we discussed ||   ||;;;;0;1;;
3764;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that we generate a non-empty javadoc jar for guava-gwt.  without it  we get an error during sonatype deployment:   missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   i hacked around this on the github release branch for 28.2 by reenabling javadoc:   but as you may recall from cl 276327335  we re soon going to have no classes to generate javadoc for (after we remove gwt-rpc support). so even with javadoc generation enabled  we d end up with no jar.  to ensure that we get a jar  i ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> valuegraph: support incidentedgeorder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> immutablevaluegraph: support incidentedgeorder=stable  relnotes=n/a  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> graph: support stable incidentedgeorder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> add standardimmutableundirectedgraphtest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> suppress guardedby violation in localcache.  this looks like it s just for testing  which i think makes it /probably ok/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d;;0;added java6 project using retrolambda;since #3668 was merged we should now be able to build a separate artifact for java 6 while continuing to maintain the main project using java 8 this splits the project into rxjava and rxjava-java6 which compiles the same source code using retrolambda and uses the animalsniffer plugin to ensure that we are not inadvertently using apis introduced after java 6;"i dont think its worth it rxjava 2x will be java 6 based and the stream-api interoperation has to go into a separate project or just use somebody elses stream -> publisher wrapper || vote for closing as unnecessary rxjava 2x targets java 6 and we can live with the small inconvenience of using inner classes || @akarnokd @artem-zinnatullin: im not sure if it is only for convenience wouldnt there be a performance improvement by being able to use invoke dynamic internally?@rdegnan: would it publish the jvm version in the classifier part of the artifact (rxjava-200-java8jar)? || most or probably all use cases for `invokedynamic` in rxjava will be lambdas such usage of `invokedynamic` is currently implemented (in the hotspot at least afaik) pretty much the same as compiling to anonymous class but at runtime: both from performance point of view and implementation (afaik it generates same anonymous class but at runtime)(afaik) `invokedynamic` gives noticeable performance improvements for cases when you need to do some dynamic dispatch widely used in dynamic jvm languages like groovy but i dont think we need it in rxjava// will try to invite some engineers with better knowledge of jvm/jdk to discussion || internally we have many context-capturing inner classes so i think lambdas would end up as object instances anyway and the runtime jit is mostly capable of inlining through regular inner classes || @akarnokd could you try running your jmh test suite with java6 and java8? || we can set it up to use classifiers that would be better — right now it’s just appending ‘-java6’ to the namein addition to removing thousands of lines of java boilerplate i think there are advantages to having a build that targets java 8 in addition to a build that targets java 6 via retrolambda one problem is that methods like blockingobservableforeach are inconvenient to use in java 8 because blockingobservable also inherits foreach(javautilfunctionconsumer) from iterable so using a lambda is not possible because it is ambiguous whether it should implement javautilfunctionconsumer or ioreactivexfunctionsconsumer in the java 8 build ioreactivexfunctionsconsumer extends javautilfunctionconsumer so this is not an issue in addition we would be able to take advantage of things like default methods on ioreactivexfunctions\* which can make functional programming in java a lot more convenient (see   also curious about the performance improvement in practice though i’m not sure which perf test would best reflect the difference> on mar 23 2016 at 4:13 pm george campbell notifications@githubcom wrote:> > @akarnokd  @artem-zinnatullin  im not sure if it is only for convenience wouldnt there be a performance improvement by being able to use invoke dynamic internally?> > @rdegnan  would it publish the jvm version in the classifier part of the artifact (rxjava-200-java8jar)?> > —> you are receiving this because you were mentioned> reply to this email directly or view it on github  || those sound like binary incompatible features between the hypotheticalclassified artifacts which would destroy the rx ecosystems crossover withandroid rendering the elaborate setup mostly meaninglesson wed mar 23 2016 7:44 pm ryland degnan notifications@githubcomwrote:> we can set it up to use classifiers that would be better — right now it’s> just appending ‘-java6’ to the name> > in addition to removing thousands of lines of java boilerplate i think> there are advantages to having a build that targets java 8 in addition to a> build that targets java 6 via retrolambda one problem is that methods like> blockingobservableforeach are inconvenient to use in java 8 because> blockingobservable also inherits foreach(javautilfunctionconsumer) from> iterable so using a lambda is not possible because it is ambiguous whether> it should implement javautilfunctionconsumer or> ioreactivexfunctionsconsumer in the java 8 build> ioreactivexfunctionsconsumer extends javautilfunctionconsumer so this> is not an issue in addition we would be able to take advantage of things> like default methods on ioreactivexfunctions\* which can make functional> programming in java a lot more convenient (see>  <>  > i’m also curious about the performance improvement in practice though i’m> not sure which perf test would best reflect the difference> > > on mar 23 2016 at 4:13 pm george campbell notifications@githubcom> > wrote:> > > > @akarnokd  @artem-zinnatullin <> >  im not sure if it is only for> > convenience wouldnt there be a performance improvement by being able to> > use invoke dynamic internally?> > > > @rdegnan  would it publish the jvm version> > in the classifier part of the artifact (rxjava-200-java8jar)?> > > > —> > you are receiving this because you were mentioned> > reply to this email directly or view it on github <> >  > —> you are receiving this because you are subscribed to this thread> > reply to this email directly or view it on github>  || sorry i dont have the capacity to experiment with various runtime versions right now most inner classes get instantiated during the assembly time thus youd only see differences with trivial functions on short sequencesin addition 2x started out as a native java 8 code and i didnt really need any java 8 features inside the operators it was more of a convenience in unit tests but eclipse can turn a lambda into an inner class in a jdk 6 targeted project most of the time`blockingobservableforeach` could be renamed to something non-conflicting but i think who uses `blockingobservable` should pay the price of manual casting to disambiguate || @jakewharton the purpose of this is to have a single source code that generates 2 different artifacts android users would (by default) get the java6 compatible version for those who want to use the java8 version they could change the dependency to point to java8 classifier @akarnokd you want to close this pr without looking at performance metrics?  || @stealthcode but how other libraries will depend on rxjava then if we will have 2 artifacts…? || right the artifacts need to be binary compatible for libraries to workagainst both and if binary compatibility is broken theres no point inmaking two artifacts because they effectively become two separateincompatible librarieson wed mar 23 2016 8:06 pm artem zinnatullin notifications@githubcomwrote:> @stealthcode  but how other libraries> will depend on rxjava then if we will have 2 artifacts…?> > —> you are receiving this because you were mentioned> > reply to this email directly or view it on github>  || @artem-zinnatullin here is a gradle example of how dependencies would be expressed java6 project buildgradle``` groovycompile ioreactivex 112 // java 16 compatible```java8 project buildgradle``` groovycompile ioreactivex 112:jdk18 // java 18 compatible// alternatecompile group: ioreactivex name: rxjava version: 112 classifier: jdk18``` || @jakewharton if a library depends on the rxjava java8 version then its runtime should be 18 and thus all usages of that library should also be running on 18 why would a library need to be binary compatible with both versions?  || @stealthcode please clarify if end user project will be able to specify which rxjava artifact itll need: jdk8 or jdk6 even if some library that it depends on needs artifact with another `classifier` (until theyre binary compatible of course) example: - `lib1` depends on `rxjava-2-jdk8`- `proj1` depends on `rxjava-2-jdk6` and `lib1` || @artem-zinnatullin in that situation the build would include both artifacts on the classpath and `proj1` would of course not compile so as an owner of `proj1` it would not make sense to use a library designed for use with java8 however ultimately its up to the library owner if they chose to depend on the binary incompatible version of rxjava imo a library author in the public domain should publish their artifact building against the standard 16 compatible rxjava or if they really want to they could publish 2 versions with a classifier or separate artifacts however if you can predict that all users of your library specifies `targetcompatibility  18` then the library author could make that decision safely eg a library for consumption in a companies infrastructure where they know that all consuming projects will be running on java8 could safely publish with a dependency on the `jdk18` classifier || retrofit needs to be compatible with both because it works on both androidand java 8 along with hundreds of other libraries targeting bothon wed mar 23 2016 9:03 pm aaron tull notifications@githubcom wrote:> @artem-zinnatullin  in that> situation the build would include both artifacts on the classpath and> proj1 would of course not compile so as an owner of proj1 it would not> make sense to use a library designed for use with java8 however ultimately> its up to the library owner if they chose to depend on the binary> incompatible version of rxjava imo a library author in the public domain> should publish their artifact building against the standard 16 compatible> rxjava or if they really want to they could publish 2 versions with a> classifier or separate artifacts> > however if you can predict that all users of your library specifies targetcompatibility>  18 then the library author could make that decision safely eg a> library for consumption in a companies infrastructure where they know that> all consuming projects will be running on java8 could safely publish with a> dependency on the jdk18 classifier> > —> you are receiving this because you were mentioned> > reply to this email directly or view it on github>  || you actually are actively making things worse by using the same packagename and maven coordinates for two binary incompatible artifacts if youare breaking binary compatibility which i am violently against then changethe package name and artifactidon wed mar 23 2016 9:12 pm jake wharton jakewharton@gmailcom wrote:> retrofit needs to be compatible with both because it works on both android> and java 8 along with hundreds of other libraries targeting both> > on wed mar 23 2016 9:03 pm aaron tull notifications@githubcom wrote:> > > @artem-zinnatullin  in that> > situation the build would include both artifacts on the classpath and> > proj1 would of course not compile so as an owner of proj1 it would not> > make sense to use a library designed for use with java8 however ultimately> > its up to the library owner if they chose to depend on the binary> > incompatible version of rxjava imo a library author in the public domain> > should publish their artifact building against the standard 16 compatible> > rxjava or if they really want to they could publish 2 versions with a> > classifier or separate artifacts> > > > however if you can predict that all users of your library specifies targetcompatibility> >  18 then the library author could make that decision safely eg a> > library for consumption in a companies infrastructure where they know that> > all consuming projects will be running on java8 could safely publish with a> > dependency on the jdk18 classifier> > > > —> > you are receiving this because you were mentioned> > > > reply to this email directly or view it on github> >  || another option which would avoid having to use classifiers is to build rxandroid as a subproject alongside rxjava as i have done here it would compile the same sourceset plus the additional code that currently lives in the rxandroid repo targeting java 6 rxandroid would have no dependency on rxjava the artifacts would be different and there is no reason people would want both we would also know instantly if any changes to rxjava break android> on mar 23 2016 at 6:16 pm jake wharton notifications@githubcom wrote:> > you actually are actively making things worse by using the same package> name and maven coordinates for two binary incompatible artifacts if you> are breaking binary compatibility which i am violently against then change> the package name and artifactid> > on wed mar 23 2016 9:12 pm jake wharton jakewharton@gmailcom wrote:> > > retrofit needs to be compatible with both because it works on both android> > and java 8 along with hundreds of other libraries targeting both> > > > on wed mar 23 2016 9:03 pm aaron tull notifications@githubcom wrote:> > > > > @artem-zinnatullin  in that> > > situation the build would include both artifacts on the classpath and> > > proj1 would of course not compile so as an owner of proj1 it would not> > > make sense to use a library designed for use with java8 however ultimately> > > its up to the library owner if they chose to depend on the binary> > > incompatible version of rxjava imo a library author in the public domain> > > should publish their artifact building against the standard 16 compatible> > > rxjava or if they really want to they could publish 2 versions with a> > > classifier or separate artifacts> > > > > > however if you can predict that all users of your library specifies targetcompatibility> > >  18 then the library author could make that decision safely eg a> > > library for consumption in a companies infrastructure where they know that> > > all consuming projects will be running on java8 could safely publish with a> > > dependency on the jdk18 classifier> > > > > > —> > > you are receiving this because you were mentioned> > > > > > reply to this email directly or view it on github> > >  > > > —> > you are receiving this because you were mentioned> > reply to this email directly or view it on github  || > the artifacts would be different and there is no reason people would want bothexcept again the libraries that support both youve basically just pushed the problem and burden of making two versions of every library or having two integrations on the hundreds of libraries that want to support boththis isnt acceptable || @stealthcode then it ill basically kill development of generic libraries around rxjava that target both java 6 and java 6+ like `rxjava-async-util` `retrofit`  many db drivers and so on whole community will be confused and everybody will blame us for such decision im sorry but im voting against splitting library into two artifacts  || im not an expert on how and when lambdas are converted to instances but id expect whenever a lambda ends up in a field it has to be instantiatedi did a search for ""new function"" and they are only in the base classes mostly part of the convenience overloads:**flowable**:- `zip(publisher<publisher>> function)` - depends on an outer parameter- `cast(class)` - alias for map with function that casts- `concatmapiterable(function)` - delegates to `concatmap` with an inner function depending on the outer parameter- `delay(function)` uses flatmap and complex inner function depending on the outer parameter + some inner capture of a variable- `delaysubscription(time)` uses flatmap and a capturing lambda for the outer `this`- `delaysubscription(flowable)` similar to the previous- `flatmap(function bifunction)` two functions depending on different levels one up- `flatmapiterable(function)` delegates to `flatmap` with an inner function depending on the outer parameter- `onerrorresumenext(flowable)` uses the function variant with a function returning the flowable- `onerrorreturnvalue` uses `onerrorreturn` with a function returning the value- `onexceptionresumenext(flowable)` uses the function variant with a function returning the flowable- `repeatwhen` one function depending on the handler and a deeper function which is constant (can be factored out)- `replay(function int scheduler)` calls another replay with functions capturing the outer parameters- `repeatwhen` a function depending on the outer parameter and two pure functions (can be factored out)- `timestamp` function depends on the outer parameters- `tomultimap` variants with pure functions (can be factored out)- `tosortedlist(comparator)` with a function depending on the comparator**functions**conversions 2-9 parameter functions to `function<object r>` wrapper that end up in a field**observable**roughly the same as with flowable**single**- `concat` delegates to `concatmap` with a pure function (can be factored out)- `merge` delegates to `flatmap` with a pure function (can be factored out)besides i remember the time when we had all sorts of subprojects and changing some java bits ended up breaking the compilation or tests of the other subprojects with no one around to help fix those it is already cumbersome to keep track the features and tests in both 1x and 2x and i dont want to do more maintenance than necessary i also agree with @jakewharton and @artem-zinnatullin || ive recently read about `invokedynamic` to understand more about the problem and if my understanding is correct here are my thoughts:the main advantage of targeting java 8 (ie bytecode v52) is the ability to use the `invokedynamic` instruction on java 8 the jvm defers the translation of lambdas at runtime (thanks to `invokedynamic`) it can translate the lambda into something like an anonymous class a method reference [or other]( this can lead to more efficient code and save allocationsnote that `invokedynamic` is used in the code that creates the lambda but not where the lambda is invoked most of the usage of `new func*` that i saw in observablejava dont capture anything and would benefit from indyi agree with @jakewharton that if we decide to have to artifacts the binary compatibility must be respected (and tested) otherwise multiple transitive dependencies may cause `nosuchmethodexception`i think that if the build tool is properly setup it shouldnt cause any problem to anyone worst case would be having two transitive dependencies on rxjava 2 one jdk6 and one jdk8 depending on the classpath order the jvm would either load the jdk6 bytecode (and not benefit from indy) or load jdk8 bytecode (and benefit from indy) || > otherwise multiple transitive dependencies may cause `nosuchmethodexception`the artifacts would be based on the same source code i dont think that you could get a `nosuchmethodexception` or a `classnotfoundexception` im also pretty sure that byte code call sites from user code (or library code) to rxjava would not need to recompile if they depended on 18 or 16 for example`proj_library` depends on `rxjava:jdk18``proj1` depends on `rxjava` (the default 16 + retrolambda build) and `proj_library`if `proj1` excluded `rxjava:jdk18` in the build script then both `proj_library` and `proj1` would be running against the 16 compatible code this should still function as the call sites from both should not have to be recompiled  || i strongly feel that there should be a single artifact with java 9 (which is not _that_ far off) we can then use [multi-version jars]( to target java 9+ enhancements on top of the java 6+ base (such as adding support for all the java 8+ and 9+ apis) as for the performance improvements lambdas can offer im pretty certain that if we have code where the perf benefits from a lambda we can stop using anonymous inner classes and define static inner classes or use static functions instead and get the same improvementsif we are ""newing"" up an object such as a `func` then it has instance state and a lambda is not going to dramatically improve anything if at all lambdas are dramatically better than anonymous inner classes when it can be determined that they are static and only get instantiated once and invoked many times  just like we can do manually with statics || thanks for the contributionsince the decision has been made to go for java 6 i dont see any need or value doing java 8 sources and cross-compiling it certainly some unit tests would love the simplified lambda syntax but the ides can usually fix the ""syntax error"" of a lambda expressionjava 9 is a bit far out and until the usual tools get updated i cant comment on how the multi-versioned jars would work (out)what i definitely want is separate id for the 2x lets discuss that further in #3170 || ";;;;0;1;;
3764;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that we generate a non-empty javadoc jar for guava-gwt.  without it  we get an error during sonatype deployment:   missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   i hacked around this on the github release branch for 28.2 by reenabling javadoc:   but as you may recall from cl 276327335  we re soon going to have no classes to generate javadoc for (after we remove gwt-rpc support). so even with javadoc generation enabled  we d end up with no jar.  to ensure that we get a jar  i ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> valuegraph: support incidentedgeorder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> immutablevaluegraph: support incidentedgeorder=stable  relnotes=n/a  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> graph: support stable incidentedgeorder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> add standardimmutableundirectedgraphtest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> suppress guardedby violation in localcache.  this looks like it s just for testing  which i think makes it /probably ok/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d;;3757;added <any file type> to the import file filter dialog;added ** (any file) to the file filter dialog now you can choose any file to import to try to import to your library 3757-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;add ** to the import file filter dialog;from the forum: jabref only allows the import of files with the list of supported file extensionsso as there is now file extension bibtex for bib files import we should add a ** (all file types) filterthe import should then use the automatism (as its now the case for all avaiable import formats);;1;0;add localization;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;0;1x: switchonnextdelayerror and switchmapdelayerror;this pr adds a delayerror version to the `switchonnext` / `switchmap` operators;lgm ;;;;1;1;1x: switchonnextdelayerror and switchmapdelayerror;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;4087;implement drag and drop for maintable;drag and drop functionality-   maintable to group~~-  maintable to maintable (for reodering?useful?)~~ not useful- -   expand group node and children on drag over -   files to maintable - -   add file to entry- -   create new entry from pdf/xmp- -   show merge dialog if entry already exists-  files to entryeditor (mostly pdf)- -  fix folder with filename is created #4087-  files to preview-  `bib` files to maintable -> import-  `bib` files to tabbed pane -> open 4086 fixes #3923 fixes #3258 fixes #4087 current behaviour windows: shift or no modifer on maintable (move) - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>alt</kbd> on maintable: move file to file dir and link (only windows)<kbd>ctrl</kbd> on maintable: copy file to file dir (if not exists)  and linkbib-file dragged to maintable: import contentsxubuntu: no modifier (copy)  - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>shift </kbd> on maintable :  move to file dir preview panel works the same as above except it doesnt handle bib files importbibfile dragged below tab pane/table header -> open bib libray general tab files -> link file -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"cool that you have a look at the dragndrop functionality its indeed one of the major things missing in the new maintablei think there are generally three different scenarios:- source outside of jabref target maintable: this may be a pdf file (-> import as new entry) some string (-> try to parse/import) or a bib file (-> import and if target is not the maintable but the tab pane -> open as new library) - target outside of jabref source maintable: for this a string representation is needed (since no external application can handle bibentries) but im not sure what we should serialize the bibtex code seems like the logical choice but also the preview format (eg dragndrop to email program) or `\cite{key}` (target latex editor) makes sense maybe add a user preference?- target and source are jabref nodes: then it is in general desirable to not serialize the entry but pass it by reference for example drag an entry from the maintable to the group pane one would need the original entry to modify the `groups` field not sure if we need dragndrop from maintable to maintable (whats the use for this?) for the implementation of these local operations by reference i would use the following code as a starting point:  (slightly modified to use optionals instead of nulls) || i implemented drag and drop a while ago for the linked files editor so i know now to add serialization drag and drop from and to maintable could be used for reordering entries but not sure if that makes sense i just implemented it to test if it works in general  || i agree with everything that @tobiasdiez writes but just for the record: turning `bibentry` serializable is trivial its just a marker interface and there is no functionality to add just a few attributes should be marked as `transient` and thats it nevertheless i think its better to serialize the bibtex string representation || @lenhard  in theory es but in practice i now stumbled across the problem (again) that those javafx observablemaps/list/sets etc cant be serialized so i tried adding custom readobject/writeobject methods but still cant serialize it so i would prefer sticking with the parser/serializationideally we would have a method which is the exact opposite of the serializeall() - eg deserialzeall() without having to use the parser overhead or maybe a simple tostring() - reverse and i come to the conclusion that this is not the best idea and we should use some trans  || yes the javafx properties are never serializable because you cannot serialize listeners (they same applies to the event bus) but as i argued above the best is to never serialize any java object if dragndrop happens between nodes in jabref itself just store a reference to the objects that are dragged   || okay i will try with that localclipboard/dragboard implementationrefs #121  || @siedlerchr i added ""`bib` files to maintable - current behavior: dropping to tab bar works but that just reorders the tab bar but does not open the `bib` file"" || ill take a look currently i only check for files in maintable so when i drop a bib file to the maintabe it should openn in a new tab? || yes :) || if you drop onto the maintable it should import the content of the bib file into the current database if the drop target is the tab bar it should open the bib file as a new tab || @koppor  you might want to check out the updated description in the issue and test the current version  in windows the default drag and drop  is move which also applies when using the shift key so both result in the same event || it would be nice to give visual feedback about the drop action:  (instead of changing the color in code add/remove a pseudo-class and style it using css) || the following two issues might be relevant to this as well: || @tobiasdiez  the main feedback i wanted was about the functionality of the modifiers and the options regarding the log statements of course they will be deleted in final commit regarding the local dragboard  the current implementation is essentially a static guaranteed thread safe singleton i see no advantage over initializing this as a static field which would suffer from potential thread safety on initialization especially in the drag and drop functionality  || as we try to get ride of all singletons and static fields in `globals` both solutions are not perfect but using a static field and dependency injection as much as possible should be easier to refactor than a singleton that is used everywhere directly threading should not be an issue as every drag & drop event should be thrown in the javafx thread anyway || i tested and updated the results with my observance under xubuntu no modifier under ubuntu equls transfermodecopyshift on xubuntu:  transfermodemovewindows: no modifier and or shift: transfermodemovectrl modifier : transfermode copy || @tobiasdiez  i still dont really get how i the newdroppedfilehandler could be changed because they all act on dropped files either they import the entries or if no entries are found the file is added so i need both methods or if i extract the latter ones to a new class i still would need to call the methods for moving files maybe you have a better idea || my proposal was to split it as follows:- `entryfilelinker`: provides a bunch of methods that allow to move/copy/link files to a given bibentry (which was passed as a constructor argument)- `databasefilelinker`: allows to add files to a given database (passed as constructor argument) and generate bibentries out of the content you are of course allowed to reuse `entryfilelinker` if this is convenient- gui stuff for the dialogs(the names for the classes are not very good) the first two classes should reside in logic but maybe i miss something why such a splitting is not possible  || thanks for the quick follow-up merging since im somewhat trigger happy right now -)  || ";when drag and drop to copy pdf folder is created;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> jabref 43-dev--snapshot--2018-05-28--master--bf7fb5168linux 41447-1-manjaro amd64 manjaro gnome edition (17110)java 180_172<!-- hint: if you use a development version (available at  ensure that you use the latest one -->when i drop a pdf file on a reference and attach it a folder is attached with the chosen name instead of the file this only happens when choosing to copy the pdf moving works as expectedsteps to reproduce:1 drag pdf to reference from nautilus 2 choose ""only attach pdf""3 choose ""copy file to directory"" and accept the suggested renaming4 accept the following popup5 there is a folder in the default pdf location with the name of the pdf file in jabjref it looks like a pdf is attached but opening it results in an error as expected<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```21 07156 [jabref cachedthreadpool] error orgjabreflogicutiliofileutil - copying files failedjavaniofilefilesystemexception: /mnt/3tb/cloud/username/work/academicmaterial/jabref/goldgeier2001pdf: is a directory	at sunniofsunixexceptiontranslatetoioexception(unixexceptionjava:91) ~[?:180_172]	at sunniofsunixexceptionrethrowasioexception(unixexceptionjava:102) ~[?:180_172]	at sunniofsunixexceptionrethrowasioexception(unixexceptionjava:107) ~[?:180_172]	at sunniofsunixfilesystemprovidernewbytechannel(unixfilesystemproviderjava:214) ~[?:180_172]	at javaniofilespifilesystemprovidernewoutputstream(filesystemproviderjava:434) ~[?:180_172]	at javaniofilefilesnewoutputstream(filesjava:216) ~[?:180_172]	at javaniofilefileswrite(filesjava:3292) ~[?:180_172]	at orgjabreflogicutiliofileutilcopyfile(fileutiljava:164) ~[jabrefjar:?]	at orgjabrefguiexternalfilesdroppedfilehandlerdocopy(droppedfilehandlerjava:559) ~[jabrefjar:?]	at orgjabrefguiexternalfilesdroppedfilehandlerlinkpdftoentry(droppedfilehandlerjava:207) ~[jabrefjar:?]	at orgjabrefguiexternalfilesdroppedfilehandlerlinkpdftoentry(droppedfilehandlerjava:174) ~[jabrefjar:?]	at orgjabrefpdfimportpdfimporterimportpdffilesinternal(pdfimporterjava:134) ~[jabrefjar:?]	at orgjabrefpdfimportpdfimporterimportpdffiles(pdfimporterjava:88) ~[jabrefjar:?]	at orgjabrefguigroupsentrytabletransferhandlerlambda$handledraggedfiles$0(entrytabletransferhandlerjava:306) ~[jabrefjar:?]	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149) [?:180_172]	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624) [?:180_172]	at javalangthreadrun(threadjava:748) [?:180_172]  ```</details>";"yes we just noticed the same issuewhen you move the file then everything works as expected when you copy the file then the file is not actually moved but a folder with the file name is created || thanks for your report i will take a look at that as we are working on an improvement of the drag and drop about files || refs #3765  || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || i just installed the dev version jabref_windows-x64_5_0-dev--snapshot--2018-08-20--master--cf3fab884 and tried to drag and drop a pdf file onto a reference drag and drop does not work and so i couldnt test if the actual issue with the created folder when you copy a pdf file is resolved || where exactly did you drop the pdf file?note that the default behavior of jabref changed dropping on the main table will try to create an entry from the pdfdragging on the entry preview or general tab should move the file to the file dir || hi dropping on the entry editor works now again || heyi am using jabref 431 and the problem still exists as described it appears only when i use the copy optionjabref 431ubuntu 1404linux 440-131-generic amd64 java 180_181 || @teertinker  please use the latest development version 5x  || i am sorry for commenting on such an old thread but i have the same problem version 43 creates an empty folder and after downloading the new (development) version 50 i am not able anymore to create a new entry just by drag and dropive read this but i dont know what is the ""main table"" apparently: > dropping on the main table will try to create an entry from the pdfdragging on the entry preview or general tab should move the file to the file dir where should i drop the file? it only accept it on an existing article entries and it merely links that entry with a copy created in the jabref folder || ";1;0;fix build;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;4086;implement drag and drop for maintable;drag and drop functionality-   maintable to group~~-  maintable to maintable (for reodering?useful?)~~ not useful- -   expand group node and children on drag over -   files to maintable - -   add file to entry- -   create new entry from pdf/xmp- -   show merge dialog if entry already exists-  files to entryeditor (mostly pdf)- -  fix folder with filename is created #4087-  files to preview-  `bib` files to maintable -> import-  `bib` files to tabbed pane -> open 4086 fixes #3923 fixes #3258 fixes #4087 current behaviour windows: shift or no modifer on maintable (move) - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>alt</kbd> on maintable: move file to file dir and link (only windows)<kbd>ctrl</kbd> on maintable: copy file to file dir (if not exists)  and linkbib-file dragged to maintable: import contentsxubuntu: no modifier (copy)  - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>shift </kbd> on maintable :  move to file dir preview panel works the same as above except it doesnt handle bib files importbibfile dragged below tab pane/table header -> open bib libray general tab files -> link file -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"cool that you have a look at the dragndrop functionality its indeed one of the major things missing in the new maintablei think there are generally three different scenarios:- source outside of jabref target maintable: this may be a pdf file (-> import as new entry) some string (-> try to parse/import) or a bib file (-> import and if target is not the maintable but the tab pane -> open as new library) - target outside of jabref source maintable: for this a string representation is needed (since no external application can handle bibentries) but im not sure what we should serialize the bibtex code seems like the logical choice but also the preview format (eg dragndrop to email program) or `\cite{key}` (target latex editor) makes sense maybe add a user preference?- target and source are jabref nodes: then it is in general desirable to not serialize the entry but pass it by reference for example drag an entry from the maintable to the group pane one would need the original entry to modify the `groups` field not sure if we need dragndrop from maintable to maintable (whats the use for this?) for the implementation of these local operations by reference i would use the following code as a starting point:  (slightly modified to use optionals instead of nulls) || i implemented drag and drop a while ago for the linked files editor so i know now to add serialization drag and drop from and to maintable could be used for reordering entries but not sure if that makes sense i just implemented it to test if it works in general  || i agree with everything that @tobiasdiez writes but just for the record: turning `bibentry` serializable is trivial its just a marker interface and there is no functionality to add just a few attributes should be marked as `transient` and thats it nevertheless i think its better to serialize the bibtex string representation || @lenhard  in theory es but in practice i now stumbled across the problem (again) that those javafx observablemaps/list/sets etc cant be serialized so i tried adding custom readobject/writeobject methods but still cant serialize it so i would prefer sticking with the parser/serializationideally we would have a method which is the exact opposite of the serializeall() - eg deserialzeall() without having to use the parser overhead or maybe a simple tostring() - reverse and i come to the conclusion that this is not the best idea and we should use some trans  || yes the javafx properties are never serializable because you cannot serialize listeners (they same applies to the event bus) but as i argued above the best is to never serialize any java object if dragndrop happens between nodes in jabref itself just store a reference to the objects that are dragged   || okay i will try with that localclipboard/dragboard implementationrefs #121  || @siedlerchr i added ""`bib` files to maintable - current behavior: dropping to tab bar works but that just reorders the tab bar but does not open the `bib` file"" || ill take a look currently i only check for files in maintable so when i drop a bib file to the maintabe it should openn in a new tab? || yes :) || if you drop onto the maintable it should import the content of the bib file into the current database if the drop target is the tab bar it should open the bib file as a new tab || @koppor  you might want to check out the updated description in the issue and test the current version  in windows the default drag and drop  is move which also applies when using the shift key so both result in the same event || it would be nice to give visual feedback about the drop action:  (instead of changing the color in code add/remove a pseudo-class and style it using css) || the following two issues might be relevant to this as well: || @tobiasdiez  the main feedback i wanted was about the functionality of the modifiers and the options regarding the log statements of course they will be deleted in final commit regarding the local dragboard  the current implementation is essentially a static guaranteed thread safe singleton i see no advantage over initializing this as a static field which would suffer from potential thread safety on initialization especially in the drag and drop functionality  || as we try to get ride of all singletons and static fields in `globals` both solutions are not perfect but using a static field and dependency injection as much as possible should be easier to refactor than a singleton that is used everywhere directly threading should not be an issue as every drag & drop event should be thrown in the javafx thread anyway || i tested and updated the results with my observance under xubuntu no modifier under ubuntu equls transfermodecopyshift on xubuntu:  transfermodemovewindows: no modifier and or shift: transfermodemovectrl modifier : transfermode copy || @tobiasdiez  i still dont really get how i the newdroppedfilehandler could be changed because they all act on dropped files either they import the entries or if no entries are found the file is added so i need both methods or if i extract the latter ones to a new class i still would need to call the methods for moving files maybe you have a better idea || my proposal was to split it as follows:- `entryfilelinker`: provides a bunch of methods that allow to move/copy/link files to a given bibentry (which was passed as a constructor argument)- `databasefilelinker`: allows to add files to a given database (passed as constructor argument) and generate bibentries out of the content you are of course allowed to reuse `entryfilelinker` if this is convenient- gui stuff for the dialogs(the names for the classes are not very good) the first two classes should reside in logic but maybe i miss something why such a splitting is not possible  || thanks for the quick follow-up merging since im somewhat trigger happy right now -)  || ";timestamp field is not set when dragndrop is used to import files;"i am using jabref version 44-dev--snapshot--2018-06-01--master--26bb54598 on ubuntu 1604steps to reproduce:1 enable the preferences/general/mark new entries with addition date (i am using `yyyy-mm-dd hh:mm` as format but my guess is thats not relevant) additionally mark the overwrite option2 dragndrop a file onto the entry table and let the importer do its work3 notice a new entry that has no `timestamp` field set and mourn(i have not tested a manual import via the file menu yet and have to run)also i would love to see the addition marking enabled by default and the default format to include a time in addition to the date they work way better than the ""marking"" options to recognize newly added references cheers";"@siedlerchr do you see the possibility to fix this as part of #3765 ? || sounds more like an importer feature/problem for me || fwiw i have just tested another import via `file/import into current library` and that creates the timestamp just fine (after displaying an import selection dialog that is not visible for d&d operations) i am a n00b jabref user but from my perspective these two action should trigger the same behavior imho (maybe not if the drop happens over a preexisting entry but certainly when dropped at the bottom of the table where it is ""empty"") || okay thanks for your feedback! i will take a look at that  || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || ";1;0;fix build;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;3923;implement drag and drop for maintable;drag and drop functionality-   maintable to group~~-  maintable to maintable (for reodering?useful?)~~ not useful- -   expand group node and children on drag over -   files to maintable - -   add file to entry- -   create new entry from pdf/xmp- -   show merge dialog if entry already exists-  files to entryeditor (mostly pdf)- -  fix folder with filename is created #4087-  files to preview-  `bib` files to maintable -> import-  `bib` files to tabbed pane -> open 4086 fixes #3923 fixes #3258 fixes #4087 current behaviour windows: shift or no modifer on maintable (move) - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>alt</kbd> on maintable: move file to file dir and link (only windows)<kbd>ctrl</kbd> on maintable: copy file to file dir (if not exists)  and linkbib-file dragged to maintable: import contentsxubuntu: no modifier (copy)  - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>shift </kbd> on maintable :  move to file dir preview panel works the same as above except it doesnt handle bib files importbibfile dragged below tab pane/table header -> open bib libray general tab files -> link file -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"cool that you have a look at the dragndrop functionality its indeed one of the major things missing in the new maintablei think there are generally three different scenarios:- source outside of jabref target maintable: this may be a pdf file (-> import as new entry) some string (-> try to parse/import) or a bib file (-> import and if target is not the maintable but the tab pane -> open as new library) - target outside of jabref source maintable: for this a string representation is needed (since no external application can handle bibentries) but im not sure what we should serialize the bibtex code seems like the logical choice but also the preview format (eg dragndrop to email program) or `\cite{key}` (target latex editor) makes sense maybe add a user preference?- target and source are jabref nodes: then it is in general desirable to not serialize the entry but pass it by reference for example drag an entry from the maintable to the group pane one would need the original entry to modify the `groups` field not sure if we need dragndrop from maintable to maintable (whats the use for this?) for the implementation of these local operations by reference i would use the following code as a starting point:  (slightly modified to use optionals instead of nulls) || i implemented drag and drop a while ago for the linked files editor so i know now to add serialization drag and drop from and to maintable could be used for reordering entries but not sure if that makes sense i just implemented it to test if it works in general  || i agree with everything that @tobiasdiez writes but just for the record: turning `bibentry` serializable is trivial its just a marker interface and there is no functionality to add just a few attributes should be marked as `transient` and thats it nevertheless i think its better to serialize the bibtex string representation || @lenhard  in theory es but in practice i now stumbled across the problem (again) that those javafx observablemaps/list/sets etc cant be serialized so i tried adding custom readobject/writeobject methods but still cant serialize it so i would prefer sticking with the parser/serializationideally we would have a method which is the exact opposite of the serializeall() - eg deserialzeall() without having to use the parser overhead or maybe a simple tostring() - reverse and i come to the conclusion that this is not the best idea and we should use some trans  || yes the javafx properties are never serializable because you cannot serialize listeners (they same applies to the event bus) but as i argued above the best is to never serialize any java object if dragndrop happens between nodes in jabref itself just store a reference to the objects that are dragged   || okay i will try with that localclipboard/dragboard implementationrefs #121  || @siedlerchr i added ""`bib` files to maintable - current behavior: dropping to tab bar works but that just reorders the tab bar but does not open the `bib` file"" || ill take a look currently i only check for files in maintable so when i drop a bib file to the maintabe it should openn in a new tab? || yes :) || if you drop onto the maintable it should import the content of the bib file into the current database if the drop target is the tab bar it should open the bib file as a new tab || @koppor  you might want to check out the updated description in the issue and test the current version  in windows the default drag and drop  is move which also applies when using the shift key so both result in the same event || it would be nice to give visual feedback about the drop action:  (instead of changing the color in code add/remove a pseudo-class and style it using css) || the following two issues might be relevant to this as well: || @tobiasdiez  the main feedback i wanted was about the functionality of the modifiers and the options regarding the log statements of course they will be deleted in final commit regarding the local dragboard  the current implementation is essentially a static guaranteed thread safe singleton i see no advantage over initializing this as a static field which would suffer from potential thread safety on initialization especially in the drag and drop functionality  || as we try to get ride of all singletons and static fields in `globals` both solutions are not perfect but using a static field and dependency injection as much as possible should be easier to refactor than a singleton that is used everywhere directly threading should not be an issue as every drag & drop event should be thrown in the javafx thread anyway || i tested and updated the results with my observance under xubuntu no modifier under ubuntu equls transfermodecopyshift on xubuntu:  transfermodemovewindows: no modifier and or shift: transfermodemovectrl modifier : transfermode copy || @tobiasdiez  i still dont really get how i the newdroppedfilehandler could be changed because they all act on dropped files either they import the entries or if no entries are found the file is added so i need both methods or if i extract the latter ones to a new class i still would need to call the methods for moving files maybe you have a better idea || my proposal was to split it as follows:- `entryfilelinker`: provides a bunch of methods that allow to move/copy/link files to a given bibentry (which was passed as a constructor argument)- `databasefilelinker`: allows to add files to a given database (passed as constructor argument) and generate bibentries out of the content you are of course allowed to reuse `entryfilelinker` if this is convenient- gui stuff for the dialogs(the names for the classes are not very good) the first two classes should reside in logic but maybe i miss something why such a splitting is not possible  || thanks for the quick follow-up merging since im somewhat trigger happy right now -)  || ";dropping a pdf onto the file entry in general is inconsistent with standard attach method;- issue persists in current masterjabref version 41 windows 7 java x64 version 8 update 162steps to reproduce:1 drag and drop a pdf onto the file textbox in general for an existing db entry2 the file will be added with the full path in contrast adding the file via right click->attach file will produce an entry with the correct relative path (relative to library properties->general file directory)(https://user-imagesentcom/2142589/38302458-10a681e8-3803-11e8-817f-366b577a9073png);this issue is connected to #121 || hi thanks for the report: i am currently on reworking that feature in  for the new maintable-beta release ( it will be made consistent as suggested in the comment by koppor  || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version ||;1;0;fix build;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;3258;implement drag and drop for maintable;drag and drop functionality-   maintable to group~~-  maintable to maintable (for reodering?useful?)~~ not useful- -   expand group node and children on drag over -   files to maintable - -   add file to entry- -   create new entry from pdf/xmp- -   show merge dialog if entry already exists-  files to entryeditor (mostly pdf)- -  fix folder with filename is created #4087-  files to preview-  `bib` files to maintable -> import-  `bib` files to tabbed pane -> open 4086 fixes #3923 fixes #3258 fixes #4087 current behaviour windows: shift or no modifer on maintable (move) - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>alt</kbd> on maintable: move file to file dir and link (only windows)<kbd>ctrl</kbd> on maintable: copy file to file dir (if not exists)  and linkbib-file dragged to maintable: import contentsxubuntu: no modifier (copy)  - create new entry from xmp content (if pdf)    -    xmp content found: show dialog with content and option to import entry or to create file<kbd>shift </kbd> on maintable :  move to file dir preview panel works the same as above except it doesnt handle bib files importbibfile dragged below tab pane/table header -> open bib libray general tab files -> link file -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"cool that you have a look at the dragndrop functionality its indeed one of the major things missing in the new maintablei think there are generally three different scenarios:- source outside of jabref target maintable: this may be a pdf file (-> import as new entry) some string (-> try to parse/import) or a bib file (-> import and if target is not the maintable but the tab pane -> open as new library) - target outside of jabref source maintable: for this a string representation is needed (since no external application can handle bibentries) but im not sure what we should serialize the bibtex code seems like the logical choice but also the preview format (eg dragndrop to email program) or `\cite{key}` (target latex editor) makes sense maybe add a user preference?- target and source are jabref nodes: then it is in general desirable to not serialize the entry but pass it by reference for example drag an entry from the maintable to the group pane one would need the original entry to modify the `groups` field not sure if we need dragndrop from maintable to maintable (whats the use for this?) for the implementation of these local operations by reference i would use the following code as a starting point:  (slightly modified to use optionals instead of nulls) || i implemented drag and drop a while ago for the linked files editor so i know now to add serialization drag and drop from and to maintable could be used for reordering entries but not sure if that makes sense i just implemented it to test if it works in general  || i agree with everything that @tobiasdiez writes but just for the record: turning `bibentry` serializable is trivial its just a marker interface and there is no functionality to add just a few attributes should be marked as `transient` and thats it nevertheless i think its better to serialize the bibtex string representation || @lenhard  in theory es but in practice i now stumbled across the problem (again) that those javafx observablemaps/list/sets etc cant be serialized so i tried adding custom readobject/writeobject methods but still cant serialize it so i would prefer sticking with the parser/serializationideally we would have a method which is the exact opposite of the serializeall() - eg deserialzeall() without having to use the parser overhead or maybe a simple tostring() - reverse and i come to the conclusion that this is not the best idea and we should use some trans  || yes the javafx properties are never serializable because you cannot serialize listeners (they same applies to the event bus) but as i argued above the best is to never serialize any java object if dragndrop happens between nodes in jabref itself just store a reference to the objects that are dragged   || okay i will try with that localclipboard/dragboard implementationrefs #121  || @siedlerchr i added ""`bib` files to maintable - current behavior: dropping to tab bar works but that just reorders the tab bar but does not open the `bib` file"" || ill take a look currently i only check for files in maintable so when i drop a bib file to the maintabe it should openn in a new tab? || yes :) || if you drop onto the maintable it should import the content of the bib file into the current database if the drop target is the tab bar it should open the bib file as a new tab || @koppor  you might want to check out the updated description in the issue and test the current version  in windows the default drag and drop  is move which also applies when using the shift key so both result in the same event || it would be nice to give visual feedback about the drop action:  (instead of changing the color in code add/remove a pseudo-class and style it using css) || the following two issues might be relevant to this as well: || @tobiasdiez  the main feedback i wanted was about the functionality of the modifiers and the options regarding the log statements of course they will be deleted in final commit regarding the local dragboard  the current implementation is essentially a static guaranteed thread safe singleton i see no advantage over initializing this as a static field which would suffer from potential thread safety on initialization especially in the drag and drop functionality  || as we try to get ride of all singletons and static fields in `globals` both solutions are not perfect but using a static field and dependency injection as much as possible should be easier to refactor than a singleton that is used everywhere directly threading should not be an issue as every drag & drop event should be thrown in the javafx thread anyway || i tested and updated the results with my observance under xubuntu no modifier under ubuntu equls transfermodecopyshift on xubuntu:  transfermodemovewindows: no modifier and or shift: transfermodemovectrl modifier : transfermode copy || @tobiasdiez  i still dont really get how i the newdroppedfilehandler could be changed because they all act on dropped files either they import the entries or if no entries are found the file is added so i need both methods or if i extract the latter ones to a new class i still would need to call the methods for moving files maybe you have a better idea || my proposal was to split it as follows:- `entryfilelinker`: provides a bunch of methods that allow to move/copy/link files to a given bibentry (which was passed as a constructor argument)- `databasefilelinker`: allows to add files to a given database (passed as constructor argument) and generate bibentries out of the content you are of course allowed to reuse `entryfilelinker` if this is convenient- gui stuff for the dialogs(the names for the classes are not very good) the first two classes should reside in logic but maybe i miss something why such a splitting is not possible  || thanks for the quick follow-up merging since im somewhat trigger happy right now -)  || ";40 groups view: no automatic unfold while dragging;using 40 stable on windows 10when i drag a bib-entry/publication over a un-folded group which has sub-groups i would expect (compared to other software) that the group will fold after some seconds automaticlyi would use this future to drag & drop entries to sub-groups which are hidden in un-folded groups;the problem is still there in 431 (win64) || this issue might be related to the same problem that is reported here: || theres already a pr for drag and drop on the maintable which also covers groups would you mind to link this as well? || done:  || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version ||;1;0;fix build;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;0;update 0123 release notes;;;;;;0;1;;
3765;0;1;0;0;0;0;1;1;0;0;1;0;1;1;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f;;3761.0;moe sync 2020-01-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtestaee54682770a3166c231bbfecced91f31c55d32a-------<p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest0aba85dd247e254e10fcd84e7b2940fa0383e14e-------<p> fix off-by-one error in asciidigitsasciidigits initialization37612b27d9f906e18ae1105766d41e0940122ce686a0-------<p> disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`ff0cd947f82d24611e39fb3d86e3d19da4af801f; adding cla:yes label because 2b27d9f906e18ae1105766d41e0940122ce686a0 comes from @perceptron8s pr #3761 ||;fix off-by-one error in asciidigitsasciidigits initialization;`asciidigitsdigit([)` should return -1 instead of 36i changed both loops to consistently use strict inequalities now its clear that there are 10 + 26  36 digits / iterations in totalfortunately this bug doesnt affect anything other than `longstryparse` where it is - by accident - harmless that `longstryparse([ 36)` and `longstryparse(0[ 36)` currently return `null` because of `digit > radix` condition not `digit < 0` as it should be;i said about [  a + 26  z + 1 but i forgot to mention {  a + 26  z + 1 just for the record ||;1;0;disable gwt-rpc by default in the open-source releaserelnotes[guava types can no longer be sent over gwt-rpc]( to _temporarily_ reenable support set the `guavagwtemergency_reenable_rpc` system property to `true`-------------created by moe: https://githubcom/google/moemoe_migrated_revid288676838;
3767;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add incidentedgeorder() to the [value]graph interface  relnotes= graph : add  incidentedgeorder()  to the  [value]graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> make incidentedgeorder() public for [value]graph  relnotes= graph : allow setting a stable incident edge order by calling the newly added method  [value]graph.builder.incidentedgeorder(elementorder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;0;moe sync 2020-01-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add incidentedgeorder() to the [value]graph interfacerelnotes`graph`: add `incidentedgeorder()` to the `[value]graph` interfacesae2710e8cb1d0ab80e247334273695da0c7b3afb-------<p> make incidentedgeorder() public for [value]graphrelnotes`graph`: allow setting a stable incident edge order by calling the newly added method `[value]graphbuilderincidentedgeorder(elementorderstable())`0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;;;;1;1;make incidentedgeorder() public for [value]graphrelnotes`graph`: allow setting a stable incident edge order by calling the newly added method `[value]graphbuilderincidentedgeorder(elementorderstable())`-------------created by moe: https://githubcom/google/moemoe_migrated_revid288715042;
3767;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add incidentedgeorder() to the [value]graph interface  relnotes= graph : add  incidentedgeorder()  to the  [value]graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> make incidentedgeorder() public for [value]graph  relnotes= graph : allow setting a stable incident edge order by calling the newly added method  [value]graph.builder.incidentedgeorder(elementorder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;0;add release notes for 0123;;@electrum can you review it please? i dont really know how to review release notes ||  will merge ||;;;;0;1;;
3767;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add incidentedgeorder() to the [value]graph interface  relnotes= graph : add  incidentedgeorder()  to the  [value]graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> make incidentedgeorder() public for [value]graph  relnotes= graph : allow setting a stable incident edge order by calling the newly added method  [value]graph.builder.incidentedgeorder(elementorder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;0;1x: update gradle wrapper to 212;release notes  gradle 212 has the fastest build script compilation speeds of any gradle version to date;you should also check that there isnt any breaking changes in the [gradle plugin]( some of the plugins expect specific version of gradlein your case i think its fine:  ;;;;1;1;1x: update gradle wrapper to 212;
3767;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add incidentedgeorder() to the [value]graph interface  relnotes= graph : add  incidentedgeorder()  to the  [value]graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> make incidentedgeorder() public for [value]graph  relnotes= graph : allow setting a stable incident edge order by calling the newly added method  [value]graph.builder.incidentedgeorder(elementorder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00;;3678;extend toolbar with more icons and add tool tips;i know this is a controversial topic in the maintable-beta right now but to get the discussion going a little more and taking inspiration from #3678 i took the liberty to extend the toolbar with more buttons herethis is really not meant as a final say it just moves the code in place for some buttons that seem of some value for me they can be removed again resorted and the layout is probably also not perfectheres a screenshot:![toolbar](  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);for the mysql fans i really need the two buttons for the shared database if a connection to a mysql is established in the current database 😇  (not for postgresql and oracle database) || @koppor: i find two actions in the code: `standardactionsconnect_to_shared_db` and `standardactionspull_changes_from_shared_db`so if a connection to mysql database is established you want both of these buttons to show and otherwise just the pull/push button? || oh only the second :) - that is needed for mysql (only)the former one is not needed at all currently no clue what it is useful for || decision in devcall:- separate social network buttons from the rest- add tracking for user actions and evaluate in the future which buttons should be displayed || @lenhard an fyi from me and please dont feel pressured: you might have seen that i want to make a consistent layout for all panels toolbars etc ([issue here]( im going to wait with this until your pr here is pushed then i will merge the maintable-beta again into my local branch and incorporate all changes i really would like to have more icons on the toolbar to get a better feeling for the look || i grabbed the template from the material design icons and started to convert some of the icons we dont have in this style as an example emacs texstudio and vim ![emacs]( ![texstudio]( ![vim]( it be of interest if i pursue this further? if yes does someone know if we can include them as a vector font so that we have those icons scalable to whatever resolution we need? im worrying about retina displays or other 4k devices where 32x32 let alone 16x16 icons look not good || @halirutan i would suggest you contribute that upstream read more at  are also the [academic icons]( however there is none for tools but some for dois pubmed || @koppor i might be wrong but the readme there reads in its final paragraph:> please note that at this time the only brand icons we accept requests for are popular social media sites/apps and widely used products/software thanks for understandingin fact i have searched for vim and emacs on the site first and was stunned that such widely used apps cannot be found it doesnt matter i have successfully searched for a way to create our own ttf font for the icons in this way we can stay consistent with our design and we can adjust the icons as we like || @halirutan i would agree that emacs and vim are widely used in case there is no pr yet why not creating a pr? i have to admit that other software is not that popularmaybe we should start another font project? maybe we fit into the [academic icons]( at least i would try 😇 thus also the latex users would benefit from your work:  || why not forking academic icons and proposing our latex-related to them?//edit:: regading vim and emacs you might find them here: they also provide a font patcher || i think there is no real need to use a font-based icon svg images can be included more easily in javafx than font-based icons like this: only exception is if the font can be accessedfontawesomefx](  || @tobiasdiez i havent looked at this to be honest what about scaling? for some icons we set the size by giving the font-size like in the `entryeditorcss````tool-bar glyph-icon {    -glyph-size: 18px    -fx-font-size: 2em}```can we achieve consistent sizes when we use partly svg icons? i mean i see that we used `px` here but will this be the same when not used as a font? || good point the file-based icons are shown using  does provide some scale mechanisms but these are probably not accessible via css in general i agree that a font-based solution is desirable my comment should just serve as a warning that it might be not so easy to include an arbitrary font as icon sources and it may be easier to include the svg directly || hi all thanks for the comments i am currently in the process of relocating myself and my family to another country as you can imagine i dont have any free time on my hands so please dont expect action here soon if this blocks progress somewhere else i have no problem if someone else takes over and rounds this off || of course no problem @lenhard since the only thing missing in this pr is the additional push to shared icon i merge now im looking forward to see more prs incoming as soon as your pc is relocated -) ||;improve ux of main toolbar;"not a pressing matter but we should at some point take care of this at the moment the current main toolbar looks like this on ubuntu![img]( things are noteworthy:1 the horizontal lines under the icons dont match left and right from the search they have a different hight2 the separators between icon-groups are not of the same size left and right from the search bar3 when using the global search the number of found hits is displayed this label uses a different font and is not readable [see image here]( on our way to migrating everything to javafx the background colors should be made consistenti have hacked a fix to test some things by (1) removing the borderlines completely and make the whole toolbar having a border (2) separating visually everything that is part of the global search (3) fixing background color this gives imo a much clearer view:![new toolbar]( believe we should take care of this when we migrate the toolbar to fx additionally  i have seen that the ""material icons"" we use provide a template that lets you create your own icons i think we (i guess this would be my turn) should think about creating nice icons for the ""push to application"" button to make them fit into our overall design im sure i can do this while making the icons still recognizable";"good suggestion in the progress i would also like to condense it to say 5-10 useful actions (instead of > 20) and integrate the search bar prominently maybe even add some color something like this:( this rewrite might take a while could you in the meantime create a pr with your ""hack""? it looks so much better than the current interface || the maintable-beta now has a restyled toolbar we still need to decide on the color and which icons to display (see discussion starting at  || @tobiasdiez thanks for the ping i looked at the current maintable-beta branch and in particular at the colors since this is currently a mess because in every `css` file different explicitly specified colors are used i started to separate everything into one `jabrefcolorscss` and tried to unify everything looking at the current state one thing beside the inconsistency hit me instantly: we are starting to mixing a dark-scheme with a bright-scheme what i mean by that is that i suggest we should stick with *dark information onto bright background*: dark icons onto a brighter toolbar dark menu text onto eg gray dark tool-tip text onto bright bg etcto make everything consistent we should first decide the one main theme color i believe this should stay the blue that we used for icons until recently maybe a slight variant based on this color we calculate the highlight colors that we need and maybe 4 neutral gray-tones ive done this several times and maybe the most prominent example where this increases usability are the solarized colors you want to ensure that all colors and grays love each otherthen the big fun begins because every fx component needs to be checked and restyled for testing i used very bright colors in a main color css file and replaced some of the component colors note i dont suggest any of the colors used here it was only my test-zone![img]( could make out several things:- all toolbars (the main the editor the groupview) should use the same style especially the icons should look the same although they may be of different size- it is a good thing to make borders that are resizable slightly visible it makes grabbing them so much easier (in the main-table columns this is currently a pain)- consistent highlighting colors for hovered or selected table rows active input fields selected tabs error marks like the small thing in the editorone final word on the things discussed in the pr: for me there are also way too few icons in the toolbar and i dont like a prominent search bar imo this search bar hype is overrated and especially in jabref i use it not even close as often as i use ""new entry"" or ""push to app"" searching is good but it should not be centered using half of the toolbar the social media icons are useless to me too but i understand the intention of @koppor although i dont believe that this indeed has the desired effect || ""search"" is the most used feature by me in onenote i just use <kbd>ctrl</kbd>+<kbd>e</kbd> which is a [very good full-text search]( on all my notes || these are good points @halirutan a few colors are collected at the beginning of `maincss` but some are defined/inlined also in the `groupstreecss` and `entryeditorcss` now that everything derives from the `maincss` class we should put all colors there (or extract them to a separate file) since i have absolutely no background in ui design i took the design guidelines from [google]( and [microsoft]( as blueprints they mostly suggest to use a strong color for the titlebar (this suggestion is especially for mobile apps and use a hamburger-styled menu for desktopsbut this is not an option for jabref) and to use a grayish color for secondary navigation (ie our groups side panel) for an example see belowi would suggest @halirutan opens a pr with the unification of the colors and then everybody is invited to play around a bit and propose a theme maybe we could even ask our users for help and/or use 99desgins again (it shouldnt be too hard to load the css from an external resource to make it very easy for somebody to change the style without actually compiling jabref from source)![image]( || following up on what @koppor already said the ""search"" feature is also the most important one to me i have a database with over 14000 entries - i wouldnt know what to do without the search feature so i think (at least for my use case) it deserves its prominent position i do agree with @halirutan however that the social media buttons appear less useful (again this might only apply to me)@tobiasdiez : i dont know whether this belongs here so apologies if it does not when using the search feature in:```jabref 42-dev--snapshot--2018-02-21--maintable-beta--58cfd7f48windows 10 100 amd64 java 180_161```the background colour is this darkish blue-purple colour the text that is inserted by the user in the search bar however is black which makes it very difficult to distinguish the text from the background colour this should definitely be changed to a bright colour e g white if the dark background colour is kept || i have by far not touched everything but i tried to at least use consistent colors i used the [canadian color scheme]( that i discovered recently through hacker news i used only one blue base-color and several grays all other colors are only for highlighting like selected rows warnings tooltips etcthe result is a very modern and friendly looking jabref in a flat design![jabrefcolors mp4 mp4]( all needs to be cleaned up and unified further but i cannot do this without help because some things (like the sidepanel) are created in code and other things seem to have no effect and i would like to understand what the intention behind it washere are some things i tried to tackle:- a hover effect for all flat buttons that do something- get a consistent height between the header of the side panel and the main table to make it more pleasing- use the base-color for most buttons selected tabs and the header in the maintable- get a good ratio between the gray-tones of the toolbars the background the content panes and the separators between the split-panes- for this test i removed the sidepanel icons they are far too much left and i guess their purpose is to remind the user how the icon in the toolbar looks :)in any-case with consistent styling we can create a girl version of jabref easily![girl]( || @halirutan i like the light and fresh look where exactly do you need help?  || since the toolbar is now restyled and the color-theme is tracked as part of #3621 ill close this issue now || ";1;0;description as tooltip;
3772;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> rewrite the stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7;;0;moe sync 2020-01-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datafea136b2585cd01765e67de83e54dad6a0aebae5-------<p> rewrite the stopwatch docs to explain elapsed vs wall time81b9816a5e8347a05518c7869464e0f357be58b7;;;;;1;1;rewrite the stopwatch docs to explain elapsed vs wall timerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid289974621;
3772;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> rewrite the stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7;;0;after downloading a pdf the suffix is missing and opening the file fails;"-  i have tested the latest master version from  and the problem persistsjabref version 42-devsteps to reproduce:1 choose general > get fulltext for an entry2 click on pdf symbolthe error message is ""unable to open file"" renaming the file via ""rename file"" option adds the pdf suffix which solves the problem";could you please edit the title of the issue and provide us with the bibtex entry for which it failed so we can see which fetcher was used to download the fulltext || i think it was this one:```@article{langer2004  author         {langer stefan}  title          {a linguistic test battery for support verb constructions}  journal        {lingvisticæ investigationes}  year           {2004}  volume         {27}  number         {2}  pages          {171--184}  publisher      {john benjamins publishing company}}``` || hm that entry works fine  i would vote to close the issue and you reopen it when you identify an entry/concrete fetcher which produced that file ||;;;;0;1;;
3772;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> rewrite the stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7;;0;fix incorrect handling of aggregation arguments;;3714 || do you think this might fix  also? || possibly but #3770 has no repro steps || its not the same as #3770 this one happens at plan time not execution time || add an explanation of what is broken || you mean to the commit message? thatll be longer than 70 chars the referenced issue has more details but essentially we produce incorrect plans for queries which have multiple aggregations that require input to be cast differently || only the first line in the commit needs to be short you can include a longer explanation of whats broken and if its not entirely obvious from the code how the change fixes it in the body of the commit message;;;;0;1;;
3772;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-01-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> rewrite the stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7;;0;add singleonerrorresumenext(func1<throwable single>);second part of #3652 follow-up to #3655;duplicates #3766… || wow thats coincidence ) || sorry! ||;;;;0;1;;
3773;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-01-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update resource.getresource to allow ignoring return value for existence checks.  specifically this impacts getresource(contextclass  resourcename) as this is already present on getresource(resourcename)  relnotes=update resource.getresource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6;;0;moe sync 2020-01-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update resourcegetresource to allow ignoring return value for existence checksspecifically this impacts getresource(contextclass resourcename) as this is already present on getresource(resourcename)relnotesupdate resourcegetresource(*) to allow ignoring return value for existence checks383c278b7b8044feac53153c0dd3202d3fa0b3c6;;;;;1;1;update resourcegetresource to allow ignoring return value for existence checksspecifically this impacts getresource(contextclass resourcename) as this is already present on getresource(resourcename)relnotesupdate resourcegetresource(*) to allow ignoring return value for existence checks-------------created by moe: https://githubcom/google/moemoe_migrated_revid290278034;
3773;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-01-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update resource.getresource to allow ignoring return value for existence checks.  specifically this impacts getresource(contextclass  resourcename) as this is already present on getresource(resourcename)  relnotes=update resource.getresource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6;;0;fix scheduling when only coordinator is eligible;;;;;;0;1;;
3773;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-01-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update resource.getresource to allow ignoring return value for existence checks.  specifically this impacts getresource(contextclass  resourcename) as this is already present on getresource(resourcename)  relnotes=update resource.getresource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6;;0;release 112 preparations;### version 112 - march 18 2016 ([maven]( api enhancements- #3766: add `singleonerrorresumenext(func1)` operator- #3765: add `observableswitchonnextdelayerror` and `observableswitchmapdelayerror` operators- #3759: add `observableconcatdelayerror` and `observableconcatmapdelayerror` operators- #3763: add `observablecombinelatestdelayerror` operator- #3752: add `singleusing` operator- #3722: add `observableflatmapiterable` overload with `maxconcurrent` parameter- #3741: add `singledoonsubscribe` operator- #3738: add `observablecreate(synconsubscribe)` and `observablecreate(asynconsubscribe)` factory methods- #3718: add `observableconcatmapiterable` operator- #3712: add `singletakeuntil(completable)` operator- #3696: added single execution hooks via `rxjavasingleexecutionhook` class- #3487: add `onbackpressurebuffer` overflow strategies (oldest newest error)#### api deprecations- #3701: deprecate `completabledooncomplete` in favor of `completabledooncompleted` (note the last d in the method name)#### performance enhancements- #3759: add `observableconcatdelayerror` and `observableconcatmapdelayerror` operators- #3476: reduced `range` and `flatmap/merge` overhead#es- #3768: fix `observeon` in-sequence termination/unsubscription checking- #3733: avoid swallowing errors in `completable`- #3727: fix `scan` not requesting `longmax_value` from upstream if downstream has requested `longmax_value`- #3707: lambda-based `completablesubscribe()` methods should report `isunsubscribed` properly- #3702: fix `mapnotification` backpressure handling- #3697: fix `scalarsynchronousobservable` expecting the `schedulercomputation()` to be `eventloopsscheduler` all the time- #3760: fix executorscheduler and genericscheduledexecutorservice reorder bug- #3678: fix counted buffer and window backpressure;it would be great if @stevegury @abersnaze or @stealthcode reviewed these two latter bugfixesas for the remaining enhancements open half of them isnt top priority the other half requires additional work from the op anyway || @akarnokd im pretty busy today but ill try to tackle #3678 before tomorrow || closing follow-up in #3778 ||;;;;0;1;;
3773;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-01-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update resource.getresource to allow ignoring return value for existence checks.  specifically this impacts getresource(contextclass  resourcename) as this is already present on getresource(resourcename)  relnotes=update resource.getresource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6;;3754;make jabref cli work in headless mode;dont call telemetry when headless mode3754         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;no-gui mode (--nogui) should not try to use display;"jabref version 41 on redhat 7 using jre 180-162steps to reproduce:1 use a headless (rh) linux system that provides no display2 run only command line feature: 3 java -jar jabref-41jar -n --help<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>jabref does not run when invoked with the --nogui option and no display is available</summary>    ```exception in thread ""main"" javalangreflectinvocationtargetexception        at sunreflectnativemethodaccessorimplinvoke0(native method)        at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)        at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)        at javalangreflectmethodinvoke(methodjava:498)        at sunlauncherlauncherhelper$fxhelpermain(launcherhelperjava:767)caused by: javalangunsupportedoperationexception: unable to open display        at comsunglassuigtkgtkapplication<init>(gtkapplicationjava:68)        at comsunglassuigtkgtkplatformfactorycreateapplication(gtkplatformfactoryjava:41)        at comsunglassuiapplicationrun(applicationjava:146)        at comsunjavafxtkquantumquantumtoolkitstartup(quantumtoolkitjava:257)        at comsunjavafxapplicationplatformimplstartup(platformimpljava:211)        at comsunjavafxapplicationlauncherimplstarttoolkit(launcherimpljava:675)        at comsunjavafxapplicationlauncherimpllaunchapplicationwithargs(launcherimpljava:337)        at comsunjavafxapplicationlauncherimpllaunchapplication(launcherimpljava:328)         5 more  ```</details>";thanks for the report  definitely a thing to consider  from what i saw testfx is relying on monocle to run in headless environment  || hi i  think i actually found a way which could work:but in my test i still got an exception from the telemetry client i will try around  if i can disable that in headless modeyou first need to install `openjdk8` and `openjfx`then you can start it from commandline using this options:``` java -dtestfxrobotglass -dglassplatformmonocle -dmonocleplatformheadless -dprismordersw -jar jabref--master--latestjar -n --help```  || thank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from  and report back if it works for you || thanks it was working as soon as i had manually downloaded openjfx-monocle to /jre/lib/ext/ ( as indicated by  ) ||;1;0;merge remote-tracking branch upstream/master into headless* upstream/master:  fix loc gov travis build;
3793;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> annotate uppercase and lowercase with @lazyinit.  this eliminates a tsan warning.  f325f04c86c8159f5bd9d771e697217a866c46d2;;0;moe sync 2020-02-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> annotate uppercase and lowercase with @lazyinitthis eliminates a tsan warningf325f04c86c8159f5bd9d771e697217a866c46d2;;;;;1;1;annotate uppercase and lowercase with @lazyinitthis eliminates a tsan warningrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid292973956;
3793;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> annotate uppercase and lowercase with @lazyinit.  this eliminates a tsan warning.  f325f04c86c8159f5bd9d771e697217a866c46d2;;0;new entry in subgroup is not shown;jabref version jabref-42-dev--snapshot--2018-02-28--master--2b5815b83jarsteps to reproduce:1 select existing group2 add new entry by using dialog (ctrl-n)the new entry is added to group the number is of items in subgroup is increased but the entry is not shown in the main table new entry is visible after selecting some other group and reselecting the first group;this should be  in the latest development version could you please check the build from  thanks! note this version is in a very early beta stage and might not work as expected see #3621 for further details || jabref 50-devlinux 500-27-generic amd64 java 180_222i cannot reproduce this issue i reckon this has been fixed as suggested by @siedlerchr  ||;;;;0;1;;
3793;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> annotate uppercase and lowercase with @lazyinit.  this eliminates a tsan warning.  f325f04c86c8159f5bd9d771e697217a866c46d2;;0;create table does not validate table properties;this should fail but it executes successfully:`create table foo (x varchar) with (invalidproperty  5)`;;;;;0;1;;
3793;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> annotate uppercase and lowercase with @lazyinit.  this eliminates a tsan warning.  f325f04c86c8159f5bd9d771e697217a866c46d2;;0;onsubscriberange with asynconsubscribe does not work without backpressure;"hiim trying to implement observable with backpressure ive investigated a bit and came with this solution: ```    @test    public void testobservable() throws exception {        observable<integer> observable  observablecreate(new asynconsubscribe<void integer>() {            @override            protected void generatestate() {                return null            }            @override            protected void next(void state                                long requested                                observer<observable<? extends integer>> observer) {                observeronnext(observablecreate(                        new onsubscriberange(0 integermax_value -1)))                return null            }        })        observable//              observeon(schedulerscomputation())//              subscribeon(schedulersio())                subscribe(d -> systemoutprintln("">>>>>>""))        sleep(10000)    }```ive found out that asynconsubscribe provides basics for back pressure support and im using the onsubscriberange to n times call some method(via chained map operator)the problem is that it seems its very unreliable in initialization it works if i do the backpressure in subscriber(request(n)) but once i try to go without backpressure it does not work data is emitted but does not reach the subscriber i believe its being accumulated in rxobservablesasynconsubscribeasyncoutermanager#subscribebuffertoobservable endlessly as if the subscribe was not noticedam i doing something wrong? i understand that the asynconsubscribe is experimental so if there is any recommended way how to implement backpressure support correctly please point me to the right directioncurrently we are using rxjava 112note: i understand that the onsubscriberange supports only max int values so i implemented onsubscribelongrange but the same behaviour applies for boththank you in advanceviliam";"`asynconsubscribe` allows you to generate exactly the requested amount of values from a client that manually calls request(n) multiple times therefore you shouldnt ignore the `requested` in `next` and in a general case you should have used `observeronnext(observablerange(0 requested))` instead of the `create()` method and the internal operator for rangehowever any asynchronous and request-manipulating operator between the subscriber and this async generator will mess with that `requested` amount so you have most likely non-predictable amounts in addition the class cant validate that your `observable` did actually emit the exact requested or it even supports backpressure therefore there is an internal buffering going on that is flooded with your very large rangeim not sure what data source you wanted to create in the first place it looks like a direct `observablerange(0 n)map()` would have sufficed if you have some state or resource dependence or some very special emission pattern look at the `synconsubscribe` that gives you proper backpressure cancellation and wont buffer anything || the thing im solving is - lets assume i have a buffer which is filled by loaders from db i  want to attach an observable to this buffer and serve the data i also need backpressure cos the subscriber will most likely be slowerfor backpressure calls the `requested` field is rather small so its quite okthe reason why this example looks as it does is that the `onsubscriberange` supports only int range which does not comply with the `requested` field as it is long so i only put there the max int for demonstrationyes in theory you are right that the `observablerange(0 n)map()` could do the trick but i need ""infinite"" observable for this i could assume long range to be sufficient but not int still this would feel kinda ""hacky""the default behaviour without backpressure is that `longmax_value` is requested so if i have a subscriber without backpressure support thats what i get in the `next` method || without commenting on the viability of your approach a range that supports `long` values can be created like this:``` javaobservable<long> rangelong  observablecreate(new synconsubscribe<long long>() {            @override            protected long generatestate() {                return 0l            }            @override            protected long next(long n observer<? super long> o) {                oonnext(n)                return n+1            }        })```you can then compose it with `take` to limit its output || hithank you for your suggestions ive ended  up with:```    observable  observablecreate(new synconsubscribe<object data>() {            @override            protected void generatestate() {                return null            }            @override            protected object next(object state observer<? super data> observer) {                observeronnext(nextdata())                return null            }        })```this seems to work just finethanks again! || a more concise way to write this would be to use the static initializer onsynonsubscribecreatestateless()on wed mar 30 2016 07:03 witko notifications@githubcom wrote:> hi> thank you for your suggestions ive ended up with:> > ```> observable  observablecreate(new synconsubscribe<object data>() {> >         @override>         protected void generatestate() {>             return null>         }> >         @override>         protected object next(object state observer<? super data> observer) {>             observeronnext(nextdata())>             return null>         }>     })> ```> > this seems to work just fine> thanks again!> > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  || thanks! even nicer || ";;;;0;1;;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;0;how to drop some object (temporary disconnect) when there is pending operation;hello i have a questionsometimes i want to send an  request when a button is pressed but i dont want to send too much  request i just want to drop any button press emission when there is a pending  requesti attempt with a couple solution with some flaw**attempt 1**_solution:_ use onbackpressuredrop and use reactive pull subscriber as parameter to subscribe()_issue:_ this solution require some code implementation in subscriber instance the problem isonbackpressuredrop and subscriber code is too far away from each other (different file)make it hard to reasoning why the subscriber instance implement the way it is this approach will be perfect if i can move reactive pull up the chaineg```observable buttonpressfunc1 send *** request(1) operation *** ]```basically the same as reactive pull but instead of doing it in subscriber do it with some operator inside transformation chain i simply dont know such method (or operator) if you know how can i archive the same effect please tell me**attempt 2**_solution:_ use connectableobservable to temporary disconnect flatmap operation from source_issue:_ so imparative and the actual code looks bad break the purpose of using reactive paradigmi might did it the wrong way if you have an example to bring this idea into practice i will be very glad to see your exampleif you think both of my attempt are not even close to simple implementation available out of the box i will be happy to see your suggestion on the original issue;"i dont think you should over complicate this when you press the button it should disable itself and once the background process terminates normally or with error re-enable the button || thank you @akarnokd for your kind replyit may looks over complicate but i try not to rely on side effectsfor solution based on side effect i found that simply use boolean field is better than disable the button (developer mental wise) because the boolean field is much closer to where it is required to be used so anyone can reasoning about why it is there without navigating aroundboth button disabling and boolean field can be an option if there is no other way aroundi just curious if there is solution based on observable chaining alone without too much influence from side effects plus i feel like i will understand more of rxjava this way || check out [`debounce()`]( there are three flavors || hi @abersnaze thank you for the suggestion  i never figured out what that overload of debounce doobviously in my use case debounce with time duration parameter is out of questionthat left only the mysterious onewhen i look at the calling signature i hope it work the same as flatmap with emission dropping feature but it is notlet says i do this```debounce(new func1<long observable<string>>() {  @override public observable<string> call(long oldvalue) {    return performstringrequest()  }})```it will result in `observable<long>` with collapsing element remove? correct?i just wonder how can i use the result of `performstringrequest()` heresince the result of debounce is still `observable<long>` not `observable<string>`could you elaborate how this works?it actually seems like a bug? (i mean just weird operator?) to me made me curious what was it used for || the values from the `observable<u>` are dropped only the completion of that observable is used to indicate when more ts are propagated || after some time i kind of understand the functional of those debounce overload it seems to interest only oncomplete signal but i still curious about real world usage of itit seems not a viable option for my use case thoughdo anyone have real world scenario about this operation?anyway i do some more research and found out that flatmap  have maxconcurrent overload parameterthe question then boiled down to:if i set maxconcurrent to 1 will it generate backpressure that can be drop with `onbackpressuredrop()` or not?so what i am trying to achieve will be as simple as```observable buttonpressfunc1 send 1)``` || here is another idea```        atomicboolean active  new atomicboolean(false)        interval(100 timeunitmilliseconds)filter(t -> {            systemerrprintln(""t"" + t)            return !activeget()        })flatmap(t -> {            activeset(true)            return just(""t"" + t + "" completed"")delaysubscription(1000 timeunitmilliseconds)doonunsubscribe(() -> activeset(false))        })toblocking()foreach(systemout::println)```produces the output```t0t1t2t3t4t5t6t7t8t9t10t0 completedt11t12t13t14t15t16t17t18t19t20t21t11 completedt22``` || the real world use for debounce is interactive search box where you dont want every key press to cause a  call to a search service`ontextboxchange()debounce(100 ms)switchmap(text -> search(text))subscribe(updateresults)`im thinking the reason it doesnt work for you is that im assuming you dont want to cancel an in flight request if the user give you more input because the operation is not idempotent || @abersnaze nice example although it is relying on side effect of boolean as [i mentioned](#issuecomment-200871111) the implementation is still better than mine  regarding the real world scenario i referred to those particular variant of debounce where there is no time period as parameter || just update to anyone with the same issue[the solution i described](#issuecomment-200957158) seems to workif you want to see it for yourself here simple demo code:```    observable      interval(500 timeunitmilliseconds)      onbackpressuredrop(new action1<long>() {        @override public void call(long along) {          // timber is just a logging library you can replace with any logging machanism          timberd(""dropped"")        }      })      flatmap(new func1<long observable<void>>() {        @override public observable<void> call(long along) {          timberd(""long operation start"")          return observable<void>just(null)delay(3200 timeunitmilliseconds)        }      } 1)      subscribe(new action1<void>() {        @override public void call(void avoid) {          timberd(""long operation completed"")        }      })``` || ";;;;0;1;;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;0;jabref throws exception when started in another language with missing fxml localization;"tried to test #3795 @koppor  it might actually be useful to add the missing keys to other language files```16 34023 [javafx application thread] error orgjabrefguiutilcontrolhelper - problem loading fxml for controljavafxfxmlloadexception: resource ""close window"" not found/e:/workspace/jabref/jabref/bin/main/org/jabref/gui/entryeditor/entryeditorfxml:22	at javafxfxmlfxmlloaderconstructloadexception(fxmlloaderjava:2597) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderaccess$100(fxmlloaderjava:103) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$elementresolveprevalue(fxmlloaderjava:424) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$elementprocessvalue(fxmlloaderjava:363) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$elementprocesspropertyattribute(fxmlloaderjava:325) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$elementprocessinstancepropertyattributes(fxmlloaderjava:235) ~[jfxrtjar:?]	at javafxfxmlfxmlloader$valueelementprocessendelement(fxmlloaderjava:767) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderprocessendelement(fxmlloaderjava:2823) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2532) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at orgjabrefguiutilcontrolhelperloadfxmlforcontrol(controlhelperjava:29) ~[main/:?]	at orgjabrefguientryeditorentryeditor<init>(entryeditorjava:76) ~[main/:?]``````";"the relevant code in the fxmlloader is ````java400  } else if (avaluestartswith(resource_key_prefix)) {401      avalue  avaluesubstring(resource_key_prefixlength())402      if (avaluelength()  0) {403          throw new loadexception(""missing resource key"")404      }405      if (avaluestartswith(resource_key_prefix)) {406          // the prefix was escaped407          warndeprecatedescapesequence(resource_key_prefix)408          return avalue409      } else {410          // resolve the resource value411          if (resources  null) {412              throw new loadexception(""no resources specified"")413          }414          if (!resourcescontainskey(avalue)) {415              throw new loadexception(""resource \"""" + avalue + ""\"" not found"")416          }418          return resourcesgetstring(avalue)419      }420  } else if (avaluestartswith(expression_prefix)) {````hence as soon as the resource does not contain the language key the load exception is thrown  there are two ways to fix this:- add (empty) key-value pairs for every string and for every language- always return true here: || the problem is now that the duplication finder complains about duplicates and i think this is a problem with the merge of #3798 || which duplicates? did git merge something wrong? we should remove theuntranslated keys again from the translation files or are they alreadyremoved?am 09032018 18:03 schrieb ""christoph"" <notifications@githubcom>:> the problem is now that the duplication finder complains about duplicates> and i think this is a problem with the merge of #3798> < —> you are receiving this because you modified the open/close state> reply to this email directly view it on github> < or mute> the thread> < > || we should remove the english values from the tl property again then the test should be green again (git merge probably kept the english values i initially added to make jabref work)  || ";;;;0;1;;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;0;add `create table if not exists as`;related to #2108;;;;;0;1;;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;3788.0;moe sync 2020-02-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security managere589b5c884a5996f7040ae38bdf02709f9e300da; shut down computer - silence ||;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval;context: https://githubcom/google/guava/issues/3784;   i submitted the corporate cla on behalf of snowflake but i need our authorized signer (our vp) to click through the agreement still once that happens ill trigger the cla/google check again || hmm is there a way to see the test outputs for travis ci? the log indicates that the new test fails but i dont see that `/home/travis/build/google/guava/guava-tests/target/surefire-reports` is made available anywhere || on [the job log page]( you can scroll _way_ to the bottom and click the `$ util/print_surefire_reportssh` line and -- i see that its not working :( i will have a look sorry about that || odd it works for me locally (also maven-surefire-plugin:272 though only maven 35) i wonder whats different about travisif youre lucky the problem will reproduce for you locally:`mvn clean install ""-dtestinclude**/abstractfutureinnocuousthreadtestjava""`(you can probably skip the `clean` part but i am always nervous about doing so) || ok i patched in your pr so i have updates on 2 fronts:first the failure is this:```testabstractfutureinitializationwithinnocuousthread_doesnotthrow(comgooglecommonutilconcurrentabstractfutureinnocuousthreadtest)  time elapsed: 0151 sec  <<< error!javasecurityaccesscontrolexception: access denied (""javalangruntimepermission"" ""closeclassloader"")  at javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:472)  at javasecurityaccesscontrollercheckpermission(accesscontrollerjava:884)  at javalangsecuritymanagercheckpermission(securitymanagerjava:549)  at javaneturlclassloaderclose(urlclassloaderjava:289)  at comgooglecommonutilconcurrentabstractfutureinnocuousthreadtestteardown(abstractfutureinnocuousthreadtestjava:80)```i am able to reproduce it locally -- but _not_ when using the `testinclude` flag from my previous post its possible that this means that your test is affected by a previous tests incomplete cleanup or other poor hygiene (`abstractfuturefallbackatomichelpertest`? `abstractfuturecancellationcausetest`?)second im not completely sure whats up with `util/print_surefire_reportssh` locally i get a ""successful"" run but with no results with your commit patched in thats because im seeing `xml` files for most tests but _not_ seeing one for _your_ test maybe thats related to the `securitymanager`?i dont know why the situation would be different under travis under which there are apparently _no_ `xml` files || now i am more confused!in an attempt to narrow down which tests were causing the problem i ran:`mvn clean install ""-dtestinclude%regex[*utilconcurrent*class]""`that got this far:```running comgooglecommonutilconcurrentabstractexecutionthreadservicetesttests run: 12 failures: 0 errors: 0 skipped: 0 time elapsed: 009 secrunning comgooglecommonutilconcurrentabstractfuturecancellationcausetesttests run: 3 failures: 0 errors: 0 skipped: 0 time elapsed: 0042 secrunning comgooglecommonutilconcurrentabstractfuturefallbackatomichelpertesttests run: 42 failures: 0 errors: 0 skipped: 0 time elapsed: 33034 secrunning comgooglecommonutilconcurrentabstractfutureinnocuousthreadtesttests run: 1 failures: 0 errors: 0 skipped: 0 time elapsed: 0073 sec```those all appear to be successes but then the run aborted claiming:```[error] failed to execute goal orgapachemavenplugins:maven-surefire-plugin test (default-test) on project guava-tests: there are test failures```so im not sure whats up hopefully it will be clearer to you from the code || thanks for taking a look! i wonder if resetting the `securitymanager` to its original state at the end of the test would fix the problemill give that a shot locally without the test filter and then see if it passes then see if another travis run will succeed || i really wish i could see the test output from travisi tried resetting the `securitymanager` with `systemsetsecuritymanager(null)` at the end of the test and both `mvn clean install ""-dtestinclude%regex[*utilconcurrent*class]""` and `mvn clean install ""-dtestinclude**/abstractfutureinnocuousthreadtestjava""` pass for me now but it looks like the tests through travis are still failing based on the result above :(is `/home/travis/build/google/guava/guava-tests/target/surefire-reports` kept around in any logs/outputs? || lets check on the cla status at least since we submitted the corporate one:     i signed it! || clas look good thanks!  || woohoo the cla check passes nowseparately though i found a way to avoid depending on `forkjoinpool` within arrow flight so its fine if `abstractfuture` tries to access properties and im not blocked on this pr any more im happy to try to see it to completion but its not urgent in any case || thanks! i grabbed your test and tweaked it to use a custom `securitymanager` subclass instead of writing a policy file that appears to be enough to get `mvn clean install` to pass do you have any comments on the result  || (you can ignore the second copy of the files (from the `android` directory) i probably should have omitted that copy from the pr) || nice lgtm! thanks for figuring out a way to make it work it sounds like this project doesnt merge changes from github anyway so we can close this pr if you want to proceed with submitting your version to google3 (and then im assuming the changes get exported to github at some point) || right well make the equivalent change internally and then mirror it back out (with your name attached) that will automatically close this pr so we can keep it open just in case i somehow forget about it :) || ";1;0;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security manager-------------created by moe: https://githubcom/google/moemoe_migrated_revid293696683;
3796;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-02-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval.  3788  #3784  relnotes=made it safe to load the  abstractfuture  class from a  forkjoinpool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da;;3784.0;moe sync 2020-02-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security managere589b5c884a5996f7040ae38bdf02709f9e300da; shut down computer - silence ||;abstractfuture and forkjoinpool are incompatible with securitymanager;"i was bitten by the issue described in  \[cpovirk adds (for searchability): might  also be similar?\] when trying to use arrow flight with javas securitymanager since `abstractfuture` tries to check a property as part of initialization and hence cant be created from an `innocuousthread` that doesnt have any privileges the exception looks like this:```caused by: javasecurityaccesscontrolexception: access denied (""javautilpropertypermission"" ""guavaconcurrentgenerate_cancellation_cause"" ""read"")	at javabase/javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:472)	at javabase/javasecurityaccesscontrollercheckpermission(accesscontrollerjava:1044)	at javabase/javalangsecuritymanagercheckpermission(securitymanagerjava:408)	at javabase/javalangsecuritymanagercheckpropertyaccess(securitymanagerjava:1152)	at javabase/javalangsystemgetproperty(systemjava:880)	at comgooglecommonutilconcurrentabstractfuture<clinit>(abstractfuturejava:64)```i can try to put together a small repro if its useful but the tldr is that id like to wrap the call at  in a try/catch since it will throw if access to system properties is not permitted by the securitymanager";"thanks that sounds great if youd like to put together a pull request youre welcome to (though note that it will require [you or your company to sign the cla]( || sorry accidentally submitted early the other thing i wanted to do was link to [a test that loads its own copy of `abstractfuture`]( that would be the ideal test here since it easily can run in the same vm as the rest of our tests alternatively we could probably get away with a separate test class that we configure to run in a separate vm || thanks for the pointer! do you think it would be okay to configure `abstractfuturecancellationcausetest` to use `securitymanager` by default or should i create a separate test file? which directory does it make sense to put the policy file in?im working on something more polished and looking into the cla but i was able to reproduce the failure by creating a hacky test like this:```  public void testinnocuousthreadwithabstractfuture() throws exception {    atomicboolean success  new atomicboolean(false)    thread thread  jdkinternalmiscinnocuousthreadnewthread(      () -> {        try {          future<?> future  newfutureinstance()          asserttrue(futurecancel(false))          asserttrue(futureiscancelled())          successset(true)        } catch (exception e) {          fail(""unexpected exception: "" + etostring())        }      })    threadstart()    threadjoin()    asserttrue(successget())  }```the cumbersome part though is that you have to set up a securitymanager profile and pass some additional command-line arguments i made a permissive policy like this:```grant {  permission javaiofilepermission ""/-"" ""read""  permission javautilpropertypermission ""*"" ""readwrite""  permission javalangreflectreflectpermission ""*""  permission javalangruntimepermission ""*""}```and then used these command-line arguments to java:```-djavasecuritymanager -djavasecuritypolicy/path/to/javapolicy -djavasecuritydebugaccessfailure --add-opens javabase/jdkinternalmiscall-unnamed```the test fails since `successset(true)` is never reached and the test output has:```access: access denied (""javautilpropertypermission"" ""guavaconcurrentgenerate_cancellation_cause"" ""read"")javalangexception: stack trace	at javabase/javalangthreaddumpstack(threadjava:1383)	at javabase/javasecurityaccesscontrolcontextcheckpermission(accesscontrolcontextjava:462)	at javabase/javasecurityaccesscontrollercheckpermission(accesscontrollerjava:1044)	at javabase/javalangsecuritymanagercheckpermission(securitymanagerjava:408)	at javabase/javalangsecuritymanagercheckpropertyaccess(securitymanagerjava:1152)	at javabase/javalangsystemgetproperty(systemjava:880)	at comgooglecommonutilconcurrentabstractfuture<clinit>(abstractfuturejava:74)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:567)	at comgooglecommonutilconcurrentabstractfuturecancellationcausetestnewfutureinstance(abstractfuturecancellationcausetestjava:187)	at comgooglecommonutilconcurrentabstractfuturecancellationcausetestlambda$testinnocuousthreadwithabstractfuture$0(abstractfuturecancellationcausetestjava:171)	at javabase/javalangthreadrun(threadjava:835)	at javabase/jdkinternalmiscinnocuousthreadrun(innocuousthreadjava:134)```it should be possible to have the test use `javautilconcurrentforkjoinpool` rather than relying on the internal `innocuousthread` class but at least i was able to get a poc working || i was thinking more along the lines of a separate test class (though using the same classloading trick) im hoping that we dont need a separate policy file given our ability to implement our own `securitymanager` as in [this test]( || sent  comments welcome! || ";1;0;make abstractfuture compatible with forkjoinpool by catching exceptions from property retrieval3788 #3784relnotesmade it safe to load the `abstractfuture` class from a `forkjoinpool` thread under a security manager-------------created by moe: https://githubcom/google/moemoe_migrated_revid293696683;
3797;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190;;0;moe sync 2020-02-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add missing @nullableafa21015d337d38bbaa752aa29b2d50c700f8190;;;;;1;1;add missing @nullablerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid294351502;
3797;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190;;0;addtagaloglang;        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;;
3797;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190;;0;support create table if not exists as select;fix https://githubcom/facebook/presto/issues/3796;overall this seems fine to me but there is one problem: a ctas can run for a while but this only ignores existing tables when planning you might start two ctas but the second one to finish will fail i think we need an additional check before actually creating the table (which should rollback the operation on the connector)but we could add this for now and file an issue to address the other case || thank you @electrum i get comments addressedsure will file an issue for the other case || rebased to the current master @electrum @martint would you please review? || rebased  @electrum @martint could you please take a review when you are free? || @zhenxiao can you rebase this on master? || @martint rebased your comments are welcome ||;;;;0;1;;
3797;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add missing @nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190;;0;2x: add consumablex to the base types update method signatures;this pr factors out the `xsubscriber` types makes sure the base types implement `consumablex`and methods accepting x in some way now accept `consumablex` typewrapping into the base types are not yet eliminated;pr updated with the few places where i forgot to replace with the nw interfaces in addition im no longer convinced that they should cross-implement each others base interface because it causes overload ambiguity || > im no longer convinced that they should cross-implementi think i agree with that statement do you mean that `completable` should not implement the `consumableobservable`? i did not intend that in my poc || `flowable` looks like it could do both `consumableobservable` and `publisher` or `singe` could also implement `publisher` but some methods become ambiguous || yeah since `flowable`s subscribe takes a `subscriber` and both `consumablesubscriber` and `publisher` both agree on the subscriber type then we should make flowable implement both consumable and publisher the others are difficult || added `consumableflowable` i had trouble with typing extend using `function<? super consumableflowable<t> r>` is too restrictive and gives no access to `flowables methods` and having `u extends consumableflowable<t>> function<? super u r>` has a type-bounce of ? super ? extends consumableflowable || i got extend to work with this``` javapublic class flowable<t> implements consumable<subscriber<? super t>> {@override    public <s2 x extends consumable<s2>> x extend(function<consumer<subscriber<? super t>> x> convertion) {        return convertionapply(onsubscribe)    }}```so you could probably implement it similarly  || ill try it out locally and see what works (and what doesnt)  || i got it to work but the `publisher<t> onsubscribe` is not a `consumer<subscriber<? super t>` so itd require a wrapper``` java@overridepublic <s2 x extends consumable<s2>> x extend(function<consumer<subscriber<? super t>> x> conversion) {    return conversionapply(new consumer<subscriber<? super t>>() {        @override        public void accept(subscriber<? super t> subscriber) {            onsubscribesubscribe(subscriber)        }})}```this required a base interface for `consumableflowable` ``` javapublic interface consumable<s> {    void subscribe(s subscriber)    public <s2 x extends consumable<s2>> x extend(function<consumer<s> x> conversion)}public interface consumableflowable<t> extends consumable<subscriber<? super t>> {}public class flowable<t> implements publisher<t> consumableflowable<t> {    // }``` || lets experiment with that in a separate pr also id wait until the flowable isnt a wrapper anymore but a base class that gets extended by all internal operators that were create/lift before || why do we need a separate pr? extend is part one 1x and with theconsumable its even more necessary to switch between types sure you cancreate custom instance operators for converting between them or subscribebut this interface is explicitly for converting between and chainingtogether different streams so its useful to convert between types that donot necessarily have a direct relationship (ie in 2 unrelated libraryjars) so i am very disinclined to leave it outon sat mar 26 2016 12:48 david karnok notifications@githubcom wrote:> lets experiment with that in a separate pr also id wait until the> flowable isnt a wrapper anymore but a base class that gets extended by all> internal operators that were create/lift before> > —> you are receiving this because you commented> > reply to this email directly or view it on github>  || why do you want this single pr to host every modification? there is a lot to do with 2x and some of them like extend can be incremental || i can see that it could be implemented incrementally this pr didnt sayanything to that effect i think that as a team the rxjava committersshould come to discuss and agree on the 20 design doc this process shouldor may include additional elaboration or amendments to areas that do notyet have team commitment this would include items like extend (which youseem to be uncertain in your support of) and in that process team memberswould commit to and merge their  commitments incrementally in the designdoc on the 2x branch before prs of the uncommitted features are openedif any of us have concerns suggestions or alternatives or requireelaboration on the design doc then we should comment or open an issue/pr tothe design i think we should wait until the consumable and/or extend arecommitted and merged to 2x in the design doc so others have had a chanceto review and commit to it before continuing our work on this pron sun mar 27 2016 01:18 david karnok notifications@githubcom wrote:> why do you want this single pr to host every modification? there is a lot> to do with 2x and some of them like extend can be incremental> > —> you are receiving this because you commented> > reply to this email directly or view it on github>  || @stealthcode the design doc pr is merged is there anything preventing this pr from proceeding? || @hzsweers nope apologies for the delay but i wont be getting back to this until next week thanks for the reminder  || @stealthcode ping || ill redo this pr in multiple phases ||;;;;0;1;;
3801;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> rename  configurablex  to  standardx  for [value]graph  which better captures what these implementations represent.  note that this work was already started in the past with the abstract standardgraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504;;0;moe sync 2020-02-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> rename configurablex to standardx for [value]graph which better captures what these implementations representnote that this work was already started in the past with the abstract standardgraph tests1be4110bac4c8540053fb4d096fdbb6d28d8a504;;;;;1;1;rename configurablex to standardx for [value]graph which better captures what these implementations representnote that this work was already started in the past with the abstract standardgraph testsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid294879089;
3801;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> rename  configurablex  to  standardx  for [value]graph  which better captures what these implementations represent.  note that this work was already started in the past with the abstract standardgraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504;;0;dialogstojavafx;i have converted a lot of dialogs to javafxi did not test each onesome of them are going to be replaced in the near future (eg the strings dialog and the import of files/drag and drop stuff) so i did not convert themdialogs which need special treatment are marked with todo statementssome of the candidates are the ones that integrate html or the preview pane        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);lets merge this before the size escalates -) thanks a lot for your time and good work @siedlerchr! ||;;;;1;1;checkstyle;
3801;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> rename  configurablex  to  standardx  for [value]graph  which better captures what these implementations represent.  note that this work was already started in the past with the abstract standardgraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504;;0;validate partitioned_by table property;ensure that columns listed in partitioned_by table property for hive connector are valid table columnseg this should fail:```create table t (    col varchar) with (partitioned_by  array[foo])```related to https://githubcom/facebook/presto/issues/3793;this is already ;;;;0;1;;
3801;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> rename  configurablex  to  standardx  for [value]graph  which better captures what these implementations represent.  note that this work was already started in the past with the abstract standardgraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504;;0;publishsubject: onnext not delivered or onnext delivered on wrong thread;"i was writing some automated test to verify the behaviour of publishsubject and i noticed strange and unexpected behaviour when the subject is subscribed on a scheduler if i do not put a sleep after the subscriber i will not get the onnext items but the oncompleted is called on the correct thread if i put a sleep after subscribing the subscriber receives the onnext items but on the wrong thread it receives the onnext items on the thread that called the subjectonnexti wrote some unit test to show the behaviour both tests will fail with rxjava 112 is this a bug or is this expected behavior and where can i find this in the documentation? ``` javaimport orgjunittestimport rxobserverstestsubscriberimport rxsubjectspublishsubjectimport static orgassertjcoreapiassertionsassertthatimport static rxschedulersschedulersnewthreadpublic class publishsubjecttest {    @test    public void subscribeon_whennosleep_thennoonnextreceived() throws interruptedexception {        // given        publishsubject<string> subject  publishsubjectcreate()        thread currentthread  threadcurrentthread()        testsubscriber<string> subscriber  new testsubscriber<>()        // when        subjectsubscribeon(newthread())subscribe(subscriber)        subjectonnext(""one"")        subjectoncompleted()        // then        subscriberawaitterminalevent()        assertthat(subscribergetlastseenthread())isnotsameas(currentthread)        assertthat(subscribergetonnextevents())containsonly(""one"")    }    @test    public void subscribeon_whensleep_thenonnextreceivedbutonwrongthread() throws interruptedexception {        // given        publishsubject<string> subject  publishsubjectcreate()        thread currentthread  threadcurrentthread()        testsubscriber<string> subscriber  new testsubscriber<>()        // when        subjectsubscribeon(newthread())subscribe(subscriber)        threadsleep(2000)        subjectonnext(""one"")        subjectoncompleted()        // then        subscriberawaitterminalevent()        assertthat(subscribergetonnextevents())containsonly(""one"")        assertthat(subscribergetlastseenthread())isnotsameas(currentthread)    }}```";the problem is that you use `subscribeon` instead of `observeon` to move the delivery of events to another thread when you `subscribeon` that delays the real subscription to `publishsubject` by some amount giving enough time to `onnext` to be observed by no one you see only `oncompleted` because `publishsubject` replays the terminal event to late `subscriber`s || thx davidindeed observeon seems to solve the behaviour i was seeing with subsribeon and waiting long enough for the subscription to succeed can you also explain why the terminal event is delivered on the main thread and not on the scheduler thread? || you are racing with the subscription and by chance it is possible the subscription happens in time for oncomplete to pass through directly to the subscriber || hii am not sure about the racing condition explanation because i can reproduce it with a behaviorsubject too (with onnext() called after subscription and timer before it)```@test  public void testsubjectthreadfollowsubscribeon() {    testobserver<string> tester  new testobserver<>()    behaviorsubject<integer> source  behaviorsubjectcreate()    string currentthread  threadcurrentthread()getname()    source        subscribeon(schedulersio())        take(1)        map(o -> threadcurrentthread()getname())        subscribe(tester)    sourceonnext(1)    testerawaitcount(1)    testerassertvalue(threadaftersubscribeon -> !threadaftersubscribeonequals(currentthread))}``` || you still have a race where onnext could find an already subscribed observer and signal the first item on the test thread ||;;;;0;1;;
3802;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memory.  previously this would lead to java.lang.negativearraysizeexception.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> annotate fluentiterable.from(fluentiterable) with @donotcall  relnotes=annotate fluentiterable.from(fluentiterable) with @donotcall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> fixing a typo in some guava javadocs.  relnotes=fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36;;0;moe sync 2020-02-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memorypreviously this would lead to javalangnegativearraysizeexceptione0418c067aea976e3e59e23e035d15177112597a-------<p> annotate fluentiterablefrom(fluentiterable) with @donotcallrelnotesannotate fluentiterablefrom(fluentiterable) with @donotcalle3264687f823752dea2d724d2734b4a18e5c92a3-------<p> fixing a typo in some guava javadocsrelnotesfixing a typo in javadoc5efab94ad9b77695012878c6b7c5a8815c7d2d36;;;;;1;1;fixing a typo in some guava javadocsrelnotesfixing a typo in javadoc-------------created by moe: https://githubcom/google/moemoe_migrated_revid295958517;
3802;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memory.  previously this would lead to java.lang.negativearraysizeexception.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> annotate fluentiterable.from(fluentiterable) with @donotcall  relnotes=annotate fluentiterable.from(fluentiterable) with @donotcall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> fixing a typo in some guava javadocs.  relnotes=fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36;;0;static group not working;" im on jabref 41 and believe that bug #2408 (or something similar) is backi created static groups however all entries from the database appear on it the ordering is random i see 29 correct entries then 600+ entries not assigned to the group then 10 correct and the remaining database![bug jabref]( 41linux 4154-200fc26x86_64 amd64 java 180_161java -versionopenjdk version ""180_161""openjdk runtime environment (build 180_161-b14)openjdk 64-bit server vm (build 25161-b14 mixed mode)fedora 26";@tobiasdiez is this reproducable somehow? || thank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releaseplease make a backup of your db before using this versionwe would like to ask you to use a development build from  and report back if it works for you || im currently on windows using jabref  431 and the bugs seems fixed thank you ||;;;;0;1;;
3802;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memory.  previously this would lead to java.lang.negativearraysizeexception.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> annotate fluentiterable.from(fluentiterable) with @donotcall  relnotes=annotate fluentiterable.from(fluentiterable) with @donotcall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> fixing a typo in some guava javadocs.  relnotes=fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36;;0;add support for s3 encryptionmaterialsprovider to prestos3filesystem;add generic support for s3 encryption materials providers to the hiveconnector so that files in s3 encrypted using client-supplied keys canbe used;thank you for your pull request and welcome to our community we require contributors to sign our contributor license agreement and we dont seem to have you on file in order for us to review and merge your code please sign up at  - and if you have received this in error or have any questions please drop us a line at cla@fbcom  thank you for signing our contributor license agreement we can now accept your code for this (and any) facebook open source project thanks! || is there an eta on when this might be integrated? ||  sorry for the delay this will be in the 0129 release || wooo!  nice thanks  no worries on delays this is awesome-natefrom: david phillips <notifications@githubcom<mailto:notifications@githubcom>>reply-to: facebook/presto <reply@replygithubcom<mailto:reply@replygithubcom>>date: friday december 4 2015 at 4:45 pmto: facebook/presto <presto@noreplygithubcom<mailto:presto@noreplygithubcom>>cc: nate sammons <natesammons@nasdaqcom<mailto:natesammons@nasdaqcom>>subject: re: [presto] add support for s3 encryptionmaterialsprovider to prestos3filesystem (#3802)sorry for the delay this will be in the 0129 release—reply to this email directly or view it on github notice: this e-mail and any attachments are for the exclusive and confidential use of the intended recipient and may constitute non-public information if you received this e-mail in error disclosing copying distributing or taking any action in reliance of this e-mail is strictly prohibited and may be unlawful instead please notify us immediately by return e-mail and promptly delete this message and its attachments from your computer system we do not waive any work product or other applicable legal privilege(s) by the transmission of this message--- ||;;;;0;1;;
3802;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make topkselector ctor throw illegalargumentexception when buffer size is too big to be held in memory.  previously this would lead to java.lang.negativearraysizeexception.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> annotate fluentiterable.from(fluentiterable) with @donotcall  relnotes=annotate fluentiterable.from(fluentiterable) with @donotcall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> fixing a typo in some guava javadocs.  relnotes=fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36;;0;operatorwithlatestfrom;"here is some code in  operatorwithlatestfromjavai feel a little puzzledif(o  empty) we do nothingwhy not add a sentence like `request(1)` to support backpressure```        public void onnext(t t) {            object o  currentget()            if (o ! empty) {                try {                    @suppresswarnings(""unchecked"")                    u u  (u)o                    r result  resultselectorcall(t u)                    sonnext(result)                } catch (throwable e) {                    exceptionsthroworreport(e this)                }            }        }```";because thats what `combinelatest` does this operator allows the other stream to whizz through and just get the latest whenever the main sequence fires || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
3804;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> invalidate delegate iterators during clear() and make fpp tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c;;0;moe sync 2020-02-21;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> invalidate delegate iterators during clear() and make fpp tests more strict2cb0a5968938965027b9fc046f67db565a8cb68c;;;;;1;1;invalidate delegate iterators during clear() and make fpp tests more strictrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid296256794;
3804;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> invalidate delegate iterators during clear() and make fpp tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c;;0;enable travis build for maintable-beta;i think it would be nice to have travis build for maintable-beta that would show us some potential errornous tests oredit// maybe first it is useful to update the localization files to be consistent         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;enable travis build for maintable-betai think it would be nice to have travis build for maintable-beta that would show us some potential errornous tests or;
3804;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> invalidate delegate iterators during clear() and make fpp tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c;;0;fix hive metastore client api stats;; 3803  ||;;;;0;1;;
3804;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> invalidate delegate iterators during clear() and make fpp tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c;;0;how do i edit the marble in the documentation?;for combinelatest operation![marbles]( want to add another color ball before the purple one to indicate that it was discardedbut i dont know how to edit that imageso i asked;"you probably want to file a bug on  || also the source files which generate the images appear to be missing from that repository || @jakewharton thank you || for historical reasons the source for the marble diagrams (an""omnigraffle"" diagram) is checked in at the rxjava wiki: may be time to revisit the decision to keep it thereon mon mar 28 2016 at 2:05 pm sarun rattanasiri <notifications@githubcom> wrote:> > @jakewharton  thank you> reactivex/reactivexgithubio#220>  > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  david m grossplp consulting || ";;;;0;1;;
3805;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010;;0;cant use a dash after a formatter;<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> - i have not tested the latest master version from  as the gui doesnt startjabref version 41 on fedora 27steps to reproduce:1 use a style with a formatter \edition like``` \begin{edition} \edition-th ed- \end{edition}```(i actually need a russian variant the -th variant is here just for example)2 the result is that only ed is printed3 <!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```  paste an excerpt of your log file here  ```</details>;i guess the parsing of the instruction wont work as \edition is not recognized but \editon-thwhere exactly is this used in the ui? || it is used in non-english bibliography entries russian in my case eg i need the following:13-е издwhich in english means:13th ed ||;;;;0;1;;
3805;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010;;0;accept credential cache file path without type prefix;according to  location of the kerberos 5 credentials cache is in the form type:residual if no type prefix is present the file type is assumedthe change is to allow presto cli to accept credential cache location that does not have the type prefix;the same logic is implemented in nifty:  || commit messages should start with an uppercase letterplease add a description to the commit explaining why this is needed || ;;;;0;1;;
3805;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010;;0;using lambdas in rxjava source code;opening to capture discussion regarding retrolambda usage in rxjava i believe that the current thinking is that we will make the following changes:1 change the build to publish a java 16 jar using retrolambda2 change the source code to use lambda expressions are there steps that im missing (ie should there be additional incremental steps)? is there any reason not to proceed with this?;i would think you also want to use animal sniffer to enforce only jdk 6 apis are used || good point thanks @jakewharton is there any concern with ides? for instance when you drill into the implementation source code will eclipse/intellij baulk at lambdas? || thats a good question and worth investigatingive only used it at the application level i can say that line numbers and metadata are preserved such that debugging continues to work well (again only tested in an application though) || reiterating what i brought up in the 2x design decisions pr:> also how would you include sources for the jdk6 distribution since retrolambda only operates on the bytecode? it would make the ide have to decompile the classes to represent them rather than being able to just click in would this not make debugging unnecessarily more tedious and also sacrifice javadoc/comment access?basically if all the jdk-6 compatible classes are generated at compile time what will the consumer see if they try to click into the source code? i happened to come across a [library]( recently that ships retrolambdad code ill try it later and report back || i have mixed feelings about a middle-tier retrolambda recompilation most ides have support for converting a lambda into a regular inner-class even if the project itself is set to java 6 i think we should endure the small inconvenience of using inner classes in testsim closing this issue for now but the **animal sniffer** suggestion is interesting lets discuss adding that to the build process in a separate issue of #4067 ||;;;;0;1;;
3805;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify redundant  collection.addall()  calls.  3800  ae564a1d7c39704e800f04cef427f4c8abd6f010;;3800.0;moe sync 2020-02-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify redundant `collectionaddall()` calls3800ae564a1d7c39704e800f04cef427f4c8abd6f010;;simplify redundant `collectionaddall()` call;simplify redundant `collectionaddall()` call and optimize performance;      clas look good thanks!  || a couple quick thoughts since i sadly doubt that ill be able to dedicate a lot of time to this:- i somewhat like to create the collection on one line and add to it on another _if_ i am then going to also _remove_ from it (or add more to it) like [here]( the multi-line process is a hint that theres going to be more to the collection than just its initial contents that is were not just making a defensive copy however this is a minor point and others might not see it that way plus were usually modifying the collection _immediately_ after creating so theres not much danger of confusion- for cases in which we add objects and then add more objects im not sure that we necessarily improve performance by presizing to the size of the _first_ set of objects like [here]( it might actually be better to accept the default sizethe unfortunate thing is that this code does need some performance tuning and general cleaning i just fear that it would be a big investment || thanks for your code review this pr was submitted for the following reasons : * using the constructor with parameter it can save one time array copy* improving readability and polishing the codebut i agree with your thoughts : * for the contextual semantic unity in a block of code* the performance improvement may be small* more time can be allocated for implementing features and fixing bugsi respect your decision so what should i do? || thanks im going to skip `derivedcollectiongeneratorsjava` since im not sure if that will help or hurt performance (i notice that that code could probably be simplified even further but i left it alone) im looking to merge the rest ||;1;0;simplify redundant `collectionaddall()` calls3800relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid296511169;
3807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutable.  note: this is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3;;0;moe sync 2020-02-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutablenote: this is a pure refactor no coverage is changing1ae455b65162b8a1adf369e24f1d593b5f2886a3;;;;;1;1;refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutablenote: this is a pure refactor no coverage is changingrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297126494;
3807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutable.  note: this is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3;;0;update test order -> execute checkstyle first;checkstyle will fail at first so i think it makes sense to let it execute/start at first        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;update test order -> execute checkstyle firstcheckstyle will fail at first so i think it makes sense to let it execute/start at first;
3807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor abstractnetworktest in the same way as abstractgraphtest was refactored earlier: allow the graph under test to be immutable.  note: this is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3;;0;convert an observable stream to completable;if im not mistaken completable is supposed to be a replacement for things like `observable<void>` but it seems like combining them with observables is messierits possible im doing something weird here but this is what i want to do:given``` javaobservable<data> make storeindatabase(data data)```ideally i would be able to do something like this:``` javacompletable syncdata() {    return make currently this is what i have:``` javacompletable syncdata() {    return make        flatmap(data -> storeindatabase(data)toobservable<void>())        tocompletable()}```;you dont explicitly have to convert it to `observable<void>` first all `tocompletable()` does is basically ignore `onnext()` emissions and listen for a terminal event if you care about non-terminal event emissions you presumably need to make sure youre doing whatever it is you need with them before calling `tocompletable()` || the problem is that `make returns `observable<completable>` and if i call `tocompletable()` on that im not actually waiting for the completable to complete right? but if i call `toobservable()` on the result of `storeindatabase` it will hook up the subscribe correctly my understanding of this is not clear - am i wrong here? || you can do this with some conversions:``` javacompletablemerge(make -> storeindatabase(v)tocompletable()))await()``` || @akarnokd to be clear you are calling this method:( that right?are there other methods that operate on `observable<completable>` like this or is it a special case? || yes `completableconcat` and `completablemergedelayerror` || so now i have the following``` java// givenobservable<data> make storeindatabase(data data)// do workcompletable syncdata() {    return completablemerge(make subscribesyncdata()await()```is this the correct way to accomplish this? || if you want to wait blockingly then yes || ah sorry didnt read your full sample snippet before disregard my earlier comment || it looks like `completablemerge` solves my issue of transforming `observable<completable>` to `completable` then ;;;;0;1;;
3810;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashset fall back to a java.util.linkedhashset if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> make lenienttostring easier for nullness-analysis tools to understand.  and i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?  as far as tools know  string.valueof is capable of throwing an error or runtimeexception  even when it s called with a parameter whose values is null. thus  tools conclude that the flow of the program might reach  o.getclass().getname()  when  o  is null. that would in turn produce nullpointerexception.  tools might not even be wrong  since string.valueof could produce a stackoverflowerror if we were *just* about to run out of space. of course  in that case we re going to have problems in the catch() block no matter what :)  to avoid this  we check for null in lenienttostring itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> make gwt compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> update public suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> rename  configurablex  to  standardx  for network  which better captures what these implementations represent.  note that this work was already done for [value]graph.  ef37cf45afbcd44a75de665b03966a075af7727a;;0;moe sync 2020-02-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make compact(linked)hashset fall back to a javautillinkedhashset if hash flooding is detected just as the immutable collections doa97eccf35da1290e69a2b95375b10cbced95c7b6-------<p> make lenienttostring easier for nullness-analysis tools to understandand i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?as far as tools know stringvalueof is capable of throwing an error or runtimeexception even when its called with a parameter whose values is null thus tools conclude that the flow of the program might reach `ogetclass()getname()` when `o` is null that would in turn produce nullpointerexceptiontools might not even be wrong since stringvalueof could produce a stackoverflowerror if we were *just* about to run out of space of course in that case were going to have problems in the catch() block no matter what :)to avoid this we check for null in lenienttostring itselfe9d2fcc35213b848d2904e82768dc5d42d33039a-------<p> make gwt compilation of tests no longer flakybb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2-------<p> update public suffix data1323cda77015764438d4febdd83240c006b9da48-------<p> rename configurablex to standardx for network which better captures what these implementations representnote that this work was already done for [value]graphef37cf45afbcd44a75de665b03966a075af7727a;;;;;1;1;rename configurablex to standardx for network which better captures what these implementations representnote that this work was already done for [value]graphrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297602755;
3810;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashset fall back to a java.util.linkedhashset if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> make lenienttostring easier for nullness-analysis tools to understand.  and i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?  as far as tools know  string.valueof is capable of throwing an error or runtimeexception  even when it s called with a parameter whose values is null. thus  tools conclude that the flow of the program might reach  o.getclass().getname()  when  o  is null. that would in turn produce nullpointerexception.  tools might not even be wrong  since string.valueof could produce a stackoverflowerror if we were *just* about to run out of space. of course  in that case we re going to have problems in the catch() block no matter what :)  to avoid this  we check for null in lenienttostring itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> make gwt compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> update public suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> rename  configurablex  to  standardx  for network  which better captures what these implementations represent.  note that this work was already done for [value]graph.  ef37cf45afbcd44a75de665b03966a075af7727a;;0;freeze in entry editor freeze when switching from source to general in different entries (reproducable);jabref 42-dev--snapshot--2018-03-05--master--0d2620309windows 10 100 amd64 java 180_162steps to reproduce:1 create a bibtex mode db with some entries 2 one entry a should have a pdf link and a another pdf file in the folder so that the autolink files finder kicks in3 create another entry b with no files attached4 open the entry a in the  entry editor and go to general tab5 go to source tab in entry a6 go to entry b  click on any other tab -> freezewith this combination i could reproduce the error everytime exception logged: ```uncaught exception occurred in thread[javafx application thread5main]javalangindexoutofboundsexception: [-2147483648 11) is not a valid range within [0 11)	at orgreactfxutillistscheckrange(listsjava:128)	at orgreactfxutillistscheckrange(listsjava:123)	at orgreactfxcollectionmemoizationlistimplforget(memoizationlistjava:184)	at orgfxmiscflowlesscelllistmanagercropto(celllistmanagerjava:82)	at orgfxmiscflowlesscellpositionercropto(cellpositionerjava:29)	at orgfxmiscflowlessnavigatorcroptoneighborhoodof(navigatorjava:227)	at orgfxmiscflowlessnavigatorplacestartatmaycrop(navigatorjava:200)	at orgfxmiscflowlessnavigatorvisit(navigatorjava:129)	at orgfxmiscflowlessstartoffstartaccept(targetpositionjava:85)	at orgfxmiscflowlessnavigatorlayoutchildren(navigatorjava:78)	at javafxsceneparentlayout(parentjava:1087)	at orgfxmiscflowlessvirtualflowlayoutchildren(virtualflowjava:257)	at javafxsceneparentlayout(parentjava:1087)	at javafxsceneparentlayout(parentjava:1093)	at javafxsceneparentlayout(parentjava:1093)	at javafxsceneparentlayout(parentjava:1093)	at javafxsceneparentlayout(parentjava:1093)	at javafxsceneparentlayout(parentjava:1093)	at javafxscenescenedolayoutpass(scenejava:552)	at javafxscenescenepreferredsize(scenejava:1646)	at javafxscenesceneimpl_preferredsize(scenejava:1720)	at javafxstagewindow$9invalidated(windowjava:864)	at javafxbeanspropertybooleanpropertybasemarkinvalid(booleanpropertybasejava:109)	at javafxbeanspropertybooleanpropertybaseset(booleanpropertybasejava:144)	at javafxstagewindowsetshowing(windowjava:940)	at javafxstagewindowshow(windowjava:955)	at comsunjavafxstageembeddedwindowshow(embeddedwindowjava:58)	at javafxembedswingjfxpanellambda$addnotify$51(jfxpaneljava:833)	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295)	at javasecurityaccesscontrollerdoprivileged(native method)	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294)	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95)	at comsunglassuiwinwinapplication_runloop(native method)	at comsunglassuiwinwinapplicationlambda$null$147(winapplicationjava:177)	at javalangthreadrun(unknown source)```;could you also reproduce this issue for the maintable branch? || maintable beta is fine || ok then i would propose to ignore this issue for 42 since in my opinion it is not a blocker for a release || yeah okay agree  ||;;;;0;1;;
3810;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashset fall back to a java.util.linkedhashset if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> make lenienttostring easier for nullness-analysis tools to understand.  and i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?  as far as tools know  string.valueof is capable of throwing an error or runtimeexception  even when it s called with a parameter whose values is null. thus  tools conclude that the flow of the program might reach  o.getclass().getname()  when  o  is null. that would in turn produce nullpointerexception.  tools might not even be wrong  since string.valueof could produce a stackoverflowerror if we were *just* about to run out of space. of course  in that case we re going to have problems in the catch() block no matter what :)  to avoid this  we check for null in lenienttostring itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> make gwt compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> update public suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> rename  configurablex  to  standardx  for network  which better captures what these implementations represent.  note that this work was already done for [value]graph.  ef37cf45afbcd44a75de665b03966a075af7727a;;0;add table_type hive property for ctas queries;currently all tables created with presto ctas queries are managed tables but we dont always want that as we dont want our data to be deleted on a `drop table`  this pr adds support for creating external tables by adding a new hive table propertybtw currently `table_type` is passed directly to the metastore call should we restrict the table type to only `managed_table` and `external_table` (there are also `virtual_view` and `index_table` types in `tabletype` enum)?;related: #3893 || sorry for the delay i missed seeing this beforefirst off we definitely dont want to pass arbitrary types so lets assume this is a boolean `external_table` flag this seems like a strange feature external tables seem to be meant reference data that is externally managed (by creating a metadata entry pointing at the existing data) why would you want to create a table with data but then leave the data orphaned in hdfs or s3 when the metadata is dropped?if the intent is to protect against accidentally dropping the table what if we support the hive `no_drop` protection flag? we could have a table property to set it on creation and a callable procedure to enable/disable (or directly change the table property if we decide to support altering properties of existing tables) || @electrum my intent was to protect the data from being dropped i wasnt aware of the `no_drop` flag and it sounds like a good start for that [btw this flag will be removed in hive 20 (please see [this]( true support of external tables i guess we need to also have a location property in `create table` for now i am closing this pr if i have time i will take a look at the `no_drop` flag for drop protection || @nezihyigitbasi do you have any plans to restart work on this pr? support for creating external tables in presto would be helpful for us too since that would simplify writing some of the tests for s3 || @amrutagokhale unfortunately no you can work on it if you want to || +1 need presto to be able to mount quickly rather than go through hive || @amrutagokhale can you explain the exact problem? are you trying to create tables (ie write new data) on s3? or reference existing data on s3? || @electrum we wanted to create new tables in s3 for writing s3 tests @rschlussel wrote these tests in here: [tests3hiveconnectorjava]( since presto doesnt yet support creating external tables the tests require that the tables have already been created rather creating them on-the-fly ||;;;;0;1;;
3810;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make compact(linked)hashset fall back to a java.util.linkedhashset if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> make lenienttostring easier for nullness-analysis tools to understand.  and i think prevent it from turning a stackoverflowerror into a nullpointerexception in unlikely cases?  as far as tools know  string.valueof is capable of throwing an error or runtimeexception  even when it s called with a parameter whose values is null. thus  tools conclude that the flow of the program might reach  o.getclass().getname()  when  o  is null. that would in turn produce nullpointerexception.  tools might not even be wrong  since string.valueof could produce a stackoverflowerror if we were *just* about to run out of space. of course  in that case we re going to have problems in the catch() block no matter what :)  to avoid this  we check for null in lenienttostring itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> make gwt compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> update public suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> rename  configurablex  to  standardx  for network  which better captures what these implementations represent.  note that this work was already done for [value]graph.  ef37cf45afbcd44a75de665b03966a075af7727a;;0;what are scalar and notificationlite?;"there are some terms you guys used""scalar"" i see it in many places (in flatmap for instance)what is it and why it call that way?what is the concern of notificationlite what kind of code should be there?to me it look like a class where you store a bunch of helper methods with parameterized valuethe methods there look almost static except it is parameterized at instance leveli am in the middle of exploring things here it looks like some spaghetti and i just pick on random part of it without knowing which part is the beginning or end";"notificationlite was the consolidation of a pattern that i saw to implement some operators like merge it is convenient to serialize the oncomplete and onerror in the same buffer/queue as the onnext values the simple way to do this is with a `materialize()` that turns all three of those into [notification]( the problem with doing that is there is huge overhead for the allocation of each notification object for each onnextnotifcationlite gets around this by putting a type safe wrapper on some very unsafe operations it uses the value object of type t _as_ the onnext notification avoiding the allocation using instanceof and  to check for `onerror(t)` `oncompleted()` and `onnext(null)` notifications in the end the only time notificationlite does an allocation is for wrapping onerror which we hope is exceptionalnotifcationlite is intended only for use inside operators where one piece of code has complete control of the values going in and out of internal buffers/queues to ensure there are no classcastexceptions || we refer to ""scalar"" in respect of constant references to a single object for example `observablejust(1)` is a scalar that is immediately available and thus can be optimized away in certain situations note however that the reference might not point to an immutable data structure`notificationlite` is an internal class that does light wrapping of `onxxx` events in a more light-weight fashion than `notification` does by avoiding allocation in the most common `onnext` case it turns `null` and `oncompleted` into a constant object and wraps `onerror` into a private inner class while leaving non-null `onnext` as they are however lately many operators dont use all of its feature set but only the `null` wrapping to work with queues that dont support `null` elements the other events now end up in fields of the operator `throwable error volatile boolean done` and are ""moved"" outside the queue as @abersnaze mentioned one should not leak notificationlite values because it can have unexpected consequences: early sequence termination or `classcastexception` a small inconvenience with `notificationlite` is its instance-style that requires a local variable or field for it when required for ""type safety"" however after 100s of operators i never found a case where a queues entry and exit environment differed in type plus any mistake would show up as `classcastexception` in test almost right away || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
3811;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> delete unused method  71f625f15620bf4893322011536977459321c1a5;;0;moe sync 2020-02-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove remaining documentation references to configurable implementations9c3f315f62358c54a0e03fda782eba0e8d39419f-------<p> delete unused method71f625f15620bf4893322011536977459321c1a5;;;;;1;1;delete unused methodrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid297620200;
3811;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> delete unused method  71f625f15620bf4893322011536977459321c1a5;;0;exception in entry editor (braces dont match);<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsversion:jabref 41linux 440-104-generic amd64 java 180_161steps to reproduce:1 open an entry with a title with upper case letters but no braces2 add braces and save<details>18 58228 [pool-4-thread-1] error orgjabreflogicautosaveandbackupbackupmanager - error while saving fileorgjabreflogicexportersaveexception: error in field title: braces dont match	at orgjabreflogicexporterbibtexdatabasewriterwriteentry(bibtexdatabasewriterjava:169) ~[jabref-41jar:?]	at orgjabreflogicexporterbibdatabasewritersavepartofdatabase(bibdatabasewriterjava:198) ~[jabref-41jar:?]	at orgjabreflogicexporterbibdatabasewritersavedatabase(bibdatabasewriterjava:150) ~[jabref-41jar:?]	at orgjabreflogicautosaveandbackupbackupmanagerperformbackup(backupmanagerjava:123) ~[jabref-41jar:?]	at javautiloptionalifpresent(optionaljava:159) ~[?:180_161]	at orgjabreflogicautosaveandbackupbackupmanagerlambda$new$0(backupmanagerjava:49) ~[jabref-41jar:?]	at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511) [?:180_161]	at javautilconcurrentfuturetaskrun(futuretaskjava:266) [?:180_161]	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149) [?:180_161]	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624) [?:180_161]	at javalangthreadrun(threadjava:748) [?:180_161]file: aboutdialogfxml not found attempting with camel case</details>;"thanks for reporting this is the autosave kicking in that is trying to save the file while the braces are still incompletewhat should be changed here? should anything be changed? the exception doesnt break anything jabref continues to work and we cant exactly stop the autosave from attempting to save || i think the exception should not be shown in this case it is confusing and might hide other issues (for example if jabref hangs and i try to find the reason i naturally look at the list of exceptions and having an unrelated exception is distracting) || yes i understand and i generally agree but how should this go about? the autosave saves everything immediately after adding an opening brace and trying to save jabref cannot just swallow the error because it does not know if the user will ever add a closing brace and if the user does not do that then the error message is valid and importantas far as i understand the solution to your problem is probably to disable autosave || we could trigger autosave on field focus change eg when the user leaves the fielddont we already do this with the coarse change event?  || what about replacing        } catch (saveexception e) {            loggererror(""error while saving file: "" + egetlocalizedmessage())        }````in this way the stacktrace is not displayed (which is unimportant for these kind of exceptions that are expected to happen to some extend)  || @siedlerchr the problem in this is that you tie the correctness of the autosave to some future event which may never be triggered due to exceptional circumstances  or could easily be swallowed somewhere else and you tie the autosave logic to gui events i am very much in favor of the autosave doing the local decision based on entry events onlyi really like the suggestion by @tobiasdiez  || but why show a message at the console at all? why not just mark the erroneous field with a warning sign (as it is done now)? || @erelsgl there can be cases where the save fails that is not visible in the entry editor an example would be that the file to save to is on a network drive that has disappeared in the meantime in that case it is good to have a message on the consolei proposed a pr #3865 that skips reporting any invalid field errors during autosave they no longer make it into the log but the warning sign stays there a regular save operation will still trigger the warning dialog || ";;;;0;1;;
3811;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> delete unused method  71f625f15620bf4893322011536977459321c1a5;;0;adding html_entity_escape function to presto;@martint @electrum  please review;@martint @cberner please review || ping || thank you for your pull request  as you may know we require contributors to sign our contributor license agreement and we dont seem to have you on file and listed as active anymore  in order for us to review and merge your code please email cla@fbcom with your details so we can update your status || thank you for your pull request  as you may know we require contributors to sign our contributor license agreement and we dont seem to have you on file and listed as active anymore  in order for us to review and merge your code please email cla@fbcom with your details so we can update your status || thank you for your pull request  as you may know we require contributors to sign our contributor license agreement and we dont seem to have you on file and listed as active anymore  in order for us to review and merge your code please email cla@fbcom with your details so we can update your status || @electrum could you take a look at the syntax? || this pull request has been automatically marked as stale because it has not had recent activity if youd still like this pr merged please comment on the task make sure youve addressed reviewer comments and rebase on the latest master thank you for your contributions! ||;;;;0;1;;
3811;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-02-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> delete unused method  71f625f15620bf4893322011536977459321c1a5;;0;about subscriber;when i watch the source code of operators i found that in order to keep the unsubscribe chain the parent subscriber always created by two way:```subscriber<t> parent  new subscriber(child){  }```or```subscriber<t> parent  new subscriber{  }childadd(parent)```i know that the first one can pass through the producerand what else can decide the choosing?;if the parent may issue `unsubscribe` on its own you have to chose the second pattern because otherwise the call may go downstream and cause trouble || @akarnokd thanks a lotit is really helpful ||;;;;0;1;;
3814;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make nullwriter().append() (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       but that s not true  as the docs go on to say:      csq - the character sequence to append. if csq is null  then the four characters  null  are appended to this writer.      accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:  %20int %20int%29  credit to the checker framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785;;0;moe sync 2020-03-02;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" thats not true as the docs go on to say:""""""csq - the character sequence to append if csq is null then the four characters ""null"" are appended to this writer""""""accepting null in the 2-arg method is arguably even weirder but at least the docs call it out more prominently: to the checker framework for identifying this buga27746a876d9426a7252460ef288f4abf9c0d785";;;;;1;1;"make nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" thats not true as the docs go on to say:""""""csq - the character sequence to append if csq is null then the four characters ""null"" are appended to this writer""""""accepting null in the 2-arg method is arguably even weirder but at least the docs call it out more prominently: to the checker framework for identifying this bugrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid298388993";
3814;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make nullwriter().append() (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       but that s not true  as the docs go on to say:      csq - the character sequence to append. if csq is null  then the four characters  null  are appended to this writer.      accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:  %20int %20int%29  credit to the checker framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785;;0;automatic bug report - 20180307164431;jabref 41mac os x 10133 x86_64 java 180_161steps to reproduce:1 2 3 <details><summary>detail information:</summary>```opening: /users/kimk13/dropbox/research/dissertn_bibbiberror while fetching from google scholarorgjabreflogicimporterfetcherexception: this might be caused by reaching the traffic limitation of google scholar (see help for details)	at orgjabreflogicimporterfetchergooglescholarperformsearch(googlescholarjava:134)	at orgjabrefguiimporterfetchersearchbasedentryfetcherprocessquery(searchbasedentryfetcherjava:37)	at orgjabrefguiimporterfetchergeneralfetcherlambda$actionperformed$5(generalfetcherjava:216)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)	at javalangthreadrun(threadjava:748)caused by: javaioioexception: server returned  response code: 503 for url:  at sunreflectnativeconstructoraccessorimplnewinstance0(native method)	at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:62)	at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)	at javalangreflectconstructornewinstance(constructorjava:423)	at sunnetwwwprotocol at sunnetwwwprotocol at javasecurityaccesscontrollerdoprivileged(native method)	at sunnetwwwprotocol at sunnetwwwprotocol at sunnetwwwprotocol at sunnetwwwprotocol at orgjabreflogicneturldownloadasstring(urldownloadjava:196)	at orgjabreflogicneturldownloadasstring(urldownloadjava:210)	at orgjabreflogicimporterfetchergooglescholaraddhitsfromquery(googlescholarjava:142)	at orgjabreflogicimporterfetchergooglescholarperformsearch(googlescholarjava:118)	 5 morecaused by: javaioioexception: server returned  response code: 503 for url:  at sunnetwwwprotocol at sunnetwwwprotocol at javanet at sunnetwwwprotocol at orgjabreflogicneturldownloadopenconnection(urldownloadjava:306)	 9 more```</details>;as google scholar works  here it is probably that you reached the server limit and are now blocked for a while from using google scholar ||;;;;0;1;;
3814;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make nullwriter().append() (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       but that s not true  as the docs go on to say:      csq - the character sequence to append. if csq is null  then the four characters  null  are appended to this writer.      accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:  %20int %20int%29  credit to the checker framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785;;0;fix docs for verifier;@electrum please review;"use the imperative mood for commit messages:  it should be ""fix"" not """" || ok || ping ||  ";;;;0;1;;
3814;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make nullwriter().append() (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       but that s not true  as the docs go on to say:      csq - the character sequence to append. if csq is null  then the four characters  null  are appended to this writer.      accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently:  %20int %20int%29  credit to the checker framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785;;0;1x: fix prolonged producer retention in switchonnext;there are two cases when the operator `switchonnext` / `switchmap` retained parts of an earlier source through its `producer` via the arbiter structure:- when a backpressure-supporting source was followed by a unsupporting source which never sets a new producer keeping the old one there indefinitely- when a backpressure-supporting source terminated but was not followed by any other source for longer period of timethe fix swaps in a null-producer when a new source is encountered and when an old source terminates the swap is guarded by the current index so outdated events wont interfere with newer sequences**edit** a `concurrentmodificationexception` because the `queue` wasnt nulled out after assigning it to `localqueue` plus ive added a test to check the async-source and async-inner doesnt cause backpressure exceptions;updated with another fix + test || closing this and will post a fresh pr with a completely rewritten operator as it has backpressure problems as well (overflow/hang) ||;;;;0;1;;
3815;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store each result in a  present<v>  instance instead of an optional<v>.  we can t store a plain v because we need to distinguish between optional.absent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete().collecttolist() (#1519)  which is likely to omit failures instead of mapping them to null as successfulaslist does).  we may have problems using optional when we adopt new nullability annotations  since optional<v> might not be a valid instantiation when v is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> migrate from @monotonicnonnull to @nullable.  the features of @monotonicnonnull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  and @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt.    d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  make nullwriter().append(...) (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       29992f2f557770a4c52c78f47750ae12b26d72fd;;0;moe sync 2020-03-04;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> store each result in a ""present<v>"" instance instead of an optional<v>we cant store a plain v because we need to distinguish between optionalabsent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete()collecttolist() (#1519) which is likely to omit failures instead of mapping them to null as successfulaslist does)we may have problems using optional when we adopt new nullability annotations since optional<v> might not be a valid instantiation when v is instantiated with a nullable typee371bf1af65c4c6727d1194fd59ffcc99a8ea084-------<p> migrate from @monotonicnonnull to @nullablethe features of @monotonicnonnull dont buy us anything in our use case since we check the fields for null on every access anywayand @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break8a32d0b35e3c8342ef1cb503de9ef2881958ad68-------<p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54dmake nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())""""""https://docsoraclecom/javase/7/docs/api/java/io/writerhtml#app29992f2f557770a4c52c78f47750ae12b26d72fd";;;;;1;1;"roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54dmake nullwriter()append() (both overloads) accept a null charsequencethe docs of writer are misleading:""""""an invocation of this method of the form outappend(csq) behaves in exactly the same way as the invocation     outwrite(csqtostring())"""""" by moe: https://githubcom/google/moemoe_migrated_revid298459337";
3815;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store each result in a  present<v>  instance instead of an optional<v>.  we can t store a plain v because we need to distinguish between optional.absent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete().collecttolist() (#1519)  which is likely to omit failures instead of mapping them to null as successfulaslist does).  we may have problems using optional when we adopt new nullability annotations  since optional<v> might not be a valid instantiation when v is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> migrate from @monotonicnonnull to @nullable.  the features of @monotonicnonnull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  and @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt.    d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  make nullwriter().append(...) (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       29992f2f557770a4c52c78f47750ae12b26d72fd;;0;adjust eclipse style to intellij (line wrapping);has intellij one or two default indendation lines? @tobiasdiez i now changed to align on column[jabrefmoddedstylesettingsxmltxt](https://githubcom/jabref/jabref/files/1791055/jabrefmoddedstylesettingsxmltxt)(https://user-imagesentcom/320228/37120788-a68af3be-225b-11e8-874b-a7874005c6eapng)![grafik](https://user-imagesgithubusercontentcom/320228/37120852-d567d5e4-225b-11e8-91f4-88498c86fdd3png)![grafik](https://user-imagesgithubusercontentcom/320228/37120873-e470f9da-225b-11e8-9c70-d633aad4823bpng)![grafik](https://user-imagesgithubusercontentcom/320228/37120884-f4e0b300-225b-11e8-8bae-2a78b9e1c458png);"what do you mean by ""indendation lines""?if you did not already change it please dont forget to tweak the ""chain and align on dot"" policies ie something like````javaobjectfoo()bar()      bar2()      bar3()````should be considered correct and not be changed || align on dot is not a direct option in eclipse thats controlled by the indentation columns and wrapping polices thats why i included a screenshot but note that in your examples is only correct if all operate on the same object if  || mhh i couldnt spot such a chain call in your screenshots this is why i asked again according to  the option `indent on column` corresponds to the ""align on dot"" (and this option is now activated accordingly to your screenshots) moreover ""line wrapping policy"" should be set to something not so aggressive i think you should create pr with these changes || @siedlerchr can this be closed? || ";;;;0;1;;
3815;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store each result in a  present<v>  instance instead of an optional<v>.  we can t store a plain v because we need to distinguish between optional.absent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete().collecttolist() (#1519)  which is likely to omit failures instead of mapping them to null as successfulaslist does).  we may have problems using optional when we adopt new nullability annotations  since optional<v> might not be a valid instantiation when v is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> migrate from @monotonicnonnull to @nullable.  the features of @monotonicnonnull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  and @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt.    d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  make nullwriter().append(...) (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       29992f2f557770a4c52c78f47750ae12b26d72fd;;0;show partitions from <table> is slow;show partitions from table is slow if there are many partitions talked to chris and well introduce a map to avoid duplicate computation; || ;;;;0;1;;
3815;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store each result in a  present<v>  instance instead of an optional<v>.  we can t store a plain v because we need to distinguish between optional.absent() and null (at least in the google-internal successfulasmap -- and eventually in whenallcomplete().collecttolist() (#1519)  which is likely to omit failures instead of mapping them to null as successfulaslist does).  we may have problems using optional when we adopt new nullability annotations  since optional<v> might not be a valid instantiation when v is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> migrate from @monotonicnonnull to @nullable.  the features of @monotonicnonnull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  and @monotonicnonnull is likely not to be available in the set of nullness annotations we adopt.    d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  make nullwriter().append(...) (both overloads) accept a null charsequence.  the docs of writer are misleading:      an invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.tostring())       29992f2f557770a4c52c78f47750ae12b26d72fd;;0;1x provide public constant instead of unsafeaccessisunsafeavailable();motivation: save some nanoseconds on jvm and a little bit more on android new construction will also be easier for jit;i guess this single line should be inlined by jit are you worrying about some old android versions without jit? || rxjava doesnt support android devices which lacked a jit because they onlyhave java 5 apison thu mar 31 2016 at 3:14 pm shixiong zhu notifications@githubcomwrote:> i guess this single line should be inlined by jit are you worrying about> some old android versions without jit?> > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  || yes `if (unsafeaccessisunsafeavailable())` should be interpreted and inlined in places but it wont be immediate and jit will have to figure that out also i think itll have to do it again for every place where we use this method but not sureregarding android afaik: from android 23 to 44 it has dalvik vm that has jit from android 5 to 6 it has art without jit upcoming android n release will have art with jitidea is: if we can do something a little bit more efficiently and it doesnt make code much worse why not || i dont know || totally up to you its nanooptimization in `internal` package very easy to go back basically ctrl + r one to another// -1 method for android btw haha || i think the reason for this should be that its just a bit cleaner inlined and one less method perf isnt really a good or measurable heuristic for this maybe theres an argument for keeping the method for testing purposes but i doubt people are mocking this || we have trouble with samsung devices again could you include a check for a system property named `rxunsafe-disable` (content value irrelevant) and thus force is_unsafe_available to be false? || @akarnokd to not mix refactoring with new logic ive opened separate pr for system property #3829feel free to merge in any order@hzsweers at the moment i dont see any profit in using method and im not sure that somebody is mocking static method (powermock?) if ill need it ill rewrite value of `unsafe` field via reflection || was just chiming in i doubt anyone us mocking it and it is cleaner so i say go for it || in term of performance i dont think the impact will be measurable (even in interpreted mode) the method will be under the default threshold for trivial method (6 for hotspot) and will be inlined as soon as the caller is compiled [reference code in openjdk]( only remaining question is what is cleaner:`unsafeaccessisunsafeavailable()` or `unsafeaccessis_unsafe_available` ?i prefer the method call || as we may add other logic into `isunsafeavailable` in future (eg #3829) i prefer the method call too || id keep this as a method as well || ok ||;;;;0;1;;
3818;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76;;0;moe sync 2020-03-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> document that our racy access is safe2c9301827eab9df3769c09ca1ae74c7c8673ea76;;;;;1;1;document that our racy access is saferelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid299431193;
3818;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76;;0;exception when trying to save linked file;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-03-06--master--bb471a26dlinux 440-104-generic amd64 java 180_161steps to reproduce:1 create an entry with a url leading to a pdf file like this:  right-click the entry in the entry table3 choose ""copy linked files to folder""4 choose your home folder<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>file: copyfilesdialogfxml not found attempting with camel case10 05694 [javafx application thread] error orgjabreffallbackexceptionhandler - uncaught exception occurred in thread[javafx application thread5main]javalangillegalstateexception: cannot load orgjabrefguicopyfilescopyfilesdialog	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:101) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comairhacksafterburnerviewsfxmlviewinitializefxmlloader(fxmlviewjava:125) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comairhacksafterburnerviewsfxmlviewgetview(fxmlviewjava:137) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguiabstractviewgetview(abstractviewjava:28) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesdialogviewshow(copyfilesdialogviewjava:25) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesactionshowdialog(copyfilesactionjava:63) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesactionlambda$startserviceandshowprogessdialog$3(copyfilesactionjava:58) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295) ~[jfxrtjar:?]	at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_161]	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294) ~[jfxrtjar:?]	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95) ~[jfxrtjar:?]	at comsunglassuigtkgtkapplication_runloop(native method) ~[jfxrtjar:?]	at comsunglassuigtkgtkapplicationlambda$null$48(gtkapplicationjava:139) ~[jfxrtjar:?]	at javalangthreadrun(threadjava:748) [?:180_161]caused by: javafxfxmlloadexception: file:/home/erelsgl/dropbox/papers/jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar!/org/jabref/gui/copyfiles/copyfilesdialogfxml	at javafxfxmlfxmlloaderconstructloadexception(fxmlloaderjava:2601) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2571) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 morecaused by: javalangreflectinvocationtargetexception	at sunreflectnativemethodaccessorimplinvoke0(native method) ~[?:180_161]	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62) ~[?:180_161]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmisctrampolineinvoke(methodutiljava:71) ~[?:180_161]	at sunreflectgeneratedmethodaccessor6invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmiscmethodutilinvoke(methodutiljava:275) ~[?:180_161]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2566) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 morecaused by: javalangnullpointerexception	at javautilabstractcollectionaddall(abstractcollectionjava:343) ~[?:180_161]	at javafxcollectionsmodifiableobservablelistbaseaddall(modifiableobservablelistbasejava:99) ~[jfxrtjar:?]	at javafxbeansbindinglistexpressionaddall(listexpressionjava:266) ~[jfxrtjar:?]	at orgjabrefguicopyfilescopyfilesdialogviewmodel<init>(copyfilesdialogviewmodeljava:14) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesdialogcontrollerinitialize(copyfilesdialogcontrollerjava:34) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at sunreflectnativemethodaccessorimplinvoke0(native method) ~[?:180_161]	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62) ~[?:180_161]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmisctrampolineinvoke(methodutiljava:71) ~[?:180_161]	at sunreflectgeneratedmethodaccessor6invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmiscmethodutilinvoke(methodutiljava:275) ~[?:180_161]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2566) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 more</details>";"this error has probably todo with the file annotation tab one line in the code needs to be adapted  || thank you for your report this issue should be  now in the latest development version could you please check the build from  || now i do not see the exception anymore but the file is not downloaded - i get an error dialog box saying ""no content in table"" || yes thats right the functionality is only for copying exiting linked physical files of an entry to an external folderwhat you want to do is in the entry  eiditor -> general tab -> download from url  || @siedlerchr could you please update the dialog and show are more helpful message something like ""no file to copy"" || ";;;;0;1;;
3818;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76;;0;fix formatting for schemadao;;;;;;0;1;;
3818;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76;;0;1x fromcallable() @experimental -> @beta;part of #3816;`testqueuefullemitserrorwithvaryingbuffersize` is an unreliable test i already  in #3795  ;;;;1;1;1x fromcallable() @experimental -> @beta;
3819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac;;0;moe sync 2020-03-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessorsa8d9fcb85edea8f185af28da6b4e12f2636e59a6-------<p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removed34ed9b2c6d258e867b043401ebd9614a175476b8-------<p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removed6dfb447e78c21e1e206cb91453f4e4e03e6b261b-------<p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treeee6595018132ed9e859152f0d11450598c168774-------<p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktestthis is similar to an earlier refector of the abstractgraphtest tree45bb762daf790b278f7ceaaab8c94575b70df32d-------<p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktestthis is similar to an earlier refector of the abstractgraphtest treenote: this is a pure refactor: no tests were added or removedbd328cd0dfeb89d27225cf9b4caecc5756ed42b3-------<p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treec5d8c5b19184f54be74b27d56e7d4f29824fdeac;;;;;1;1;make standardmutabledirectednetworktest parameterized so that it tests both with and without self loopsthis is similar to an earlier refector of the abstractgraphtest treerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid300064412;
3819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac;;0;trouble starting jabref 41 on linux (ubuntu 1604);<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref version 41 <!-- version as shown in the about box --> on ubuntu 1604 <!-- windows 10|ubuntu 1404|mac os x 108| --><!-- hint: if you use a development version (available at  ensure that you use the latest one -->steps to reproduce:1 download jabref-41jar from the sourceforge project page2 attempt to run it using `java -jar jabref-41jar`i am using openjdk version 8u151-b12-0ubuntu016042 distributed by ubuntu<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>command line output</summary>    ```  error: could not find or load main class orgjabrefjabrefmain  ```</details>;bonus info: jabref 34 which i have lying around from earlier works just fine in my set-up || see  faq for linux you are missing the openjfx package ||;;;;0;1;;
3819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac;;0;skip precomputed hash for bigint grouped aggregation;bigint grouped aggregation has special operators that do not use precomputed hash so we can skip hash generation to save network and memory;for plans involving distributed joins with aggregations on either side we will still precompute the hash because the exchange is added after the project  || ;;;;0;1;;
3819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> simplify abstractgraphtest by replacing allowsselfloops() and incidentedgeorder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> simplify the abstractnetworktest tree (undirected branch): delete standardsimpleundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> move all tests from standardmutableundirectednetworktest to abstractstandardundirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> make standardmutableundirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> simplify the abstractnetworktest tree (directed branch): delete standardsimpledirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> move all tests from standardmutabledirectednetworktest to abstractstandarddirectednetworktest  this is similar to an earlier refector of the abstractgraphtest tree.  note: this is a pure refactor: no tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> make standardmutabledirectednetworktest parameterized so that it tests both with and without self loops.  this is similar to an earlier refector of the abstractgraphtest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac;;0;1x: flaky test operatorobserveontesttestqueuefullemitserrorwithvaryingbuffersize;fails constantly on my dev machine today and now i [saw it on travis]( > testqueuefullemitserrorwithvaryingbuffersize failed    javalangassertionerror: expected:<1> but was:<0>        at orgjunitassertfail(assertjava:93)        at orgjunitassertfailnotequals(assertjava:647)        at orgjunitassertassertequals(assertjava:128)        at orgjunitassertassertequals(assertjava:472)        at orgjunitassertassertequals(assertjava:456)        at rxinternaloperatorsoperatorobserveontesttestqueuefullemitserrorwithvaryingbuffersize(operatorobserveontestjava:631)```;yep  in #3795 awaiting review || fixed separately in #3825 ||;;;;0;1;;
3823;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replace thread.currentthread().interrupted() with thread.interrupted() or thread.currentthread().interrupt()  whichever seems appropriate.  thread.interrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)  thread.currentthread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> replace threadcurrentthread()interrupted() with threadinterrupted() or threadcurrentthread()interrupt() whichever seems appropriatethreadinterrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)threadcurrentthread()interrupt(): interrupts the current thread744b356fa6769d4ae6924d649ac20da6c7e748ac;;;;;1;1;replace threadcurrentthread()interrupted() with threadinterrupted() or threadcurrentthread()interrupt() whichever seems appropriatethreadinterrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)threadcurrentthread()interrupt(): interrupts the current thread-------------created by moe: https://githubcom/google/moemoe_migrated_revid301162686;
3823;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replace thread.currentthread().interrupted() with thread.interrupted() or thread.currentthread().interrupt()  whichever seems appropriate.  thread.interrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)  thread.currentthread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac;;0;file annotations: remove line breaks increase width and reduce font size;"jabref 42-dev--snapshot--2018-03-09--master--988fb54a9windows 81 63 x86 java 180_1611 multi-line pdf annotations like these:![1]( shown with ""line breaks"" like this![2]( there is currently a wide white space between the annotation text and the date/page number text should be warped with the maximum available/appropriate width3 then the height of each annotation item should be ""auto""4 i suggest the font size of the extracted annotations in the left-hand panel be reduced (eg x06) the right hand panel font size looks ok";"hi i am looking for my first contribution do you mind if i would give this issue a go please? || @miderleta you are welcome! please take a look at our [contribution guideline]( for getting started and setting up a workspace etc and you can start for this specific issue its probably sufficient to play around with the css properties and the fxmlif you have any questions please ask here or in our [gitter chat]( || it seems like i cannot generate javadoc for the project is that an issue or am i doing something wrong? || @miderleta  where do you need it for? any modern ide will show you the javadoc automatically for each method - if its annotated edit// for understanding of the high level architecture you might take a look at our wiki  || @anassal # line breaksif we always delete the line breaks in annotation it will look better but what if the line breaks are for another paragraph? you can see this example:( break at location 1 should be deleted but that at location 2 should be reserved!**i will try to find a solution to judge if the line break should be removed if you have any idea please leave a comment# date/page margin actually this margin will be changed automatically when you adjust your window size see the following gif:![margin]( summary in the left-hand panel is so long that there is no extra space for the ""marking"" and ""content"" panel i will try to **wrap the summary and reduce the minimized margin between summary and date/page footer in the left-hand panel** i will also **reduce the font size of summary**by the way > 3 then the height of each annotation item should be ""auto""do not understand your meaning clearly could you please explain it in more detail? || maybe you can differentiate between a new paragraph starting vs a normal line break code wise || @upupming this is a valid point but cant we reasonably assume that most annotations are in single paragraphs since paragraphs usually contain different ideas?for annotations that actually span over multiple paragraphs we can see if there are statistical differences between ""end-of-line"" and ""end-of-paragraph"" linebreak characters as @siedlerchr suggested in pdfs annotated in multiple readers (eg adobe foxit okular) it is also worth checking if this has been solved in other libraries/tools that extract text from pdfregarding the ""auto"" height of an annotation item (left-hand panel) i just meant auto height that would result from text wrapping and /limited width along with text wrapping and other improvements the summary could be limited to say 10-15 words || @anassal done~ now you can check the build from  please remember to make a backup of your library before trying out this version || ";;;;0;1;;
3823;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replace thread.currentthread().interrupted() with thread.interrupted() or thread.currentthread().interrupt()  whichever seems appropriate.  thread.interrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)  thread.currentthread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac;;0;planning failure for group by query with field dereference;"given a table with the following shape:```t (   x array<row(key varchar value bigint)>)```this query:```select x[1]key count(1) from t group by 1 order by 2```fails with:```javalangillegalargumentexception: no mapping for expression: ""x""[1]""key""    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:145)    at comfacebookprestosqlplannertranslationmapget(translationmapjava:153)    at comfacebookprestosqlplannertranslationmapget(translationmapjava:165)    at comfacebookprestosqlplannerplanbuildertranslate(planbuilderjava:63)    at comfacebookprestosqlplannerqueryplanneraggregate(queryplannerjava:386)    at comfacebookprestosqlplannerqueryplannervisitqueryspecification(queryplannerjava:131)    at comfacebookprestosqlplannerqueryplannervisitqueryspecification(queryplannerjava:80)    at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerrelationplannervisitqueryspecification(relationplannerjava:394)    at comfacebookprestosqlplannerrelationplannervisitqueryspecification(relationplannerjava:94)    at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerqueryplannerplanquerybody(queryplannerjava:151)    at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:107)    at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:80)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:381)    at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:94)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlplannerlogicalplannercreaterelationplan(logicalplannerjava:204)    at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:89)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:266)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)    at comfacebookprestoexecutionqueuedexecutionlambda$start$171(queuedexecutionjava:68)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```if `key` is no de-referenced the query works fine this works on version 0123 so this could be related to the changes in db5ea9183412656f9cbf2e8a9302666ac323143d";"@joy-yao was looking into thison sat oct 24 2015 10:46 am martin traverso notifications@githubcomwrote:> given a table with the following shape:> > t (>    x array<row(key varchar value bigint)>> )> > this query:> > select x[1]key count(1)> from t> group by 1> order by 2> > fails with:> > javalangillegalargumentexception: no mapping for expression: ""x""[1]""key"">     at comgooglecommonbasepreconditionscheckargument(preconditionsjava:145)>     at comfacebookprestosqlplannertranslationmapget(translationmapjava:153)>     at comfacebookprestosqlplannertranslationmapget(translationmapjava:165)>     at comfacebookprestosqlplannerplanbuildertranslate(planbuilderjava:63)>     at comfacebookprestosqlplannerqueryplanneraggregate(queryplannerjava:386)>     at comfacebookprestosqlplannerqueryplannervisitqueryspecification(queryplannerjava:131)>     at comfacebookprestosqlplannerqueryplannervisitqueryspecification(queryplannerjava:80)>     at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)>     at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)>     at comfacebookprestosqlplannerrelationplannervisitqueryspecification(relationplannerjava:394)>     at comfacebookprestosqlplannerrelationplannervisitqueryspecification(relationplannerjava:94)>     at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)>     at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)>     at comfacebookprestosqlplannerqueryplannerplanquerybody(queryplannerjava:151)>     at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:107)>     at comfacebookprestosqlplannerqueryplannervisitquery(queryplannerjava:80)>     at comfacebookprestosqltreequeryaccept(queryjava:80)>     at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)>     at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:381)>     at comfacebookprestosqlplannerrelationplannervisitquery(relationplannerjava:94)>     at comfacebookprestosqltreequeryaccept(queryjava:80)>     at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)>     at comfacebookprestosqlplannerlogicalplannercreaterelationplan(logicalplannerjava:204)>     at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:89)>     at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:266)>     at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)>     at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)>     at comfacebookprestoexecutionqueuedexecutionlambda$start$171(queuedexecutionjava:68)>     at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)>     at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)>     at javalangthreadrun(threadjava:745)> > if key is no de-referenced the query works fine this works on version> 0123 so this could be related to the changes in db5ea91>  > —> reply to this email directly or view it on github>  || @joy-yao  this in #3830 || ";;;;0;1;;
3823;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replace thread.currentthread().interrupted() with thread.interrupted() or thread.currentthread().interrupt()  whichever seems appropriate.  thread.interrupted: static method on thread which returns whether the thread has been interrupted (and resets the interrupt bit)  thread.currentthread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac;;3435.0;1x: doafterterminate handle if action throws;fixes the bug reported in #3435; ;operatorfinally calls action twice if action throws exception exception thrown by action is swallowed;while i was implementing #3434 ive found two problems with `operatorfinally`ill call `operatorfinallyaction` as `finallyaction` for better readability1 if `finallyaction` is `null` — `nullpointerexception` will be swallowed  safesubscriber` this can be solved via `action ! null` check in the `operatorfinally` (ill make pr)2 if `finallyaction` throws exception `lift` calls `onerror()` and `operatorfinally` invokes `finallyaction` again (this may brake user-defined logic)! and second exception is swallowed by the `safesubscriber` (see problem 1)i vote for solving both of these problems before 1015/1110;"here are the tests:``` java@testpublic void nullfinallyactionshouldbecheckedasap() {    try {        observable                just(""value"")                finallydo(null)        fail()    } catch (nullpointerexception expected) {    }}@testpublic void iffinallyactionthrowsexceptionshouldnotbeswallowedandactionshouldbecalledonce() {    action0 finallyaction  mock(action0class)    dothrow(new illegalstateexception())when(finallyaction)call()    testsubscriber<string> testsubscriber  new testsubscriber<string>()    observable            just(""value"")            finallydo(finallyaction)            subscribe(testsubscriber)    testsubscriberassertvalue(""value"")    verify(finallyaction)call()    // actual result:    // not only illegalstateexception was swallowed    // but finallyaction was called twice!}``` || ill try to send prs with fixes asap `null` check is easy but second problem looks tricky || if the action throws you cant do much but call `rxjavapluginsgetinstance()geterrorhandler()handleerror()` for it || we can throw it as `error` leaving the app in an unknown state is very bad idea especially in something like `finallydo()` || the sequence has already terminated at that point and this operator is there to have side-effects after it the exception has nowhere to go and there is no guarantee a thrown error reaches its intended target because of a potential async boundary so it either propagates up to a synchronous caller gets thrown away by the `executorservice` or gets sent to the error handler || can this be closed? || @akarnokd wont be able to work on this for at least 2 days feel free to run the tests i posted  ^ and see what we can do here or ill investigate this in the end of the weekas far as i remember the biggest problem is that `action` gets called twice if it throws exception and it may break apps logic in a dramatic manner || fix posted in #3823 || closing via #3823 || ";1;0;1x: doafterterminate handle if action throws;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;0;1x: javac 9 compatibility fixes;"the type inference of javac in jdk 9 has been changed in an incompatible way marking many generics-related code invalidthe most common problems:- the inference calculates `observable<? extends t>` but from its perspective a call to `subscribe()` with a `subscriber<t>` is ambiguous as it matches `subscribe(observer<? super t>)` and `subscribe(subscriber<? super t>)` somehow the more specific class is not considered as a valid choice downcasting to `observable<t>` fixes the error- `a<?>` no longer accepts `a<ti>` elements requires the use of raw types to get aroundthe tests appear to compile finenote that i couldnt find a working ide for jdk 9 and had to revert to command line trickery:```@echo offdir /s /b src\main\java\rx\*java > sourcestxtdir /s /b src\test\java\rx\*java >> sourcestxt""c:\program files\java\jdk-9\bin\javacexe"" -cp c:/temp/rx/junitjarc:/temp/rx/mockitojar @sourcestxt del sourcestxt```";":+1: // @akarnokd maybe report ""incorrect"" behavior of jdk9 compiler to openjdk issue tracker? || there were reports such as [this]( before bottom line is that they are fine with their breaking change ||  ";;;;1;1;1x: javac 9 compatibility fixes;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;3818;provides download option in context menu and 3614;"        ( (      because github does not support autolinking there -->inspired by the discussion in #3818 i added a ""download file"" option in the context menu of a linked file (if it is an online link) moreover the bug #3614 is this pr was brought to you with the support of coffee from the jabref cup!-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?)";if you fix checkstyle we can merge || i generated a [structure-diff]( below from pulling ```19945df``` **on jabref:downloadlinks**  into ```988fb54``` on **jabref:master**![structure diff]( ||;exception when trying to save linked file;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-03-06--master--bb471a26dlinux 440-104-generic amd64 java 180_161steps to reproduce:1 create an entry with a url leading to a pdf file like this:  right-click the entry in the entry table3 choose ""copy linked files to folder""4 choose your home folder<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>file: copyfilesdialogfxml not found attempting with camel case10 05694 [javafx application thread] error orgjabreffallbackexceptionhandler - uncaught exception occurred in thread[javafx application thread5main]javalangillegalstateexception: cannot load orgjabrefguicopyfilescopyfilesdialog	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:101) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comairhacksafterburnerviewsfxmlviewinitializefxmlloader(fxmlviewjava:125) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comairhacksafterburnerviewsfxmlviewgetview(fxmlviewjava:137) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguiabstractviewgetview(abstractviewjava:28) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesdialogviewshow(copyfilesdialogviewjava:25) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesactionshowdialog(copyfilesactionjava:63) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesactionlambda$startserviceandshowprogessdialog$3(copyfilesactionjava:58) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295) ~[jfxrtjar:?]	at javasecurityaccesscontrollerdoprivileged(native method) ~[?:180_161]	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294) ~[jfxrtjar:?]	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95) ~[jfxrtjar:?]	at comsunglassuigtkgtkapplication_runloop(native method) ~[jfxrtjar:?]	at comsunglassuigtkgtkapplicationlambda$null$48(gtkapplicationjava:139) ~[jfxrtjar:?]	at javalangthreadrun(threadjava:748) [?:180_161]caused by: javafxfxmlloadexception: file:/home/erelsgl/dropbox/papers/jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar!/org/jabref/gui/copyfiles/copyfilesdialogfxml	at javafxfxmlfxmlloaderconstructloadexception(fxmlloaderjava:2601) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2571) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 morecaused by: javalangreflectinvocationtargetexception	at sunreflectnativemethodaccessorimplinvoke0(native method) ~[?:180_161]	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62) ~[?:180_161]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmisctrampolineinvoke(methodutiljava:71) ~[?:180_161]	at sunreflectgeneratedmethodaccessor6invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmiscmethodutilinvoke(methodutiljava:275) ~[?:180_161]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2566) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 morecaused by: javalangnullpointerexception	at javautilabstractcollectionaddall(abstractcollectionjava:343) ~[?:180_161]	at javafxcollectionsmodifiableobservablelistbaseaddall(modifiableobservablelistbasejava:99) ~[jfxrtjar:?]	at javafxbeansbindinglistexpressionaddall(listexpressionjava:266) ~[jfxrtjar:?]	at orgjabrefguicopyfilescopyfilesdialogviewmodel<init>(copyfilesdialogviewmodeljava:14) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at orgjabrefguicopyfilescopyfilesdialogcontrollerinitialize(copyfilesdialogcontrollerjava:34) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	at sunreflectnativemethodaccessorimplinvoke0(native method) ~[?:180_161]	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62) ~[?:180_161]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmisctrampolineinvoke(methodutiljava:71) ~[?:180_161]	at sunreflectgeneratedmethodaccessor6invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_161]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_161]	at sunreflectmiscmethodutilinvoke(methodutiljava:275) ~[?:180_161]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2566) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderloadimpl(fxmlloaderjava:2441) ~[jfxrtjar:?]	at javafxfxmlfxmlloaderload(fxmlloaderjava:2409) ~[jfxrtjar:?]	at comairhacksafterburnerviewsfxmlviewloadsynchronously(fxmlviewjava:99) ~[jabref-42-dev--snapshot--2018-03-06--master--bb471a26djar:?]	 13 more</details>";"this error has probably todo with the file annotation tab one line in the code needs to be adapted  || thank you for your report this issue should be  now in the latest development version could you please check the build from  || now i do not see the exception anymore but the file is not downloaded - i get an error dialog box saying ""no content in table"" || yes thats right the functionality is only for copying exiting linked physical files of an entry to an external folderwhat you want to do is in the entry  eiditor -> general tab -> download from url  || @siedlerchr could you please update the dialog and show are more helpful message something like ""no file to copy"" || ";1;0;fix tests;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;3614;provides download option in context menu and 3614;"        ( (      because github does not support autolinking there -->inspired by the discussion in #3818 i added a ""download file"" option in the context menu of a linked file (if it is an online link) moreover the bug #3614 is this pr was brought to you with the support of coffee from the jabref cup!-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?)";if you fix checkstyle we can merge || i generated a [structure-diff]( below from pulling ```19945df``` **on jabref:downloadlinks**  into ```988fb54``` on **jabref:master**![structure diff]( ||;download no longer shows progress;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsrecent mastersteps to reproduce:1 create entry and go to general tab2 click ""download from url"" button and insert a link to a relatively large pdf click ok3 when the download starts an empty progress bar is displayed however the progress is not updated and the progress indicator is hidden immediately   ";refs #3005  ||;1;0;fix tests;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;0;analysis error when referencing column from subquery;"the following query``` sqlselect x from (   select ax   from (values 123) a(x)) group by x```fails with ```comfacebookprestosqlanalyzersemanticexception: column ""x"" cannot be resolved    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorcreatemissingattributeexception(expressionanalyzerjava:349)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitqualifiednamereference(expressionanalyzerjava:288)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitqualifiednamereference(expressionanalyzerjava:216)    at comfacebookprestosqltreequalifiednamereferenceaccept(qualifiednamereferencejava:39)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyze(expressionanalyzerjava:189)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyzeexpression(expressionanalyzerjava:1048)    at comfacebookprestosqlanalyzertupleanalyzeranalyzeexpression(tupleanalyzerjava:1162)    at comfacebookprestosqlanalyzertupleanalyzeranalyzeselect(tupleanalyzerjava:951)    at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:364)    at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:141)    at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:615)    at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:126)    at comfacebookprestosqltreequeryaccept(queryjava:80)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzeranalyzeranalyze(analyzerjava:60)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:259)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)    at comfacebookprestoexecutionqueuedexecutionlambda$start$171(queuedexecutionjava:68)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```this works in version 0123 so it could be related to the changes in db5ea91";@joy-yao  this in #3830 ||;;;;0;1;;
3824;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> implement some more tostring() methods for debuggingi added these locally while debugging but they seem potentially generally usefuld52651a64c4965bb06be812b90aee6191e7a80f8;;;;;1;1;implement some more tostring() methods for debuggingi added these locally while debugging but they seem potentially generally usefulrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301170647;
3825;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store  values  in a local first instead of repeatedly reading it from a field.  at worst  this is a no-op. at best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;0;moe sync 2020-03-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> store `values` in a local first instead of repeatedly reading it from a fieldat worst this is a no-op at best it may perform betterb6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;;;;1;1;store `values` in a local first instead of repeatedly reading it from a fieldat worst this is a no-op at best it may perform betterrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301180270;
3825;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store  values  in a local first instead of repeatedly reading it from a field.  at worst  this is a no-op. at best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;0;disable duplicate finder test in localization until tl is complete;i had to disable the localization duplicate detection test for the moment because as tl is not yet fully translated it still contains the english values         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);this is not required any more crowdin took care at  ||;;;;0;1;;
3825;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store  values  in a local first instead of repeatedly reading it from a field.  at worst  this is a no-op. at best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;0;planning error for query with having clause;the following query:``` sqlselect a count(1) from (values 123) t(a)group by ahaving count(1) > 1 ```fails with:```javalangillegalargumentexception: invalid node predicate dependencies ([count_3 expr_2]) not in source plan output ([a count count_3])    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:145)    at comfacebookprestosqlplannerplansanitycheckercheckdependencies(plansanitycheckerjava:494)    at comfacebookprestosqlplannerplansanitycheckeraccess$100(plansanitycheckerjava:63)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitfilter(plansanitycheckerjava:189)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitfilter(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanfilternodeaccept(filternodejava:71)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:209)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:209)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:209)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:209)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitproject(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitoutput(plansanitycheckerjava:259)    at comfacebookprestosqlplannerplansanitychecker$visitorvisitoutput(plansanitycheckerjava:72)    at comfacebookprestosqlplannerplanoutputnodeaccept(outputnodejava:81)    at comfacebookprestosqlplannerplansanitycheckervalidate(plansanitycheckerjava:69)    at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:95)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:266)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)    at comfacebookprestoexecutionqueuedexecutionlambda$start$171(queuedexecutionjava:68)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```this works in version 0123;i bisected it to this commit: db5ea9183412656f9cbf2e8a9302666ac323143d ||;;;;0;1;;
3825;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> store  values  in a local first instead of repeatedly reading it from a field.  at worst  this is a no-op. at best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5;;0;1x: fix observeontest testqueuefullemitserrorwithvaryingbuffersize;the test had some non-deterministic machinery to trigger the failure;;;;;1;1;1x: fix observeontesttestqueuefullemitserrorwithvaryingbuffersize;
3827;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add  duration -based default methods to  listeningscheduledexecutorservice   they just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. this matches existing  duration -based overloads of  (long  timeunit)  methods in the same package.  relnotes=added  duration -based  default  methods to  listeningscheduledexecutorservice .  c7984e7e5c40868ca47faede472ad77c10965114;;0;moe sync 2020-03-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add `duration`-based default methods to `listeningscheduledexecutorservice`they just delegate to the existing methods from the interface using the existing saturated conversion to nanoseconds this matches existing `duration`-based overloads of `(long timeunit)` methods in the same packagerelnotesadded `duration`-based `default` methods to `listeningscheduledexecutorservice`c7984e7e5c40868ca47faede472ad77c10965114;;;;;1;1;add `duration`-based default methods to `listeningscheduledexecutorservice`they just delegate to the existing methods from the interface using the existing saturated conversion to nanoseconds this matches existing `duration`-based overloads of `(long timeunit)` methods in the same packagerelnotesadded `duration`-based `default` methods to `listeningscheduledexecutorservice`-------------created by moe: https://githubcom/google/moemoe_migrated_revid301435427;
3827;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add  duration -based default methods to  listeningscheduledexecutorservice   they just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. this matches existing  duration -based overloads of  (long  timeunit)  methods in the same package.  relnotes=added  duration -based  default  methods to  listeningscheduledexecutorservice .  c7984e7e5c40868ca47faede472ad77c10965114;;0;nullpointerexception when reading parquet data from s3;ive exported about 350 million records from our cassandra database to s3 using spark in parquet format i then created an external table in our stand alone hive/hadoop cluster that points to this data however presto is throwing errors when certain columns are selectedour setup is like so:- n cassandra servers running spark on top of them- n hadoop servers running hive 0131- 30 presto workershere is a partial schema unfortunately i am unable to provide the full schema however these columns should suffice for the purposes of this issue```            column             |  type   | null | partition key | comment-------------------------------+---------+------+---------------+--------- puid                          | varchar | true | false         | ts                            | bigint  | true | false         | uid                           | varchar | true | false         |```the error i get is:```2015-10-25t20 29855z        error   splitrunner-35-35       comfacebookprestoexecutiontaskexecutor      error processing split 20151025_200427_00176_bu25r16-1 {paths3n://xxx/part-r-00104-899794d4-cc41-4a52-8cbf-5e7f89671242gzparquet start0 length18262360 hosts[localhost] databasedefault tablexxx forcelocalschedulingfalse partitionname<unpartitioned> effectivepredicatetupledomain:all} (start  1445803468298 wall  1557 ms cpu  0 ms calls  1)javalangnullpointerexception        at comfacebookprestospirecordpagesourcegetnextpage(recordpagesourcejava:118)        at comfacebookprestooperatortablescanoperatorgetoutput(tablescanoperatorjava:239)        at comfacebookprestooperatordriverprocessinternal(driverjava:380)        at comfacebookprestooperatordriverprocessfor(driverjava:303)        at comfacebookprestoexecutionsqltaskexecution$driversplitrunnerprocessfor(sqltaskexecutionjava:587)        at comfacebookprestoexecutiontaskexecutor$prioritizedsplitrunnerprocess(taskexecutorjava:505)        at comfacebookprestoexecutiontaskexecutor$runnerrun(taskexecutorjava:640)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)        at javalangthreadrun(threadjava:745)```here are the various queries and their results:| query | result || --- | --- || `select puid from xxx` | works || `select count(puid) from xxx` | works || `select uidtspuid from xxx where uid is null` | works? (shows results with ts 0 incorrect) || `select count(uid) from xxx where uid is null` | works? returns 0 which is untrue || `select uid from xxx` | error || `select uid from xxx where uid is not null` | error || `select uidpuidts from xxx` | error |a few things to note:- this error happens multiple times per query each error with a different parquet file in s3 (part-r-nnnnn)- the same error happens with multiple different types of queries- these same files can be read back via spark or hive parsed and transformed without issue- the uid isnt the only column this happens on its just the one i picked for this example- this data is sparse some rows might be missing a columnthe pattern here is when presto tries to load a uid that isnt a null it gets the above errorif i can provide any more information please let me know thanks!;"which presto version are you using?would you please try a custom build with this pr? presto has problem reading parquet files with null values in complex types this pr probably fix it: || @zhenxiao i actually -just-  this entire issue by setting `hiveparquetuse-column-namestrue` that being said is there a similar option for orc? i ran into a similar issue using orc || @cidan great you get it working aha that setting is enable access parquet files by column name instead of by column ordinal position seems like you do not have complex types at all i think orc is always accessing columns by column index not sure about the details lets ask @dain just curious did you evert do alter table rename to your table or alter table add columns to your table? or there should not be problems for either column index access or column name access || @zhenxiao no weve never altered the table to rename it or add columns in any way the error i get is actually a bit different using orc:```2015-10-25t23 01585z        error   splitrunner-9-43        comfacebookprestoexecutiontaskexecutor      error processing split 20151025_233358_00028_skbbc123-24 {paths3n://xxx/part-r-00760-cf530cc4-3bcf-41ee-8a32-a1001f40d94eorc start0 length8772127 hosts[localhost] databasedefault tablexxx forcelocalschedulingfalse partitionname<unpartitioned> effectivepredicatetupledomain:all} (start  1445816039303 wall  2282 ms cpu  0 ms calls  1)javalangunsupportedoperationexception        at comfacebookprestospitypeabstracttypewritelong(abstracttypejava:111)        at comfacebookprestoorcstreamlongstreamv2nextlongvector(longstreamv2java:437)        at comfacebookprestoorcreaderlongdirectstreamreaderreadblock(longdirectstreamreaderjava:111)        at comfacebookprestoorcreaderlongstreamreaderreadblock(longstreamreaderjava:58)        at comfacebookprestoorcorcrecordreaderreadblock(orcrecordreaderjava:280)        at comfacebookprestohiveorcorcpagesource$orcblockloaderload(orcpagesourcejava:313)        at comfacebookprestohiveorcorcpagesource$orcblockloaderload(orcpagesourcejava:289)        at comfacebookprestospiblocklazyblockassureloaded(lazyblockjava:246)        at comfacebookprestospipageassureloaded(pagejava:133)        at comfacebookprestooperatortablescanoperatorgetoutput(tablescanoperatorjava:242)        at comfacebookprestooperatordriverprocessinternal(driverjava:380)        at comfacebookprestooperatordriverprocessfor(driverjava:303)        at comfacebookprestoexecutionsqltaskexecution$driversplitrunnerprocessfor(sqltaskexecutionjava:587)        at comfacebookprestoexecutiontaskexecutor$prioritizedsplitrunnerprocess(taskexecutorjava:505)        at comfacebookprestoexecutiontaskexecutor$runnerrun(taskexecutorjava:640)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)        at javalangthreadrun(threadjava:745)``` || could you send us sample parquet and orc files that reproduces the issue along with the hive create table statements that match the sample files? we might be able to guess the problem based on the stack trace but having files that cause a crash will be much easierhow are you writing this data? with hive? || @electrum the parquet issue was solved with `hiveparquetuse-column-namestrue` i cant send sample data over unfortunatelyim writing the data using spark || im closing this issue as the original issue is fixed ill open another one for the orc error im seeing || @zhenxiao the orc issue throwing error ""javalangunsupportedoperationexception        at comfacebookprestospitypeabstracttypewritelong "" is there fix for it ? can you refer that issue you have opened it  || hi @cidan  how did you set set hiveparquetuse-column-namestruewhen setting this in hiveproperties  this does not shows up in show session  and when setting this up in session  presto gives not a valid property  i have also tried hiveparquetuse_column_namestrue  this does not works either   || ";;;;0;1;;
3827;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add  duration -based default methods to  listeningscheduledexecutorservice   they just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. this matches existing  duration -based overloads of  (long  timeunit)  methods in the same package.  relnotes=added  duration -based  default  methods to  listeningscheduledexecutorservice .  c7984e7e5c40868ca47faede472ad77c10965114;;0;simplify operatorobserveon now that error is a non-volatile field;this is a minor simplification in `operatorobserveon` where a temporary variable was created to avoid unnecessary additional reads of what used to be the volatile field `error`  the field was changed to be non-volatile a while back so the temporary variable is no longer required i assume it would have very minor perf impact (i havent run them);why do you want to read fields multiple times?  || its not about performance but code habits by reading things into local variables you establish a pattern that wont bite you with volatile variables later on || plus if the decision is made to clear the `error` field to avoid retention of the exception for too long this would have to be reverted || fair enough ill close ||;;;;0;1;;
3827;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add  duration -based default methods to  listeningscheduledexecutorservice   they just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. this matches existing  duration -based overloads of  (long  timeunit)  methods in the same package.  relnotes=added  duration -based  default  methods to  listeningscheduledexecutorservice .  c7984e7e5c40868ca47faede472ad77c10965114;;3815;update eclipse style to intellij style;3815 screenshots of indentation in #3815 (cherry pick to master afterwards)        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"gradle uses groovy which is similar to java you can use the normal javaclasses there appending with java shouldnt be that hard is it? 😇am 10032018 15:25 schrieb ""christoph"" <notifications@githubcom>:> *@siedlerchr* commented on this pull request> ------------------------------>> in config/eclipse code styleepf> < > @@ -00 +1328 @@> +#fri mar 09 22 27 cet 2018>> yes as a reference file and this file can still be imported manually> mabye someone more experienced in gradle/scripting can create a simple> script to copy the things from that file to the workspace> orgeclipsejdtuiprefs file>> —> you are receiving this because you commented> reply to this email directly view it on github> < or mute> the thread> < > || i merge this for the moment as we dont change our code style that often we can postpone the automatic creation of the prefs || ";adjust eclipse style to intellij (line wrapping);has intellij one or two default indendation lines? @tobiasdiez i now changed to align on column[jabrefmoddedstylesettingsxmltxt](https://githubcom/jabref/jabref/files/1791055/jabrefmoddedstylesettingsxmltxt)(https://user-imagesentcom/320228/37120788-a68af3be-225b-11e8-874b-a7874005c6eapng)![grafik](https://user-imagesgithubusercontentcom/320228/37120852-d567d5e4-225b-11e8-91f4-88498c86fdd3png)![grafik](https://user-imagesgithubusercontentcom/320228/37120873-e470f9da-225b-11e8-9c70-d633aad4823bpng)![grafik](https://user-imagesgithubusercontentcom/320228/37120884-f4e0b300-225b-11e8-8bae-2a78b9e1c458png);"what do you mean by ""indendation lines""?if you did not already change it please dont forget to tweak the ""chain and align on dot"" policies ie something like````javaobjectfoo()bar()      bar2()      bar3()````should be considered correct and not be changed || align on dot is not a direct option in eclipse thats controlled by the indentation columns and wrapping polices thats why i included a screenshot but note that in your examples is only correct if all operate on the same object if  || mhh i couldnt spot such a chain call in your screenshots this is why i asked again according to  the option `indent on column` corresponds to the ""align on dot"" (and this option is now activated accordingly to your screenshots) moreover ""line wrapping policy"" should be set to something not so aggressive i think you should create pr with these changes || @siedlerchr can this be closed? || ";1;0;update doc;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;0;suggestion : performance about multiple calls to replace;"hi&nbsp&nbsp&nbsp&nbspi have found multiple calls to `stringreplace(  )` about the same pattern in the projectfor example in the file jabref/src/main/java/org/jabref/logic/importer/fileformat/isiimporterjava:```java                } else if (""au""equals(beg)) {                    string author  isiimporterisiauthorsconvert(valuereplace(""eoleol"" "" and ""))                                    } else if (""ti""equals(beg)) {                    hmput(fieldnametitle valuereplace(""eoleol"" "" ""))                } else if (""so""equals(beg) || ""ja""equals(beg)) {                    hmput(fieldnamejournal valuereplace(""eoleol"" "" ""))                } else if (""id""equals(beg) || ""kw""equals(beg)) {                    value  valuereplace(""eoleol"" "" "")                                    } else if (""ab""equals(beg)) {                    hmput(fieldnameabstract valuereplace(""eoleol"" "" ""))                }```&nbsp&nbsp&nbsp&nbspthere are multiple calls to `replace` about ""eoleol"" if it was achieved like the following code it will promote its performance and be able to reuse the pattern```javapattern pattern  patterncompile(regex)patternmatcher(str)replaceall(repl)```";sounds pike a good idea just open a pull request with your changes  || @o0lwj0o are you willing to work on this? || closing this issue due to inactivity    ||;;;;0;1;;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;0;s for dereference;;fixes   and   || ;;;;0;1;;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;0;release 113 proposed content;### version 113 - april 8 2016 ([maven]( api enhancements- [pull 3780]( `synconsubscribe` has been promoted to `@beta` api- [pull 3799]( added `completableandthen(single)` operator- [pull 3777]( added `observeon` overload to configure the prefetch/buffer size- [pull 3790]( make `singlelift` public and `@experimental`- [pull 3818]( `fromcallable` promotion to `@beta` - [pull 3842]( improve `executorscheduler` worker unsubscription#### api deprecations- [pull 3762]( deprecate `compositeexception` constructor with message prefix#### general enhancements- [pull 3828]( `asyncsubject` now supports backpressure- [pull 3829]( added `rxunsafe-disable` system property to disable use of `sunmiscunsafe` even if it is available- [pull 3757]( **warning: behavior change!** operator `sample` emits last sampled value before termination#### performance enhancements- [pull 3795]( `observeon` now replenishes with constant rate#es- [pull 3809]( fix `merge`/`flatmap` crash when the inner source was `just(null)`- [pull 3789]( prevent `singlezip()` of zero `single`s- [pull 3787]( fix `groupby` delaying group completion till all groups were emitted- [pull 3823]( fix `doafterterminate` handle if action throws- [pull 3822]( make defensive copy of the properties in `rxjavaplugins`- [pull 3836]( fix `switchmap`/`switchonnext` producer retention and backpressure- [pull 3840]( fix `concatmap` scalar/empty source behavior- [pull 3839]( fix `takelast()` backpressure- [pull 3845]( fix delaysubscription(observable) unsubscription before triggered;a review of #3839 and #3840 would be great and we could release today the perf work can wait a few releases || closing see pr #3846 ||;;;;0;1;;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;3501.0;moe sync 2020-03-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4;   i consent || ;slicing a bytesource twice throws an unexpected illegalargumentexception;currently trying to slice a `bytesource` twice throws an unexpected `illegalargumentexception` if the `bytesource` returned after the first slice has a length smaller than the offset of the subsequent slice for example this code throws an `illegalargumentexception`:```import comgooglecommoniobytesourcepublic class guavatest {    public static void main(string args) {        bytesourceconcat()slice(0 3)slice(4 3)    }}```that is against the documentation where it is specified that it should return an empty `bytesource`; should this issue be closed? it looks like it was  in #3830 ||;1;0; double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957;
3830;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-19;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed double slicing bytesource (#3501).  3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4;;3829.0;moe sync 2020-03-19;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  double slicing bytesource (#3501)38296fb7746b8bc39d4d547a1b2bb47549c6b8314af4;   i consent || ; double slicing bytesource #3501;as previous pr has commit should not occur so i submit a new pr and add a test;;1;0; double slicing bytesource (#3501)3829relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid301827957;
3831;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f;;0;remove erroneous escape character;this seems to be an escape character that slipped into the localized text presumably a copy-and-paste error?;;;;;1;1;remove erroneous escape characterthis seems to be an escape character that slipped into the localized text presumably a copy-and-paste error?;
3831;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f;;0;fix indexoutofbounds when split contains no stripes;in normal circumstance a stripe is ~200mb and split is ~60mb as a result around 2/3 of splits are empty processing them causes `indexoutofboundsexception` after merging #3692 because `mergeadjacentdiskranges` doesnt handle empty stripe listthis pr also fixes a comment in #3692 that should have been addressed earlier;;;;;0;1;;
3831;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f;;0;why is there no combinelatestwith counterpart to withlatestfrom ???;"hi - i am facing an issue where the source observable completes before the other observable starts emitting items the marble diagram of combinelatest seems best suited and very different  for that purpose as against withlatestfrom using observablecombinelatest achieves the purpose although via a much longer route as it leads to writing multiple observablecombinelatest functions (as 2 of them cannot be chained together)is there a way i can chain several combinelatest operators (in a similar way that i can chain several withlatestfrom operators) can you help ?on a side note do you have any advice on how to deal with the oncompleted state of 1 of the observables when we are combining 2 or more observables if i face similar problems while chaining operators in future ? breaking the chain into multiple function calls seems very anti-elegant**1 note in this particular use case described above withlatestfrom behaves very differently from combinelatest as evident from marble diagrams essentially it does not emit any item at all if theother observable (a longer chained call for instance) returns later than source observable 2 i cannot use zipwith as i need to reflect latest changes in ui whenever any observable emits an item**<img width""840"" alt""screen shot 2016-04-05 at 4 42 24 am"" src"" width""770"" alt""screen shot 2016-04-05 at 4 42 36 am"" src""https://cloudentcom/assets/13557123/14267034/79e6cd32-faea-11e5-8417-1c75c0318d53png"">";`combinelatest` and `withlatestfrom` have different purpose we dont have an instance version of `combinelatest` because nobody has needed one up to now pr welcome || hi akarnokd - how would you go about writing such an instance version ? also is there any other operator that can achieve the same purpose ? || just look at how `zipwith` is implemented for inspiration this operator is an easy one || see #3966  || fix merged in #3966 || thanks a ton david !!!on saturday 18 june 2016 david karnok notifications@githubcom wrote:> fix merged in #3966  > —> you are receiving this because you authored the thread> reply to this email directly view it on github>  or mute the thread>  ## sent from gmail mobile || hi david - sorry i did not check github before and was under the impression that this feature was added from the email notificationjust had a look at  #3966 as you suggested have 2 questions: 1 is withlatestfrommany intended to function the same as the requested combinelatestwith ?2 this feature will be available in 17 right ?? || 1) no2) apparently this issue wanted `combinelatestwith` and not `withlatestfrommany`feel free to reopen this issue or better yet post a pr || hi i have a use case for `combinelatestwith` id like to emit a protobuf builder both when all the fields are ready and when a field is updated the api usage would look something like this:```javaflowablefromcallable(proto::newbuilder)  combinelatestwith(foo protobuilder::setfoo)  combinelatestwith(bar protobuilder::setbar)    map(protobuilder::build)```this ends up being much cleaner than having a massive `combinelatest` or anything else ive been able to come up with as each op operates on only a single field ill send a pr for this shortly :) || im not convinced this type of convenience method is worth it also it requires fair amount of adjusting the documentation adding specific unit tests for both `flowable` and `observable` for a traditionally static method || do you have an alternate proposal for the above builder construction that i could use? things start to break down and become unmaintainable if there are more than a couple fieldsie im happy to use another approach but atm this is less of a convenience method for my case and more of a maintainability headache reducer || have you tried with the static method? assign them to a local variables with some spacing before and after alternatively create a transformer factoring out the static call and compose with that || is this what you were thinking wrt the static method?```flowable<protobuilder> builder  flowablefromcallable(proto::newbuilder)flowablecombinelatest(builder foo protobuilder::setfoo)flowablecombinelatest(builder bar protobuilder::setbar)buildermap(protobuilder::build())```i suppose this could work but it seems a bit counterintuitive because theyre not chained together doesnt this also work somewhat against the whole [operator chaining ideal]( || you missed the **local variable** part:```javaflowable<protobuilder> builder  flowablefromcallable(proto::newbuilder)flowable<protobuilder> withfoo  flowablecombinelatest(builder foo protobuilder::setfoo)flowable<protobuilder> withbar  flowablecombinelatest(withfoo bar protobuilder::setbar)return withbarmap(protobuilder::build())```or the **transformer part** the article also suggests:```javastatic <t u r> flowabletransformer<t r> combinelatestwith(flowable<u> other         bifunction<? super t ? super u ? extends r> combiner) {    return f -> flowablecombinelatest(f other combiner)}flowablefromcallable(proto::newbuilder)  compose(combinelatestwith(foo protobuilder::setfoo))  compose(combinelatestwith(bar protobuilder::setbar))    map(protobuilder::build)``` || i see yeah not convinced by the local variable solution that seems like a pain to maintain as the wiring order matterswe can just do the transformer approach then if this shouldnt be in rxjava itself ;;;;0;1;;
3831;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add some unit tests for base64url() in baseencoding  3816  e1c08a80e340efb4477dd601d6073936cc67617f;;3816.0;moe sync 2020-03-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add some unit tests for base64url() in baseencoding3816e1c08a80e340efb4477dd601d6073936cc67617f;;add uts for base64url() decode in baseencoding;i use base64url in code if gerrit to make the base64 url safebut found that it doesnt cover some basic cases;;1;0;add some unit tests for base64url() in baseencoding3816-------------created by moe: https://githubcom/google/moemoe_migrated_revid302064745;
3833;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make sure native.js files are included in the guava gwt release.  this is needed for j2cl compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> add missing  @since  for 1-arg  servicemanager.addlistener .    29d356e629ed4798ba2fe9a71600e708e132b529;;0;moe sync 2020-03-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make sure nativejs files are included in the guava gwt releasethis is needed for j2cl compatibilityb1511bdf9bd51b666d07550ba258f556a6bef2fa-------<p> add missing `@since` for 1-arg `servicemanageraddlistener`https://guavadev/releases/150/api/diffs/changes/comgooglecommonutilconcurrentservicemanagerhtml#comgooglecommonutilconcurrentservicemanageraddlistener_added%28comgooglecommonutilconcurrentservicemanagerlistener%2929d356e629ed4798ba2fe9a71600e708e132b529;;;;;1;1;add missing `@since` for 1-arg `servicemanageraddlistener` by moe: https://githubcom/google/moemoe_migrated_revid302741311;
3833;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make sure native.js files are included in the guava gwt release.  this is needed for j2cl compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> add missing  @since  for 1-arg  servicemanager.addlistener .    29d356e629ed4798ba2fe9a71600e708e132b529;;0;add spanish translations;added a couple of missing spanish localized texts-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);thank you very much for your contribution! btw did you know that you can also contribute more easily via crowdin?   has the advantage that you can search all previously translated strings and also get suggestions from previously translations and automated machine translations (eg bing translate) || @siedlerchr thanks for the suggestion i would like to try it out does it have a free plan for open source or something the like? i cant find that on their website  || as a user/translator you dont have to pay anything just login go to the project and start translatingfor projects:they offer free plans for opensource projects  ||;;;;1;1;add spanish translationsadded a couple of missing spanish localized texts;
3833;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make sure native.js files are included in the guava gwt release.  this is needed for j2cl compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> add missing  @since  for 1-arg  servicemanager.addlistener .    29d356e629ed4798ba2fe9a71600e708e132b529;;0;fix race in hash build memory tracking;the transfer of memory reservation ownership from the operator contextto the task context was not atomic therefore other tasks will observe afree memory when there actually isnt any while the hash build isfinishing;this looks good but i think there is another one of these for cross joins that needs to be updated   || curious if we know what versions of presto this affects? || versions 0106 to 0123 || ;;;;0;1;;
3833;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make sure native.js files are included in the guava gwt release.  this is needed for j2cl compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> add missing  @since  for 1-arg  servicemanager.addlistener .    29d356e629ed4798ba2fe9a71600e708e132b529;;0;operatorswitch backpressure;debugging an issue with `switchmap` led me to reviewing the `operatorswitch` code i think it might be wrong in its approach on backpressure (at least when used as `switchmap`) but before attempting code wanted to discuss conceptually (note that i have not considered `switchonnext` or `switchonempty` where the current approach may be fine)right now it appears to pass-thru the `requestn` value from downstream to the upstream this doesnt seem correct for a `switchmap` case instead i think it should be have as follows:- request 2 on initial subscribe- map starts on first received onnext- downstream `request(n)` is propagated to the inner observable- onnext invoked a second time with new observable- request(1) upwards to allow the upstream to send a new observable- propagate remaining `request(n)` from downstream to the new innerin other words quite similar to how `concatmap` works for maintaining the `request(n)` value across inner observables except that it unsubscribes the previous inner on receiving a new observable;cc @jspahrsummers || the `operatorswitch` does unbounded-in on the outer `observable` but keeps track of the emission from each inner `observable` when the switch happens all unfulfilled request will be forwarded to the new inner `observable` || thats not the behavior im seeing looks like i need to create a unit test  ||  and of course cant reproduce in a simple unit test confusing bloody bug ill re-open another legit issue if i can track it down thanks @akarnokd  || could you share a little bit more about your issue? what operators were involved? was heavy switching involved with async sources or consumption? ||;;;;0;1;;
3836;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb;;0;moe sync 2020-03-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> deprecate 1-arg overload of servicemanageraddlistenerit default to directexecutor() directexecutor() is often useful but it should be an explicit choice as some usages are dangerous: deprecated the 1-arg overload of `servicemanageraddlistener`200056a4525bf28f1d252505f1564fdf26322ccb;;;;;1;1;deprecate 1-arg overload of servicemanageraddlistenerit default to directexecutor() directexecutor() is often useful but it should be an explicit choice as some usages are dangerous: deprecated the 1-arg overload of `servicemanageraddlistener`-------------created by moe: https://githubcom/google/moemoe_migrated_revid303500936;
3836;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb;;0;order of fields in entry editor is not saved / automatically changed;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref version 41 on mac os x 10133<!-- hint: if you use a development version (available at  ensure that you use the latest one -->steps to reproduce:1 open ""customize entry types""2 change the order of fields in any table click apply click ok3 the order is not changed and remains (mostly it seems) alphabeticalsometimes i am able to save my set options i tried around creating a new database change it there open the actual database but this does not always worksometimes the customized order is suddenly and automatically changedif this issue was known and is solved in the latest master i apologize i am new to jabref";@jabref/developers  not sure if the order of fields is saved here i dont think so maybe we will add something like that later on we are currently reworking the whole ui 😄  ||;;;;0;1;;
3836;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb;;0;large in lists substantially slower than unioned smaller lists;```select a b sum(c) from t where a in ( ~500 values ) group by 1 2elapsed 442mcpu time 169d```vs```select a b sum(c) from t where a in ( ~100 values ) group by 1 2union allselect a b sum(c) from t where a in ( ~100 values ) group by 1 2union all cpu time 151helapsed 2301s```the column `a` is a `bigint` and the values are all larger than 32-bit the cutoff is around 100 but can be higher: in one test one of the unioned lists had 101 valuesthese should both be generating using `hash_switch` in `incodegenerator` so it might be a jvm issue due to the larger switch size or code size we should benchmark for different sizes and compare it to the fastutil setanother idea for optimization is that using a fastutil set we can skip hashing and use direct comparison for certain types if all the values are unique;interesting i was wondering why we settled on the 1000 cutoff for the fastutil set || there is a bytecode size limit so we cant do much larger but we should benchmark if the hash switch is ever faster ||  by  ||;;;;0;1;;
3836;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb;;0;1x: fix switchmap/switchonnext producer retention and backpressure;this pr fixes the producer retention problem and backpressure problem in `switchmap`/`switchonnext`in the original when an inner source completed its producer was still referenced after it if there was no new inner source or the next inner source didnt set a new producer the operator leaked the previous inner sources internals the fix involves nulling out the producer field when the inner source completes (and is still the current one)the original had an additional bug due to a race condition between the request arbitration and switching inner sources in some cases the switch didnt properly forward the remaining request amount to the new inner source causing hangs in some other cases both the old and new inner sources were able to emit causing overflow the fix involves a new queue-drain loop with some emitter-loop help to work out the state transitions;;;;;1;1;1x: fix switchmap/switchonnext producer retention and backpressure;
3837;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add immediatevoidfuture() to futures.java to create an immediately succeeding listenablefuture<void>.  relnotes= util.concurrent : added  immediatevoidfuture .  e90c8bbe566429fc46a33f88930c6379e57a8094;;0;moe sync 2020-03-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add immediatevoidfuture() to futuresjava to create an immediately succeeding listenablefuture<void>relnotes`utilconcurrent`: added `immediatevoidfuture`e90c8bbe566429fc46a33f88930c6379e57a8094;;;;;1;1;add immediatevoidfuture() to futuresjava to create an immediately succeeding listenablefuture<void>relnotes`utilconcurrent`: added `immediatevoidfuture`-------------created by moe: https://githubcom/google/moemoe_migrated_revid303756624;
3837;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add immediatevoidfuture() to futures.java to create an immediately succeeding listenablefuture<void>.  relnotes= util.concurrent : added  immediatevoidfuture .  e90c8bbe566429fc46a33f88930c6379e57a8094;;0;unlabeled/unknown field in entry editor;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref version 41 on mac os x 10133<!-- hint: if you use a development version (available at  ensure that you use the latest one -->in some entry types the ""optional fields 1"" tab shows an additional field that is unlabeled:<img width""865"" alt""jabref-bug"" src"" is possible to type in it and the input is shown in the source as ""unknown"" if i remove all entries from ""optional fields 1"" the tab is still shown with this buggy field onlyif this issue was known and is solved in the latest master i apologize i am new to jabref";"can you give us a minimal bibtex sample where this happens? i cannot reproduce it here || this happens with a completely new database as well the article type for example has no defined ""optional fields"" in my case but it shows the tab nevertheless which only has this ""unknown"" field so i get:@article{  timestamp  {2018-03-19}  unknown    {asdfasdfasdf}} || ok this is likely a preferences problem because i cannot reproduce itdid you delete optional fields for entries via customize entry types? or any other configuration change?can you please reset your preferences or start with clean ones and then check which changes lead to the problem? i guess with resetted preferences the problem should not occur || indeed i deleted most of the optional fields via customize entry types (where i am able to change the order of fields but this order is not supposed to be saved?) where are these settings actually stored? are they exported with the other preferences? i wonder because there are not shown in the separate ""show preferences"" dialogue || closing this issue due to inactivity   please reopen the issue with additional information if the problem persists || ";;;;0;1;;
3837;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add immediatevoidfuture() to futures.java to create an immediately succeeding listenablefuture<void>.  relnotes= util.concurrent : added  immediatevoidfuture .  e90c8bbe566429fc46a33f88930c6379e57a8094;;0;[work in progress] grouping sets first pass;;turns out that we cannot do this correctly without having the execution component done ||;;;;0;1;;
3837;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add immediatevoidfuture() to futures.java to create an immediately succeeding listenablefuture<void>.  relnotes= util.concurrent : added  immediatevoidfuture .  e90c8bbe566429fc46a33f88930c6379e57a8094;;0;newbie question: how do you build rxjava? any prerequisite?;hellowhen i try to build rxjava i got`gradle dsl method not found: nebularelease()`referring to this chunk of gradle config```nebularelease {    addreleasebranchpattern(/\d+\\d+\\d+/)    addreleasebranchpattern(head)}```further search shown that the method supposedly come from netflixs nebula plugini guess it should be defined with `apply plugin: nebularxjava-project` (not really sure about it though) but apparently i was missing something herei am on gradle 15 still finding whats going onif you happen to know about this newbie mistake or where should i look into please tell me so i can save some time getting started with rxjava(fyi: i already checkout getting started guide on the wiki nothing related with this issue there);"you need gradle 212 || rxjava has gradle wrapper under git please just use it: `/gradlew clean build` || thanks @artem-zinnatullin and @akarnokd i end up use the wrapper as suggestedhowever it is error anyway with more detailsi dont clone rxjava repository instead i use git submodulewhen i build it with gradle it emit a warning which should not be the problem> git repository not found at /storage/projects/clientandroid/rxjava -- nebula-release tasks will not be available use the gitroot gradle property to specify a different directoryjust a release task that not availablethen an error> failure: build failed with an exception> > \* where:> build file /storage/projects/clientandroid/rxjava/buildgradle line: 9> > \* what went wrong:> a problem occurred evaluating root project rxjava> > failed to apply plugin [class nebulapluginrxjavaprojectrxjavareleaseplugin]>  &nbsp> cannot set property defaultversionstrategy on null objectline 9 is where nebula plugin is applied`apply plugin: nebularxjava-project`any info on this? || are you nesting the rxjava gradle build inside your own project using gradle? || @adi1133 correctbut the latter build i mentioned was perform with local gradle wrapper of rxjava || gradle dosent support nesting of arbitrary projects || @midnightwonderer `git` is a requirement to build rxjava the plugin uses the git history to detect the version could you explain why you need to build rxjava without `git`? || @adi1133 what is the criteria? what kind of project does not considered ""arbitrary""? (no offend i really dont know)@zsxwing git does exist but it is not a directory```$ cat gitgitdir: //git/modules/clientandroid/rxjava```should i go with symlink instead of submodule? or nebula plugin need some changes? || @midnightwonderer i meant the rxjava `git` since you didnt clone it i think it is not in your local directory could you talk more about what you want to do? why do you need to build rxjava by yourself but dont need to publish? || @zsxwing im not sure anymore what we are at just to make sure we are in sync let me repeat a bitrxjava `git` directory is in my local machine and exist somewhere`git` file was put in place of `git` directory this is a mechanism of git itself it act as (kind of) symlink to actual bare repositoryi still can commit and push within rxjava directory and it will affect the correct bare repository (if i understanding correctly)could you confirm that what you meant it the previous post still apply after this clarification || just did some research `jgit` used  nebula-plugin` doesnt support to open a submodule like this || @zsxwing thanks a lot || what are the reasons to keep rxjava as git submodule?on fri 8 apr 2016 00:29 sarun rattanasiri notifications@githubcomwrote:> @zsxwing  thanks a lot> > —> you are receiving this because you were mentioned> > reply to this email directly or view it on github>  || @artem-zinnatullin i just attempt to build it along with my project || what is the underlying reason you want to have rxjava built inside of your project ?- to change or add add custom operators you can do that using the maven dependency and the lift/compose methods - to debug the rxjava code you can do that using a maven dependency- to contribute to rxjava you fork and submit a pr that contains relevant unit tests || @adi1133 it is obviously > to contribute to rxjava you fork and submit a pr that contains relevant unit testsor at least just poke around and experiment || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
3839;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset package.  relnotes= com.google.common.collect.immutablesortedset : added  ceiling  and  floor  methods for gwt emulated immutablesortedset  706830ee1c7903af3d1d04478a601c2bd0a763bc;;0;moe sync 2020-03-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset packagerelnotes`comgooglecommoncollectimmutablesortedset`: added `ceiling` and `floor` methods for gwt emulated immutablesortedset706830ee1c7903af3d1d04478a601c2bd0a763bc;;;;;1;1;introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset packagerelnotes`comgooglecommoncollectimmutablesortedset`: added `ceiling` and `floor` methods for gwt emulated immutablesortedset-------------created by moe: https://githubcom/google/moemoe_migrated_revid303898439;
3839;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset package.  relnotes= com.google.common.collect.immutablesortedset : added  ceiling  and  floor  methods for gwt emulated immutablesortedset  706830ee1c7903af3d1d04478a601c2bd0a763bc;;0;consistent fx color scheme for jabref;the pr aims to make the look and feel of jabref more consistent by providing a well-chosen set of base colors and deriving other colors from it at the moment i used a flat and bright scheme with the original jabref blue as the theme color![scrshot]( addition to the changes in the fx css files i provide an additional true type font for the application icons that are not available in the material design icon set it can be loaded and used in exactly the same way as the material design icons and only small changes to the code where necessary as soon as we agreed on using this i can make further adjustments and additions (currently wined is missing) to the icons so that they fit perfectly into our toolbar the one-colored icons should represent the original icon as much as possible and should be recognizable the will look like this![i1]( ![i2]( ![i3]( ![i4]( those who would like to help to work on this:our base style is `modenacss` and to make our restyling easy to use and to understand we should try to redefine the color variables of `modenacss` as much as possible instead of explicitly introducing and using our own variables this means dont use explicit color settings in the definition of styles for a control if it is a commonly used property eg the border color try to find and overwrite the appropriate modena-variable if you indeed need a specific color then re-use the ones defined at the top of `maincss`remember that this is unfinished at the moment and i have rather commented out lines than simply deleting it-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);i played around with the ui a little and i like it i like the fact that the menu and tool bars are a little less color-intense than in the current maintable-betayou have my +1 for continuing with this line of work || i made further improvements to the custom icons and they look at least acceptable now if put on the toolbar:![toolbar]( more information on this view issue  i pulled the latest changes from maintable-beta im giving this free for review now note that there are still a lot of commented lines in the code to easily see what i have adjusted once we agree on something ill clean everything up || ive now merged this pr we can fine-tune the design later and ill provide a proposal for a dark theme in a new pr ||;;;;1;1;merge branch maintable-beta of  into consistent-fxcolors;
3839;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset package.  relnotes= com.google.common.collect.immutablesortedset : added  ceiling  and  floor  methods for gwt emulated immutablesortedset  706830ee1c7903af3d1d04478a601c2bd0a763bc;;0;is countconstantoptimizer broken?;"i saw  but when i tried i got the following result:```presto:orc> explain select count(42) from orders                                       query plan                                       ---------------------------------------------------------------------------------------- - output[_col0] > [count:bigint]                                                               _col0 : count                                                                      - aggregate(final) > [count:bigint]                                                            count : ""count""(""count_3"")                                                         - exchange[gather] > count_3:bigint                                                        - aggregate(partial) > [count_3:bigint]                                                        count_3 : ""count""(""expr"")                                                          - project > [expr:bigint]                                                                      expr : 42                                                                          - tablescan[hive orc:orders originalconstraint  true] >                               layout: hive```so it seems this optimizer is not working correct me if i am wrong@dain @martint @erichwang ";;;;;0;1;;
3839;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> introducing floor(e) and ceiling(e) method in gwt emulated immutablesortedset package.  relnotes= com.google.common.collect.immutablesortedset : added  ceiling  and  floor  methods for gwt emulated immutablesortedset  706830ee1c7903af3d1d04478a601c2bd0a763bc;;0;1x: fix takelast() backpressure;the counted and timed versions of `takelast` had a concurrency bug which allowed concurrent emission from the underlying queue that holds onto the values till the upstream completes when timed correctly both an `oncompleted()` and a `request()` that went from 0 to n could enter the emit() method and break the internal state of the non-concurrent queue note that this queue doesnt have to be concurrent by nature because the operator can emit only _after_ the upstream completes (`offer()` never runs concurrently with `poll()` unlike in `observeon`)in addition the emission didnt immediately complete if the queue was emptied and requested  0 in this operator the fact that the queue became empty is the indicator of completionboth issues can be  with the `postcompletexxx` mechanics in `backpressureutils`since the operator has to store `null` values the `postcompletexxx` had to be extended with an exit transform overload to allow converting the `notificationlite` values back to regular `t`/`null`;;;;;1;1;1x: fix takelast() backpressure;
3840;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> making headset(e  boolean)  tailset(e  boolean) public in gwt emulated immutablesortedset.  relnotes= com.google.common.collect.immutablesortedset : making  headset(e  boolean)  and  tailset(e  boolean)  methods public for gwt emulated immutablesortedset.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3;;0;moe sync 2020-03-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> making headset(e boolean) tailset(e boolean) public in gwt emulated immutablesortedsetrelnotes`comgooglecommoncollectimmutablesortedset`: making `headset(e boolean)` and `tailset(e boolean)` methods public for gwt emulated immutablesortedsete6779e404f0cd44fdc4b955acc03ad39250ffbe3;;;;;1;1;making headset(e boolean) tailset(e boolean) public in gwt emulated immutablesortedsetrelnotes`comgooglecommoncollectimmutablesortedset`: making `headset(e boolean)` and `tailset(e boolean)` methods public for gwt emulated immutablesortedset-------------created by moe: https://githubcom/google/moemoe_migrated_revid303959507;
3840;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> making headset(e  boolean)  tailset(e  boolean) public in gwt emulated immutablesortedset.  relnotes= com.google.common.collect.immutablesortedset : making  headset(e  boolean)  and  tailset(e  boolean)  methods public for gwt emulated immutablesortedset.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3;;0;ampersand is rendered as &ampamp in preview (double html escaping);-  i have tested the latest master version from  and the problem persistsjabref version 42-devsteps to reproduce:1 look at some entry with ampersand eg morgan & claypool;"its actually the same for any html entity: `&ampeacute` <- note the missing semicolon || hi @j0hannes actually `&amp` is in the html conversion table: you like to give a simple sample of raw `bib` text for us to test? || ```@misc{b1111  author  {b a}  title   {c \& d}  year    {1111}}```renders as `a b 1111 c &ampamp d` || ```@misc{b1111  author  {b a}  title   {c \& d}  year    {1111}}```renders as( me || the error happens when you go to ""next preview layout"":![image]( you copy the entry you get```<html><head></head><body><div class""csl-entry"">a b 1111 c &ampamp d</div></body></html>```i added another preview layout (african zoology) and i get a similar error:```<html><head></head><body><div class""csl-entry"">b  a 1111 c &ampamp d</div></body></html>``` || this issue probably only happens for csl-previews and not for the layout based ones i guess there is a problem with our latex to html formatter || this is the same thing as i reported post closed in entry preview: umlaut and ring diacritic not rendered correctly when apa and ieee preview layout is selected #5779 just like @tobiasdiez  point out || thanks to @josejesinohui this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || ive spent a couple of hours on this and my findings are very uncleari can no longer recreate the issueif the vimeo video has not been pre-loaded when you tap on it youll a button for sound (note that we are using muted1) and another for full screen if you tap either then the next bit of speech will cause the video to pause this can be prevented by setting autopause0 (by hand through the inspector) but the odd thing is that if you debug the code it looks like autopause0 should already have been in the urlvideoutilbuildvimeooptions has been returning strings with ""&amp"" in them the manual vimeo videos end up with ""&ampamp"" in the url which might be causing issues much better is to use just ""&"" in the string then return it to the tml with _new url(string)_ which will encode it as needed however videoutiltoembeddedurlwithoptions has 9 callers i will have to return to this issue when i have time to change and test them allbut there is no guarantee that the above will solve the issue because i cant recreate it || ";;;;0;1;;
3840;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> making headset(e  boolean)  tailset(e  boolean) public in gwt emulated immutablesortedset.  relnotes= com.google.common.collect.immutablesortedset : making  headset(e  boolean)  and  tailset(e  boolean)  methods public for gwt emulated immutablesortedset.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3;;0;initial decimal support (approach 2);this is followup patch for initial decimal implementation (issue #2797)what changed in this pull request:as we discussed this includes coercion support between decimal typeswhere possible we also defined decimal udfs using annotation based approachto limit the number of actual udf implementations we depend on coercion when possibleeg we define add operator only for (decimal(ps) decimal(ps))this is not feasible for many operators though so implementation of */% and inequality was not changed and uses builder code is also rebased on top of master;it would be great to have it in master and then do the refactoring work around type systdain how is your varchar patch? do you want to make any changes to it maybe we should just push it without major changes and refactor afterwards || it would also be great to meet to discuss limitations of this approach and next steps in typesystem areacc: @dain @martint @cberner @ilfrin @sopel39  || i rebased this pr on top of masterthere is also another pr ( with some extra fixes of unit tests related to introduction of parametrized varchar type this fixes are rather hacky maybe @dain can make some use of them when working on target shape of varchar patcheshow is work on that btw ) ?cc: @martint @ilfrin || im going to skip the first few commits until they are rebased on the results of  || superseded by  ||;;;;0;1;;
3840;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-03-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> making headset(e  boolean)  tailset(e  boolean) public in gwt emulated immutablesortedset.  relnotes= com.google.common.collect.immutablesortedset : making  headset(e  boolean)  and  tailset(e  boolean)  methods public for gwt emulated immutablesortedset.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3;;0;1x: fix concatmap scalar/empty source behavior;there were two tiny problems with the rewritten `concatmap` operator mainly due to copy-paste error:- when a scalar was concatenated the `active` field was not set and thus the next prefetched source overwrote it- when the scalar was set on the arbiter its custom producer didnt check for n > 0 zero causing instant emission always generally producerrequest(0) is allowed and should be no-op (unlike rs)- when an empty() was encountered as a last source the it didnt trigger the check for completion afterwards; ;;;;1;1;more tests and fix empty() case as well;
3841;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make  duration  overloads of  awaitrunning  and  awaitterminated   final  in all  abstract*service  classes.  the other overloads already are already  final . these ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> extend deadline to fix flakiness.  it s possible that we don t really need to assert that the pool finishes shutting down at all. maybe the other existing assertions are enough? but i haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca;;0;moe sync 2020-04-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make `duration` overloads of `awaitrunning` and `awaitterminated` `final` in all `abstract*service` classesthe other overloads already are already `final` these ones arent only because we didnt think to do this when adding the new `default` methods929867a724fc2a9b4f881534dca8d1458c9ece9c-------<p> extend deadline to fix flakinessits possible that we dont really need to assert that the pool finishes shutting down at all maybe the other existing assertions are enough? but i havent bothered to look into it1611de32e6a029ef713499b6e878c1af11f613ca;;;;;1;1;extend deadline to fix flakinessits possible that we dont really need to assert that the pool finishes shutting down at all maybe the other existing assertions are enough? but i havent bothered to look into itrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid304194678;
3841;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make  duration  overloads of  awaitrunning  and  awaitterminated   final  in all  abstract*service  classes.  the other overloads already are already  final . these ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> extend deadline to fix flakiness.  it s possible that we don t really need to assert that the pool finishes shutting down at all. maybe the other existing assertions are enough? but i haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca;;0;new crowdin translations;enjoy!;"no idea i was blindly assuming that crowdin does the right thing especially since the build passed maybe it conflicts with localizations that are added directly via a pr? should i just re-add the removed translations on master? || after merging such prs the jabref crowidn admins (me @siedlerchr) habe topush ""stop sync"" and ""start sync"" to trigger an importam 13032018 16:53 schrieb ""jörg lenhard"" <notifications@githubcom>:> no idea i was blindly assuming that crowdin does the right thing> especially since the build passed>> maybe it conflicts with localizations that are added directly via a pr?> should i just re-add the removed translations on master?>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or mute> the thread> < > || thats why i was waiting with merging the spanish pr as i was unsure if crowdin gets the changesgood to know that in such cases we have to re-trigger the sync || ";;;;1;1;new translations jabref_enproperties (spanish);
3841;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make  duration  overloads of  awaitrunning  and  awaitterminated   final  in all  abstract*service  classes.  the other overloads already are already  final . these ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> extend deadline to fix flakiness.  it s possible that we don t really need to assert that the pool finishes shutting down at all. maybe the other existing assertions are enough? but i haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca;;0;allow select * in aggregate if all columns are also in group by;;this used to work did it break recently? || yes the row type work broke it i will fix the commit message to be fix select table\* with aggregate || first two commits  @martint reviewed the remove columnreferences from expressionanalyzer and analysis commit and confirmed that it is okay now ||;;;;0;1;;
3841;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make  duration  overloads of  awaitrunning  and  awaitterminated   final  in all  abstract*service  classes.  the other overloads already are already  final . these ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> extend deadline to fix flakiness.  it s possible that we don t really need to assert that the pool finishes shutting down at all. maybe the other existing assertions are enough? but i haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca;;0;2x;;whoa this pr is wrongly configured what was the intent? || im closing this as being unintelligible ||;;;;0;1;;
3842;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c;;0;moe sync 2020-04-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add j2cl specializers for doublesmin/max floatsmin/max intsmin/max and shortsmin/max79c378445bb29e204853b80645e6fb0f949c289c;the travis build is green but didnt get pushed back to github ||;;;;1;1;add j2cl specializers for doublesmin/max floatsmin/max intsmin/max and shortsmin/maxrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid304448129;
3842;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c;;0;"""open library"" dialog wont open";"-  i have tested the latest master version from  and the problem persistswindows 10 100 amd64 java 180_161**description:**""open library"" dialog wont open**steps to reproduce:**1 open jabref2 try to open a library either via the menu icon file > open library or the keyboard shortcut<details>  <summary>log file</summary>    ```  problem running in fx threadjavautilconcurrentexecutionexception: javalangillegalargumentexception: folder parameter must be a valid folder	at javautilconcurrentfuturetaskreport(unknown source)	at javautilconcurrentfuturetaskget(unknown source)	at orgjabrefguiutildefaulttaskexecutorruninjavafxthread(defaulttaskexecutorjava:35)	at orgjabrefguiimporteractionsopendatabaseactionactionperformed(opendatabaseactionjava:112)	at javaxswingabstractbuttonfireactionperformed(unknown source)	at javaxswingabstractbutton$handleractionperformed(unknown source)	at javaxswingdefaultbuttonmodelfireactionperformed(unknown source)	at javaxswingdefaultbuttonmodelsetpressed(unknown source)	at javaxswingabstractbuttondoclick(unknown source)	at javaxswingplafbasicbasicmenuitemuidoclick(unknown source)	at javaxswingplafbasicbasicmenuitemui$handlermousereleased(unknown source)	at javaawtawteventmulticastermousereleased(unknown source)	at javaawtcomponentprocessmouseevent(unknown source)	at javaxswingjcomponentprocessmouseevent(unknown source)	at javaawtcomponentprocessevent(unknown source)	at javaawtcontainerprocessevent(unknown source)	at javaawtcomponentdispatcheventimpl(unknown source)	at javaawtcontainerdispatcheventimpl(unknown source)	at javaawtcomponentdispatchevent(unknown source)	at javaawtlightweightdispatcherretargetmouseevent(unknown source)	at javaawtlightweightdispatcherprocessmouseevent(unknown source)	at javaawtlightweightdispatcherdispatchevent(unknown source)	at javaawtcontainerdispatcheventimpl(unknown source)	at javaawtwindowdispatcheventimpl(unknown source)	at javaawtcomponentdispatchevent(unknown source)	at javaawteventqueuedispatcheventimpl(unknown source)	at javaawteventqueueaccess$500(unknown source)	at javaawteventqueue$3run(unknown source)	at javaawteventqueue$3run(unknown source)	at javasecurityaccesscontrollerdoprivileged(native method)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javaawteventqueue$4run(unknown source)	at javaawteventqueue$4run(unknown source)	at javasecurityaccesscontrollerdoprivileged(native method)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javaawteventqueuedispatchevent(unknown source)	at javaawteventdispatchthreadpumponeeventforfilters(unknown source)	at javaawteventdispatchthreadpumpeventsforfilter(unknown source)	at javaawteventdispatchthreadpumpeventsforhierarchy(unknown source)	at javaawteventdispatchthreadpumpevents(unknown source)	at javaawteventdispatchthreadpumpevents(unknown source)	at javaawteventdispatchthreadrun(unknown source)caused by: javalangillegalargumentexception: folder parameter must be a valid folder	at comsunglassuicommondialogsconvertfolder(commondialogsjava:238)	at comsunglassuicommondialogsshowfilechooser(commondialogsjava:190)	at comsunjavafxtkquantumquantumtoolkitshowfilechooser(quantumtoolkitjava:1503)	at javafxstagefilechoosershowdialog(filechooserjava:416)	at javafxstagefilechoosershowopenmultipledialog(filechooserjava:373)	at orgjabrefguifxdialogserviceshowfileopendialogandgetmultiplefiles(fxdialogservicejava:179)	at orgjabrefguiimporteractionsopendatabaseactionlambda$actionperformed$0(opendatabaseactionjava:112)	at javautilconcurrentfuturetaskrun(unknown source)	at comsunjavafxapplicationplatformimpllambda$null$172(platformimpljava:295)	at javasecurityaccesscontrollerdoprivileged(native method)	at comsunjavafxapplicationplatformimpllambda$runlater$173(platformimpljava:294)	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:95)	at comsunglassuiwinwinapplication_runloop(native method)	at comsunglassuiwinwinapplicationlambda$null$147(winapplicationjava:177)	at javalangthreadrun(unknown source)uncaught exception occurred in thread[awt-eventqueue-06main]javalangnullpointerexception	at javautilarraylistaddall(unknown source)	at orgjabrefguiimporteractionsopendatabaseactionactionperformed(opendatabaseactionjava:113)	at javaxswingabstractbuttonfireactionperformed(unknown source)	at javaxswingabstractbutton$handleractionperformed(unknown source)	at javaxswingdefaultbuttonmodelfireactionperformed(unknown source)	at javaxswingdefaultbuttonmodelsetpressed(unknown source)	at javaxswingabstractbuttondoclick(unknown source)	at javaxswingplafbasicbasicmenuitemuidoclick(unknown source)	at javaxswingplafbasicbasicmenuitemui$handlermousereleased(unknown source)	at javaawtawteventmulticastermousereleased(unknown source)	at javaawtcomponentprocessmouseevent(unknown source)	at javaxswingjcomponentprocessmouseevent(unknown source)	at javaawtcomponentprocessevent(unknown source)	at javaawtcontainerprocessevent(unknown source)	at javaawtcomponentdispatcheventimpl(unknown source)	at javaawtcontainerdispatcheventimpl(unknown source)	at javaawtcomponentdispatchevent(unknown source)	at javaawtlightweightdispatcherretargetmouseevent(unknown source)	at javaawtlightweightdispatcherprocessmouseevent(unknown source)	at javaawtlightweightdispatcherdispatchevent(unknown source)	at javaawtcontainerdispatcheventimpl(unknown source)	at javaawtwindowdispatcheventimpl(unknown source)	at javaawtcomponentdispatchevent(unknown source)	at javaawteventqueuedispatcheventimpl(unknown source)	at javaawteventqueueaccess$500(unknown source)	at javaawteventqueue$3run(unknown source)	at javaawteventqueue$3run(unknown source)	at javasecurityaccesscontrollerdoprivileged(native method)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javaawteventqueue$4run(unknown source)	at javaawteventqueue$4run(unknown source)	at javasecurityaccesscontrollerdoprivileged(native method)	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(unknown source)	at javaawteventqueuedispatchevent(unknown source)	at javaawteventdispatchthreadpumponeeventforfilters(unknown source)	at javaawteventdispatchthreadpumpeventsforfilter(unknown source)	at javaawteventdispatchthreadpumpeventsforhierarchy(unknown source)	at javaawteventdispatchthreadpumpevents(unknown source)	at javaawteventdispatchthreadpumpevents(unknown source)	at javaawteventdispatchthreadrun(unknown source)  ```</details>";hm that is really odd works fine for me on windows 10 this exception indicates that the folder in which jabref tries to look  does not exist: (probaly import working directory)  and this is probably the last used folder you should check the configured folders under settings and your database `javautilconcurrentexecutionexception: javalangillegalargumentexception: folder parameter must be a valid folder` || resetting the preferences did not help but un- and then reinstalling jabref did must have been some weird misconfiguration will report if the issue shows up again in the future ||;;;;0;1;;
3842;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c;;0;update release notes;;sorry mixed with other commits  ||;;;;0;1;;
3842;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c;;0;1x: improve executorscheduler worker unsubscription;i noticed that when a worker built from `schedulersfrom(executorsnewthread(1))` is unsubscribed the use of a `compositesubscription` to track task subscriptions means that the tasks may be unsubscribed in any old order (`compositesubscription` holds its subscriptions in a `hashset`)  this means that if the worker is given task a and task b then the race can prevent a from running but allow b to run! ive included a unit test in this pr that demos it fails every time on my machine on the first loopthis  pr is really for discussion about the problem and possible fixesi have included a possible fix which is to track overall subscription using a volatile boolean and check that boolean before running any task if this was considered the way to go some further simplification would take place in the operator (might not need to check individual task subscriptions)i havent checked other schedulers for this sort of problem yet;do you have a real case that the order does matter? i think this affects all compositesubscription usages || i see this as an eager cancellation matter than a race there is no need for the flag but just check tasksisunsubscribed() before and run some cleanup:``` javado {    if (tasksisunsubscribed()) {        queueclear()        return    }    scheduledaction sa  queuepoll()    if (tasksisunsubscribed()) {        queueclear()        return    }    if (!saisunsubscribed()) {        sarun()    }} while (wipdecrementandget() ! 0)``` || @zsxwing im confusing the issue talking about `compositesubscription` its really about subscription management in `executorscheduler` i dont have a problem with `compositesubscription` in general@akarnokd thanks that looks good ill amend the pr  its interesting you dont classify it as a bug but i guess we havent documented our expectations of `scheduler`s in this area do you think `schedulerunsubscribe()` should offer stronger guarantees similar to the guarantee offered  executorserviceshutdownnow()`?> attempts to stop all actively executing tasks halts the> processing of waiting tasks and returns a list of the tasks> that were awaiting executionthe relevant bit i suppose is _halts the processing of waiting tasks_ || @davidmoten  gotcha `eventloopworker` has the same issue you can try `schedulerscomputation()` or `schedulersio()` to reproduce it in your test || @zsxwing `computation()` and `io()` both fail too thanks  || @akarnokd dont you think that second check of `tasksisunsubscribed()` in your snippet is overkill? can i remove?im also wondering if `unsubscribe()` can look like this:``` java    @override    public void unsubscribe() {        queueclear()        tasksunsubscribe()    }``` and then `run()` would be: ``` java        @override        public void run() {            do {                if (tasksisunsubscribed()) {                    return                }                scheduledaction sa  queuepoll()                if (sa  null) {                    return                }                if (!saisunsubscribed()) {                    sarun()                }            } while (wipdecrementandget() ! 0)        }``` || no need for stronger guaranteesthat `unsubscribe` you are suggesting delays the `tasksunsubscribe()` and the queue could still be in use swap the two lines in addition youd still need a clear in the drain loop because it could be still scheduled with a non-empty queue || thanks @akarnokd  in terms of guarantees i was going to suggest that the javadoc of `scheduler` at the class level be supplemented with a statement similar to that of `executorserviceshutdownnow()` once all schedulers had been enhanced like this pr || updated pr squashed commits ||   @davidmoten mind thinking about how to fix `eventloopworker`? :) || @zsxwing sure ill have a look at `eventloopworker`i think there is an outstanding race with this pr:``` javaif (!saisunsubscribed()) {    sarun()}```might have to be:``` javaif (!tasksisunsubscribed()) {    sarun()}```ill have a look a bit later today and ill submit another pr if needed || `if (!saisunsubscribed()) {` is necessary  `sa` may be unsubscribed by the user || yep i just noticed that myself ta || @zsxwing i think it should look like this:``` java        @override        public void run() {            do {                if (tasksisunsubscribed()) {                    queueclear()                    return                }                scheduledaction sa  queuepoll()                if (sa  null) {                    return                }                if (!saisunsubscribed()) {                    if (!tasksisunsubscribed()) {                        sarun()                    } else {                        queueclear()                        return                    }                }            } while (wipdecrementandget() ! 0)        }``` ||;;;;1;1;fix undesired execution in executorscheduler worker when unsubscribed;
3846;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> change return type of servicemanager.servicesbystate() to immutablesetmultimap.  but also generate a bridge method with the old signature for binary compatibility.   (which i keep forgetting to mention from commits)    relnotes= util.concurrent : changed the return type of  servicemanager.servicesbystate()  to  immutablesetmultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c;;0;moe sync 2020-04-03;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> change return type of servicemanagerservicesbystate() to immutablesetmultimapbut also generate a bridge method with the old signature for binary compatibility (which i keep forgetting to mention from commits)relnotes`utilconcurrent`: changed the return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility)c467744698d85d56349fbc773cb75fae747a9a4c;;;;;1;1;change return type of servicemanagerservicesbystate() to immutablesetmultimapbut also generate a bridge method with the old signature for binary compatibility (which i keep forgetting to mention from commits)relnotes`utilconcurrent`: changed the return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility)-------------created by moe: https://githubcom/google/moemoe_migrated_revid304613375;
3846;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> change return type of servicemanager.servicesbystate() to immutablesetmultimap.  but also generate a bridge method with the old signature for binary compatibility.   (which i keep forgetting to mention from commits)    relnotes= util.concurrent : changed the return type of  servicemanager.servicesbystate()  to  immutablesetmultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c;;0;requested texture dimensions require dimensions that exceed maximum texture size;<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-03-13--master--90c7afa1clinux 440-116-generic amd64 java 180_161steps to reproduce:this exception happens apparently at random last time it happened when i deleted some entries before that it happened when i tried to edit an entry it happens quite often but i still did not find a specific set of actions that reproduces it<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>javalangruntimeexception: requested texture dimensions (1107x2147483647) require dimensions (1107x0) that exceed maximum texture size (16384)	at comsunprismes2es2rttexturecreate(es2rttexturejava:220)	at comsunprismes2es2resourcefactorycreaterttexture(es2resourcefactoryjava:157)	at comsunjavafxtkquantumuploadingpainterrun(uploadingpainterjava:117)	at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)	at javautilconcurrentfuturetaskrunandreset(futuretaskjava:308)	at comsunjavafxtkrenderjobrun(renderjobjava:58)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)	at comsunjavafxtkquantumquantumrenderer$pipelinerunnablerun(quantumrendererjava:125)	at javalangthreadrun(threadjava:748)</details>;"as i never encoutered that exception and reading around it seems like it is caused by some control which is not seized propertly do you use a high dpi or a monitor with a high resolution? || here is the window showing my display settings i have ubuntu 1604 if that matters![screenshot from 2018-03-14 11-58-44]( || do you experience any wrong behavior from jabref? or is it just that the exception is logged but everything working ""fine"" for you? || sometimes this exception does no harm but sometimes jabref hangs (freezes) and when i look at the console i see this exceptionmaybe the two are unrelated - i did not find out yet || this is probably one of our javafx/swing issues could you please check the build from  thanks! note this version is in a very early beta stage and might not work as expected see #3621 for further details || i encountered the same (or similar?) exception  and when it happens i can not edit an item (see image) after reboot it works again <details>```javalangruntimeexception: requested texture dimensions (1408x2147483647) require dimensions (1408x0) that exceed maximum texture size (16384)        at comsunprismes2es2rttexturecreate(es2rttexturejava:220)        at comsunprismes2es2resourcefactorycreaterttexture(es2resourcefactoryjava:157)        at comsunjavafxtkquantumuploadingpainterrun(uploadingpainterjava:117)        at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)        at javautilconcurrentfuturetaskrunandreset(futuretaskjava:308)        at comsunjavafxtkrenderjobrun(renderjobjava:58)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)        at comsunjavafxtkquantumquantumrenderer$pipelinerunnablerun(quantumrendererjava:125)        at javalangthreadrun(threadjava:748)```</details>here some information about the versionjabref 41 / linux 3100-693211el7x86_64 amd64 / java 180_161 / centos with kde![jabref-error]( || could you please test this with the latest master version? buildsjabreforg we replaced the control for the source editor as it was causing freezing issues and other weird problems  || with jabref--master--latestjar i still get a runtimeexception but with a different required dimension the gui problem however (red rectangle in my previous post) did not happened again the jabref-42-dev--snapshot--2018-03-30--master--3d0853325jar also created the exception i didnt find a pattern to reproduce it every time <details>```javalangruntimeexception: requested texture dimensions (1908x2147483647) require dimensions (1908x0) that exceed maximum texture size (16384)        at comsunprismes2es2rttexturecreate(es2rttexturejava:220)        at comsunprismes2es2resourcefactorycreaterttexture(es2resourcefactoryjava:157)        at comsunjavafxtkquantumuploadingpainterrun(uploadingpainterjava:117)        at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)        at javautilconcurrentfuturetaskrunandreset(futuretaskjava:308)        at comsunjavafxtkrenderjobrun(renderjobjava:58)        at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)        at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)        at comsunjavafxtkquantumquantumrenderer$pipelinerunnablerun(quantumrendererjava:125)        at javalangthreadrun(threadjava:748)```</details> || could you please test if the current development version still causes the issues? || hi with jabref--master--latestjar i do not get any exceptions after a short test the gui problem also does not show up and it feels more responsive note: since the last test i change my setup from centos/kde to fedora28/kde  || thanks for your feedback! we are currently in the process of converting all dialogs to javafx which is more modern and better interacts with the os  || ";;;;0;1;;
3846;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> change return type of servicemanager.servicesbystate() to immutablesetmultimap.  but also generate a bridge method with the old signature for binary compatibility.   (which i keep forgetting to mention from commits)    relnotes= util.concurrent : changed the return type of  servicemanager.servicesbystate()  to  immutablesetmultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c;;0;add local file connector;;"is this only used to analyze prestos "" || superseded by #5078  || ";;;;0;1;;
3846;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> change return type of servicemanager.servicesbystate() to immutablesetmultimap.  but also generate a bridge method with the old signature for binary compatibility.   (which i keep forgetting to mention from commits)    relnotes= util.concurrent : changed the return type of  servicemanager.servicesbystate()  to  immutablesetmultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c;;0;1x: release 113 changesmd update;update to the changesmd file(without the flatmap and replay perf enhancements);:+1: for release with this content ||  ;;;;1;1;1x: release 113 changesmd update;
3852;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> add standardimmutabledirectednetworktest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> fix unnecessary method access level escalation.  fixes   8ae733081feff0801bb1fb71e5bd39f713e19595;;0;moe sync 2020-04-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest1f1a0a2fd37345ee966049e54091cb2f66f4c1c3-------<p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes8563c8706b499acd7f1e16c6cf42904f032aa5d1-------<p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktestd50fcf89b5148f12e4d0713e3deab0a75ac47c1a-------<p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktestbbce918101323bbaf2e8f063a1ceca4769d74996-------<p> add standardimmutabledirectednetworktest879cec90e07092bf63d748dbac028f2d2b28a9bc-------<p> fix unnecessary method access level escalationfixes https://githubcom/google/guava/pull/38438ae733081feff0801bb1fb71e5bd39f713e19595;;;;;1;1;fix unnecessary method access level escalationfixes  by moe: https://githubcom/google/moemoe_migrated_revid305559100;
3852;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> add standardimmutabledirectednetworktest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> fix unnecessary method access level escalation.  fixes   8ae733081feff0801bb1fb71e5bd39f713e19595;;0;science direct api broken;```sciencedirect api request failedcommashapeunirest javalangruntimeexception: javalangruntimeexception: orgjsonjsonexception: a jsonarray text must start with [ at 1 [character 2 line 1]	at commashapeunirest at commashapeunirestrequestbaserequestasjson(baserequestjava:68)	at orgjabreflogicimporterfetchersciencedirectgeturlbydoi(sciencedirectjava:87)	at orgjabreflogicimporterfetchersciencedirectfindfulltext(sciencedirectjava:47)	at orgjabreflogicimporterfulltextfetchersfindfulltextpdf(fulltextfetchersjava:50)	at orgjabrefguifieldeditorslinkedfileseditorviewmodellambda$fetchfulltext$5(linkedfileseditorviewmodeljava:181)	at orgjabrefguiutilbackgroundtask$1call(backgroundtaskjava:39)	at orgjabrefguiutildefaulttaskexecutor$1call(defaulttaskexecutorjava:98)	at javafxconcurrenttask$taskcallablecall(taskjava:1423)	at javautilconcurrentfuturetaskrun(unknown source)	at javautilconcurrentexecutors$runnableadaptercall(unknown source)	at javautilconcurrentfuturetaskrun(unknown source)	at javautilconcurrentthreadpoolexecutorrunworker(unknown source)	at javautilconcurrentthreadpoolexecutor$workerrun(unknown source)	at javalangthreadrun(unknown source)caused by: javalangruntimeexception: javalangruntimeexception: orgjsonjsonexception: a jsonarray text must start with [ at 1 [character 2 line 1]	at commashapeunirest at commashapeunirest  14 morecaused by: javalangruntimeexception: orgjsonjsonexception: a jsonarray text must start with [ at 1 [character 2 line 1]	at commashapeunirest at commashapeunirest  15 morecaused by: orgjsonjsonexception: a jsonarray text must start with [ at 1 [character 2 line 1]	at orgjsonjsontokenersyntaxerror(jsontokenerjava:433)	at orgjsonjsonarray<init>(jsonarrayjava:106)	at orgjsonjsonarray<init>(jsonarrayjava:145)	at commashapeunirest  16 more```full text download seems to be really slow too now;is this  with your pr?  || not sure i think this has another cause || i tested a few downloads and the log did not appear tests are also green again so closing this for now ||;;;;0;1;;
3852;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> add standardimmutabledirectednetworktest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> fix unnecessary method access level escalation.  fixes   8ae733081feff0801bb1fb71e5bd39f713e19595;;0;update release notes for 0124;;;;;;0;1;;
3852;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> merge standardsimpledirectedsortednetworktest into standardmutabledirectednetworktest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> move tests from multinetwork-test classes to base classes in preparation for merging the multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> merge standarddirectedmultinetworktest into standardmutabledirectednetworktest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> merge standardundirectedmultinetworktest into standardmutableundirectednetworktest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> add standardimmutabledirectednetworktest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> fix unnecessary method access level escalation.  fixes   8ae733081feff0801bb1fb71e5bd39f713e19595;;0;completable and action0 interface does not declare throws exception;"by no means an expert in rxjava but i was trying to use the new completable classi noticed that i was forced to add a try catch block```return completablefromaction(new action0() {@override        public void call() {            request request  new requestbuilder()                    url(rootresourcegetlinkwithrelpath(rellinkshome_config)geturi())                    header(""user-agent"" user_agent)                    build()            try {                response response  ok                homeconfig homeconfig  objectmapperreadvalue(responsebody()charstream() homeconfigclass)                buspost(homeconfigresponseeventof(homeconfig))            } catch (ioexception e) {                throw new runtimeexception(e)            }        }```however observable does not and lets the error propogate```return observablefromcallable(new callable<rootresource>() {        @override        public rootresource call() throws exception {            request request  new requestbuilder()                    url(url)                    addheader(""accept"" ""application/json"")                    build()            response response  ok            rootresource rootresource  objectmapperreadvalue(responsebody()charstream() rootresourceclass)            beanfactoryregisterstatefulbean(rootresource)            return rootresource        }```";see `completablefromcallable(callable<?>)` || i did but i dont want to return a value from the call || > returns a completable which when subscribed executes the callable function ignores its normal result and emits onerror or oncompleted only || well i kind of agree here with @qazt482 returning any result from thing that intended to be action is weird one of the reasons why `completable` was added as an alternative for `observable<void>` / `single<void>` is because nobody wants to `return null` || its a convenience trade-off: you dont have to type out try-catch in exchange for a boilerplate `return null` || it just seems weird that completable was introduced so you dont have to return null but you do in some caseswould it be a bad thing to add throws exception to the actionx interfaces? || that would break the binary compatibility i think i could have added an `action0e` that also defines an `exception` but historically there is a resistance against such interfaces || adding and removing exceptions is only source incompatible not binary itmay result in some annoyed users who are using actions and you may have toadd a lot of try/catches where there wasnt before in this code baseon wed apr 13 2016 4:26 am david karnok notifications@githubcom wrote:> that would break the binary compatibility i think i could have added an> action0e that also defines an exception but historically there is a> resistance against such interfaces> > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  || if you really want this look at this pr #1305 for a backward compatible way to do it || one approach could be to introduce a new set of interfaces for actions that throws as well as for functions to prevent that users will have to add unnecessary broad `try{}catch(exception e){}`  you could use generics in throws declarations:```    public interface throwingaction0<e extends exception> extends action {        void call() throws e    }    public interface throwingfunc0<r e extends exception> extends function {        r call() throws e    }``` || even if new interfaces were added you cant change the method arguments but overloading can cause ambiguities thus you need name the operators differently then you need to duplicate and adapt operator code change the operators to use throwingaction0 wrap action0 into throwingaction0 || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;0;oadoi broken when queried with wrong doi;refs https://githubcom/impactstory/oadoi/issues/52;;;;;0;1;;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;0;cleanup raptor files in orcstoragepagesink;the `rollback()` method should delete all local files in both the staging and storage directories (the `commit()` method might have failed halfway through moving the files from staging to storage);;;;;0;1;;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;3418.0;moe sync 2020-04-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea;;remove @beta from service and servicemanager;- in service it looks like it might be nice to use duration instead of (long timeunit) but im not sure were ready to take that plunge soon enough to worry about it -- and of course we want most people to run through servicemanager (where we can add such overloads) anyway(rumor has it that jesse wilson might be interested in this);any idea if this will happen? ive been using this api and id love to see the beta removed from it || i am interested in this || it looks like `javatime` overloads have been added is this reasonable now ? || its been on my list of items for the new issue-planning process ive tied up the other few issues i was looking at so this can be next || other open issues related to `service`:- services that are stopped cannot be restarted #418 - abstractservice needs functionality to triggershutdown or interrupt running tasks #1918- racecondition with abstractexecutionthreadservice? #2966- feature request: allow specifying dependencies in servicemanager #1406- feature request: add logging to servicemanagerstopasync #1405- add servicestateisterminal() #2403most of these look like features we could add after finalizing the existing api the main exception is permitting restarting services but that is a big enough change that we are unlikely to ever change the core `service` classes for it even when they are still `@beta` apis (we may still provide some other way to emulate restartable services just one that doesnt touch the core api) || on the `duration` front we might wish that `abstractscheduledservicecustomscheduler` were the name of the `duration`-based api rather than the `long timeunit`-based (ie `schedule`-based) api but since that name is taken for the latter were likely to pick a clumsier name for the `duration`-based method but im not sure a rename of the existing api would be worth the trouble especially since many android users cant easily use `duration` yet || also: i noticed recently that the `service` and `servicemanager` `await*` methods are `void` methods that throw `timeoutexception` this seems contrary to jdk precedent which appears to [use `timeoutexception` exclusively for non-`void` methods]( there are tradeoffs here (performance vs chance of unintentionally ignoring a failure) it may also be worth noting that our `await*` methods can also throw `illegalstateexception` on failure so were already somewhat exception-oriented anyway this feels more like an arguable wart than something wed actually change || hmm `servicemanager` does have [a no-`executor` overload of its `addlistener` method]( which is contrary to our usual practices we may want to take a look at removing that but that shouldnt interfere with removing `@beta` from the rest of the api || `immutablemultimap` is an unfortunate return type for `servicesbystate()`: we recommend either `immutablelistmultimap` or `immutablesetmultimap` as appropriate (here `immutablesetmultimap`) shockingly this _might_ be the only place that we inappropriately returned `immutablemultimap` / `multimap` we could try to fix that if we wanted || note that we can improve the return type of `servicesbystate()` compatibly by injecting a bridge method || for #418 i think the best solution is to start a fresh instance of the `service` class that also makes it much easier to implement correct servicesfor #1406 i’ve got a full implementation of this in misk heres an [example test]( the trickiest part of our solution was expressing dependency relationships without instantiating service objects first for example we won’t construct `schemamigratorservice` until `databaseconnectionservice` is `running` our solution is deeply coupled to guice because it’s what does the instance creation stuff i found it very convenient to express service dependencies alongside di || thanks i suspect that we will keep the no-`executor` overload of `addlistener` as `@beta` so that we can deprecate and remove it but im optimistic that we can remove `@beta` from the rest ill try to have an update by the end of the week || for #1406 weve done something kind of like what you have @swankjesse but using a kotlin dsl:```kotlinclass coordinatedservicesbuilder {    private val dependencygraph  graphbuilderdirected()build<service>()    fun servicedependson(vararg upstreamservices: service) {        dependencygraphaddnode(this) // allow no dependencies        upstreamservicesforeach { service ->            dependencygraphputedge(this service)        }    }    fun build(): set<service> {        require(!graphshascycle(dependencygraph))        // assemble the set of coordinated services    }}fun createcoordinatedservices(init: coordinatedservicesbuilder() -> unit)     coordinatedservicesbuilder()apply(init)build()```usage is then:```kotlinval servicemanager      servicemanager(        createcoordinatedservices {            serviceadependson(serviceb)            servicebdependson(servicec)            serviceddependson()        }    )```we werent worried about instantiation order we also built an extension to servicemanager to allow it to be used as a service - since we have some services that manage many other services from one class not sure how much general utility that could find || as hinted at [in #2966]( we arent sure if we love the contract of `abstractexecutionservicetriggershutdown` so we might leave that `@beta` too recommending that users who want similar functionality (and want to avoid `@beta` apis) attach a `stopping` listener to do that sort of worknothing new has come up in the past couple days though so ive started work on deprecating the 1-arg `addlistener`\[edit: following after  \] || progress:- deprecated 1-arg overload of `servicemanageraddlistener`- made `duration` overloads of `awaitrunning` and `awaitterminated` `final` in all `abstract*service` classes- changed return type of `servicemanagerservicesbystate()` to `immutablesetmultimap` (but also retained a method with the old signature for binary compatibility) \[not yet mirrored out\]im planning to put `@beta` on `abstractexecutionservicetriggershutdown` and `abstractservicedocancelstart` and then remove `@beta` from the types under discussionif anyone objects please speak up soon :) || jesse / others: let me know how this looks (i tweaked jesses cl slightly to keep 2 individual methods `@beta` but other than that it should look just how youd expect) || # 🎉# β# 💯;1;0;remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;3724.0;provide factories for creating the default scheduler instances;unlike other hooks the `rxjavaschedulershook` has no access to the real `scheduler` instances in order to do wrapping/delegation with these factory methods a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulersfor android this wrapping/delegation use-case is important for ui testing we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre empty this is easy to do currently but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under testthese three methods are referenced in #3724 and i think providing the defaults is useful as well as eventually adding overloads which take `threadfactory` instances for each;"please correct me if im wrong but looks like as soon as you access one of the new methods `static final schedulersinstance` will be instantiated which will make impossible to use `rxjavaschedulershook` as you described have you checked described use case? maybe add such tests as example if possible?> we have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when theyre emptyjust wanted to say for those who may find this pr later: empty/non-empty state of schedulers is not 100% source of truth for ui tests you may have some background or time related (periodic/etc) code that does not affect the ui directly and may even freeze tests || you are accessing the methods from the hook which was called from the static initializer of this class on first reference to `schedulersio()` or the like ill add a test || yup but there is still potential problem if somebody will try to create schedulers using these methods outside of the hook for example in `@beforeclass`/etc or probably even just for non-test needs -> may result in hours of trying to understand why hook is not overriding schedulers…maybe move these methods to `rxjavaschedulershook`? || that prevents package scoped methods from being used in the factory || > that prevents package scoped methods from being used in the factorywe can move schedulers to `internalschedulers` to ""defend"" from that (otherwise somebody can always use reflection to break package scope) and make constructors publicideal solution would be to return schedulers in `rxjavaschedulershook` by default instead of returning `null` like it does now so calling `supergetsomescheduler()` will give original instance that you can wrap/etc as you wish though well have to handle `null` as default too// sorry im very tired and want to sleep so i may come to wrong conclusions || the factories were moved to the hook ||  :+1: now but let me ask again what about this:> ideal solution would be to return schedulers in `rxjavaschedulershook` by default instead of returning `null` like it does now so calling `supergetsomescheduler()` will give original instance that you can wrap/etc as you wish though well have to handle `null` as default toono need for new methods no need to fight with instantiation order and package scope visibility yes user wont be able to instantiate new scheduler of required type outside of the hook but its not possible at the moment so nobody loses nothing ||  ";apis for easily changing the thread priority of default schedulers via hook;"on android the main thread is a sacred holy land at which we must all worship as such this means other threads (ideally) shouldnt be favorably scheduled in priority with it for network and filesystem operations this usually means using low priority threadsone solution is to just use low priority threads on our own schedulers but this doesnt affect code using the standard `io()` and `computation()` schedulers unfortunately theres a whole bunch of ceremony around how various schedulers are initialized which includes a mixed bag of public vs non-public types and apis which makes replacing them in a scheduler hook difficulti think the most easy way to accomplish this is the following:-  ~~`rxthreadfactory` constructor overload which takes a thread priority to use~~ not needed-  factory methods on `schedulers` for creating instances of `io()` `computation()` and `newthread()` except using a supplied `threadfactory`  -  `schedulerscreateioscheduler(threadfactory)`  -  `schedulerscreatecomputationscheduler(threadfactory)`  -  `schedulerscreatenewthreadscheduler(threadfactory)`nice to have:-  `schedulers` using these factory methods to create the default implementations this involves moving the thread factories from the individual types ""up"" to `shedulers`";happy to do some of the work if this sounds acceptable || @jakewharton i think that sound acceptable im happy to review your pr || this is a little more tricky than i had initially anticipated perhaps its worth talking about a means of setting the default priority of the internal thread pools through a mechanism like properties as a separate easier first step? plus that would be a lot lower-overhead for android users anyway and we could even use the existing android platform detection to lower the thread priority by default || pass a threadfactoryon fri jan 20 2017 10:48 pm erdaren <notifications@githubcom> wrote:> so how to set thread priority in android with android values(like> processthread_priority_background)?>> —> you are receiving this because you were mentioned>> reply to this email directly view it on github> < or mute the thread> < > ||;1;0;provide factories for creating the default scheduler instances;
3856;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea;;3806.0;moe sync 2020-04-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes33574d771b099991822ed78a726df0eea4646eea;;remove @beta from service and servicemanager;this leaves abstractlisteningexecutorservice as @betacloses: https://githubcom/google/guava/issues/3418;;1;0;remove `@beta` from `service` and `servicemanager`this leaves `abstractlisteningexecutorservice` as `@beta`3806 #3418relevant to #2966(i have tweaked jesses initial pr to leave `abstractexecutionthreadservicetriggershutdown` and `abstractservicedocancelstart` as `@beta` since we arent sure we like the locking behavior of the former and weve realized that `listenerstopping` _might_ be a reasonable substitute for both)relnotes`utilconcurrent`: removed `@beta` from `service` and related classes-------------created by moe: https://githubcom/google/moemoe_migrated_revid305878924;
3869;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> this change suppresses defaultpackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  the google java style guide §8.2.1 requires java files to have a (non-default) package declaration.  missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  relnotes=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;0;moe sync 2020-04-20;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> this change suppresses defaultpackage check for any java class which uses the default java package in preparation for enabling a compiler error that will prevent new instances of the bugthe google java style guide §821 requires java files to have a (non-default) package declaration  missing package declarations can cause odd problems that are difficult to debug such as a class not being included in a test suite or confusion around package-private visibilityrelnotessuppresses warning for using default package6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;;;;1;1;this change suppresses defaultpackage check for any java class which uses the default java package in preparation for enabling a compiler error that will prevent new instances of the bugthe google java style guide §821 requires java files to have a (non-default) package declaration  missing package declarations can cause odd problems that are difficult to debug such as a class not being included in a test suite or confusion around package-private visibilityrelnotessuppresses warning for using default package-------------created by moe: https://githubcom/google/moemoe_migrated_revid307410557;
3869;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> this change suppresses defaultpackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  the google java style guide §8.2.1 requires java files to have a (non-default) package declaration.  missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  relnotes=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;0;jabref fetches wrong authors list from doi when authors name followed by hieroglyphs;<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> - [+] i have tested the latest master version from  and the problem persistsjabref 41linux 41510-1-arch amd64 java 180_162steps to reproduce:1 try to fetch bibliographic data from doi:  101063/136234242 you should get author     {l h li and e h linfield and r sharma and a g davies}3 instead jabref fetchesauthor     {e h linfield and r sharma and a g davies}and similar for doi 101088/0268-1242/30/5/055009wrong bibtexkey - only 2015the error occurs with this particular doi numbers in the remaining hundreds of cases i did not notice any mistakes;this is not in our hands we retrieve the bibtex data directly from  results from their api are not correct in your cases maybe you can report it to them im not surealso the bibtex key is not automatically adapted to your key pattern (if you use one) as far as i knowyou might need to regenerate it afterwards ||;;;;0;1;;
3869;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> this change suppresses defaultpackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  the google java style guide §8.2.1 requires java files to have a (non-default) package declaration.  missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  relnotes=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;0;add limited support for cube rollup and grouping set to grammar;- add cube rollup and simple grouping sets (ie one-level of nesting)  to grammar- add analyzer support for simple grouping sets- add planning and execution support for queries with a single  grouping set (this is essentially a simple group by);assign to @erichwang after you address the minor comment || @martint: please take a look when you get a chance || switching to a new branch and a new pr ||;;;;0;1;;
3869;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-20;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> this change suppresses defaultpackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  the google java style guide §8.2.1 requires java files to have a (non-default) package declaration.  missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  relnotes=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4;;0;wondering; javaobservablejust(mtoast)observeon(androidschedulersmainthread())subscribe(new action1<toast>() {    @override    public void call(toast toast) {       if (mtoast  null) {          mtoast  toastmaketext(mainactivitythis ""test"" toastlength_short)       } else {           mtoastsettext(""test"")       }       mtoastshow()   }})unsubscribe()```why the toast can‘t show？";you unsubscribe immediately and the value may not ever reach the action at all || its not order？first ，perform the actionthen perform unsubscribe()or rather at what time should i perform unsubscribe? || @longshiming the problem is in `observeon(androidschedulersmainthread())` i guess your code was running in the main thread then `observeon(androidschedulersmainthread())` will emit the element to the main handler queue after your codes finishes unsubscribe has been called therefore when the element is polled  from the queue it will be ignored || @zsxwing thanks androidschedulers mainthread () can run time-consuming tasks？ || no its a bad idea because itll block main thread of android app ui will freeze and android os may display anr dialog  || @artem-zinnatullin  im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
3875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hide internetdomainname.region() from gwt/j2cl.  the method is not used from gwt/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> update public suffix data.  the guava copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b;;0;moe sync 2020-04-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> hide internetdomainnameregion() from gwt/j2clthe method is not used from gwt/j2clc5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3-------<p> update public suffix datathe guava copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates2cd759cecd0b76ab124d1a32522fb43880b5358b;;;;;1;1;update public suffix datathe guava copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid308028590;
3875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hide internetdomainname.region() from gwt/j2cl.  the method is not used from gwt/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> update public suffix data.  the guava copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b;;0;update to madr 203;"this updates [madr]( to its latest version 203 also update the made adrs to madr 203 add a new option to ""use crowdin""";;;;;1;1;update to madr 203;
3875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hide internetdomainname.region() from gwt/j2cl.  the method is not used from gwt/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> update public suffix data.  the guava copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b;;0;add flexibility to hive connector related to storage decisions;;i think the tests are broken can you check travis? || the design of this is weird it is called a `locationservice` but it isnt really a service it is more of a serialized object that also contains logic one way to improve this is to separate the object from the service || @dain should review this || had a few comments assign to @dain when youre done || @dain chris has finished first pass he asked me to assign this to you || some comments but  looks good to me too ||;;;;0;1;;
3875;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hide internetdomainname.region() from gwt/j2cl.  the method is not used from gwt/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> update public suffix data.  the guava copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b;;0;how can i do this?;"[uploading helptxt…]()import javautillistpublic class aaa {    list<data> list```private int getcount(){    //for//how can i do this whith rxjavathanks    int sizelistsize()    int count0    for(int i0i<sizei++){        countcount+listget(i)count    }  return count}class data{    string name""""    int count}```}i have a list<data> and data have an int counti want use `rxjava` to get all count of this list how can i do it?";first how would you do it with plain java? || ``` javaobservablefrom(list)            // <-- loop over each itemmap(item -> itemcount)         // <-- extract count from each itemreduce(0 (a b) -> a + b)     // <-- sum up the countssubscribe(systemout::println) // <-- get the final sum``` ||;;;;0;1;;
3876;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (tagalog);
3876;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663;;0;exception of page_transport_timeout;how to pass the exception of page_transport_timeoutpage_transport_timeout:encountered too many errors talking to a worker node the node mayhave crashed or be under loadthe scene is  two hard sql one is  two tables(1mm left join 6mm：results 70mm) have left join one is count number（6mm）;"is there any parameter can avoid this problem？  by the way  4 node one is set to coodinator three is set to work nodes || hi im going to climb around this ticket too :)  running version 0123   im getting the same error ultimately returned back to the client  i cant duplicate using tpch data unfortunately but it is a pretty big query with a joini dug around in the server logs and found this: {code}javalangnullpointerexception: maxsize is null    at javautilobjectsrequirenonnull(objectsjava:228)    at comfacebookprestoexecutionsqltaskmanagergettaskresults(sqltaskmanagerjava:272)    at comfacebookprestoservertaskresourcegetresults(taskresourcejava:201)    at sunreflectgeneratedmethodaccessor129invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:483)    at orgglassfishjerseyservermodelinternalresourcemethodinvocationhandlerfactory$1invoke(resourcemethodinvocationhandlerfactoryjava:81)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcher$1run(abstractjavaresourcemethoddispatcherjava:151)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherinvoke(abstractjavaresourcemethoddispatcherjava:171)    at orgglassfishjerseyservermodelinternaljavaresourcemethoddispatcherprovider$voidoutinvokerdodispatch(javaresourcemethoddispatcherproviderjava:136)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherdispatch(abstractjavaresourcemethoddispatcherjava:104)    at orgglassfishjerseyservermodelresourcemethodinvokerinvoke(resourcemethodinvokerjava:387)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:331)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:103)    at orgglassfishjerseyserverserverruntime$1run(serverruntimejava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:267)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:315)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:297)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:267)    at orgglassfishjerseyprocessinternalrequestscoperuninscope(requestscopejava:297)    at orgglassfishjerseyserverserverruntimeprocess(serverruntimejava:254)    at orgglassfishjerseyserverapplicationhandlerhandle(applicationhandlerjava:1030)    at orgglassfishjerseyservletwebcomponentservice(webcomponentjava:373)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:381)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:344)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:221)    at orgeclipsejettyservletservletholderhandle(servletholderjava:808)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1669)    at orgeclipsejettyservletsuseragentfilterdofilter(useragentfilterjava:83)    at orgeclipsejettyservletsgzipfilterdofilter(gzipfilterjava:364)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at orgeclipsejettyservletservlethandlerdohandle(servlethandlerjava:585)    at orgeclipsejettyserverhandlercontexthandlerdohandle(contexthandlerjava:1127)    at orgeclipsejettyservletservlethandlerdoscope(servlethandlerjava:515)    at orgeclipsejettyserverhandlercontexthandlerdoscope(contexthandlerjava:1061)    at orgeclipsejettyserverhandlerscopedhandlerhandle(scopedhandlerjava:141)    at orgeclipsejettyserverhandlerhandlercollectionhandle(handlercollectionjava:110)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverhandlerstatisticshandlerhandle(statisticshandlerjava:159)    at orgeclipsejettyserverhandlerhandlerlisthandle(handlerlistjava:52)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverserverhandle(serverjava:499)    at orgeclipsejettyserver    at orgeclipsejettyserver    at orgeclipsejettyioabstractconnection$2run(abstractconnectionjava:540)    at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:635)    at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:555)    at javalangthreadrun(threadjava:745){code}lemme know if theres anything else i can supplythanksstephen || assuming your machines didnt actually crash there are two main causes of this long gc pauses and network saturation  both of these can sometimes be  by tweaking the query  use `explain (type distributed)` to see the join order and exchanges and make sure you are building hash tables out of the smaller tablethe first is you are getting very long full gcs you can see this by enabling gc logging on the workers  if you are getting log gcs sometimes you can tweak the jvm settings to help things but if you need more memory then you have you will need to add more memory or machines  when it comes to network saturation there isnt much that can be done  i suggest you run on 10gig networks || @spragues-trulia ive never seen that error before  it implies that the client did not send a well formed request (it was missing a required header)  if true you should be seeing this everywhere || thanks @dain     i think im going to try to enable gc logging as well as the error returned to my client is the same (page_transport_timeout) however digging deeper into the server logs i was able to find a uri and follow it - and its that that reported the npe on maxsize is null  maybe thats just a symptom though but figured it be worth bringing to your attentionsun nov  1 11 21 2015 - error executing query encountered too many errors talking to a worker node the node may have crashed or be under too much load this is probably a transient issue so please retry your query in a few minutes ( - requests failed for 6007s)clicking on that uri yields  maxsize is null at javautilobjectsrequirenonnull(objectsjava:228) at comfacebookprestoexecutionsqltaskmanagergettaskresults(sqltaskmanagerjava:272) at comfacebookprestoservertaskresourcegetresults(taskresourcejava:201) at sunreflectgeneratedmethodaccessor174invoke(unknown source) at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) at javalangreflectmethodinvoke(methodjava:483)<snip>the other interesting thing is v0112 does not exhibit this error while v0123 (and 0121 do) which leads me to believe something in the presto server code is at play here and not gc or environment  also given clark0922 has something very very similar im guessing theres something going on inside the presto code  maybe between the two of us we can help narrow it down || by follow do you mean load that uri in your browser? that probably wont work and would explain the npe because your browser wont include the necessary  header || ahhhh that is correct  okay that explains that!   so back to the original ""page_transport_timeout"" investigation  ill work at logging gc and see what that showsout of curiosity would there be any timeout/heartbeat config setting on the presto side to control the servers behavior under these circumstances?  or is it entirely up to the jvm?  judging from dains response above seems like the latter eh? || ## edit: this test was done with broadcast joinsame error here with page_transport_timeout error on worker nodeby the time problematic sql running heres the gc log (g1gc)app/presto/var/log>$ grep pause presto-gclog 2132: [gc pause (metadata gc threshold) (young) (initial-mark) 00322798 secs]3682: [gc pause (metadata gc threshold) (young) (initial-mark) 00285097 secs]79510: [gc pause (metadata gc threshold) (young) (initial-mark) 00460919 secs]94349: [gc pause (g1 evacuation pause) (young) 00465602 secs]95014: [gc pause (g1 evacuation pause) (young) 00474994 secs]95702: [gc pause (g1 evacuation pause) (young) 01224174 secs]96204: [gc pause (g1 evacuation pause) (young) 00275629 secs]96740: [gc pause (g1 evacuation pause) (young) 00319387 secs]97126: [gc pause (g1 evacuation pause) (young) 00362247 secs]97584: [gc pause (g1 evacuation pause) (young) 00285603 secs]98189: [gc pause (g1 evacuation pause) (young) 00380048 secs]98781: [gc pause (g1 evacuation pause) (young) 00169775 secs]99428: [gc pause (g1 evacuation pause) (young) 00268498 secs]100230: [gc pause (g1 evacuation pause) (young) 00233163 secs]101486: [gc pause (g1 evacuation pause) (young) 00218672 secs]1078338: [gc pause (g1 evacuation pause) (young) 00495063 secs]it seems that long gc is not the issue hereim running 0126 on 1 coordinator 74 workereach node with 192mb ram 28core w/ hyperthreadingi tried with cms gc before trying g1gc global pause was long enough to think that gc is causing thisbut switching to g1gc shows that this issue might not be closely related to gc problemheres my configuration--- configpropertiesquerymax-memory740gbquerymax-memory-per-node15gb--- jvmconfig-xmx40g-xms40g-xx:+usenuma-xx:+useg1gc-xx:+aggressiveopts-xx:reservedcodecachesize512m-xx:permsize1024m-xx:maxpermsize1024m-xx:+heapdumponoutofmemoryerror-xx:onoutofmemoryerrorkill -9 %p-xx:+printgcdetails-xx:+printgctimestamps-verbose:gc-xloggc:/app/presto/var/log/presto-gclogproblematic query was a""union all"" of many following subqueries (15 union or so)select tac tb b count(distinct taa) from(select a b count(distinct c) from bigtable where part_date between blahblah group b) taleft outer join(select a b from smalltable where blahblah) tb on (taa  tba)group by tac tbb || thanks for this good to get another data point on this seemingly mysterious error   anything in your traceback that looks like a smoking gun? did this query work in a previous version of presto? || both 0123 and 0126 sometimes produce this error in my caseas the error message says this error is transienttoday i was able to reproduce this error again ( 0126 g1gc hash join )servers were under modest load (5~10%) before issuing a problematic presto querycoordinator log is flooded with following two exceptions with many different task idscontinuoustaskinfofetcher-20151126_065330_00016_h9z52523-3310 comfacebookprestoserver       error getting info for task 20151126_065330_00016_h9z52523: javautilconcurrenttimeoutexception:      comfacebookprestoserver       error updating task 20151126_065330_00016_h9z52523: javautilconcurrenttimeoutexception:  101034189s log file is flooded with following exception just showing that the tcp connection was dropped orgglassfishjerseyserverserverruntime$responder     an i/o error has occurred while writing a response message entity to the container output streamorgglassfishjerseyserverinternalprocessmappableexception: orgeclipsejettyioeofexception        at orgglassfishjerseyserverinternalmappableexceptionwrapperinterceptoraroundwriteto(mappableexceptionwrapperinterceptorjava:91)by that time cpu usage was just 10~20 percentnetwork usage was about 100mb/s (10g nic)so heres my interpretation of this situation1 the task info api on worker node is not responding within 25 seconds -> time out exception2 coordinator cancels  request3 worker nodes pending  request handler is canceledand this goes on for 60 seconds for one or more task idboom a query failed to run with comfacebookprestooperatorpagetransporttimeoutexceptionand heres the questionwhy task info api is not responding within 25 second?- (maybe a synchronization mechanism is blocking the api to read and send the relevant info?)  and why this can go on for 1 full minute?- (maybe the task is running over 1 minute)im just a new guy trying to evaluate presto havent read any source code yetso please forgive my wild guess   again g1gc was not the issue this time1876: [gc pause (metadata gc threshold) (young) (initial-mark) 00298931 secs]3457: [gc pause (metadata gc threshold) (young) (initial-mark) 00297466 secs]175897: [gc pause (metadata gc threshold) (young) (initial-mark) 00557843 secs]192229: [gc pause (g1 evacuation pause) (young) 00501541 secs]192840: [gc pause (g1 evacuation pause) (young) 00526955 secs]193375: [gc pause (g1 evacuation pause) (young) 01079034 secs]193976: [gc pause (g1 evacuation pause) (young) 00249508 secs]194488: [gc pause (g1 evacuation pause) (young) 00300828 secs]194968: [gc pause (g1 evacuation pause) (young) 00349214 secs]195565: [gc pause (g1 evacuation pause) (young) 00230370 secs]196182: [gc pause (g1 evacuation pause) (young) 00332278 secs]196897: [gc pause (g1 evacuation pause) (young) 00148208 secs]197776: [gc pause (g1 evacuation pause) (young) 00208706 secs]202481: [gc pause (g1 evacuation pause) (young) 00257344 secs]207367: [gc pause (g1 evacuation pause) (young) 00313098 secs]274000: [gc pause (g1 evacuation pause) (young) 00504157 secs]275167: [gc pause (g1 evacuation pause) (young) 01701280 secs]275558: [gc pause (g1 evacuation pause) (young) 01799314 secs]277057: [gc pause (g1 evacuation pause) (young) 00226901 secs]279010: [gc pause (g1 evacuation pause) (young) 00230688 secs]282200: [gc pause (g1 evacuation pause) (young) 00409713 secs]623944: [gc pause (g1 evacuation pause) (young) 49323951 secs]654289: [gc pause (g1 evacuation pause) (young) 12856842 secs]721647: [gc pause (g1 evacuation pause) (young) 00205140 secs]733077: [gc pause (g1 evacuation pause) (young) 00254692 secs]738076: [gc pause (g1 evacuation pause) (young) 00195499 secs]747856: [gc pause (g1 evacuation pause) (young) 00156343 secs]748201: [gc pause (g1 evacuation pause) (young) 00198900 secs]748429: [gc pause (g1 evacuation pause) (young) 00224698 secs]748643: [gc pause (g1 evacuation pause) (young) 00153802 secs]778621: [gc pause (g1 evacuation pause) (young) 00196391 secs]852163: [gc pause (g1 evacuation pause) (young) 00332444 secs]881130: [gc pause (g1 evacuation pause) (young) 00254832 secs]977958: [gc pause (g1 evacuation pause) (young) 00252212 secs]1122747: [gc pause (g1 evacuation pause) (young) 00240858 secs]that 5 sec was pretty big at 623944 but it doesnt stop the world for 60 secondsi couldnt reproduce this error with 0123 yetbut im pretty sure that the same has happened with 0123if theres anything i can provide to narrow down this problem pls tell me || thanks nazgul33 great analysis   im in the same boat as you - a user evaluating presto - not a developer  if youre in the experimenting mood ive found that v0112 does not exhibit this particular behavior for our company id be curious if you see the same thing  my _hunch_ is the changes between 0112 and 0121 have contributed to what were seeing though just what that is i have no idea  ";;;;0;1;;
3876;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663;;0;how to replay with filters?;from a `observable<pair<long boolean>>` that never completes i want to be able to split it up into never ending streams of `observable<boolean>` for any given long these streams should replay the last value and start with `false` if the boolean is missingis there an existing combination of operators that can do something like this ?;"how do you want to store the `observable<boolean>`? it seem like you would want to use `groupby` to get the individual `groupedobserable<long boolean>` then subscribe to each of those with a `behaviorsubject` then put those in a global `concurrenthashmap<long behaviorsubject<boolean>>` here is some code:``` javapublic class main {    public static class pair<a b> {        public final a a        public final b b        public pair(a a b b) {            thisa  a            thisb  b        }        public a geta() {            return a        }        public b getb() {            return b        }    }    public static void main(string args) {        // create an infinite source        observable<pair<integer boolean>> src  observablecreate(synconsubscribecreatesinglestate(random::new (rnd next) -> {            nextonnext(new pair<>(rndnextint(30) rndnextboolean()))        }))        src  srcsubscribeon(schedulersnewthread())        // make a thread safe place where producers and consumers get/put subjects        concurrenthashmap<integer behaviorsubject<boolean>> grpsubjects  new concurrenthashmap<>()        // for each group boolean for a long        srcgroupby(pair::geta)foreach(grp -> {            // get the subject that we should send the booleans to            behaviorsubject<boolean> grpsubject  grpsubjectscomputeifabsent(grpgetkey() (l) -> behaviorsubjectcreate())            systemoutprintln(""starting subject for group "" + grpgetkey())            // send just the booleans            grpmap(pair::getb)subscribe(grpsubject)        })        // get the group for 20 and if it doesnt exist default to false        behaviorsubject<boolean> grpsubject  grpsubjectscomputeifabsent(20 (l) -> behaviorsubjectcreate(false))        grpsubjecttake(10)toblocking()foreach(systemout::println)    }}```produces the output```starting subject for group 16starting subject for group 5starting subject for group 21starting subject for group 13starting subject for group 10starting subject for group 3starting subject for group 18starting subject for group 17starting subject for group 11starting subject for group 0starting subject for group 25starting subject for group 15starting subject for group 7starting subject for group 8starting subject for group 4starting subject for group 2starting subject for group 6starting subject for group 20starting subject for group 27starting subject for group 28starting subject for group 29starting subject for group 22starting subject for group 24starting subject for group 1starting subject for group 9starting subject for group 12starting subject for group 14falsefalsetruestarting subject for group 19truestarting subject for group 23truestarting subject for group 26falsefalsetruefalsetrue``` || @abersnaze this solution works but doesnt clean itself up if there are no downstream subscribersif there are no downstream subscribers for a key id like it to clean up the stored value and reset to the default value (false here)also this snippet contains non-reactive code can this be done just using a combination of rx operators ? i am planning on creating an operator for this purpose but i dont want to reinvent the wheel if there are other operators that can suit my needs || i guess you mean the latest which implies that each observable<boolean> itself should be a hot observable if the `observable<pair<long boolean>>` itself is hot you could just simply filter and map it individually for your subscriber:``` javapublishsubject<pair<long boolean>> source  public subscription observe(long key subscriber<boolean> subscriber) {    return source        filter(pair -> pairfirst  key)        map(pair -> pairsecond)        startwith(false)        subscribe(subscriber)}``` || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
3876;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix github #3873 by reimplementing cartesian{set list}.contains.  relnotes=fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663;;3873.0;moe sync 2020-04-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #387327506700d2ce3a3a24840aa0ba932dba4a275663;;setscartesianproductcontains complexity depended on now-removed optimization in android version;this was almost certainly my fault but as i look at the implementation of setscartesianproduct i think its `contains` method made the assumption that `immutablesetaslist()indexof` was o(1) which is no longer the case for android  it should probably get a specific `contains` implementation that actually is o(sets) not o(sets*setsize);;1;0;fix github #3873 by reimplementing cartesian{setlist}containsrelnotes #3873-------------created by moe: https://githubcom/google/moemoe_migrated_revid308079008;
3885;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb;;0;link jabref file to devonthink;hello github-community of jabreftobias diez suggested me to write down my problem here as [this thread]( in the jabref help forum couldnt solve the problem until nowi will copy-paste my description in the following for already tried solutions please take a look at the linked thread:> hello jabref-community>> i just started working with jabref and while i’m trying to integrate my collected ebooks into jabref i have problems linking my files properly as i couldn’t find any answers on the forum i might ask you for help  > i’m a mac-user with devonthink as a my dms for nearly everything all my ebooks are stored within a devonthink database if i drag and drop one of my pdfs from my devonthink gui into jabref it’s going to copy the path of the database in “finder structure”> for example it will save:> > `:/users/fabniam/documents/devonthink/studiumdtbase2/filesnoindex/pdf/5/secondary symptoms of dyslexia a comparison of self esteem and anxiety profiles of children with and without dyslexiapdf:pdf`> but as you can see in the path jabref copy the link of the database if i’m going to reorganise my database or even just renaming the file this link will be useless for this purpose devonthink is able to give out permanent links which are common for use in other apps like microsoft onenote or gtd software these links (i don’t know if there is a special name for them but i saw similar links in other apps so i’m guessing it’s an macos feature) look like the following:> >` x-devonthink-item://3e364aa0-f93d-492d-9d4a-aec6013612d2`> so devonthink produces an unique fingerprint for my file and no matter if i rename move or edit the file i can access it through this link some integrated workflows also use these link eg if i link a file with a wunderlist task:> > ![image of wunderlist]( > i can click this link or just use it via terminal if i use the open command:> > `open x-devonthink-item://3e364aa0-f93d-492d-9d4a-aec6013612d2`> now i want jabref to use these links instead of these “finder structure” links i don’t mind if i manually need to update these links in my jabref library> > thank you in advance for your help  ;i think we need to check/adjust the detection and mark it as online link || we currently have no money to pay someone for that ([donations page]( no one of the jabref team gets paid for jabref thus working on this really depends on the availability of our personal free time - we really welcome feedback on our volunteer work in case you can spend some more time (other than reporting issues) we would really like to encourage you to check  - especially the part asking for improvement of our [help pages]( this would help jabref getting better as a whole 🥇 ||;;;;0;1;;
3885;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb;;0;enabled referencing columns in orc files by name;enable columns in orc files to be referenced by name when the hiveorcuse-column-names property is set to true;thank you for your pull request and welcome to our community we require contributors to sign our contributor license agreement and we dont seem to have you on file in order for us to review and merge your code please sign up at  - and if you have received this in error or have any questions please drop us a line at cla@fbcom  thank you for signing our contributor license agreement we can now accept your code for this (and any) facebook open source project thanks! || any feedback would be greatly appreciated || i have working on a high priority project for a while now  i will attempt to review this in my spare time || thanks for taking a look  i completely understand how swamped you are  let me know if you have any questions || is there anything i can do to facilitate this getting reviewed? || no it is on me and i have been completely focused on the other project  ill try to get to this early jan || totally understand ill just keep checking in  happy holidays! || hopefully you had a good holiday but now that it is over im going to start pestering you again :) || @dain is it possible for you to review this now? ||  i made some changes before pushing  please let me know if i broke something for you || lgtmthanks!> on feb 9 2016 at 6:17 pm dain sundstrom notifications@githubcom wrote:> > i made some changes before pushing please let me know if i broke something for you> > —> reply to this email directly or view it on github ||;;;;0;1;;
3885;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb;;0;oncompleted swallows all exceptions;i was fairly surprised by the behavior of this stream:``` javaobservableempty()    subscribe(        systemout::println         systemerr::println        () -> { throw new runtimeexception() }    )```what i expected to see was the thread crashing due to the exception instead absolutely nothing happens because `oncompleted` swallows the exception entirely;`safesubscriberoncompleted` rethrows it as `oncompletedfailedexception` which then bounced back to `onerror` because `throwiffatal` doesnt recognize it (only `onerrornotimplementedexception` and `onerrorfailedexception` are rethrown from this class of failures) || would a reasonable solution be to add `oncompletedfailedexception` to `throwiffatal` then? i could work on that pr if thats all it takes || yes go ahead ||;;;;0;1;;
3885;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> move comment to a more appropriate location  the comment was added along with putcoalescing in cl 143507326.  3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb;;3883.0;moe sync 2020-04-28;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 14350732638838a704a86f565065a7573a13bb95d919a6c5bcbeb;;move comment to a more appropriate location;signed-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>;     clas look good thanks!  || thanks!a quick question in case you happen to have immediate thoughts on it if not no problemis it suspicious that the `putcoalescing` implementation for `subrangemap` has the very kind of `rangeisempty()` check that this comment seems to warn against? || good catch test and fix is in  ||;1;0;move comment to a more appropriate locationthe comment was added along with putcoalescing in cl 1435073263883relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308826616;
3887;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2;;0;use meaningful names for methoddefinition variables;use meaningful names for methoddefinition variables; ;;;;0;1;;
3887;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2;;0;have undeliverable errors on subscribe() sent to plugin error handler;this change will make sure if the `subscriber` has unsubscribed the non-fatal error is sent to the plugin error handler at least ie``` javaobservablecreate(s -> {    sonerror(new runtimeexception())    throw new illegalargumentexception()})subscribe()```in addition if the original code threw `runtimeexception` in case the `subscriberonerror()` threw ive changed this to `onerrorfailedexception` but not sure the original type was intentional or just left out;;;;;1;1;have undeliverable errors on subscribe() sent to plugin error handler;
3887;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2;;3885;improvements around external file types;        ( (      because github does not support autolinking there -->i tried to implement #3885 but changes of the file type in the linked file editor are not saved for some reason ill investigate this again after  is mergedthus only some relative minor code improvements / fixes:- refactor external file type classes and extract a common `externalfiletype` interface- extract all built-in file types to separate enum (implementing `externalfiletype`)- fix display of external file type editor dialog (which is not shown in the current maintable-beta version)-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);since this pr is now ready for review over a month ill merge it despite not having any feedback so far ||;link jabref file to devonthink;hello github-community of jabreftobias diez suggested me to write down my problem here as [this thread]( in the jabref help forum couldnt solve the problem until nowi will copy-paste my description in the following for already tried solutions please take a look at the linked thread:> hello jabref-community>> i just started working with jabref and while i’m trying to integrate my collected ebooks into jabref i have problems linking my files properly as i couldn’t find any answers on the forum i might ask you for help  > i’m a mac-user with devonthink as a my dms for nearly everything all my ebooks are stored within a devonthink database if i drag and drop one of my pdfs from my devonthink gui into jabref it’s going to copy the path of the database in “finder structure”> for example it will save:> > `:/users/fabniam/documents/devonthink/studiumdtbase2/filesnoindex/pdf/5/secondary symptoms of dyslexia a comparison of self esteem and anxiety profiles of children with and without dyslexiapdf:pdf`> but as you can see in the path jabref copy the link of the database if i’m going to reorganise my database or even just renaming the file this link will be useless for this purpose devonthink is able to give out permanent links which are common for use in other apps like microsoft onenote or gtd software these links (i don’t know if there is a special name for them but i saw similar links in other apps so i’m guessing it’s an macos feature) look like the following:> >` x-devonthink-item://3e364aa0-f93d-492d-9d4a-aec6013612d2`> so devonthink produces an unique fingerprint for my file and no matter if i rename move or edit the file i can access it through this link some integrated workflows also use these link eg if i link a file with a wunderlist task:> > ![image of wunderlist]( > i can click this link or just use it via terminal if i use the open command:> > `open x-devonthink-item://3e364aa0-f93d-492d-9d4a-aec6013612d2`> now i want jabref to use these links instead of these “finder structure” links i don’t mind if i manually need to update these links in my jabref library> > thank you in advance for your help  ;i think we need to check/adjust the detection and mark it as online link || we currently have no money to pay someone for that ([donations page]( no one of the jabref team gets paid for jabref thus working on this really depends on the availability of our personal free time - we really welcome feedback on our volunteer work in case you can spend some more time (other than reporting issues) we would really like to encourage you to check  - especially the part asking for improvement of our [help pages]( this would help jabref getting better as a whole 🥇 ||;1;0;fix checkstyle;
3887;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-04-28;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2;;3886.0;moe sync 2020-04-28;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p>  treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated38866e0e978abc6d3de458ed7e2b9cb0533c735d36a2;; treerangemapsubrangemapputcoalescing;the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violatedsigned-off-by: sebastian zarnekow <sebastianzarnekow@gmailcom>;;1;0; treerangemapsubrangemapputcoalescingthe short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated3886relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid308881996;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;0;suggestion to remove the ability to download multiple fulltexts at once;@jabref/developers i propose to remove the ability to download multiple fulltexts at once:- we should not enable users crawling scientific full texts in batches (defensive strategy)- i dont see a use case where multiple documents need to be crawled at once (if i want to take a look at a document you can download it if it is not there even in a large db)- our current workflow is not made for downloading multipe docs for each doc a dialog pops up it should be automatically saved in the background for such a process- the current workflow is not adequate: right now i need to check the pdf after the download i am thinking about a process where one request the fulltext gets a mini preview of the pdf and then can save accept or decline the fulltextwdyt?;"the use case i see is that you collect some entries from different fetchers and then you want to do a bulk download to get all pdfs for the entriesnot my personal use case i usually download the papers manually because outside university network i can either login via shibboleth or use a slow vpn  || yeah but you still need to confirm that it is the correct pdf and i also dont know if we should foster such approaches || some users will be annoyed (like they have been when we introduced limits for google scholar and medline) but this proposal has my full support jabref is not a tool for mass download || i agree that we shouldnt focus on mass download but the feature is also helpful if you want to download fulltexts for a small number of entries since you dont have to click the ""download fulltexts"" button for each entry separately as i dont see any harm in having such a feature i would keep it || i think we are talking about multi-download **for the same entry** in that case i fully agree with @stefan-kolbs proposal> one request the fulltext gets a mini preview of the pdf and then can save accept or decline the fulltext || decision is to keep it as is for now || ";;;;0;1;;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;0;incorrect implementations related to `constraint`;- none of the connectors checked `constraintpredicate()` in `gettablelayouts` any of them that checked `constraintgetsummary()` should have- `begintablewriterewritedeletetablescan` constructs a predicate where summary is not empty but predicate is always true- `picklayoutplantablescan` constructs a predicate where summary is not empty but predicate is always truenone of them results in correctness issue@erichwang @martint @electrum;this issue has been automatically marked as stale because it has not had recent activity it will be closed if no further activity occurs ||;;;;0;1;;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;0;javalangillegalstateexception: more items arrived than were requested;were seeing this exception for a small percent of our users we havent been able to reproduce this ourselves so providing a sample might not be feasible any idea what could be causing this based on the stacktrace alone?``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)```;looks like `onsubscribetoobservablefuture` was not refitted with backpressure support and it fires the futures value unconditionally ill post a fix for this thanks for reporting! || see #3893workaround for now: apply `onbackpressurebuffer()` after the `from(future)` you are using || great  i think there might be other operators that need to be retrofitted? ``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscribercomplete(operatoronbackpressurebufferjava:169)       at rxinternalutilbackpressuredrainmanagerdrain(backpressuredrainmanagerjava:187)       at rxinternalutilbackpressuredrainmanagerterminateanddrain(backpressuredrainmanagerjava:114)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscriberoncompleted(operatoronbackpressurebufferjava:140)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)``` || do you have a default value on your single() operator? || we call `lastordefault` which calls `new operatorsingle<t>(defaultvalue)` || thanks found the issue in operatorsingle when the default path is taken the value is emitted without checking for backpressure ill post a fix soon || see #3905 || thanks! || close via #3905 ||;;;;0;1;;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;3890.0;moe sync 2020-05-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f;;powersetequals depends on sets iteration order;if `comgooglecommoncollectsetspowerset` is called with two different sets that contain the same elements but in a different iteration order the returned power sets will also contain the same elements but in a different iteration order therefore `setequals` on those power sets is `true` but `comgooglecommoncollectsetspowersetequals` incorrectly returns `false`;wow almost 7 years old! nice find || thanks!   || 👍👍👍👍😀😀 ||;1;0;fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434;
3892;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix powerset.equals() when comparing to another powerset whose items are the same  but in a different iteration order.  relnotes:    where powerset.equals(powerset) would erroneously return   false if the powerset s underlying sets were equal  but in a different   iteration order.  3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f;;3891.0;moe sync 2020-05-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890befd5ced9edc93a65c75201eb0698a571398005f;;fix equals when comparing two powerset instances with different order;fixes https://githubcom/google/guava/issues/3890;thanks for the improvement! that certainly does look like a bug and i appreciate the reproducing testill mirror this change internally and you should see it added back out later today or tomorrow || cool thank you!   im very glad to have helped ||;1;0;fix powersetequals() when comparing to another powerset whose items are the same but in a different iteration orderrelnotes:   where powersetequals(powerset) would erroneously return  false if the powersets underlying sets were equal but in a different  iteration order3891 #3890-------------created by moe: https://githubcom/google/moemoe_migrated_revid309745434;
3893;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035;;0;executor service improvements;;ok so we keep it the way it is i merged it into the other branch but reverted the commits! ||;;;;1;1;60 seconds;
3893;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035;;0;correctly handle modification operations for hive external tables;my understanding is that hive external tables are basically read-only views of externally managed data creating or dropping an external table or partition merely modifies the metadata in the hive metastore given this assumption it seems that insert or delete operations should not be allowed for external tables;@electrum do we still want this behaviour? hive supports inserting/deleting to/from external tables so they are not totally read-only in that sense if we still want this i will be happy to work on it || @nezihyigitbasi i think hives behavior here is a bug we still want this behavior || @electrum how do we want to keep track of the type of the table (managed external etc)? add a new property to `hivetableproperties`? || i guess an easier way is to put checks in the `hivemetadata::begininsert`/`hivemetadata::begindelete` methods || @electrum curious about the bug comment i dont see much in the way of hive indicating this is a problem we were surprised to see this addition to the change logs  || @jcap please the the discussion here:  ||;;;;0;1;;
3893;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035;;3880.0;moe sync 2020-05-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adds constants for `cross-origin-embedder-policy(-report-only)?` headers ([w3]( constants for `cross-origin-embedder-policy(-report-only)?` headersa061f7e066ad470b47b749c0514ac581cf2397e2-------<p> implement trylockuninterruptibly3880c9278360493d074ecc88c9d42adbcde2ad90f035;;implement trylockuninterruptibly;based on awaituninterruptibly(condition );  @arhimondr before this can/will be merged you need to sign the cla check the message from the googlebot || @original-codematrix im on it hopefully im going to be able to sign soon ||    clas look good thanks!  || @original-codematrix done ||;1;0;implement trylockuninterruptibly3880relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid310009910;
3893;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for  cross-origin-embedder-policy(-report-only)?  headers ([w3](  relnotes=adds constants for  cross-origin-embedder-policy(-report-only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> implement trylockuninterruptibly  3880  c9278360493d074ecc88c9d42adbcde2ad90f035;;3892.0;1x: enable backpressure with from(future);the `from(future)` operator was not refitted for backpressurereported in: #3892;lgtm  ;javalangillegalstateexception: more items arrived than were requested;were seeing this exception for a small percent of our users we havent been able to reproduce this ourselves so providing a sample might not be feasible any idea what could be causing this based on the stacktrace alone?``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)```;looks like `onsubscribetoobservablefuture` was not refitted with backpressure support and it fires the futures value unconditionally ill post a fix for this thanks for reporting! || see #3893workaround for now: apply `onbackpressurebuffer()` after the `from(future)` you are using || great  i think there might be other operators that need to be retrofitted? ``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscribercomplete(operatoronbackpressurebufferjava:169)       at rxinternalutilbackpressuredrainmanagerdrain(backpressuredrainmanagerjava:187)       at rxinternalutilbackpressuredrainmanagerterminateanddrain(backpressuredrainmanagerjava:114)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscriberoncompleted(operatoronbackpressurebufferjava:140)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)``` || do you have a default value on your single() operator? || we call `lastordefault` which calls `new operatorsingle<t>(defaultvalue)` || thanks found the issue in operatorsingle when the default path is taken the value is emitted without checking for backpressure ill post a fix soon || see #3905 || thanks! || close via #3905 ||;1;0;1x: enable backpressure with from(future);
3898;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;0;moe sync 2020-05-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure queueworker does not outlive sequentialexecutor on ioswhen `sequentialexecutor` is used on ios as j2objc-transpiled code we need tomake sure that `sequentialexecutorqueueworker` does not outlive its outerclass previously because the inner class was annotated with `@weakouter` itcould happen and when this happened the inner class would then invokemethods on a dangling pointer and crash the process in turn the issue is now by annotating the worker field in the outer class with `@retainedwith`although `@retainedwith` was initially designed for bimaps the annotationaddresses exactly the lifecycle problem here180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;;;;1;1;ensure queueworker does not outlive sequentialexecutor on ioswhen `sequentialexecutor` is used on ios as j2objc-transpiled code we need tomake sure that `sequentialexecutorqueueworker` does not outlive its outerclass previously because the inner class was annotated with `@weakouter` itcould happen and when this happened the inner class would then invokemethods on a dangling pointer and crash the process in turn the issue is now by annotating the worker field in the outer class with `@retainedwith`although `@retainedwith` was initially designed for bimaps the annotationaddresses exactly the lifecycle problem hererelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid311046012;
3898;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;0;enhance file not found info;(https://user-imagesentcom/2141507/38095888-d04eda2c-3371-11e8-9718-ec26c5e98d1epng);;;;;1;1;closes #3492 if file not found show searched directories;
3898;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;0;running use in cli resets session properties;;claiming this one if no one is working on it ||;;;;0;1;;
3898;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d;;0;1x: add missing license headers;this pr simply adds missing license header to main and test files; was always curious if this really required if repo has `license` file and it referenced in the `pomxml`? || 99% of people copy/pasting code from this project arent going to look ateither those things to retain the correct licenseon fri apr 29 2016 at 4:04 pm artem zinnatullin notifications@githubcomwrote:> was always curious if this really required if repo has license file and> it referenced in the pomxml?> > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  ||;;;;1;1;1x: add missing license headers;
3899;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;0;code style issues; some code style issues;;;;;1;1;rename;
3899;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;0;minor cleanup;;looks good do you want to rename `sqlaggregation` to `sqlaggregationfunction` too? || yes i just added another commit to do that rename || looks good  ||;;;;0;1;;
3899;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;0;assertionerror should be treated as fatal;many test frameworks throw an `assertionerror` to indicate a failure  for example mock objects created using easymock will throw an `assertionerror` immediately if the mock receives an unexpected method call  when using `onerrorresumenext()` this error may be silently swallowed  and since this type of exception is not a part of normal program flow (it is only used in tests) it should not be up to the application to handle these errors specificallyaccording to the java documentation on throwables i would actually expect rxjava to treat all `error` subclasses as fatal but perhaps there are other reasons not to do so  my first thought was to register a global error handling plugin which would rethrow `assertionerror`s but `onerrorresumenext()` prevents the error from reaching the plugin;im not sure about this i certainly never had the need for it but lets hear the others thoughts on this || i have thrown ae in tests or used fail() which throws ae while ive nevercoupled these with error-resuming operators i have a hard time seeing whenthis would ever be an error you would want to recover from in normaloperationon sun may 1 2016 3:07 pm david karnok notifications@githubcom wrote:> im not sure about this i certainly never had the need for it but lets> hear the others thoughts on this> > —> you are receiving this because you are subscribed to this thread> reply to this email directly or view it on github>  || are there any other errors that skip past onerror or any of the catching operators? seems like it would be kind of unexpected behavior and a little too much of a special case in the use case described i would suggest that you should be using rxjavas test utility classes to check the error events as part of your test || same thoughts as @hzsweers ^> when using onerrorresumenext() this error may be silently swallowed@brianvanderwal it means that your test is not good enough and it probably wont detect other kind of errors from the upstream too// id suggest to read about mutation testing: [1]( [2]( and see how you can improve your tests tltr: any change of the code under the test should break the tests (ideally) || thank you for your contribution but it seems the other participants didnt see any compelling case to support its inclusion into the library ||;;;;0;1;;
3899;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> in immutableintarray  use arrays.copyof when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> implemented lastindexof in cartesianlist  3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;3878.0;moe sync 2020-05-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> in immutableintarray use arrayscopyof when expanding the internal array909bdb290675c41238a194ad32e6686cda58f6dc-------<p> implemented lastindexof in cartesianlist387813da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f;;issue #3874: improve cartesianproductlastindexof;implemented `lastindexof()` in `certesianlist` and added appropriate tests;;1;0;implemented lastindexof in cartesianlist3878relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid311190643;
3904;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;0;moe sync 2020-05-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress identityhashmapboxing checkthis would soon become an error in blaze0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60-------<p> adding the sec-ch-ua header ignore clangtidy it has to do with the constant naming scheme for  for header: https://wicggithubio/ua-client-hints/bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;;;;1;1;adding the sec-ch-ua header ignore clangtidy it has to do with the constant naming scheme for  for header:  by moe: https://githubcom/google/moemoe_migrated_revid311420502;
3904;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;0; add union/intersection toogle to groups menu;3269 3739         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);yeah i already thought about the same especially a way to indicate the current status would be nice  so maybe an icon status somewhere i also like these circle indicators from set theory eg:  as you are working on the design any idea where to put such an icon for the groups? || @siedlerchr i think the header of the groups view is the best place in idea this is similar the view settings for the project tree is in the top right corner of this panel so *for me* this would be the first place to look if there are several of such view options we probably need to make a button that opens a context menu if there are only two buttons they might fit into the existing header || i will create a new pr based on maintable beta ||;;;;0;1;;
3904;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;0;add test for metadata delete with non-varchar partition column;and clean up code;;;;;0;1;;
3904;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c;;0;1x: fix completable swallows onerrornotimplementedexception; https://githubcom/reactivex/rxjava/issues/3860;looks good :+1:i wonder shouldnt we switch to `exceptionsthrowiffatal` as in `observable`? of course the whole `completable` needs rechecking || updated to use `exceptionsthrowiffatal`  ;;;;1;1;1x: fix completable swallows onerrornotimplementedexception;
3905;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding the rest of the client-hints headers (besides arch which i don t think we need).  header spec here:   relnotes=n/a  fab81c3b8e934e47c7cb846b1428865781ac2200;;0;moe sync 2020-05-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adding the rest of the client-hints headers (besides arch which i dont think we need)header spec here: https://wicggithubio/ua-client-hints/#http-ua-hintsrelnotesn/afab81c3b8e934e47c7cb846b1428865781ac2200;;;;;1;1;adding the rest of the client-hints headers (besides arch which i dont think we need)header spec here:  by moe: https://githubcom/google/moemoe_migrated_revid311801249;
3905;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding the rest of the client-hints headers (besides arch which i don t think we need).  header spec here:   relnotes=n/a  fab81c3b8e934e47c7cb846b1428865781ac2200;;0;apple java extensions still needed?;do they still make any sense?https://developerapplecom/legacy/library/samplecode/applejavaextensions/introduction/introhtml;at least with java 9 they are obsolete and with javafx no longer needed but we still have one or two dialogs who use them  || refs #3861  || so full steam ahead for the javafx migration 🎉  || refs #3421  ||;;;;0;1;;
3905;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding the rest of the client-hints headers (besides arch which i don t think we need).  header spec here:   relnotes=n/a  fab81c3b8e934e47c7cb846b1428865781ac2200;;0;fix setup of hive client tests;the latest version of testng does not call overriden methods in subclasses when they areannotated with @beforeclass etc;;;;;0;1;;
3905;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-05-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding the rest of the client-hints headers (besides arch which i don t think we need).  header spec here:   relnotes=n/a  fab81c3b8e934e47c7cb846b1428865781ac2200;;3892.0;1x: fix singleordefault() backpressure if source is empty;issue #3892 is a goldmine for missing backpressure problems this pr fixes the case when `singleordefault` encounters an empty source and has to emit some default value  via setting the `singleproducer` on the child on termination; ;javalangillegalstateexception: more items arrived than were requested;were seeing this exception for a small percent of our users we havent been able to reproduce this ourselves so providing a sample might not be feasible any idea what could be causing this based on the stacktrace alone?``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)```;looks like `onsubscribetoobservablefuture` was not refitted with backpressure support and it fires the futures value unconditionally ill post a fix for this thanks for reporting! || see #3893workaround for now: apply `onbackpressurebuffer()` after the `from(future)` you are using || great  i think there might be other operators that need to be retrofitted? ``` javanon-fatal exception: javalangillegalstateexception: more items arrived than were requested       at rxinternalproducersproducerarbiterproduced(producerarbiterjava:98)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:206)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:129)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:107)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$mergesubscriberoncompleted(operatormergejava:268)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:47)       at rxinternaloperatorsonsubscribefromiterablecall(onsubscribefromiterablejava:32)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservable$2call(observablejava:233)       at rxobservable$2call(observablejava:225)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberdrain(onsubscribeconcatmapjava:286)       at rxinternaloperatorsonsubscribeconcatmap$concatmapsubscriberinnercompleted(onsubscribeconcatmapjava:209)       at rxinternaloperatorsonsubscribeconcatmap$concatmapinnersubscriberoncompleted(onsubscribeconcatmapjava:345)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:125)       at rxinternaloperatorsoperatortakelastone$parentsubscriberemit(operatortakelastonejava:159)       at rxinternaloperatorsoperatortakelastone$parentsubscriberoncompleted(operatortakelastonejava:125)       at rxinternaloperatorsoperatormerge$mergesubscriberemitloop(operatormergejava:635)       at rxinternaloperatorsoperatormerge$mergesubscriberemit(operatormergejava:547)       at rxinternaloperatorsoperatormerge$innersubscriberoncompleted(operatormergejava:836)       at rxinternaloperatorsoperatormap$1oncompleted(operatormapjava:43)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscribercomplete(operatoronbackpressurebufferjava:169)       at rxinternalutilbackpressuredrainmanagerdrain(backpressuredrainmanagerjava:187)       at rxinternalutilbackpressuredrainmanagerterminateanddrain(backpressuredrainmanagerjava:114)       at rxinternaloperatorsoperatoronbackpressurebuffer$buffersubscriberoncompleted(operatoronbackpressurebufferjava:140)       at rxinternaloperatorsoperatorsubscribeon$1$1oncompleted(operatorsubscribeonjava:68)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:76)       at rxinternaloperatorsonsubscribetoobservablefuture$toobservablefuturecall(onsubscribetoobservablefuturejava:43)       at rxobservableunsafesubscribe(observablejava:8741)       at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)       at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)       at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)       at javautilconcurrentfuturetaskrun(futuretaskjava:237)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)       at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)       at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)       at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)       at javalangthreadrun(threadjava:818)``` || do you have a default value on your single() operator? || we call `lastordefault` which calls `new operatorsingle<t>(defaultvalue)` || thanks found the issue in operatorsingle when the default path is taken the value is emitted without checking for backpressure ill post a fix soon || see #3905 || thanks! || close via #3905 ||;1;0;send error to the plugin handler;
3915;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that ranges are immutable.  fixes   9485ee0fb525dfa69d91561aba0035b371d9c327;;0;moe sync 2020-06-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> document that ranges are immutablefixes https://githubcom/google/guava/issues/18139485ee0fb525dfa69d91561aba0035b371d9c327;;;;;1;1;document that ranges are immutablefixes  by moe: https://githubcom/google/moemoe_migrated_revid313873952;
3915;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that ranges are immutable.  fixes   9485ee0fb525dfa69d91561aba0035b371d9c327;;0;offer truncation of file names during file renaming;"previously i used `\bibtexkey\begin{title} - \format[replace(""({90})*$1"" removebrackets]{\title}\end{title}` for renaming pdf files when cleaning but this does not work currentlyfound this [link]( `[bibtexkey] - [title]` but how to truncate the filename up to certain length(number) (say `90` or `100`)basically i want to replace the 1st expression to make things work but not able to do it";"hi the format is now the same as for the bibtex key generator: || yes i want like this: `[auth:lower][year][veryshorttitle:lower]:[title]` but in addition i want to truncate the filename up to `100` and spacing eg: for the `title` _an awesome paper on jabref_ say `bibtexkey` is _bibkey_ and want to truncate up to `25` then the file name i want is: `bibkey - an awesome paperpdf` || maybe relevant  || note that it currently seems to be impossible to truncate the result if that is the only additional requirement to our formerly known ""label patterns"" (now ""bibtex key patterns"") we maybe should offer a configuration option for that || is this included in version 5x? || it doesnt seem like that youre welcome to submit a pull request 😇 || i can take a look at this issuewould these steps make sense as a solution?1 add a field for replacing the filename with regex in options -> preferences -> import which would make similar to the bibtex key generator a pattern along the line of (?<\a{090}+)* should solve @pramitbiswass issue in that case? (the pattern hopefully matches everything except the first 90 characters)2 in the ""cleanup entries"" update to show the regex along with the current pattern || @k3kaw8pnf7mkmdsmphz27  the cleanup rename/moving takes two pattern the filedirpattern for naming the (sub)directory and the filenamepattern  both use the same syntax as the ones for the bibtexkeypatterni think i would decouple the cases here1 generate the bibtex key using the defined pattern (independent of the cleanup a user can already auto generate keys)2 create a filename pattern based on bibtexkey whats now missing is a truncatemodifier which acts like the modifiers here: the end the filenamepattern could look like this:`[bibtexkey:truncate(40)]` || @siedlerchr ill get started on truncate but i am not sure i understand what the use case is i thought perhaps erroneously that pramitbiswas wanted to truncate the full filename (excluding the extension)if this is not the use case feel free to ignore everything below this line ^^everything from here on is under the assumption that the use case is to truncate the full filename i can think of three approaches1 just implementing :truncate() however i cant get ""stacked patterns"" to work eg [[year][auth]:lower] does not produce the result that i expect i am not a jabref power user so perhaps there is an error with the human :p if ""stacked patterns"" are not supposed to work should i attempt to add that feature?2 add the same replace with regex option that currently exists for bibtex key generation but perhaps this is inconvenient to use3 as it currently is only using the [bibtexkey] as a filepattern and ""pre-truncating"" it with regex in the bibtex key generation should work but it inconvenient and most definitively does not decouple the cases || i would also go with the `truncate` modifier as @siedlerchr suggests seems to be the most flexible solution from which also other users profit (although it might not be exactly what @pramitbiswas was suggesting)the stacked pattern is a nice idea i may warn you however that the code surrounding the pattern parser is really ugly / inflexible so this might be hard to implement || @tobiasdiez id guess the consensus is that `:truncate` would ""solve"" this issue then?i can have a look at the pattern parser while i am at it and see if i would enjoy/be able to change it if that is the case should i add a feature request and suggest myself to solve it later?meanwhile perhaps using the regex and only [bibtexkey] as a filepattern works as a temporary ""fix"" for @pramitbiswas || good! there is no need to open a feature request if you fell like implementing it please go ahead and open a pr! || first of all thank you very much for taking the issue forwardsuppose for [this bib entry]( i rename the file name as: `davcev2018iot - iot agriculture system based on lorawan` the first part is `davcev2018iot` is the `bibtexkey` i have absolutely no issue with it as [described here]( my problem is with final file name length (excluding extension of course)- sometimes what happens was due to either big title of the paper or very deep nested directory or both i can not copy/move the file elsewhere due to path length (probably max is 255) this is the actual reason for truncating the file name to a low lengthi saw the description in pr i think it will solve the issue for me the solution to the mentioned problem is `[bibtexkey] - [title:truncaten]` || @pramitbiswas you get a ""javaniofilefilesystemexception: ""  ""file name too long"" error message from jabref when the problem occurs? (that is what happens when i am trying to recreate the error on a fat drive which is quite limited in path length) || normally jabref auto truncates long file names there is at least a method in fileutil class  || i cant reproduce the error on what my system calls dos_fat_32 after applying the auto truncate to directory names (limiting them to a length of 255) || for reference: the pr where the system was changed is  || thanks to @k3kaw8pnf7mkmdsmphz27 this is now implemented in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || ";;;;0;1;;
3915;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that ranges are immutable.  fixes   9485ee0fb525dfa69d91561aba0035b371d9c327;;0;do not include any blocks for tablescanoperator output if types are empty;some connectorrecordsetprovider provides 1 block even when no block is expectedthis causes indexoutofboundexception during cross join;;;;;0;1;;
3915;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that ranges are immutable.  fixes   9485ee0fb525dfa69d91561aba0035b371d9c327;;0;is passing schedulers around best practice a last resort or something in between?;"this question is a follow-up to @artem-zinnatullins [comment to my question from yesterday]( years now ive been using the static methods like `schedulersio()` and `androidschedulersmainthread()` to move my observables around since ive started to write more tests ive also been trying to mostly move all `subscribeon`s and `observeon`s as far ""to the ends"" as possible: `subscribeon` immediately after the observables i get from retrofit and `observeon` immediately before any view related stuffthis kept all the intermediate layers scheduler agnostic and worked quite well except for two points:- all time sensitive operators use `computation()` by default - this is a problem for testing where i would like to use `testscheduler` to be able to use ""virtual time""- `replay()` seems to replay on the main thread by default - this just cost me three hours because other parts of the app relied on a `replay`ed observable to also be on `io()`so both cases could be solved by putting a few `subscribeon`s in several places of my code and passing schedulers explicitly to `interval()` etcin these cases especially with regards to testing is it best practice to mostly pass schedulers around explicitly or is that seen as a last resort to be used when the default schedulers fail or are inappropriate? as always thanks for any advice!";"cant say that its ""best practice"" or something but in order to reduce amount of boilerplate ceremonies and number of parameters in the constructor we follow next practice:``` javaclass someviewmodel { // presenter/whatever you got it  @inject @timescheduler  scheduler timescheduler  @inject @ioscheduler  scheduler ioscheduler  someviewmodel(objectgraph graph) {    graphinject(this)  }}```then in tests we just pass test implementation of the `objectgraph` that _injects_ required schedulers like `testscheduler/schedulersimmediate()/schedulerstrampoline()` to execute tests synchronously // finally got rid of using schedulers hook in our test suite today because we saw some shared state problems really happy about it---also in case if youre interested looks like that weve finally found a good solution for dealing with `viewmodel/presenter -> view` reactive interaction that solves 3 main problems:1 `mainthread` should be part of `view` implementation2 `action` posted to `mainthread` should be part of `subscription` (to unsubscribe)3 backpressure occurred on `mainthread` should be detected and handled on `viewmodel/presenter` layernothing published yet because (i need some free time + try it in real life project) but you can track discussion/progress [here]( || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || @davidmihola as promised finished solution regarding passing around rxandroids main thread scheduler: [rxui]( feedback is welcomed! || @artem-zinnatullin how do you achieve `@inject @ioscheduler` where does `ioscheduler` come from or how is it defined? || @artem-zinnatullin nevermind custom qualifiers i assume  || yup!on mon jun 12 2017 13:22 alan evans <notifications@githubcom> wrote:> @artem-zinnatullin < nevermind> custom qualifiers i assume>  —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or mute the thread> < > || ";;;;0;1;;
3919;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;0;moe sync 2020-06-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove @donotcall from fluentiterablefrom(fluentiterable)4ec122fa84a4d3384324250a74120d32e0ccfa1c-------<p> update public suffix datathis copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;;;;1;1;update public suffix datathis copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid314699619;
3919;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;0;formatter refactoring;        ( (      because github does not support autolinking there -->refactor the regular expression-based formatter previously the regex was sent through a static `setregex` method now it gets passed as a normal constructor argument-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;fix order in regexformatter;
3919;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;0;blockable tablewriteroperator;blockable tablewriteroperatornow connectors can be implemented in such way that driver executingtablewriteroperator will not be stucked in appendpage() method of a pagesink;;;;;0;1;;
3919;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1;;0;1x: subscribernot_set long -> long saves an unboxing per instance;somehow subscribernot_set was object `long` instead of primitive `long`;a tiny win but a win no less  it bothered me for some time now seeing the long there this is not just about the unboxing but remove the indication that `not_set` can be null for meaningful reasons ||  looks like my bad from last year thanks  ;;;;1;1;1x: subscribernot_set long -> long saves an unboxing per instance;
3921;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement bigintegermath.roundtodouble  which rounds to the nearest representable double value.  partially implements   relnotes= math : added  bigintegermath.roundtodouble .  d01a196043e7d1620f2880da5d35a31da9acd898;;0;moe sync 2020-06-05;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> implement bigintegermathroundtodouble which rounds to the nearest representable double valuepartially implements  added `bigintegermathroundtodouble`d01a196043e7d1620f2880da5d35a31da9acd898;;;;;1;1;implement bigintegermathroundtodouble which rounds to the nearest representable double valuepartially implements  added `bigintegermathroundtodouble`-------------created by moe: https://githubcom/google/moemoe_migrated_revid314837286;
3921;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement bigintegermath.roundtodouble  which rounds to the nearest representable double value.  partially implements   relnotes= math : added  bigintegermath.roundtodouble .  d01a196043e7d1620f2880da5d35a31da9acd898;;0;search box erroneously duplicates entered query strings;"i have indeed tested the latest master version from  and the problem persistsversion: jabref 41 on windows 7 on java x64 version 8 update 162steps to reproduce:1 use large datebase (>1800 entries) with almost every entry having an associated pdf2 type something like ""author  m""3 randomly observe that the searchbox will suddenly show ""authormauthorm"" this does not happen every time but on our system it takes about ( the search will be largely broken afterwardsthe only way to fix this is restarting jabref";"do you have autocompletion enabled? || initially no but i just enabled it in the current master to see if that fixes anything: the problem persists || nah i guessed that the auto-completion is the problem here || the searchbox behaves very strange in other respects too sometimes the cursor is randomly placed a few characters bevor the end of the string although newly entered characters still appear at the end || so i just checked again it makes no difference whether auto-completion is enabled or not || can you start jabref from the command line (java -jar jabrefjar)  and see a log entry then on the console when the freeze/errornouzs behaviour happens?i can report similiar behaviour for the date field when you try to enter a date like 2012-10-02 || duplicate of #3866  || maybe it is reproducible when you typ characters really fast at least this is what it feels like for me so it is probably again a event/concurrency issue || i think  this is related that the search is executed everytime the text changes:`        easybindsubscribe(searchfieldtextproperty() searchtext -> performsearch())` || i recently added a delay before the search is executed so i think this issue is solvedthank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from  and report back if it works for you || problem persists!three days ago i installed the snapshot master (jabref_windows-x64_4_2-dev--snapshot--2018-04-13--master) and started to use it on a daily base the first two days the search worked fine that changed todaymy database has 12700 entries with more than half of them having pdfs attachedi copied a search key into the search box and it immediately appeared twice this does not happen every time and i have not found a way to reproduce the issue but looking for it while i work with jabref || problem persists with latest dev snapshot: 43-dev--snapshot--2018-04-26--master--7629b3171jar interestingly once a text is doubled you can mark it with shift pos1 which will ""repair"" the doubled string ie it will then show only what you typed againedit: typo || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || ";;;;0;1;;
3921;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement bigintegermath.roundtodouble  which rounds to the nearest representable double value.  partially implements   relnotes= math : added  bigintegermath.roundtodouble .  d01a196043e7d1620f2880da5d35a31da9acd898;;0;add unit test for query cancellation via jdbc driver;"with the ""page_processing_delay"" property of the blackhole tables we can make presto wait for some  amount of time before return the row it helps us to test cancellation so instead of running query on some huge tpch table we can just run query which sleep without consuming cpu although making resultset responsive to interrupt seems to be hacky from the jdbc point of view we are using this trick in our code so it is better to have this part of functionality tested ";"commit message: please dont add the ""testing"" line we should be adding unit tests for everything as standard operating procedure || done || @electrum rebased on the actual master  || @electrum rebased onto the actual master || @electrum rebased on the most recent masternow instead of calling sleep within blackholepagesink#appendpage im using newly added asynchronous api || bump || some minor comments otherwise  please assign back to me when youre done with the changes and ill merge it || @electrum ive addressed your comments please have a look || minor comments otherwise sorry for the long delay on reviewing this || @electrum updated ||  ";;;;0;1;;
3921;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement bigintegermath.roundtodouble  which rounds to the nearest representable double value.  partially implements   relnotes= math : added  bigintegermath.roundtodouble .  d01a196043e7d1620f2880da5d35a31da9acd898;;0;possible resource leak in onsubscribeusing;"hii am considering using of rxjava to represent rest api responses so was looking into the sources to understand how stuff works in the onsubscribeusing operator there is something that looks like a logic error to me that may lead to leaking resources(i am reporting ""theoretical"" issue i have not tried actually making it happen also i have almost zero knowledge on how rxjava works so can be really missing something sorry about that in advance)so in  the call() method allocates resource the first thing and then creates observable attaches dispose handler etc in the end it calls unsafesubscribe handling for the potential exceptionbut what if exception happens earlier? imagine the resource was allocated successfully but observablefactorycall(resource) throws for example there seems to be nothing to dispose the resource in that caseagain i have no deep understanding of rxjava but it looks to me that resource disposal should be happening in the top level try/finally block if resource was allocated but doonterminate has not been installed yet (or failed to install) i would probably just remove the inner try/catch and did all the handling at the top level (possibly setting some boolean to indicate that stuff actually started so no cleanup needed)cheers";"thanks for reporting! this is indeed a bug and ive posted a fix pr #3922 for it || oh that was quick impressive )just out of curiosity - is it kind of implied that thing like ``` java subscriberadd(disposeonceonly)```always succeed and cannot throw? as well as doonterminate / doafterterminateisnt it safer to always do dispose in a big finally block _unless_ unsafesubscribe was successful? that would probably also simplify exception handling as now you have two identical copy&paste blockssorry if i am asking nonsense - really unfamiliar with the framework right nowps: you also have a semicolon following doafterterminate(disposeonceonly) on a separate line - probably a typo || the observable can complete outside the method so the classical imperative try-finally doesnt work || for the completion outside the method you install these doonterminate / doafterterminate ""callbacks"" i was only talking on what can happen inside onsubscribeusingcall method you already have something like``` java    public void call(final subscriber<? super t> subscriber) {        try {            final resource resource  resourcefactorycall()            //  do some stuff             try {                //  create observable via factory            } catch (throwable e) {                //  release resource and do some sophisticated exception handling                 return            }            //  do some stuff             //  install doonterminate / doafterterminate hooks            try {                //  unsafesubscribe            } catch (throwable e) {                //  release resource and do some sophisticated exception handling                 return            }        } catch (throwable e) {            //  some high level exception handling         }    }```so my concerns here are:- you have two try/catch blocks inside that look very similar to me - still exception can (in theory) happen on a line not covered by those blocks - one of ""do some stuff"" ones in the example aboveso i though maybe these inner try/catch can be avoided completely in favour of one bit try/catch/finally``` java    public void call(final subscriber<? super t> subscriber) {        resource resource  null        try {            resource  resourcefactorycall()            //  do some stuff             //  do some stuff             //  install doonterminate / doafterterminate hooks            //  unsafesubscribe            subscribed  true        } catch (throwable e) {            //  error reporting        } finally {            if (!subscribed) {                // we are returning with exception so subscribe was not successful dispose resource            }        }    }```it does not have to be finally block given that you catching throwable - it is safe to release it in ""catch"" just saying ||  in #3922 if you think you can clean up the code pr is welcome || ";;;;0;1;;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;0; implement journal abbrev formatter;i tried to implement a formatter for journal abbrev which can be used in the bibtexkeypattern as requested i now have a problem i am unsure how to solvehow do i pass the journalprefs and the abbrevloader to that logic class? sure i could call `globalsjournalabbreviationloader `but that should only be acessed from the gui@tobiasdiez @lenhard  any idea?        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);the only place where formatter are instantiated are in `formatters` thus you need to pass the dependencies there (i would propose as a constructor argument and making all static methods in this class instance methods) probably you need to propagate the dependencies even a bit further until you reach a point where you can use `globals` || damn always when i think this will be quick thing to do it emerges to a more complicated thing 👎 seems like i have to introduce a gui class for all that formatter as a wrapper/starting pointedit// when i pass it in bracketedformatter as parameter it could work  has the only disadvantage that all file cleanup methods and keygenerator has to be changed argh that is nearly the whole codebase of jabref || whats the status of this pr? || is there any progress on this? this feature would be extremely helpful for us || i had a second look and the dependency problem and think it is not such a big issue i would propose to- introduce a class formatterproperties that hold the necessary dependencies- pass it to the formatters class as a constructor argument  the only logic classes that use the formatters are in cleanup  and bracketedpattern for the cleanup i would use a similar constructor injection for the bracketedpattern i am not sure if it might be easier to pass it as an method argument it is indeed a bit of code changes but nothing hard or complicated but i think it is worth the work as it makes the formatter ready for further enhancements in the future || i digged a bit through the code again and i currently see this as nearly impossible to implement without changing the whole codebase of jabrefdespite brackedpattern the main culprit is the static `cleanupparse `method which is called over several hierarchy levels from the metadataparser and from the bibtexparser and the shareddbcodeso much for easy dependency injection:( ||;;;;0;1;;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;0;use implicit coercions in insert into select clause;currently presto requires that: - target table columns - columns returned by query to be insertedhave exactly same type no implicit coercions are used even if they are defined;im looking into this || this has already been :  || didnt realize  closing this then ||;;;;0;1;;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;3911.0;moe sync 2020-06-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991;;unmodifiablemultimapforeach inefficiently uses the default implementation;`unmodifiablemultimapforeach` uses the `multimapforeach` default implementation which involves listing entries and creating a new lambda instead of simply passing the biconsumer through to the protected instance this is safe to pass directly though because `foreach(biconsumer)` is a read-only operation;proposed solution:  ||;1;0;discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;3912.0;moe sync 2020-06-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> efficient unmodifiablemultimap foreachforeach can pass calls directly to the delegate protectedcollection because it is a read-only operation3911fixes #391298a616453df021b0792beb71c81b94d73e0cb69b-------<p> add comparatorsmin/maxrelnotes`collect`: added two-element min and max methods to comparatorsfc7433e647e82057ccc040885bf38dc503465d54-------<p> discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)8bf31e175d0f103ade07a351ed6135496f635991;;3911 efficient unmodifiablemultimap foreach;foreach can pass calls directly to the delegate protectedcollection because it is a read-only operation;;1;0;discourage orderingmin(e e) and max(e e) in favor of comparatorsmin(e e comparator) and max(e e comparator)relnotesdiscourage the use of orderingmin(e e) and max(e e)-------------created by moe: https://githubcom/google/moemoe_migrated_revid315373918;
3922;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> efficient unmodifiablemultimap foreach  foreach can pass calls directly to the delegate protected collection because it is a read-only operation.  3911 fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> add comparators.min/max  relnotes= collect : added two-element min and max methods to comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> discourage ordering.min(e  e) and max(e  e) in favor of comparators.min(e  e  comparator) and max(e  e  comparator).  relnotes=discourage the use of ordering.min(e  e) and max(e  e).  8bf31e175d0f103ade07a351ed6135496f635991;;3921.0;1x: fix using() resource cleanup when factory throws or being non-eager;the operator `using` didnt call the resource cleanup code if the `observablefactorycall()` code crashed in addition a non-eager using didnt call the resource cleanup if one subscribed with `unsafesubscribe` or the subscription to the generated `observable` crashedrelated: #3921;changes applied || ;possible resource leak in onsubscribeusing;"hii am considering using of rxjava to represent rest api responses so was looking into the sources to understand how stuff works in the onsubscribeusing operator there is something that looks like a logic error to me that may lead to leaking resources(i am reporting ""theoretical"" issue i have not tried actually making it happen also i have almost zero knowledge on how rxjava works so can be really missing something sorry about that in advance)so in  the call() method allocates resource the first thing and then creates observable attaches dispose handler etc in the end it calls unsafesubscribe handling for the potential exceptionbut what if exception happens earlier? imagine the resource was allocated successfully but observablefactorycall(resource) throws for example there seems to be nothing to dispose the resource in that caseagain i have no deep understanding of rxjava but it looks to me that resource disposal should be happening in the top level try/finally block if resource was allocated but doonterminate has not been installed yet (or failed to install) i would probably just remove the inner try/catch and did all the handling at the top level (possibly setting some boolean to indicate that stuff actually started so no cleanup needed)cheers";"thanks for reporting! this is indeed a bug and ive posted a fix pr #3922 for it || oh that was quick impressive )just out of curiosity - is it kind of implied that thing like ``` java subscriberadd(disposeonceonly)```always succeed and cannot throw? as well as doonterminate / doafterterminateisnt it safer to always do dispose in a big finally block _unless_ unsafesubscribe was successful? that would probably also simplify exception handling as now you have two identical copy&paste blockssorry if i am asking nonsense - really unfamiliar with the framework right nowps: you also have a semicolon following doafterterminate(disposeonceonly) on a separate line - probably a typo || the observable can complete outside the method so the classical imperative try-finally doesnt work || for the completion outside the method you install these doonterminate / doafterterminate ""callbacks"" i was only talking on what can happen inside onsubscribeusingcall method you already have something like``` java    public void call(final subscriber<? super t> subscriber) {        try {            final resource resource  resourcefactorycall()            //  do some stuff             try {                //  create observable via factory            } catch (throwable e) {                //  release resource and do some sophisticated exception handling                 return            }            //  do some stuff             //  install doonterminate / doafterterminate hooks            try {                //  unsafesubscribe            } catch (throwable e) {                //  release resource and do some sophisticated exception handling                 return            }        } catch (throwable e) {            //  some high level exception handling         }    }```so my concerns here are:- you have two try/catch blocks inside that look very similar to me - still exception can (in theory) happen on a line not covered by those blocks - one of ""do some stuff"" ones in the example aboveso i though maybe these inner try/catch can be avoided completely in favour of one bit try/catch/finally``` java    public void call(final subscriber<? super t> subscriber) {        resource resource  null        try {            resource  resourcefactorycall()            //  do some stuff             //  do some stuff             //  install doonterminate / doafterterminate hooks            //  unsafesubscribe            subscribed  true        } catch (throwable e) {            //  error reporting        } finally {            if (!subscribed) {                // we are returning with exception so subscribe was not successful dispose resource            }        }    }```it does not have to be finally block given that you catching throwable - it is safe to release it in ""catch"" just saying ||  in #3922 if you think you can clean up the code pr is welcome || ";1;0;1x: fix using() resource cleanup when factory throws or being non-eager;
3924;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;0;moe sync 2020-06-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress identityhashmapboxing check6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;;;;1;1;suppress identityhashmapboxing check-------------created by moe: https://githubcom/google/moemoe_migrated_revid315558134;
3924;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;0;library preferences > save order is not followed when saving;issue was tested on latest dev master and persistsjabref version 41 on windows 7 and java 8 x64 version 8 update 162steps to reproduce:1 goto file > library properties select sort order first: year second: author third: journal as in screenshot( save database3 articles will not be sorted as selected (not even by year);thank you for your report :+1:however i cannot reproduce this behavior on the current `master`@jabref/developers can someone please double check this before i close it as invalid?at least sorting by year works for me im not sure if the author sorting is correct tho || closing this issue due to inactivity   please reopen the issue with additional information if the problem persists ||;;;;0;1;;
3924;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;0;categorize errors in jdbc connector;;there are lots of other places in `jdbcrecordsink` that need to be categorized  || updated || much better ;;;;0;1;;
3924;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83;;3923.0;1x: fix rxringbuffer-pool depending on the computation scheduler;this pr  the `objectpool` dependency on the `schedulerscomputation()` which can be replaced via plugin hooks causing unexpected and long sleeps (ie when `computation()` is replaced  immediate()`)see #3923id also consider removing the `rxringbuffer` entirely;;should rxringbuffers validator really be on the computation scheduler?;i just helped debug an issue where some android robolectric tests timed out after upgrading from 111 to 115 due to  it turned out they were replacing the computation scheduler with immediate via rxjavaplugins the new commit caused rxringbuffersize to load the rxringbuffer class in any call to observeon which in turn created its objectpools which in turn ran their start() which sets up a periodic scheduling on the computation thread this caused the tests to hang indefinitely because of the repeated sleepingactions triggered by the validation tasksso since rxringbuffer can be loaded in various places by rx internally that seems to make it a lot more difficult to reliably replace the computation scheduler particularly with immediate i recommended against the immediate override in this case but using a test scheduler wasnt really helping in this scenario either although i am unfamiliar with that codebase and didnt have time to dive too deep into why short term fix for this particular case was to call observeon with a size constant to sidestep the rxringbuffer load in these tests until we can clean up the underlying scheduler plugin overrides however im wondering if maybe internal scheduling things like this should have their own scheduler? maybe an internal computation scheduler that could be an additional override in the schedulers hook that would allow them to run unhindered in most cases despite computation being overridden but in extreme cases they could be overridden as well;btw i can write the pr for this once a decision is made but i thought it deserved a little discussion of what the right fix is before i jump to an implementation || this came up recently in another forum to the same effect but i never followed up here but :+1: to something that doesnt pass through user code in such a dangerous way || yep they have a cyclic dependency i believe the `objectpool`s can be switched to `genericscheduledexecutorservice` let me write up a pr || see #3924 || fix merged in #3924 ||;1;0;1x: fix rxringbuffer-pool depending on the computation scheduler;
3925;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> break retain-cycle in converter.java  when used in j2objc target.  4e820ef25352203e042bc4fc45547fae3da7c55d;;0;moe sync 2020-06-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> break retain-cycle in converterjava when used in j2objc target4e820ef25352203e042bc4fc45547fae3da7c55d;;;;;1;1;break retain-cycle in converterjava when used in j2objc target-------------created by moe: https://githubcom/google/moemoe_migrated_revid315679614;
3925;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> break retain-cycle in converter.java  when used in j2objc target.  4e820ef25352203e042bc4fc45547fae3da7c55d;;0;"integrity check should not list ""abbreviation detected""";issue persists in latest dev masterjabref version 41 on windows 7steps to reproduce:1 perform integrity check on database with abbreviated (medline or iso) journal entries2 there will be a warning for every abbreviated journal entry foundthis should not be listed as an integrity problem since the current way jabref handles common journal abbreviations is exactly by replacing the entire string in the bib(la)tex entry with the abbreviated one so this behavior is expectedsuggested solution: scratch the integrity warning and replace the yellow warning icon when editing such entries with an info icon;"hello if this is up for grabs i would like to tackle it is there any more documentation on the issue that i can familiarize myself with? || hi thanks for your interest!you can have a look here to set up your workspace and the general workflow: you have futher questions just ask us here or in our gitter chat at  || an additional issue which could be tackled in the same fix are journals where name and abbreviation are the same for example the journal ""science"" as abbreviated ""science"" and therefore always gets listed as a problem during integrity check || since i just wanted to file an issue but found this one here: has there been any progress made on this issue? || thank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || science still gets a yellow warning mark in jabref 51 issue not resolved || confirming issue on latest master```jabref 52--2020-12-19--5aa896awindows 10 100 amd64 java 1402```for the following `journaltitle`s: wear chemosphere energy procedia aquaculture zebrafish || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || @tobiasdiez #6502 may be a dupe of this issue and/or #7208 may resolve it || @tobiasdiez confirming resolution (see screenshot) on:```jabref 52--2020-12-20--84c8504windows 10 100 amd64 java 1402```![2020-12-22 11_38_17-integrity check should not list _abbreviation detected_ · issue #3925 · jabref_j]( || ";;;;0;1;;
3925;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> break retain-cycle in converter.java  when used in j2objc target.  4e820ef25352203e042bc4fc45547fae3da7c55d;;0;add processcolumnar interface to pageprocessor;;the first commit ;;;;0;1;;
3925;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> break retain-cycle in converter.java  when used in j2objc target.  4e820ef25352203e042bc4fc45547fae3da7c55d;;0;javadoc needs update after last release;for example `observablecreate(asynconsubscribe)` [does not exist](http://reactivexio/rxjava/javadoc/rx/observablehtml#create%28rxobservablesasynconsubscribe%29);closed via #3928  ||;;;;0;1;;
3930;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> cleanup bytestreamstest.java to fix a couple of intellij warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> inline  bytestreamstest#assertequals(byte  byte)   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d;;0;moe sync 2020-06-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> cleanup bytestreamstestjava to fix a couple of intellij warnings/suggestions#codehealhacc2296fdea9cb498431a92eb5b363262b74b313-------<p> inline `bytestreamstest#assertequals(byte byte)`#codehealth62ee8a07ad4d3c66e255da66a3382ac790656e2d;;;;;1;1;inline `bytestreamstest#assertequals(byte byte)`#codehealth-------------created by moe: https://githubcom/google/moemoe_migrated_revid315898541;
3930;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> cleanup bytestreamstest.java to fix a couple of intellij warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> inline  bytestreamstest#assertequals(byte  byte)   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d;;0;ieee transitions to https;> ieee xplore is transitioning to  on 9 april 2018 customer access via ezproxy will require version 6 or higher with tls 11 or 12 enabledreview our ezproxy upgrade checklist to ensure uninterrupted accesscheck fetcher if we need to change the urls- full text- web fetcher - etc;note:  urls to ieee xplore will be redirected after the transition to  not affect us although we should use the new  urls then ||;;;;0;1;;
3930;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> cleanup bytestreamstest.java to fix a couple of intellij warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> inline  bytestreamstest#assertequals(byte  byte)   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d;;0;fix race in abstracttesthiveclient;;;;;;0;1;;
3930;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> cleanup bytestreamstest.java to fix a couple of intellij warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> inline  bytestreamstest#assertequals(byte  byte)   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d;;0;dynamically push data to observable without changing subscriber;id like to create an observable and dynamically push data to it i create the following code to do it:```        observable                create(new observableonsubscribe<object>() {                    @override                    public void call(subscriber<? super object> subscriber) {                        eventsubscriber  subscriber                    }                })                flatmap(new func1<object observable<object>>() {                    @override                    public observable<object> call(object object) {                        // perform some transformation                    }                })                subscribe(new action1<object>() {                    @override                    public void call(object object) {                        // perform some action                    }                })                 // other place that generates data        eventsubscriberonnext(data)```however the problem is that whenever theres new data pushed to the observable transformed by the flatmap and consumed by the subscription  the `eventsubscriber` will be updated with a new subscriber is there a way to avoid this?;"yes use `publishsubject```` javapublishsubject<integer> ps  publishsubjectcreate()psflatmap(v -> transform(v))subscribe()psonnext(data)``` || thanks @akarnokd i tried publishsubject but it has the effect of creating duplicated events for example heres a simplified version of my code:```publishsubject<integer> ps  publishsubjectcreate()observable<integer> o1observable<integer> o2o1  psflatmap(v -> return o2)o2  psflatmap(v -> return o1)o1subscribe(v -> print(v))# generate some datapsonnext(1)psonnext(2)psonnext(1)psonnext(2)# results:1211222```the reason i need to write code like this is for simulating a finite state machine `o1` and `o2` are like states and they goes to each other when seeing some events || im not entirely sure what your goal is but if i was going to make a finite state machine i would base it on the scan or reduce operator```observable<input> srcobservable<state> laststate  srcreduce(init_state this::lookupnextstateforcurrentstateandinput)if (laststatetoblocking()single()istermainal()) {    systemoutprintln(""woo it matched"")} else {    systemoutprintln(""failed to match input"")}``` || thanks @abersnaze ive considered using scan/reduce operators but flatmap gives me advantage over scan/reduce in terms of code structure ill try to illustrate it using the following codesusing flatmap:```observable<input> eventsobservable<state> startstateobservable<state> finalstatestartstate   eventsflatmap(e -> {    observable<state> nextstate  startstate    if (event is a) {      nextstate  finalstate    }    return nextstatestartwith(e)  })finalstate   eventsflatmap(e -> {    observable<state> nextstate  finalstate    if (event is c) {      nextstate  startstate    }    return nextstatestartwith(e)  })startstatesubscribe(e -> {  if (event is a) {    // do something with a  } else if (event is b) {    // do something with b  } else if (event is c) {    // do something with c  }})```using reduce:```observable<input> eventsobservable<state> states   eventsreduce(start_state (curstate event) -> {    state nextstate  curstate    if (curstate  start_state) {      if (event is a) {        nextstate  final_state        // do something with a      } else if (event is b) {        // do something with b      }    } else if (curstate  final_state) {      if (event is c) {        nextstate  start_state        // do something with c      }    }  })```the difference is that with the flatmap approach i could separate state transition and event handling the piece of codes looks modular and flat while with the reduce approach things are mixed up especially in my case where there are a lot of states and events the codes are harder to read || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
3931;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34;;0;moe sync 2020-06-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> upgraded bytestreams#copy(inputstream outputstream) to use the faster filechannel if possiblesee also  for some backgroundrelnotes`io`: upgraded `bytestreams#copy(inputstream outputstream)` to use the faster `filechannel` if possible27bc3deb733b2f38bd853953fa21e2e116fc6c34;;;;;1;1;upgraded bytestreams#copy(inputstream outputstream) to use the faster filechannel if possiblesee also  for some backgroundrelnotes`io`: upgraded `bytestreams#copy(inputstream outputstream)` to use the faster `filechannel` if possible-------------created by moe: https://githubcom/google/moemoe_migrated_revid316177487;
3931;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34;;0;use row count for filtering shards to compact;;;;;;0;1;;
3931;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34;;0;1x: add groupby overload with evictingmapfactory;i have a long running stream using `groupby` that over time will accumulate 10s of millions of keys if i can specify an evicting map to `groupby` then ill be able to keep it down to ~10000 keys this pr supports this use case and could be used with guavas `cachebuilder` like this:``` javafunc1<action1<k> map<k object>> mapfactory      action -> cachebuildernewbuilder()              maximumsize(1000)              expireafteraccess(12 timeunithour)              removallistener(key -> actioncall(key))              <k object> build()asmap()observable    groupby(keyselector elementselector mapfactory)    ```ill enhance this pr with more unit tests if this looks a good direction;this pr may be useful still but ive realised i can get what i want with more control using `defer` `publishsubject` and `takeuntil` on the grouped observables || yes you can `timeout` or `takeuntil` on each group to get it removed from the internal map im not sure about the map factory because we need something concurrently modifiable || yep youre right but i put that requirement in the javadoc and the examplemap from cachebuilder is threadsafeon fri 13 may 2016 03:24 david karnok notifications@githubcom wrote:> yes you can timeout or takeuntil on each group to get it removed from> the internal map im not sure about the map factory because we need> something concurrently modifiable> > —> you are receiving this because you authored the thread> reply to this email directly or view it on github>  || im happy using `timeout` with my use case now but ill leave this pr up for a few days to see if anyone else has a use case || @akarnokd  i think theres a catch with `timeout` im using it as below but i believe i could lose an emission due to timeout cutting in on say the processing occurring in `operator1`:``` javaogroupby()  flatmap(    g ->         goperator1()         timeout(10 timeunitseconds)         onerrorresumenext(completeontimeoutexception)))```i guess ill have to use `timeout` or `timer` in a different way so it doesnt shortcut an in-flight emission have i got this right? || yes there  is  chance values get dropped when an emission and group unsubscribe happens at the same time you cant know the value made it or not if your value has its own lifecycle thats going to be a problem rx is not designed for that and its the next challenge of the field - especially since reactive-io is full of life-cycle managed buffers || > if your value has its own lifecycle thats going to be a problem rx is not designed for that and its the next challenge of the field - especially since reactive-io is full of life-cycle managed buffersyour absolutely right that my use case has some special lifecycle that im trying to manage with `groupby` its an event sourcing/cqrs  use case where emissions upstream of `groupby` are persisted (you knew io was part of the scenario you perceptive fellow) and whenever a `groupby` emitted `groupedobservable` is subscribed to (or resubscribed to) the stream starts with the events already recorded for that key (read from disk) before processing the incoming event from upstream it does seem to me now that if i dont want to lose emissions for my use case (and want to keep the `groupby` keys down in numbers) then i have to record information about groups upstream of `groupby` and possibly modify the upstream to include some sort of keyed sentinel to tell the `groupedobservable` to complete based on last access time for a key for instance **or** i just use the modified `groupby` in this prill progress the implementation of the use case and see what else turns up || if you want to pursue this further please rebase it || yep id like to pursue this one this pr is not great to put in an external library because it is so coupled to the groupby implementation and its tests ill fix the api and i realize i may also need to put try-catch on `mapfactorycall` and `mapget` and `mapput` calls with some specific error handling (catching fatal errors calling onerror etc) ill have a look at itid also like to use the guava `cachebuilder` in unit tests can i add that test dependency? || im not against adding `testcompile` entries hopefully guava doesnt drag in too many other libraries || guava only has a few optional dependencies that i wouldnt include and the current version 190 still supports java 6 || great! ||    oops merged in a `buildgradle` change and broke this could you rebase again?/cc @artem-zinnatullin @stevegury for review on this || thanks for the review @artem-zinnatullinive addressed your comments and theres one little addition which is the rename of one of the test methods to use camel case and a number to differentiate from `testgroupbybackpressure` (`testgroupbybackpressure` -> `testgroupbybackpressure2`) ||  i take it that being an api enhancement this pr still requires one more collaborator approval? || oh and thanks @stevegury for giving it a look! || thanks @davidmoten for the contribution! ||;;;;1;1;add groupby overload with evictingmapfactory;
3931;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34;;3929;3929 correct fetcher messages;3929;@siedlerchr we do?! ||;fetcher messages misleading;`full text document download failed` does not indicate a failed download but that no accessible url was found!;;1;0;3929 correct fetcher messages;
3936;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a;;0;moe sync 2020-06-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4causing some internal failures457767d10299005df3f7a3e7aba3eef8ee528b9a;;;;;1;1;revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4causing some internal failures-------------created by moe: https://githubcom/google/moemoe_migrated_revid316509747;
3936;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (japanese);
3936;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a;;0;add local maven configuration using mvn/;- adding extension for the takari smart builder which provides better  parallelization of the build- adding extension for concurrent local repository access which is  required when using the smart builder- add configuration to enable the smart builder and use 8 threads- add configuration to set the jvm -xmx option- add mvn/timingproperties to gitignore; i will make a pull request to update the presto documentation next pull request will be incremental support ||;;;;0;1;;
3936;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-06-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a;;0;1x: promote unicastsubject to be a standard+experimental subject;plus the unsubscribe indirection has been inlined making `state` implement `subscription` directly (instead of `action0` + `subscriptionscreate`); ;;;;1;1;1x: promote unicastsubject to be a standard+experimental subject;
3937;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add a guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> avoid reentrancy in executionsequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> revert db53357fea477695deeaa32746660bf86d6d51c1  broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018;;0;moe sync 2020-06-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add a guava wiki entry about finding the min/max for various circumstances3bb0d85dd8f0e404684bede39c06bc0602b3f0c5-------<p> avoid reentrancy in executionsequencerdb53357fea477695deeaa32746660bf86d6d51c1-------<p> revert db53357fea477695deeaa32746660bf86d6d51c1broke a test2ef8463838b23ae8c40c022fd96e7b143e0de018;;;;;1;1;revert db53357fea477695deeaa32746660bf86d6d51c1broke a test-------------created by moe: https://githubcom/google/moemoe_migrated_revid316808913;
3937;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add a guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> avoid reentrancy in executionsequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> revert db53357fea477695deeaa32746660bf86d6d51c1  broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018;;0;jabref hangs while searching in one library and moving to another library;<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-04-08--master--4d8291483linux 440-116-generic amd64 java 180_161steps to reproduce:1 open a library2 open another library3 go to tab of library 1 and search for a string4 click the tab of library 2jabref hangs there is no exception in the console i have to click ctrl+c on the console to stop it and restart<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```  paste an excerpt of your log file here  ```</details>;interestingly i had such hangs under windows from time to time but linux works fine this is most likely dependent on the size of the library and the memory +cpu  you have avaiable in your systemedit:: addtionally it makes a huge difference if you have the entry editor open when searching or not || closing this issue due to inactivity   please reopen the issue with additional information if the problem persists ||;;;;0;1;;
3937;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add a guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> avoid reentrancy in executionsequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> revert db53357fea477695deeaa32746660bf86d6d51c1  broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018;;0;invalid plan for join;```select  *from  (select    x    sin(x)  from    (values 1 2 3) t(x)) tjoin  (select    x    sin(x)  from    (values 1 2 3) u(x)) uon  tx  ux```in `projectpushdownpushprojectionthrough` `projections` is a map but `outputbuilder` is a list as a result `projectionsgetkey()` and `outputbuilderbuild()` will not be the same even if they were fed the same inputs when some of the inputs are duplicatefor this query the duplicate join criteria was produced  predicatepushdownprocessinnerjoin````javalangillegalargumentexception: input symbols do not match output symbols    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:122)    at comfacebookprestosqlplannerplanexchangenode<init>(exchangenodejava:71)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewriterpushprojectionthrough(projectionpushdownjava:165)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewritervisitproject(projectionpushdownjava:79)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewritervisitproject(projectionpushdownjava:58)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextrewrite(simpleplanrewriterjava:86)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextlambda$defaultrewrite$106(simpleplanrewriterjava:75)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontext$$lambda$468/950410549apply(unknown source)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:512)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:502)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextdefaultrewrite(simpleplanrewriterjava:76)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:40)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:24)    at comfacebookprestosqlplannerplanplanvisitorvisitjoin(planvisitorjava:85)    at comfacebookprestosqlplannerplanjoinnodeaccept(joinnodejava:159)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextrewrite(simpleplanrewriterjava:86)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextlambda$defaultrewrite$106(simpleplanrewriterjava:75)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontext$$lambda$468/950410549apply(unknown source)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautilarraylist$arraylistspliteratorforeachremaining(arraylistjava:1374)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:512)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:502)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextdefaultrewrite(simpleplanrewriterjava:76)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:40)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:24)    at comfacebookprestosqlplannerplanplanvisitorvisitexchange(planvisitorjava:155)    at comfacebookprestosqlplannerplanexchangenodeaccept(exchangenodejava:161)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextrewrite(simpleplanrewriterjava:86)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextlambda$defaultrewrite$106(simpleplanrewriterjava:75)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontext$$lambda$468/950410549apply(unknown source)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:512)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:502)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplansimpleplanrewriter$rewritecontextdefaultrewrite(simpleplanrewriterjava:76)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:40)    at comfacebookprestosqlplannerplansimpleplanrewritervisitplan(simpleplanrewriterjava:24)    at comfacebookprestosqlplannerplanplanvisitorvisitoutput(planvisitorjava:50)    at comfacebookprestosqlplannerplanoutputnodeaccept(outputnodejava:81)    at comfacebookprestosqlplannerplansimpleplanrewriterrewritewith(simpleplanrewriterjava:29)    at comfacebookprestosqlplanneroptimizationsprojectionpushdownoptimize(projectionpushdownjava:55)    at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:101)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:266)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)    at comfacebookprestoexecutionqueuedexecutionlambda$start$170(queuedexecutionjava:68)    at comfacebookprestoexecutionqueuedexecution$$lambda$399/184162826run(unknown source)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```;added the tags and assignee because @electrum did so on #3939  ||;;;;0;1;;
3937;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add a guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> avoid reentrancy in executionsequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> revert db53357fea477695deeaa32746660bf86d6d51c1  broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018;;0;1x: change the workers to capture the stack trace;"watched @dlew presentation of the pit falls of debugging rxjava  change is to create an exception when a thread based `schedulerworker` is constructed and reused it for all subsequent scheduled actions to increase the readability of uncaught and fatal exceptions that bubble up to the schedulers but spread the cost out across many scheduled actionsa future improvement to spread the cost out even more that i didnt want to do in the first attempt would to create the exception when `schedulerio()` is called and reuse the exception across multiple `worker`sthe example from the presentation```import rxobservableimport rxschedulersschedulerspublic class main {    public static void main(string args) throws interruptedexception {        observableempty()                first()                subscribeon(schedulersio())                subscribe()        threadsleep(100)    }}```used to print this just this exception with no mention the main class```exception in thread ""rxioscheduler-2"" javalangillegalstateexception: exception thrown on schedulerworker thread add `onerror` handling    at rxinternalschedulersscheduledactionrun(scheduledactionjava:65)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)    at javautilconcurrentfuturetaskrun(futuretaskjava:266)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:180)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:293)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)caused by: rxexceptionsonerrornotimplementedexception: sequence contains no elements    at rxinternalutilinternalobservableutils$errornotimplementedactioncall(internalobservableutilsjava:374)    at rxinternalutilinternalobservableutils$errornotimplementedactioncall(internalobservableutilsjava:1)    at rxinternalutilactionsubscriberonerror(actionsubscriberjava:44)    at rxobserverssafesubscriber_onerror(safesubscriberjava:157)    at rxobserverssafesubscriberonerror(safesubscriberjava:120)    at rxinternaloperatorsoperatorsubscribeon$1$1onerror(operatorsubscribeonjava:59)    at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:116)    at rxinternaloperatorsoperatortake$1oncompleted(operatortakejava:56)    at rxinternaloperatorsemptyobservableholdercall(emptyobservableholderjava:44)    at rxinternaloperatorsemptyobservableholdercall(emptyobservableholderjava:1)    at rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:50)    at rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:1)    at rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:50)    at rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:1)    at rxobservableunsafesubscribe(observablejava:8460)    at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)    at rxinternalschedulerscachedthreadscheduler$eventloopworker$1call(cachedthreadschedulerjava:222)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:60)     7 morecaused by: javautilnosuchelementexception: sequence contains no elements     19 more```but will now print the exception above but with an additional caused by```caused by: rxinternalschedulersschedulercontextexception: asynchronous work scheduled at    at rxinternalschedulersnewthreadworker<init>(newthreadworkerjava:36)    at rxinternalschedulerscachedthreadscheduler$threadworker<init>(cachedthreadschedulerjava:235)    at rxinternalschedulerscachedthreadscheduler$cachedworkerpoolget(cachedthreadschedulerjava:86)    at rxinternalschedulerscachedthreadscheduler$eventloopworker<init>(cachedthreadschedulerjava:187)    at rxinternalschedulerscachedthreadschedulercreateworker(cachedthreadschedulerjava:173)    at rxinternaloperatorsoperatorsubscribeoncall(operatorsubscribeonjava:42)    at rxinternaloperatorsoperatorsubscribeoncall(operatorsubscribeonjava:1)    at rxobservablesubscribe(observablejava:8553)    at rxobservablesubscribe(observablejava:8520)    at rxobservablesubscribe(observablejava:8316)    at rxschedulersmainmain(mainjava:10)```";no at least make it conditional to a system parameter / global boolean variable || 👍  as is the cost is very low and the benefit is very high  || @akarnokd added a system property to make if off by default || i would like this to be default behavior learning rx is hard and we are making it harder by default let users opt into over-optimizations || you have a lot of test failures || rxjava is hard to debug - lots of people agree on this i know of large non-trivial projects that avoided using rxjava because it hard to debug non-trivial projects do i/o and serialization - those are the performance problems not micro-optimizations users will care more about it being easier to debug than being micro-optimized this should be default to make it less hard || ive changed it back to always getting the value from the system properties because makes a fine public api and it makes the tests work again  ive added some code to mitigate the overhead of doing the check multiple times || still failing || found it the test worked if run in isolation but failed if they were run en masse because of caching added pooled work resets in two places seems to fix the issue || i want to increase debug support in rxjava but id think based on the feedback on #3965 that such capture is not enoughi suggest closing this pr unless you can spend some time with it before 117 also id like your feedback on #4007 its tracking grabs the stacktrace for `observeon` as well (the triggerer of the scheduled actions) and should help with non-fatal crashes over async boundariesa more elaborate solution would be that in case of a crash the operator graph could be walked and dumped in a consumable format unfortunately to support this the `subscriber` class has to be extended with methods to peek into the upstream and all operators have to set a `producer` on their child subscribers to have the bidirectional link for the graph since `subscriber` is public api adding methods to it may not be a compatible change for 2x there is no problem || im closing this for now due to test failures and merge conflictsin addition i suggest extending #4007 once merged by adding `scheduler` wrappers - similar to the onassembly wrappers via the hooks to capture and signal the stacksif you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
3939;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add longmath.roundtodouble.  relnotes=add longmath.roundtodouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> add a test for the bug introduced by cl 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146;;0;moe sync 2020-06-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add longmathroundtodoublerelnotesadd longmathroundtodouble (#3895)6f176593caf7fe7549c115ada136287ea31e2875-------<p> add a test for the bug introduced by cl 31677947168962e5893c9812d79508d82c8b70e9bb7350146;;;;;1;1;add a test for the bug introduced by cl 316779471-------------created by moe: https://githubcom/google/moemoe_migrated_revid316982088;
3939;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add longmath.roundtodouble.  relnotes=add longmath.roundtodouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> add a test for the bug introduced by cl 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146;;0;when jabref is re-opened it re-opens one library but not the others;<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref 42-dev--snapshot--2018-04-08--master--4d8291483linux 440-116-generic amd64java 180_161steps to reproduce:1 open a library2 open another library3 close jabref4 re-open jabrefthe first library is opened automatically but the second is not - i have to re-open it manuallyit could be very convenient to return to the same point after restart this is especially true while debugging the hangs and freezes (see previous issue);"cannot confirm this behaviour neither under windows nor under xubuntu have you checked the option ""open last edited libraries at startup under options-> general? || ​yes (in my version it is in options -> file and it is checked) || is this issue now resolved by switching the look and feel? || yes it seems to be solved when i am using nimbus*--- erel segal-halevi   ( אראל סגל הלוי*on mon apr 16 2018 at 6:38 pm christoph <notifications@githubcom> wrote:> is this issue now resolved by switching the look and feel?>> —> you are receiving this because you authored the thread> reply to this email directly view it on github> < or mute> the thread> < > || ";;;;0;1;;
3939;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add longmath.roundtodouble.  relnotes=add longmath.roundtodouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> add a test for the bug introduced by cl 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146;;0;input symbols do not match output symbols;```javalangillegalargumentexception: input symbols do not match output symbols    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:122)    at comfacebookprestosqlplannerplanexchangenode<init>(exchangenodejava:71)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewriterpushprojectionthrough(projectionpushdownjava:164)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewritervisitproject(projectionpushdownjava:78)    at comfacebookprestosqlplanneroptimizationsprojectionpushdown$rewritervisitproject(projectionpushdownjava:57)    at comfacebookprestosqlplannerplanprojectnodeaccept(projectnodejava:81)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextrewrite(planrewriterjava:100)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextlambda$defaultrewrite$130(planrewriterjava:74)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextdefaultrewrite(planrewriterjava:75)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:39)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:23)    at comfacebookprestosqlplannerplanplanvisitorvisitjoin(planvisitorjava:85)    at comfacebookprestosqlplannerplanjoinnodeaccept(joinnodejava:159)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextrewrite(planrewriterjava:100)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextlambda$defaultrewrite$130(planrewriterjava:74)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextdefaultrewrite(planrewriterjava:75)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:39)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:23)    at comfacebookprestosqlplannerplanplanvisitorvisitfilter(planvisitorjava:35)    at comfacebookprestosqlplannerplanfilternodeaccept(filternodejava:71)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextrewrite(planrewriterjava:100)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextlambda$defaultrewrite$130(planrewriterjava:74)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextdefaultrewrite(planrewriterjava:75)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:39)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:23)    at comfacebookprestosqlplannerplanplanvisitorvisitexchange(planvisitorjava:155)    at comfacebookprestosqlplannerplanexchangenodeaccept(exchangenodejava:161)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextrewrite(planrewriterjava:100)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextlambda$defaultrewrite$130(planrewriterjava:74)    at javautilstreamreferencepipeline$3$1accept(referencepipelinejava:193)    at javautiliteratorforeachremaining(iteratorjava:116)    at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)    at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:481)    at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:471)    at javautilstreamreduceops$reduceopevaluatesequential(reduceopsjava:708)    at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)    at javautilstreamreferencepipelinecollect(referencepipelinejava:499)    at comfacebookprestosqlplannerplanplanrewriter$rewritecontextdefaultrewrite(planrewriterjava:75)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:39)    at comfacebookprestosqlplannerplanplanrewritervisitplan(planrewriterjava:23)    at comfacebookprestosqlplannerplanplanvisitorvisitoutput(planvisitorjava:50)    at comfacebookprestosqlplannerplanoutputnodeaccept(outputnodejava:81)    at comfacebookprestosqlplannerplanplanrewriterrewritewith(planrewriterjava:28)    at comfacebookprestosqlplanneroptimizationsprojectionpushdownoptimize(projectionpushdownjava:54)    at comfacebookprestosqlplannerlogicalplannerplan(logicalplannerjava:98)    at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:266)    at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)    at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)    at comfacebookprestoexecutionqueuedexecutionlambda$start$201(queuedexecutionjava:68)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```;duplicate of 3937 ||;;;;0;1;;
3939;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add longmath.roundtodouble.  relnotes=add longmath.roundtodouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> add a test for the bug introduced by cl 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146;;0;whats the best way to have a side effect of a different type;"id like to have an `observable` that represents some long running action such as `observable<progressevent>` where the event holds progress information for the task such as a status message or percentage completedat the end of the task id like to return a value of a different type a trivial example would be counting the number of mis spelled words in some text the progress would be processing word x of y but the result might be the list of mis-spelled wordsthe first thing i looked at was`subject` but that wont work since the thing is really an `observable` of the events and an `observable` of the result rather than an `observable` an an `observer` like `subject` then i thought maybe simply extending `observable` would work id add an extra method `optional<result> result()` which would return the result of the computation after `oncomplete` but you ""lose"" the type of the `observable` if you call other methods on it like a map then a filter you can get around that obviously either extending all of the methods on observable to return the subtype or saving the variable then chaining method calls to it then finally getting the resulti also considered adding the `result` method to the event interface such that the last call to `onnext` would have an event whose `optional<result>` is not empty this seems pretty easy but did not feel like the cleanest solutionwondering if theres a mechanism in the framework that i missed or some best practice for this type of situation that im not aware ofthe reason i dont return an `observable<result>` in the first place is i wanted the caller to have the option of subscribing to the event stream to do something like show a progress monitor";trying again with formatting you could emit a custom object that has a `progressevent` and `list<string>`being the list of misspelled words so far (only needs to have real content till the last emission though) and then:``` javaobservable    doonnext(x -> updateprogress(xevent))    last()    map(x -> xlist)``` || yeah thats similar to what i had stubbed out:```    public interface progressevent<t> {        public long progress()        public long maxprogress()        public default optional<t> result() {            return optionalempty()        }    }```thats the event that any `observable` emitted that was a process that reported progress on the creation of a resultit had not occurred to me `last()map(progressevent::result)map(optional::get)` could pretty cleanly get the result of the operation i had been trying to use `compose` `extend` or `lift` but those couldnt really be provided by the caller since the functions would need the state of the process being observed to potentially build the result extending `observable` didnt feel clean nor did hacking the builder creating the process to add observers to the resulting `observable` or having it provide the function needed to get the final result`last`/`map` seems like it might be the best option || looks like the question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
3941;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de;;0;moe sync 2020-06-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> avoid reentrancy in executionsequencer37d4506a2874cd223d88ebf98e8d28ff333c11de;;;;;1;1;avoid reentrancy in executionsequencerrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid317189958;
3941;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de;;0;encoding setting in 41 is saved incompatibly to older version eg 2111;i have tested the latest master version and the problem persistsjabref version 41 on windows 7steps to reproduce:1 create a database2 go to file->library properties and select utf-83 create an entry with some multi-byte characters (in utf-8) like äöüß etc4 save the database5 open the database in jabref 21116 the encoding will not be detected as utf-8the reason for this is the encoding string newer versions of jabref use:```% encoding: utf-8```while oder versions use```% encoding: utf8```interestingly jabref 41 also detects the version without hyphen correctly but as soon as you save the file this line is changed to the version with hyphen so jabref 2x will fail again;hidue to our limited resources we can only fix bugs in the latest development version all older versions of jabref are not supported by us and jabref 211 is way too old || well this issue is not really about fixing bugs in older versions but about keeping your chosen bibliography format (bibtex or biblatex) compatible between versionsjabref users are often collaborating on a database if you dont keep the bibliography format upwards and downwards compatible then one person of a collaboration updating his jabref version forces everybody else to update as well or else they cannot properly read the database any more or worse they can read it but the encoding is mis-guessed and upon saving they will corrupt the database (this is what happens now)fixing this issue is very simple as newer version of jabref can read in the old formatting string without problems so its simply a matter going back to using:```% this file was created with jabref <version number>% encoding: <javaio string instead of javanio string ie utf8 instead of utf-8>```(note that the first line without the version number must be present) instead of just:```% encoding: utf-8``` ||;;;;0;1;;
3941;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de;;0;migrate spi constraint predicate to use nullablevalue bindings;;looks good but take a look at the travis failures || does the spi change need release notes? || @electrum nope this was a regression introduced in trunk ||;;;;0;1;;
3941;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de;;3940.0;1x: fix singleflatmap not composing subscription through;see #3940; ;tosingle() leaks subscriber if followed by flatmap;"not sure this is a correct test let me know if i can provide any extra information```    private subscriber<? super object> subscriber    @test public void thistestpasses() throws exception {        final subscription subscribe  observablecreate(subscriber -> {            thissubscriber  subscriber        })subscribeon(schedulersio())flatmap(o -> observablejust(""""))tosingle()subscribe()        subscribeunsubscribe()        assertthat(subscriberisunsubscribed())istrue()    }    @test public void thistestfails() throws exception {        final subscription subscribe  observablecreate(subscriber -> {            thissubscriber  subscriber        })subscribeon(schedulersio())tosingle()flatmap(o -> singlejust(""""))subscribe()        subscribeunsubscribe()        assertthat(subscriberisunsubscribed())istrue()    }```";thanks for reporting indeed this is a bug in `singleflatmap` fix pr in #3941  ||;1;0;1x: fix singleflatmap not composing subscription through;
3942;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327;;0;moe sync 2020-06-23;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc codethe @retainedwith annotation can not be used on both sides of the retain-cycle the regularimmutablebimap does not have this problem because it uses inverse inner class this cl applies similar trick in singletonimmutablebimap although without additional inner classrelnotesupdate singletonimmutablebimap to avoid retain-cycle in transpiled obj-c coded7d07d50c7ae699b71c9a239212f4c3728180327;;;;;1;1;fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc codethe @retainedwith annotation can not be used on both sides of the retain-cycle the regularimmutablebimap does not have this problem because it uses inverse inner class this cl applies similar trick in singletonimmutablebimap although without additional inner classrelnotesupdate singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code-------------created by moe: https://githubcom/google/moemoe_migrated_revid317856944;
3942;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327;;0; add external application selection to preferences;wip - add external application selection to preferencesthis pull request is in regards to #674 this initial commit adds a button to the settings panel for each external application which allows the user to select an application to make default there is currently a problem with this build where the application will not update the pushtoapplicationbutton i believe the issue has something to do with the interaction between javafx and swing components also i plan on adding keybinding options as well in the future its just taking me a bit of time to familiarize myself with the program between life events let me know what you think so far and on the direction i am taking;this looks like a good start nice work!the button is not updated because such an update mechanism is not yet implemented the icon is generated from an action (which itself is created in `pushtoapplicationbuttongetmenuaction`) however the [action class]( only has static return values i would propose to follow the example of [controlsfx action]( and replace the getters in the action interface by javafx properties then you can use bindings in the adapter class [jabrefaction]( and in this way update the ui if the underlying property is changed @slyr91 do you want to implement these changes or prefer if somebody from the team does it? (i would volunteer but it may take some time) || i will definitely give this a solid try @tobiasdiez i am still learning about the proper procedures on github but if i can implement those changes should i add them to this pull request or to a separate one? || good question in general it is better to create a few smaller prs because that makes reviewing and understanding the code changes easier having said this in this particular case i think however that the changes are small and localized enough so that you can simply push them to this pr || @slyr91 will you work on this in the future? || @stefan-kolb i definitely will give it a shot soon i have just been too busy to dive into this i had finals to deal with and now i am trying to study for a certification so all my free time goes to that as soon as i am done with that i will be returning to this || im getting back into this now and i noticed that the branch this was originally built on maintainable-beta is closed which branch should i apply these changes and proposed improvements to?  || hi on the `master` branch please 😄  || you probably have to rework your code a bit as recently the preferences dialog was transformed to javafx as well  || surpassed by #5024 ||;;;;0;1;;
3942;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327;;0;add version() system function;we could get version information of each node  select * from systemruntimenodes` even though that we might need to have simpler way to get the version info as mysql does;"this works only if all nodes run the same version this is a requirement today but may not be in the future || i dont think we should add this function as martin says we might have mixed versions in the future it works for mysql because its not distributedwe already have this available easily as you noted you could select it using the ""arbitrary"" aggregation it also doesnt seem so common that it needs a convenience functioncan you explain more about the use case / motivation? || as a managed service of presto customer doesnt have right to access presto ui and they often ask what version of presto is used at the service theyre very interest in new functions as presto goes version up we just want to reduce such a question by offering a simple sql function like mysql  || ";;;;0;1;;
3942;1;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327;;3938.0;1x: add completablesafesubscribe option + rxjavaplugins hook support;add option to safely subscribe a `completablesubscriber` / regular `subscriber` and handle `onxxx` failuressee also: #3938naming and whether or not the safe wrapping should be the default is open to discussion;in my opinion safe wrapping should be the default as its the default in `observable` and `single` at least the 3 should behave the same way when using them one should expect them to have a difference in their essential semantics and not in these kind of things || should the tests about error handling plugin in #3938 be here? or we leave it in that pr? || @bryant1410 your pr has a test failure:```rxpluginsrxjavapluginstest > testonerrorwhenusingcompletable failed    javalangassertionerror: expected:<javalangruntimeexception: test onerror> but was:<null>        at orgjunitassertfail(assertjava:93)        at orgjunitassertfailnotequals(assertjava:647)        at orgjunitassertassertequals(assertjava:128)        at orgjunitassertassertequals(assertjava:147)        at rxpluginsrxjavapluginstesttestonerrorwhenusingcompletable(rxjavapluginstestjava:314)``` ||  typo renamed methods || @akarnokd they fail on purpose because i made the test but didnt fix the problem (completable is not calling the error handling plugin) || the methods should be the other way around following `single` and `observable` there should be a single `unsafesubscribe` method which accepts a parameter of type `completablesubscriber` and `subscribe` should be present in the following ways: `subscribe()` `subscribe(action0)` `subscribe(action1<? super throwable> action0)` `subscribe(subscriber)` and `subscribe(completablesubscriber)` || the `subscribe()` methods wrap with `safecomletablesubscriber` similar to how observablesubscribe wraps with `safesubscriber` subscribe(subscriber) is there to allow conversion and cross-type apis to bypass the safety overhead || updated with plugin support || can you cherry-pick the [commit that adds tests for the error handling plugn in `completable` and `single`]( from #3938? || sure || done || the comment `// todo plugin wrapping onsubscribe` in `completable#create` can be deleted as the constructor is already calling the hook now  || removed comment changed to reuse methods added onstart call || please add the missing `@experimental` otherwise  added missing annotations || ;1x: add missing error handler call in completable;;why do you think its missing? in operators only undeliverable exceptions are supposed to be sent to the global handler || im not pretty sure if this call to the handler goes there but it arises from using the retrofits rxjava adapter and realizing that completables endpoints errors are not caught by an error handler while observables and singles are || interesting could be that completable doesnt use safesubscriber which is responsible to deliver some errors thrown by onxxx methods to be sure could you add a unit test that demonstrates how single gets your exception and how completable isnt? || okey || i think this comment is related: [completablejava#l1968]( from what i see `completable` in a different way to `observable` and `single` does calls to the error handler plugin by itself instead of delegating it to a `safecompletablesubscriber` (which btw doesnt exist) why there is no safe subscriber for `completable` and why is this done this way?the call to the handler is missing from `onerror` in `subscribe(action1<? super throwable> action0)` `subscribe(completablesubscriber)` and `subscribe(subscriber)` methods but `subscribe()` and `subscribe(action0)` have it this should be refactored to have just one place for calling the handler as in `observable` and `single` || completable was designed with a modern mindset where end-completablesubscribers are not expected to throw from the onxxx methods but apparently there was no safesubscribe() added to the api the current 1x convention is to have subscribe() do additional safeguards and have an unsafesubscribe() as direct as possible || see #3942 for other forms of handling errors || closing via #3942 ||;1;0;added @experimental annotations;
3947;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct longmath.roundtodouble for values at and near long.max_value  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> in immutabledoublearray and immutablelongarray  use arrays.copyof when expanding the internal array.  in immutableintarray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> implement bigdecimalmath.roundtodouble.  relnotes=add bigdecimalmath.roundtodouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee;;0;moe sync 2020-06-29;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct longmathroundtodouble for values at and near longmax_value3d88ea8f940ecadea86d12f8993ac58f99684e6b-------<p> in immutabledoublearray and immutablelongarray use arrayscopyof when expanding the internal arrayin immutableintarray where we already made this change remove an inconsistent `this`6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e-------<p> implement bigdecimalmathroundtodoublerelnotesadd bigdecimalmathroundtodouble690b2a6b02bddcaab0a4050a92f490546c71e2ee;;;;;1;1;implement bigdecimalmathroundtodoublerelnotesadd bigdecimalmathroundtodouble-------------created by moe: https://githubcom/google/moemoe_migrated_revid318342542;
3947;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct longmath.roundtodouble for values at and near long.max_value  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> in immutabledoublearray and immutablelongarray  use arrays.copyof when expanding the internal array.  in immutableintarray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> implement bigdecimalmath.roundtodouble.  relnotes=add bigdecimalmath.roundtodouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee;;0;pdf exporter - delete xmp actions in the menu bar and the cli option;the idea is to use a new exporter for writting bib entries to pdf metadatait enables users to select entries and export these entries via file->export selected entries to a pdf filethis exporter can also be used within the -o cli infrastructurejava -jar jabrefjar -o   path/articlepdfpdf   path/entriesbibtherefore the xmp cli and the xmp actions in the menu bar can be deletedopinions?-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);"i think having a `pdfexporter` (maybe rename to `xmppdfexporter`?) is a good idea especially for the cli support we get in this way however i would keep the ""write xmp"" action in the menu personally i would never look under ""export"" when i want to to add metadata to my pdfs although you are of course right that technically it is an export of some kind  || i deleted the cli option -xmp (integrated with  because the new xmppdfexporter now enables the cli interaction via the -o exporter mechanismmaybe we can automize the writing to xmp via a preference setting i discussed this yesterday with @stefan-kolb imagine a workflow where i save my bib database and all changed entries are written to the linked pdfs i would try to implement this in another pr || please have a look at the faling exporter test then we can merge || ";;;;1;1; tests;
3947;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct longmath.roundtodouble for values at and near long.max_value  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> in immutabledoublearray and immutablelongarray  use arrays.copyof when expanding the internal array.  in immutableintarray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> implement bigdecimalmath.roundtodouble.  relnotes=add bigdecimalmath.roundtodouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee;;0;partitioned bz2 tables hive_cursor_error (hive connector);having a table with multiple partitions containing bz2 files results in a hive_cursor_errorreproduced under the following builds:- presto 0117 0119- presto 0125 compiled with hadoop 26 ### presto worker error:```2015-09-11t12 00850z error splitrunner-31-68 comfacebookprestoexecutiontaskexecutorerror processing split 20150911_122800_00009_rh7es13-0 {pathhdfs://101621065/user/hadoop/data/adhoc_test/tdate2015-06-23/file_12675_2_2bz2 start0 length45637749 hosts[ip-10-162-9-136ec2internal ip-10-162-8-136ec2internal] databaseadhoc tableadhoc_test forcelocalschedulingfalse partitionnametdate2015-06-23 effectivepredicatetupledomain:all} (start  1441974480709 wall  141 ms cpu  0 ms calls  1): hive_cursor_error: 18002 2015-09-11t12 00859z error splitrunner-43-56 comfacebookprestoexecutiontaskexecutor error processing split 20150911_122800_00009_rh7es13-2 {pathhdfs://101621065/user/hadoop/data/adhoc_test/tdate2015-06-23/file_12675_3_3bz2 start0 length44107370 hosts[ip-10-162-9-136ec2internal ip-10-162-10-137ec2internal] databaseadhoc tableadhoc_test forcelocalschedulingfalse partitionnametdate2015-06-23 effectivepredicatetupledomain:all} (start  1441974480709 wall  150 ms cpu  0 ms calls  1): hive_cursor_error: 6```### presto coordinator error:```2015-09-11t12 00754z error query-execution-9 comfacebookprestoexecutionquerystatemachine query 20150911_122800_00009_rh7es failed comfacebookprestospiprestoexception: hive_cursor_error at comfacebookprestohivegenerichiverecordcursoradvancenextposition(generichiverecordcursorjava:255) at comfacebookprestospirecordpagesourcegetnextpage(recordpagesourcejava:93) at comfacebookprestooperatortablescanoperatorgetoutput(tablescanoperatorjava:239) at comfacebookprestooperatordriverprocessinternal(driverjava:380) at comfacebookprestooperatordriverprocessfor(driverjava:303) at comfacebookprestoexecutionsqltaskexecution$driversplitrunnerprocessfor(sqltaskexecutionjava:587) at comfacebookprestoexecutiontaskexecutor$prioritizedsplitrunnerprocess(taskexecutorjava:505) at comfacebookprestoexecutiontaskexecutor$runnerrun(taskexecutorjava:640) at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142) at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617) at javalangthreadrun(threadjava:745) caused by: javalangarrayindexoutofboundsexception```we have come to the conclusion that it is the combination of bz2 with partitions by testing the following:- created a hive table without partitioning pointing to the same bz2 data - successfully queried- created a hive table partitioned pointing to an uncompressed text copy of the data - successfully queried- we have only been able to reproduce this error against a partitioned table containing bz2 datathis seems to be related to the following closed issues:- #2467 - hive_cursor_error - could not obtain block- #1057 - inconsistent results of presto query with bzip2 compression;we definitely should fix this but in the mean time we recommend using a different compression codec like zlib since bzip2 is extremely slow (and typically does not save much space over zlib) || could you run the query using the cli with `--debug` and post the full stack trace? the coordinator error shows an `arrayindexoutofboundsexception` but not where it happens || @ckovar -- have you been able to reproduce this recently? i created a partitioned table with multiple bz2 files per directory and it worked fine ;;;;0;1;;
3947;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct longmath.roundtodouble for values at and near long.max_value  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> in immutabledoublearray and immutablelongarray  use arrays.copyof when expanding the internal array.  in immutableintarray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> implement bigdecimalmath.roundtodouble.  relnotes=add bigdecimalmath.roundtodouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee;;0;request: completableandthen(completable);to match `completable#andthen(observable<t> next)` and `completable#andthen(single<t> next)` it would be nice if there were an operator like this:`completable#andthen(completable next)`unless there is some other way to achieve the same functionality right now;there is the `endwith` operator for this purpose but you can post a pr renaming it || @akarnokd thanks for the quick reply posted a pr for that just a quick question what about `endwith(observable<t> next)` should that stay or should there also be `andthen` used? || you can deprecate that as well || alright thanks i updated the pr let me know whether i should squash commits and change commit message to match the new updated title or whether youll use the github squash and merge functionality || no need for squashing on your end || closing via #3948 ||;;;;0;1;;
3949;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f;;0;moe sync 2020-06-30;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix converterjava by moving @retainedwith annotation to the correct side of the cyclethe annotation should be placed inside the ""parent"" object and not the ""child"" objectreference: https://developersgooglecom/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/retainedwithrelnotesn/a58ad44a9ac2fde40095f28c504c95c6fed902d1f";;;;;1;1;"fix converterjava by moving @retainedwith annotation to the correct side of the cyclethe annotation should be placed inside the ""parent"" object and not the ""child"" objectreference:  by moe: https://githubcom/google/moemoe_migrated_revid319018701";
3949;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (french);
3949;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f;;0; a typo;;"title this ""fix a typo in precondition message""more generally say ""fix"" or ""add"" not """" or ""added"" i would change the commit message to `fix a typo in scanfilterandprojectoperator`other than the commit message looks good   || ";;;;0;1;;
3949;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-06-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f;;0;1x: javac- and javadoc-related cleanup in components part 1;my eclipse warned me about several hundred javac and javadoc errors which could hide other significant warnings this pr is the first part to fix those warnings note that `observable` and `single` itself is full of those as well (several hundred in each);:+1:thanks for getting this done ||;;;;1;1;1x: javac- and javadoc-related cleanup in components part 1;
3950;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3;;0;moe sync 2020-07-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove unnecessary commenta3084e48846ebddfc9d046670f7be8c0f60e6cb3;;;;;1;1;remove unnecessary commentrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid319265960;
3950;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3;;0;improve search performance;before executing the search there is now a short delayi tested this with the huge file bib and the performance is way betterstill the entry editor has a high load but thats out of scopethx to @halirutan  who pointed me to the code in  #3553        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);does this swallow event before the delay or does it just execute the search at a later time one by one? || @stefan-kolb  the timer is resetted when you type new chars  ||;;;;1;1;move logger to topextract constant;
3950;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3;;0;move rle block to spi;;there is a test failure```testrunlengthencodedblocktest:31->assertrleblock:43->abstracttestblockassertblock:61 expected illegalargumentexception``` || ;;;;0;1;;
3950;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3;;0;1x: javac- and javadoc-related cleanup in components part 2 final;this pr clears the cast warnings introduced by the need to be jdk 9 compilable;i missed a bunch of javadoc problems ||;;;;0;1;;
3954;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hint with the type that  oldfuture  /  newfuture  /  ref  s  future  never contains a value.  being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196;;0;moe sync 2020-07-06;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> hint with the type that `oldfuture` / `newfuture` / `ref`s `future` never contains a valuebeing clear may become slightly more valuable when we put nullness type annotations on this codee655aa8df4bd53a11edf8bb99e8b35f746f54196;;;;;1;1;hint with the type that `oldfuture` / `newfuture` / `ref`s `future` never contains a valuebeing clear may become slightly more valuable when we put nullness type annotations on this coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid319804826;
3954;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hint with the type that  oldfuture  /  newfuture  /  ref  s  future  never contains a value.  being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196;;0;allow any expression as join criteria for inner joins;support multiple negations in conjuncts in join condition clause;@kokosing please take a look || this is corresponding issue  || looks good  || addressed commits and rebased || @cberner can you take a look as you introduced initial non-equi join support? || i think this is too specific to `not` and `like` instead lets solve the general case so that it works for all expressions ill comment on the parts i think need to change although there are probably some details to work out let me know if you have questions || let me know when youve updated! || update in this patch i treat all the expressions in form of `e1 op e2` where symbols from left and right join side are not mixed in neither e1 nor e2 old way e1 and e2 computed as part of output for left and right relationconjuncts which do not match above schema are pushed down as post-join-condition after rewriting to use symbols from left and right relation@cberner please take a look and let me know what do you think || i addressed most of the comments yet i will take a look at #4250 || :+1: replied to your question about `not ax  bx` handling let me know when its ready for me to take another look || i added commit fixing #4250 || this code requires rebase we no longer have `analysisaddinpredicates` method i will complete this on monday or over the weekend || not sure what happened to my comment so posting it again:> what you write makes sense though if i understand correctly changing the code the way you suggest is total rebuild of how join is planned today we would need to add original join condition into joinnode (it is not there right now - only list of equijoinclauses) and then move most of the logic from relationplannervisitjoin to one or more optimizers> > as currently all the detailed planning happens in relationplannervisitjoin i cannot move the normalization into simplifyexpressions as this one is executing after relationplannervisitjoin> > i would rather not put this join planning refactor as part of this pr honestly i am not sure if with my current knowledge i would be able to efficiently implement this at all :)ya lets not make major changes to the planning of join in this pr it shouldnt require adding the original predicate to the joinnode when we do though it can be planned as a join followed by a filter and rely on predicate push down i think the normalization of not not ax  bx can be done pretty easily in the optimizers in the way i mentioned earlier  || @cberner i pushed another changeset after rebase the possible additional which would not bloat the scope are:- remove `normalize` i can do this but i do not feel like it is correct approach unless we reintroduce it in optimizers which not super trivial keeping `normalize` does not help much - but helps a bit and does not pollute code very much- only compute expression on joined relation sides for `` operator and put all other operator in `postjoinconditions` but i would not say that it will make code much simpler we will not need the list of operator types rest would be still needed this change is trivial i can do this if you insist - but here again i do not see a big benefit from this changeplease take a look when you have time and let me know if you want some more changes to this pr || couple minor comments || @martint can you look at the one part i tagged you in? || addressed comments and rebased onto master || can you rebase this on master? || rebased - travis build in progress || ;;;;0;1;;
3954;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hint with the type that  oldfuture  /  newfuture  /  ref  s  future  never contains a value.  being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196;;0;publishsubject has 0 observers in some instances;so i am in `activity a` then i launch `activity b` (which has a custom `imageview` with a `publishsubject` with `setimage*` methods that call `publishsubjectonnext()` )the first time launching `activity b` it works fine `onnext()` gets called and when i subscribe to the `publishsubject` the `action1` `call()` method gets called however subsequent times of launching `activity b`  `onnext()` will get called but inside of that method it attempts to loop through `stateobservers()` which at this point is 0why is that?;can you post a small example? || nevermind i figured it out  i was doing a call to load an image with picasso before i set up the imageview subscription  i dont know why that didnt fail 100% of the time anyway i changed the ordering around and all works fine now ||;;;;0;1;;
3954;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> hint with the type that  oldfuture  /  newfuture  /  ref  s  future  never contains a value.  being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196;;3269;add button-icon for union/intersection in the groups side panel;3269fix display of state for union/intersection in preferencesas we currently unfortunately dont have icons for set intersection/union `set-center` and `set-all`    in the material design font i used the www and the twitter icon to demonstrate the purpose @halirutan  will then try to integrate the correoct  icons in jabref         ( (      because github does not support autolinking there -->(  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);@tobiasdiez  is this now okay? then you could merge it with co-authors  || @tobiasdiez   the issues you m entionend  || i fixed the remaining issues and i am going to merge this one now ||;40 groups: fast access to view options;jabref version 40 on windows 7i often switch between union and intersection modes please return the ability to quickly switch these settings for example you can add them to the global menu of groups;this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version ||;1;0;refactor and extract icon method to view modelmake prefs private;
3956;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix annotation positions in guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> update public suffix data.  the  copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  for this update    8ec74f444b4903871face31bf10139375749358b;;0;moe sync 2020-07-08;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix annotation positions in guava795b357bddc097c87340f0ce573160b2d39e97c6-------<p> update public suffix datathe  copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesfor this update 8ec74f444b4903871face31bf10139375749358b;;;;;1;1;update public suffix datathe  copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesfor this update -------------created by moe: https://githubcom/google/moemoe_migrated_revid320112849;
3956;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix annotation positions in guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> update public suffix data.  the  copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  for this update    8ec74f444b4903871face31bf10139375749358b;;0;bibtex parser - found unbracketed comment;"1 create a new db with this entry2 save bibtex parser complains about ubracketed comment as far as i remember and according to this information here it should be valid:  @koppor  as you have some deeper  insight into the bibtex ""standard"" do you know if jabref behaves here correct?```@comment { bibtex package created by trove national library of australia  }@book{artillery1914a  author         {australia army royal field artillery}  title          {standing orders of the royal australian field artillery : 1914}  year           {1914}  language       {english}  note           {state library of nsw m 35821/a}  publisher      {melbourne : albert j mullett govt printer}  catalogue-url  {  }  subjects       { australia army royal field artillery australia army -- regulations }  timestamp      {2018-04-15}  type           {book book/illustrated}}```";"the entry has two things inside this is currently unsupported at jabrefjabref kind of accepts pasting that string as a whole in the entry table but drops the `@comment`two options:a) accept that this comment is droppedb) enhance jabref to handle `@comment` properly toowe store the comments to an entry at the data structure but imho do not show itwe renamed the ""review"" field to ""comments"" (@linusdietz at #3658) which might get confusing now( sure whether we should migrate comments above an entry into the entry itself i dont think so we should nevertheless offer a field in the entry editor showing ""annotations"" which means the comments above the entryi think this refs  || i would vote for option a when i copy and entry it should be copied complete event with uncommented stuff  but i personally never used that feature that entry was from the data in #3946  || ";;;;0;1;;
3956;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix annotation positions in guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> update public suffix data.  the  copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  for this update    8ec74f444b4903871face31bf10139375749358b;;0;add 0126 release notes;;;;;;0;1;;
3956;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-08;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix annotation positions in guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> update public suffix data.  the  copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  for this update    8ec74f444b4903871face31bf10139375749358b;;0;calling to observabletoblocking() always a bad practice?;"hii have a library which returns observables and i have another one which require to return the data in a synchronous way particularly i’m talking about ok interceptors i need to retrieve the oauth token in order to add it as header but this data comes from an observable ``` javapublic class twitterinterceptor implements interceptor {    @override public response intercept(chain chain) throws ioexception {        request request  chainrequest()        request newrequest  requestnewbuilder()                addheader(""oauth_token"" rxtokengettwittertoken()toblocking()first())                build()        return chainproceed(newrequest)    }}```calling `toblocking()first()` is the only way i can think to solve this problem but i do not know if calling `toblocking()` may have some unexpected effects (i mean i know that this observable resolves its task reading from disk or memory so it is not a really heavy task) but because it seems to be not recommended to use it in production code as a general rulethanks ";`toblocking` gets you out of the reactive world and is generally fine if you have to bridge legacy non-reactive apis with it in your example if you cant change the method to `observable<response> intercept(chain chain)` `toblocking` is acceptable tradeoffhowever if you are in the reactive world and suddenly want to use `toblocking` inside a sequence there are almost always ways to not do that a typical mistake that comes up is something like this:``` javasourcemap(v -> someapi(v)toblocking()first())```instead you should be using any of the `flatmap` `concatmap` etc``` javasourceconcatmap(v -> someapi(v))``` || thanks for the explanation david  || ive got a question about this in android shouldinterceptrequest on a webclient requires a returned value either null or a webresourceresponse i would like to avoid having a blockingfirst() call ideally i would like to pass a reference to the return value into the observable chain and then make the decision on blocking later on but i cant see how to do this  || @tomgallagher almost always is if you have something specific please ask the wider audience of stackoverflow about it || ok thanks  ||;;;;0;1;;
3958;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> declare static types as queue instead of deque.  this may slightly clarify how the object is used.  (i was looking through com.google.common for deque instances that were used as stacks  so i noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb;;0;moe sync 2020-07-10;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> declare static types as queue instead of dequethis may slightly clarify how the object is used(i was looking through comgooglecommon for deque instances that were used as stacks so i noticed this one that was used only as a queue)752dd15c34f206b2103e2bd338610177088c4feb;;;;;1;1;declare static types as queue instead of dequethis may slightly clarify how the object is used(i was looking through comgooglecommon for deque instances that were used as stacks so i noticed this one that was used only as a queue)relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid320498758;
3958;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> declare static types as queue instead of deque.  this may slightly clarify how the object is used.  (i was looking through com.google.common for deque instances that were used as stacks  so i noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb;;0;update dependencies;merge if green;;;;;1;1;extend exception for jacoco;
3958;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> declare static types as queue instead of deque.  this may slightly clarify how the object is used.  (i was looking through com.google.common for deque instances that were used as stacks  so i noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb;;0;server log file effectively hardcoded to /var/log/presto;"although launcher accepts `--launcher-log-file` and `--server-log-file` options the arguments are hardcoded in /etc/initd/presto:```configuration(--launcher-config /usr/lib/presto/bin/launcherproperties --data-dir ""$data_dir"" --node-config ""$node_properties"" --jvm-config /etc/presto/jvmconfig --config /etc/presto/configproperties --launcher-log-file /var/log/presto/launcherlog --server-log-file /var/log/presto/serverlog)```these options should either be removed so that the `nodedata-dir` setting from nodeproperties can be used or have additional settings in nodeproperties which will be observed by /etc/initd/presto";;;;;0;1;;
3958;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> declare static types as queue instead of deque.  this may slightly clarify how the object is used.  (i was looking through com.google.common for deque instances that were used as stacks  so i noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb;;2656.0;1x: just() construction to call the oncreate execution hook;this pr adds the call to `rxjavaobservableexecutionhookoncreate()` to the `just()` - `scalarsynchronousobservable` constructionrelated: #2656;updated javadoc and test ||   ;just(t) : rxjavaobservableexecutionhook not called;when using rxobservablejust(t) the rxjavaobservableexecutionhook is not callthis is not like other just(t) that call rxobservablefrom(iterable<? extends t>);thanks for the report  || @abersnaze since this probably affects work youre doing as well can you take a look at what we need to fix here? it will be anything using the internal scalarsynchronousobservable optimization i think  || sure || what is the status of this issue? ive lost track of the proposed changes to `scalarsynchronousobservable` || see #3958 || closing via #3958 ||;1;0;add javadoc on why not final add test to see behavior can be changed;
3962;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> speed up traverser and cut about 30 lines of code.  when stacked against the unsubmitted walker  before the change:    breadthfirst was roughly on par     preorder/postorder were about 70% slower (1359 vs. 2358)   after adopting the walker impl  the tree traversal preorder/postorder are improved close to walker impl.  there is still about 10% slowness (2405 vs. 2268) remaining  which i suspect is due to iterator being slower than spliterator  because with spliterator  we can tryadvance() once for each element  while with iterator  we have to call both hasnext() and next().  the graph traversal adoption is similar  with about 15% remaining slowness compared to walker (1583 vs. 1338)  which is likely result of spliterator.tryadvance() vs. iterator.hasnext() + next().  did not adopt the walker s breadth-first impl for the following reasons:  1. adopting the walker s breadth-first impl contributed about 10% slowdown compared to the current impl. i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. in the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  on the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  for follow-up: it might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. plus we can reuse code and delete the two existing breadthfirstiterator classes.  i m going to add the benchmark class in the the labs directory to compare between iteration and traverser.  relnotes=optimize traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> add tostring() for sequentialexecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe;;0;moe sync 2020-07-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> speed up traverser and cut about 30 lines of codewhen stacked against the unsubmitted walker before the change:   breadthfirst was roughly on par   preorder/postorder were about 70% slower (1359 vs 2358)after adopting the walker impl the tree traversal preorder/postorder are improved close to walker implthere is still about 10% slowness (2405 vs 2268) remaining which i suspect is due to iterator being slower than spliterator because with spliterator we can tryadvance() once for each element while with iterator we have to call both hasnext() and next()the graph traversal adoption is similar with about 15% remaining slowness compared to walker (1583 vs 1338) which is likely result of spliteratortryadvance() vs iteratorhasnext() + next()did not adopt the walkers breadth-first impl for the following reasons:1 adopting the walkers breadth-first impl contributed about 10% slowdown compared to the current impl i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator in the full traversal benchmark its likely faster than consuming the successor iterator lazilyon the other hand the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazilyfor follow-up: it might be better to go complete lazy for breadth-first even at the cost of 10% slowdown in the full-traversal benchmark plus we can reuse code and delete the two existing breadthfirstiterator classesim going to add the benchmark class in the the labs directory to compare between iteration and traverserrelnotesoptimize traversere81f5012d5207c4f07b49007eeff3d19ae618cf8-------<p> add tostring() for sequentialexecutors worker runnable1facb168dc541be1afa2bf26e15340b0a2e3cffe;;;;;1;1;add tostring() for sequentialexecutors worker runnablerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid320760882;
3962;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> speed up traverser and cut about 30 lines of code.  when stacked against the unsubmitted walker  before the change:    breadthfirst was roughly on par     preorder/postorder were about 70% slower (1359 vs. 2358)   after adopting the walker impl  the tree traversal preorder/postorder are improved close to walker impl.  there is still about 10% slowness (2405 vs. 2268) remaining  which i suspect is due to iterator being slower than spliterator  because with spliterator  we can tryadvance() once for each element  while with iterator  we have to call both hasnext() and next().  the graph traversal adoption is similar  with about 15% remaining slowness compared to walker (1583 vs. 1338)  which is likely result of spliterator.tryadvance() vs. iterator.hasnext() + next().  did not adopt the walker s breadth-first impl for the following reasons:  1. adopting the walker s breadth-first impl contributed about 10% slowdown compared to the current impl. i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. in the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  on the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  for follow-up: it might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. plus we can reuse code and delete the two existing breadthfirstiterator classes.  i m going to add the benchmark class in the the labs directory to compare between iteration and traverser.  relnotes=optimize traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> add tostring() for sequentialexecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (french);
3962;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> speed up traverser and cut about 30 lines of code.  when stacked against the unsubmitted walker  before the change:    breadthfirst was roughly on par     preorder/postorder were about 70% slower (1359 vs. 2358)   after adopting the walker impl  the tree traversal preorder/postorder are improved close to walker impl.  there is still about 10% slowness (2405 vs. 2268) remaining  which i suspect is due to iterator being slower than spliterator  because with spliterator  we can tryadvance() once for each element  while with iterator  we have to call both hasnext() and next().  the graph traversal adoption is similar  with about 15% remaining slowness compared to walker (1583 vs. 1338)  which is likely result of spliterator.tryadvance() vs. iterator.hasnext() + next().  did not adopt the walker s breadth-first impl for the following reasons:  1. adopting the walker s breadth-first impl contributed about 10% slowdown compared to the current impl. i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. in the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  on the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  for follow-up: it might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. plus we can reuse code and delete the two existing breadthfirstiterator classes.  i m going to add the benchmark class in the the labs directory to compare between iteration and traverser.  relnotes=optimize traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> add tostring() for sequentialexecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe;;0;add local parallel to build side outer join;change join operator to support to support local parallel for right andfull outer joins;@cberner this has a complex reference counting system like the other join sources so i thought you would be best to review || minor comments looks good  ||;;;;0;1;;
3962;1;1;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> speed up traverser and cut about 30 lines of code.  when stacked against the unsubmitted walker  before the change:    breadthfirst was roughly on par     preorder/postorder were about 70% slower (1359 vs. 2358)   after adopting the walker impl  the tree traversal preorder/postorder are improved close to walker impl.  there is still about 10% slowness (2405 vs. 2268) remaining  which i suspect is due to iterator being slower than spliterator  because with spliterator  we can tryadvance() once for each element  while with iterator  we have to call both hasnext() and next().  the graph traversal adoption is similar  with about 15% remaining slowness compared to walker (1583 vs. 1338)  which is likely result of spliterator.tryadvance() vs. iterator.hasnext() + next().  did not adopt the walker s breadth-first impl for the following reasons:  1. adopting the walker s breadth-first impl contributed about 10% slowdown compared to the current impl. i think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. in the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  on the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  for follow-up: it might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. plus we can reuse code and delete the two existing breadthfirstiterator classes.  i m going to add the benchmark class in the the labs directory to compare between iteration and traverser.  relnotes=optimize traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> add tostring() for sequentialexecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe;;0;concatmap and subject weirdness;"himaybe i just interpret it wrong but i found some unexpected behaviour``` javaobservablejust(123)concatmap(new func1<integer observable<string>>() { //flatmap <-- gets called 3 times    @override    public observable<string> call(integer integer) {        return behaviorsubjectcreate(""one"") //observablejust(""one"") <-- this gets called 3 times    }})subscribe(new action1<string>() {    @override    public void call(string s) {        //this gets called once :(    }})```the interesting thing is that if i use flatmap instead of concatmap the callback gets called 3 times also if i dont use the subject but the observablejust() it also gets called 3 times what i expect can someone describe me this outcome?";you need a source to complete with `concatmap` before it can move to the next `behaviorsubject` emits its initial value and just waits there never completing || thanks @akarnokd! that makes sense should have figured it out myself ||;;;;0;1;;
3964;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  relnotes=lazier traverser#breadthfirst().  579c06dc9453fc7b09c8b392507cba09e239c363;;0;moe sync 2020-07-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make breadth-first iterators consume the successor iterators lazily and refactor to  cut about 150 lines of coderelnoteslazier traverser#breadthfirst()579c06dc9453fc7b09c8b392507cba09e239c363;;;;;1;1;make breadth-first iterators consume the successor iterators lazily and refactor to  cut about 150 lines of coderelnoteslazier traverser#breadthfirst()-------------created by moe: https://githubcom/google/moemoe_migrated_revid321062203;
3964;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  relnotes=lazier traverser#breadthfirst().  579c06dc9453fc7b09c8b392507cba09e239c363;;0;fix xmp exporter;solves 338](  manually tested changed features in running jabrefchanged the behavior of the xmp exporter remove the ?xpacket tags with xmp metadata in dublin core format to enable users to use the xmp files exported by jabref with the xmpincl latex package also adressed the month parsing problem implemented a workaround and created an issue for the date section within xmpbox (https://issuesapacheorg/jira/browse/pdfbox-4196);"thank you for the work! i got a minor comment on the ""january 1st"" hack: there should be a comment on that or a [madr]( linked via `// adr(number)` 😀  can be done in leisure time 😃  || ";;;;1;1;checkstyle ii;
3964;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  relnotes=lazier traverser#breadthfirst().  579c06dc9453fc7b09c8b392507cba09e239c363;;0;i am trying to configure presto 0119 on emr and i am getting the following error when running /launcher run;2015-11-13t20 24532z        info    main    comfacebookprestoserverprestoserver  server started 2015-11-13t20 29603z        warn       comfacebookprestomemoryremotenodememory     error fetching memory info from  javautilconcurrenttimeoutexception        at comgooglecommonbasethrowablespropagate(throwablesjava:160)        at ioairlift        at ioairlift        at ioairlift        at ioairlift        at ioairlift        at orgeclipsejettyclientresponsenotifiernotifycomplete(responsenotifierjava:193)        at orgeclipsejettyclientresponsenotifiernotifycomplete(responsenotifierjava:185)        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyclient        at orgeclipsejettyioabstractconnectiononfillinterestedfailed(abstractconnectionjava:173)        at orgeclipsejettyioabstractconnection$readcallback$1run(abstractconnectionjava:582)        at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:635)        at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:555)        at javalangthreadrun(threadjava:745)caused by: javautilconcurrenttimeoutexception         6 more;this discussion might contain some useful info  || closing this issue if you have further questions ask on the presto-users mailing list ||;;;;0;1;;
3964;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  relnotes=lazier traverser#breadthfirst().  579c06dc9453fc7b09c8b392507cba09e239c363;;0;1x: observeon + immediate scheduler to be a request rebatcher;"this pr removes the `immediate()` scheduler ""optimization"" from `observeon` and treats it as a common scheduler since `observeon` has a stable request pattern this turns it into a rebatching operator no matter what the downstream requests the upstream will requests of the specified size (with 25% as low water mark ie replenishment after 75%) since `immediate` is synchronous this will run the drain loop non-reentrant on the caller threadi found this mode of operation very handy in my reactive-rpc prototype and a simple streaming echo rpc call it prevents going unbounded and bloating the message sender threads:``` java// remotepublic observable<integer> echo(rpcstreamcontext<?> ctx observable<integer> in) {   return inobserveon(schedulersimmediate() 16)}// clientapiecho(observablerange(1 100_000))observeon(schedulersimmediate() 32)subscribe(systemout::println throwable::printstacktrace)```";great! what about adding a method to `observable` that calls it so this functionality is discoverable? say `observablebatchrequests(n)`? || that could be a follow-up pr if this gets accepted || why not just adding a `batchrequests` operator instead of changing the existing behavior? this probably affects some users applications if they depends on the optimizationsecondly using `observeon(schedulersimmediate() 16)` and assuming how it implements is not reliable this is not an api contract and it could be changed in any time || the alternative requires duplicating code which triggers more outcry usually || i think you can add a flag (eg disallowoptimization) to `operatorobserveon` and use it for `batchrequests` ||;;;;0;1;;
3967;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> unconditionally call setexception for rejectedexecutionexception.  under jdk11  the write to thrownbyexecute / thrownfromdelegate is upsetting tsan. i *suspect* that tsan is incorrect (and that it is likely to identify the same  problem  in other code).  however  we years ago questioned whether the code i m removing served any real purpose (fixes  ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current tsan failure.  the code that we re running in the executor is under our control. (that is  we re the ones who implement runnable.run().) we re catching exceptions (and thus any rejectedexecutionexception) in the obvious places. occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op).  the one(?) exception to that is that interruptibletask.run() can call currentthread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. at some point  though  i throw my hands up and say  whatever.   (if the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directexecutor. but i note that rejectionpropagatingexecutor  at least  already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely). so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. i think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> add @donotmock to traverser.  relnotes=add @donotmock to traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9;;0;moe sync 2020-07-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> unconditionally call setexception for rejectedexecutionexceptionunder jdk11 the write to thrownbyexecute / thrownfromdelegate is upsetting tsan i *suspect* that tsan is incorrect (and that it is likely to identify the same ""problem"" in other code)however we years ago questioned whether the code im removing served any real purpose(fixes  now seems like a good time to get rid of it and at minimum hopefully eliminate the current tsan failurethe code that were running in the executor is under our control (that is were the ones who implement runnablerun()) were catching exceptions (and thus any rejectedexecutionexception) in the obvious places occasionally we do call listeners but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op)the one(?) exception to that is that interruptibletaskrun() can call currentthreadinterrupt() which we learned a few years ago can call arbitrary code through nio callbacks at some point though i throw my hands up and say ""whatever""(if the interrupt were to be a problem it would have to be with an executor that executes tasks inline like directexecutor but i note that rejectionpropagatingexecutor at least already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely) so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again only in concert with nio interrupt callbacks i think)238c383c13d05a75bb6b590f1542e5f4b11f0634-------<p> add @donotmock to traverserrelnotesadd @donotmock to traverser83e545cd90bbd64b71ac66ff51267bca670bf8f9";;;;;1;1;add @donotmock to traverserrelnotesadd @donotmock to traverser-------------created by moe: https://githubcom/google/moemoe_migrated_revid321469875;
3967;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> unconditionally call setexception for rejectedexecutionexception.  under jdk11  the write to thrownbyexecute / thrownfromdelegate is upsetting tsan. i *suspect* that tsan is incorrect (and that it is likely to identify the same  problem  in other code).  however  we years ago questioned whether the code i m removing served any real purpose (fixes  ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current tsan failure.  the code that we re running in the executor is under our control. (that is  we re the ones who implement runnable.run().) we re catching exceptions (and thus any rejectedexecutionexception) in the obvious places. occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op).  the one(?) exception to that is that interruptibletask.run() can call currentthread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. at some point  though  i throw my hands up and say  whatever.   (if the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directexecutor. but i note that rejectionpropagatingexecutor  at least  already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely). so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. i think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> add @donotmock to traverser.  relnotes=add @donotmock to traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9;;0;function not registered error;"ive created a udf called ortrait the function takes two bigints and does a bitwise or operation and returns a boolean ive compiled the jar copied it to all my nodes and restarted the presto server service when i attempt to call the function i get strange results from the presto-cli when i run:select \* from t02918matrix3 where ortrait(home40)  truei get the following error:query 20151113_194947_00008_9gke9 failed: unexpected parameters (varchar bigint) for function ortrait expected: ortrait(bigint bigint) the error leads me to believe the function has definitely been registered when i cast the home column to a bigint list below i get the ""function not register"" errorselect \* from t02918matrix3 where andtrait(cast(coalesce(home0) as bigint) 40)  trueany suggestions on how to correct this issue?";"the first query calls `ortrait` the second one calls `andtrait` is that intentional? || sorry that was a copy and paste mistake both functions exhibit the same error though the ortrait does a bitwise or operation and the ""andtrait"" does an bitwise and operation || here is the code for both functions im guessing the ""function is not registered"" is a catch all type of message @description(""performs bitwise or operation of bitfamily and bittrait to determine if family contains trait"")    @scalarfunction(""ortrait"")    @sqltype(standardtypesboolean)    @nullable    public static boolean ortrait(@nullable @sqltype(standardtypesbigint) long bitfamily @nullable @sqltype(standardtypesbigint) long bittrait)    {        return (bitfamily | bittrait) > 0    }```@description(""performs bitwise and operation of bitfamily and bittrait to determine if family contains trait"")@scalarfunction(""andtrait"")@sqltype(standardtypesboolean)@nullablepublic static boolean andtrait(@nullable @sqltype(standardtypesbigint) long bitfamily @nullable @sqltype(standardtypesbigint) long bittrait){    return (bitfamily & bittrait)  bittrait}``` || how are you registering the functions? || im using the  library then i placed the jar file  in the ""/usr/lib/presto/plugin/udfs/"" directory on each of my nodes i then restarted the presto-server several times a few time i restarted the server using ""bin/launcher run"" so that i could check for error message it took a few times until there were no errors in the logs it appears that the function has definitely been registered because when i run the query below i get a the correct result it must be something wrong with the data in the table im guessing? select *andtrait(102) from t02918matrix3 limit 10 || can you paste the full error for the query that uses cast(xxx as bigint)?also can if run your cli with --debug it will print the full stack trace can you paste that too? || i didnt know about the --debug flag so thank you at least it helps figure out where to start trying to troubleshoot he is the output:```17 52 [presto-udfs (master)] $ presto-cli --debug --server localhost:8889 --catalog hive --schema t029182015-11-13t17 07806-0500     info   main    ioairliftloglogging  logging to stderr2015-11-13t17 07965-0500     info   main    orgeclipsejettyutillog  logging initialized @422mspresto:t02918> select * from t02918matrix3 where andtrait(cast(coalesce(home0) as bigint) 40)  truequery 20151113_222642_00010_9nujm failed 5 nodes 1 total 0 done (000%)cpu time: 00s total     0 rows/s     0b/s 0% activeper node: 00 parallelism     0 rows/s     0b/sparallelism: 000:00 [0 rows 0b] [0 rows/s 0b/s]query 20151113_222642_00010_9nujm failed: function andtrait not registeredcomfacebookprestospiprestoexception: function andtrait not registered    at comfacebookprestometadatafunctionregistryresolvefunction(functionregistryjava:473)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitfunctioncall(expressionanalyzerjava:690)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitfunctioncall(expressionanalyzerjava:215)    at comfacebookprestosqltreefunctioncallaccept(functioncalljava:70)    at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorprocess(expressionanalyzerjava:234)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorgetoperator(expressionanalyzerjava:839)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitcomparisonexpression(expressionanalyzerjava:373)    at comfacebookprestosqlanalyzerexpressionanalyzer$visitorvisitcomparisonexpression(expressionanalyzerjava:215)    at comfacebookprestosqltreecomparisonexpressionaccept(comparisonexpressionjava:77)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyze(expressionanalyzerjava:188)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyzeexpressions(expressionanalyzerjava:1018)    at comfacebookprestosqlanalyzerexpressionanalyzeranalyzeexpressionswithinputs(expressionanalyzerjava:1004)    at comfacebookprestosqlanalyzerexpressionanalyzergetexpressiontypesfrominput(expressionanalyzerjava:970)    at comfacebookprestosqlplannerlocalexecutionplanner$visitorvisitscanfilterandproject(localexecutionplannerjava:858)    at comfacebookprestosqlplannerlocalexecutionplanner$visitorvisitfilter(localexecutionplannerjava:776)    at comfacebookprestosqlplannerlocalexecutionplanner$visitorvisitfilter(localexecutionplannerjava:403)    at comfacebookprestosqlplannerplanfilternodeaccept(filternodejava:71)    at comfacebookprestosqlplannerlocalexecutionplannerplan(localexecutionplannerjava:235)    at comfacebookprestoexecutionsqltaskexecution<init>(sqltaskexecutionjava:165)    at comfacebookprestoexecutionsqltaskexecutioncreatesqltaskexecution(sqltaskexecutionjava:114)    at comfacebookprestoexecutionsqltaskexecutionfactorycreate(sqltaskexecutionfactoryjava:73)    at comfacebookprestoexecutionsqltaskupdatetask(sqltaskjava:250)    at comfacebookprestoexecutionsqltaskmanagerupdatetask(sqltaskmanagerjava:263)    at comfacebookprestoservertaskresourcecreateorupdatetask(taskresourcejava:115)    at sunreflectgeneratedmethodaccessor206invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:497)    at orgglassfishjerseyservermodelinternalresourcemethodinvocationhandlerfactory$1invoke(resourcemethodinvocationhandlerfactoryjava:81)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcher$1run(abstractjavaresourcemethoddispatcherjava:151)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherinvoke(abstractjavaresourcemethoddispatcherjava:171)    at orgglassfishjerseyservermodelinternaljavaresourcemethoddispatcherprovider$responseoutinvokerdodispatch(javaresourcemethoddispatcherproviderjava:152)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherdispatch(abstractjavaresourcemethoddispatcherjava:104)    at orgglassfishjerseyservermodelresourcemethodinvokerinvoke(resourcemethodinvokerjava:387)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:331)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:103)    at orgglassfishjerseyserverserverruntime$1run(serverruntimejava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:267)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:315)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:297)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:267)    at orgglassfishjerseyprocessinternalrequestscoperuninscope(requestscopejava:297)    at orgglassfishjerseyserverserverruntimeprocess(serverruntimejava:254)    at orgglassfishjerseyserverapplicationhandlerhandle(applicationhandlerjava:1030)    at orgglassfishjerseyservletwebcomponentservice(webcomponentjava:373)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:381)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:344)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:221)    at orgeclipsejettyservletservletholderhandle(servletholderjava:808)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1669)    at orgeclipsejettyservletsuseragentfilterdofilter(useragentfilterjava:83)    at orgeclipsejettyservletsgzipfilterdofilter(gzipfilterjava:300)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1652)    at orgeclipsejettyservletservlethandlerdohandle(servlethandlerjava:585)    at orgeclipsejettyserverhandlercontexthandlerdohandle(contexthandlerjava:1127)    at orgeclipsejettyservletservlethandlerdoscope(servlethandlerjava:515)    at orgeclipsejettyserverhandlercontexthandlerdoscope(contexthandlerjava:1061)    at orgeclipsejettyserverhandlerscopedhandlerhandle(scopedhandlerjava:141)    at orgeclipsejettyserverhandlerhandlercollectionhandle(handlercollectionjava:110)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverhandlerstatisticshandlerhandle(statisticshandlerjava:159)    at orgeclipsejettyserverhandlerhandlerlisthandle(handlerlistjava:52)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:97)    at orgeclipsejettyserverserverhandle(serverjava:499)    at orgeclipsejettyserver    at orgeclipsejettyserver    at orgeclipsejettyioabstractconnection$2run(abstractconnectionjava:540)    at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:635)    at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:555)    at javalangthreadrun(threadjava:745)presto:t02918> select andtrait(102) from t02918matrix3 limit 10 _col0 ------- true   true   true   true   true   true   true   true   true   true  (10 rows)query 20151113_222815_00011_9nujm finished 5 nodes 97 total 2 done (206%)cpu time: 576s total   575 rows/s 912kb/s 21% activeper node: 26 parallelism 149k rows/s  237kb/sparallelism: 1300:04 [331k rows 513mb] [747k rows/s 116mb/s]presto:t02918> ``` || based on that exception it would appear that some worker doesnt have the function available (it happens in `localexecutionplanner`) if you open the web ui on  you should be able to track down which machine caused the failure (there will be a task marked as failed in the list of tasks for the query) || the most probable reason `select andtrait(102) from t02918matrix3 limit 10` works is that the function is constant-folded in the coordinator and the query execution only has to return a constant value you can see that by running explain on that query || if i do a ""bin/launcher restart"" on the coordinator does that also restart the workers also? or do i need to do a restart on each worker?  the jar file with the udfs are on each worker  || no you need to restart each worker independently || i restarted each worker and now the functions are working great thanks for putting up with a presto newbie  || great! glad to hear its working now || ";;;;0;1;;
3967;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> unconditionally call setexception for rejectedexecutionexception.  under jdk11  the write to thrownbyexecute / thrownfromdelegate is upsetting tsan. i *suspect* that tsan is incorrect (and that it is likely to identify the same  problem  in other code).  however  we years ago questioned whether the code i m removing served any real purpose (fixes  ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current tsan failure.  the code that we re running in the executor is under our control. (that is  we re the ones who implement runnable.run().) we re catching exceptions (and thus any rejectedexecutionexception) in the obvious places. occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op).  the one(?) exception to that is that interruptibletask.run() can call currentthread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. at some point  though  i throw my hands up and say  whatever.   (if the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directexecutor. but i note that rejectionpropagatingexecutor  at least  already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely). so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. i think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> add @donotmock to traverser.  relnotes=add @donotmock to traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9;;0;error when zipping 2 publish subjects asynchroneously;hiim having some weird problem ive tried to simplifytake for instance the following code:``` java        for (int i  0 i < 500 i++) {            subject<integer integer> s1  publishsubject<integer> create()toserialized()            subject<integer integer> s2  publishsubject<integer> create()toserialized()            observablezip(s1single() s2tolist() (a b) -> null)                subscribeon(schedulersio())                subscribe(                    j -> {}                    t -> {                        tprintstacktrace()                    })            s1onnext(1)            s2onnext(1)            s1oncompleted()            s2oncompleted()        }        threadsleep(5000)```im often getting the following error:```javautilnosuchelementexception: sequence contains no elements    at rxinternaloperatorsoperatorsingle$parentsubscriberoncompleted(operatorsinglejava:131)    at rxinternaloperatorsnotificationliteaccept(notificationlitejava:140)    at rxsubjectssubjectsubscriptionmanager$subjectobserveraccept(subjectsubscriptionmanagerjava:318)    at rxsubjectssubjectsubscriptionmanager$subjectobserveremitloop(subjectsubscriptionmanagerjava:291)    at rxsubjectssubjectsubscriptionmanager$subjectobserveremitfirst(subjectsubscriptionmanagerjava:270)    at rxsubjectspublishsubject$1call(publishsubjectjava:66)    at rxsubjectspublishsubject$1call(publishsubjectjava:62)    at rxsubjectssubjectsubscriptionmanageradd(subjectsubscriptionmanagerjava:95)    at rxsubjectssubjectsubscriptionmanagercall(subjectsubscriptionmanagerjava:60)    at rxsubjectssubjectsubscriptionmanagercall(subjectsubscriptionmanagerjava:35)    at rxobservableunsafesubscribe(observablejava:8172)    at rxsubjectsserializedsubject$1call(serializedsubjectjava:45)    at rxsubjectsserializedsubject$1call(serializedsubjectjava:41)    at rxobservable$2call(observablejava:162)    at rxobservable$2call(observablejava:154)    at rxobservableunsafesubscribe(observablejava:8172)    at rxinternaloperatorsoperatorzip$zipstart(operatorzipjava:209)    at rxinternaloperatorsoperatorzip$zipsubscriberonnext(operatorzipjava:156)    at rxinternaloperatorsoperatorzip$zipsubscriberonnext(operatorzipjava:122)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:46)    at rxinternalutilscalarsynchronousobservable$1call(scalarsynchronousobservablejava:35)    at rxobservable$2call(observablejava:162)    at rxobservable$2call(observablejava:154)    at rxobservableunsafesubscribe(observablejava:8172)    at rxinternaloperatorsoperatorsubscribeon$1$1call(operatorsubscribeonjava:62)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)    at javautilconcurrentfuturetaskrun(futuretaskjava:266)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:180)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:293)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)    at javalangthreadrun(threadjava:745)```im not sure whats going wrong here it would seem that from time to time the `s1` subject receives the oncompleted before the onnexti saw that removing `subscribeon(schedulersio())` fixes this but id like to understand whydepending on that i could come up with an other solution to what im trying to dothanks;because you subscribe on a different thread the two subjects dont have any subscriber yet when you call onxxx on them dropping the values once zip can subscribe both may end up being completed and thus the first source will signal the `nosuchelementexception`  || indeed i can see it now thanks for the explanationso if i understand this well using a `replaysubject` seems to be the way to go if i want to keep this order of code ? || yes || thanks alot! ||;;;;0;1;;
3967;0;1;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> unconditionally call setexception for rejectedexecutionexception.  under jdk11  the write to thrownbyexecute / thrownfromdelegate is upsetting tsan. i *suspect* that tsan is incorrect (and that it is likely to identify the same  problem  in other code).  however  we years ago questioned whether the code i m removing served any real purpose (fixes  ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current tsan failure.  the code that we re running in the executor is under our control. (that is  we re the ones who implement runnable.run().) we re catching exceptions (and thus any rejectedexecutionexception) in the obvious places. occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setfuture (after which a stray setexception(rejectedexecutionexception) would be a no-op).  the one(?) exception to that is that interruptibletask.run() can call currentthread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. at some point  though  i throw my hands up and say  whatever.   (if the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directexecutor. but i note that rejectionpropagatingexecutor  at least  already defends against this for directexecutor itself (by skipping the rejectedexecutionexception logic entirely). so the danger exists only with combinedfutureinterruptibletask or with a non-directexecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. i think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> add @donotmock to traverser.  relnotes=add @donotmock to traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9;;3854;fix ebookde;refs #3854unfortunately not a very clean fix but it is fine againusing the normal inputstream does not return anything probably as it is detected as automated crawler?the interface with inputstream is just not really fitting here;the isbn fetcher tries ebookde first and if no result is found it switches to the chimbori/amazon fetcher is this still valid? || yes ||;fetcher broken without anyone noticing;as we have deactivated the tests in travis we do not notice that they failright now a lot of them are actually broken again i think this is not a good situation if we are not aware of thisthis is a major functionality for us even if we hide such errors from the user the results will not be as good as expected when the fetchers are brokenneed to discuss possibilities in the dev call-  sciencedirect-  openaccessdoi-  isbnfetcher just returns wrong result because ebbokde is broken-  viaebook inputstream seems to be empty via code call browser result is fine #3967-  mathscinet no subscription-  zbmath only available with subscrption (https://zbmathorg/subscription/);@tobiasdiez did you have a chance to test the remaining two fetchers? || mathscinet works but ive no longer a subscription to zbmath ||;1;0;"revert ""use url download""this reverts commit 02d12e5e4f4a04f03bf9cb61fd961878f7fda9a2";
3970;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> warn about stack overflows from directexecutor  add more warnings (including on abstractfuture.set* and cancel)  and move warnings to directexecutor itself.  e649a158d3202beefd3375c1774db90a31228708;;0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> warn about stack overflows from directexecutor add more warnings (including on abstractfutureset* and cancel) and move warnings to directexecutor itselfe649a158d3202beefd3375c1774db90a31228708;;;;;1;1;warn about stack overflows from directexecutor add more warnings (including on abstractfutureset* and cancel) and move warnings to directexecutor itselfrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid322398596;
3970;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> warn about stack overflows from directexecutor  add more warnings (including on abstractfuture.set* and cancel)  and move warnings to directexecutor itself.  e649a158d3202beefd3375c1774db90a31228708;;0;add release notes for new tupledomain modifications;;;;;;0;1;;
3970;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> warn about stack overflows from directexecutor  add more warnings (including on abstractfuture.set* and cancel)  and move warnings to directexecutor itself.  e649a158d3202beefd3375c1774db90a31228708;;0;release 116 preparations;### version 116 - june 18 2016 ([maven]( api enhancements- [pull 3934]( `testsubscriber` extra info on assertion failures- [pull 3948]( add `completableandthen(completable)`- [pull 3942]( add `completablesubscribe` to be safe add `unsafesubscribe` option + `rxjavaplugins` hook support - [pull 3936]( promote `unicastsubject` to be a standard+experimental `subject`- [pull 3971]( add `observablerebatchrequests` operator to change and stabilize request amounts of the downstream- [pull 3986]( add `schedulersreset()` for better testingrequires review :+1:- [pull 3959]( add `scan` with an initial factory callback - [pull 3918]( `replaysubject` now supports backpressure #### api deprecations- [pull 3948]( deprecate `completableendwith()` in favor of `andthen()`#### performance enhancements- [pull 3470]( `replay` request coordination reduce overhead#es- [pull 3924]( fix `rxringbuffer`-pool depending on the `computation` scheduler - [pull 3922]( fix `using()` resource cleanup when factory throws or being non-eager - [pull 3941]( fix `singleflatmap` not composing subscription through - [pull 3958]( fix `just()` construction to call the `oncreate` execution hook - [pull 3977]( use the correct `throwable` to set the cause for `compositeexception`- [pull 4005]( fix spsc queues reporting not empty but then poll() returns null;@akarnokd ping me after you merge #3470 ill do the release || any chance for pull #3918: replaysubject now supports backpressure? || reviewing ||  closing via #4008 ||;;;;0;1;;
3970;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> warn about stack overflows from directexecutor  add more warnings (including on abstractfuture.set* and cancel)  and move warnings to directexecutor itself.  e649a158d3202beefd3375c1774db90a31228708;;3966;fixieee;3966  followup from my previous prnow document links  in the format ` are supported tooand i also tested the paper linked in the issue from university network that works fine too         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;problems finding fulltext for ieeexplore;issues with ieee full-text importeri have tested the latest master version from  on windows 7 and the following problem is encounteredjabref version 42-dev on windows 7 enterprise (build 7601 service pack:1)steps to reproduce:1 use jabref on a network with full-text access to ieeexplore articles (such as a universitys network)2 start a new library with the following bibtex entry```@inproceedings{morabito2017author  {morabito bruno and klein reinhardt and findeisen rolf}booktitle  {2017 american control conference (acc)}doi  {1023919/acc20177963481}isbn  {978-1-5090-5992-8}month  {may}pages  {3457--3462}publisher  {ieee}title  {{real time feasibility and performance of moving horizon estimation for li-ion batteries based on first principles electrochemical models}}url  {  {2017}}```3  select this reference entry within jabref and hit ```alt``` + ```f7``` or go to ```quality -> look up full text documents```4 after a while the following pop-up dialog box opens```no full text document found for entry morabito2017```5 expected behavior: navigate to this same ```url   this works perfectly fine and full-text pdf can be manually downloaded  the auto downloader should have obtained this pdf and linked it to the citation entry;the test for open access articles such as  workthere should be no difference for the other articles as long as you really have accessit is hard to debug for me as i dont have ieee access at university @jabref/developers anyone of you has access? || i can reproduce this error for me the ieee fetcher tests fail when i am connected using university vpnthe html page  i get from the url downloader talks about missing cookie support i will see if i can fix that  || thank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from  and report back if it works for you || no please read the text very carefullyi have explicitly mentioned that i am using the latest developmental version the problem still persists please reopen this issue || we just merged a pull request fixing it || @krishnakumarg1984  yes i know but i just merged the code into the master branch the development build gets automatically updated and built by our ci servers whenever someone commits to the master branch this usually takes a couple of minutes the version string contains the first part of the commit id  (help-> about)  || ah i am so sorry for not correctly interpreting what you said i shall try the latest development build and report back sorry for the mild confusion in my last post || @siedlerchr  @stefan-kolb we may have to reopen this issuei just tried with the latest build>>jabref 42-dev--snapshot--2018-04-20--master--8bbc40e13>windows 7 61 x86 >java 180_161from my universitys network and same error pop-up message persists   curiously the event log in jabref is empty i wonder why #3968 says the problem is only with vpn access? i am currently physically on the campus library on a windows 7 machine hard-wired to the network with a lan cable  just to confirm that this is indeed a persisting bug there is no issue with full-text access to this article from a standard browser pointed to the url   || i think @krishnakumarg1984 is right and the issue still persist just looking at the code never going to match ` || hmm thats odd i will look into that again tomorrow  || @krishnakumarg1984  i just merged the fix which supports those the ieee document urls you have like in your entry  and i also tested your entry with university access and worked for me so i would like you to test this again || @siedlerchr  thank you i shall go to university to check this out will report back soon || woohoo you guys are amazing i just tried the latest master-build from my universitys network and can confirm that this is now fixed  was able to download the full-text of the bibtex entry for which the issue was opened thank you for accepting and pro-actively working to fix this issue#### version info of jabref build used:>jabref 42-dev--snapshot--2018-04-21--master--5c664e1d2>windows 7 61 x86 >java 180_161 ||;1;0;fix checkstyle;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;3964.0;1x: request rebatch operator;this is a follow-up on #3964 but with a separate operator on `observable`; @abersnaze @stealthcode you had some use cases for this any objections? || the reuse of the observeon is interesting but couldnt it be done without the allocation of a queue? || if the downstream request is unbounded and the downstream has caught up then the queue can be skipped in this case `observeon` cant be reused anymore and a custom drain logic has to be implementedotherwise the upstream emissions have to be stored temporarily for an underrequesting downstream ||  i know that @abersnaze still had reservations about this i think that this should not be using `observeon` || my concern is this - if @abersnaze implemented the batching functionality then why wouldnt we use that? the queue in observeon scheduling creates a layer of indirection that seems unnecessary  || remember this started out as a change to `observeon` to not ignore the `immediate` scheduler but people wanted this behavior exposed behind a proper name || thanks for reminding me of the context of this work it seems like we have 2 implementations for the same functionality i think @abersnaze and i agree that the 2 features of request batching and request valve type functionality could be composed however i think that using `observeon` for this functionality is not necessarily the best way to accomplish this  || i personally would be okay with either implementation i think `observeon` is a nice choice because of the request management but would prefer it more if there wasnt a queue but realistically i think the choice is fine also its interesting to note that users are gravitating more and more to taking direct control over the `requester-producer` interactions  || for example this pr does something similar but exactly n (could be modified to have optional 25%) and without a queue #3781  ||;1x: observeon + immediate scheduler to be a request rebatcher;"this pr removes the `immediate()` scheduler ""optimization"" from `observeon` and treats it as a common scheduler since `observeon` has a stable request pattern this turns it into a rebatching operator no matter what the downstream requests the upstream will requests of the specified size (with 25% as low water mark ie replenishment after 75%) since `immediate` is synchronous this will run the drain loop non-reentrant on the caller threadi found this mode of operation very handy in my reactive-rpc prototype and a simple streaming echo rpc call it prevents going unbounded and bloating the message sender threads:``` java// remotepublic observable<integer> echo(rpcstreamcontext<?> ctx observable<integer> in) {   return inobserveon(schedulersimmediate() 16)}// clientapiecho(observablerange(1 100_000))observeon(schedulersimmediate() 32)subscribe(systemout::println throwable::printstacktrace)```";great! what about adding a method to `observable` that calls it so this functionality is discoverable? say `observablebatchrequests(n)`? || that could be a follow-up pr if this gets accepted || why not just adding a `batchrequests` operator instead of changing the existing behavior? this probably affects some users applications if they depends on the optimizationsecondly using `observeon(schedulersimmediate() 16)` and assuming how it implements is not reliable this is not an api contract and it could be changed in any time || the alternative requires duplicating code which triggers more outcry usually || i think you can add a flag (eg disallowoptimization) to `operatorobserveon` and use it for `batchrequests` ||;1;0;fix javadoc add experimental;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;0;add rfc standard fetcher;while all rfcs have a doi the doi import does not correspond to the real bibtex dataimplementation is totally easy: just add the rfc number in the url:- search input should accept number only and rfc followed by  numberthe ietf datatracker tool has a direct export for bibtex //datatrackerietforg/doc/rfc1945/https://datatrackerietforg/doc/rfc1945/bibtex/;"id like to try my hand at this but im confused on where to start are there any specific classes or documentation that i should look at?  || hithanks for your interest for this i recommend you take a look at the doi fetcher or other fetchers they reside in `orgjabrefguiimporter` ` and orgjabreflogicimporterfetcher `for some general information i suggest taking a look at the contribution guidelines there a also some code howtos and overview of our code structure linked: any further questions just ask here or on our  [gitter chat]( || @siedlerchr to be honest the issue description reads a bit cryptic do you propose to add an id-based fetcher for those ""rfc numbers""? ||  yes an rfc id based fetcher i enter the rfc number or rfc 123 and i get the bibtex entry  || @quunii i am interested in helping as well this would be my first contribution to open source i started to parse through the problem and ive already made a solution i assume this is bad open source etiquette since i didnt mention my interest in the first place? :/ maybe we can work together to finish it?my solution adds a new entry type to the id-based entry generator list per @siedlerchrs clarified request i added a new rfc fetcher class a test class and added the rfc fetcher to the list of id-based entry generators so that it appears in the dropdown the entry can accept an id with or without the ""rfc"" prefixshould i just submit the pull request? || @jacksonrya go ahead and dont worry about it  || ";;;;0;1;;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;0;extract abstractqueryexecution;;it turns out i can use `datadefinitionexecution` directly for implementing `call` (not sure why i thought i needed a separate `queryexecution`) but this does simplify `datadefinitionexecution` and make it much easier to read thoughts on keeping this refactoring? || i generally dont like pulling code into a superclass for the purpose of reusing it especially if its code thats expected to be thread-safe and concurrent-safe if anything id make it a delegate ||;;;;0;1;;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;3908.0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`1ec90b045a45b4603ea5bd1c296f284ec1c438db;;#1315 add awaitterminationuninterruptibly() for executorservice - m…; kindly review the changes and suggest editsthanksnisarg;     i signed it!on thu may 21 2020 at 7:09 pm googlebot <notifications@githubcom> wrote:>  >>>> 📝 *please visit  < to sign*>>>>  > ------------------------------>> what to do if you already signed the cla individual signers>>>>    - its possible we dont have your github username or youre using a>>    different email address on your commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    < corporate signers>>>>    - your company has a point of contact who decides which employees are>>    authorized to participate ask your poc to be added to the group of>>    authorized contributors if you dont know who your point of contact is>>    direct the google project maintainer to go/cla#troubleshoot (public>>    version <    - the email used to register you as an authorized contributor must be>>    the email used for the git commit check your existing cla data>>    < and verify that your email>>    is set on your git commits>>    <    - the email used to register you as an authorized contributor must>>    also be attached to your github account>>    <  *googlers: go here>> < for more info*>>>> —>> you are receiving this because you authored the thread>> reply to this email directly view it on github>> < or>> unsubscribe>> < >>> || ;1;0;add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`-------------created by moe: https://githubcom/google/moemoe_migrated_revid322581454;
3971;0;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 fixes #1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db;;1315.0;moe sync 2020-07-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`1ec90b045a45b4603ea5bd1c296f284ec1c438db;;add awaitterminationuninterruptibly() for executorservice; the interface executorservice provides the method awaittermination(longtimeunit) it would be nice to have ""uninterruptibly"" pendats in the uninterruptibles-class like:boolean awaitterminationuninterruptibly(executorservice executor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsplong timeout&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsptimeunit unit)//await the termination till the end of all daysvoid awaitterminationuninterruptibly(executorservice executor)"; _issue #1595 has been merged into this issue_ || i would also like this lets add votes to this as more people want it || heyi would like to work on this so based on the original issue we need 2 methods:- `boolean awaitterminationuninterruptibly(executorservice executor long timeout timeunit unit)`- `void awaitterminationuninterruptibly(executorservice executor)`and the 1st one will be similar to `boolean awaituninterruptibly(countdownlatch latch long timeout timeunit unit)` but for the executorservice while the 2nd one will call the first one but for a very long time as timeoutdoes this make sense? thanks!for the second one we implement it separately to avoid the calls to `systemnanotime()` entirely (those calls arent _too_ expensive but its straightforward enough to implement both the timed and untimed versions) as youve probably seen we have some [existing examples of untimed implementations]( ||  the `countdownlatch` has 2 methods for await (with and without timeout) which is why we can leverage it to avoid the call to `systemnanotime()` but for executorservice there is just one `awaittermination` which needs the timeout so we will require the call ill see if i can find a way to bring these 2 methods as close as i can to the current method designs thoughthanksnisarg || oops now i understand i guess you can still avoid calling nanotime by repeatedly calling awaittermination with the same large timeout but i see now why its not the same as countdownlatchwe could also consider not providing the infinite-wait version || yeah i dont see any harm in keeping the method for anyone to use if really need to i will handle the case where i will set a large timeout and not call `systemnanotime()` when infinite time method is called what do you think?also along with this code and its corresponding testcases in the test file is there anything else that will be needed (documentation etc)? || thanks that all sounds great i dont think we need anything else || @cpovirk any update on my pull request? ||;1;0;add awaitterminationuninterruptibly3908fixes #1315somewhat relevant to  relevant to  since it creates a `@checkreturnvalue` variant of a `javautilconcurrent` method that returns `false` to indicate timeoutrelnotes`utilconcurrent`: added `awaitterminationuninterruptibly`-------------created by moe: https://githubcom/google/moemoe_migrated_revid322581454;
3973;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> shorten tostring for abstractfuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> de-beta toimmutable* methods in gwt variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2;;0;moe sync 2020-07-23;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> shorten tostring for abstractfuture implementations inside utilconcurrent9da95c25c87f8ae009bfa56410db470ed0760f14-------<p> de-beta toimmutable* methods in gwt variants(""emulated"") of commoncollect4e12478cc5955c20ea34095acf274a2c8172a2c2";;;;;1;1;"de-beta toimmutable* methods in gwt variants(""emulated"") of commoncollect-------------created by moe: https://githubcom/google/moemoe_migrated_revid322779681";
3973;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> shorten tostring for abstractfuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> de-beta toimmutable* methods in gwt variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2;;0;reimplement tooltips in the url column;this is a followup for  tooltips in the url column should be re-activated and display sensible messages; by #4011  ||;;;;0;1;;
3973;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> shorten tostring for abstractfuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> de-beta toimmutable* methods in gwt variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2;;0;add hive table property retention_days;;wrong commit message || updated commit message || please add release notes || what default value should i specify ?the default retention seems to be 30 days in prism || added release notesadded validation to accept only positive values for retention || if the property is missing the retention should be set to infinity || so should i set the default value to integermax_value ? || if you dont set it at all i think it will do just what we want || did the same || minor comments otherwise  applied changes and ;;;;0;1;;
3973;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-07-23;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> shorten tostring for abstractfuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> de-beta toimmutable* methods in gwt variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2;;0;custom terminal operators;id like to propose the addition of a generic terminal operation method on `rxobservable` that would accept an implementation of a terminal operator interface and returns any generic type:``` javacompletionstage<integer> stage  rxobservablejust(1 2 3)    map(value -> value * 2)    max()    terminate(terminaloperatorstocompletionstage())```the existing aggregate and collection operators are great but they all currently produce `rxobservable`  in our project we mostly make use of java 8 `completionstage<t>` as well as some assorted `future<t>` implementations from other libraries  we have static helper methods to convert from `rxobservable` to `completionstage<t>` already but it breaks the fluent api;actually it looks like the experimental method `rxobservable#extend` will meet my needs  ill take a look at it and if it does i will close this issue || yes we have the `extend` operator (experimental) where you get an `onsubscribe` value and can return whatever you want:`public <r> r extend(func1<? super onsubscribe<t> ? extends r> conversion)`its downside is that you get only an `onsubscribe` on which you have to call `call(subscriber<? super t>)` to get things running || @akarnokdyes that does seem like a bit of a limitation  in my case since im transforming the observable into a future-like i want to ensure that the observable emits exactly one result  in my static helper method i use the `single()` function to ensure this  it seems that with `extend` id be required to effectively reimplement the subscriber from `operatorsingle`  it might be nice to have an overload of `extend` that can accept a different interface capable of transforming the sequence before subscribing || @halofour when the `extend` operator was introduced i argued for using `observable` but i was unable to convince the author you dont need to reimplement all but use `observablecreate` to re-wrap the source:``` javaobservablejust(1)extend(os -> observablecreate(os)toblocking()first())``` || @akarnokd ah not too bad then:``` javapublic static <t> func1<? super observableonsubscribe<t> ? extends completionstage<t>> tocompletionstage() {    return onsubscribe -> {        completablefuture<t> future  new completablefuture<>()        observablecreate(onsubscribe)                single()                subscribe(future::complete future::completeexceptionally)        return future    }}// laterobservable<foo> observable  observefoo()completionstage<foo> stage  observableextend(tocompletionstage())``` ||;;;;0;1;;
3982;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that the set returned by immutablemap<k  v>.keyset() is serializable when k is serializable  and similarly for values().  set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemap.keyset() due to a reference from the returned set back to the original map. when serializing this set  the original map is serialized is well. this change changes this so that only the keys are serialized.  relnotes= collect : ensure that the set returned by  immutablemap<k  v>.keyset()  is serializable when  k  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76;;0;moe sync 2020-08-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> ensure that the set returned by immutablemap<k v>keyset() is serializable when k is serializable and similarly for values()set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemapkeyset() due to a reference from the returned set back to the original map when serializing this set the original map is serialized is well this change changes this so that only the keys are serializedrelnotes`collect`: ensure that the set returned  immutablemap<k v>keyset()` is serializable when `k` is serializable (and similarly for `values()`)cf94f5601b32662a236f5534c1a7d4ceab132e76;;;;;1;1;ensure that the set returned by immutablemap<k v>keyset() is serializable when k is serializable and similarly for values()set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemapkeyset() due to a reference from the returned set back to the original map when serializing this set the original map is serialized is well this change changes this so that only the keys are serializedrelnotes`collect`: ensure that the set returned  immutablemap<k v>keyset()` is serializable when `k` is serializable (and similarly for `values()`)-------------created by moe: https://githubcom/google/moemoe_migrated_revid324749502;
3982;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that the set returned by immutablemap<k  v>.keyset() is serializable when k is serializable  and similarly for values().  set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemap.keyset() due to a reference from the returned set back to the original map. when serializing this set  the original map is serialized is well. this change changes this so that only the keys are serialized.  relnotes= collect : ensure that the set returned by  immutablemap<k  v>.keyset()  is serializable when  k  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76;;0;update install4j config to 704 and jres to 180_172;merge if green;;;;;1;1;update install4j;
3982;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that the set returned by immutablemap<k  v>.keyset() is serializable when k is serializable  and similarly for values().  set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemap.keyset() due to a reference from the returned set back to the original map. when serializing this set  the original map is serialized is well. this change changes this so that only the keys are serialized.  relnotes= collect : ensure that the set returned by  immutablemap<k  v>.keyset()  is serializable when  k  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76;;0;update release notes for 0126;;looks good but check why travis failed ||;;;;0;1;;
3982;1;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure that the set returned by immutablemap<k  v>.keyset() is serializable when k is serializable  and similarly for values().  set<t> should be serializable when t is serializable but that is not always the case for the set returned by immutablemap.keyset() due to a reference from the returned set back to the original map. when serializing this set  the original map is serialized is well. this change changes this so that only the keys are serialized.  relnotes= collect : ensure that the set returned by  immutablemap<k  v>.keyset()  is serializable when  k  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76;;0;1x: benchmark just and single;this pr adds a comparison benchmark for working with `observablejust` and `singlejust`results: (i7 4790 win 7 x64 java 8u92)( `one`: custom observable emitting a single item with backpressure- `scalar`: `observablejust(1)`- `scalarhidden`: `just(1)asobservable()`- `single`: `singlejust(1)`- `singlehidden`: wrapping with `singlecreate`- `plain`: just subscribe- `concat`: use `concatmap` to map it to a scalar (operator not available in single)- `merge` : use `flatmap` to map it to a scalar/singe- `switch` : use `switchmap` to map it to a scalar (operator not available in single)my guess is that single is slower because that `observableonsubscribe` vs `singleonsubscribe` wrapping game;;;;;1;1;adjust header date;
3983;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory-leaks in localcache on ios  caused by:  1. retain-cycle between outer localcache instance and inner values  keyset and entryset instances. the use of @weak and @weakouter is incorrect there  since inner instances can outlive outer localcache instance. the correct solution is to use @retainedwith annotation to inner-classes.  2. retain-cycle between referenceentry objects which internally form a doubly-linked list. fixed by adding @weak annotation to  next  and  previous  links. this is correct  since referenceentry instances are already retained by segments.  the unit test for leak detection is added inside xplat  because the required testing infrastructure is not present inside  google_common  (the iosasserts class). eventually  everything should be moved to  google_common .  relnotes=fix memory-leak in localcache on ios  8fb1cada24cae186226f0d3785704fc19ea2e9fa;;0;moe sync 2020-08-06;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix memory-leaks in localcache on ios caused by:1 retain-cycle between outer localcache instance and inner values keyset and entryset instances the use of @weak and @weakouter is incorrect there since inner instances can outlive outer localcache instance the correct solution is to use @retainedwith annotation to inner-classes2 retain-cycle between referenceentry objects which internally form a doubly-linked list  by adding @weak annotation to ""next"" and ""previous"" links this is correct since referenceentry instances are already retained by segmentsthe unit test for leak detection is added inside xplat because the required testing infrastructure is not present inside ""google_common"" (the iosasserts class) eventually everything should be moved to ""google_common""relnotesfix memory-leak in localcache on ios8fb1cada24cae186226f0d3785704fc19ea2e9fa";;;;;1;1;"fix memory-leaks in localcache on ios caused by:1 retain-cycle between outer localcache instance and inner values keyset and entryset instances the use of @weak and @weakouter is incorrect there since inner instances can outlive outer localcache instance the correct solution is to use @retainedwith annotation to inner-classes2 retain-cycle between referenceentry objects which internally form a doubly-linked list  by adding @weak annotation to ""next"" and ""previous"" links this is correct since referenceentry instances are already retained by segmentsthe unit test for leak detection is added inside xplat because the required testing infrastructure is not present inside ""google_common"" (the iosasserts class) eventually everything should be moved to ""google_common""relnotesfix memory-leak in localcache on ios-------------created by moe: https://githubcom/google/moemoe_migrated_revid325008493";
3983;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory-leaks in localcache on ios  caused by:  1. retain-cycle between outer localcache instance and inner values  keyset and entryset instances. the use of @weak and @weakouter is incorrect there  since inner instances can outlive outer localcache instance. the correct solution is to use @retainedwith annotation to inner-classes.  2. retain-cycle between referenceentry objects which internally form a doubly-linked list. fixed by adding @weak annotation to  next  and  previous  links. this is correct  since referenceentry instances are already retained by segments.  the unit test for leak detection is added inside xplat  because the required testing infrastructure is not present inside  google_common  (the iosasserts class). eventually  everything should be moved to  google_common .  relnotes=fix memory-leak in localcache on ios  8fb1cada24cae186226f0d3785704fc19ea2e9fa;;0;update 0126 release notes;;;;;;0;1;;
3983;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory-leaks in localcache on ios  caused by:  1. retain-cycle between outer localcache instance and inner values  keyset and entryset instances. the use of @weak and @weakouter is incorrect there  since inner instances can outlive outer localcache instance. the correct solution is to use @retainedwith annotation to inner-classes.  2. retain-cycle between referenceentry objects which internally form a doubly-linked list. fixed by adding @weak annotation to  next  and  previous  links. this is correct  since referenceentry instances are already retained by segments.  the unit test for leak detection is added inside xplat  because the required testing infrastructure is not present inside  google_common  (the iosasserts class). eventually  everything should be moved to  google_common .  relnotes=fix memory-leak in localcache on ios  8fb1cada24cae186226f0d3785704fc19ea2e9fa;;0;doonsubscribe & doonterminate prevents invocation of producer function when using observablecreate;i am making an api call reactive with wrapping an async operation into observablecreate to make the result consumable as subscription also i want to automatically show an android progressdialog when an subscriber subscribes and the api call gets invoked and dismiss it again when the call terminates (whether with error or successful)``` kotlinval producer  object : observableonsubscribe<result> {    var apicancellation: apicancellation?  null    var progressdialog: progressdialog?  null    override fun call(t: subscriber<in result>) {        apicancellation  apicall(operation) { result ->            if (resultisfailure) {                 tonerror(resultfailureexception())            }            else {                tonnext(resultresponse)                toncompleted()            }        }    }}return observablecreate(producer)    doonsubscribe { producerprogressdialog  progressdialogshow(context null contextgetstring(rstringmsg_sending_invitation) true false) }    doonterminate { producerprogressdialog?dismiss() }```however if i subscribe to returned observable the producer will never get invokedif i remove the _doonsubscribe_ and _doonterminate_ callbacks itll work fine;maybe `doonsubscribe` crashes if it is not invoked on the android mainthread? same for `doonterminate`? || ok turns out i used the wrong context to create the progressdialog in which case the call just silently dies ||;;;;0;1;;
3983;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-06;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory-leaks in localcache on ios  caused by:  1. retain-cycle between outer localcache instance and inner values  keyset and entryset instances. the use of @weak and @weakouter is incorrect there  since inner instances can outlive outer localcache instance. the correct solution is to use @retainedwith annotation to inner-classes.  2. retain-cycle between referenceentry objects which internally form a doubly-linked list. fixed by adding @weak annotation to  next  and  previous  links. this is correct  since referenceentry instances are already retained by segments.  the unit test for leak detection is added inside xplat  because the required testing infrastructure is not present inside  google_common  (the iosasserts class). eventually  everything should be moved to  google_common .  relnotes=fix memory-leak in localcache on ios  8fb1cada24cae186226f0d3785704fc19ea2e9fa;;3239;fix ieee preview does not display month; 3239]( on [maintable-beta]( branchon month change from combobox on optionalfieldstab month was not appear on ieee stylethe issue get         ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);please have a look at the travis output regarding the checkstyle there is still some error  || thank you its nice to work with all of you i learn a lot ||;ieee preview does not display month;currently the reference are previewed in jabref without the field month as shown in the following:( the bib should be and is compiled correctly as follows (in which the month is displayed):![image]( is consistent as the ieeecsl fromcitationstylesorg![image]( is to say jabref handles the field month correctly but the preview with ieeecsl lack the display of field monthi think this is an error and should be thanks guys for the great jobs;"i can look into this and try to fix it || i looked into this some but got stuck if the month is a literal string ""{january}"" the preview prints correctly so i think there is a problem with how the month field is getting passed to citeproc-java which in turn is maybe a problem with how the bibtexentry object is getting built by jabref but im really not sure if that is a bug in citeproc-java or in jabref || @tokkot  thanks for your analysis! maybe you could debug through it and see where the problem lies?i took a quick look and it seems that the conversion is done outside of jabref in the citeproc java:maybe you can have a look here and an at the dateparser in detail || coming from the linked issue:possibly our data model needs to be improved currently had a ""hack"" to be able to store    month  marwhen entering `mar` in the entry editor jabref saves it to    month  {mar}how to produce the other result? jabref offers to enter `#mar#` in the entry editor then the field content is saved without `#`  see also  || is probably a similar issue as #3539 modifying the stringconverter should do the job || guysi just fix both issues month preview on ieee stylealso on sourcetabcheck my last commit here on my repository that i fork[my suggested solution]( || @devsiroukane  yeah cool! please open a pull request go to  create a new pull request on the left you select master and on the right your branch || this is now  in the maintable-beta branch thanks to @devsiroukane || ";1;0;fix ieee preview does not display month (#3239)https://githubcom/jabref/jabref/pull/3983#discussion_r184892251;
3985;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [efficiency] modifies texttonumericformatv4 to parse the input string in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;0;moe sync 2020-08-07;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices97638e61eb63e1fb3f994cbf3079c33205fa61b9-------<p> [efficiency] modifies texttonumericformatv4 to parse the input string in place0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;;;;1;1;[efficiency] modifies texttonumericformatv4 to parse the input string in placerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid325432680;
3985;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [efficiency] modifies texttonumericformatv4 to parse the input string in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;0;do not run checkstyle as part of the gradle check task;        ( (      because github does not support autolinking there -->with these changes the `checkstyle` task is no longer invoked as part of the `build` or `check` task the `checkstylemain` task and its variations are kept reason: the build fails as soon as the checkstyle task fails possibly hiding more important build or test failures (recent [example]( moreover the checkstyle task is invoked as a separate build command on travis anyway -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;run main build before checkstyle;
3985;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [efficiency] modifies texttonumericformatv4 to parse the input string in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;0;fix memory leak in coordinator (and another minor change);;;;;;0;1;;
3985;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-07;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] creates a variant of parsehextet and parseoctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [efficiency] modifies texttonumericformatv4 to parse the input string in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc;;0;proposal: make schedulers should be more friendly to tests;`rxjavapluginsreset()` was recently made public but there was a common misconception that this would also reset schedulers this isnt the case however since schedulers permanently cache their resolved schedulers so `rxjavapluginsreset()` actually doesnt help in this regard id like to propose adding a `schedulersreset()` function as well it comes with same caveats that `rxjavapluginsreset()` has in that its dangerous to call in live code but it would be enormously helpful in testing this would simply null out the cached schedulers to force a re-check the next time theyre used and thus letting you change the scheduling hook and have the new ones output propagate with junit it could be nicely wrapped up in a rule that could be optionally dropped into test suites on the fly otherwise schedulers must be set at the beginning of your whole test suite and delegate schedulers put in place that can be configured laterif people would be open to this id be happy to provide a pr i looked for prior discussion around this but wasnt able to find any if i missed them somewhere please let me know;👍 in the long term i would like to see that `rxjavapluginsreset()` can reset static fields related to plugins || actually it wouldnt just be nulling out those fields it would have to replace the singleton `instance` of schedulers to re-trigger its constructor and evaluation of those scheduler instances for just tests though i still think this is a reasonable tradeoff since its opt-in and doesnt change existing behavior by default || @hzsweers thats what i meant :) || opened a pr in #3986 for further review ||;;;;0;1;;
3987;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86;;0;moe sync 2020-08-12;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> avoid boxing in doublesconstraintorange() and floatsconstraintorange()fixes  remove `@beta` from `multimapstomultimap`fixes  removed `@beta` from `multimapstomultimap`b9fe10a7b1c67518d9c6b86fc6611473943c188c-------<p> bring back previously deleted serializedforms so that old data can still be readrelnotes`collect`: data that was previously serialized and that originated from immutablemapkeyset() or values() is now deserializable againd66fda44e127d00e401cadde1834454feffade86;;;;;1;1;bring back previously deleted serializedforms so that old data can still be readrelnotes`collect`: data that was previously serialized and that originated from immutablemapkeyset() or values() is now deserializable again-------------created by moe: https://githubcom/google/moemoe_migrated_revid326086350;
3987;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86;;0;migrate to native gradle test task;        ( (      because github does not support autolinking there -->fixes   change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);```could not find method logmanager() for arguments [orgapachelogginglog4jjullogmanager] on task :test of type orggradleapitaskstestingtest``` || otherwise looks reasonable || some of the tests fail nowive no idea why and sadly no time for further investigations in the next days so any help is appreciated  || normally the xml order should not play a role maybe thats why they fail? or is it because of some missing xsd file again`? || i think these tests were actually failing before but were not executed beforenow they are || i now found time to fix the tests for some reason these tests were not executed before its strange and i couldnt find a pattern but since also the code coverage jumped by +2% (with almost +10% logic) it really proves that some tests were not executedsince fixing these tests was straightforward and this pr already has two positive responses i merge now ||;;;;1;1;fix tests;
3987;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86;;0;update logic to compute request timeout in httpremotetask;; add an explanation for why were making this change to the commit message ||;;;;0;1;;
3987;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-12;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86;;0;add more time to certain tests that failed under heavy ci load;sometimes the heavy travis ci load (or throttling) makes a few tests fail with timeout this increases the timeout for some of them to reduce the likelihood;;;;;1;1;add more time to certain tests that failed under heavy ci load;
3988;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] modifies testtonumericformatv6 to parse the input string in place.  relnotes= inetaddresses : inetaddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55;;0;moe sync 2020-08-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> [efficiency] modifies testtonumericformatv6 to parse the input string in placerelnotes`inetaddresses`: inetaddress parsing is now more efficient62a8cc4512d12d7afd1960ddca07b595be3eaf55;;;;;1;1;[efficiency] modifies testtonumericformatv6 to parse the input string in placerelnotes`inetaddresses`: inetaddress parsing is now more efficient-------------created by moe: https://githubcom/google/moemoe_migrated_revid326264503;
3988;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] modifies testtonumericformatv6 to parse the input string in place.  relnotes= inetaddresses : inetaddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55;;0;theoretical hang due to network issue;"the continuous task info fetcher does not handle the case where a task has disappeared from a worker without the worker restarting (for example if there was an arbitrarily long interruption in the network) in this case the below if-block will be trigger and the update will simply be ignored``` if (newvaluegetversion() < oldvaluegetversion()) {      // dont update to an older version (same version is ok)      return false}```one idea for fixing this is to add a ""task instance id"" similar to node id to the task so that the coordinator can check that its the same instance of the task (since tasks can be ""resurrected"")";;;;;0;1;;
3988;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] modifies testtonumericformatv6 to parse the input string in place.  relnotes= inetaddresses : inetaddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55;;0;proposal: tests based on marble diagrams in ascii forms;hello alli really like what has been done in rxjs with [marble diagrams]( have already written a [c# port]( and i guess it will be even easier to write a java onewould you be interested by a pr that would enhance the testscheduler with marble features just as it is done in rxjs?regards;i dont know we have +2500 unit tests already i could see the value when given a pattern the test routine automatically tries some backpressure and cancellation patterns || i am not thinking converting the whole test codebase to ascii marble testsmy idea is to provide to rxjava users new ways to write tests that will be more concise and readabledo you think these features should rather be implemented in a module outside rxjava? || i think it would make a good addition as an external library  || ok ill do thatthanks for your answers || please link it here when ready for people to look at iton sat jun 4 2016 10:38 am alexandre victoor notifications@githubcomwrote:> closed #3988  > —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github>  or mute> the thread>   || yes this would be awesome! || here we go:  || thats cool ;;;;0;1;;
3988;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-08-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> [efficiency] modifies testtonumericformatv6 to parse the input string in place.  relnotes= inetaddresses : inetaddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55;;3971;add rfc entry generator id-type option;"         3971]( (      because github does not support autolinking there -->3971 [ui image of entry type in dropdown]( an additional id-based entry generator id type has been added in order to fetch more complete bibtex data compared to doi fetches of rfc typefollowing the diva id type classes as template an rfc fetcher class and fetcher test has been addedi added rfc to the id-based entry generator list within webfetchers so it is an option in the dialogs dropdowncurrently the rfc fetcher class accepts search requests with or without the ""rfc"" prefix--is this an okay feature?additionally help in finding the best [rfc bibtex api]( i am using the api referenced in [#3971]( this is my first ever contribution to open source so thanks for your patience 😄 -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?)";ive merged your help file change and restarted the travis build so the help pages related error should be gone now!thanks again for your contribution 🥇  || all set thanks for all of your help! ive learned a lot about the process and hopefully wont be as needy next time :) || thank you for your contribution   ! hope to see more from you in the future! ||;add rfc standard fetcher;while all rfcs have a doi the doi import does not correspond to the real bibtex dataimplementation is totally easy: just add the rfc number in the url:- search input should accept number only and rfc followed by  numberthe ietf datatracker tool has a direct export for bibtex //datatrackerietforg/doc/rfc1945/https://datatrackerietforg/doc/rfc1945/bibtex/;"id like to try my hand at this but im confused on where to start are there any specific classes or documentation that i should look at?  || hithanks for your interest for this i recommend you take a look at the doi fetcher or other fetchers they reside in `orgjabrefguiimporter` ` and orgjabreflogicimporterfetcher `for some general information i suggest taking a look at the contribution guidelines there a also some code howtos and overview of our code structure linked: any further questions just ask here or on our  [gitter chat]( || @siedlerchr to be honest the issue description reads a bit cryptic do you propose to add an id-based fetcher for those ""rfc numbers""? ||  yes an rfc id based fetcher i enter the rfc number or rfc 123 and i get the bibtex entry  || @quunii i am interested in helping as well this would be my first contribution to open source i started to parse through the problem and ive already made a solution i assume this is bad open source etiquette since i didnt mention my interest in the first place? :/ maybe we can work together to finish it?my solution adds a new entry type to the id-based entry generator list per @siedlerchrs clarified request i added a new rfc fetcher class a test class and added the rfc fetcher to the list of id-based entry generators so that it appears in the dropdown the entry can accept an id with or without the ""rfc"" prefixshould i just submit the pull request? || @jacksonrya go ahead and dont worry about it  || ";1;0;add rfc entry generator id-type optionadd rfc fetcher that obtains more accurate bibtex datathan the doi fetcher includes test cases;
3994;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t directly call bytebuffer  etc. methods that have covariant returns in java 9+.  doing so produces a jar that doesn t work under java 8.  this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead)  but we should also add safeguards.  the normal solution to this general problem is to use --release  but doing so here is complicated.  for more information  see   406a4eafa25ccd8f456622be19e2ce1e624bc227;;0;moe sync 2020-08-21;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> dont directly call bytebuffer etc methods that have covariant returns in java 9+doing so produces a jar that doesnt work under java 8this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead) but we should also add safeguardsthe normal solution to this general problem is to use --release but doing so here is complicatedfor more information see https://githubcom/google/guava/issues/3990406a4eafa25ccd8f456622be19e2ce1e624bc227;;;;;1;1;dont directly call bytebuffer etc methods that have covariant returns in java 9+doing so produces a jar that doesnt work under java 8this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead) but we should also add safeguardsthe normal solution to this general problem is to use --release but doing so here is complicatedfor more information see  by moe: https://githubcom/google/moemoe_migrated_revid327654073;
3994;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t directly call bytebuffer  etc. methods that have covariant returns in java 9+.  doing so produces a jar that doesn t work under java 8.  this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead)  but we should also add safeguards.  the normal solution to this general problem is to use --release  but doing so here is complicated.  for more information  see   406a4eafa25ccd8f456622be19e2ce1e624bc227;;0;copy to clipboard;jabref version 42 on  windows 71 select item(s)2 contextual menu : copy -> export to clipboard nothing happens (tried different items without success) normally it appears a windows with all export formats ```runcommand error: nulljavalangunsupportedoperationexception	at javautilcollections$unmodifiablelistsort(unknown source)	at orgjabrefguiexporterexporttoclipboardactionrun(exporttoclipboardactionjava:59)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(unknown source)	at javalangreflectmethodinvoke(unknown source)	at spininvocationevaluate(invocationjava:175)	at spinoffspinoffevaluator$1run(spinoffevaluatorjava:108)	at javalangthreadrun(unknown source)```;thank you for your report :+1:this should be  in current `clipboard-export` please try the latest build from  ||;;;;0;1;;
3994;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t directly call bytebuffer  etc. methods that have covariant returns in java 9+.  doing so produces a jar that doesn t work under java 8.  this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead)  but we should also add safeguards.  the normal solution to this general problem is to use --release  but doing so here is complicated.  for more information  see   406a4eafa25ccd8f456622be19e2ce1e624bc227;;0;"hive ""connection is closed"" error";"it appears that presto is losing connection to my hive metastore by the error below our presto environment is really unstable it basically will be fine for 20-30 minutes and then all the sudden presto (even without people using presto/airpal) can even run a ""show tables"" query without getting the error below has anyone seen this issue? how should i troubleshoot it?environment: amazon emr presto: 0119airpal is installedhere is the error:presto-cli --server localhost:8889 --catalog hive --schema defaultpresto:default> show tablesquery 20151118_201735_00012_9wrvh failed 2 nodessplits: 2 total 0 done (000%)0:18 [0 rows 0b] [0 rows/s 0b/s]query 20151118_201735_00012_9wrvh failed: javaxjdojdoexception: exception thrown when executing query    at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:252)    at orgapachehadoophivemetastoreobjectstoregettables(objectstorejava:939)    at orgapachehadoophivemetastoreobjectstoregetalltables(objectstorejava:955)    at sunreflectgeneratedmethodaccessor57invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0getalltables(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_all_tables(hivemetastorejava:3578)    at sunreflectgeneratedmethodaccessor64invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_all_tables(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:9001)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:8985)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)nestedthrowablesstacktrace  connection is closed!    at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)    at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)    at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)    at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)    at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)    at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)    at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:243)    at orgapachehadoophivemetastoreobjectstoregettables(objectstorejava:939)    at orgapachehadoophivemetastoreobjectstoregetalltables(objectstorejava:955)    at sunreflectgeneratedmethodaccessor57invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0getalltables(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_all_tables(hivemetastorejava:3578)    at sunreflectgeneratedmethodaccessor64invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_all_tables(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:9001)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:8985)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)";"this error is coming from the hive metastore not from presto try running a hive query and see if you get the same erroralso can you run the cli with --debug and show us the full stack trace?> on nov 19 2015 at 4:28 am kyleburke notifications@githubcom wrote:> > it appears that presto is losing connection to my hive metastore by the error below our presto environment is really unstable it basically will be fine for 20-30 minutes and then all the sudden presto (even without people using presto/airpal) can even run a ""show tables"" query without getting the error below has anyone seen this issue? how should i troubleshoot it?> > environment: amazon emr > presto: 0119> airpal is installed> > here is the error:> presto-cli --server localhost:8889 --catalog hive --schema default> presto:default> show tables> > query 20151118_201735_00012_9wrvh failed 2 nodes> splits: 2 total 0 done (000%)> 0:18 [0 rows 0b] [0 rows/s 0b/s]> > query 20151118_201735_00012_9wrvh failed: javaxjdojdoexception: exception thrown when executing query> at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)> at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:252)> at orgapachehadoophivemetastoreobjectstoregettables(objectstorejava:939)> at orgapachehadoophivemetastoreobjectstoregetalltables(objectstorejava:955)> at sunreflectgeneratedmethodaccessor57invoke(unknown source)> at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)> at javalangreflectmethodinvoke(methodjava:606)> at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)> at comsunproxy$proxy0getalltables(unknown source)> at orgapachehadoophivemetastorehivemetastore$hmshandlerget_all_tables(hivemetastorejava:3578)> at sunreflectgeneratedmethodaccessor64invoke(unknown source)> at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)> at javalangreflectmethodinvoke(methodjava:606)> at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)> at comsunproxy$proxy12get_all_tables(unknown source)> at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:9001)> at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:8985)> at orgapachethriftprocessfunctionprocess(processfunctionjava:39)> at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)> at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)> at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)> at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)> at javalangthreadrun(threadjava:745)> nestedthrowablesstacktrace:> javasqlsqlexception: connection is closed!> at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)> at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)> at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)> at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)> at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)> at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)> at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)> at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:243)> at orgapachehadoophivemetastoreobjectstoregettables(objectstorejava:939)> at orgapachehadoophivemetastoreobjectstoregetalltables(objectstorejava:955)> at sunreflectgeneratedmethodaccessor57invoke(unknown source)> at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)> at javalangreflectmethodinvoke(methodjava:606)> at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)> at comsunproxy$proxy0getalltables(unknown source)> at orgapachehadoophivemetastorehivemetastore$hmshandlerget_all_tables(hivemetastorejava:3578)> at sunreflectgeneratedmethodaccessor64invoke(unknown source)> at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)> at javalangreflectmethodinvoke(methodjava:606)> at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)> at comsunproxy$proxy12get_all_tables(unknown source)> at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:9001)> at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_all_tablesgetresult(thrifthivemetastorejava:8985)> at orgapachethriftprocessfunctionprocess(processfunctionjava:39)> at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)> at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)> at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)> at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)> at javalangthreadrun(threadjava:745)> > —> reply to this email directly or view it on github || i can run queries in hive with no issues the hive metastore is on the same node as the coordinator node so im wondering why the apparent connection lost? this time i was able to do a ""show table"" but even a simple query throws an error ive turned off airpal to see if that helps but it hasnt[hadoop@ip-10-205-46-195 ~]$ presto-cli --debug --server localhost:8889 --catalog hive --schema defaultpresto:default> show tables##      table       example_table   wikistats   wikistats_orc   wikistats_parq (4 rows)query 20151118_230327_00024_mkwxd finished 2 nodes 2 total 2 done (10000%)cpu time: 00s total    2k rows/s   61kb/s 15% activeper node: 00 parallelism    32 rows/s  1011b/sparallelism: 000:00 [4 rows 125b] [65 rows/s 199kb/s]presto:default> select \* from wikistats limit 10query 20151118_230346_00025_mkwxd failed: javaxjdojdoexception: exception thrown when executing query    at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:275)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)nestedthrowablesstacktrace  connection is closed!    at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)    at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)    at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)    at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)    at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)    at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)    at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:266)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)comfacebookprestospiprestoexception: javaxjdojdoexception: exception thrown when executing query    at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:275)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)nestedthrowablesstacktrace  connection is closed!    at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)    at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)    at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)    at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)    at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)    at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)    at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:266)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)```at comfacebookprestohivemetastorecachinghivemetastoreloadtable(cachinghivemetastorejava:567)at comfacebookprestohivemetastorecachinghivemetastoreaccess$300(cachinghivemetastorejava:96)at comfacebookprestohivemetastorecachinghivemetastore$4load(cachinghivemetastorejava:176)at comfacebookprestohivemetastorecachinghivemetastore$4load(cachinghivemetastorejava:171)at comgooglecommoncachecacheloader$1load(cacheloaderjava:189)at comgooglecommoncachelocalcache$loadingvaluereferenceloadfuture(localcachejava:3527)at comgooglecommoncachelocalcache$segmentloadsync(localcachejava:2319)at comgooglecommoncachelocalcache$segmentlockedgetorload(localcachejava:2282)at comgooglecommoncachelocalcache$segmentget(localcachejava:2197)at comgooglecommoncachelocalcacheget(localcachejava:3937)at comgooglecommoncachelocalcachegetorload(localcachejava:3941)at comgooglecommoncachelocalcache$localloadingcacheget(localcachejava:4824)at comfacebookprestohivemetastorecachinghivemetastoreget(cachinghivemetastorejava:290)at comfacebookprestohivemetastorecachinghivemetastoregettable(cachinghivemetastorejava:403)at comfacebookprestohivehivemetadatagetviews(hivemetadatajava:804)at comfacebookprestospiclassloaderclassloadersafeconnectormetadatagetviews(classloadersafeconnectormetadatajava:245)at comfacebookprestometadatametadatamanagergetview(metadatamanagerjava:649)at comfacebookprestosqlanalyzertupleanalyzervisittable(tupleanalyzerjava:215)at comfacebookprestosqlanalyzertupleanalyzervisittable(tupleanalyzerjava:138)at comfacebookprestosqltreetableaccept(tablejava:36)at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)at comfacebookprestosqlanalyzertupleanalyzeranalyzefrom(tupleanalyzerjava:993)at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:357)at comfacebookprestosqlanalyzertupleanalyzervisitqueryspecification(tupleanalyzerjava:138)at comfacebookprestosqltreequeryspecificationaccept(queryspecificationjava:98)at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:610)at comfacebookprestosqlanalyzerstatementanalyzervisitquery(statementanalyzerjava:124)at comfacebookprestosqltreequeryaccept(queryjava:80)at comfacebookprestosqltreeastvisitorprocess(astvisitorjava:22)at comfacebookprestosqlanalyzeranalyzeranalyze(analyzerjava:60)at comfacebookprestoexecutionsqlqueryexecutiondoanalyzequery(sqlqueryexecutionjava:259)at comfacebookprestoexecutionsqlqueryexecutionanalyzequery(sqlqueryexecutionjava:245)at comfacebookprestoexecutionsqlqueryexecutionstart(sqlqueryexecutionjava:209)at comfacebookprestoexecutionqueuedexecutionlambda$start$77(queuedexecutionjava:68)at comfacebookprestoexecutionqueuedexecution$$lambda$237/1438861684run(unknown source)at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)at javalangthreadrun(threadjava:745)```caused by: orgapachehadoophivemetastoreapimetaexception: javaxjdojdoexception: exception thrown when executing query    at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:275)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)nestedthrowablesstacktrace  connection is closed!    at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)    at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)    at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)    at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)    at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)    at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)    at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)    at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:266)    at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:968)    at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:900)    at sunreflectgeneratedmethodaccessor41invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:98)    at comsunproxy$proxy0gettable(unknown source)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table_core(hivemetastorejava:1723)    at orgapachehadoophivemetastorehivemetastore$hmshandlerget_table(hivemetastorejava:1695)    at sunreflectgeneratedmethodaccessor43invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:606)    at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:102)    at comsunproxy$proxy12get_table(unknown source)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9025)    at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_tablegetresult(thrifthivemetastorejava:9009)    at orgapachethriftprocessfunctionprocess(processfunctionjava:39)    at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)    at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:206)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:745)```at orgapachehadoophivemetastoreapithrifthivemetastore$get_table_result$get_table_resultstandardschemeread(thrifthivemetastorejava:35057)at orgapachehadoophivemetastoreapithrifthivemetastore$get_table_result$get_table_resultstandardschemeread(thrifthivemetastorejava:35034)at orgapachehadoophivemetastoreapithrifthivemetastore$get_table_resultread(thrifthivemetastorejava:34965)at orgapachethrifttserviceclientreceivebase(tserviceclientjava:78)at orgapachehadoophivemetastoreapithrifthivemetastore$clientrecv_get_table(thrifthivemetastorejava:1218)at orgapachehadoophivemetastoreapithrifthivemetastore$clientget_table(thrifthivemetastorejava:1204)at comfacebookprestohivemetastorecachinghivemetastorelambda$loadtable$12(cachinghivemetastorejava:555)at comfacebookprestohivemetastorecachinghivemetastore$$lambda$493/1881895660call(unknown source)at comfacebookprestohivemetastorehivemetastoreapistats$1call(hivemetastoreapistatsjava:44)at comfacebookprestohiveretrydriverrun(retrydriverjava:136)at comfacebookprestohivemetastorecachinghivemetastoreloadtable(cachinghivemetastorejava:553) 38 more```presto:default>  || i ran across the same issue exactlypresto 0125hive 100emr 420any updates? || unfortunately i have no update i had to move on from presto my hive service seemed to have been ""corrupted"" by presto presto doesnt seem to play well with the version of hive on  emr  || @kyleburke  can you give some more detail in to how your hive service was ""corrupted"" ? the emr implementation of presto is not built against a custom version of hive it uses the same hive libraries as the open source version of presto  || i am experiencing the same issue on emr 430  || any update on this guys?i experience the same problem and it is starting to give us headaches || updating the hive metastore to 12 seemed to help in my case || @vitillo how did you update the metastore? || @daniellechou90 have a look at this [script]( || i run into same issue i am using emr 470 any updates? did you resolve this issue?  || i was directed by aws support to upgrade to emr 50 to resolve the problem fully aside from upgrading emr aws also suggested that i use an external metastore (in a mysql rds instance for example) here are some references that should be helpful if you decide to setup an external metastore:  im also experiencing the same issuepresto:0167hive metastore:120```query 20190715_021620_00095_9yt8a failed: javaxjdojdoexception: exception thrown when executing query	at orgdatanucleusapijdonucleusjdohelpergetjdoexceptionfornucleusexception(nucleusjdohelperjava:596)	at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:275)	at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:996)	at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:928)	at orgapachehadoophivemetastoreobjectstoregetpartitionpsqueryresults(objectstorejava:1895)	at orgapachehadoophivemetastoreobjectstorelistpartitionnamesps(objectstorejava:1980)	at sunreflectgeneratedmethodaccessor14invoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:114)	at comsunproxy$proxy2listpartitionnamesps(unknown source)	at orgapachehadoophivemetastorehivemetastore$hmshandlerget_partition_names_ps(hivemetastorejava:3861)	at sunreflectgeneratedmethodaccessor13invoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:107)	at comsunproxy$proxy4get_partition_names_ps(unknown source)	at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_partition_names_psgetresult(thrifthivemetastorejava:10140)	at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_partition_names_psgetresult(thrifthivemetastorejava:10124)	at orgapachethriftprocessfunctionprocess(processfunctionjava:39)	at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)	at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:285)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)	at javalangthreadrun(threadjava:745)nestedthrowablesstacktrace  connection is closed!	at comjolboxbonecpconnectionhandlecheckclosed(connectionhandlejava:459)	at comjolboxbonecpconnectionhandlepreparestatement(connectionhandlejava:1180)	at orgdatanucleusstorerdbmssqlcontrollergetstatementforquery(sqlcontrollerjava:350)	at orgdatanucleusstorerdbmsqueryrdbmsqueryutilsgetpreparedstatementforquery(rdbmsqueryutilsjava:194)	at orgdatanucleusstorerdbmsqueryjdoqlqueryperformexecute(jdoqlqueryjava:640)	at orgdatanucleusstorequeryqueryexecutequery(queryjava:1786)	at orgdatanucleusstorequeryqueryexecutewitharray(queryjava:1672)	at orgdatanucleusapijdojdoqueryexecute(jdoqueryjava:266)	at orgapachehadoophivemetastoreobjectstoregetmtable(objectstorejava:996)	at orgapachehadoophivemetastoreobjectstoregettable(objectstorejava:928)	at orgapachehadoophivemetastoreobjectstoregetpartitionpsqueryresults(objectstorejava:1895)	at orgapachehadoophivemetastoreobjectstorelistpartitionnamesps(objectstorejava:1980)	at sunreflectgeneratedmethodaccessor14invoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgapachehadoophivemetastorerawstoreproxyinvoke(rawstoreproxyjava:114)	at comsunproxy$proxy2listpartitionnamesps(unknown source)	at orgapachehadoophivemetastorehivemetastore$hmshandlerget_partition_names_ps(hivemetastorejava:3861)	at sunreflectgeneratedmethodaccessor13invoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgapachehadoophivemetastoreretryinghmshandlerinvoke(retryinghmshandlerjava:107)	at comsunproxy$proxy4get_partition_names_ps(unknown source)	at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_partition_names_psgetresult(thrifthivemetastorejava:10140)	at orgapachehadoophivemetastoreapithrifthivemetastore$processor$get_partition_names_psgetresult(thrifthivemetastorejava:10124)	at orgapachethriftprocessfunctionprocess(processfunctionjava:39)	at orgapachehadoophivemetastoretugibasedprocessorprocess(tugibasedprocessorjava:103)	at orgapachethriftservertthreadpoolserver$workerprocessrun(tthreadpoolserverjava:285)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)``` || ";;;;0;1;;
3994;0;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-21;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t directly call bytebuffer  etc. methods that have covariant returns in java 9+.  doing so produces a jar that doesn t work under java 8.  this cl addresses the currently existing problematic calls (by calling the methods on the supertype buffer instead)  but we should also add safeguards.  the normal solution to this general problem is to use --release  but doing so here is complicated.  for more information  see   406a4eafa25ccd8f456622be19e2ce1e624bc227;;0;dummy commit;;sorry opened this in the wrong place ||;;;;0;1;;
3996;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-08-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding sec-ch-ua-arch header.  header spec here:   relnotes=n/a  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> work around an android bug in locksupport  this time with @canignorereturnvalue  a849f7f1264b586d44f2b34f274bac9f1d7eff19;;0;moe sync 2020-08-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> adding sec-ch-ua-arch headerheader spec here:  work around an android bug in locksupport this time with @canignorereturnvaluea849f7f1264b586d44f2b34f274bac9f1d7eff19;;;;;1;1;work around an android bug in locksupport this time with @canignorereturnvalue-------------created by moe: https://githubcom/google/moemoe_migrated_revid327861568;
3996;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-08-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding sec-ch-ua-arch header.  header spec here:   relnotes=n/a  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> work around an android bug in locksupport  this time with @canignorereturnvalue  a849f7f1264b586d44f2b34f274bac9f1d7eff19;;3993.0;1x: fix reset() shutting down everything other than the schedulers;the reset shut down all the main schedulers and the helper pools causing the failure in #3993 @hzsweers you were right with the need for the instance-shutdown method;minor nit rest of the code looks good 👍 nice catch sorry for the inadvertent bug and glad it was a relatively simple fix ||  ;schedulerlifecycletest failures;after merging #3986 these to fail in master (worked as pr):```rxschedulersschedulerlifecycletest > testshutdown failed    javautilconcurrentrejectedexecutionexception: task javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetask@73f20bba rejected from javautilconcurrentscheduledthreadpoolexecutor@17e01bce[terminated pool size  0 active threads  0 queued tasks  0 completed tasks  0]        at javautilconcurrentthreadpoolexecutor$abortpolicyrejectedexecution(threadpoolexecutorjava:2048)        at javautilconcurrentthreadpoolexecutorreject(threadpoolexecutorjava:821)        at javautilconcurrentscheduledthreadpoolexecutordelayedexecute(scheduledthreadpoolexecutorjava:325)        at javautilconcurrentscheduledthreadpoolexecutorschedule(scheduledthreadpoolexecutorjava:530)        at javautilconcurrentscheduledthreadpoolexecutorexecute(scheduledthreadpoolexecutorjava:619)        at rxschedulersschedulerlifecycletesttryoutschedulers(schedulerlifecycletestjava:98)        at rxschedulersschedulerlifecycletesttestshutdown(schedulerlifecycletestjava:36)rxschedulersschedulerlifecycletest > teststartidempotence startedrxschedulersschedulerlifecycletest > teststartidempotence failed    javautilconcurrentrejectedexecutionexception: task javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetask@18264a30 rejected from javautilconcurrentscheduledthreadpoolexecutor@17e01bce[terminated pool size  0 active threads  0 queued tasks  0 completed tasks  0]        at javautilconcurrentthreadpoolexecutor$abortpolicyrejectedexecution(threadpoolexecutorjava:2048)        at javautilconcurrentthreadpoolexecutorreject(threadpoolexecutorjava:821)        at javautilconcurrentscheduledthreadpoolexecutordelayedexecute(scheduledthreadpoolexecutorjava:325)        at javautilconcurrentscheduledthreadpoolexecutorschedule(scheduledthreadpoolexecutorjava:530)        at javautilconcurrentscheduledthreadpoolexecutorexecute(scheduledthreadpoolexecutorjava:619)        at rxschedulersschedulerlifecycletesttryoutschedulers(schedulerlifecycletestjava:98)        at rxschedulersschedulerlifecycletestteststartidempotence(schedulerlifecycletestjava:117)```@hzsweers can you have a look at these? (its night time for me btw);"sure ill take a look || they run fine on 1x/master for me locally maybe something to do with travis? or related to or in the same vein as  || @hzsweers i guess its related to cpu/cores configuration + machine state please try to run tests on travis through your fork of rxjava (via prs or other ways) just add env variable `travis_pull_requesttrue` on travis for your forkps sorry for ""laugh"" reaction removed thought that it was funny and ""ive warned you"" things but this project is too significant to break it so yeah sorry ill be here to review fix in few hours || so weve chatted with @hzsweers about the problem he has to go for few hours if somebody interested in fixing that — looks like #3986 shuts down scheduler too early or tests that run after `reset()` see shutdowned scheduler or something like this: > reset startedrxschedulersschedulerlifecycletest > testshutdown startedrxschedulersschedulerlifecycletest > testshutdown failed    javautilconcurrentrejectedexecutionexception: task javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetask@4240096f rejected from javautilconcurrentscheduledthreadpoolexecutor@7a2b7863[terminated pool size  0 active threads  0 queued tasks  0 completed tasks  0]        at javautilconcurrentthreadpoolexecutor$abortpolicyrejectedexecution(threadpoolexecutorjava:2048)        at javautilconcurrentthreadpoolexecutorreject(threadpoolexecutorjava:821)        at javautilconcurrentscheduledthreadpoolexecutordelayedexecute(scheduledthreadpoolexecutorjava:325)        at javautilconcurrentscheduledthreadpoolexecutorschedule(scheduledthreadpoolexecutorjava:530)        at javautilconcurrentscheduledthreadpoolexecutorexecute(scheduledthreadpoolexecutorjava:619)        at rxschedulersschedulerlifecycletesttryoutschedulers(schedulerlifecycletestjava:108)        at rxschedulersschedulerlifecycletesttestshutdown(schedulerlifecycletestjava:46)rxschedulersschedulerlifecycletest > teststartidempotence startedrxschedulersschedulerlifecycletest > teststartidempotence failed    javautilconcurrentrejectedexecutionexception: task javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetask@7cbac34b rejected from javautilconcurrentscheduledthreadpoolexecutor@7a2b7863[terminated pool size  0 active threads  0 queued tasks  0 completed tasks  0]        at javautilconcurrentthreadpoolexecutor$abortpolicyrejectedexecution(threadpoolexecutorjava:2048)        at javautilconcurrentthreadpoolexecutorreject(threadpoolexecutorjava:821)        at javautilconcurrentscheduledthreadpoolexecutordelayedexecute(scheduledthreadpoolexecutorjava:325)        at javautilconcurrentscheduledthreadpoolexecutorschedule(scheduledthreadpoolexecutorjava:530)``` || so `schedulersreset()` shuts down `genericscheduledexecutorservice` then `schedulerlifecycletest` tries to run some tasks on it `genericscheduledexecutorservicegetinstance()execute()` and fails because `reset()` test already shut it downthe fix would be to restart `genericscheduledexecutorservice` correctly in `schedulerlifecycletest` or `schedulersreset()` or `genericscheduledexecutorservicegetinstance()` || yes the `reset` is overscoped it should only shutdown the main schedulers but leave the helper schedulers ill post a fix || this can be closed now || closing via #3996 || ";1;0;1x: fix reset() shutting down everything other than the schedulers;
3996;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;moe sync 2020-08-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding sec-ch-ua-arch header.  header spec here:   relnotes=n/a  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> work around an android bug in locksupport  this time with @canignorereturnvalue  a849f7f1264b586d44f2b34f274bac9f1d7eff19;;3994;3994 duplicate unmodifiable list for sorting;3994 ```runcommand error: nulljavalangunsupportedoperationexception	at javautilcollections$unmodifiablelistsort(unknown source)	at orgjabrefguiexporterexporttoclipboardactionrun(exporttoclipboardactionjava:59)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(unknown source)	at javalangreflectmethodinvoke(unknown source)	at spininvocationevaluate(invocationjava:175)	at spinoffspinoffevaluator$1run(spinoffevaluatorjava:108)	at javalangthreadrun(unknown source)```;;copy to clipboard;jabref version 42 on  windows 71 select item(s)2 contextual menu : copy -> export to clipboard nothing happens (tried different items without success) normally it appears a windows with all export formats ```runcommand error: nulljavalangunsupportedoperationexception	at javautilcollections$unmodifiablelistsort(unknown source)	at orgjabrefguiexporterexporttoclipboardactionrun(exporttoclipboardactionjava:59)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(unknown source)	at javalangreflectmethodinvoke(unknown source)	at spininvocationevaluate(invocationjava:175)	at spinoffspinoffevaluator$1run(spinoffevaluatorjava:108)	at javalangthreadrun(unknown source)```;thank you for your report :+1:this should be  in current `clipboard-export` please try the latest build from  ||;1;0;3994 duplicate unmodifiable list for sorting;
3998;1;1;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> throw if @subscribe is applied to a method that takes a primitive parameter.  fixes   relnotes=prevent @subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;;0;moe sync 2020-08-25;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> throw if @subscribe is applied to a method that takes a primitive parameterfixes  @subscribe being applied to a method that takes a primitive as that will never be called9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;"i would have to look at bytecode to confirm but i dont think theres any allocation concatenation of literals happens at compile time and checkargument has non-varargs overloads:  || (it remains a fair point that we use checkargument habitually even in some cases where a manual check and throw would be better) || (i do hope that well one day add methods like illegalargument(""foo %s"" bar)) || i like the ""shortness"" of `illegalargument(""foo %s"" bar)`id like it to be clear that it throws an exceptionsomething of the sorts looks very readable:```if (checkfails) {  throw illegalargument(""foo %s"" bar)}````illegalargument` just builds the exception with the string and whatever formatting logic it applies  || ";;;;1;1;throw if @subscribe is applied to a method that takes a primitive parameterfixes  @subscribe being applied to a method that takes a primitive as that will never be called-------------created by moe: https://githubcom/google/moemoe_migrated_revid328195519;
3998;1;1;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> throw if @subscribe is applied to a method that takes a primitive parameter.  fixes   relnotes=prevent @subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;;0;search;;please base your pr on maintable || this is hard to review since it has merge conflicts and includes some unrelated commits || i s this pr still relevant or what was its purpose? ||;;;;0;1;;
3998;1;1;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> throw if @subscribe is applied to a method that takes a primitive parameter.  fixes   relnotes=prevent @subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;;0;use injected executorservice instead of creating a new one;;"explain why in the commit message || other than my one comment and martins comment  since the leak is only in our internal connector im not sure what to say in this commit message something like ""this allows connectors to provide their own executorservice""? || what causes the leak? maybe something like ""not having this forces connectors that extend this one to do xxxx which results in leaks""  || its the way our internal client `metadata` is written we create a new `hivemetadata` object for every metadata call which in turn creates a new `threadfactory` with its own `threadgroup` ill say ""not having this forces connectors that extend this one to leak threadgroups if they dont reuse hivemetadata objects"" || ";;;;0;1;;
3998;1;1;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-25;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> throw if @subscribe is applied to a method that takes a primitive parameter.  fixes   relnotes=prevent @subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced;;0;flatmap with maxconcurrent value of 1 results in npe if observable emitting null is returned;the easiest way to reproduce this is as follows:```    @test    public void testnullfromrange() {        testsubscriber<object> subscriber  new testsubscriber<>()        observablerange(0 2)flatmap(i -> {            if (i  0) {                return observableinterval(1 timeunitseconds)take(1)            } else {                return observablejust(null)            }        } 1)subscribe(subscriber)        subscriberawaitterminalevent()        subscriberassertnoerrors()    }```in this case the value from `observablejust(null)` cannot be immediate emitted so it is queued  since the observable is a scalar we queue the underlying value (in this case `null`) which results in a call to `offer` on the class `spscarrayqueue`  this class does not accept null element values so the result is an nperemoving the `maxconcurrent` argument fixes this but unfortuantely in our case thats not possible as we need have a range that we need to run sequentially;this has been  in 113 please make sure you use the latest version of rxjava || thanks - im using this via rxvertx so let me see if i can upgrade the underlying rxjava version without breaking something else good to know it is fixed however || the other issue i have is that im using rxgroovy -- the most recent release there appears to be 103 -- is this compatible with the 11x releases of rxjava (its `buildgradle` lists a dependency of `10+` which might imply no)  if not are there plans to update rxgroovy to the same level as rxjava? || they were [some removals]( but i dont know much about rxgroovy i suggest you talk to them about upgrading || do you know who they are?  there is an issue for the upgrade which has been around since feb and the contact info is the same as the main rxjava project  im happy to do the update and submit a pr but im not sure if there is anyone to review/merge it if i do || i have the rights to merge and @zsxwing is there to but cant give any promise on releasing anything you could also fork rxgroovy and release on your own terms to maven || continued at  ||;;;;0;1;;
4000;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate files.createtempdir()  noting that better alternatives exist for android as well as for users running java 7 or later.  relnotes= io : deprecated  files.createtempdir() .  9258dd9071c850dde0461f0f0cad81105442fdce;;0;moe sync 2020-08-27;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> deprecate filescreatetempdir() noting that better alternatives exist for android as well as for users running java 7 or laterrelnotes`io`: deprecated `filescreatetempdir()`9258dd9071c850dde0461f0f0cad81105442fdce;;;;;1;1;deprecate filescreatetempdir() noting that better alternatives exist for android as well as for users running java 7 or laterrelnotes`io`: deprecated `filescreatetempdir()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid328552787;
4000;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate files.createtempdir()  noting that better alternatives exist for android as well as for users running java 7 or later.  relnotes= io : deprecated  files.createtempdir() .  9258dd9071c850dde0461f0f0cad81105442fdce;;0;do not overwrite existing keys does not work;under: options > preferences > bibtex key generatori checked the do not overwrite box but bib entry keys are still overwritten when i click on [generate] key icon i have tried restarting jabref but same result version 42- - -follow up: 2018/05/07whether do not overwrite existing keys flag is set or not if i double click the generate key icon it locks the new bibtexkey as one might want but there is no visual indication that the key is actually locked if i click once every two (2) seconds or so the key continues to be changed so there is a locking mechanism but not as documented - perhaps not as designed if key is locked with double click i can still delete the key and generate a new one;both icons in the editor use a different implementation as `strg-g` and `quality - auto generate bibtex keys` does || -  ctrl-g `actionsmake_key` basepanel l443-  quality auto generate bibtex keys `actionsmake_key` basepanel l443-  entry editor left icon `entryeditor#generatekey`-  entry editor right icon `bibtexkeyeditor#generatekey` ||;;;;0;1;;
4000;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate files.createtempdir()  noting that better alternatives exist for android as well as for users running java 7 or later.  relnotes= io : deprecated  files.createtempdir() .  9258dd9071c850dde0461f0f0cad81105442fdce;;0;fix bugs in new parquet reader;fix 3 things in new parquet reader:1 parquetreader reading incorrect row group metadata2 lazyread does not do necessary skips3 parquetreader and parquetfilereader could be merged into one class;thank you @dain  get comments addressedjust found no need to make parquetcolumnreader indexed by both rowgroupnumber and columndescriptor just indexed by columndescriptor is ok || @dain i updated this pr with more fixes in the new parquet reader your comments and suggestions are appreciated || also merge the testcase pr here || add another bug fix following @electrum s handling of missing columns where columns were added to the metastore after table data was written: fix the handling of missing columns in the new parquet reader || im repeating this comment from one of the commitsfor all of the parquet code can you take a look at the calls like `checkargument` and if they are actually checks for file corruption (as opposed to programming errors) switch them to `parquetcorruptionexception` || additionally look at all uses of the new `parquetcorruptionexception` and remove unnecessary call to `tostring` on the args || this pr seems to have `this` on most uses of class fields  generally we dont add an unnecessary `this` to field accesses unless it helps with readability (you see this in some constructors) || can you scan through all the commits and fix any place where the method arguments are aligned instead of using two indents (8 spaces)? || for the new `abstracttestparquetreader` code the goal should be to test data streams that cover all of the various encodings in parquet  my guess is you dont need cases like `testlongstridedictionary` and `testlongpatchedbase` since these are specifically designed for funky orc encodings  additionally it is possible you are missing some to stress your code  id used the code coverage tool in intellij to verify i had cases for all the orc encodings || my comments are mostly style/formatting  let me know when this is updated and ill get it in || thank u so much @dain i get comments addressed || i will land this after the next release goes out (they are working on it now) || ;;;;0;1;;
4000;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-27;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate files.createtempdir()  noting that better alternatives exist for android as well as for users running java 7 or later.  relnotes= io : deprecated  files.createtempdir() .  9258dd9071c850dde0461f0f0cad81105442fdce;;0;2x: remove global state make rxjava instantiable and immutable?;at the moment rxjava v1x is a library with mostly `static` api like `observablejust()` and so on **but** it also has global shared `static` state mostly for hooks why global state is bad:- a lot of libraries use rxjava nowadays when you want to change some behavior of rxjava for your code or some library in particular you also affect all other code that uses rxjava in your program- any change of global state in multithreaded runtime is dangerous- because of thread-safety required for this global state  rxjava has to apply atomic/synchronized operations to access it in many parts of rx chains lifecycle which degrades performance a little bit- some parts of hooks done through system properties some via explicit api not very consistent- order of class initialization sometimes breaks hooks api and generally plays bad with static hooks- rxjava makes multithreading easy and immutability of the data that goes through rx chains is a must have but library itself is not immutable thats awkward because rxjava brings a lot of functional aspects and immutability is fundamental to the conceptwhat i think of is to **make rxjava instantiable** and remove all shared state between rxjava instances just like any other normal library such as retrofit moshi ok (mostly) and others``` javarxjava rxjava  rxjavabuilder()  ioscheduler(…)  computationscheduler(…)  flowexecutionhook(…)  // and other configurations  build()```at the moment we have to pass bunch of schedulers everywhere through di just for unit testing we cant apply execution hooks partially to our code (for functional tests and metrics) libraries tend to use standard schedulers and its very hard to change them without changing them for all other code and so on and so onusage example:``` javarxjava  flow()  from(…)  map(…)  filter(…)  flatmap(…)  // …```libraries will simply need to accept `rxjava` instance and you will be able either share one rxjava instance between all of them or control precisely how particular library will use rxjavatesting will be easier because you can pass rxjava instance configured for testing as you need``` javarxjava testrxjava  rxjavabuilder()  ioscheduler(immediatescheduler)  computationscheduler(immediatescheduler)  build()```---does that make sense for others and do you fill need in that too or im alone here?;"forgot to add that in this case interfaces for basic types like `observable` (flowable) and others will make sense youll be able to implement lets say reactorrxjava or agerarxjava and provide custom implementation for libraries that know only about rxjava// another point for interfaces is to be able to return mock of `subscription` from `subscribe()` to verify unsubscription but its out of the scope of this discussion || would flatmap provide the rxjava instance for the creation of sub observables?``` javaout  inflatmap((value rx) -> rxjust(valuelength()))```or would you have to close over the instance?``` javaout  inflatmap((value) -> ingetrx()just(valuelength()))``` || i think will be better to provide api like `observablerx()` (`flowablerx())` to be able to operate on the source `rxjava` instance of unknown `observable`-> `out  inflatmap(value -> inrx()observable()just(valuelength()))` || what is `it` (in plain old java)? || is this a proposal for 1x or 2x? || sorry meant `in` of course! proposal is for 2x (see title) || additional bonus: testing rxjava itself in this repo will be much easier without global shared state between tests i believe @akarnokd will really appreciate it || im still evaluating this proposal and its consequences here are my preliminary thoughts:- the `rxjava` type you are proposing looks like any context object that has to be passed around with the current design- such context-objects lead to complaints about why `observeon` doesnt preserve it and how threadlocals have to be used- one possible outcome of having individual rxjava objects is that every library may set its own computation scheduler sized to the available cpus and now you have 2n times cpus threads for computation || 1 yes its like any context object **but its ok for configurable objects** i would not open this issue if rxjava would be set of utility functions also as said above i (maybe its my bad) already have to pass schedulers all over the code for testing2 not sure i understand the problem3 this proposal naturally requires libraries which depend on rxjava to accept instance of rxjava instead of creating one themselves (see how libraries use gson ok moshi and so on) as a user you will have full control over schedulers so its up to you to share them between rxjava instances or not || my 2) point relates to @abersnaze s  comment: you either have to capture the `rx` or tag it along with many operatorsthe next problem i see is that libraries have to provide api to accept the `rx` factory but there is no guarantee theyll do it and run on their own internal factory and no chance of overriding that otherwise if the libraries are willing to accept extra parameters they could also accept user-provided schedulers thus we can keep the current style of jumpstarting sequencesthe final problem is the conversion of 3700+ unit tests some use standard sources some use custom `onsubscribe` code it took me 25 weeks to convert from 1x to 2x plus quite a lot of new tests were added in the past 9 months to 1x that have to be ported as wellpersonally i think switching to the reactive-streams style as well as the `flowable`/`obserable` swapping is enough change for 2x the extra indirection requires learning an even more different style and may burden all uses of the library to manage this `rx`-context objectsince this issue is triggered by the lack of scheduler customization in 3rd party libraries the alternative solution could be to simply dont have operators with default schedulers on `flowable` etc but always mandate one explicitlyfinally i encourage you to create a prototype fork from the current 2x master and see how and what it takes switch to the suggested style || i dont think this is a necessary change judging by the arguments current form and i dont really agree with the blanket statements used to justify ""global state is bad""> a lot of libraries use rxjava nowadays when you want to change some behavior of rxjava for your code or some library in particular you also affect all other code that uses rxjava in your programto me a library that defers to this rather than their own scheduler is simply saying that they defer to what the consumer wants theyre aware of this if they need a specific scheduler they should use their own or accept it as a parameter you could just as easily flip this around to say that library developers then lose the ability to easily defer to the execution environment and now have to add these annoying parameters everywhere to force the user to pass in their instance this opens up other cans of worms too: per-library? per-class? per-usage? whats the convention? why cant there be a default?> any change of global state in multithreaded runtime is dangerousthis statement is far too general and not really valid justification imo you should really be specific as to what states youre referring to and why theyre dangerous it seems to me your main issue is with the plugins/hooks api which i argue farther down is equally as prone to bad developers doing stupid things as non-static apis are> because of thread-safety required for this global state rxjava has to apply atomic/synchronized operations to access it in many parts of rx chains lifecycle which degrades performance a little bitcan you quantify this? if its negligible (which i believe it is) then i dont really think it matters even if it did schedulers are already cached and plugins are only set once so the perf impact largely only affects the first user the only time this would happen frequently is in tests where perf is much less of an issue> some parts of hooks done through system properties some via explicit api not very consistenti think we all agree the current 1x hook system is not ideal there is already a new hooks api in 2x so i think this is a false comparison> rxjava makes multithreading easy and immutability of the data that goes through rx chains is a must have but library itself is not immutable thats awkward because rxjava brings a lot of functional aspects and immutability is fundamental to the conceptagain its just the hooks and plugins i would argue these are a small-but-necessary evil to that give rxjava much of its flexibility > what i think of is to make rxjava instantiable and remove all shared state between rxjava instances just like any other normal library such as retrofit moshi ok (mostly) and othersthese are not valid comparisons different libraries with different usage and purposes you instantiate retrofit objects because its one object per service not one global object thats passed around moshi has a lot of stateful internals that make an instance unique whereas rxjava only has a handful of these they are also not used as ubiquitously as rxjava is a more valid example would be something like `timber` can you imagine if you had to inject that everywhere you wanted to use it? simple classes utility methods etc all suddenly require di or an extra parameteri dont agree with those that would argue that anything and everything should be injected with di and mockable which this seems to be partially motivated by like everything else the answer is ""it depends"" in rxjavas case i think the flexibility to use it via static apis is part of what makes it so appealing and powerful the plugins and hooks are invisible to most users currently and forcing this to a system where everything is an instance that must be passed around seems like major overkillthis seems like an issue that largely revolves around the sticky 1x plugins api but you didnt talk at all about the improved rewrite of it that already exists in 2x id like to know whats wrong with that rather than generalized ""plugins are stateful therefor rx is stateful therefore everything is dangerous"" vibe that the current argument seems to revolve around---as brief counter-examples:**if the goal is better testing support:** i wrote a nice test rule that lets you set schedulers on the fly for testing and is quite clean simply add your rule and call appropriate setters on it as needed in your tests state is always cleared before and after to ensure clean and isolated states not all doom and gloom**if the goal is to make state immutable and not dangerous:** it seems to me the crux of this argument is around preventing programmers from writing dangerous code someone could still accidentally set schedulersio() to use a main thread scheduler theres only so much you can do to protect against people doing bad things to restructure an entire framework just to make something that largely invisible to most users has sensible default configurations and obvious when misconfigured seems like a massive overreaction---to be clear im not coming out 100% against this i _do_ think there needs to be much better reasons to do this than what have been presented so far || my main concern for a change like this is just the ease of use this proposal adds a lot of boilerplate to rxjava codingitd be especially weird coding when youre doing nested actions like `flatmap` since youd need to repeatedly use the `rxjava` instance inside of it eg``` javarxjavaflow()from(somestream)    flatmap(item -> rxjavaflow()from(itemgetitems()))``` || @hzsweers> you could just as easily flip this around to say that library developers then lose the ability to easily defer to the execution environment and now have to add these annoying parameters everywhere to force the user to pass in their instancetrue until you use schedulers to test that code you either need to pass/accept schedulers or override them with hooks> this opens up other cans of worms too: per-library? per-class? per-usage? whats the convention? why cant there be a default?up to you you can setup one `rxjava` for `retrofit` and another for `sqlbrite` or have one per app the choice is what this proposal is about> thread safetyok your app is running you need to apply hook how do you guarantee expected behavior for both already running rx chains and new ones?hooks look pretty similar to `ok interceptors api in v3 you cant now add/remove them without creating new `ok one of the reasons was thread safety for consumer code> if the goal is to make state immutable and not dangerousyes thats one of the goals---@dlew you can just name `rxjava` instance `rx` ``` javaflatmap(item -> observablefrom(itemgetitems()))```tomorrow:``` javaflatmap(item -> rxflow()from(itemgetitems()))```> this proposal adds a lot of boilerplate to rxjava codingyeah i agree that its quite easy to use current static api and thats not the reason of why this proposal was created its more about immutability of library itself and safety in multithreaded environment + ability to configure it precisely for some use-cases without affecting others || ok lets close it for now anyway im happy to receive your feedback guys and we can now refer to this discussion in future thanks everybody  ";;;;0;1;;
4003;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a;;0;moe sync 2020-08-31;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> update public suffix datathe copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedatesac1b252294c4c5547384b86d40345e59e3dedc8a;;;;;1;1;update public suffix datathe copy is typically updated whenever chromes copy is updated whichis roughly every 6 weeks subscribe to the chrome milestone calendar to see thedates-------------created by moe: https://githubcom/google/moemoe_migrated_revid329222572;
4003;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a;;0;slashes in main file directory setting;jabref version jabref 42 on windows 10 (100 amd64) on java 180_171(windows version: windows 10 education version 1709 os build 16299371)steps to reproduce:set main file directory in options>preferences>file using the browse button -> results in instability of jabrefs graphic user interface with multiple problems (apparently at random) in brief different parts of the user interface becoming unavailable (entry editor main list of references search field locking up or accepting input but not displaying the typed in text) steps to solve:replace back slashes in path definition with forward slashesseems to occur with different databases new and old;the main file directory only accepts an absolute path  if you need to have some relative dirs you have to set them under library properties  could you please check if you got a error message in help-> view event log?if you cant access it plrease try to start jabrefjar from the commandline with java -jar jabrefjar  || closing this issue due to inactivity   please reopen the issue with additional information if the problem persists ||;;;;0;1;;
4003;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a;;0;"when does prestopreparedstatement support executequery not just throw notimplementedexception(""preparedstatement"" ""executequery"")";;i suppose that this is handled by  pull request hope it well get in soon ||  was merged closing this ticket if you still have issues feel free to re-open ||;;;;0;1;;
4003;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-08-31;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a;;0;rxjavapluginsgetinstance();hello i am trying to create a custom errorhandler for rxjava and while trying to get the rxjavaplugins instance to register the errorhandler it does not seem to be giving me access to the `getinstance()`public static methodi checked the rxjavaplugins class and saw that `getinstance()` is actually public i can not understand though why i can not access it i am using rxjava 115;what ide are you using? is the jre/jdk properly setup in your project? what is the actual error message when you write `rxjavapluginsgetinstance()`? || i am using android studio jre and jdk are correctly setup for the project there is no error message actually it just does not seem to have an available method called getinstance()  || are you sure your import points to `rxpluginsrxjavaplugins`? || @egor-n yes that was my first check  || actually it was an ide problem could not pinpoint exactly what was causing it i am closing the issue per se  ||;;;;0;1;;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;0;[macos] native menus & javafx;my understanding is that jabref switch to javafx since 40 since then macos users no longer have native menus (last version with native menus was 38) im curious whether this was intended or just a side effect of switching to javafx if this was not intended are there plans to bring back native menus?;yes this was a negative side-effect of our partial transition to javafx we are currently working hard to finish the migration the current development version  already brings back support for native menus a few bugs still need to be ironed-out (see  for an overview of known issues) but you are happily invited to try out this version and report any issues you encounter closing since this is  in the dev build || glad to read that thanks for the reply! ||;;;;0;1;;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;0;update 0127 release notes;;;;;;0;1;;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;4012.0;moe sync 2020-09-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65; cla:yes per #4012 ||; typos/grammatical errors;i just ran stuff through grammar checkers and found some typos/grammatical errors since i only added some small changes i didnt think i needed to do anything special like open an issue or something but if i should in the future please tell me if you think i got some stuff wrong ill fix it but there are definitely some typos in there;thanks im going to merge the typo fixes and a simplification the rest of the changes look more neutral (and a few of them look like steps backward) in the interest of getting this merged quickly ill stick to the noncontroversial ones || two of these changes are typo fixes but _none_ of them fixes a grammatical error four go from correct to differently correct one goes from correct to differently correct but definitely less clear one goes from correct to incorrect one goes from debatably correct to definitely incorrect and one goes from correct code formatting to incorrect code formatting || thanks for your feedback i went and changed what i thought you were talking about and now there are only more correct changes (i think) if there is anything else please let me know and sorry about the code formatting i dont know whats going on with that || ok i  everything you said now its just the bare minimal typos ||;1;0;remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482;
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;4017.0;1x: add asynccompletablesubscriber that exposes unsubscribe();this pr adds a default abstract base class with unsubscription support for `completable`s `completablesubscriber`pros: direct slim classcons: people probably used `subscriber(action0)` or `subscribe(subscriber)` so farrelated: #4017;;1x: why is completablesubscriber not a subscription?;i see that `completablesubscriber` is not a `subscription` but `subcription` is so when i use `completable#subscribe(completablesubscriber)` i cannot then unsubscribe if i want to;`completablesubscriber` was designed along the reactive-streams pattern where cancellation support is injected via `onsubscribe` call consumers extending `completablesubscriber` then can decide individually if they want to expose this cancellation support to the outside world by implementing `subscription` themselves in contrast `subscriber` can never revoke its ability to be unsubscribed externallyif you are using `subscribe()` or the lambda versions of `subscribe` you get a `subscription` back as for the `subscribe(completablesubscriber)` indeed we dont have a supporting class for it (as far as i remember) ill post a pr for it today || closing via #4020 ||;1;0;1x: add asynccompletablesubscriber that exposes unsubscribe();
4020;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make closingfuture available in open-source guava (@beta).  relnotes= util.concurrent : add  closingfuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> fix typos and remove unnecessary words.  4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> bump checker-qual from 2.11.1 to 3.5.0.  for unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. but at least it gets us on the newest major version. that makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> remove spurious annotation to fix travis build.  f106608d0c58c2c67dcd56e638ace73472768f65;;4018.0;moe sync 2020-09-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make closingfuture available in open-source guava (@beta)relnotes`utilconcurrent`: add `closingfuture`48851566428571694e62dee9f277d9833e78f17a-------<p> fix typos and remove unnecessary words401212c9012b0bde00a99cd454f1af6d90b1e5e11508-------<p> bump checker-qual from 2111 to 350for unfortunate reasons involving internal legacy infrastructure this is easier than merging #4018 but at least it gets us on the newest major version that makes it easier to see that its safe to resolve a conflict between say 350 and 361 by just using the newer onea2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d-------<p> remove spurious annotation to fix travis buildf106608d0c58c2c67dcd56e638ace73472768f65; cla:yes per #4012 ||;bump checker-qual from 2111 to 361;; gets us _part_ of the way there (at least to major version 3 which as youve pointed out is the especially important part)bonus: we may actually make a guava release pretty soon || thanks for upgrading to 350 ||;1;0;remove spurious annotation to fix travis buildrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid331770482;
4025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make equalstester test that non-strings are not equal to their string representation.  relnotes=make equalstester test that non-strings are not equal to their string representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;0;moe sync 2020-09-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make equalstester test that non-strings are not equal to their string representationrelnotesmake equalstester test that non-strings are not equal to their string representation5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;;;;1;1;make equalstester test that non-strings are not equal to their string representationrelnotesmake equalstester test that non-strings are not equal to their string representation-------------created by moe: https://githubcom/google/moemoe_migrated_revid331970427;
4025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make equalstester test that non-strings are not equal to their string representation.  relnotes=make equalstester test that non-strings are not equal to their string representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;0;groups are focused on right-click;"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> -  i have tested the latest master version from  and the problem persistsjabref version 42 on windows 7 61 amd64 java 180_161<!-- hint: if you use a development version (available at  ensure that you use the latest one -->i am using a database with 12000+ entries and a large number of keyword groups which are arranged in a hierarchical tree (via using sub groups) in the group dialog the sub branches of the group tree can be folded or unfolded via the small arrow symbols at the right side further it is possible to right-click on a group or sub-group and get a context menu which allows to ""add selected entries to this group"" the problem is that already clicking on the fold/unfold symbol immediately affects the filtering status of the main entry list also right-clicking on a group or subgroup has the same effect in jabref-3x it was possible to fold/unfold a sub branch by clicking on a ""+"" symbol without changing the filtering state in the entry viewer also getting the context menu via right-clicking did not change the filtering state currently when i add a new literature entry and want to connect it with some keyword groups it is not possible to do this via the right-clicking context menu because at the moment of right-clicking my entry disappears from the main list (because at the moment of righ-clicking it is not yet in that group but filtering becomes immediately effective) an alternative way is to drag-drop the literature entry onto a group element however in case of nested subgroups the subbranch needs to be unfolded first and by unfolding the subgroup the literature entry again disappears in the main entry list thus the way to do this is- find the right place in the group list and unfold the required subbranches of subgroups - scroll to the top of the group list and click on ""all entries""- scroll back to the place where the desired subbranch is unfolded- in some cases it is again required to find and mark the literature entry in the entry list (which temporarily disappeared)- finally drag-drop the literature entry onto the subgroupa second workaround is right-clicking on the literature entry and select ""add to group"" in the context menu however this opens a separate dialog box with the same list of groups which again needs scrolling and unfolding of subgroups and allows for selecting only one group per time in case of multiple group selections this dialog box has to be opened for each group individually and always starts at the top of the group list with all sub branches folded both workarounds are rather cumbersome a ""simple"" (at least conceptually simple im not aware of the coding details) solution would be preventing the group filtering in the main entry window upon right-clicking on a group or upon clicking on the small arrow for folding/unfolding the filtering should become effective only upon clicking with the left mouse button onto a group name at least in jabref-3x it always worked this way ";this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || dear tobias diezthank you for pointing this out i have tried the current development version today (installation file: jabref_windows-x64_5_0-dev--snapshot--2018-08-16--master--a880addc0exe) on windows 10 and can confirm that i can again right-click on the group entries without filtering the literature entrieshowever in the pre-50 version there seem a few other issues that i didn’t see before in previous versionsfirst in the literature entry viewer the entry numbers seem to have gone this is not a big deal and possibly they can be switched on/off via some options settings which i did not bother to find yetnext if i double-click on a literature entry for getting the editing dialoge the screen layout gets distorted in some casesfor some entries it seems ok:for other entries the screen layout gets distorted:after closing the edit dialog (by clicking on the blue cross) i am left with a non-functional screen:my first thought was that it might depend on the entry type however it seems to depend on the length of the author’s list if there are many authors the width of the dialog form field gets too large and this seems to cripple the screen layouti have tested this on a fresh windows 10 enterprise installation please check if you could reproduce this behaviour if needed i could provide some of my literature entries where i observed this behaviourwith best regardsandreas pflug--dr andreas pflug andreaspflug@istfraunhoferde<mailto:andreaspflug@istfraunhoferde>head of group simulationfraunhofer institute for surface engineering and thin films istbienroder weg 54e 38108 braunschweigt: +49 (0) 531 2155 629 – f: +49 (0) 531 2155 900von: tobias diez <notifications@githubcom>gesendet: mittwoch 13 juni 2018 17  jabref/jabref <jabref@noreplygithubcom>cc: pflug andreas <andreaspflug@istfraunhoferde> author <author@noreplygithubcom>betreff: re: [jabref/jabref] groups are focused on right-click (#4025)this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version—you are receiving this because you authored the threadreply to this email directly view it on github< or mute the thread< < || @andre8s: thanks for the feedback!the number in front of the entries was indeed completely removed we couldnt think of a use case where this number would be helpful for the user and thus removed it to make room for more important information why do you miss it?the other issue that you mention sounds like a real bug to me can you please open a new issue here on github and add an example entry for which this problem occurs (and maybe readd the screenshots that gone missing when you posted via mail)  dear tobiasthank you for your feedback and sorry for my late response recent weeks were quite busy and in the meantime i migrated to another laptop which is running win10i have now switched from jabref 431 to the latest snapshot of 2018-11-07 it seems that this version is somewhat more stable i do not get the corrupted screen anymore and the memory consumption seems also stable – even after adding numerous new literature entriesi have observed a few minor issues which i would like to summarize in the following·         group interface: it is now possible to right-click onto a group without immediately setting the group focus however o   if the tiny little arrows to fold / unfold sub-groups are clicked it will still immediately apply the group-focus currently my workaround is keeping most subgroups unfolded but this seems not optimalo   if i have selected a literature entry right-click on a group and klick “add selected entries to this group” and if i have a search phrase in the search field above the literature entry list at the same time it still works but the literature entry gets de-selected (ie i have to re-select it before attaching it to another group) this does not happen if the search field is emptyo   the dialog “attach to group” which is obtained by right-clicking on a literature entry does not work properly anymore the additional group window appears but after some time also the context menu reappears and jabref tends to crash·         literature entry list:o   if there is a search phrase in the search field and i want to make another search i usually click on the little cross at the right end of the search field in order to make it empty and then type my new search phrase however if there was some literature entry selected at the same time after clicking the cross in the search field the focus will afterwards be set to the author field of that literature entry when typing my new search phrase i am suddenly finding myself overwriting the author field of the literature entry if no literature entry was selected this does not happen ie the focus remains in the search fieldo   if i manually add a new entry i have to click on “new article” and afterwards right-click on the entry in case the entry type is different in former versions i could select the entry type right-away·         pdf linkingo   i usually linked pdfs to my literature entry by drag-dropping the pdf file to the line of the literature entry in the newest snapshot this does only work if the pdf contains additional bibtex info --> then a dialog box pops out asking me if i want to include the bibtex info or just link the pdf to the entry however if there is no bibtex info in the pdf the dialogbox doesn’t turn up and the drag-drop action is being ignored a workaround seems dragging the pdf into the edit section of the literature entry in the lower part of the window (meaning that the literature entry might have to be double-clicked in order to open the edit section)since the overall stability seems improved compared to version 431 i will try working with the 5* snapshot versions from now onwith best regardsandreas pflugvon: tobias diez <notifications@githubcom>gesendet: donnerstag 16 august 2018 18  jabref/jabref <jabref@noreplygithubcom>cc: pflug andreas <andreaspflug@istfraunhoferde> mention <mention@noreplygithubcom>betreff: re: [jabref/jabref] groups are focused on right-click (#4025)@andre8s< thanks for the feedback!the number in front of the entries was indeed completely removed we couldnt think of a use case where this number would be helpful for the user and thus removed it to make room for more important information why do you miss it?the other issue that you mention sounds like a real bug to me can you please open a new issue here on github and add an example entry for which this problem occurs (and maybe readd the screenshots that gone missing when you posted via mail) thanks!—you are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || @andre8s  thanks for your reply most the issues regarding groups are already known issues hereplease do yourself and us a favor and check for existing issues and or open a new one  if you cant find anything related to your problem this helps us to keep the overviewedit// the pdf behaviour is correct and was reworked entry editor + preview are possible options to drop a pdf onto an existing entry dropping on the main table asks the import dialog or tries to import ||;;;;0;1;;
4025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make equalstester test that non-strings are not equal to their string representation.  relnotes=make equalstester test that non-strings are not equal to their string representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;0;disable parallel with smart builder by default;there are issues with being aggressively parallel running tests for presto there aregenerally not enough resources on a typical laptop to use the smart builder with 8 threadswe are also seeing issues with the maven-release-plugin;;;;;0;1;;
4025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make equalstester test that non-strings are not equal to their string representation.  relnotes=make equalstester test that non-strings are not equal to their string representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c;;0;question about onerror propagation in completable#onerrorcomplete;i was just browsing some of the source code to get a better understanding and i stumbled upon [ line) isnt there a call to `sonerror(e)` missing?;good catch! || see #4027 || closing via #4027 ||;;;;0;1;;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;0;merge policy for branch 2x until release candidate 1;"in #4016 i havent detailed the merge policy for the 20 branch here is my proposition:until we reach rc 1 (26/8/2016) the **merge first discuss after** approach is to become the main theme of  branch **2x** the general rule is that prs to be merged have to pass at least the existing unit tests please avoid merging prs that have obviously/deterministically failing tests ""to be  later""## terminology- primary api  the base reactive classes (eg flowable connectablex groupedx) its base reactive interfaces (eg observer completablesubscriber) and the fusion api elements (eg queuesubscription conditionalsubscriber)- secondary api  default public implementations of base interfaces (asyncsubscriber) schedulers etc- internal api  everything with the package name containing `internal`## merges and :+1:sno :+1: needed for:- any pull request that adds or updates functionality: bugfixes new operators or overloads performance enhancements fusion enhancements adding common or marker interfaces pulling out common functionality into helper classes- unit test additions and fixes- prs deleting internal functionality or methods on internal classesi have no strong feelings about marking additions to the public api as `@beta` or `@experimental` at this stage i defer to the judgement of the poster of the pr how strong he/she feels about it (there is going to be an api finalization round/discussion before rc 1)these rules should help with cases that have triggered lengthy discussions in the past and disagreements about how to proceed one notorious example is the `asynconsubscribe` with these rules @stealthcode is free to add and merge the operator into 2x (provided tests still pass) a second example was about `publishprocessor` if i believe it is not mandatory a `processor` coordinates downstream and upstream requests the pr can be merged in both cases disagreeing parties may post their own alternative implementations (under a different name) with the expected behavior/apiplease be considerate with updating someone elses recent addition especially if it involves changes to its public surface api (if any)also please add a reasonable amount unit tests to new operators overloads and updates (ie make sure the operator actually works in the most basic synchronous scenario) there is going to be a sync with 1x unit tests before rc 1 and possibly other unit tests based on code coverage toolswriting operators/sources in the reactive-streams style by itself is more difficult than in 1x style ill post a (wiki?) article about the minimum requirements a 2x operator has to adhere to writing fusion-enabled operators adds another level of complexity therefore it is not required prs support operator-fusion out of boxrequires at least 1 :+1:- deleting elements of the primary api that have been marked `@deprecated` in 2x itself- deleting elements of the primary api that are `@deprecated` `@beta` or `@experimental` in 1x- deleting from secondary public api- renaming packages moving things (classes methods) between internal and public apis- marking elements `@deprecated` `@beta` or `@experimental` in 2x- disabling or deleting unit tests that are no longer valid/meaningful for 2xrequires at least 2 :+1:- deleting elements from the primary api that have matching established feature(s) (ie not marked as `@deprecated` `@beta` or `@experimental`) in 1x the only exception to this rule is the removal of the protected constructors of the base reactive types these will to be removed due to the architecture change## ties or dormant prsin case a controversy lengthy discussion or ties in :+1: and :-1: happen i reserve the right to be the tiebreaker and make the closing decisioni consider a pr dormant if the original poster ""disappears"" and doesnt respond at least for a week please dont post a prs and the go to vacation immediately prs that turn out to be dormant may be closed after 10 days by any collaborator## api finalizationdepending on how fast the changes happen there is going to be an api finalization round/discussion before rc 1 is released (naturally you dont have to wait till then and have suggestions before that)the aim is to stabilize the api for rc 1 and allow popular libraries to start developing their own rxjava 2x based solutions depending on this early feedback rc 2 and rc3 may have further api adjustments---let me know if there is any other case to be addressed or something needs further clarification";sounds good!as we are in the development mode i wouldnt bother with annotation (`@beta` `@experimental` ) we can decide about that during the rc phase || :+1:for code coverage i will submit a pr to use `codecovio` like rxjs:   || rc1 released ||;;;;0;1;;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;0;fix casing in java file name;i think `test` is wrong it should be `test`;;;;;1;1;fix casing in java file name;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;0;fix jackson deser issue in example- connector;3704 this change is required for the jackson library to deserialize the `addresses` field;wonderful guys thanks for fixing this || thanks  ||  @nezihyigitbasi thanks for tracking this down! the `arraylist` part seems to not be relevant it looks like jackson is introspecting the private properties and is getting confused however i dont know why it would even be looking at those since the `addresses` field should not be serialized (the getter does not have `@jsonproperty` and we have disabled all the automatic features) if that field is getting serialized we should figure out why and file a bug against jackson it is possible that some new flags we missed disabling when upgrading jackson are the cause:  || @electrum exactly i was surprised to see that jackson was serializing/deserializing a field thats not a json property but still wanted to fix it until we find the root cause || i consider adding `@jsonignore` a more straightforward fix this bug seems to apply to everything we have a custom `*jacksonmodule` ive ran into this previously in hivetablelayouthandle || below solution from [so]( also works it seems like the configured mapper has full visibility into a given instance``` java@jsonautodetect(        creatorvisibility  jsonautodetectvisibilitynone        fieldvisibility  jsonautodetectvisibilitynone        gettervisibility  jsonautodetectvisibilitynone        isgettervisibility  jsonautodetectvisibilitynone        settervisibility  jsonautodetectvisibilitynone)public class examplesplit``` ||;;;;0;1;;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4007.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;issue #4004 assertionerror from rangegap;4004 got iae instead of assertionerror;  thanks i suspect that what wed prefer is to avoid calling `describeaslowerbound` at all in this case but id have to look at `gap` more to confirm (and to figure out what to do instead) || i think the problem is the ranges contain each other(intersection) it is illegal for `gap`and i made an opposite case```java rangeatmost(3)gap(rangeatmost(2))``````shelljavalangassertionerror	at comgooglecommoncollectcut$belowalldescribeasupperbound(cutjava:165)	at comgooglecommoncollectrangetostring(rangejava:677)	at comgooglecommoncollectrange<init>(rangejava:358)	at comgooglecommoncollectrangecreate(rangejava:156)	at comgooglecommoncollectrangegap(rangejava:583)```so i added the ranges check for the `gap`ptal   || sounds reasonable thanks would you also:- add your tests for the assertionerror cases- include the 2 input ranges in the exception message || @cpovirk  i added the test and the invalid ranges in the iae message  || thanks i got another set of eyes on this and hopefully well get it submitted internally and merged out soon ||;1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4004.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;assertionerror from rangegap;@zhanhb [reports]( at comgooglecommoncollectcut$abovealldescribeaslowerbound(cutjava:259)	at comgooglecommoncollectrangetostring(rangejava:674)	at comgooglecommoncollectrange<init>(rangejava:357)	at comgooglecommoncollectrangecreate(rangejava:155)	at comgooglecommoncollectrangegap(rangejava:582)```;;1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4029;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix assertionerror from range.gap.  4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> fix random typos in guava.  fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> externally restore @donotmock to closingfuture.combiner  and externally add @donotmock to closingfuture itself.  this implements an alternative workaround for   replacing the one submitted in cl 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;;4021.0;moe sync 2020-09-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix assertionerror from rangegap4007 #400488593a07f3a04163f2c68cf323a54cd8f8efdd03-------<p> fix random typos in guavafixes #40211102d11be3bbe534a5a569832aeb0099aa0eaa61-------<p> add back webapp to public suffix listd12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d-------<p> externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 3317704827b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5;; typos;i found multiple typos in comments and class names so i  it;"according to dictionarycom it is in fact ""interruptible"" not ""interruptable"" || thanks i changed it back || ";1;0;externally restore @donotmock to closingfuturecombiner and externally add @donotmock to closingfuture itselfthis implements an alternative workaround for  replacing the one submitted in cl 331770482relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332225001;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;0;shortittle bibtexkeypattern now also discards small words;feature request in the forum: describe the changes you have made here:        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);as i have tested this and already prepared an update to the help page i am going to merge this now ||;;;;1;1;fix test;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;0;enforce cpu time limit in sqlquerymanager;logic is very similar to existing clustermemorymanager adding necessary config hooks;looks like youre missing some tests see travis || please dont use passive voice for commit messages || @yangyangyyy please address my comments and also rebase on latest trunk let me know when you finish || @cberner can you do a final pass on this one? || ;;;;0;1;;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;0;2x: first step switching to the reduced-allocation architecture;this is the first step towards the new architecture where operator implementations are themselves of the base type instead of a 2-3 layer indirection as in 1xthis pr removes the instance field `onsubscribe` from the base reactive classes and introduces `subscribeactual` to be overridden with the custom operator logic now on existing operators are still working through the classical onsubscribe/lift indirection and will be updated in subsequent prsnaming and existence of `subscribeactual` is up for (post-merge) discussion to recap the method is needed so that the default `subscribe` method can be made final and ensure plugin hooks can be called (once available) the method is protected and only affects operator implementors that chose to extend the base reactive classes directly the alternative is to leave `subscribe` abstract and add a hook to every operator method (for example see [this]( and [this](https://githubcom/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/pxjava#l162);lgtm ;;;;1;1;2x: first step switching to the reduced-allocation architecture;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;4002.0;moe sync 2020-09-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix unsupportedoperationexception from treerangesetsubrangeset()add()4019 #40023685507ce36e24f111cabb45c6d5c5dd26565aad-------<p> deal with class#isinstance checks which are guaranteed to be false2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71-------<p> change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes https://githubcom/google/guava/issues/4028204904cbe79852e29aec2e461273f9b6112bd2f9;;unsupportedoperationexception when modify treerangesetsubrangeset(range);"unable to modify subrangeset returned by treerangesetsubrangeset(range)imo it should be availiable to do so as specified in the document```javaimport comgooglecommoncollectrangeimport comgooglecommoncollecttreerangesetimport orgjunitjupiterapitest@suppresswarnings(""unstableapiusage"")public class subrangesettest {    @test    public void testadd() {        treerangeset<integer> set  treerangesetcreate()        range<integer> range  rangeclosedopen(0 5)        setsubrangeset(range)add(range)    }    @test    public void testreplaceadd() {        treerangeset<integer> set  treerangesetcreate()        range<integer> range  rangeclosedopen(0 5)        setadd(range)        setsubrangeset(range)add(range)    }}``````javalangunsupportedoperationexception	at javabase/javautilabstractmapput(abstractmapjava:209)	at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:266)	at comgooglecommoncollecttreerangesetadd(treerangesetjava:216)	at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)	at subrangesettesttestadd(subrangesettestjava:12)``````javalangunsupportedoperationexception	at comgooglecommoncollectunmodifiableiteratorremove(unmodifiableiteratorjava:46)	at comgooglecommoncollectiteratorsclear(iteratorsjava:985)	at comgooglecommoncollectmaps$iteratorbasedabstractmapclear(mapsjava:3562)	at comgooglecommoncollecttreerangesetadd(treerangesetjava:214)	at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)	at subrangesettesttestreplaceadd(subrangesettestjava:20)```";"thanks that sounds like a bug to me tooi see a slightly different stack trace (with both guava-290-jrejar and guava-290-androidjar) so the exact failure may depend on the guava version:```# -jreexception in thread ""main"" javalangunsupportedoperationexception  at javabase/javautilabstractmapput(abstractmapjava:209)  at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:266)  at comgooglecommoncollecttreerangesetadd(treerangesetjava:216)  at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:894)  at issue4002main(issue4002java:8)# -androidexception in thread ""main"" javalangunsupportedoperationexception  at javabase/javautilabstractmapput(abstractmapjava:209)  at comgooglecommoncollecttreerangesetreplacerangewithsamelowerbound(treerangesetjava:268)  at comgooglecommoncollecttreerangesetadd(treerangesetjava:218)  at comgooglecommoncollecttreerangeset$subrangesetadd(treerangesetjava:899)  at issue4002main(issue4002java:8)```sorry for the trouble we will have a look || presumably because we dont implement `put` in `subrangesetrangesbylowerbound` || this is a stacktrace of ~~subrangesetremove~~ replace existing range it should meet the same stacktrace(unsupportedoperationexception) ~~over all guava versions~~ since 180 and stackoverflowererror from 140 to 170 || oh thanks i pasted from the email (which has the original text from your post) its good to know that both add _and_ remove fail || the codes and stacktraces updated || `subrangeset` was part of the initial `rangeset` in guava 140 calling `add` against that version i get a `stackoverflowerror` :) i havent checked whether `add` worked in some intermediate version`remove` at least is a successful no-op under 140 so thats a definite regression || oh sorry youre saying that `remove` is ok but that `add` is broken -- both in the case in which `add` has to remove an existing range and in the case in which it doesnt || (`add` is broken at least as far back as guava 200) || ";1;0;change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes  by moe: https://githubcom/google/moemoe_migrated_revid332443901;
4030;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-18;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add(...).  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9;;4019.0;moe sync 2020-09-18;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix unsupportedoperationexception from treerangesetsubrangeset()add()4019 #40023685507ce36e24f111cabb45c6d5c5dd26565aad-------<p> deal with class#isinstance checks which are guaranteed to be false2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71-------<p> change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes https://githubcom/google/guava/issues/4028204904cbe79852e29aec2e461273f9b6112bd2f9;;issue #4002 unsupportedoperationexception when modify treerangesetsubrangeset(range);the same implementation as `remove`;;1;0;change `forwardingmapremove(object)` parameter name from `object` to `key` to match `mapremove(object key)`fixes  by moe: https://githubcom/google/moemoe_migrated_revid332443901;
4035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add brief test to range for  [_  x].isconnected([x  _])    relnotes: n/a  4629a25981b1ff667315d481fc21bcb094d436dc;;0;moe sync 2020-09-22;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add brief test to range for `[_ x]isconnected([x _])`relnotes: n/a4629a25981b1ff667315d481fc21bcb094d436dc;;;;;1;1;add brief test to range for `[_ x]isconnected([x _])`relnotes: n/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid332926985;
4035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add brief test to range for  [_  x].isconnected([x  _])    relnotes: n/a  4629a25981b1ff667315d481fc21bcb094d436dc;;0;use javafx-native svgpath for logo in about dialog;instead of requiring an additional library for rendering one svg image the javafx-native [svgpath]( should be usedremoving the dependency `decodecentriccenterdevice 130` also removed the transitive dependency on apache commons io so its usages had to be removedthis is part of #3421 -----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;use javafx-native svgpath for logo in about dialog;
4035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add brief test to range for  [_  x].isconnected([x  _])    relnotes: n/a  4629a25981b1ff667315d481fc21bcb094d436dc;;0;replace deprecated jsonfactory api calls;this pr replaces the deprecated `jsonfactory` api calls `createjsongenerator()` and `createjsonparser()`;;;;;0;1;;
4035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-09-22;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add brief test to range for  [_  x].isconnected([x  _])    relnotes: n/a  4629a25981b1ff667315d481fc21bcb094d436dc;;0;consider adding zip function with observable array for reduced overhead;currently the `zip` function takes an iterable in the form `iterable<? extends observable<?>> ws` and then is transformed into an array:```list<observable<?>> os  new arraylist<observable<?>>()for (observable<?> o : ws) {    osadd(o)}return observablejust(ostoarray(new observable<?>[ossize()]))lift(new operatorzip<r>(zipfunction))```this causes not only the copy from one list to another but also a copy from the created list to the array which will add some overhead if the list is big enoughinstead consider adding the following function:```public static <r> observable<r> zip(observable<?> ws funcn<? extends r> zipfunction) {    return observablejust(ws)lift(new operatorzip<r>(zipfunction))}```so whoever who has the chance to create an array instead of a list will save some cpu timeid be glad to create a pull request with the related code to any specified branch if neededthanks for your attention;it should be a straightforward addition with minimal api surface expansion cost pr is welcome ||;;;;0;1;;
5252;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-09-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea;;0;opening preferences generates exception;<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev<!-- important note -><!--       please always test if the bug is still reproducible in the latest development version      we are constantly improving jabref and some bugs may already be       you can download the development version at:       please make a backup of your library before you try out this version      if you already use a development version ensure that you use the latest one -->-  i have tested the latest development version from  and the problem persists<!-- add a clear and concise description of what the bug is -->theres an exception when opening the preference dialogsteps to reproduce the behavior:1 open preference dialog<!-- if applicable add excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>exception</summary>    ```javaniofilefilesystemalreadyexistsexception	at jdkzipfs/jdkniozipfszipfilesystemprovidernewfilesystem(zipfilesystemproviderjava:102)	at javabase/javaniofilefilesystemsnewfilesystem(filesystemsjava:344)	at javabase/javaniofilefilesystemsnewfilesystem(filesystemsjava:293)	at orgjabreflogiccitationstylecitationstylediscovercitationstyles(citationstylejava:147)	at orgjabrefguiutilbackgroundtask$1call(backgroundtaskjava:46)	at orgjabrefguiutildefaulttaskexecutor$1call(defaulttaskexecutorjava:122)	at javafxconcurrenttask$taskcallablecall(taskjava:1425)	at javabase/javautilconcurrentfuturetaskrun(futuretaskjava:264)	at javabase/javautilconcurrentexecutors$runnableadaptercall(executorsjava:515)	at javabase/javautilconcurrentfuturetaskrun(futuretaskjava:264)	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1128)	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:628)	at javabase/javalangthreadrun(threadjava:834)  ```</details>;please next time look for already open issues duplicate of #5246  ||;;;;0;1;;
5252;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-09-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea;;0;warn if server is not using g1 garbage collector;;;;;;0;1;;
5252;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-09-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea;;0;add nullpointerexception comment for doc;nothing special;;;;;0;1;;
5252;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-09-29;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes to classpath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> internal changes to classpath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> remove unnecessary parens  4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> also print android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> fix classpathtest on android jdk 11.  037e10c0da8159c06fa471142ae923dceb03e4ea;;4036.0;moe sync 2020-09-29;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal changes to classpath643423a88d854deb863fa08f550a6e41d2823df5-------<p> internal changes to classpathb7e83b114f95f5b776ed60f5932420e5c5fc24ad-------<p> remove unnecessary parens403630c69a1ff047f8dad3abef2c315c305e052da0b2-------<p> also print android test failures0644480db466a331b7bd9fa7a8690f37d05ddda2-------<p> fix classpathtest on android jdk 11037e10c0da8159c06fa471142ae923dceb03e4ea; setting `cla: yes` because the commit by another author is derived directly from pr #4036 from that author ||;remove unnecessary parens;this pr is related to pr #3191in #3191 unnecessary parens in `pairedstats` were omitted but its similar class `stats` was not touchedi found unnecessary parens in the class so removed;    ;1;0;fix classpathtest on android jdk 11relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid334217434;
5256;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;0;moe sync 2020-10-01;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fully remove gwt-rpc support externallyreally really closes  future work:- be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes (for those files it probably acts only as documentation (of something that is pretty obvious :)) our open-source build used to take action when it saw `@gwtcompatible(emulatedtrue)` but (a) it doesnt anymore (b) those files dont exist externally anymore and (c) they werent `emulatedtrue` :) i believe that our internal build requires @gwtcompatible on most files in our gwt target but i think theres an exception for gwt-target-only sources)- remove some of the gwtserializationdependencies classes however some of these classe are set up as *supertypes* of our prod classes so this would require some surgery keeping them is harmless: it doesnt actually make the classes gwt-serializable- remove the usages of serializabletrue on @gwtcompatible at least externally but maybe just entirelyrelnotes[guava types can no longer be sent over gwt-rpc]( even the earlier temporary way to reenable support (`guavagwtemergency_reenable_rpc`) no longer has an effect4d2eb90089e9115cb00477b815289a2fe56e8a24-------<p> mark bigdecimalmathtest as fully @gwtincompatiblecurrently it has every member annotated as @gwtincompatible this works fine internally but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt //githubcom/google/guava/blob/master/guava-gwt/test/com/google/common/math/bigdecimalmathtest_gwtjava0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;;;;1;1;mark bigdecimalmathtest as fully @gwtincompatiblecurrently it has every member annotated as @gwtincompatible this works fine internally but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt: by moe: https://githubcom/google/moemoe_migrated_revid334778309;
5256;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;0;latex-unicode conversion & capitalization in jr 5 testversion?;jabref 50-dev--snapshot--2019-08-27--master--84436d795linux 500-25-generic amd64 java 1104in jr 431 (current release) one can right click in a field in the entry editor and a number of highly valuable utilities are offered including converting character encoding between latex and unicode capitalization etc  these features have been removed from jabref 5  i very much hope that they come back since they are exceptionally useful features;this is odd i was not aware that this was modified duplicate of #5254  ||;;;;0;1;;
5256;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;0;varchar(x) in remaining connectors;use `createunboundedvarchartype` explicitly instead of `varchartypevarchar` constant in remaining connectors not covered by separate pr;;;;;0;1;;
5256;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-01;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c;;0;2x: fix flatmapiterable appearing to be empty when fused;the wrong logical expression in the `isempty()` method made `flatmapiterable` complete earlier even if data was available in the current iterablesomewhat related:  (different logical bug in the same method); merging 5256 ;;;;1;1;2x: fix flatmapiterable appearing to be empty when fused;
5258;0;0;0;1;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e;;0;moe sync 2020-10-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> begin tweaking guava sources to satisfy copybara- change from  to  (and from githubio links to guavadev/truthdev while im at it)- remove go/ links- add whitespace around moe directives- put moe stripping directives alone in comments moving other comment text to a separate comment- one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (ie /* */) it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment?- add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targetsthis is surely not a complete set of changes but its enough to get me startedb5dce621aed0d374d3abc000eb51cb513e7b496e;;;;;1;1;begin tweaking guava sources to satisfy copybara- change from  to  (and from githubio links to guavadev/truthdev while im at it)- remove go/ links- add whitespace around moe directives- put moe stripping directives alone in comments moving other comment text to a separate comment- one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (ie /* */) it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment?- add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targetsthis is surely not a complete set of changes but its enough to get me startedrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid334840448;
5258;0;0;0;1;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e;;0;installation issues for version 431;i try to use the newest jabref version as i get these freezes you reported at ( however i am continuously getting the following error:```error: could not find or load main class orgjabrefjabrefmaincaused by: javalangnoclassdeffounderror: javafx/application/application```i use ubuntu 1804 and try with jabref version 431 from  far i tried:your install instructions:  fail at line: `install: sudo apt-get install oracle-java8-installer`you claim at  that jabref is supporting java 11 or higher however in your installation instructions ( you say it does not support java 11nevertheless i tried java 11 using the `default-jdk` package including `openjfx` which was reported to work:   > no luck see error aboveas you claim supporting 11 or higher i installed oracle java 12 as well (similar to  > see error abovethen i went back to good old java 8 (openjdk) using your install instructions for openjfx from  the version launches however i get weird behavior using the search field in the top bar (the cursor does not move when using the arrow keys) and i get the stacktrace appended at the end of the issuefor now i switch back to the jabref version from the ubuntu packages by using `sudo apt-get install jabref`stacktrace:```file: grouptreefxml not found attempting with camel casefile: grouptreecss not found attempting with camel casejavalangnullpointerexception	at comsunjavafxsgprismngtextrendertext(ngtextjava:297)	at comsunjavafxsgprismngtextrendercontent2d(ngtextjava:270)	at comsunjavafxsgprismngshaperendercontent(ngshapejava:261)	at comsunjavafxsgprismngnodedorender(ngnodejava:2053)	at comsunjavafxsgprismngnoderender(ngnodejava:1945)	at comsunjavafxsgprismnggrouprendercontent(nggroupjava:235)	at comsunjavafxsgprismngregionrendercontent(ngregionjava:577)	at comsunjavafxsgprismngnoderenderforclip(ngnodejava:2294)	at comsunjavafxsgprismngnoderenderrectclip(ngnodejava:2188)	at comsunjavafxsgprismngnoderenderclip(ngnodejava:2214)	at comsunjavafxsgprismngnodedorender(ngnodejava:2047)	at comsunjavafxsgprismngnoderender(ngnodejava:1945)	at comsunjavafxsgprismnggrouprendercontent(nggroupjava:235)	at comsunjavafxsgprismngregionrendercontent(ngregionjava:577)	at comsunjavafxsgprismngnodedorender(ngnodejava:2053)	at comsunjavafxsgprismngnoderender(ngnodejava:1945)	at comsunjavafxtkquantumviewpainterdopaint(viewpainterjava:477)	at comsunjavafxtkquantumviewpainterpaintimpl(viewpainterjava:323)	at comsunjavafxtkquantumuploadingpainterrun(uploadingpainterjava:134)	at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511)	at javautilconcurrentfuturetaskrunandreset(futuretaskjava:308)	at comsunjavafxtkrenderjobrun(renderjobjava:58)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624)	at comsunjavafxtkquantumquantumrenderer$pipelinerunnablerun(quantumrendererjava:125)	at javalangthreadrun(threadjava:748)10 32777 [awt-eventqueue-1] error orgjabreffallbackexceptionhandler - uncaught exception occurred in thread[awt-eventqueue-16main]javalangnullpointerexception: null	at comsunjavafxtextprismtextlayoutgetcaretshape(prismtextlayoutjava:317) ~[jfxrtjar:?]	at javafxscenetexttext$textattribute$11computevalue(textjava:1787) ~[jfxrtjar:?]	at javafxscenetexttext$textattribute$11computevalue(textjava:1777) ~[jfxrtjar:?]	at javafxbeansbindingobjectbindingget(objectbindingjava:153) ~[jfxrtjar:?]	at javafxbeansbindingobjectexpressiongetvalue(objectexpressionjava:50) ~[jfxrtjar:?]	at javafxbeanspropertyobjectpropertybaseget(objectpropertybasejava:132) ~[jfxrtjar:?]	at comsunjavafxscenecontrolskintextfieldskinlambda$new$4(textfieldskinjava:233) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelper$singleinvalidationfirevaluechangedevent(expressionhelperjava:137) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelperfirevaluechangedevent(expressionhelperjava:81) ~[jfxrtjar:?]	at javafxbeanspropertyobjectpropertybasefirevaluechangedevent(objectpropertybasejava:105) ~[jfxrtjar:?]	at javafxbeanspropertyobjectpropertybasemarkinvalid(objectpropertybasejava:112) ~[jfxrtjar:?]	at javafxbeanspropertyobjectpropertybaseaccess$000(objectpropertybasejava:51) ~[jfxrtjar:?]	at javafxbeanspropertyobjectpropertybase$listenerinvalidated(objectpropertybasejava:233) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelper$singleinvalidationfirevaluechangedevent(expressionhelperjava:137) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelperfirevaluechangedevent(expressionhelperjava:81) ~[jfxrtjar:?]	at javafxbeansbindingobjectbindinginvalidate(objectbindingjava:172) ~[jfxrtjar:?]	at javafxscenetexttextimpl_geomchanged(textjava:769) ~[jfxrtjar:?]	at javafxscenetexttextneedstextlayout(textjava:194) ~[jfxrtjar:?]	at javafxscenetexttextneedsfulltextlayout(textjava:189) ~[jfxrtjar:?]	at javafxscenetexttextaccess$200(textjava:95) ~[jfxrtjar:?]	at javafxscenetexttext$2invalidated(textjava:389) ~[jfxrtjar:?]	at javafxbeanspropertystringpropertybasemarkinvalid(stringpropertybasejava:109) ~[jfxrtjar:?]	at javafxbeanspropertystringpropertybaseaccess$000(stringpropertybasejava:49) ~[jfxrtjar:?]	at javafxbeanspropertystringpropertybase$listenerinvalidated(stringpropertybasejava:230) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelper$singleinvalidationfirevaluechangedevent(expressionhelperjava:137) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelperfirevaluechangedevent(expressionhelperjava:81) ~[jfxrtjar:?]	at javafxbeansbindingstringbindinginvalidate(stringbindingjava:171) ~[jfxrtjar:?]	at comsunjavafxbindingbindinghelperobserverinvalidated(bindinghelperobserverjava:51) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelper$genericfirevaluechangedevent(expressionhelperjava:349) ~[jfxrtjar:?]	at comsunjavafxbindingexpressionhelperfirevaluechangedevent(expressionhelperjava:81) ~[jfxrtjar:?]	at javafxscenecontroltextinputcontrol$textpropertyfirevaluechangedevent(textinputcontroljava:1389) ~[jfxrtjar:?]	at javafxscenecontroltextinputcontrol$textpropertymarkinvalid(textinputcontroljava:1393) ~[jfxrtjar:?]	at javafxscenecontroltextinputcontrol$textpropertyset(textinputcontroljava:1324) ~[jfxrtjar:?]	at javafxscenecontroltextinputcontrolsettext(textinputcontroljava:349) ~[jfxrtjar:?]	at orgjabrefguisearchglobalsearchbarclearsearch(globalsearchbarjava:328) ~[jabref-431jar:?]	at orgjabrefguisearchglobalsearchbarperformsearch(globalsearchbarjava:356) ~[jabref-431jar:?]	at orgjabrefguibasepanel$searchlistenerlisten(basepaneljava:2095) ~[jabref-431jar:?]	at sunreflectgeneratedmethodaccessor14invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_222]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_222]	at comgooglecommoneventbussubscriberinvokesubscribermethod(subscriberjava:87) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriber$synchronizedsubscriberinvokesubscribermethod(subscriberjava:144) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriber$1run(subscriberjava:72) ~[jabref-431jar:?]	at comgooglecommonutilconcurrentmoreexecutors$directexecutorexecute(moreexecutorsjava:398) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriberdispatchevent(subscriberjava:67) ~[jabref-431jar:?]	at comgooglecommoneventbusdispatcher$perthreadqueueddispatcherdispatch(dispatcherjava:108) ~[jabref-431jar:?]	at comgooglecommoneventbuseventbuspost(eventbusjava:212) ~[jabref-431jar:?]	at orgjabrefmodeldatabasebibdatabaserelayentrychangeevent(bibdatabasejava:582) ~[jabref-431jar:?]	at sunreflectgeneratedmethodaccessor7invoke(unknown source) ~[?:?]	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43) ~[?:180_222]	at javalangreflectmethodinvoke(methodjava:498) ~[?:180_222]	at comgooglecommoneventbussubscriberinvokesubscribermethod(subscriberjava:87) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriber$synchronizedsubscriberinvokesubscribermethod(subscriberjava:144) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriber$1run(subscriberjava:72) ~[jabref-431jar:?]	at comgooglecommonutilconcurrentmoreexecutors$directexecutorexecute(moreexecutorsjava:398) ~[jabref-431jar:?]	at comgooglecommoneventbussubscriberdispatchevent(subscriberjava:67) ~[jabref-431jar:?]	at comgooglecommoneventbusdispatcher$perthreadqueueddispatcherdispatch(dispatcherjava:108) ~[jabref-431jar:?]	at comgooglecommoneventbuseventbuspost(eventbusjava:212) ~[jabref-431jar:?]	at orgjabrefmodelentrybibentryclearfield(bibentryjava:483) ~[jabref-431jar:?]	at orgjabrefmodelentrybibentryclearfield(bibentryjava:455) ~[jabref-431jar:?]	at orgjabrefmigrationsmergereviewintocommentmigrationupdatefields(mergereviewintocommentmigrationjava:73) ~[jabref-431jar:?]	at orgjabrefmigrationsmergereviewintocommentmigrationmigrate(mergereviewintocommentmigrationjava:66) ~[jabref-431jar:?]	at orgjabrefmigrationsmergereviewintocommentmigrationlambda$performmigration$2(mergereviewintocommentmigrationjava:32) ~[jabref-431jar:?]	at javautilstreamforeachops$foreachop$ofrefaccept(foreachopsjava:183) ~[?:180_222]	at javautilstreamreferencepipeline$2$1accept(referencepipelinejava:175) ~[?:180_222]	at javautilstreamreferencepipeline$2$1accept(referencepipelinejava:175) ~[?:180_222]	at javautiliteratorforeachremaining(iteratorjava:116) ~[?:180_222]	at javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801) ~[?:180_222]	at javautilstreamabstractpipelinecopyinto(abstractpipelinejava:482) ~[?:180_222]	at javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:472) ~[?:180_222]	at javautilstreamforeachops$foreachopevaluatesequential(foreachopsjava:150) ~[?:180_222]	at javautilstreamforeachops$foreachop$ofrefevaluatesequential(foreachopsjava:173) ~[?:180_222]	at javautilstreamabstractpipelineevaluate(abstractpipelinejava:234) ~[?:180_222]	at javautilstreamreferencepipelineforeach(referencepipelinejava:485) ~[?:180_222]	at orgjabrefmigrationsmergereviewintocommentmigrationperformmigration(mergereviewintocommentmigrationjava:32) ~[jabref-431jar:?]	at orgjabrefguiimporteractionsmergereviewintocommentactionperformaction(mergereviewintocommentactionjava:21) ~[jabref-431jar:?]	at orgjabrefguiimporteractionsopendatabaseactionperformpostopenactions(opendatabaseactionjava:93) ~[jabref-431jar:?]	at orgjabrefjabrefguiopenwindow(jabrefguijava:186) ~[jabref-431jar:?]	at orgjabrefjabrefgui<init>(jabrefguijava:67) ~[jabref-431jar:?]	at orgjabrefjabrefmainlambda$start$1(jabrefmainjava:128) ~[jabref-431jar:?]	at javaawteventinvocationeventdispatch(invocationeventjava:311) [?:180_222]	at javaawteventqueuedispatcheventimpl(eventqueuejava:758) [?:180_222]	at javaawteventqueueaccess$500(eventqueuejava:97) [?:180_222]	at javaawteventqueue$3run(eventqueuejava:709) [?:180_222]	at javaawteventqueue$3run(eventqueuejava:703) [?:180_222]	at javasecurityaccesscontrollerdoprivileged(native method) [?:180_222]	at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(protectiondomainjava:74) [?:180_222]	at javaawteventqueuedispatchevent(eventqueuejava:728) [?:180_222]	at orggnomeaccessibilityatkwrapper$6dispatchevent(atkwrapperjava:715) [java-atk-wrapperjar:?]	at javaawteventdispatchthreadpumponeeventforfilters(eventdispatchthreadjava:205) [?:180_222]	at javaawteventdispatchthreadpumpeventsforfilter(eventdispatchthreadjava:116) [?:180_222]	at javaawteventdispatchthreadpumpeventsforhierarchy(eventdispatchthreadjava:105) [?:180_222]	at javaawteventdispatchthreadpumpevents(eventdispatchthreadjava:101) [?:180_222]	at javaawteventdispatchthreadpumpevents(eventdispatchthreadjava:93) [?:180_222]	at javaawteventdispatchthreadrun(eventdispatchthreadjava:82) [?:180_222]```;431 still requires java 8 and openjfx 850 alpha and all newer releases require java 11please not that we lack resources to support more than the most current master version ubuntu apt package has the very old 38 version i thinkalternatively you can also install the snap version  of jabref:  (edge for the latest master release) ||;;;;0;1;;
5258;0;0;0;1;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e;;0;add atop connector;;other than some minor comments the process management is my only real concern   || added two commits to address the comments will squash them before merging || github is being a bit buggy so ill repeat my comment: can you add a test that hangs and test that the code cleans up correctly? || ;;;;0;1;;
5258;0;0;0;1;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e;;5249.0;1x use intellij ide friendly assertion failure message;"the `assertitem` failure message pattern in `testsubscriber` does not match any of the regex patterns defined by intellij to show `<click to see difference>` link ![before]( changing the ""_expected to be_"" to ""_expected:_"" the pattern is recognised by intellij and the helpful link is presented![after]( original idea from #5249 was to use the ""_expected:<> but was:<>_"" pattern used in junit but it is not picked up on its own by intellij the assertionerror must extend from junits comparisonfailure to get it recognised this however requires dependency on junit![junit]( in the end the fix is just a very simple change in the message"; merging 5258 ;1x 2x use ide friendly assertion failed statements;"currently the assertitem prints by the following statements focus on ""_expected to be_"private void assertitem(t expected int i) {        t actual  valuesget(i)        if (expected  null) {            // check for null equality            if (actual ! null) {                assertionerror(""value at index: "" + i + "" expected to be [null] but was: ["" + actual + ""]\n"")            }        } else if (!expectedequals(actual)) {            assertionerror(""value at index: "" + i                    + "" expected to be ["" + expected + ""] ("" + expectedgetclass()getsimplename()                    + "") but was: ["" + actual + ""] ("" + (actual ! null ? actualgetclass()getsimplename() : ""null"") + "")\n"")        }    }```however it does not match any of the intellij assertion regex patterns thus making it very difficult to visually compare expected and actual values we forked `assertitem()` using one of the following patterns from [this]( and could immediately see the `<click to see difference>` link in the ide";"pr welcome || @mtiidla is 2x also affected? || @akarnokd could you please choose the most pleasing pattern from the intellij class i linked to? if you dont have any preference then i would go with expected_but_was_pattern as junit4 is using it `""expected:<"" + expected + ""> but was:<"" + actual + "">""`@vanniktech the output is different but also not recognized for example the following code:`observablejust(""test"")test()assertvalue(""test"")`produces: _expected: test (class: string) actual: test (class: string)_ and there is no link presented by intellij to compare the output (i have also edited the issue title with 2x) || the junit pattern is fine with me || ";1;0;fix test subscriber test case;
5263;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove gwt tests from open source.  we will continue to run these tests internally.  i m not sure how much value the remaining open-source gwttestsuite file provides us. hopefully it s at least a sanity check on .gwt.xml files. but i haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> tweak todos.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> remove a couple gwtserializationdependencies classes from open-source guava after all.  as noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. as *also* noted there  we have *additional* foogwtserializationdependencies classes that i m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  but i m removing these 2 because it saves me a few lines in the copybara config :)  (followup after   cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;0;moe sync 2020-10-05;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove gwt tests from open sourcewe will continue to run these tests internallyim not sure how much value the remaining open-source gwttestsuite file provides us hopefully its at least a sanity check on gwtxml files but i havent tested by breaking a gwtxml file to see what happens5773612ad40c7ab38e2cc8e5dd5a526d5b672652-------<p> tweak todos58855f44498d1dd61cfad4f812a14bac2079e71c-------<p> remove a couple gwtserializationdependencies classes from open-source guava after allas noted in 0cb89dd110ce88770207889901e95ea2ac896932 this isnt necessary as *also* noted there we have *additional* foogwtserializationdependencies classes that im leaving in place because they are *supertypes* of the prod classes and thus harder to removebut im removing these 2 because it saves me a few lines in the copybara config :)(followup after https://githubcom/google/guava/issues/3680)cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;;;;1;1;remove a couple gwtserializationdependencies classes from open-source guava after allas noted in 0cb89dd110ce88770207889901e95ea2ac896932 this isnt necessary as *also* noted there we have *additional* foogwtserializationdependencies classes that im leaving in place because they are *supertypes* of the prod classes and thus harder to removebut im removing these 2 because it saves me a few lines in the copybara config :)(followup after  by moe: https://githubcom/google/moemoe_migrated_revid335047921;
5263;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove gwt tests from open source.  we will continue to run these tests internally.  i m not sure how much value the remaining open-source gwttestsuite file provides us. hopefully it s at least a sanity check on .gwt.xml files. but i haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> tweak todos.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> remove a couple gwtserializationdependencies classes from open-source guava after all.  as noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. as *also* noted there  we have *additional* foogwtserializationdependencies classes that i m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  but i m removing these 2 because it saves me a few lines in the copybara config :)  (followup after   cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;0;spurious text included with copied previews;"jabref 50-dev--snapshot--2019-08-30--master--66b7fe3aflinux 500-25-generic amd64 java 11041 open the entry editor2 select the required fields tab3 a right column displays the formatted entry (attached image)![screenshot from 2019-08-30 14-17-24]( right-click the preview and select ""copy""5 the result in the clipboard is this: ```       function highlight(text) {            var innertxt  documentbodyinnertext            var response  innertxtreplace(new regexp(text gi) str > `<span stylebackground-color:red>${str}</span>`)            documentbodyinnerhtml  response        }    acharya d 2006 vācaspatimiśra’s tattvasamīkṣā the earliest commentary on mandanamiśra’s brahmasiddhi critically edited with an introduction and critical notes nepal research centre publications stuttgart: franz steiner verlag```that spurious ""function highlight(text){} "" gets included with all copies";"the javascript code is from the highlighting for search results in the entry preview seems like the entry preview is copied as html if you  use the ctrl +c and ctrl +v it should work without issues || jabref 50-devlinux 500-27-generic amd64 java 180_222cannot confirm this issue for the current snap version of jabref note that the current snap version does not incorporate the preview in the entry editor as shown above so the issue might actually persist and if that is the case it might have been introduced with the changes made to the preview and the entry editor || the snap build has been  so that it now also runs with java 11 and the automatic build should also be working again for future updatescould you please test that version and report back if the error still occurs?@aegit you are now also able to run the newest version without modifying the default java env as jabref now ships with all required java dependencies linux use the targz archive it now contains a start script as well || jabref 50-devlinux 500-27-generic amd64 java 1104i can confirm that this issue is fixed in the latest dev-version || sorry need to re-open this as it is still not working properly for me in latest dev builds || moreover: using the ""copy preview"" functionality from the main table context menu does not work at all || jabref 50-devlinux 500-29-generic amd64 java 1104@matthiasgeiger i have tried to reproduce the issues that you report in  and  with the latest snap version (--edge channel) but i still do not manage to: everything works as expected for me can you provide a minimum example of a database where you run into these issues? || meanwhile i have performed some analysis: the problem is caused by different paste-targets: when the target is able to interpret html formatted text it is working fine - if you use a tool supporting only plain text not (eg windows editor) ill try to work on a fix in the next days 😀 || @matthiasgeiger you are absolutely right now i can confirm the issues you report if i use a simple text editor as paste target i never thought that the paste target would make a difference well spotted! || the embedded javascript comes from n the search highlight function its added when the citation style is loaded in the web view so technically its correct that its also shown in paste if the target does not interpret html  || well yes and no the remainder of the html code is stripped off before ie the text formatting code is not shown when pasting into a plain text editor ill try to implement the copy action in a way that the plain format does not contain any formatting information but the html content is preserved for editors supporting thatthe question is what should be pasted if someone explicitly wants to copy html/xml/ and pastes this to a plain text editor the stripped version without formatting or the code including all html/xml tags? || both html and plain ""text"" are offered separately already so the ""text"" option should not have html codes  it should be plain text  seem the two menu choices in the attached screenshot![screenshot from 2019-09-22 09-39-28]( || i think one of the problems is that these methods set html and string together normally you want to use putstring and puthtml together and then the target application chooses which representation it wants to use  || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-07----facda00c1linux 500-31-generic amd64 java 1104i confirm the fix  many  jabref 500-dev--2019-10-17----e81d58c51windows 10 100 amd64 java 1202can confirm that this has been fixed in the current dev version || ";;;;0;1;;
5263;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove gwt tests from open source.  we will continue to run these tests internally.  i m not sure how much value the remaining open-source gwttestsuite file provides us. hopefully it s at least a sanity check on .gwt.xml files. but i haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> tweak todos.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> remove a couple gwtserializationdependencies classes from open-source guava after all.  as noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. as *also* noted there  we have *additional* foogwtserializationdependencies classes that i m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  but i m removing these 2 because it saves me a few lines in the copybara config :)  (followup after   cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;0;the partition/table schema compatibility check in hivesplitmanager is not working as expected for external tables;method `tablegetsd()getcols()` and `partitiongetsd()getcols()` only work for managed table but not external tables the `getcols()` methods in `orgapachehadoophiveqltable/partition` would work for all types of tables;the test error doesnt seem to relate to the change is there anyway to rerun the ci test? || i restarted the build || @wenleix can you please provide the steps to reproduce this issue? ie the steps in hive to create an external table that doesnt have column metadata in the hive metastore || i just did an experiment presto seems to work fine without this pull request did i miss something?```hive> create external table test_hjin_external_partitioned(    >   a string    > )    > partitioned by (pk string)    > row format delimited fields terminated by \001    > stored as textfile    > location hdfs://localhost:8020/user/hive/warehouse/test_hjin_external_partitionedoktime taken: 003 secondshive> alter table test_hjin_external_partitioned add partition(pka)oktime taken: 0137 secondshive> alter table test_hjin_external_partitioned add partition(pkb)oktime taken: 0167 seconds``````presto:default> select * from test_hjin_external_partitioned  a  | pk-----+---- iop | b jkl | b bnm | b qwe | a asd | a zxc | a(6 rows)query 20160603_175402_00006_77rcx finished 1 node 3 total 3 done (10000%)cpu time: 00s total   600 rows/s 234kb/s 1% activeper node: 00 parallelism     7 rows/s    28b/sparallelism: 000:01 [6 rows 24b] [7 rows/s 28b/s]``` || @haozhun thank you for the experiments! this shows my issue description is not accurate as you noted the root cause is not because of the external table but where the schema comes from the issue raised when the table schema is from serde rather than from the table storagedescriptor i will try to provide an example that reproduces this issue later :)  || @wenleix and i agreed offline that this is a very specific issue of their setup closing ||;;;;0;1;;
5263;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-05;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove gwt tests from open source.  we will continue to run these tests internally.  i m not sure how much value the remaining open-source gwttestsuite file provides us. hopefully it s at least a sanity check on .gwt.xml files. but i haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> tweak todos.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> remove a couple gwtserializationdependencies classes from open-source guava after all.  as noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. as *also* noted there  we have *additional* foogwtserializationdependencies classes that i m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  but i m removing these 2 because it saves me a few lines in the copybara config :)  (followup after   cb6023b3285ba8c2b6c249c7ef977df2baac2b65;;0;the parallelflowables behavior of the cancel method had been changed between 206 and 207;in the case that a parallelflowable was subscribed by an array of subscribers when one subscriber calls the cancel method the parallelflowable stops emitting and all the subscribers dont get any items on 206however i upgraded to 207 the parallelflowable stops emitting to only the subscriber which called the cancel method and the others keep getting itemsi wonder which one would be the expected behaviorto me 207s behavior makes more sense;see #5117 || thank you i didnt check this issue since i thought that this issue is about an exception handling ||;;;;0;1;;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;0;2x: remove commented out code in ioscheduler;removes some code that was commented out in `ioscheduler` those lines were last edited in 2 years ago so i assume they should be safe to delete; merging 5268 ;;;;1;1;remove commented out code from ioscheduler;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;0;no implicit coercion in semijoin;presto:tiny> explain select orderkey from orders where orderkey in (values 39301 39330)                                                         query plan----------------------------------------------------------------------------------------------------------------------------- - output[orderkey] > [orderkey:bigint]     - remoteexchange[gather] > orderkey:bigint         - project > [orderkey:bigint]             - filter[""semijoin_result""] > [orderkey:bigint semijoin_result:boolean]                 - project > [orderkey:bigint semijoin_result:boolean]                     - semijoin[orderkey  field] > [orderkey:bigint $hashvalue:bigint semijoin_result:boolean]                         - project > [orderkey:bigint $hashvalue:bigint]  <----- orderkey is bigint                                 $hashvalue : ""combine_hash""(bigint 0 coalesce(""$operator$hash_code""(""orderkey"") 0))                             - tablescan[tpch orders:sf001 originalconstraint  true] > [orderkey:bigint]                                     orderkey : tpch:orderkey                         - remoteexchange[repartition] > field:integer $hashvalue_6:bigint                             - project > [field:integer $hashvalue_7:bigint]                                     $hashvalue_7 : ""combine_hash""(bigint 0 coalesce(""$operator$hash_code""(""field"") 0))                                 - values > [field:integer]                <----- integer                                         (39301)                                         (39330)``````presto:tiny> select orderkey from orders where orderkey in (values 39301 39330)query 20160512_175141_00023_e9yg3 failed 4 nodes 21 total 6 done (2857%)cpu time: 00s total     0 rows/s     0b/s 0% activeper node: 00 parallelism     0 rows/s     0b/sparallelism: 000:00 [0 rows 0b] [0 rows/s 0b/s]query 20160512_175141_00023_e9yg3 failed: expected one bigint parameterjavalangillegalargumentexception: expected one bigint parameter    at comgooglecommonbasepreconditionscheckargument(preconditionsjava:122)    at comfacebookprestotpchtpchnodepartitioningprovidergetbucketfunction(tpchnodepartitioningproviderjava:82)    at comfacebookprestosqlplannernodepartitioningmanagergetpartitionfunction(nodepartitioningmanagerjava:78)    at comfacebookprestosqlplannerlocalexecutionplannerplan(localexecutionplannerjava:312)    at comfacebookprestoexecutionsqltaskexecution<init>(sqltaskexecutionjava:157)    at comfacebookprestoexecutionsqltaskexecutioncreatesqltaskexecution(sqltaskexecutionjava:119)    at comfacebookprestoexecutionsqltaskexecutionfactorycreate(sqltaskexecutionfactoryjava:73)    at comfacebookprestoexecutionsqltaskupdatetask(sqltaskjava:275)    at comfacebookprestoexecutionsqltaskmanagerupdatetask(sqltaskmanagerjava:314)    at comfacebookprestoservertaskresourcecreateorupdatetask(taskresourcejava:123)    at sunreflectgeneratedmethodaccessor403invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:498)    at orgglassfishjerseyservermodelinternalresourcemethodinvocationhandlerfactory$1invoke(resourcemethodinvocationhandlerfactoryjava:81)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcher$1run(abstractjavaresourcemethoddispatcherjava:144)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherinvoke(abstractjavaresourcemethoddispatcherjava:161)    at orgglassfishjerseyservermodelinternaljavaresourcemethoddispatcherprovider$responseoutinvokerdodispatch(javaresourcemethoddispatcherproviderjava:160)    at orgglassfishjerseyservermodelinternalabstractjavaresourcemethoddispatcherdispatch(abstractjavaresourcemethoddispatcherjava:99)    at orgglassfishjerseyservermodelresourcemethodinvokerinvoke(resourcemethodinvokerjava:389)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:347)    at orgglassfishjerseyservermodelresourcemethodinvokerapply(resourcemethodinvokerjava:102)    at orgglassfishjerseyserverserverruntime$2run(serverruntimejava:326)    at orgglassfishjerseyinternalerrors$1call(errorsjava:271)    at orgglassfishjerseyinternalerrors$1call(errorsjava:267)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:315)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:297)    at orgglassfishjerseyinternalerrorsprocess(errorsjava:267)    at orgglassfishjerseyprocessinternalrequestscoperuninscope(requestscopejava:317)    at orgglassfishjerseyserverserverruntimeprocess(serverruntimejava:305)    at orgglassfishjerseyserverapplicationhandlerhandle(applicationhandlerjava:1154)    at orgglassfishjerseyservletwebcomponentserviceimpl(webcomponentjava:473)    at orgglassfishjerseyservletwebcomponentservice(webcomponentjava:427)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:388)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:341)    at orgglassfishjerseyservletservletcontainerservice(servletcontainerjava:228)    at orgeclipsejettyservletservletholderhandle(servletholderjava:845)    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1689)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1676)    at ioairlift    at orgeclipsejettyservletservlethandler$cachedchaindofilter(servlethandlerjava:1676)    at orgeclipsejettyservletservlethandlerdohandle(servlethandlerjava:581)    at orgeclipsejettyserverhandlerscopedhandlerhandle(scopedhandlerjava:143)    at orgeclipsejettyserverhandlergzipgziphandlerhandle(gziphandlerjava:396)    at orgeclipsejettyserverhandlercontexthandlerdohandle(contexthandlerjava:1176)    at orgeclipsejettyservletservlethandlerdoscope(servlethandlerjava:511)    at orgeclipsejettyserverhandlercontexthandlerdoscope(contexthandlerjava:1106)    at orgeclipsejettyserverhandlerscopedhandlerhandle(scopedhandlerjava:141)    at orgeclipsejettyserverhandlerhandlercollectionhandle(handlercollectionjava:119)    at orgeclipsejettyserverhandlerstatisticshandlerhandle(statisticshandlerjava:169)    at orgeclipsejettyserverhandlerhandlerlisthandle(handlerlistjava:52)    at orgeclipsejettyserverhandlerhandlerwrapperhandle(handlerwrapperjava:134)    at orgeclipsejettyserverserverhandle(serverjava:518)    at orgeclipsejettyserver    at orgeclipsejettyserver    at orgeclipsejettyioabstractconnection$readcallbacksucceeded(abstractconnectionjava:273)    at orgeclipsejettyiofillinterestfillable(fillinterestjava:95)    at orgeclipsejettyioselectchannelendpoint$2run(selectchannelendpointjava:93)    at orgeclipsejettyutilthreadstrategyexecuteproduceconsumeproduceandrun(executeproduceconsumejava:246)    at orgeclipsejettyutilthreadstrategyexecuteproduceconsumerun(executeproduceconsumejava:156)    at orgeclipsejettyutilthreadqueuedthreadpoolrunjob(queuedthreadpooljava:654)    at orgeclipsejettyutilthreadqueuedthreadpool$3run(queuedthreadpooljava:572)    at javalangthreadrun(threadjava:745)```";this is a duplicate of  ||  by:  select orderkey from orders where orderkey in (values 39301 39330) orderkey ----------    39301     39330 (2 rows)``` ||;;;;0;1;;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;5124;bump checkstyle from 823 to 824;"bumps [checkstyle]( from 823 to 824<details><summary>release notes</summary>*sourced from [checkstyles releases]( ## checkstyle-824>  [`8b7af1a`]( [maven-release-plugin] prepare release checkstyle-824- [`d73c15a`]( doc: add 824 release notes- [`8561843`]( issue 6771]( use violation/problem term in it/resources instead of error- [`88a7991`]( minor: refactoring of line endings- [`f0029b7`]( issue [#6771]( use violation term in test/resources instead of error- [`6c264e5`]( issue [#5124]( remove usages of branchcontains for designforextensioncheck- [`808b750`]( config: bump jgit to 542- [`bf0420a`]( config: bump picocli to 403- [`4c490dc`]( issue [#7021]( add test to run sun_checksxml- [`5a2520b`]( issue [#2116]( switch wercker to use forked equalsverifier and special branch - additional commits viewable in [compare view]( />[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency (including time of day and day of week)- automerge options (never/patch/minor and dev/runtime dependencies)- pull request limits (per update run and/or open at any time)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;library has been modified > crash;"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev on arch<!-- important note -><!--       please always test if the bug is still reproducible in the latest development version      we are constantly improving jabref and some bugs may already be       you can download the development version at:       please make a backup of your library before you try out this version      if you already use a development version ensure that you use the latest one -->-  i have tested the latest development version from  and the problem persists<!-- add a clear and concise description of what the bug is -->jabref tells me that ""the library has been modified by another program"" even if this is not the case if i choose ""review changes"" i see one entry for ""metadata change"" and several hundreds of ""added entry"" clicking on ""metadata change"" in the list shows ""metadata change"" on the right where we usually differences are depicted clicking on any of the ""added entry"" just gives no description accepting the ""changes"" will immediately lead to a new notification of changes which when accepted give a null pointer exceptionsteps to reproduce the behavior:1 use jabref2 problem will eventually occur after waking up from sleep mode or even spontaneously<!-- if applicable add excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>exception</summary>    ```javalangnullpointerexception	at javafxcollectionslistchangebuilderfinalizesubchange(listchangebuilderjava:552)	at javafxcollectionslistchangebuilderfinalizesubchangearray(listchangebuilderjava:546)	at javafxcollectionslistchangebuildercommit(listchangebuilderjava:524)	at javafxcollectionslistchangebuilderendchange(listchangebuilderjava:541)	at javafxcollectionsobservablelistbaseendchange(observablelistbasejava:205)	at javafxcollectionsmodifiableobservablelistbaseaddall(modifiableobservablelistbasejava:102)	at javafxcollectionsfxcollections$synchronizedlistaddall(fxcollectionsjava:1049)	at orgjabrefmodeldatabasebibdatabaseinsertentries(bibdatabasejava:232)	at orgjabrefmodeldatabasebibdatabaseinsertentry(bibdatabasejava:206)	at orgjabrefmodeldatabasebibdatabaseinsertentry(bibdatabasejava:194)	at orgjabrefguicollabentryaddchangeviewmodelmakechange(entryaddchangeviewmodeljava:25)	at orgjabrefguicollabchangedisplaydialoglambda$new$393(changedisplaydialogjava:58)	at javafxscenecontroldialogimpl_setresultandclose(dialogjava:1026)	at javafxscenecontroldialogpanelambda$createbutton$3(dialogpanejava:777)	at comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218)	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at comsunjavafxeventeventutilfireevent(eventutiljava:49)	at javafxeventeventfireevent(eventjava:198)	at javafxscenenodefireevent(nodejava:8413)	at javafxscenecontrolbuttonfire(buttonjava:185)	at comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(buttonbehaviorjava:182)	at comsunjavafxscenecontrolskinbehaviorskinbase$1handle(behaviorskinbasejava:96)	at comsunjavafxscenecontrolskinbehaviorskinbase$1handle(behaviorskinbasejava:89)	at comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218)	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at comsunjavafxeventeventutilfireevent(eventutiljava:49)	at javafxeventeventfireevent(eventjava:198)	at javafxscenescene$mousehandlerprocess(scenejava:3757)	at javafxscenescene$mousehandleraccess$1500(scenejava:3485)	at javafxscenesceneimpl_processmouseevent(scenejava:1762)	at javafxscenescene$scenepeerlistenermouseevent(scenejava:2494)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:394)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:295)	at javasecurityaccesscontrollerdoprivileged(native method)	at comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(glassvieweventhandlerjava:432)	at comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(quantumtoolkitjava:389)	at comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(glassvieweventhandlerjava:431)	at comsunglassuiviewhandlemouseevent(viewjava:555)	at comsunglassuiviewnotifymouse(viewjava:937)	at comsunglassuigtkgtkapplicationenternestedeventloopimpl(native method)	at comsunglassuigtkgtkapplication_enternestedeventloop(gtkapplicationjava:211)	at comsunglassuiapplicationenternestedeventloop(applicationjava:511)	at comsunglassuieventloopenter(eventloopjava:107)	at comsunjavafxtkquantumquantumtoolkitenternestedeventloop(quantumtoolkitjava:590)	at javafxstagestageshowandwait(stagejava:474)	at javafxscenecontrolheavyweightdialogshowandwait(heavyweightdialogjava:162)	at javafxscenecontroldialogshowandwait(dialogjava:341)	at orgjabrefguicollabdatabasechangepanelambda$ondatabasechanged$176(databasechangepanejava:38)	at orgcontrolsfxcontrolactionactionhandle(actionjava:419)	at orgcontrolsfxcontrolactionactionhandle(actionjava:64)	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:86)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at comsunjavafxeventeventutilfireevent(eventutiljava:49)	at javafxeventeventfireevent(eventjava:198)	at javafxscenenodefireevent(nodejava:8413)	at javafxscenecontrolbuttonfire(buttonjava:185)	at comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(buttonbehaviorjava:182)	at comsunjavafxscenecontrolskinbehaviorskinbase$1handle(behaviorskinbasejava:96)	at comsunjavafxscenecontrolskinbehaviorskinbase$1handle(behaviorskinbasejava:89)	at comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218)	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at comsunjavafxeventeventutilfireevent(eventutiljava:54)	at javafxeventeventfireevent(eventjava:198)	at javafxscenescene$mousehandlerprocess(scenejava:3757)	at javafxscenescene$mousehandleraccess$1500(scenejava:3485)	at javafxscenesceneimpl_processmouseevent(scenejava:1762)	at javafxscenescene$scenepeerlistenermouseevent(scenejava:2494)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:394)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:295)	at javasecurityaccesscontrollerdoprivileged(native method)	at comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(glassvieweventhandlerjava:432)	at comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(quantumtoolkitjava:389)	at comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(glassvieweventhandlerjava:431)	at comsunglassuiviewhandlemouseevent(viewjava:555)	at comsunglassuiviewnotifymouse(viewjava:937)	at comsunglassuigtkgtkapplication_runloop(native method)	at comsunglassuigtkgtkapplicationlambda$null$5(gtkapplicationjava:139)	at javalangthreadrun(threadjava:748)  ```</details>";"i wonder whether all these issues are related/caused by the same problem: || i opened a new issue since the other ones i found do neither describe/mention the weird list of ""changes"" nor the nullpointerexception || yes i think it is correct to have a separate issue since the problem you report is not exactly the same as the one mentioned in the other reports but i wonder whether the issues are connected || another interesting observation is that every entry now exists several times after accepting the ""changes"" i think i have to start from scratch and rebuild that library theres no point in trying to fix this in the current library || @jabref/developers can anybody reproduce this problem? otherwise we need more detailed steps || looks like this:![screenshot_20190824_164453]( || hopefully this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || ";1;0;bump checkstyle from 823 to 824bumps [checkstyle]( from 823 to 824- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;7021;bump checkstyle from 823 to 824;"bumps [checkstyle]( from 823 to 824<details><summary>release notes</summary>*sourced from [checkstyles releases]( ## checkstyle-824>  [`8b7af1a`]( [maven-release-plugin] prepare release checkstyle-824- [`d73c15a`]( doc: add 824 release notes- [`8561843`]( issue 6771]( use violation/problem term in it/resources instead of error- [`88a7991`]( minor: refactoring of line endings- [`f0029b7`]( issue [#6771]( use violation term in test/resources instead of error- [`6c264e5`]( issue [#5124]( remove usages of branchcontains for designforextensioncheck- [`808b750`]( config: bump jgit to 542- [`bf0420a`]( config: bump picocli to 403- [`4c490dc`]( issue [#7021]( add test to run sun_checksxml- [`5a2520b`]( issue [#2116]( switch wercker to use forked equalsverifier and special branch - additional commits viewable in [compare view]( />[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency (including time of day and day of week)- automerge options (never/patch/minor and dev/runtime dependencies)- pull request limits (per update run and/or open at any time)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;"""check integrity"" cannot be completed on windows";"the problem is the following: i can run ""check integrity"" (quality -> check integrity)  and at the end of run i am getting a pop-up message ""error occurred: integrity check failed""  with no other detailsthis is run under windows 10jabref 52--2020-10-14--a768f6ewindows 10 100 amd64 java 1402the event log is empty";"could you please add a screenshot?  that might help us to identify the dialog and hopefully the cause || ![jabref_integritycheckfailed]( of error that i am seeing || thanks i figured out that the failure does not report any details i added a change that should display an exception or so in the details of the dialogs it would be nice if you could try the new master version then and report back (with hopefully more details) on the concrete error || thank you for enabling the details with the latest development build (from 2020-10-16) i am getting the following detailsillegal char <:> at index 4:  error is due to additional character(s) automatically added by jabref when an arxiv article was added to bib file using the id ""arxiv"" option in ""new entry""file          {: || update: after removing the extra character : in all arxiv bib entries with file  {: the ""check integrity"" operation was finished successfully thus this issue can be closedthat added capability (of having the details of the error shown) was very useful thank you for iton a side note one may need to look into why that additional character : was added to file field in the bib entry when an arxiv article was added this additional character appears to be added only for arxiv articles || thanks for the feedback there have recently been some internal changes to the handling of files and urls probably related  || ";1;0;bump checkstyle from 823 to 824bumps [checkstyle]( from 823 to 824- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;2116;bump checkstyle from 823 to 824;"bumps [checkstyle]( from 823 to 824<details><summary>release notes</summary>*sourced from [checkstyles releases]( ## checkstyle-824>  [`8b7af1a`]( [maven-release-plugin] prepare release checkstyle-824- [`d73c15a`]( doc: add 824 release notes- [`8561843`]( issue 6771]( use violation/problem term in it/resources instead of error- [`88a7991`]( minor: refactoring of line endings- [`f0029b7`]( issue [#6771]( use violation term in test/resources instead of error- [`6c264e5`]( issue [#5124]( remove usages of branchcontains for designforextensioncheck- [`808b750`]( config: bump jgit to 542- [`bf0420a`]( config: bump picocli to 403- [`4c490dc`]( issue [#7021]( add test to run sun_checksxml- [`5a2520b`]( issue [#2116]( switch wercker to use forked equalsverifier and special branch - additional commits viewable in [compare view]( />[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency (including time of day and day of week)- automerge options (never/patch/minor and dev/runtime dependencies)- pull request limits (per update run and/or open at any time)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;permanent other fields tab;the other fields tab is now permanently shownreason: this avoids major layout rearrangements of the entry editor tabs on entry changeadvantage: better usability and performancedisadvantage: a useless (empty) other fields tab is shown in databases without other fields-  change in changelogmd described-  -   ()-  manually tested changed features in running jabref-   ( [helpjabreforg](  if you changed the localization: did you run `gradle ate`?;"just one thing about i have thought would it be possible to ""create"" the other fields tab everytime but not showing (visiblefalse)  if it is empty ? would that work too? || do you mean that the other fields tab is grayed out (inactive)? || yeah kind of but  when thinking again about it graying out is a bad idea leave it empty all fine i just had the idea it could be complete hidden as it was before || my current feeling is that always shown and with the text ""no other fieldsfound"" would be the most intuitivedouble check: if i add a field ""realotherfield"" at the bibtex source thecontent of the other tab should show this field || other fields tab is not updated after adding an other field to source this is not surprising because changing the tab in entry editor does not instanciate the entryeditor object you can choose another entry and go back to rebuild the entry editor || i found an alternative solution i have added an empty field ""otherfield"" to every other fields tab so the tab is never empty the advantage is that its possible to add a (custom) field to the source easily this field can be renamed in the source panel because other fields are ignored by bibliography styles personal notes or annotations can be added please set label ""ready-for-review""  imho i only want to see the other field tab if there are other fields || in the devcall we discussed that this is not an ideal solution and we should really work on the other fields tab being handled correctly || ";1;0;bump checkstyle from 823 to 824bumps [checkstyle]( from 823 to 824- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;5266.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;clarified hashmultimap javadoc about concurrency;3682;;1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;3682.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;multimap concurrency unclear javadoc;from  [javadoc for hashmultimap](  states:  > this class is not threadsafe when any concurrent operations update the multimap concurrent read operations will work correctlydoes this mean that it is thread-safe if only one thread writes to the map (while any number of threads may read simultaniously) ? the javadoc for [other multimap implementations]( is the same and i think it should be clearer on that;"this text indeed should be revised  the only way that concurrent reads are safe is if the last write ""happens-before"" every one of them  you cant have one thread continuing to write || ";1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5268;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-09;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  fixes #3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71;;5265.0;moe sync 2020-10-09;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify `hashmultimap` docs about concurrencycloses #52663682e6b523481b34b2c2007046ea987bf62df92eb0f8-------<p> removed all references to now useless workaroundfixes #3679fixes #526526da0949c1cf54eb730578e75fe087f67110ee71; these commits were derived from the prs by @saucistophe so i am marking the cla as signed ||;removed all references to now useless workaround;3679;;1;0;removed all references to now useless workaround3679fixes #5265relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336161257;
5275;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;0;allow for deactivation of integrity check;"as part of #4642 @ronaklakhotia added an integrity check for books with an edition value of ""1"" since the official biblatex manual ( suggests the use of the integer ""1"" for marking the first edition of a book (see bottom of page 18 in the referenced manual) my colleagues and i typically follow this recommendation as our database is quite large this results in lots of (in our case not useful) warnings when performing an integrity check would it be possible to make this check optional and decide about its execution based on the users preferences (by default it can be enabled)? many thanks in advance!";"you can right click the column and select which of the errors you want to be shown (or filter based on the fields/entry types) sadly at the moment this feature does not worktodo:-  fix filter of table-  document this feature as it is somewhat hidden-  try to add a ""filter"" button in the lower left corner of the dialog that shows the right-click filter menu (if that is possible) || i have not used the feature lately and i cannot check it atm but as far as i remember the check is directly executed - so i would opt to just open the dialog having to chance to select which checks should be run and then to actively start the check this should be especially helpful in cases of real big databases where you are interested only in some checksbonus: store the selection of integrity checks for the next runs || thanks for the hint @tobiasdiez - i completely missed thatgood idea @matthiasgeiger in addition the integrity checks are also performed during the creation of a new entry as well as the modification of an existing one would it be feasible and expedient to store the choice of integrity checks made by the user as part of the users preferences (as suggested by @matthiasgeiger) and execute only the selected ones? of course this solution would require more effort in terms of coding but could be really helpful || i am investigating on this issue || @lakminisenanayake nice!i prefer if we dont add a step before the integrity check dialog keep it simple for most users and provide access to customized integrity checks in the dialog itself for more advanced use cases || sure @tobiasdiez  still doing technical investigations and will get back with more details || dear @lakminisenanayakehave you already had some time to further investigate this issue? would love to see a solution for it in the next release version many  ";;;;0;1;;
5275;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;0;add support for postgres any/some predicate clause;adds grammar and functionality for use of **any/some** in a query searching for the existence of a single value against an array of values  functionally similar to **contains** function but pushes the predicate down to a connectorsee [postgres row and array comparisons]( for detailsunsure if this is the best way to implement this feature  i certainly wouldnt mind some pointers  may be worth adding **all** as well@mattsfuller @maciejgrzybek;"thanks for submitting this unfortunately i dont think this is the right way to implement this feature- the syntax it implements is ""xxxx any array"" this is not valid ansi sql however the standard has a concept of whats called ""quantified comparison predicates"" and we should support that instead heres the relevant syntax from the spec:```<quantified comparison predicate> :: <row value predicand> <quantified comparison predicate part 2><quantified comparison predicate part 2> :: <comp op> <quantifier> <table subquery><quantifier> :: <all> | <some><all> :: all<some> :: some | any```youd then write your predicate as `xxx  any (values 1 2 3 )` or even `xxx > any (values 1 2 3 )`- the implementation limited to a few specific types presto supports extensible types so as long as a type is comparable this should work out of the box for that the operator would need to be written as a parametric functionim going to close this for now and opening an issue to track this:  we can discuss approaches to implement it over there || ";;;;0;1;;
5275;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;0;can distinctuntilchanged operator work on custom flowable?;in order to create a new flowable in rxjava 2 (208) i use `create(flowableonsubscribe<t> source backpressurestrategy mode)`in some situation instead i need to extend the flowable class overriding `subscribeactual(subscriber subscriber)` where using the data passed in the constructor i create the actual subscriber and start the subscription calling `onsubscribe(subscription s)` eventually i create the flowable instantiating directly my custom flowableboth implementations works fine except the following:for the flowable created using `create()` method the operator `distinctuntilchanged(bipredicate<? super t ? super t> comparer)` works fine instead the same operator used on a custom flowable doesnt work: i keep receiving in the `test()` method of the comparator the same object for both parametersthe implementation of my custom flowable is very similar to the [textviewtextchangeeventobservable]( class from rxbinding2 library:  (except of course that for me it is flowable) and indeed i tried also testing the observable retrieved from: `rxtextviewtextchangeevents(medittext) // it is a textviewtextchangeeventobservable  object`and if i apply on this observable the operator `distinctuntilchanged` i receive the same object in both the parameters of the `test()` method why this happens? what can i do in order to allow a custom `flowable` to work fine also with `distinctuntilchanged` operator?;"no idea since you dont show any codewhat i learned from android text fields is that they signal the same mutable charsequence instance and you have to make a snapshot of it via tostring || ok you are right i give here an example:1 using `flowablecreate()`**creation**: ```flowable<integer> createdflowable  flowablecreate(e -> {            eonnext(1)            eonnext(2)            eonnext(2)            eonnext(2)            eonnext(3)            eonnext(4)            eonnext(5)            eonnext(5)        } backpressurestrategydrop)```**usage**:```createdflowabledistinctuntilchanged((integer integer2) -> integerintvalue()  integer2intvalue())                subscribe(integer -> logd(""consumer"" ""value: "" + integerintvalue()))```**output**  1value: 2value: 3value: 4value: 52 using custom flowable (it is a dummy flowable that in a real world doesnt make sense)```public final class customflowable extends flowable<integer> {    @override    protected void subscribeactual(subscriber subscriber) {        listener listener  new listener(subscriber)        subscriberonsubscribe(listener)        listenerstart()    }    static final class listener implements subscription {        private final subscriber<integer> subscriber        listener(subscriber<integer> subscriber) {            thissubscriber  subscriber        }        public void start() {            subsciberonnext(1)            subsciberonnext(2)            subsciberonnext(2)            subsciberonnext(2)            subsciberonnext(3)            subsciberonnext(4)            subsciberonnext(5)            subsciberonnext(5)        }        @override        public void request(long n) {        }        @override        public void cancel() {        }    }}```**usage**:```new customflowable()distinctuntilchanged((integer integer2) -> integerintvalue()  integer2intvalue())                subscribe(integer -> logd(""consumer"" ""value: "" + integerintvalue()))```**output**  1value: 2value: 2value: 2value: 4value: 5value: 5 || works for me:```javaimport orgjunittestimport orgreactivestreams*import ioreactivexflowablepublic class customflowabletest {    @test    public void test() {        new customflowable()distinctuntilchanged((integer integer2) -> integerintvalue()  integer2intvalue())        subscribe(integer -> systemoutprintln(""consumer | value: "" + integerintvalue()))    }        public static final class customflowable extends flowable<integer> {        @override        protected void subscribeactual(subscriber<? super integer> subscriber) {            listener listener  new listener(subscriber)            subscriberonsubscribe(listener)            listenerstart()        }        static final class listener implements subscription {            private final subscriber<? super integer> subscriber            listener(subscriber<? super integer> subscriber) {                thissubscriber  subscriber            }            public void start() {                subscriberonnext(1)                subscriberonnext(2)                subscriberonnext(2)                subscriberonnext(2)                subscriberonnext(3)                subscriberonnext(4)                subscriberonnext(5)                subscriberonnext(5)            }            @override            public void request(long n) {            }            @override            public void cancel() {            }        }    }}``````consumer | value: 1consumer | value: 2consumer | value: 3consumer | value: 4consumer | value: 5``` || im sorry for wasting your time it works for me as well there was something wrong that i cant reproduce anymore probably there was something dirty in the same class (other observable and subscribers)and about the same mutable `charsequence` instance you were right sorry again and thank you || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
5275;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify how to use  iteratortester   when using  iteratortester   intellij idea automatically imports  abstractiteratortester.knownorder . however  abstractiteratortester  is private  and it is not obvious that one was meant to import  iteratortester.knownorder  instead. therefore this commit updates the javadoc to give an example of how to use the api properly.  5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> add a bunch of warnings to executionsequencer.  see discussion on cl 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;5272.0;moe sync 2020-10-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify how to use `iteratortester`when using `iteratortester` intellij idea automatically imports`abstractiteratortesterknownorder` however `abstractiteratortester`is private and it is not obvious that one was meant to import`iteratortesterknownorder` instead therefore this commit updates thejavadoc to give an example of how to use the api properly5272c3172e1a55041b118a984bc5863082fda32d8243-------<p> add a bunch of warnings to executionsequencersee discussion on cl 3350466400b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac;;clarify how to use `iteratortester`;partially addresses #5254;;1;0;add a bunch of warnings to executionsequencersee discussion on cl 335046640relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336787854;
5277;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;0;displaced hover indicator in combobox lists;jabref 50-devwindows 10 100 amd64 java 1103-bellsoft-  i have tested the latest development version from  and the problem persiststhe viewmodelcelllistfactory produces strange behaviour in combination with comboboxes in long lists the hover-indicator is displaced in relation to how far the list can be scrolled downappears only with comboboxes other lists seem to work welldespite this bug selection worksbug was mentioned in the prs #5185 and #5265 steps to reproduce the behavior:1 open fetcher sidepane2 change repository![combobox-cellfactory](https://user-imagesentcom/50491877/64158167-4b665980-ce38-11e9-81ae-15ed90c501c6gif);jabref 50-devlinux 500-27-generic amd64 java 180_222cannot reproduce the behaviour mentioned above i reckon this has now been  with  (?) || i will start investigations on this || jabref 50-devlinux 500-27-generic amd64 java 1104ok i can now reproduce this behaviour with the current snap version on the --edge channel this indicates that this issue was introduced somewhere between the release of the current snap version (or rather the one from 9th september) on the --beta channel and the current snap version on the --edge channel || @cyraxsector  you can try to narrow down the bug a git bisect: || cannot reproduce the behavior mentioned above can you please provide more information || jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsofti can still reproduce this behaviour you can force it to happen by scrolling with the mouse wheel in the fetcher sidepane and then switching back to just scrolling with the mouseif you just scroll with the mouse (without using the mouse wheel) you will sometimes encounter the issue and sometimes not but by using the mouse wheel scrolling first and then the mouse scrolling itself afterwards the issue always appears || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 500-dev--2019-10-18----bc26c3ac5windows 10 100 amd64 java 1202i can confirm that this has been fixed in the current dev version ||;;;;0;1;;
5277;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;0;add 0148 release notes;;;;;;0;1;;
5277;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;5276.0;moe sync 2020-10-13;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> dont call tostring() on the results of successful futuresrelnotesabstractfuturetostring() no longer includes the tostring() of the result771629df701dfe565024db1cabfe19d7a5b2abfc-------<p> fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;fix example in documentation for `iteratortester`;partially addresses #5254 (and fixes my own mistake in https://githubcom/google/guava/commit/9f03c474d92e724d2193ab64b5cfbd2b232a715e);;1;0;fix example in documentation for `iteratortester`i made a mistake and accidentally included an example that does notcompile specifically importing `knownorder` as-is does not compileinstead one needs to import `iteratortesterknownorder` see #5254 formore informationi also changed the example to use `collections#unmodifiablelist`rather than `arraylist` because `arraylist#iterator` does not satisfyall the requirements of `iteratorfeature#modifiable`5276relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336911192;
5277;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-13;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0;;5276.0;2x: singlesubscribe(biconsumer) consistent isdisposed;fixes the `singlesubscribe(biconsumer)` to report `isdisposed` when terminatingreported in #5276; merging 5277 ;singles disposable is not disposing;"i noticed that ```disposable``` returned from ```single::subscribe(final biconsumer<? super t ? super throwable> oncallback)``` returns ```false``` from ```disposable::isdisposed``` even after ```oncallback``` was called version of rxjava is 208 code sample:````import ioreactivexsingleimport ioreactivexdisposablesdisposableimport ioreactivexschedulersschedulersfun main(args: array<string>) {    var disposable: disposable?  null    disposable  singlejust(34)            subscribeon(schedulerscomputation())            observeon(schedulersio())            subscribe { item throwable ->                println(""1 ${disposable?isdisposed}"")            }    println(""2 ${disposable?isdisposed}"")    threadsleep(1000)    println(""3 ${disposable?isdisposed}"")}````output is:````2 false1 false3 false````";thanks for reporting this is indeed an inconsistency with other methods see #5277 for the fix || closing via #5277 ||;1;0;2x: singlesubscribe(biconsumer) consistent isdisposed;
5278;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f;;0;invocationtargetexception because of comjfoenix trying to access classes which it is not allowed to in gradle run;"jabref 50-devwindows 10 100 amd64 java 1103-bellsoftwhen trying to add a new group or modify an existing group an exception is thrown it seems to be because classes from `comjfoenix` try to access classes which they are not allowed to it only happens in the development version run via gradlethe latest snapshot build installed via the installer is working finesteps to reproduce:1 start jabref via `gradle run`2 click on button ""new group""3 the exception occurspaste your log details here<details><summary>detail information:</summary>```uncaught exception occurred in thread[javafx application thread5main]javalangruntimeexception: javalangreflectinvocationtargetexception	at javafxfxml/javafxfxmlfxmlloader$methodhandlerinvoke(fxmlloaderjava:1787)	at javafxfxml/javafxfxmlfxmlloader$controllermethodeventhandlerhandle(fxmlloaderjava:1670)	at javafxbase/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:86)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at javafxbase/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at javafxbase/comsunjavafxeventeventutilfireevent(eventutiljava:49)	at javafxbase/javafxeventeventfireevent(eventjava:198)	at javafxgraphics/javafxscenenodefireevent(nodejava:8879)	at javafxcontrols/javafxscenecontrolbuttonfire(buttonjava:200)	at javafxcontrols/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(buttonbehaviorjava:206)	at javafxcontrols/comsunjavafxscenecontrolinputmapinputmaphandle(inputmapjava:274)	at javafxbase/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218)	at javafxbase/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at javafxbase/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at javafxbase/comsunjavafxeventeventutilfireevent(eventutiljava:54)	at javafxbase/javafxeventeventfireevent(eventjava:198)	at javafxgraphics/javafxscenescene$mousehandlerprocess(scenejava:3851)	at javafxgraphics/javafxscenescene$mousehandleraccess$1200(scenejava:3579)	at javafxgraphics/javafxscenesceneprocessmouseevent(scenejava:1849)	at javafxgraphics/javafxscenescene$scenepeerlistenermouseevent(scenejava:2588)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:397)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:295)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(glassvieweventhandlerjava:434)	at javafxgraphics/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(quantumtoolkitjava:390)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(glassvieweventhandlerjava:433)	at javafxgraphics/comsunglassuiviewhandlemouseevent(viewjava:556)	at javafxgraphics/comsunglassuiviewnotifymouse(viewjava:942)	at javafxgraphics/comsunglassuiwinwinapplication_runloop(native method)	at javafxgraphics/comsunglassuiwinwinapplicationlambda$runloop$3(winapplicationjava:174)	at javabase/javalangthreadrun(threadjava:834)caused by: javalangreflectinvocationtargetexception	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at comsunjavafxreflecttrampolineinvoke(methodutiljava:76)	at jdkinternalreflectgeneratedmethodaccessor2invoke(unknown source)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at javafxbase/comsunjavafxreflectmethodutilinvoke(methodutiljava:273)	at javafxfxml/comsunjavafxfxmlmethodhelperinvoke(methodhelperjava:83)	at javafxfxml/javafxfxmlfxmlloader$methodhandlerinvoke(fxmlloaderjava:1782)	 59 morecaused by: javalangillegalaccesserror: superclass access check failed: class comjfoenixcontrolsbehaviorjfxgenericpickerbehavior (in module comjfoenix) cannot access class comsunjavafxscenecontrolbehaviorcomboboxbasebehavior (in module javafxcontrols) because module javafxcontrols does not export comsunjavafxscenecontrolbehavior to module comjfoenix	at comjfoenix/comjfoenixskinsjfxgenericpickerskin<init>(jfxgenericpickerskinjava:62)	at comjfoenix/comjfoenixskinsjfxcolorpickerskin<init>(jfxcolorpickerskinjava:68)	at comjfoenix/comjfoenixcontrolsjfxcolorpickercreatedefaultskin(jfxcolorpickerjava:66)	at javafxcontrols/javafxscenecontrolcontroldoprocesscss(controljava:897)	at javafxcontrols/javafxscenecontrolcontrolaccess$000(controljava:83)	at javafxcontrols/javafxscenecontrolcontrol$1doprocesscss(controljava:89)	at javafxcontrols/comsunjavafxscenecontrolcontrolhelperprocesscssimpl(controlhelperjava:67)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxsceneparentdoprocesscss(parentjava:1397)	at javafxgraphics/javafxsceneparentaccess$400(parentjava:79)	at javafxgraphics/javafxsceneparent$1doprocesscss(parentjava:125)	at javafxgraphics/comsunjavafxsceneparenthelperprocesscssimpl(parenthelperjava:98)	at javafxgraphics/comsunjavafxscenenodehelperprocesscss(nodehelperjava:145)	at javafxgraphics/javafxscenenodeprocesscss(nodejava:9529)	at javafxgraphics/javafxscenescenedocsspass(scenejava:569)	at javafxgraphics/javafxscenescenepreferredsize(scenejava:1745)	at javafxgraphics/javafxscenescene$2preferredsize(scenejava:393)	at javafxgraphics/comsunjavafxscenescenehelperpreferredsize(scenehelperjava:66)	at javafxgraphics/javafxstagewindow$12invalidated(windowjava:1086)	at javafxbase/javafxbeanspropertybooleanpropertybasemarkinvalid(booleanpropertybasejava:110)	at javafxbase/javafxbeanspropertybooleanpropertybaseset(booleanpropertybasejava:145)	at javafxgraphics/javafxstagewindowsetshowing(windowjava:1174)	at javafxgraphics/javafxstagewindowshow(windowjava:1189)	at javafxgraphics/javafxstagestageshow(stagejava:273)	at javafxgraphics/javafxstagestageshowandwait(stagejava:463)	at javafxcontrols/javafxscenecontrolheavyweightdialogshowandwait(heavyweightdialogjava:162)	at javafxcontrols/javafxscenecontroldialogshowandwait(dialogjava:345)	at orgjabref/orgjabrefguijabrefdialogserviceshowcustomdialogandwait(jabrefdialogservicejava:251)	at orgjabref/orgjabrefguigroupsgrouptreeviewmodeladdnewsubgroup(grouptreeviewmodeljava:144)	at orgjabref/orgjabrefguigroupsgrouptreeviewmodeladdnewgrouptoroot(grouptreeviewmodeljava:110)	at orgjabref/orgjabrefguigroupsgrouptreeviewaddnewgroup(grouptreeviewjava:364)	 70 more``` </details>";;;;;0;1;;
5278;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f;;0;row type hash implementation throws misleading message;message should say `hash` is not supported for```comfacebookprestospiprestoexception: row comparison not supported for fields with null elements    at comfacebookprestotyperowtypecheckelementnotnull(rowtypejava:216)    at comfacebookprestotyperowtypehash(rowtypejava:206)```;"it seems that this was intentional:  reason why not compare row with null elements? || i think the problem might be that```row(12)  row(12)        > truerow(null2)  row(12)     > nullrow(null2)  row(13)     > false```however for now `typeequalto` only return `boolean` which is not a object and could not express `null` || imo `row(null2)  row(12)` should be `false` not null the row itself is not null`row(null2)  row(12)` being `null` seems a weird behaviorcomplex one too since `row(null2)  row(13)` is `false` why `false` precedes `null` anyway?i agree in `row()  null` returning null (like `array[1]  cast(null as array(bigint))` does)btw this same problem also happens to array: `select array[null 1]  array[null 1]` throws an exception: `array comparison not supported for arrays with null elements`should we treat this in this issue or  or a new one? || row comparison semantics are equivalent to doing a pairwise comparison of the elements and joining them with and so:row(a b)  row(c d) is equivalent to:a  c and b  dthen standard semantics apply for how nulls are treated:null and true > nullnull and false > falsethe way to think about it is ""null means the actual value is unknown"" given that notion if any pair of fields dont match we know for sure that the equality is false if all pairs of fields but one match as the latter is a comparison with an ""unknown"" value we cant tell whether the equality is true or false so it returns ""unknown"" || got it thats a really good explanation thanks a lot :) ||  by #6429 || ";;;;0;1;;
5278;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f;;0;127 completable swallowing errors;"can someone explain why the completable test below fails because no exception was thrown?    	@test	public void testcompletableerror() {		try {			new myexplodingcompletable()somemethod()subscribe()			fail(""error not thrown up"")		} catch (exception e) {			assertequals(onerrornotimplementedexceptionclass egetclass())		}	}	@test	public void testsingleerror() {		try {			new myexplodingsingle()somemethod()subscribe()			fail(""error not thrown up"")		} catch (exception e) {			assertequals(onerrornotimplementedexceptionclass egetclass())		}	}	@test	public void testobservableerror() {		try {			new myexplodingobserver()somemethod()subscribe()			fail(""error not thrown up"")		} catch (exception e) {			assertequals(onerrornotimplementedexceptionclass egetclass())		}	}	class myexplodingcompletable {		completable somemethod() {			return completableerror(new exception(""boom""))		}	}	class myexplodingsingle {		single somemethod() {			return singleerror(new exception(""boom""))		}	}	class myexplodingobserver {		observable somemethod() {			return observableerror(new exception(""boom""))		}	}";`completable` was designed a bit differently and comes as a backport from 2x where `completableobserver` is not allowed to throw || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one || @akarnokd this inconsistency between single observable and completable is driving me crazy while trying to have one unified way of handling uncaught exceptions that works for all singles observables and completables in an application if i eg have a single and subscribe without giving an onerror callback i can see onerrornotimplementedexception bubble up to some central place where i can handle it if i call tocompletable on the same single and subscribe again without an onerror callback the exception is completely swallowed from an api user standpoint its really difficult to understand why completable should work any different from single or observable || @dklotz always specify an `onerror` handler ||;;;;0;1;;
5278;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify that interner should be preferred instead of string.intern()  the existing language implies it s intended _only_ for other types.  see also   1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> document what happens when futurecallback throws exception.  5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f;;5250.0;moe sync 2020-10-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> clarify that interner should be preferred instead of stringintern() the existing language implies its intended _only_ for other typessee also  document what happens when futurecallback throws exception5250 #20583d573ac2514c53d678c3855b28d9223fea9c7e8f;;google#2058 add documentation on what happens when exception thrown b…;…y callback;;1;0;document what happens when futurecallback throws exception5250 #2058relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid336963896;
5280;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  if we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;0;moe sync 2020-10-15;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771remove cancellation propagation test as the intent of not propagating cancellation is to make sure run order is as expectedif we propagate cancellations the test failsc8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;;;;1;1;add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771remove cancellation propagation test as the intent of not propagating cancellation is to make sure run order is as expectedif we propagate cancellations the test fails-------------created by moe: https://githubcom/google/moemoe_migrated_revid337100661;
5280;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  if we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;0;multichannelgroupbyhash does not support >1b entries;multichannelgroupbyhash currently support up to approximately 1b entrieswhile using `longbigarray`  is it possible to store more entires theoretically?( i see that `longbigarray#capacity` field is store as `int` maybe practically we need change its type to `long` );this issue has been automatically marked as stale because it has not had recent activity it will be closed if no further activity occurs ||;;;;0;1;;
5280;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  if we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;0;2x nullpointerexception while subscribing to behaviorprocessor;"rxjava 208setting the terminal event of the `behaviorprocessor` and replaying it to late subscribers is not an atomic action and causes a `nullpointerexception` in certain racy situationsthe root cause seems to be the non-atomicity of marking the processor terminated and setting the terminal event inside the `behaviorprocessor#terminate` method [here]( is a minimal example which helps reproducing the race condition```package comexampleimport ioreactivexprocessorsbehaviorprocessorimport ioreactivexsubscriberstestsubscriberpublic class behaviorprocessorraceexample {    public static void main(string args) {        for (int i  0 i < 100000 i++) {            final testsubscriber<object> s  testsubscribercreate()            final behaviorprocessor<boolean> bp  behaviorprocessorcreate()            final thread t1  new thread(new runnable() {                @override                public void run() {                    bponcomplete()                }            })            final thread t2  new thread(new runnable() {                @override                public void run() {                    bpsubscribe(s)                }            })            t1setdaemon(true)            t2setdaemon(true)            t1start()            t2start()        }    }}``` running this will result in exceptions like this```exception in thread ""thread-1279"" javalangnullpointerexception	at ioreactivexinternalutilnotificationlitegeterror(notificationlitejava:189)	at ioreactivexprocessorsbehaviorprocessorsubscribeactual(behaviorprocessorjava:162)	at ioreactivexflowablesubscribe(flowablejava:12970)	at comexamplebehaviorprocessorraceexample$2run(behaviorprocessorraceexamplejava:24)	at javalangthreadrun(threadjava:745)```";nice catch! see #5281 for the fix || closing via #5821 ||;;;;0;1;;
5280;1;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-15;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  if we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a;;526;"revert "" get jabref running in eclipse""";reverts jabref/jabref#5264;;jabref 30 cant connect to libreoffice;"i use ubuntu 1404 (64 bit) libreoffice 42 and the new version of jabref neither manually pointing to the correct pathes nor automatic connection does work below you can see the output of my error console```information: opening: /home/felix/dokumente/unidaten/backup_version_6/backup/publikationen felixbibexception in thread ""spin-0"" javalangnoclassdeffounderror: spin/off/awtreflectdispatcherfactory$1    at spinoffawtreflectdispatcherfactory$awtreflectdispatcherstop(awtreflectdispatcherfactoryjava:102)    at spinoffspinoffevaluator$1run(spinoffevaluatorjava:110)    at javalangthreadrun(threadjava:745)caused by: javalangclassnotfoundexception: spinoffawtreflectdispatcherfactory$1    at javaneturlclassloaderfindclass(urlclassloaderjava:381)    at javalangclassloaderloadclass(classloaderjava:424)    at sunmisclauncher$appclassloaderloadclass(launcherjava:331)    at javalangclassloaderloadclass(classloaderjava:357)     3 morejavalangnoclassdeffounderror: com/sun/star/comp/helper/bootstrap    at netsfjabrefopenofficeoobibbasesimplebootstrap(oobibbasejava:183)    at netsfjabrefopenofficeoobibbase<init>(oobibbasejava:99)    at netsfjabrefopenofficeopenofficepanelrun(openofficepaneljava:614)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:497)    at spininvocationevaluate(invocationjava:175)    at spinoffspinoffevaluator$1run(spinoffevaluatorjava:108)    at javalangthreadrun(threadjava:745)caused by: javalangclassnotfoundexception: comsunstarcomphelperbootstrap    at javaneturlclassloaderfindclass(urlclassloaderjava:381)    at javalangclassloaderloadclass(classloaderjava:424)    at sunmisclauncher$appclassloaderloadclass(launcherjava:331)    at javalangclassloaderloadclass(classloaderjava:357)     10 moredez 16 2015 12 25 pm netsfjabreflogicl10nlocalization translatewarnung: warning: could not get message translation for ""could not connect to running openofficemake sure you have installed openoffice with java supportif connecting manually please verify program and library pathserror message: com/sun/star/comp/helper/bootstrap"" for locale de```";"update - i upgraded to libreoffice 50 the problem changes when doing manual connection this time jurtjar is not found in my installation there is a folder (/usr/lib/libreoffice/program/classes/) where all jar files of libreoffice are stored/linked apparently unoiljar is found but jabref looks for jurtjar in another directory```javalangexception: file not found: /usr/lib/libreoffice/ure-link/share/java/jurtjar    at netsfjabrefopenofficeopenofficepanelconnect(openofficepaneljava:562)    at netsfjabrefopenofficeopenofficepanelaccess$100(openofficepaneljava:53)    at netsfjabrefopenofficeopenofficepanel$3actionperformed(openofficepaneljava:217)    at javaxswingabstractbuttonfireactionperformed(abstractbuttonjava:2022)    at javaxswingabstractbutton$handleractionperformed(abstractbuttonjava:2348)    at javaxswingdefaultbuttonmodelfireactionperformed(defaultbuttonmodeljava:402)    at javaxswingdefaultbuttonmodelsetpressed(defaultbuttonmodeljava:259)    at javaxswingplafbasicbasicbuttonlistenermousereleased(basicbuttonlistenerjava:252)    at javaawtawteventmulticastermousereleased(awteventmulticasterjava:289)    at javaawtcomponentprocessmouseevent(componentjava:6535)    at javaxswingjcomponentprocessmouseevent(jcomponentjava:3324)    at javaawtcomponentprocessevent(componentjava:6300)    at javaawtcontainerprocessevent(containerjava:2236)    at javaawtcomponentdispatcheventimpl(componentjava:4891)    at javaawtcontainerdispatcheventimpl(containerjava:2294)    at javaawtcomponentdispatchevent(componentjava:4713)    at javaawtlightweightdispatcherretargetmouseevent(containerjava:4888)    at javaawtlightweightdispatcherprocessmouseevent(containerjava:4525)    at javaawtlightweightdispatcherdispatchevent(containerjava:4466)    at javaawtcontainerdispatcheventimpl(containerjava:2280)    at javaawtwindowdispatcheventimpl(windowjava:2750)    at javaawtcomponentdispatchevent(componentjava:4713)    at javaawteventqueuedispatcheventimpl(eventqueuejava:758)    at javaawteventqueueaccess$500(eventqueuejava:97)    at javaawteventqueue$3run(eventqueuejava:709)    at javaawteventqueue$3run(eventqueuejava:703)    at javasecurityaccesscontrollerdoprivileged(native method)    at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(protectiondomainjava:76)    at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(protectiondomainjava:86)    at javaawteventqueue$4run(eventqueuejava:731)    at javaawteventqueue$4run(eventqueuejava:729)    at javasecurityaccesscontrollerdoprivileged(native method)    at javasecurityprotectiondomain$javasecurityaccessimpldointersectionprivilege(protectiondomainjava:76)    at javaawteventqueuedispatchevent(eventqueuejava:728)    at javaawteventdispatchthreadpumponeeventforfilters(eventdispatchthreadjava:201)    at javaawteventdispatchthreadpumpeventsforfilter(eventdispatchthreadjava:116)    at javaawteventdispatchthreadpumpeventsforhierarchy(eventdispatchthreadjava:105)    at javaawteventdispatchthreadpumpevents(eventdispatchthreadjava:101)    at javaawteventdispatchthreadpumpevents(eventdispatchthreadjava:93)    at javaawteventdispatchthreadrun(eventdispatchthreadjava:82)dez 16 2015 1 38 pm netsfjabreflogicl10nlocalization translatewarnung: warning: could not get message translation for ""could not connect to running openofficemake sure you have installed openoffice with java supportif connecting manually please verify program and library pathserror message: file not found: /usr/lib/libreoffice/ure-link/share/java/jurtjar"" for locale de``` || thanks for this report as far as i know jabref never featured an integration with libre office (so this is not a bug) there is an integration with open office (as the error messages say) but there is no guarantee that this works with libre officemaybe @oscargus can provide some insights?@jabref/developers maybe we should ditch open office integration since open office died anyway? i do not know if the current integration can be ported easily to libre office  || i havent seen the original issue (as im away from a computer) but willhave a look tonightit should work with both libreoffice and openoffice and dropping supportfor one of them would currently provide a very minor benefit if anythe ""standard"" issue is that jabref runs in a 32-bit jvm and lo/oo in a64-bit or vice versa but no idea if this is the reason here jabref hascode to give that hint but personally i never managed to trigger itdespite trying || just two remarks:- i used to work with libreoffice and older jabref versions without any problems (on linux - automatic connection worked always on windows i usually needed to connect manually) - so at least in the past it was not a matter of lo- lo and jabref are on 64 bit || ah i see the problem i changed the default search path for windows to reflect that the jars were moved but not on linux (as i had no idea what had happened there although in hindsight it made sense that they were moved there as well) theres a pr in #530 which should fix it and in 20 minutes or so there should be a build in  to try out || the problem persists in a slightly different way no path problems are reported but some bootstrap error see the error message:```exception in thread ""spin-1"" javalangnoclassdeffounderror: spin/off/awtreflectdispatcherfactory$1    at spinoffawtreflectdispatcherfactory$awtreflectdispatcherstop(awtreflectdispatcherfactoryjava:102)    at spinoffspinoffevaluator$1run(spinoffevaluatorjava:110)    at javalangthreadrun(threadjava:745)javalangnoclassdeffounderror: com/sun/star/comp/helper/bootstrap    at netsfjabrefopenofficeoobibbasesimplebootstrap(oobibbasejava:183)    at netsfjabrefopenofficeoobibbase<init>(oobibbasejava:99)    at netsfjabrefopenofficeopenofficepanelrun(openofficepaneljava:619)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:497)    at spininvocationevaluate(invocationjava:175)    at spinoffspinoffevaluator$1run(spinoffevaluatorjava:108)    at javalangthreadrun(threadjava:745)```could there be an issue that lo is not working properly with java 8 (the only jre that is currently installed on my system)? - note: in libre office jre 8 is properly recognized though || hmm no idea really i only have 8 installed and it works here this seems to be the same problem as the first time (missing bootstrap) the bootstrap method should be in juhjrt and i think it would complain earlier if juhjrt was missing || there is only a juhjar in /usr/lib/libreoffice/program/classes || ok just to confirm can you run:`jar tf /usr/lib/libreoffice/program/classes/juhjar` || hmm let me rephrase the previous statement: it doesnt work for me either same error this wasnt the case for 30 (which will not work on linux because of the the incorrect paths) will need to check what might have changed || ok! now it works for me again please try the next build (in 20 minutes or so) || great it works immediately! thank you so much || ";1;0;"revert "" get jabref running in eclipse""";
5283;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> encode all primes less-than 66 into a bitmask  use a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> added  @canignorereturnvalue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;0;moe sync 2020-10-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> encode all primes less-than 66 into a bitmaskuse a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these casesa2fcd41b7c10847d22943e083da450749a99c72b-------<p> added `@canignorereturnvalue` to `cancel`a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;;;;1;1;added `@canignorereturnvalue` to `cancel`relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337401866;
5283;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> encode all primes less-than 66 into a bitmask  use a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> added  @canignorereturnvalue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;0;unify month field formatting in test bib files (jabref/jabref#5116);after some extensive use of grep and sed this should finally solve #5116-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);oh seems like it broke a lot of tests || i tried to look into #5116 as a good first issue heres what i did:1 changed the months in the bib files to be in the format oct not #oct#2 ran tests 3 ris tests failed as they were expecting the month to include the surrounding #s but they didnt3 went to risimporterjava and set the month this way:`if (monthispresent()) {                entrysetfield(standardfieldmonth monthget()getshortname())            }`but now other tests have failed - this time because they actually included the surrounding #s but were expecting no surroundings #sthats why i believe just changing the test bib files wont work and this requires some changes to the actual code as well || okay thanks for your feedback and sorry for the confusion i will have a look at it || thanks for the explanation @omer-rotem1 ! the month should be set via  || @tobiasdiez thanks for pointing this out! i agree that if theres one function to set the month it should be used but as im new to jabref im still trying to understand **why** the month is surrounded by #s in jabref (see [this]( im also interested to know why when jabref generates the bib file it doesnt serialize the month correctly but thats probably the bug were trying to fix here || i created a small pull request to 5116 (only the 3 tests cases where the bib files were written incorrectly): [pull request]( || ive now merged the pr by @omer-rotem1 so that we get proper attribution for his work of course the other instances of wrong month values found by @sfo should be  as well(@omer-rotem1 it us usually best-practice in open-source development that you ask before working on the same issue as somebody else its just more time economic for everybody involved) || @tobiasdiez thanks for the heads up will follow next time || i rebased onto master and fixed the issues with parsers and exporters tests are all green again looking forward reading your feedback || @sfo could you please implement the minor suggestions so that we can merge?  for reference: the thing with `#` is described at  i also linked it from our entry editor help nowdid not know that we even support typed string constants very nice i think this has much potential || i added test cases for `month  apr` in  `master` should be merged into this branch if all test are green the feedback of tobias should be included if there are more errors we really have to think about everything ^^ || i went through all the changes and created a follow-up pr at  ||;;;;0;1;;
5283;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> encode all primes less-than 66 into a bitmask  use a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> added  @canignorereturnvalue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;0;clean up and add more tests for support for multiple uuids;;ill squash these two commits before merging  || merged  ||;;;;0;1;;
5283;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> encode all primes less-than 66 into a bitmask  use a bitmask to make prime computation for all values less-than 66 o(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> added  @canignorereturnvalue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33;;0;subscription not disposed after oncomplete with rxjava 2x;helloi am not sure this is an issue i would rather say this is a questioni have noticed a different behavior between rxjava 1x and rxjava 2xwhen an observable is completed with rxjava 1x subscriptions get unsubscribed:```behaviorsubject<object> subject  behaviorsubjectcreate()subscription subscription  subjectsubscribe()subjectoncompleted()systemoutprintln(subscriptionisunsubscribed()) // display true```however with rxjava2 the subscription is not disposed when the observable is completed:```disposable subscription  null@testpublic void test() {    behaviorsubject subject  behaviorsubjectcreate()    observer<? super string> observer  new observer<string>() {                public void onsubscribe(disposable d) {            subscription  d        }            }        subjectsubscribe(observer)    subjectoncomplete()    systemoutprintln(subscriptionisdisposed())  // display false}```is it a wanted behavior? if so is this behavior documented somewhere?thanks a lot for your help;"generally if you dont dispose a disposable received via `onsubscribe` it may or may not report itself as disposed the lambda version of the `subscribe()` does report itself disposed when it  calls the lambda for a terminal eventin practice there shouldnt be any reason to call `isdisposed` outside an operator or `create` method because it assumes synchronous termination or worse it is the reactive version of `futureget()`in the reactive world you react to termination via the appropriate onxxx method compose in the continuation or simply side-effect via `dofinally`*sidenote: one of the smaller but ever growing regret of mine is that i let `isdisposed` into the api because i knew that will eventually trigger a bunch of inconsistency bug reports and correcting them adds more overhead im glad the reactive-streams specification opted for no `iscancelled` method* || thanks a lot for your ""reactivity"" and your explanations!i agree that *iscancelled* is less misleading i have the feeling that i am not the only being confused:    || related question: `observabledoondispose()` javadoc mentions the following:`""note that terminal events trigger the action unless the {@code observablesource} is subscribed to via {@code unsafesubscribe()}""`is this still true or should `dofinally()`/`doonterminate()` be the preferred option? || thats no longer true the preferred operator is `dofinally` as it covers `onerror` `oncomplete` and `dispose` as wellwould you like to post a pr that removes that note? if so please check the other base types for the equivalent operator as there might be copy-pasted all over the place || okay thanks for clarifying i can update the javadoc note later today || ";;;;0;1;;
5285;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove deprecated method files.filetreetraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54;;0;moe sync 2020-10-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> remove deprecated method filesfiletreetraverser() that isnt being used anymore295dd8008d06d73a99ffe076d1c302113b5a8f54;;;;;1;1;remove deprecated method filesfiletreetraverser() that isnt being used anymorerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337513335;
5285;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove deprecated method files.filetreetraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54;;0;bug when clicking on a reference with dev version;"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version last dev version on mac os x 10146<!-- important note -><!--       please always test if the bug is still reproducible in the latest development version      we are constantly improving jabref and some bugs may already be       you can download the development version at:       please make a backup of your library before you try out this version      if you already use a development version ensure that you use the latest one -->-  i have tested the latest development version from  and the problem persists<!-- add a clear and concise description of what the bug is -->steps to reproduce the behavior:1 click on a reference and i get<img width""727"" alt""image"" src"" if applicable add excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```javalangunsatisfiedlinkerror: no jfxwebkit in javalibrarypath: [/users/pierremarchand/library/java/extensions /library/java/extensions /network/library/java/extensions /system/library/java/extensions /usr/lib/java ]	at javabase/javalangclassloaderloadlibrary(classloaderjava:2660)	at javabase/javalangruntimeloadlibrary0(runtimejava:827)	at javabase/javalangsystemloadlibrary(systemjava:1902)	at comsunglassutilsnativelibloaderloadlibraryinternal(nativelibloaderjava:150)	at comsunglassutilsnativelibloaderloadlibrary(nativelibloaderjava:52)	at comsunwebkitwebpagelambda$static$0(webpagejava:133)	at javabase/javasecurityaccesscontrollerdoprivileged(accesscontrollerjava:310)	at comsunwebkitwebpage<clinit>(webpagejava:132)	at javafxscenewebwebengine<init>(webenginejava:841)	at javafxscenewebwebengine<init>(webenginejava:826)	at javafxscenewebwebview<init>(webviewjava:260)	at orgjabrefguipreviewpreviewviewer<init>(previewviewerjava:81)	at orgjabrefguipreviewpreviewpanel<init>(previewpaneljava:53)	at orgjabrefguientryeditorfieldseditortabinitpanel(fieldseditortabjava:211)	at orgjabrefguientryeditorfieldseditortabbindtoentry(fieldseditortabjava:189)	at orgjabrefguientryeditorentryeditortabnotifyaboutfocus(entryeditortabjava:42)	at orgjabrefguientryeditorentryeditorlambda$new$0(entryeditorjava:116)	at orgfxmisceasybindeasybindlambda$subscribe$12(easybindjava:263)	at comsunjavafxbindingexpressionhelper$singlechangefirevaluechangedevent(expressionhelperjava:181)	at comsunjavafxbindingexpressionhelperfirevaluechangedevent(expressionhelperjava:80)	at javafxbeanspropertyreadonlyobjectpropertybasefirevaluechangedevent(readonlyobjectpropertybasejava:74)	at javafxbeanspropertyreadonlyobjectwrapperfirevaluechangedevent(readonlyobjectwrapperjava:102)	at javafxbeanspropertyobjectpropertybasemarkinvalid(objectpropertybasejava:113)	at javafxbeanspropertyobjectpropertybaseset(objectpropertybasejava:147)	at javafxscenecontrolselectionmodelsetselecteditem(selectionmodeljava:105)	at javafxscenecontroltabpane$tabpaneselectionmodelselect(tabpanejava:733)	at javafxscenecontroltabpane$tabpaneselectionmodelselect(tabpanejava:751)	at javafxscenecontroltabpane$tabpaneselectionmodelfindnearestavailabletab(tabpanejava:807)	at javafxscenecontroltabpane$tabpaneselectionmodellambda$new$0(tabpanejava:707)	at comsunjavafxcollectionslistlistenerhelper$genericfirevaluechangedevent(listlistenerhelperjava:329)	at comsunjavafxcollectionslistlistenerhelperfirevaluechangedevent(listlistenerhelperjava:73)	at javafxcollectionsobservablelistbasefirechange(observablelistbasejava:233)	at javafxcollectionslistchangebuildercommit(listchangebuilderjava:482)	at javafxcollectionslistchangebuilderendchange(listchangebuilderjava:541)	at javafxcollectionsobservablelistbaseendchange(observablelistbasejava:205)	at javafxcollectionsmodifiableobservablelistbaseadd(modifiableobservablelistbasejava:155)	at orgjabrefguientryeditorentryeditorrecalculatevisibletabs(entryeditorjava:324)	at orgjabrefguientryeditorentryeditorsetentry(entryeditorjava:349)	at orgjabrefguibasepanellambda$createmaintable$19(basepaneljava:663)	at javabase/javautiloptionalifpresent(optionaljava:183)	at orgjabrefguibasepanellambda$createmaintable$20(basepaneljava:662)	at comsunjavafxcollectionslistlistenerhelper$genericfirevaluechangedevent(listlistenerhelperjava:329)	at comsunjavafxcollectionslistlistenerhelperfirevaluechangedevent(listlistenerhelperjava:73)	at javafxcollectionsobservablelistbasefirechange(observablelistbasejava:233)	at javafxcollectionslistchangebuildercommit(listchangebuilderjava:482)	at javafxcollectionslistchangebuilderendchange(listchangebuilderjava:541)	at javafxcollectionsobservablelistbaseendchange(observablelistbasejava:205)	at comsunjavafxscenecontrolselecteditemsreadonlyobservablelistlambda$new$1(selecteditemsreadonlyobservablelistjava:103)	at comsunjavafxcollectionslistlistenerhelper$genericfirevaluechangedevent(listlistenerhelperjava:329)	at comsunjavafxcollectionslistlistenerhelperfirevaluechangedevent(listlistenerhelperjava:73)	at javafxcollectionsobservablelistbasefirechange(observablelistbasejava:233)	at javafxcollectionslistchangebuildercommit(listchangebuilderjava:482)	at javafxcollectionslistchangebuilderendchange(listchangebuilderjava:541)	at javafxcollectionsobservablelistbaseendchange(observablelistbasejava:205)	at comsunjavafxscenecontrolreadonlyunbackedobservablelist_endchange(readonlyunbackedobservablelistjava:64)	at javafxscenecontrolmultipleselectionmodelbase$selectedindiceslist_endchange(multipleselectionmodelbasejava:896)	at javafxscenecontrolcontrolutilsupdateselectedindices(controlutilsjava:202)	at javafxscenecontroltableview$tableviewarraylistselectionmodelfirecustomselectedcellslistchangeevent(tableviewjava:3031)	at javafxscenecontroltableview$tableviewarraylistselectionmodelclearandselect(tableviewjava:2485)	at javafxscenecontroltableview$tableviewselectionmodelclearandselect(tableviewjava:1969)	at comsunjavafxscenecontrolbehaviortablecellbehaviorbasesimpleselect(tablecellbehaviorbasejava:213)	at comsunjavafxscenecontrolbehaviortablecellbehaviorbasedoselect(tablecellbehaviorbasejava:195)	at comsunjavafxscenecontrolbehaviorcellbehaviorbasemousepressed(cellbehaviorbasejava:176)	at comsunjavafxscenecontrolinputmapinputmaphandle(inputmapjava:274)	at comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(compositeeventhandlerjava:218)	at comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:80)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at comsunjavafxeventeventutilfireevent(eventutiljava:54)	at javafxeventeventfireevent(eventjava:198)	at javafxscenescene$mousehandlerprocess(scenejava:3851)	at javafxscenescene$mousehandleraccess$1200(scenejava:3579)	at javafxscenesceneprocessmouseevent(scenejava:1849)	at javafxscenescene$scenepeerlistenermouseevent(scenejava:2588)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:397)	at comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:295)	at javabase/javasecurityaccesscontrollerdoprivileged(accesscontrollerjava:389)	at comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(glassvieweventhandlerjava:434)	at comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(quantumtoolkitjava:390)	at comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(glassvieweventhandlerjava:433)	at comsunglassuiviewhandlemouseevent(viewjava:556)	at comsunglassuiviewnotifymouse(viewjava:942)	at comsunglassuimacmacviewnotifymouse(macviewjava:127)  ```</details>";"hi seems like your java version does not include all javafx librariesplease try this version || ok but i thought that i had the last versions of java from oracle:```❯ java -versionjava version ""12"" 2019-03-19java(tm) se runtime environment (build 12+33)java hotspot(tm) 64-bit server vm (build 12+33 mixed mode sharing)```and ```❯ javac -versionjavac 12```it is not enough ? || currently jabref requires java 11 (its an lts version) and does not run yet with java 12 || ok and will it support java 12 in its release version ?  || no this is very unlikely jabref depends on external libraries which also need to be compatible thenyou can just downgrade to java 11 its supported until at least 2022  || i installed java 11:<img width""421"" alt""image"" src"" i get the following error <img width""564"" alt""image"" src"" || the new version is no longer startable as jar please use the installer in the meantime or for linux the targz archive  || ok i tried on macos it worked at first but after restarting my computer when i call jabref it is the old version that is used || ";;;;0;1;;
5285;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove deprecated method files.filetreetraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54;;0;update to kafka client 0822;enables support for lz4 data and other changes added in kafka 082changes include updates to dependencies (and exclusions due to dependency changes) minor unit test repair (config + api changes)a larger later change might be to migrate to the kafka 09+ client but i wanted to fix the immediate issue we had with lz4 data(cla signed ~1 hr ago);;;;;0;1;;
5285;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove deprecated method files.filetreetraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54;;0;2x: minor mistakes to be ;-  `connectableobservable` talks about `flowable` and `subscriber` remnants of copy-paste -  `flowableflatteniterable` `itnext()` is not checked for `null` -  `maybe` links to `subscriber`;pr welcome || closing via #5286  ||;;;;0;1;;
5286;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf;;0;add sanity check that remotesource is not locally parallelized;this commit mitigates a bug in trunk that can produce invalid local executionplans that can result incorrect results with this commit known reproductionof the bug will fail at local execution planning timethe bug involves having a taskwriter-count config set to 1 on coordinator andat least 2 on worker under such circumstance an invalid plan will begenerated executing such a plan can result in writing duplicated data totables;;;;;0;1;;
5286;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf;;0;2x: cleanup for text and javadoc 04/15;this pr - fixes a couple of documentation and message copy-paste errors-  flowableflatteniterable not checking for null returned  iterator::next()`- replace `publisher` with the appropriate name; merging 5286 ;;;;1;1;2x: cleanup for text and javadoc 04/15;
5286;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf;;5116;unifying month format across all bib files;this change fixes issue 5116 ]( where we have some bib files in which the month is written as {#jul#} rather than jul this commit fixes this issue-----  change in changelogmd described - no need to no new functionality-   - the change is a fix for the tests-  - irrelevant- [ v ] (https://githubcom/joelparkerhenderson/git_commit_message);;unify month field formatting in test bib files;in several bib files we have not a unique formatting for the month some bib files used for testing have different formats for the months this should be made consistent across all filescorrect ```  number     {1}  pages      {55--68}  month      oct```other looks like```  number     {1}  pages      {55--68}  month      #oct#```other looks like```  number     {1}  pages      {55--68}  month       {#oct#}```;"do you know where can i find this bibs files ? || @vitorcime use your ides search capability <kbd>ctrl</kbd>+<kbd>shift</kbd>+<kbd>f</kbd> in intellij || note that `#` is used to render a bibtex string (see  that means the entry editor displays `#oct#` when the bibtex field is `month  oct` thus `oct` is correct `#oct#` and `{#oct#}` are wrong they are a result of a wrong implementation somewhere in jabref we guess that it is at the entry fetchers or converters (ris for instance) || i think this is related to another issue  the ""cleanup entries"" implements a ""normalize"" option on the month field but converts to abbreviated month which is not supported by python-bibtexparser (by default)  also jabref writes this field as an integer not a string when set from the gui pull-down field  so the code is is not consistent eitheris this the right issue?  or should i open another one? || ";1;0;unifying month format across all bib files;
5286;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-10-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf;;5281.0;moe sync 2020-10-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> prepare for release 30006c1d37ea914125b88bc27d0a570df84fe900a4f-------<p> remove deprecated 1-arg servicemanageraddlistenerrelnotes`utilconcurrent`: removed the deprecated 1-arg `servicemanageraddlistener(listener)` use the 2-arg `addlistener(listener executor)` overload setting the executor to `directexecutor()` for equivalent behaviord13ebb04258a0caecea56d908a391e7e694004b2-------<p> update iteratortester example with a greater ""steps"" valuethis allows iteratortester to check the edge case that when an iterator has been exhausted (that is ""next"" has been called repeatedly until ""hasnext"" returns false) then calling ""next"" on the iterator again exhibits the same behavior as the users chosen ""known good"" reference implementation5281b094a4b3f43645298a7c9bce9b5d72184d7ff4cf";;"update iteratortester example with a greater ""steps"" value";builds upon my earlier work in  and  whilst also addressing  a bit;;1;0;"update iteratortester example with a greater ""steps"" valuethis allows iteratortester to check the edge case that when an iterator has been exhausted (that is ""next"" has been called repeatedly until ""hasnext"" returns false) then calling ""next"" on the iterator again exhibits the same behavior as the users chosen ""known good"" reference implementation5281relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid337541752";
5293;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add classinfo.istoplevel().  seems like a useful method? i can t remember why i didn t add it in the first place. perhaps just an oversight.  partially addresses   relnotes= reflect : added  classinfo.istoplevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;;0;moe sync 2020-10-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> add classinfoistoplevel()seems like a useful method? i cant remember why i didnt add it in the first place perhaps just an oversightpartially addresses  added `classinfoistoplevel()`14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;thanks for the comments! ill fix this up internally and itll end up on the next push out tomorrow ||;;;;1;1;add classinfoistoplevel()seems like a useful method? i cant remember why i didnt add it in the first place perhaps just an oversightpartially addresses  added `classinfoistoplevel()`-------------created by moe: https://githubcom/google/moemoe_migrated_revid338738055;
5293;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add classinfo.istoplevel().  seems like a useful method? i can t remember why i didn t add it in the first place. perhaps just an oversight.  partially addresses   relnotes= reflect : added  classinfo.istoplevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;;0;remove jackson dependency from parser;;;;;;0;1;;
5293;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add classinfo.istoplevel().  seems like a useful method? i can t remember why i didn t add it in the first place. perhaps just an oversight.  partially addresses   relnotes= reflect : added  classinfo.istoplevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;;0;rxexceptionsonerrorthrowable$onnextvalue;"i use rxjava and retrofit to send audio file after recordingbut sometimes server reports that audio file brokenthe log is:rxexceptionsonerrorthrowable$onnextvalueonerror while emitting onnext value: comlizhiweikenetwork    compile comsquareupretrofit2 220    compile comsquareupretrofit2:adapter-rxjava:220    compile comsquareupretrofit2:converter-gson:220    compile ioreactivex 1014    compile ioreactivex 101        file file  new file(path)        requestbody requestfile  requestbodycreate(mediatypeparse(""audio/*"") file)        body  multipartbodypartcreateformdata(""audio_file"" filegetname() requestfile)        hashmap<stringrequestbody> params  new hashmap<>()        paramsput(""lecture_id""requestbodycreate(mediatypeparse(""multipart/form-data"") mid + """"))        paramsput(""need_encode""requestbodycreate(mediatypeparse(""multipart/form-data"") stringvalueof(false)))        paramsput(""duration""requestbodycreate(mediatypeparse(""multipart/form-data"")attachmentgetduration() + """"))        subscription subscription  apiservicegetinstance()sendaudiomessage(bodyparams)subscribe(new  {            @override            protected void onerror(apiexception ex) {                crashreportpostcatchedexception(ex)                toastutilshowtoast(getactivity()exgetmsg())                onsendmessagefail(msg)            }            @override            public void onnext(immessage immessage) {                onsendmessagesuccess(msg)            }        })        mcompositesubscriptionadd(subscription)`";"`    @multipart    @post(""api/upload_audio"")    observable< sendaudiomessage(@part multipartbodypart audio @partmap map<stringrequestbody> map)    public observable<immessage> sendaudiomessage(multipartbodypart file map<stringrequestbody> params){        return weikeapisendaudiomessage(fileparams)                map(new serverresultfunc<immessage>())                onerrorresumenext(new                 subscribeon(schedulersio())                unsubscribeon(schedulersio())                observeon(androidschedulersmainthread())    }` || could you share the full stacktrace? || comxxnetworkexceptionapiexception:comxxnetworkexceptionserverexception2 comxxnetworkexceptionenginehandleexception(exceptionenginejava:55)3 4 caused by:5 rxexceptionsonerrorthrowable$onnextvalue:onerror while emitting onnext value: comxxnetwork rxinternaloperatorsonsubscribemap$mapsubscriberonnext(onsubscribemapjava:73)7 retrofit2adapterrxjavabodyonsubscribe$bodysubscriberonnext(bodyonsubscribejava:48)8 retrofit2adapterrxjavabodyonsubscribe$bodysubscriberonnext(bodyonsubscribejava:36)9 retrofit2adapterrxjavacallarbiterdeliverresponse(callarbiterjava:115)10 retrofit2adapterrxjavacallarbiteremitresponse(callarbiterjava:97)11 retrofit2adapterrxjavacallexecuteonsubscribecall(callexecuteonsubscribejava:46)12 retrofit2adapterrxjavacallexecuteonsubscribecall(callexecuteonsubscribejava:24)13 retrofit2adapterrxjavabodyonsubscribecall(bodyonsubscribejava:33)14 retrofit2adapterrxjavabodyonsubscribecall(bodyonsubscribejava:25)15 rxobservableunsafesubscribe(observablejava:10151)16 rxinternaloperatorsonsubscribemapcall(onsubscribemapjava:48)17 rxinternaloperatorsonsubscribemapcall(onsubscribemapjava:33)18 rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:48)19 rxinternaloperatorsonsubscribeliftcall(onsubscribeliftjava:30)20 rxobservableunsafesubscribe(observablejava:10151)21 rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)22 rxinternalschedulerscachedthreadscheduler$eventloopworker$1call(cachedthreadschedulerjava:228)23 rxinternalschedulersscheduledactionrun(scheduledactionjava:55)24 javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)25 javautilconcurrentfuturetaskrun(futuretaskjava:237)26 javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)27 javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)28 javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)29 javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)30 javalangthreadrun(threadjava:818) || looks like your `serverresultfunc` crashes  but it is still unclear why maybe there is another cause below what you posted? || the server side reports that file broken || `        private class serverresultfunc<t> implements func1< t> {        @override        public t call(  {            if ( ! 0) {                throw new serverexception(            }            return         }    }` || since rxjava doesnt do networking you should see whats wrong with retrofit (for example stripping rxjava and doing plain retrofit calls) it is possible you run into a bug thats been  in a newer version also you may try stackoverflow and ask how and why retrofit would upload incomplete data || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
5293;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add classinfo.istoplevel().  seems like a useful method? i can t remember why i didn t add it in the first place. perhaps just an oversight.  partially addresses   relnotes= reflect : added  classinfo.istoplevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61;;2003;bump junit-vintage-engine from 551 to 552;"bumps [junit-vintage-engine]( from 551 to 552<details><summary>release notes</summary>*sourced from [junit-vintage-engines releases]( junit 552  platform 152 + jupiter 552 + vintage 552> > see [release notes]( [`3892622`]( release 552- [`edd36d7`]( log cause for failure to load assumptionviolatedexception- [`cc13950`]( update [@&#8203since]( tag- [`a962909`]( document 2003]( in the 552 release notes- [`835d800`]( avoid jupitertestengine crash if hamcrest is not on the classpath- [`e9baa52`]( correct file type of module descriptors included in jar files- [`83bf310`]( introduce release notes for 552- [`edcba1c`]( back to snapshots for further development- see full diff in [compare view]( />[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency (including time of day and day of week)- automerge options (never/patch/minor and dev/runtime dependencies)- pull request limits (per update run and/or open at any time)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;standard look and feel doesnt work;heyim using jabref 36 on linux mint 18 cinnamonthe standard look and feel doesnt work here is a screenshot with `standard look and feel: comsunjavaswingplafgtkgtklookandfeel` enabled![bildschirmfoto vom 2016-09-17 11-53-01]( here is a screenshot with `use other look and feel: comsunjavaswingplafgtkgtklookandfeel` enabled which is the same as the standard version:![bildschirmfoto vom 2016-09-17 11-54-21]( looks different;"did you restart jabref after changing the look and feel? || also i cant scroll to the color choosers when i `use other look and feel: comsunjavaswingplafgtkgtklookandfeel`see red arrows at the bottom of this picture:![bildschirmfoto vom 2016-09-17 12-04-38]( || @siedlerchr yes i restarted jabref before and after checking the box || seems to be a problem with mint i think i found at least one link regarind problems with menus: maybe related to #393 @jabref/developers  anyone of you using linux mint and can confirm this? || about ""cant scroll to the color choosers"": i can confirm this under mint lmde cinnamon both with the default look&feel and the javaxswingplafmetalmetallookandfeeland it is not only limited to the color chooser: same with other items (eg entry table columns bibtex key generator) || i think gtk look and feel might be disabled if you use linux and openjdk there was a problem which urged us to skip it as default l&f maybe this is related the code for this is somewhere in the jabref startup class || ```java              if (systemgetproperty(""javaruntimename"")contains(""openjdk"")) {                    // metal l&f                    lookfeel  uimanagergetcrossplatformlookandfeelclassname()                    loggerwarn(                            ""there seem to be problems with openjdk and the default gtk look&feel using metal l&f instead change to another l&f with caution"")                }``` || ";1;0;bump junit-vintage-engine from 551 to 552bumps [junit-vintage-engine]( from 551 to 552- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5294;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-26;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix minor documentation typos  thanks to @stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b;;0;moe sync 2020-10-26;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> fix minor documentation typos thanks to @stephan202 and @jbduncanfe37cd815ed687f7bd6881cb60717e0d641b3e1b;;;;;1;1;fix minor documentation typos thanks to @stephan202 and @jbduncanrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid339045611;
5294;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-26;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix minor documentation typos  thanks to @stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b;;0;refactoring of sqlfunction and signature;the general purpose of this change is to clean up type consistency around functionsincluded commits do two basic things:1 avoid using parts of signature as sqlscalarfunction constructor arguments instead only one constructor obtaining single argument (signature) is available for the user this makes code more consistent relief sqlscalarfunction constructors from the responsibility of being singature factory and keeps semantic of what is passed around this code clean2 avoid using strings instead of typesignatures in signature type the signature type had responsibility of translating strings into typesignatures this was moved outside of this class and all constructors allowing to pass types as strings + literalparameters where removed this decreases scope of this class allows to use better defined semantic and avoid passing literalparamterers through the codethe further step would be to continue same strategy for rest of sqlfunctions**if it is possible please try to response quickly (even with just letting me know that those changes are not welcome) as this refactoring will be expensive to rebase thanks in advance :-)**;looks good other than minor comments let me know when youve addressed them and ill merge it || @martint thanks for quick review!all comments were applied || ;;;;0;1;;
5294;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-26;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix minor documentation typos  thanks to @stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b;;0;friendly dependency for beginner developers;just a small change for 101 developers be able to copy and past and compile easily without need too much about gradle;once the current approach doesnt work whats the point to keep it in the wiki? ||  merging 5294 ;;;;0;1;;
5294;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-10-26;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix minor documentation typos  thanks to @stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b;;4292;bump src/main/resources/csl-styles from `fa125ec` to `83603de`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `83603de`<details><summary>commits</summary>- [`83603de`]( update fachhochschule-vorarlberg-notecsl (4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency (including time of day and day of week)- automerge options (never/patch/minor and dev/runtime dependencies)- pull request limits (per update run and/or open at any time)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;create entry by doi;"jabref 431windows 7 61 amd64 java 180_171steps to reproduce:1 id-based entry generator2 choose id type: doi3 paste 101073/pnas1718850115 and click ""generate""4 error while fetching from doi connection error<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```  paste an excerpt of your log file here  ```</details>";seems to be a temporary problem in the current master it works fineyou can try out that version from here  is advised to make a backup of your library ||;1;0;bump src/main/resources/csl-styles from `fa125ec` to `83603de`bumps [src/main/resources/csl-styles]( from `fa125ec` to `83603de`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;0;cant run todays snap/edge 2019-09-11;"platform:name""linux mint""version""192 (tina)""idlinuxmintid_likeubuntupretty_name""linux mint 192""version_id""192""jabref version:```$ snap info jabrefname:      jabrefsummary:   bibliography managerpublisher: oliver kopp (koppor)contact:      unsetdescription: |  jabref is an open source bibliography reference manager the native file format used by  jabref is bibtex the standard latex bibliography formatcommands:  - jabrefsnap-id:      t5x6neym0uc9owdhgorm61nkxh3bd47ktracking:     edgerefresh-date: today at 17:41 mdtchannels:  stable:    –                                candidate: –                                beta:      50-dev 2019-08-26 (530) 212mb -  edge:      50-dev 2019-09-11 (531) 256mb -installed:   50-dev            (531) 256mb -```result of executing /snap/bin/jabref:```$ /snap/bin/jabrefpicked up _java_options: -duserhome/home/dom/snap/jabref/531error: could not find or load main class orgjabreforgjabrefjabreflaunchercaused by: javalangclassnotfoundexception: orgjabreforgjabrefjabreflauncher```";"i will trigger a manual build later so that yesterdays fixes for snap are includedthanks for the report  || i now triggered a manual build please try again if you encounter any bugs please report them  || edge:      50-dev 2019-09-12 (532) 391mbstarts fine  many  thanks for the feedback! it would be really nice if s you could update the help page for the installation and add a short note that jabref is also available as snap  (at the bottom of the page ""edit this page"")again many thanks @lyzardking  for making the snap java 11 compatible || @wujastyk great feedback! let me know if theres something not working in the snap!@siedlerchr there are some more snap fixes comingim working to reduce the snap sizei managed to remove 100mb removing the system jvm(using the jlink its not needed any more)also the upstream fix for the plugin is on its wayit might be a good idea once these issues are sorted to promote a snap to stable and promote it on the snapcraft forum and/or jabref forum/websitewhat do you think? ) || @lyzardking  thanks for the work! 🥇  thats good to hear that the fix is on its way to upstreamwe definitely have the idea of promoting the snap and to deploy it in the ubuntu storebut with an official promotion i would wait until we release a beta of jabref 50 so that all releases are in sync but you could add a note to the install wiki pageyou might also want to check out the ""snap"" label here on issues sometimes it could be related to a snap if its not reproducible in the normal system and i dont always have a linux system at handswe also managed to get the non-snap build working for linux again with jlinkthis jlink might make it also easier for (debian/ubuntu/whatever distro) package maintainers? cause the last version which made it into the repos was 38 || again today snap/edge of 26 september 2019  i get this:```$/snap/bin/jabref ln: failed to create symbolic link /home/dom/snap/jabref/543/config/gtk-20/gtkfilechooserini: file exists/snap/jabref/543/bin/desktop-launch: line 574: /snap/jabref/543/jabref/bin/jabrefmain: no such file or directory``` || i guess the name changed to jabrefi just downloaded the tarfile || yes the name changed moreover it should be possible to download  and run it so the snap does not need to build via gradle (at least if this is not one of the requirements of a snap - no idea about conventions there) || to be honest it could be easier since you already have your build system to pull the tarball and use that directlyim not sure if the snapcraft build system can see that the tarfile changed and to that but since you are using github actions (or travis) it can be added to the ci i believe || you mean that we should build and push the snap during our build? thats definitely possible (see eg  but maybe there was/is a reason why its not done @koppor @siedlerchr ? || i think one of the problems was that it takes around 15 minutes or around that time to build the snapand in earlier versions it was not possible to build and push it to snap || +1 for building here for the master branch only -- second yml file 😅think i just had difficulties with the long building time and theupload maybe just with the building as suchtobias diez <notifications@githubcom> schrieb am fr 27 sep 2019 20 > you mean that we should build and push the snap during our build? thats> definitely possible (see eg>  but maybe there was/is a reason why its not done @koppor> < @siedlerchr < ?>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or mute the thread> < > || the snap could be a simple ""dump"" plugin with the portable buildand the snapcraft build and push to the store could be set up on the existing jabref cii can add a pr with a test it youd like || @tobiasdiez should i use the portable or the other tarfile?what is the difference?the non portable(jabref-linux-master-latesttargz) is smaller but is it missing some libraries? || please use the portable! the other (older files) are a remnant of the old build @koppor can you please clean-up the master and the root  to remove the old builds/experiments sorry for the additional work! || @lyzardking you could also try the debian package -- seems to be the most native to snapcraft:  || i opened a pr for a snap with the java packageit might need testing (more than my daily use case)________________________________from: oliver kopp <notifications@githubcom>sent: tuesday october 1 2019 7 46 amto: jabref/jabref <jabref@noreplygithubcom>cc: galileo sartor <galileosartor@gmailcom> mention <mention@noreplygithubcom>subject: re: [jabref/jabref] cant run todays snap/edge 2019-09-11 (#5307)@lyzardking< you could also try the debian package -- seems to be the most native to snapcraft:  are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || refs #3121  || can this be closed now or is there more work needed to make the snap working? @lyzardking @koppor  || the snap still is not pushing from the build systemi think this can be closed since its related to an older version of the snapthe one currently on the store should mostly work but its not up to datefor the updated version we need to wait for the validation of the permission for the browser addonor while we wait we could remove that part and upload a version without the browser integration(im not sure if the integration has to be in the snap when they vote on the forum to accept itor if it can be added back later on i suppose i can comment it in the snap and add it back at a later date) || ok then we just leave this issue open for now and wait || what do you think?is it better to upload a working snap without the browser integration?keeping in mind that the extension can still be installed and work manually || i would say we wait for about a week to get the permission if this doesnt work out (or we are still waiting) we could push a temporary snap without the extra jabfox stuff || ok! :)a week is about what they usually say to wait on the forum before starting the vote as far as i can tellin any case a working snap is ready to be pushed but i wouldnt want to confuse the store upload in any way || if publish another snap we have to cancel the voting and restart it at alater time since the current snap state is not that critical i would votefor ""waiting""galileo sartor <notifications@githubcom> schrieb am fr 18 okt 201900 > ok! :)> a week is about what they usually say to wait on the forum before starting> the vote as far as i can tell> in any case a working snap is ready to be pushed but i wouldnt want to> confuse the store upload in any way>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or unsubscribe> < > || ";;;;0;1;;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;0;minor fixes for zip function;;looks good but see comment ||;;;;0;1;;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;5243.0;2x: apply promotions for v21;this pr applies the promotions listed in #5243suggested review strategy:- check if the `@experimental` annotation has been removed or turned into `@beta`- check if the `<p>history: 20x` matches the original value of the updated `@since 20x`; merging 5307 ;21 api promotions;planned release date: **april 29 2017**### experimental to standard- `checkreturnvalue` (since 202)- `schedulerwhen()` (since 201)- `completablesubject` (since 205)- `maybesubject` (since 205)- `singlesubject` (since 205)- `testsubscriberrequestmore()` (since 201)#### `completable`- `cache()` (since 204)- `dofinally()` (since 201)- `hide()` (since 205)#### `flowable`- `doafternext()` (since 201)- `dofinally()` (since 201)- `sample()` with emitlast option (since 205)#### `maybe`- `doaftersuccess()` (since 201)- `dofinally()` (since 201)- `flatmapsingleelement()` (since 202)#### `observable`- `doafternext()` (since 201)- `dofinally()` (since 201)- `sample()` with emitlast option (since 205)#### `single`- `doaftersuccess()` (since 201)- `doafterterminate()` (since 206)- `dofinally()` (since 201)#### `basetestconsumer`- `assertnever()` (since 205) 2 overloads- `assertnotimeout()` (since 207)- `asserttimeout()` (since 207)- `awaitcount()` (since 207) 3 overloads- `cleartimeout()` (since 207)- `istimeout()` (since 207)- `testwaitstrategy` (since 207)- `withtag()` (since 207)#### `rxjavaplugins`- `createcomputationscheduler()` (since 205)- `createioscheduler()` (since 205)- `createnewthreadscheduler()` (since 205)- `createsinglescheduler()` (since 205)- `getonbeforeblocking()` (since 205)- `isfailonblockingscheduler()` (since 205)- `onbeforeblocking` (since 205)- `setfailonblockingscheduler()` (since 205)- `setonbeforeblocking()` (since 205)### beta to standardthere are no components marked with `@beta` in the 20x version additions### experimental to beta- `flowablesubscriber` (since 207)- `flowableparallel()` (since 205) 3 overloads- `flowablesubscribe(flowablesubscriber)` (since 207)- `onerrornotimplementedexception` (since 206)- `protocolviolationexception` (since 206)- `undeliverableexception` (since 206)- `parallelflowable` (since 205)- `rxjavapluginsgetonparallelassembly()` (since 206)- `rxjavapluginsonassembly(parallelflowable)` (since 206)- `rxjavapluginssetonparallelassembly()` (since 206)### leave as is- `observableswitchmapsingle()` (since 208 - experimental)- `observableswitchmapsingledelayerror()` (since 208 - experimental)- `parallelfailurehandling` (since 208 - experimental)- `parallelflowabledoonnext(consumer parallelfailurehandling)` (since 208 - experimental)- `parallelflowablemap(consumer parallelfailurehandling)` (since 208 - experimental)-` parallelflowablefilter(consumer parallelfailurehandling)` (since 208 - experimental)- `paralleltransformer` (since 208 - experimental)- `behaviorprocessoroffer()` (since 208 - experimental)- `publishprocessoroffer()` (since 208 - experimental)- `unicastprocessorcreate(boolean)` (since 208 -experimental) 2 overloads of fail-fast mode- `unicastsubjectcreate(boolean)` (since 208 -experimental) 2 overloads of fail-fast mode- `singleunsubscribeon(scheduler)` (since 209 - experimental)### remove`flowablestrict()` (since 205 deprecated in 207);what about the `@checkreturnvalue` annotation? right now its experimental || thanks added to the experimental -> standard section || id like to define what should happen with the `@since` tags and the old version number:- the standard promotions will be updated to `@since 21`- the experimental-beta promotions will be updated to `@since 21 - beta`- the previous version value will be moved into just before the first param or return tag:```java/** * the operator  * <p>history: 206 - experimental * @param x  * @since 21 */@checkreturnvaluepublic final flowable<r> operator()```this small addendum should help quickly pinpoint when certain features were added and were promoted without the need to scan through release logs commits and prs || closing via #5307 ||;1;0;2x: apply promotions for v21;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;5298.0;moe sync 2020-11-10;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor classpath: replace scanner with location class75c2c543c6ac64943037630cfa40945feff10f42-------<p> fix documentation for hashcodetostring() that incorrectly claimed it returned in big-endian orderthe implementation of tostring() goes through the bytes in the same order that asbytes() returns so if the order of the underlying bytes is little-endian (as is the case for longhashcode) then the string will also be little-endian contradicting what the documentation says841129afbd77f8c78bb469de2ece758b418d322b-------<p> optimize hashingcrc32c() by eliminating two xors for every byte of inputbenchmarks suggest a modest speedup around 8%b685bf7068044cfef0c73163408a0ccebacef203-------<p> add constant for origin isolation headerspec:  constant for the origin-isolation headerf3d79119d1e1f9937f332a8c73ed1690dfbb8ffb-------<p> remove outdated reference in docs3ac6e42a8622be4b122dfd4b9eef989148141148-------<p> add additional test for `crc32chashfunction`4f7e925397e6ca2b17ce3d563ba1968e94959bd1-------<p> verify maximumweight before settingthe maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform5298f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068-------<p> do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available6d9e9e33c6a784f86b51c3fac785532351374271-------<p> rollback*** original change description ***do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available***916807371db167b99bb8b591a22c9ec07fe2bac2-------<p> backport `combine` to java7 for `immutablelist` & `immutableset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsa275458c2601c33bfb5ba6ec54e2458feeeff06a-------<p> fix `loadingcache` minor documentation typofixes #550359a9556d82fc233acf8c0a3ad00de14e02384f75-------<p> added submitasync to closingfuturerelnotes""added `submitasync(asyncclosingcallable)` to `closingfuture`""187db6d240a896be6efb6fc98f014b9d4690fe30-------<p> add `x-request-id` to ` #5306relnotesadd `x-request-id` to ` fix android test failure in classpathtestreproduced the error and verified that this change fixes itc1f6ac185f0e72998ed30ae72a0983804c5a4f5a"; setting `cla: yes` since all commits with different authors come directly from prs by those authors ||;verify maximumweight before setting;the maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform;;1;0;fix android test failure in classpathtestreproduced the error and verified that this change fixes it-------------created by moe: https://githubcom/google/moemoe_migrated_revid341509765;
5307;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;moe sync 2020-11-10;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a;;5306.0;moe sync 2020-11-10;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> refactor classpath: replace scanner with location class75c2c543c6ac64943037630cfa40945feff10f42-------<p> fix documentation for hashcodetostring() that incorrectly claimed it returned in big-endian orderthe implementation of tostring() goes through the bytes in the same order that asbytes() returns so if the order of the underlying bytes is little-endian (as is the case for longhashcode) then the string will also be little-endian contradicting what the documentation says841129afbd77f8c78bb469de2ece758b418d322b-------<p> optimize hashingcrc32c() by eliminating two xors for every byte of inputbenchmarks suggest a modest speedup around 8%b685bf7068044cfef0c73163408a0ccebacef203-------<p> add constant for origin isolation headerspec:  constant for the origin-isolation headerf3d79119d1e1f9937f332a8c73ed1690dfbb8ffb-------<p> remove outdated reference in docs3ac6e42a8622be4b122dfd4b9eef989148141148-------<p> add additional test for `crc32chashfunction`4f7e925397e6ca2b17ce3d563ba1968e94959bd1-------<p> verify maximumweight before settingthe maximumweight builder method is the only method that does the argument verification before the assignmentit looks like a typo and does not affect anyone in practice but it is still better to have the implementation uniform5298f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068-------<p> do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available6d9e9e33c6a784f86b51c3fac785532351374271-------<p> rollback*** original change description ***do 16-byte strides in crc32c in cgchash resulting in roughly a 33x speedup to 15 gb/sthis is probably as good as it gets until java 11 when well have access to the intrinsics that use crc hardware when available***916807371db167b99bb8b591a22c9ec07fe2bac2-------<p> backport `combine` to java7 for `immutablelist` & `immutableset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsa275458c2601c33bfb5ba6ec54e2458feeeff06a-------<p> fix `loadingcache` minor documentation typofixes #550359a9556d82fc233acf8c0a3ad00de14e02384f75-------<p> added submitasync to closingfuturerelnotes""added `submitasync(asyncclosingcallable)` to `closingfuture`""187db6d240a896be6efb6fc98f014b9d4690fe30-------<p> add `x-request-id` to ` #5306relnotesadd `x-request-id` to ` fix android test failure in classpathtestreproduced the error and verified that this change fixes itc1f6ac185f0e72998ed30ae72a0983804c5a4f5a"; setting `cla: yes` since all commits with different authors come directly from prs by those authors ||;add `x-request-id` to `httpheaders`;;    ;1;0;fix android test failure in classpathtestreproduced the error and verified that this change fixes it-------------created by moe: https://githubcom/google/moemoe_migrated_revid341509765;
5308;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> backport  combine  to java7 for  immutablemap .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  the java8/java7 implementations branched once again  where java8 uses an array of entries  whereas java7 uses an array of alternating key/value pairs. either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> backport combine to java7 for  immutablerangeset / immutablerangeset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  i saved this for last  but they turned out to be the easiest to do. tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> backport  combine  to java7 for sorted collections & (immutable)bimap.  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code.  450bf69d33c855032e3698ee96bae3994cc0377e;;0;moe sync 2020-11-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> backport `combine` to java7 for `immutablemap`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsthe java8/java7 implementations branched once again where java8 uses an array of entries whereas java7 uses an array of alternating key/value pairs either way the implementations were pretty trivial this time2afe372fb9fd390ceb671003588c053b7d463399-------<p> backport combine to java7 for `immutablerangeset`/`immutablerangeset`this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collectionsi saved this for last but they turned out to be the easiest to do tests are kind of crap but honestly baseline tests also seemed a little bit light to mea742fca6c4f0f96bfedac86b0722efec196b9052-------<p> backport `combine` to java7 for sorted collections & (immutable)bimapthis is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections4c7fe5993f6938d60ecbf90494c93b827253101e-------<p> fix memory leaks and potential crashes in hashbimap which occur in transpiled objc code450bf69d33c855032e3698ee96bae3994cc0377e;;;;;1;1;fix memory leaks and potential crashes in hashbimap which occur in transpiled objc coderelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid341781311;
5308;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> backport  combine  to java7 for  immutablemap .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  the java8/java7 implementations branched once again  where java8 uses an array of entries  whereas java7 uses an array of alternating key/value pairs. either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> backport combine to java7 for  immutablerangeset / immutablerangeset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  i saved this for last  but they turned out to be the easiest to do. tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> backport  combine  to java7 for sorted collections & (immutable)bimap.  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code.  450bf69d33c855032e3698ee96bae3994cc0377e;;0;add mit license field;see  describe the changes you have made here:        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;add mit license fieldsee https://snapcraftio/docs/snapcraft-yaml-reference;
5308;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> backport  combine  to java7 for  immutablemap .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  the java8/java7 implementations branched once again  where java8 uses an array of entries  whereas java7 uses an array of alternating key/value pairs. either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> backport combine to java7 for  immutablerangeset / immutablerangeset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  i saved this for last  but they turned out to be the easiest to do. tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> backport  combine  to java7 for sorted collections & (immutable)bimap.  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code.  450bf69d33c855032e3698ee96bae3994cc0377e;;0;fix grouping on aggregation arguments;5267;its not clear from the explanation in the commit message what the actual problem is it should say something about the arguments to the aggs referencing the values from the source relation not the outputs of the grouping operation (which can produce nulls for grouping columns) || back to you @martint  || ;;;;0;1;;
5308;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> backport  combine  to java7 for  immutablemap .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  the java8/java7 implementations branched once again  where java8 uses an array of entries  whereas java7 uses an array of alternating key/value pairs. either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> backport combine to java7 for  immutablerangeset / immutablerangeset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  i saved this for last  but they turned out to be the easiest to do. tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> backport  combine  to java7 for sorted collections & (immutable)bimap.  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code.  450bf69d33c855032e3698ee96bae3994cc0377e;;0;21 release preparations;### version 210 - april 29 2017 ([maven]( summaryversion 210 is the next minor release of the 2x era and contains the standardization of many experimental api additions from the past half a year since version 200 therefore the following components are now considered stable and will be supported throughout the rest of the life of rxjava 2x**classes enums annotations**- annotation: `checkreturnvalue`- subjects: `completablesubject` `maybesubject` `singlesubject`- enum: `testwaitstrategy`**operators**- **`flowable`**: `doafternext` `dofinally` `sample` (emitlast)- **`observable`**: `doafternext` `dofinally` `sample` (emitlast)- **`single`**: `doaftersuccess` `doafterterminate` `dofinally`- **`maybe`**: `doaftersuccess` `dofinally` `flatmapsingleelement`- **`completable`**: `cache` `dofinally` `hide`- **`test{observer subscriber}`**: `assertnever` `asserttimeout` `assertnotimeout` `awaitcount` `cleartimeout` `istimeout` `withtag`- **`rxjavaplugins`**: `createcomputationscheduler` `createioscheduler` `createnewthreadscheduler` `createsinglescheduler` `getonbeforeblocking` `setonbeforeblocking` `isfailonblockingscheduler` `setfailonblockingscheduler`- other: `schedulerwhen` `testsubscriberrequestmore`*(for the complete list and details on the promotions see issue [5243]( 210 is functionally identical to 209 except the removal of [now unnecessary]( `flowablestrict()` operator to clarify just like with previous minor version increments with rxjava there wont be any further development or updates on the version 20x (patch) level ##### beta promotionssome of the enhancements of rxjava 20x were added recently which often represent complex additions to rxjava itself (such as the whole `parallelflowable`) we are confident their functionality adds value to the library but not enough time elapsed since their introduction for the community to try it out and provide feedback on them (ie naming encompassed functionality etc) to indicate we are willing to support them and eventually standardize them in the next minor release the following components have been promoted to the status of `beta`:- classes: `onerrornotimplementedexception` `protocolviolationexception` `undeliverableexception`  `parallelflowable`- interface: `flowablesubscriber`- methods  - **`flowable`**: `parallel` `subscribe(flowablesubscriber)`  - **`rxjavaplugins`**: `getonparallelassembly` `onassembly(parallelflowable)` `setonparallelassembly`#### non-functional changes between 209 and 21- [pull 5306]( change `observablesourcedefer` to `observabledefer` in `observablescan()` documentation- [pull 5309]( fix javadoc of `flowabletoobservable` referring to `publisher` instead of `observable`#### project statistics- unique contributors: **41**- issues closed: **315**- bugs reported: **43**  - by community: **40** (93%)- commits: **193**- prs: **225**  - prs accepted: **198** (88%)  - community prs: **76** (384% of all accepted)- bugs : **58**  - by community: **8** (139%)- documentation enhancements: **46**  - by community: **22** (522%)- cleanup: **40**  - by community: **22** (55%)- lines  - added: **44931**  - removed: **7405**#### acknowledgementsthe project would like to thank the following contributors for their work on various code and documentation improvements (in the order they appear on the [commit]( page):@vanniktech @veyndan @mauin @smartbeng @imangazalievm @bloderxd @mibac138 @ggikko  @mostroverkhov @sadegh @nmorioka @sleimanjneidi @davidmoten @hkurokawa @jbarr21 @alexandre-dubois @veskoi @stephan202 @paulwoitaschek @soulkeykim @stevepeak @jschneider @jakewharton @tonycosentini @hzsweers @passsy @sergiomarquesmoura @ikesyo @benjchristensen @zsavely @ddesideria @gaemi @jawnnypoo @artem-zinnatullin @mkobit @abersnaze @tbcs @gengjiawen @qwert2603 @dmitriyzaitsev **(40 contributors)**the project would also thank its tireless reviewers @jakewharton and @vanniktech for all their efforts on verifying and providing feedback on the many prs from the project lead himself :+1:;closing210]( ||;;;;0;1;;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;0;2x subject does not emit items;"`compile ioreactivexrxjava2 209`it seems like subscribing inside `doonsubcribe` leads to `subject` swallowing and not emitting items```final observable<string> testactionobservable  observablejust(""test1"")        final observable<string> testaction2observable  observablejust(""test2"")        final observable<string> actions  observablemerge(testactionobservable testaction2observable)        final publishsubject<string> subject  publishsubjectcreate()        final consumer<string> actionconsumer  new consumer<string>() {            @override            public void accept(string action) throws exception {                systemoutprintln(""accept "" + threadcurrentthread()getname())                subjectonnext(action)            }        }        final disposableobserver<string> disposableobserver  new disposableobserver<string>() {            @override            public void onnext(string s) {                systemoutprintln(s)            }            @override            public void onerror(throwable throwable) {            }            @override            public void oncomplete() {            }        }        final consumer<disposable> onsubscribe  new consumer<disposable>() {            @override            public void accept(disposable disposable) throws exception {                systemoutprintln(""onsubscribe "" + threadcurrentthread()getname())                actionssubscribe(actionconsumer)            }        }        subject            doonsubscribe(onsubscribe)            subscribe(disposableobserver)```emits```onsubscribe mainaccept mainaccept main```but things starts to work then subscription to `actions` is moved after subscription to `subject` ```final observable<string> testactionobservable  observablejust(""test1"")        final observable<string> testaction2observable  observablejust(""test2"")        final observable<string> actions  observablemerge(testactionobservable testaction2observable)        final publishsubject<string> subject  publishsubjectcreate()        final consumer<string> actionconsumer  new consumer<string>() {            @override            public void accept(string action) throws exception {                systemoutprintln(""accept "" + threadcurrentthread()getname())                subjectonnext(action)            }        }        final disposableobserver<string> disposableobserver  new disposableobserver<string>() {            @override            public void onnext(string s) {                systemoutprintln(s)            }            @override            public void onerror(throwable throwable) {            }            @override            public void oncomplete() {            }        }        final consumer<disposable> onsubscribe  new consumer<disposable>() {            @override            public void accept(disposable disposable) throws exception {                systemoutprintln(""onsubscribe "" + threadcurrentthread()getname())            }        }        subject            doonsubscribe(onsubscribe)            subscribe(disposableobserver)        actionssubscribe(actionconsumer)```emits```onsubscribe mainaccept maintest1accept maintest2```";when `onsubscribe` is executing from a `subject` the `observer` is not yet visible to the `subject` and any calls to `onnext` will never reach the `observer` this ensures that there cant be any concurrent calls to `onsubscribe` and `onnext` when the subscription happens ||;;;;0;1;;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;0;overwrite existing prepared statements;when creating a prepared statement with a name that already existsoverwrite the existing statement with the new one  this follows the sqlspec under 206 <prepare statement>@electrum fixes https://githubcom/prestodb/presto/issues/5317;;;;;0;1;;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;4300;bump src/main/resources/csl-styles from `fa125ec` to `0581021`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`<details><summary>commits</summary>- [`0581021`]( create zhaw roger müllercsl (4242]( [`566813c`]( create rever-revista-de-estudos-da-religiaocsl ([#4301]( [`0e10a3d`]( update harvard-university-of-bathcsl ([#4302]( [`29737e5`]( create prehistoires-mediterraneennescsl ([#4300]( [`0a19d01`]( update universitatsmedizin-gottingencsl ([#4298]( [`f9e6a9c`]( correct an issue with the status date ([#4299]( [`8a2630a`]( create trends-in-glycoscience-and-glycotechnologycsl ([#4296]( [`4154196`]( update tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxisc- [`83603de`]( update fachhochschule-vorarlberg-notecsl ([#4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;adding auto-generated circleci 20 config file;i used the config translator to auto generate a configlooks good so far only the install4h script seems to refer to a misisng folder:```#!/bin/bash --loginscripts/prepare-install4jshscripts/prepare-install4jsh: line 13: cd: /home/ubuntu/jabref: no such file or directory#!/bin/bash --logininstall4j7/bin/install4jc --verbose --license$install4j_key/bin/bash: install4j7/bin/install4jc: no such file or directoryexited with code 127```        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;1;0;bump src/main/resources/csl-styles from `fa125ec` to `0581021`bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;4242;bump src/main/resources/csl-styles from `fa125ec` to `0581021`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`<details><summary>commits</summary>- [`0581021`]( create zhaw roger müllercsl (4242]( [`566813c`]( create rever-revista-de-estudos-da-religiaocsl ([#4301]( [`0e10a3d`]( update harvard-university-of-bathcsl ([#4302]( [`29737e5`]( create prehistoires-mediterraneennescsl ([#4300]( [`0a19d01`]( update universitatsmedizin-gottingencsl ([#4298]( [`f9e6a9c`]( correct an issue with the status date ([#4299]( [`8a2630a`]( create trends-in-glycoscience-and-glycotechnologycsl ([#4296]( [`4154196`]( update tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxisc- [`83603de`]( update fachhochschule-vorarlberg-notecsl ([#4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;external changes are not reported due to javafx threading issue;modify the bib file externally and get the following error:  ```  javautilconcurrentexecutionexception: javalangillegalstateexception: not on fx application thread currentthread  jabref lowprioritycachedthreadpool	at javautilconcurrentfuturetaskreport(futuretaskjava:122) ~[?:180_181]	at javautilconcurrentfuturetaskget(futuretaskjava:192) ~[?:180_181]	at orgjabrefjabrefexecutorserviceexecuteinterruptabletaskandwait(jabrefexecutorservicejava:108) ~[classes/:?]	at orgjabrefguicollabdatabasechangemonitorfileupdated(databasechangemonitorjava:80) ~[classes/:?]	at javalangiterableforeach(iterablejava:75) [?:180_181]	at orgjabrefguiutildefaultfileupdatemonitornotifyaboutchange(defaultfileupdatemonitorjava:67) [classes/:?]	at orgjabrefguiutildefaultfileupdatemonitorrun(defaultfileupdatemonitorjava:55) [classes/:?]	at orgjabrefjabrefexecutorservice$namedrunnablerun(jabrefexecutorservicejava:162) [classes/:?]	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1149) [?:180_181]	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:624) [?:180_181]	at javalangthreadrun(threadjava:748) [?:180_181]caused by: javalangillegalstateexception: not on fx application thread currentthread  jabref lowprioritycachedthreadpool	at comsunjavafxtktoolkitcheckfxuserthread(toolkitjava:279) ~[jfxrtjar:?]	at comsunjavafxtkquantumquantumtoolkitcheckfxuserthread(quantumtoolkitjava:423) ~[jfxrtjar:?]	at javafxscenewebwebenginecheckthread(webenginejava:1243) ~[jfxrtjar:?]	at javafxscenewebwebengine<init>(webenginejava:879) ~[jfxrtjar:?]	at javafxscenewebwebengine<init>(webenginejava:868) ~[jfxrtjar:?]	at javafxscenewebwebview<init>(webviewjava:273) ~[jfxrtjar:?]	at orgjabrefguipreviewpanel<init>(previewpaneljava:83) ~[classes/:?]	at orgjabrefguicollabentrydeletechangeviewmodel<init>(entrydeletechangeviewmodeljava:47) ~[classes/:?]	at orgjabrefguicollabchangescannercreatebibentrydiff(changescannerjava:171) ~[classes/:?]	at orgjabrefguicollabchangescannerlambda$run$7(changescannerjava:140) ~[classes/:?]	at javautilarraylistforeach(arraylistjava:1257) ~[?:180_181]	at orgjabrefguicollabchangescannerrun(changescannerjava:140) ~[classes/:?]	at javautilconcurrentexecutors$runnableadaptercall(executorsjava:511) ~[?:180_181]	at javautilconcurrentfuturetaskrun(futuretaskjava:266) ~[?:180_181]	 3 more  ```while the symptoms might be easy to fix a bit more work should be invested to make `entrydeletechangeviewmodel` free of javafx controls;well in fact its related to the conversion of the changescanner to javafxthe thing is that these changeviewmodels operate on a swing treenode (defaultmutuabletreenode) as logic first thing would be to extract logic and display of messages and the rendered preview panel ||  by #4693 ||;1;0;bump src/main/resources/csl-styles from `fa125ec` to `0581021`bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;4301;bump src/main/resources/csl-styles from `fa125ec` to `0581021`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`<details><summary>commits</summary>- [`0581021`]( create zhaw roger müllercsl (4242]( [`566813c`]( create rever-revista-de-estudos-da-religiaocsl ([#4301]( [`0e10a3d`]( update harvard-university-of-bathcsl ([#4302]( [`29737e5`]( create prehistoires-mediterraneennescsl ([#4300]( [`0a19d01`]( update universitatsmedizin-gottingencsl ([#4298]( [`f9e6a9c`]( correct an issue with the status date ([#4299]( [`8a2630a`]( create trends-in-glycoscience-and-glycotechnologycsl ([#4296]( [`4154196`]( update tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxisc- [`83603de`]( update fachhochschule-vorarlberg-notecsl ([#4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;jabref 50 dev gets stuck on title  {chapter 138 - {pacap}};"-  i have tested the latest master version from  and the problem persistsjabref 50-dev--snapshot--2018-08-24--master--f43b9c7e8windows 7 61 amd64 java 180_181steps to reproduce:1 i saved (since i have not seen jabfox functional for a while)  to zotero and exported to biblatex format2 the resulting bib-file could be loaded into jabref3 however when trying to remove the ""chapter 138 - {"" jabref get stuck and can only be closed by clicking the (x) in the title bari ask already in the zotera forum to skip these nested braces however jabref 50 should be able to deal with the deletion in 41 a message appeared that the file could not be saved since braces donot match i could after that remove the endbraces and save the file 50 just stopped working";this is almost a copy of #4256 || zotero should not skip these nested braces these nested braces are an entirely normal way to preserve capitalization for proper names or acronyms || this i have realized in the meantime then there is something fishy with jabref dealing with deletion of an open brace the solutuion in version 41 was better || is this error still present? if i recall this the behaviour has been improved  || @siedlerchr this can be closed i tested just now and removing the first brace or the second showed a formatting error which is normal but the program did no longer stop working thanks for the improvement ||;1;0;bump src/main/resources/csl-styles from `fa125ec` to `0581021`bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;4296;bump src/main/resources/csl-styles from `fa125ec` to `0581021`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`<details><summary>commits</summary>- [`0581021`]( create zhaw roger müllercsl (4242]( [`566813c`]( create rever-revista-de-estudos-da-religiaocsl ([#4301]( [`0e10a3d`]( update harvard-university-of-bathcsl ([#4302]( [`29737e5`]( create prehistoires-mediterraneennescsl ([#4300]( [`0a19d01`]( update universitatsmedizin-gottingencsl ([#4298]( [`f9e6a9c`]( correct an issue with the status date ([#4299]( [`8a2630a`]( create trends-in-glycoscience-and-glycotechnologycsl ([#4296]( [`4154196`]( update tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxisc- [`83603de`]( update fachhochschule-vorarlberg-notecsl ([#4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;import window freezes jabref (mac os);"<!-- note: please use the github issue tracker only for bugreports feature requests  questions and general feedback is now handled at  thanks! --> <!--  i have tested the latest master version from  and the problem persists -->jabref version 431<!-- version as shown in the about box --> on mac os x 10136 x86_64 java 180_181<!-- windows 10|ubuntu 1404|mac os x 108| --><!-- hint: if you use a development version (available at  ensure that you use the latest one -->steps to reproduce:1 file --> ""import into current library"" (command key + i)2 select a bib file3 ""open""4 jabref freezes the import window never closes and i have to ""force quit""<details><!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) -->i have the same problem as in  titled ""import window freezes jabref""i havent used jabref for a while and previously this option worked fine so i guess it is related to a recent version updatethe reply to #3997 was:""this is a linux problem with the look and feel try switching to another look and feel in the options""i am not a programmer and i do not understand the solution suggested in your reply to #3997 for the linux system besides i dont know if this is a valid solution for mac os too can you please suggest a solution for mac os users who are not linux experts ?  <summary>i cannot provide a log file because jabref freezes and must be killed by ""force quit""</summary>  <!--  ```  paste an excerpt of your log file here  ```--></details>";"hi first of all try to uninstall jabref then try out the latest development version from  see also the faq  || hello thank you for your answer i uninstalled jabref and installed instead your latest development version:jabref 50-dev--snapshot--2018-08-24--master--f43b9c7e8mac os x 10136 x86_64 java 180_181however i experience exactly the same problem in this new version:file --> import & export --> import into current library > jabref freezes                                        --> import into new library > works fine || thanks for the clarification  i could reproduce this issue now under windows too || hi could you please test if this version fixes the issue for you? my tests under windows were positive: aware that it could be possible that the import inspection window is hidden somewhere  || thank you the ""import into current library"" works fine in the newest version:jabref 50-dev--snapshot--2018-08-28--fiximportfreeze--a274b40e2mac os x 10136 x86_64 java 180_181 || ";1;0;bump src/main/resources/csl-styles from `fa125ec` to `0581021`bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;4292;bump src/main/resources/csl-styles from `fa125ec` to `0581021`;"bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`<details><summary>commits</summary>- [`0581021`]( create zhaw roger müllercsl (4242]( [`566813c`]( create rever-revista-de-estudos-da-religiaocsl ([#4301]( [`0e10a3d`]( update harvard-university-of-bathcsl ([#4302]( [`29737e5`]( create prehistoires-mediterraneennescsl ([#4300]( [`0a19d01`]( update universitatsmedizin-gottingencsl ([#4298]( [`f9e6a9c`]( correct an issue with the status date ([#4299]( [`8a2630a`]( create trends-in-glycoscience-and-glycotechnologycsl ([#4296]( [`4154196`]( update tatup-zeitschrift-fur-technikfolgenabschatzung-in-theorie-und-praxisc- [`83603de`]( update fachhochschule-vorarlberg-notecsl ([#4292]( [`91b903e`]( update fachhochschule-vorarlberg-author-datecsl ([#4291]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";;create entry by doi;"jabref 431windows 7 61 amd64 java 180_171steps to reproduce:1 id-based entry generator2 choose id type: doi3 paste 101073/pnas1718850115 and click ""generate""4 error while fetching from doi connection error<!-- if applicable excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```  paste an excerpt of your log file here  ```</details>";seems to be a temporary problem in the current master it works fineyou can try out that version from here  is advised to make a backup of your library ||;1;0;bump src/main/resources/csl-styles from `fa125ec` to `0581021`bumps [src/main/resources/csl-styles]( from `fa125ec` to `0581021`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5321;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  relnotes=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> add androidaccesstocollectors.  this adds the base immutable collectors already in collectcollectors  but is still lacking the table-collections  multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> backport immutabletable.combine  that should be the last combine to backport. all remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> add to[immutable]multiset to androidaccesstocollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> backport combine to immutable[list|set]multimap  interestingly  immutablemultimap already had combine implemented by lowasser since 2017. probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> add multimap collectors to androidaccesstocollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> add tablecollectors to androidaccesstocollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> fix open source “no tests found in com.google.common.collect.tablecollectorstest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> update public suffix data.  a132338a913fba14384234649f2a6a170f7b7dca;;0;moe sync 2020-11-16;"this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> replaces cycle_finder references to ""--whitelist"" with ""--suppress-list"" and ""--blacklist"" with ""--restrict-to""relnotesnone3bf14a6ebdcaba662e39ea1d98e20e15cf53370d-------<p> add androidaccesstocollectorsthis adds the base immutable collectors already in collectcollectors but is still lacking the table-collections multi-collections and mutable-collectionse93c0557542e53a90ac3b5bae31a41bc102da806-------<p> backport immutabletablecombinethat should be the last combine to backport all remainging collectors are implemented in terms of existing collection transformations564439f883f709843801bb260e998ed6ac6a427d-------<p> add to[immutable]multiset to androidaccesstocollectors2a232a71cb980c689ee6b43ac241a0764d41cfbf-------<p> backport combine to immutable[list|set]multimapinterestingly immutablemultimap already had combine implemented by lowasser since 2017 probably a backport oversightc9dd38f640734604397db8fdeea3f315afb8c487-------<p> add multimap collectors to androidaccesstocollectors4a89571b10379e2e885ce221173365c7deb1b1be-------<p> add tablecollectors to androidaccesstocollectors7b5f741e939c80f0924bec4353d3b1f672d79eb4-------<p> fix open source “no tests found in comgooglecommoncollecttablecollectorstest”d5f07055a1a38227c98c4ec038d74ce7504b3d6f-------<p> update public suffix dataa132338a913fba14384234649f2a6a170f7b7dca";;;;;1;1;update public suffix data-------------created by moe: https://githubcom/google/moemoe_migrated_revid342455735;
5322;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutableenum[set|map] to androidaccesstocollectors  i think that’s the last of them.  the implementations i moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e;;0;moe sync 2020-11-17;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make toimmutableenum[set|map] to androidaccesstocollectorsi think that’s the last of themthe implementations i moved verbatim and there was no change of code there660f036a37966bbee88b3b002d1ad9d1afa8e50e;;;;;1;1;make toimmutableenum[set|map] to androidaccesstocollectorsi think that’s the last of themthe implementations i moved verbatim and there was no change of code thererelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid342853260;
5322;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutableenum[set|map] to androidaccesstocollectors  i think that’s the last of them.  the implementations i moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e;;0; java11gtk3;this commmit removes the extra java libraries since jlink inludes them in the bundleit also uses the new snapcraft syntax to assign the version and the gnome baseive been using it to test it on my system and it seems to workthe reduction in size is from 391mb to 237mbit did need more tweaks in the plugin so before merging id like to hear from the snapcraf team if the change might be accepted upstreamif not there might be another change we can do in the snapcraftyaml file to avoid changing the plugin-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);@lyzardking did you file a pr against the snapcraft repository to get feedback on your changes to the snapcraft gradle plugin? || yes its  ||;;;;0;1;;
5322;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutableenum[set|map] to androidaccesstocollectors  i think that’s the last of them.  the implementations i moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e;;0;over  rows between unbounded preceding and n preceding returns incorrect results;the same issue applies to over( rows between n following and unbounded following)the actual behavior is:```presto:tiny> select nationkey sum(regionkey) over (rows between unbounded preceding and 2 preceding) from nation limit 5```| nationkey | _col1 || --- | --- || 0 | 0 || 1 | 0 || 2 | 0 || 3 | 1 || 4 | 2 |the expected behavior is that this matches the behavior of the following:```presto:tiny> select nationkey sum(regionkey) over (rows between 3 preceding and 2 preceding) from nation limit 5```| nationkey | _col1 || --- | --- || 0 | null || 1 | null || 2 | 0 || 3 | 1 || 4 | 2 |postgresql matches the expected behavior and returns null for the first two rows the removal of the first rowthe part of the sql 2011 standard addressing the window clause is 711 the following references are in the general rules section of that partin the case when the first row is the current row (nationkey  0) the first row (nationkey  0) should be removed from the window frame per rule 5bii2cii and is specifically covered by note 223in the case when the second row is the current row (nationkey  1) the first row (nationkey  0) should be removed from the window frame per the same rule the current/second row (nationkey  1) is removed per note 223 as above; by 8ee399d66887f2980a55dc3d043972983dfbd091 ||;;;;0;1;;
5322;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-17;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutableenum[set|map] to androidaccesstocollectors  i think that’s the last of them.  the implementations i moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e;;0;observablecreate the emitter in the subscribe callback function is null;"    private observable<boolean> saveobservable2(final list<message> messageslist) {        return observable                create(new observableonsubscribe<boolean>() {                    private list<message> relist  new arraylist<message>()                    @override                    public void subscribe(observableemitter<boolean> e) throws exception {                                         // e is null and why?                        }                 })    public void onnewpulse(list<message> pulses){        observable<boolean> save  saveobservable2(pulses)        saveobserveon(schedulerscomputation())                subscribe(new consumer<boolean>() {                    @override                    public void accept(boolean messages) throws exception {                        if (null ! vm) {                            //vmonload(messages false)                            loggerd(""xx"")                        }                    }                })    }    private disposable subscribeinner() {        loggerd(""subscribeinner() service  "" + connectionservice)        return connectionservicegetpublisher()                toflowable(backpressurestrategymissing)                filter(new predicate<message>() {                    @override                    public boolean test(message message) throws exception {                        return 1  messagegetchanneltype()                    }                })                buffer(1000 timeunitmilliseconds)                filter(new predicate<list<message>>() {                    @override                    public boolean test(list<message> messages) throws exception {                        return null ! messages && messagessize() > 0                    }                })                subscribe(new consumer<list<message>>() {                    @override                    public void accept(list<message> messages) throws exception {                        pulsemodelimplgetinstance()onnewpulse(messages)                    }                } new consumer<throwable>() {                    @override                    public void accept(throwable throwable) throws exception {                        loggerd(""net work err occurs ! message  "" + throwablegetmessage() + ""disposal  "" + disposable)                    }                })    }";that is highly unlikely perhaps something else is null while you call `eonnext`:```javaobject o  nullif (condition) {   o  someobject}eonnext(otostring()) // <-- nullpointerexception here but because of o being null``` || @akarnokd but my code shows e is null || it is [impossible]( `e` is null how do you know its null like this?```javasystemoutprintln(e)  // <-- prints null?!``````javasystemoutprintln(e  null)  // <-- prints false?!````e` extends `atomicreference` thus when printed you get the output `null` because the reference has not yet been set || @akarnokd  i use debug mode today i will reinstall the app and using log to show the value of e || @akarnokd still null and i use just() to create observable instead i will read the source code when my current project complete and thanks a lot || how to reproduce ```javapublic class rxblockinggettest {    private void a() { singlecreate(out::println)blockingget() }    private void b() { observablecreate(out::println)blockingfirst() }    private void c() { flowablecreate(out::println backpressurestrategymissing)blockingfirst() }    private void d() { maybecreate(out::println)blockingget() }    private void e() { completablecreate(out::println)blockingget() }    @test /* rxjava 208 */ (timeout  2000)    public void meta() throws interruptedexception {        observable                <runnable>fromarray(this::a this::b this::c this::d this::e)                flatmapcompletable(r -> completablefromrunnable(r)subscribeon(schedulersnewthread()))                test()                await()    }}```ouptut:```nullnullnullnull9223372036854775807orgjunitrunnersmodeltesttimedoutexception: test timed out after 2000 milliseconds``` || the emitter parameter is not null 4 of the 5 emitters extend `atomicreference` which is empty and when printed shows `null` to verify this compare the reference of the emitter with null and see the reference is not null:```javapublic class eisnotnull {    public static void main(string args) {        singlecreate(e -> systemoutprintln(e  null))subscribe()        maybecreate(e -> systemoutprintln(e  null))subscribe()        completablecreate(e -> systemoutprintln(e  null))subscribe()        flowablecreate(e -> systemoutprintln(e  null) backpressurestrategymissing)              subscribe()        observablecreate(e -> systemoutprintln(e  null))subscribe()    }}```it prints `false` for all || sorry i came from another issue (not related to rxjava but `null` and last comment here formed an impression that it is) @mattjma i have another example for you```java    observablecreate(new observableonsubscribe<object>() {            @override            public void subscribe(@nonnull observableemitter<object> e) throws exception {                eonnext(e instanceof atomicreference)                eonnext(egetclass())                eonnext(e)                eonnext(etostring())                eonnext(new atomicreference())                eoncomplete()            }        })subscribe(new consumer<object>() {            @override            public void accept(@nonnull object o) throws exception {                systemoutprintln(o)            }        })```output:```trueclass ioreactivexinternaloperatorsobservableobservablecreate$createemitternullnullnull``` || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
5331;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutablesortedmap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b;;0;moe sync 2020-11-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> make toimmutablesortedmap levarage collect collectorsb499958c1439b0c1c76732ec50daec8b46a1789b;;;;;1;1;make toimmutablesortedmap levarage collect collectorsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344044740;
5331;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutablesortedmap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b;;0;unexpected interaction of keyword and static groups;"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev (commit db96f88 master) on ubuntu-1604 x86_64-  i have tested the latest development version from `* master db96f88 fix problem with search and switching between libraries (#5326)` from  and the problem persists<!-- add a clear and concise description of what the bug is -->the gui allows to add a static group (or another manually created group) to an automatically create(d) keyword group however when such new group is created as a subgroup of the *root* keyword group (""kwds"" in my example) it is not displayed in the gui although it is registered in the program (the second group with the same name can not be created) and is written into the bibliography file the only way to access or get rid of such group seems to be manual editing of the bibtex fileif on the other hand the new group is manually created as a subgroup of a *sub-keyword* it is displayed in the gui but is not saved into the output filesteps to reproduce the behavior:1 copy the example bibtex database to a new file (both files are in [test-keyword-groupszip]( test-keyword-groups-savedbib test-keyword-groupsbib`2 run jabref on the copy of the file:`build/image/bin/jabrefmain test-keyword-groupsbib &`3 create an ""automatically create groups"" subgroup on all entries call it ""kwds"":![screenshot from 2019-09-19 16-47-39]( try to add a ""sub-kwds"" group by right clicking on the ""kwds"" group and then immediately ""ok"" the group is created but not shown on the gui:![screenshot from 2019-09-19 16-52-00]( now try to create a group with the same name ""sub-kwds"" as as subgroup of ""all entries"" (right click on ""all entries"" select ""add subgroup"" enter ""sub-kwds"" as ""name"" click ""ok"") an error message ""there exists already a group with the same name"" appears the ""sub-kwds"" group however is not shown even after collapsing and expanding the ""kwds"" groups:![screenshot from 2019-09-19 16-54-01]( add a sub-group of some keyword: right-click on ""languages"" select ""add subgroup"" name it ""sub-languages"" click ""ok"" a new sub-group appears on the list:![screenshot from 2019-09-19 16-56-38]( click the ""save library"" icon to save the bibtex file exit the jabrefthe resulting ""test-keyword-groupsbib"" file has the following groups:```@comment{jabref-meta: grouping:0 allentriesgroup:1 automatickeywordgroup:kwds\0\keywords\\>\1\0xffffffff\\\2 staticgroup:sub-kwds\0\1\0xffffffff\\\}```loading this file again into jabref obviously will miss the ""sub-languages"" group (which was shown on the gui!) but will retain the hidden ""sub-kwds"" group this group is not shown on the gui but one can not create such group once more (thus it is registered in the group list) a workaround to ""unhide"" this group is to edit the ""test-keyword-groupsbib"" with a text editor and change `2 staticgroup:sub-kwds` to `1 staticgroup:sub-kwds` for exampleboth bibtex files are attached in a zip archive[test-keyword-groupszip](https://githubcom/jabref/jabref/files/3631639/test-keyword-groupszip)";"all subgroups (regardless of there level) of an automatic group should be read-only to every action (ie drag&drop edit and adding subgroups should not be possible)  || thanks for the instant reply! making auto-groups r/o seems like a good solution || on a second thought keyword groups read-only could remove useful functionalityanother idea would be to use the same java code to handle static groups and keyword groups the advantages would be:- more functions implemented in less code :)- both automatic groups and static groups would behave in a similar way reducing confusion and learning curve height- since keywords now can be hierarchical with the same sub-keyword attached to different main keywords (like in ""astma > treatment"" and ""diabetes > treatment"" as per #628 and #1950) the same functionality would be possible for the static groups!i apologise for resurrecting issues #3115 and #1873 but the ability to have subgroups with the same name in various parts in the group tree seems essential (all competing bibliography managers can do it seamlessly and people are used to that) the naming scheme used in hierarchical keywords seems to resolve the name uniqueness issue in the java code || this issue has been inactive for half a year since jabref is constantly evolving this issue may not be relevant any longer and it will be closed in two weeks if no further activity occursas part of an effort to ensure that the jabref team is focusing on important and valid issues we would like to ask if you could update the issue if it still persists this could be in the following form:- if there has been a longer discussion add a short summary of the most important points as a new comment (if not yet existing)- provide further steps or information on how to reproduce this issue- upvote the initial post if you like to see it implemented soon votes are not the only metric that we use to determine the requests that are implemented however they do factor into our decision-making process- if all information is provided and still up-to-date then just add a short comment that the issue is still relevantthank you for your contribution! || ";;;;0;1;;
5331;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutablesortedmap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b;;0;add more logs in spnegofilter;add log to catch non-gssexceptions during the authentication;i have updated the pr to let spnegofilter send back the token in a customized response header when authentication failure happens this will help for debugging on the client side as its not easy to get the token for some cases eg in curl  || @electrum ping~ || the ci error is about comfacebookprestospiprestoexception: scalar sub-query has returned multiple rows i believe its not related to this change || @martint ping to see if have time to take a look || ;;;;0;1;;
5331;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> make toimmutablesortedmap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b;;0;using schedulers in observable newthread to sout;"rxjava2x```javaobservablecreate(new observableonsubscribe<string>() {            @override            public void subscribe(observableemitter<string> e) throws exception {                eonnext(""hello"")                systemoutprintln(threadcurrentthread()getname())            }        })subscribeon(schedulersnewthread())                observeon(schedulersnewthread())                subscribe(new consumer<string>() {                    @override                    public void accept(string ms) throws exception {                        systemoutprintln(ms)                        systemoutprintln(threadcurrentthread()getname())                    }                })```there sout nothing why?thank you";please read the [getting started]( to find the answer || oh  my wrong thank you so much~ ||;;;;0;1;;
5332;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2;;0;moe sync 2020-11-24;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal change412db47018be7ccee39905468f65cd1f7b9f0eb2;;;;;1;1;internal changerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344065888;
5332;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2;;0;custom entry import dialog only appears on broken files and is empty with inherited jabref settings;"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev (commit db96f88 master) on ubuntu-1604 x86_64-  i have tested the latest development version from `* master db96f88 fix problem with search and switching between libraries (#5326)` from  and the problem persists<!-- add a clear and concise description of what the bug is -->if a broken bibtex file that contains correct custom entry types is presented to jabref the ""custom entry type dialogue appears and it is different depending on whether jabref settings are created anew or if they are inherited from the different version- if the settings are inherited from the 40 jabref version (my setting file is attached [jabref-settings-2019-09-19zip]( and a broaken file is opened an *empty* dialogue window is presented for the custom entry import- if the settings are created anew with jabref 50-dev the broken file causes a dialogue with reasonable content to be displayed- if a correct bibtex file is presented (regardless of the settings) the import dialogue is not presented and the settings are silently imported into both old and new settingssteps to reproduce the behavior:1 back up your old settings or remove them if you have a backup:`mkdir -p ~/wastebasket if [ -d ~/wastebasket/jabref ] then ( set -x rm -rf ~/java/userprefs/org/jabref ) else mv -v ~/java/userprefs/org/jabref ~/wastebasket fi`2 unpack the jabref settings from jabref 40:`( cd unzip ~/jabref-settings-2019-09-19zip )`3 start the new jabref in the git working copy:`build/image/bin/jabrefmain test-entry-types-brokenbib &`the first dialogue that appears correctly reports the error in the file the second however looks strange:![screenshot from 2019-09-19 17-48-04]( remove the jabrf setting files:`rm -rf ~/java/userprefs/org/jabref`5 without restoring the old settings start the 50dev jabref:`build/image/bin/jabrefmain test-entry-types-brokenbib &`the first dialogue on startup is again the expected error message and the second is a reasonably filled ""custom entry types"" dialogue:![screenshot from 2019-09-19 17-52-29]( if a correct bibtex file is imported:`build/image/bin/jabrefmain test-entry-typesbib &`no ""custom entry types"" appears regardless of whether the `~/java/userprefs/org/jabref` directory exists an if it exists whether it is from jabref 40 or jabref 50from the users perspective the ""custom entry types"" in step 3 seems incorrect and the behaviour in steps 5 and 6 seems inconsistent one would expect that the ""custom entry types"" dialogue either always appears or is always by-passedthe mentioned bibtex files with custom entry types are here: [test-entry-typeszip](https://githubcom/jabref/jabref/files/3631856/test-entry-typeszip)";;;;;0;1;;
5332;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2;;0;cannot chain `at time zone`;chaining `at time zone` together results in the error `null`: ```presto> select timestamp 2012-10-31 01:00 at time zone america/los_angeles at time zone utcquery 20160520_185347_00028_kmihc failed: nullpresto>```can work around this with eg: ```presto> with tz_la as (select timestamp 2012-10-31 01:00 at time zone america/los_angeles as ts)     -> select tz_lats tz_lats at time zone utc from tz_la                     ts                      |            _col1---------------------------------------------+----------------------------- 2012-10-31 01 00000 america/los_angeles | 2012-10-31 08 00000 utc(1 row)query 20160520_185900_00029_kmihc finished 1 nodesplits: 1 total 0 done (000%)0:00 [0 rows 0b] [0 rows/s 0b/s]presto>```this is on presto 0146 i believe this worked before but i could be mistaken and i havent had time to bisect ill follow up if i find more info there;yea this worked on 0136: ```presto> select timestamp 2012-10-31 01:00 at time zone america/los_angeles at time zone utc            _col0----------------------------- 2012-10-31 08 00000 utc(1 row)query 20160520_192257_00000_fz9jv finished 1 nodesplits: 1 total 1 done (10000%)0:01 [0 rows 0b] [0 rows/s 0b/s]presto>``` ||;;;;0;1;;
5332;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-24;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2;;0;add the cast operator to single;adding the cast operator to single  this exists in the 2x branch but not in the 1x branch so callers have had to do unnatural operations like `map(someclassclass:cast)` to get around this  added tests similar to those for observablecast signed-off-by: mike burns <burnsm523@gmailcom>; merging 5332  < ;;;;1;1;remove extra verify callsigned-off-by: inferno23 <burnsm523@gmailcom>;
5338;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> public: add missing override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce;;0;moe sync 2020-11-30;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> public: add missing override annotationsda5e9d98f43b039c64a62182614f74ca188cd2ce;;;;;1;1;public: add missing override annotationsrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid344396802;
5338;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> public: add missing override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce;;0;remove empty staging directories after insert into hive table;supersedes #3851 because i had to make some additional changes to teststhank you @kokosing;@haozhun thank you for taking care of this || superseded by #5352 ||;;;;0;1;;
5338;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> public: add missing override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce;;0;2x testobserver form maybejust()test() asserts complete;"rxjava 207according to> rxjava 200-rc2 introduced a new base reactive type called maybe    if there is only a single value to be signalled only onsuccess is called and oncomplete is noti assume that  `maybejust(""somevalue"")test()assertnotcomplete()` will pass the test but it doesntwith this example(above) output: `assertionerror: completed! (latch  0 values  1 errors  0 completions  1)`";for simplicity there are no separate test consumers for `single` and `maybe` but the `testobserver` delegates to `onnext` & `oncomplete` the typical tests are then performed via `assertresult()` for empty `assertresult(t)` for single element responses and `assertfailure()` for errors || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
5338;1;0;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-11-30;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> public: add missing override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce;;5334;fix npe when opening a non existing file from the recent files menu;5334 dialogservice object was null because the filehistorymenu class is initialized before the ctor of jabref frame creates the dialog service object        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;"uncaught exception when opening file that no longer exists from the ""recent libraries"" list";"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev (commit db96f88 master) on ubuntu-1604 x86_64 i have tested the latest development version from * master db96f88 fix problem with search and switching between libraries (#5326) from  and the problem persistsjavalangnullpointerexception is raised (thrown)  when a file is selected for opening from the ""recent libraries"" list and this file no longer existsnote: options|preferences|file|open last edited libraries at startup is *unchecked* in my configuration<!-- add a clear and concise description of what the bug is -->steps to reproduce the behavior:1 start the jabref: `build/image/bin/jabrefmain &`2 navigate through ""file|open library"" and open any library say ""test1bib""3 exit jabref4 rename or remove the library eg `mv test1bib test2bib`5 start the jabref again: : `build/image/bin/jabrefmain &`6 navigate to ""file|recent libraries"" find the removed file ""test1bib"" and click its namean unhandled java exception is reported by the gui:![screenshot from 2019-09-20 14-53-30](https://user-imagesentcom/10668420/65325448-8944db00-dbb7-11e9-9a50-a54eaffb1a11png)";jabref 50-devlinux 500-29-generic amd64 java 1104can confirm for the current dev version the exception stacktrace is: `javalangnullpointerexception	at orgjabref/orgjabrefguimenusfilehistorymenuopenfile(unknown source)	at orgjabref/orgjabrefguimenusfilehistorymenulambda$additem$0(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolmenuitemfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolcontextmenucontent$menuitemcontainerdoselect(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolcontextmenucontent$menuitemcontainerlambda$createchildren$12(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandleraccess$1200(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_runloop(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationlambda$runloop$11(unknown source)	at javabase/javalangthreadrun(unknown source)` || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || jabref 50-devlinux 500-29-generic amd64 java 1104i can confirm that this issue has been fixed in the current dev snap version cheers! || the issue is solved also in my installation confirmed by starting the application as `/build/image/bin/jabrefmain &`thanks for the instant fix! ||;1;0;pass opendatabase action instead of jabref frame;
5339;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress tsan errors for benign races.  compare other usages of  @lazyinit  on collection views  such as  hashbimap.inverse  and  abstracttable.cellset .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;0;moe sync 2020-12-02;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> suppress tsan errors for benign racescompare other usages of `@lazyinit` on collection views such as `hashbimapinverse` and `abstracttablecellset`2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;;;;1;1;suppress tsan errors for benign racescompare other usages of `@lazyinit` on collection views such as `hashbimapinverse` and `abstracttablecellset`relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid345023158;
5339;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress tsan errors for benign races.  compare other usages of  @lazyinit  on collection views  such as  hashbimap.inverse  and  abstracttable.cellset .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;0;fix encoding issues in xjc code generation;as mentioned in gitter chat there were currently some encoding issues with the xjc generation of java files based on xsdsive added the encoding parameter to our xjc gradle task with default value of utf8----- ~~ change in changelogmd described~~- ~~ ~~-  manually tested changed features in running jabref- ~~  ()~~-  ( ~~  ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?)~~;;;;;1;1;fix encoding issues in xjc code generation;
5339;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress tsan errors for benign races.  compare other usages of  @lazyinit  on collection views  such as  hashbimap.inverse  and  abstracttable.cellset .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;0;avoid creating taskinfo objects when we need only taskstatus;;;;;;0;1;;
5339;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-02;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress tsan errors for benign races.  compare other usages of  @lazyinit  on collection views  such as  hashbimap.inverse  and  abstracttable.cellset .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2;;0;"2x testing a single unexpectedly results in an illegalstateexception with message: ""onsubscribe not called in proper order""";rxjava 203sample code with the problem:```java@test public void test() throws exception {        mocknonetwork() // will result in an exception with no_network error code as shown below        servicegetsingle()                compose(apihelpercheckfornetwork())                test()                asserterror(throwable -> {                    if (throwable instanceof apiexception) {                        int errorcode  ((apiexception) throwable)geterrorcode()                        return errorcode  no_network                    }                    return false                })}// apihelper:    public static <t> singletransformer<result<t> t> checkfornetwork() {        return upstream ->                upstreamdelaysubscription(isnetworkavailable())                        observeon(ioscheduler) // in tests changed to trampoline                        map(checkforerrors())    }    private static completablesource isnetworkavailable() {        return subscriber -> {            if (isnetworkunavailable()) { // this is true in test                subscriberonerror(apiexceptionfromerrorcode(no_network))            } else {                subscriberoncomplete()            }        }    }```im getting the exception i want but there is an additional exception thrown which seems to be complaining about a failure to subscribe to the single (and this fails the test) what am i missing?here is the stack trace:```javalangassertionerror: error present but other errors as well (latch  0 values  0 errors  2 completions  0)	at ioreactivexobserversbasetestconsumerfail(basetestconsumerjava:133)	at ioreactivexobserversbasetestconsumerasserterror(basetestconsumerjava:278)	at commyappbackendretrofitmembershipservicetesttest(servicetestjava:61)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:26)	at orgjunitinternalrunnersstatementsrunaftersevaluate(runaftersjava:27)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:117)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:42)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:262)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:84)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at comintellijrtexecutionapplicationappmainmain(appmainjava:147)caused by: ioreactivexexceptionscompositeexception: 2 exceptions occurred 	at ioreactivexobserversbasetestconsumerfail(basetestconsumerjava:138)	 31 morecaused by: ioreactivexexceptionscompositeexception$compositeexceptioncausalchain: chain of causes for compositeexception in order received >	at ioreactivexexceptionscompositeexceptiongetcause(compositeexceptionjava:105)	at javalangthrowableprintenclosedstacktrace(throwablejava:707)	at javalangthrowableprintstacktrace(throwablejava:667)	at javalangthrowableprintstacktrace(throwablejava:721)	at orgjunitrunnernotificationfailuregettrace(failurejava:75)	at comintellijjunit4junit4testlistenergettrace(junit4testlistenerjava:297)	at comintellijjunit4junit4testlistenertestfailure(junit4testlistenerjava:279)	at comintellijjunit4junit4testlistenertestfailure(junit4testlistenerjava:231)	at comintellijjunit4junit4testlistenertestfailure(junit4testlistenerjava:207)	at orgjunitrunnernotificationsynchronizedrunlistenertestfailure(synchronizedrunlistenerjava:63)	at orgjunitrunnernotificationrunnotifier$4notifylistener(runnotifierjava:142)	at orgjunitrunnernotificationrunnotifier$safenotifierrun(runnotifierjava:72)	at orgjunitrunnernotificationrunnotifierfiretestfailures(runnotifierjava:138)	at orgjunitrunnernotificationrunnotifierfiretestfailure(runnotifierjava:132)	at orgjunitinternalrunnersmodeleachtestnotifieraddfailure(eachtestnotifierjava:23)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:329)	 18 morecaused by: javalangillegalstateexception: onsubscribe not called in proper order	at ioreactivexobserverstestobserveronerror(testobserverjava:163)	at ioreactivexinternaloperatorssinglesinglemap$1onerror(singlemapjava:55)	at ioreactivexinternaloperatorssinglesingleobserveon$observeonsingleobserverrun(singleobserveonjava:79)	at ioreactivexinternalschedulerstrampolineschedulerscheduledirect(trampolineschedulerjava:49)	at ioreactivexinternaloperatorssinglesingleobserveon$observeonsingleobserveronerror(singleobserveonjava:71)	at ioreactivexinternaloperatorssinglesingledelaywithcompletable$otherobserveronerror(singledelaywithcompletablejava:65)	at commyappbackendretrofitapihelperlambda$checkfornetwork$2(apihelperjava:77)	at ioreactivexinternaloperatorssinglesingledelaywithcompletablesubscribeactual(singledelaywithcompletablejava:36)	at ioreactivexsinglesubscribe(singlejava:2656)	at ioreactivexinternaloperatorssinglesingleobserveonsubscribeactual(singleobserveonjava:35)	at ioreactivexsinglesubscribe(singlejava:2656)	at ioreactivexinternaloperatorssinglesinglemapsubscribeactual(singlemapjava:33)	at ioreactivexsinglesubscribe(singlejava:2656)	at ioreactivexsingletest(singlejava:3067)	at commyappbackendretrofitmembershipservicetesttest(servicetestjava:60)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:26)	at orgjunitinternalrunnersstatementsrunaftersevaluate(runaftersjava:27)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	 18 morecaused by: commyappbackendretrofitapiexception: code: -4	at commyappbackendretrofitapiexceptionfromerrorcode(apiexceptionjava:15)	 38 more```;"please try with the current rxjava 210 version || okay right your custom `completablesource` implementation is wrong:```private static completablesource isnetworkavailable() {        return subscriber -> {            if (isnetworkunavailable()) { // this is true in test                subscriberonerror(apiexceptionfromerrorcode(no_network))            } else {                subscriberoncomplete()            }        }    }```when creating sources this way (which is not recommended) you are responsible for following the protocol please use `completablecreate()` instead || that did it! changing the `completablesource` implementation to the following results in a passing test:```java        return completablecreate(emitter -> {            if (isnetworkunavailable()) {                emitteronerror(apiexceptionfromerrorcode(no_network))            } else {                emitteroncomplete()            }        })``` || thank you! || hm maybe `singledelaysubscription()` isnt what i wanti have been using flowables with `startwith()` for this same check and that works fine but semantically `single` makes more sense hence my current refactoring efforts however when my `completablesource` calls `emitteronerror()` my app crashes with `undeliverableexception` this is actually what i initially expected given the javadoc for `delaysubscription()` which states:> if the delaying source signals an error that error is re-emitted and no subscription to the current single happenswhich operator ought i to be using? thanks for your time || since this is becoming more like a usage question i have posted this to stack overflow:  || > completablesource calls emitteronerror() my app crashes with undeliverableexceptionwhat is the stacktrace of the crash? || this is an example i achieved by setting my device to airplane mode before navigating to a particular screen```05-15 17 19025 8777-8777/commyapp e/androidruntime: fatal exception: mainprocess: commyapp pid: 8777ioreactivexexceptionsundeliverableexception: commyappbackendretrofitapiexception: code: -4    at ioreactivexpluginsrxjavapluginsonerror(rxjavapluginsjava:349)    at ioreactivexinternaloperatorscompletablecompletablecreate$emitteronerror(completablecreatejava:92)    at commyappbackendretrofitapihelperlambda$checkfornetworksingle$2(apihelperjava:86)    at commyappbackendretrofitapihelperaccess$lambda$2(apihelperjava)    at commyappbackendretrofitapihelper$$lambda$3subscribe(unknown source)    at ioreactivexinternaloperatorscompletablecompletablecreatesubscribeactual(completablecreatejava:39)    at ioreactivexcompletablesubscribe(completablejava:1635)    at ioreactivexinternaloperatorssinglesingledelaywithcompletablesubscribeactual(singledelaywithcompletablejava:36)    at ioreactivexsinglesubscribe(singlejava:2703)    at ioreactivexinternaloperatorssinglesingleobserveonsubscribeactual(singleobserveonjava:35)    at ioreactivexsinglesubscribe(singlejava:2703)    at ioreactivexinternaloperatorssinglesinglemapsubscribeactual(singlemapjava:33)    at ioreactivexsinglesubscribe(singlejava:2703)    at ioreactivexinternaloperatorssinglesinglemapsubscribeactual(singlemapjava:33)    at ioreactivexsinglesubscribe(singlejava:2703)    at ioreactivexinternaloperatorssinglesingleziparraysubscribeactual(singleziparrayjava:64)    at ioreactivexsinglesubscribe(singlejava:2703)    at ioreactivexsinglesubscribe(singlejava:2689)    at commyappmvpupgradeupgrademodelretrievelicensekeyanddeveloperpayload(upgrademodeljava:156)    at commyappmvpupgradeupgrademodelinitializebilling(upgrademodeljava:147)    at commyappmvpupgradeupgradepresenterinitializebilling(upgradepresenterjava:73)    at commyappmvpupgradeupgradepresenterattachview(upgradepresenterjava:58)    at commyappmvpupgradeupgradepresenterattachview(upgradepresenterjava:26)    at commyappmvpupgradeupgradefragmentonresume(upgradefragmentjava:101)    at androidsupportv4appfragmentperformresume(fragmentjava:2238)    at androidsupportv4appfragmentmanagerimplmovetostate(fragmentmanagerjava:1346)    at androidsupportv4appfragmentmanagerimplmovefragmenttoexpectedstate(fragmentmanagerjava:1528)    at androidsupportv4appfragmentmanagerimplmovetostate(fragmentmanagerjava:1595)    at androidsupportv4appbackstackrecordexecuteops(backstackrecordjava:758)    at androidsupportv4appfragmentmanagerimplexecuteops(fragmentmanagerjava:2363)    at androidsupportv4appfragmentmanagerimplexecuteopstogether(fragmentmanagerjava:2149)    at androidsupportv4appfragmentmanagerimploptimizeandexecuteops(fragmentmanagerjava:2103)    at androidsupportv4appfragmentmanagerimplexecpendingactions(fragmentmanagerjava:2013)    at androidsupportv4appfragmentmanagerimpl$1run(fragmentmanagerjava:710)    at androidoshandlerhandlecallback(handlerjava:751)    at androidoshandlerdispatchmessage(handlerjava:95)    at androidoslooperloop(looperjava:154)    at androidappactivitythreadmain(activitythreadjava:6121)    at javalangreflectmethodinvoke(native method)    at comandroidinternaloszygoteinit$methodandargscallerrun(zygoteinitjava:889)    at comandroidinternaloszygoteinitmain(zygoteinitjava:779) caused by: commyappbackendretrofitapiexception: code: -4    at commyappbackendretrofitapihelperlambda$checkfornetworksingle$2(apihelperjava:86)     at commyappbackendretrofitapihelperaccess$lambda$2(apihelperjava)     at commyappbackendretrofitapihelper$$lambda$3subscribe(unknown source)     at ioreactivexinternaloperatorscompletablecompletablecreatesubscribeactual(completablecreatejava:39)     at ioreactivexcompletablesubscribe(completablejava:1635)     at ioreactivexinternaloperatorssinglesingledelaywithcompletablesubscribeactual(singledelaywithcompletablejava:36)     at ioreactivexsinglesubscribe(singlejava:2703)     at ioreactivexinternaloperatorssinglesingleobserveonsubscribeactual(singleobserveonjava:35)     at ioreactivexsinglesubscribe(singlejava:2703)     at ioreactivexinternaloperatorssinglesinglemapsubscribeactual(singlemapjava:33)     at ioreactivexsinglesubscribe(singlejava:2703)     at ioreactivexinternaloperatorssinglesinglemapsubscribeactual(singlemapjava:33)     at ioreactivexsinglesubscribe(singlejava:2703)     at ioreactivexinternaloperatorssinglesingleziparraysubscribeactual(singleziparrayjava:64)     at ioreactivexsinglesubscribe(singlejava:2703)     at ioreactivexsinglesubscribe(singlejava:2689)     at commyappmvpupgradeupgrademodelretrievelicensekeyanddeveloperpayload(upgrademodeljava:156)     at commyappmvpupgradeupgrademodelinitializebilling(upgrademodeljava:147)     at commyappmvpupgradeupgradepresenterinitializebilling(upgradepresenterjava:73)     at commyappmvpupgradeupgradepresenterattachview(upgradepresenterjava:58)     at commyappmvpupgradeupgradepresenterattachview(upgradepresenterjava:26)     at commyappmvpupgradeupgradefragmentonresume(upgradefragmentjava:101)     at androidsupportv4appfragmentperformresume(fragmentjava:2238)     at androidsupportv4appfragmentmanagerimplmovetostate(fragmentmanagerjava:1346)     at androidsupportv4appfragmentmanagerimplmovefragmenttoexpectedstate(fragmentmanagerjava:1528)     at androidsupportv4appfragmentmanagerimplmovetostate(fragmentmanagerjava:1595)     at androidsupportv4appbackstackrecordexecuteops(backstackrecordjava:758)     at androidsupportv4appfragmentmanagerimplexecuteops(fragmentmanagerjava:2363)     at androidsupportv4appfragmentmanagerimplexecuteopstogether(fragmentmanagerjava:2149)     at androidsupportv4appfragmentmanagerimploptimizeandexecuteops(fragmentmanagerjava:2103)     at androidsupportv4appfragmentmanagerimplexecpendingactions(fragmentmanagerjava:2013)     at androidsupportv4appfragmentmanagerimpl$1run(fragmentmanagerjava:710)     at androidoshandlerhandlecallback(handlerjava:751)     at androidoshandlerdispatchmessage(handlerjava:95)     at androidoslooperloop(looperjava:154)     at androidappactivitythreadmain(activitythreadjava:6121)     at javalangreflectmethodinvoke(native method)     at comandroidinternaloszygoteinit$methodandargscallerrun(zygoteinitjava:889)     at comandroidinternaloszygoteinitmain(zygoteinitjava:779) ``` || looks like your stream gets cancelled immediately hence the undeliverable error this test passes with 21:```java@testpublic void completablecustomerrors() {    list<throwable> errors  testhelpertrackpluginerrors()    try {            singlejust(1)        delaysubscription(completablecreate(new completableonsubscribe() {            @override            public void subscribe(completableemitter e) throws exception {                if (!eisdisposed()) {                    eonerror(new testexception())                }            }        }))        test()        assertfailure(testexceptionclass)                asserttrue(errorstostring() errorsisempty())    } finally {        rxjavapluginsreset()    }}```try with `!eisdisposed()` like above to see if you are having errors due to cancellation if so consider adding a global error handler as described in the [wiki]( || thanks for the reply btw i am on 210i was also able to get that test (and similar) to passafter adding the check for `!eisdisposed()` i still experienced the crash in my android app so i kept digging i realized i did not tell you what is certainly a critical piece of information (in retrospect) which is that im using `singlezip()` to observe two streams in parallel however when i altered the test to use `zip()` it still passed (test pasted below for completeness)then i noticed that my log output included the log that would be spit out by my error-handler -- so i _knew_ it must be hitting it so i tried debugging to see why it was calling `rxjavapluginsonerror(t)` when debugging no crash ie race condition now im not sure if the error is in my code or a bug in rxjava note that in prod im observing the stream on `schedulersio()`just now in my `completablesource` i added some logging (so i dont have to debug) to notify me if the emitter has been disposed both sources think it is not disposed clearly one wins**critical question:**i dont want to add the global error handler for this case because it feels like papering over a problem is there some way to synchronize my code such that the call to `eisdisposed()` is not subject to race conditions?    @test    public void testwouldfailinprod() throws exception {        // testhelper is not available but fortunately the source code is!        list<throwable> errors  collectionssynchronizedlist(new linkedlist<>())        rxjavapluginsseterrorhandler(errors::add)        try {            single<integer> s1  singlejust(1)                    // im using `compose()` to more accurately reflect my prod code                    compose(stream ->                            streamdelaysubscription(completablecreate(e -> {                                // in prod both this and the other call resolve to `true`                                if (!eisdisposed()) {                                    eonerror(new testexception(""haha""))                                }                            })))            single<integer> s2  singlejust(2)                    compose(stream ->                            streamdelaysubscription(completablecreate(e -> {                                // in prod both this and the other call resolve to `true`                                if (!eisdisposed()) {                                    eonerror(new testexception(""haha""))                                }                            })))            singlezip(s1 s2 (i j) -> true)                    test()                    assertfailure(testexceptionclass)            asserttrue(errorstostring() errorsisempty())        } finally {            rxjavapluginsreset()        }    }    private static class testexception extends exception {        testexception(string msg) {            super(msg)        }    } || > i dont want to add the global error handler for this case because it feels like papering over a problem is there some way to synchronize my code such that the call to eisdisposed() is not subject to race conditions?this is not possible>  im using singlezip() to observe two streams in parallelthis is a critical information that can lead to extra errors because only one error can win there is no delayerror option for `single` but only `observable`/`flowable` so you either convert your flows back or factor out this network check before zipping the sources || my apologies for leaving that out earlier thanks for your help ill take your advice and see if i can either factor out the network check or simply use/convert to observable/flowable instead || just to close the loop on this (sorry for the email spam) factoring out the network check to the `singlezip()` level works perfectly || ";;;;0;1;;
5343;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;0;moe sync 2020-12-03;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> explain when standardsystempropertyvalue() can return a null value and deprecate java_ext_dirsvalue()s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8 but i had forgotten the details about why despite past cls to update the test for specific missing keysi assume that well never actually *remove* java_ext_dirs(just slightly relevant to  deprecated `standardsystempropertyjava_ext_dirs` we do not plan to remove the api but in recent versions of java that property always has a value of `null`5cdf73749704cdb752b922ec8c66dff2d36b22de-------<p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751*** reason for rollback ***causing sheets ios crash*** original change description ***fix memory leaks and potential crashes in hashbimap which occur in transpiled objc codeadd ios specific unit tests in xplat because guava is missing infrastructure for ios tests***d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;;;;1;1;automated rollback of 67517b5a5b7627eee39a47917197998b9f974751*** reason for rollback ***causing sheets ios crash*** original change description ***fix memory leaks and potential crashes in hashbimap which occur in transpiled objc codeadd ios specific unit tests in xplat because guava is missing infrastructure for ios tests***-------------created by moe: https://githubcom/google/moemoe_migrated_revid345445573;
5343;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;0;bump pdfbox from 2016 to 2017;"bumps pdfbox from 2016 to 2017[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)finally you can contact us by mentioning @dependabot</details>";one of your ci runs failed on this pull request so dependabot wont merge it- [continuous-integration/travis-ci/pr]( will still automatically merge this pull request if you amend it and your tests pass ||  ;;;;1;1;update automatic module name;
5343;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;0;round(049999999999999994) gives wrong result;presto uses floor(value + 05) concept to round values which causes problem when it comes to value 049999999999999994 (0x1fffffffffffffp-2)eg``` sqlpresto> select round(049999999999999994) _col0 -------   10 (1 row)```;;;;;0;1;;
5343;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-03;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3;;0;fix javadoc for maybetosingle;the javadoc for the `maybetosingle()` overload that accepts a `defaultvalue` incorrectly states that it will convert an empty `maybe` into a `single` that signals `nosuchelementexception` (likely copied from the version of `maybetosingle()` that does not accept a default value)this change updates the javadoc to indicate that the returned `single` will emit `defaultvalue` if called on an empty `maybe`relevant existing test: https://githubcom/reactivex/rxjava/blob/8819cc933e26449751535bc48ba2f10852c9b96d/src/test/java/io/reactivex/maybe/maybetestjava#l2730; merging 5343 ;;;;1;1;fix javadoc for maybetosingle;
5347;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a;;0;moe sync 2020-12-04;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> systemgetproperties()getproperty > systemgetpropertymy motivation was that its slightly easier for a nullness checker to determine that systemgetproperty(standardproperty) is (generally speaking) non-null but it turns out that javaruntimename is not a standard property!still this is a slight simplification so i guess im submitting96203a3d7a76dda7190e30d58431515fd9ad4ea3-------<p> fix a bug in hashbimap which was causing crashes in sheets on iosthe crash was caused by the fact that linked-list of bientry instances inside a bucket were using @weak references and only the first entry in the list was strongly referenced the remaining ones were deallocatedwith this change sheets ios is not crashing anymore847c0235ef0a768a4d19274a1fe8264bcbfc190a;;;;;1;1;fix a bug in hashbimap which was causing crashes in sheets on iosthe crash was caused by the fact that linked-list of bientry instances inside a bucket were using @weak references and only the first entry in the list was strongly referenced the remaining ones were deallocatedwith this change sheets ios is not crashing anymorerelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid345638671;
5347;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a;;0;add urlencode and urldecode utility functions;@electrum added urlencode and urldecode to resourceutil as requested; ;;;;0;1;;
5347;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a;;0;2x: fix javadoc of functionx;fix the mistake for  `functionx` javadoc; merging 5347 ;;;;1;1;fix javadoc for functionx;
5347;1;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-04;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a;;5333;fix display bug for keyword groups with empty keywords;5333 by filtering out empty keywords        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;keyword groups with keywords that consist only of spaces are displayed in a strange way;"<!-- note: please use the github issue tracker only for bug reports feature requests questions and general feedback is now handled at  --> jabref version 50-dev (commit db96f88 master) on ubuntu-1604 x86_64 i have tested the latest development version from * master db96f88 fix problem with search and switching between libraries (#5326) from  and the problem persists<!-- add a clear and concise description of what the bug is -->when a bibtex database contains an entry with a keyword with only spaces in its value:```@article{id3authors  {b kolker}title  {lernolibro de lingvo esperanto}keywords  {human > languages  interlinguistics}}```jabref displays a strangely shifted empty keyword group that contains *all* entries:![screenshot from 2019-09-20 14-39-51]( to reproduce the behavior:1 load the file `test-empty-keword-group-brokenbib` or `test-empty-keword-group-broken2bib` (from [test-empty-keword-groupzip]( into jabref:```build/image/bin/jabrefmain test-empty-keword-group-brokenbib &```the correctly formatted file `test-empty-keword-group-okbib` behaves as expectedthe partially broken file `test-empty-keword-group-fairbib` that contains an *empty* ""keyword"":```@article{id3authors  {b kolker}title  {lernolibro de lingvo esperanto}keywords  {human > languages interlinguistics}}```(note missing spaces between the two consecutive commas) is also displayed as expected";jabref 50-devlinux 500-29-generic amd64 java 1104can confirm this issue || jabref 500-dev--2019-10-03----16eca244windows 10 100 amd64 java 1104can confirm this issue has been  in the current development version ||;1;0;merge branch master into fixemptygroup;
5354;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34;;0;moe sync 2020-12-11;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter8d571ca36055d207635d84db4159607c511de649-------<p> log a warning if running under a java 7 vmmore precisely log a warning if lambda expressions or type annotations in our classes would produce an exception if someone wants to use retrolambda or a similar tool to rewrite our classes thats fine with us if it works and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotationsthis is a step toward removing java 7 support entirely:  a warning log message when running under java 7 this warning is not _guaranteed_ to be logged when running under java 7 so please dont rely on it as your only warning about future problems if the warning _itself_ causes you trouble you can eliminate it by silencing the logger for `comgooglecommonbasemoreobjects$tostringhelper` (which is used _only_ for this warning) this warning prepares for [removing support for java 7 in 2021]( please report any problems0357006a920c9cf84d47901471a525da85deba34;;;;;1;1;log a warning if running under a java 7 vmmore precisely log a warning if lambda expressions or type annotations in our classes would produce an exception if someone wants to use retrolambda or a similar tool to rewrite our classes thats fine with us if it works and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotationsthis is a step toward removing java 7 support entirely:  a warning log message when running under java 7 this warning is not _guaranteed_ to be logged when running under java 7 so please dont rely on it as your only warning about future problems if the warning _itself_ causes you trouble you can eliminate it by silencing the logger for `comgooglecommonbasemoreobjects$tostringhelper` (which is used _only_ for this warning) this warning prepares for [removing support for java 7 in 2021]( please report any problems-------------created by moe: https://githubcom/google/moemoe_migrated_revid346795766;
5354;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34;;0;parsing time-stamp;"is it possible parse time stamp 28-jan-16 114546421000000 pm in prestoi tried it with following query`select date_parse(28-jan-16 114546421000000 pm%d-%b-%y %l%i%s%f %p)`error`invalid format: ""28-jan-16 114546421000000 pm"" is malformed at ""000 pm""`i get this time stamp format from oracle db";@balajeeu we dont support submicrosecond precision nor mysql and postgresql dofrankly we only process up to milliseconds parsed from the string everything beyond them is truncated@martint: should we extend parsing to at least not error out for nanoseconds (behave the same way we behave currently for microseconds - truncate them but allow as an input)? || @maciejgrzybek  it would be great if you allow the input and truncate the nanosecondscan this be implemented using user defined function is there any tutorial presto udf? || i think the only way to achieve this currently is to change parsing dates its simple change but lets @martint speak about it if he agrees i can prepare patch momentarily || `date_parse` is meant to be compatible with mysql if thats how it behaves then i think its a reasonable change || @martint:``` sqlmysql> select str_to_date(1970/02/03 11 13123456789 %y/%m/%d %h:%i:%s%f)+----------------------------------------------------------------------+| str_to_date(1970/02/03 11 13123456789 %y/%m/%d %h:%i:%s%f) |+----------------------------------------------------------------------+| 1970-02-03 11 13123456                                           |+----------------------------------------------------------------------+1 row in set 1 warning (000 sec)```ill prepare patch || mysql parses this but it issues a warning:```mysql> show warnings+---------+------+---------------------------------------------------------------------+| level   | code | message                                                             |+---------+------+---------------------------------------------------------------------+| warning | 1292 | truncated incorrect datetime value: 1970/02/03 11 13123456789 |+---------+------+---------------------------------------------------------------------+1 row in set (000 sec)``` || @electrum then you claim we shouldnt support it or maybe just log a warning as well?i think is better to allow nano-seconds especially it we allow microseconds which we truncate anywayi believe we should trigger a warning anytime we truncate timeso my takeaway is:1 warning when precision > milliseconds is given (resulting in truncation)2 allow nanosecondsthoughts? || assigning @electrum for above question || closing since #5534 is ;;;;0;1;;
5354;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34;;0;2x: fix typo in error message;when `basetestconsumer` receives fewer items than expected the error shown has a typo replaced *fever* with *fewer*;you are supposed to replace the intro text with the description of your pr || done thank you for the info ||  merging 5354 ;;;;1;1;2x: fix typo in error message;
5354;0;1;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-11;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34;;5022;fix group color when scrolling;5022 problem was that the pseudo-class was not initialized correctly but was only triggered upon changes        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;group view update missing when scrolling;jabref 50-dev latest snap versionlinux 515-300fc30x86_64 amd64 java 180_212a) i have many many groups so that i can only view groups by scrolling up/downb) an entry x is member of several groups one top and bottom group (bottom/top as in view-wise)expected behaviour:when i select entry x the respective groups are highlighted green i can scroll up and down and i can view which groups the entry is part ofactual behaviour: when i select entry x the respective visible groups are highlighted green any non-visible group is not highlighted when i scroll up and down all highlights are lostscreencast at https://ownclouditudk/indexphp/s/axtiqqgm7cbaybb;;1;0;fix group color when scrolling5022 problem was that the pseudo-class was not initialized correctly but was only triggered upon changes;
5355;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-12-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858;;0;moe sync 2020-12-14;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> prepare for release 30181e941f66865d6bece7c3f09cde513a6cc50b858;;;;;1;1;prepare for release 301relnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid347382364;
5355;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-12-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858;;0;bugfix: replace inpredicate in all plan nodes;bugfix: replace inpredicate in all plan nodesso far inpredicate was replaced only in the node where visitor found asfirst subsequent occurrences were not replaced this commit fixes that5346;;;;;0;1;;
5355;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-12-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858;;0;2x: flatmap -> flatmap invokes doonnext but doesnt invoke onnext when emit null;"i have this method:```private void dologin(string username string password) {                login(username password)                flatmap(loginresponsemodel -> getcurrentprofile())                flatmap(profilemodel -> getcurrentorder()doonnext(response -> {                     if (response ! null) {//store values }                 }))                subscribeon(schedulersnewthread())                observeon(androidschedulersmainthread())subscribe(                //onnext                model -> {                      mroutingshowproductsgrid(mviewgetactivity())                }                //onerror                throwable -> {                      mviewshowalert(throwablegetmessage() (dialog which) -> dialogdismiss())                })    }```when ""getcurrentorder()"" observable emits null doonnext() method invokes but onnext method of the subscriber doesnt invoke";"it probably fails after that because you slipped in `null` via `getcurrentorder()` that is not allowed in v2 || when i switch the order of the flatmaps operators and ""getcurrentorder()"" observable emits null doonnext() method invokes the second flatmap operator invokes onnext method of the subscriber invokes too everything works fine even with null the problem is exactly in the second flatmap operatorthis code works fine even if ""getcurrentorder()"" observable emits null:```private void dologin(string username string password) {                login(username password)                flatmap(loginresponsemodel -> getcurrentorder()doonnext(response -> {                     if (response ! null) {//store values }                 }))                flatmap(profilemodel-> getcurrentprofile())                subscribeon(schedulersnewthread())                observeon(androidschedulersmainthread())subscribe(                //onnext                model -> {                      mroutingshowproductsgrid(mviewgetactivity())                }                //onerror                throwable -> {                      mviewshowalert(throwablegetmessage() (dialog which) -> dialogdismiss())                })    }``` || dont emit `null` use sentinel instances or `optional` || @akarnokd could you give me an example please? ||  || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one || ";;;;0;1;;
5355;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;1;moe sync 2020-12-14;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858;;4868;fix default group color;now groups have a dark gray instead of white as their default color 4868        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;default colour of group symbol for new groups deviates from standard colour of group symbol of pre-existing database;"jabref 50-dev--snapshot--2019-04-08--master--3d2d61d0cwindows 10 100 amd64 java 180_201steps to reproduce the behavior:1 open a pre-existing database and open the groups panel2 the triangle symbol for all pre-existing groups is grey3 add a new subgroup (note that the default colour is set to `#ffffff`4 the triangle symbol for the subgroup appears in white i e differs from all other groups in the databaseis there a particular reason why new groups have a different default colour compared to pre-existing groups? or is this related to the fact that the original database (incl groups) was created in jabref 382 and when importing the file the default for the groups colour is set to a different colour than the default for creating new groups within jabref 50?this is just a minor issue but i wanted to report it since the behaviour appears not consistent in fact when i first encountered this issue i thought the different colour was meant to emphasize the ""hierarchical context"" i e ""refine supergroup"" and ""include supergroup"" groups would appear white but ""independent group"" groups would appear grey (since i only use static ""independent group"" groups) since the creation of ""independent group"" groups is now possible again (see:  it is now obvious to me that this different default colour applies to all newly created groups";"i could not reproduce it in the current 50 dev:i had an existing db with a group color of turquoise (previously modified by 50) or whatever the color is called and opened it in jabref the triangle is also the color( i then add a new subgroup (default color white) the new subgroup color is also white || > when i then add a new subgroup (default color white) the new subgroup color is also whitethis is exactly the problem of @aegit  -)old groups do not have any color defined but newly added groups have by default the color white || @siedlerchr as mentioned by @matthiasgeiger this is the problem i mentioned old groups get assigned some default colour (in my case ""grey"") in jabref 50 (i dont know whether this applies only to groups imported from 382 or more generally) but when you generate a new group in jabref 50 it wont have the same colour but the default colour stored in the preferences (in my case ""white"") || i think there are in general two approaches to fix it:- make the ""non-color grey"" the default color instead of white- make the usage of color only an option in the ""create/edit"" group window: only if activated the set color will be usedif the grey is specified somewhere in our style information we could simply use this information - if this is somehow os specific javafx standard the second option might be necessary or as a third option: run a migration as soon as a database without color information for groups is openened (which might affect downwards compatibility - but if i remember it correctly there are already some other breaking changes regarding the groups serialization right?) || if no color is specified (eg since the group was created before colors were supported) then it is displayed in dark graythe problem is that the color selector in the group add/edit dialog does not support a ""not set option"" and always returns white even if the user didnt select a color easiest solution is probably to preselect the dark gray for new groups || okay nonetheless i think that the option to ""not having a color"" should be possible because using any color will lead to such effects in the maintable:![grabbed_20190423-092645]( assume that it is possible to disable the whole color picker? so i would propose to add an additional checkbox ""use specific color"" that is triggering the enabled status of the color picker - and if not checked no color should be stored for the group || i can confirm that this has been  in:jabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsoft || ";1;0;fix default group colornow groups have a dark gray instead of white as their default color 4868;
5357;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744;;0;moe sync 2020-12-16;this code has been reviewed and submitted internally feel free to discuss onthe pr and we can submit follow-up changes as necessarycommits:<p> internal changes965731aaf97ab84a3af5c21db64e76152bcba744;;;;;1;1;internal changesrelnotesn/a-------------created by moe: https://githubcom/google/moemoe_migrated_revid347456805;
5357;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744;;0;current snap jabref version on --edge channel appears broken;the current snap jabref version on the channeledge is not starting anymore if you try to start it using the terminal you get the following error message:`snap run jabref````ln: failed to create symbolic link /home/localuser/snap/jabref/543/config/gtk-20/gtkfilechooserini: file exists/snap/jabref/543/bin/desktop-launch: line 574: /snap/jabref/543/jabref/bin/jabrefmain: no such file or directory```if you switch back to channelbeta jabref starts as expected so this appears to be a regression that was introduced somewhere between the current snap beta version and the current edge version_edit: i checked whether the windows version was affectedjabref 50-dev--snapshot--2019-09-26--master--1a6c92c79windows 10 100 amd64 java 1104-bellsoftthe windows version seems to run fine so this appears to be a linux (snap?) specific issue_;never mind just realized that the issue was already reported here: this is a duplicate and can probably closed (?) ||;;;;0;1;;
5357;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744;;0;set pivot year for date_parse function;"setting pivot allows more natural parsing of dates eg ""16-01-02"" is january 2nd 2016 instead of 1916selected pivot (2020) resulting in range 1970  2069corresponds to the value currently used by mysql and postgresqlthis fixes https://githubcom/prestodb/presto/issues/5215";@martint could you skim through it or dispatch to someone? || the change seems reasonable @haozhun can you review? || this looks good ill merge after the release is done || @haozhun: fixup (7e687bd) for removing two empty lines pushed || merged #5357  ||;;;;0;1;;
5357;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moe sync 2020-12-16;this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744;;0;1x;"thank you for contributing to rxjava before pressing the ""create pull request"" button please consider the following points:  -  please give a description about what and why you are contributing even if its trivial  -  please include the issue list number(s) or other pr numbers in the description if you are contributing in response to those  -  please include a reasonable set of unit tests if you contribute new code or change an existing one if you contribute an operator (if applicable) please make sure you have tests for working with an `empty` `just` `range` of values as well as an `error` source with and/or without backpressure and see if unsubscription/cancellation propagates correctly"; merging 5357 ;;;;0;1;;
5373;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;update public suffix data.;update public suffix data.  relnotes=n/a;;0;update public suffix data;update public suffix datarelnotesn/a;;;;;1;1;update public suffix datarelnotesn/apiperorigin-revid: 349591280;
5373;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;update public suffix data.;update public suffix data.  relnotes=n/a;;0;build prcess: gradle cannot fetch mvvmfx;jabref version: git commit g61e1a159ccsteps to reproduce the behavior:1 see my pkgbuild for arch linux under arch linux  i use /gradlew assemble and /gradlew jlinki get could not find desaxsys:mvvmfx-validation:190-snapshotfull buildlog :[buildlogtxt](https://githubcom/jabref/jabref/files/3673482/buildlogtxt);our build servers have the same problem the jar should be here:  but this folder is empty but this is not specific to this library but all folders of all libs on sonatype are currently empty so this seems to be a (serve) problem on their side as mvvmfx can only be found there we have no choice and waitprobably related:  of building on your own you can also download the latest build from  since a few days we also provide different packages for linux as well as a tar archive that only needs to be extracted i guess this is a preferable/easier way to distribute than to run gradlew ||;;;;0;1;;
5373;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;update public suffix data.;update public suffix data.  relnotes=n/a;;0;add queued flag to statementstats;this flag should be added before the `scheduled` flag it provides a proper way for clients to know if the query is waiting in the queue (clients should not be programmatically using the `state` field);hello @electrum i am interested in trying to figure this out but could you please be more specific?  ||;;;;0;1;;
5373;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;update public suffix data.;update public suffix data.  relnotes=n/a;;0;a crash occur when a activity is destroyed if i call dispose;"below rxjava version```groovy    compile ioreactivexrxjava2 201    // because rxandroid releases are few and far between it is recommended you also    // explicitly depend on rxjavas latest version for bug fixes and new features    compile ioreactivexrxjava2 210```why not called accept(@nonnull throwable throwable)  methodandroid crash my appexample )```javaclass myactivity extends activity{disposable disposableprotected void oncreate(@nullable bundle savedinstancestate) {    superoncreate(savedinstancestate)    disposable disposable  observablecreate(                new observableonsubscribe<file>() {                    @override                    public void subscribe(@nonnull observableemitter<file> e) throws exception {                           // doing my work                            while(true){                                eonnext(picturefile)                                threadsleep(500)                            }                            eoncomplete()                    }                }        )        subscribeon(new newthreadscheduler())        observeon(androidschedulersmainthread())        subscribe(new consumer<file>() {                       @override                       public void accept(@nonnull file file) throws exception {                           loggere(""accept : "" + isdestroy)                       }                   }                new consumer<throwable>() {                    @override                    public void accept(@nonnull throwable throwable) throws exception {                        loggere(""accept"")                    }                }        )        }public void ondestory(){superondestory)()disposabledispose()}}```";how about you format your code  and say what the error actually is? || what is my format code?the crash log is below05-29 11 06037 30205-30383/comtest w/systemerr: ioreactivexexceptionsundeliverableexception: javalanginterruptedexception05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexpluginsrxjavapluginsonerror(rxjavapluginsjava:349)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexinternaloperatorsobservableobservablecreate$createemitteronerror(observablecreatejava:83)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexinternaloperatorsobservableobservablecreatesubscribeactual(observablecreatejava:43)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexobservablesubscribe(observablejava:10842)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexinternaloperatorsobservableobservablesubscribeon$subscribetaskrun(observablesubscribeonjava:96)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexscheduler$disposetaskrun(schedulerjava:452)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexinternalschedulersscheduledrunnablerun(scheduledrunnablejava:61)05-29 11 06038 30205-30383/comtest w/systemerr:     at ioreactivexinternalschedulersscheduledrunnablecall(scheduledrunnablejava:52)05-29 11 06039 30205-30383/comtest w/systemerr:     at javautilconcurrentfuturetaskrun(futuretaskjava:237)05-29 11 06039 30205-30383/comtest w/systemerr:     at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:272)05-29 11 06039 30205-30383/comtest w/systemerr:     at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1133)05-29 11 06039 30205-30383/comtest w/systemerr:     at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:607)05-29 11 06039 30205-30383/comtest w/systemerr:     at javalangthreadrun(threadjava:761)05-29 11 06039 30205-30383/comtest w/systemerr: caused by: javalanginterruptedexception05-29 11 06039 30205-30383/comtest w/systemerr:     at javalangthreadsleep(native method)05-29 11 06039 30205-30383/comtest w/systemerr:     at javalangthreadsleep(threadjava:371)05-29 11 06039 30205-30383/comtest w/systemerr:     at javalangthreadsleep(threadjava:313)05-29 11 06040 30205-30383/comtest w/systemerr:     at comtestuiactivitymainfragmentpicturefragment$1subscribe(picturefragmentjava:115)05-29 11 06040 30205-30383/comtest w/systemerr:     at ioreactivexinternaloperatorsobservableobservablecreatesubscribeactual(observablecreatejava:40) || the sleep in your code is interrupted by the destruction of the activity which doesnt allow the error to propagate through the regular channels use `try-catch` around the sleep to quit the loop in this case:```javawhile (!emitterisdisposed()) {    //     try {        threadsleep(500)    } catch (interruptedexception ex) {        return    }}``` || thx for akarnokdwhat kind of exception doesnt throw regular channel?this information where can i get? || a regular channel is calling `onerror` but in your case that would also crash you can read more about the error handling in the [wiki]( ||;;;;0;1;;
5415;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;remove redundant  else  blocks.;remove redundant  else  blocks.  3974.  relnotes=n/a;;0;sync lang fix;fixes https://githubcom/jabref/jabref/issues/3573;i found  and saw that @brainsucker92 worked on it  it but did not create a pull request so i just did it@brainsucker92 thank you for your work! you are very welcome to join #hacktoberfest || with crowdin the script should be obsolete  as crowdin automatically handles this || sorry i did not link my comment why i still need this: admin might still need it quoting:  that task wont be necessary for all contributors only for maintainers wanting to cleanup the files (like sorting ) however this is not absolutely necessary anymore since crowdin basically takes care || actually i think all these commits shown above were merged already with this pull request:  im still glad i could help you guys! ||;;;;1;1; missing key issue;
5415;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;remove redundant  else  blocks.;remove redundant  else  blocks.  3974.  relnotes=n/a;;0;add jmx counter for cpu time in shard compaction;;"looks good but see comments || capitalize ""cpu"" in commit message ||  ";;;;0;1;;
5415;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;remove redundant  else  blocks.;remove redundant  else  blocks.  3974.  relnotes=n/a;;0;2x: fix doonnext failure not triggering doonerror when fused;this pr fixes an issue when in a fused chain of `doonnext` and `doonerror` the `doonnext` function fails the `doonerror` consumer is not calledoriginally reported in reactor-core: https://githubcom/reactor/reactor-core/issues/664; merging 5415 ;;;;1;1;remove whitespace;
5415;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;remove redundant  else  blocks.;remove redundant  else  blocks.  3974.  relnotes=n/a;;3974.0;remove redundant `else` blocks;remove redundant `else` blocks3974relnotesn/a;;removed some redundant elses using early return;;  hi @pradipta many of these look good and well push out a commit that incorporates them attributed to you soon were not taking the ones where the else branch is of roughly the same size as the if branch because those seem to have more parallelism ||;1;0;remove redundant `else` blocks3974relnotesn/apiperorigin-revid: 359299673;
5431;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;internal change.;internal change.  relnotes=n/a;;0;internal change;internal changerelnotesn/a;;;;;1;1;internal changerelnotesn/apiperorigin-revid: 362406969;
5431;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;internal change.;internal change.  relnotes=n/a;;0;remove mods folder in application image;should fix the problem mentioned in  describe the changes you have made here:        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;;;;1;1;remove mods folder in application imageshould fix the problem mentioned in https://githubcom/jabref/jabref/pull/5406#issuecomment-541297450;
5431;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;internal change.;internal change.  relnotes=n/a;;0;fix interval type handling in rest api;previously intervals greater than 24 days returned the wrong value dueto integer overflow;@cberner you have build failures```  testdistributedqueriesnohashgeneration>abstracttestqueriesselectlargeinterval:143->abstracttestqueryframeworkcomputeactual:81->abstracttestqueryframeworkcomputeactual:86 unhandled type: interval day to second  testtpchdistributedqueries>abstracttestqueriesselectlargeinterval:143->abstracttestqueryframeworkcomputeactual:81->abstracttestqueryframeworkcomputeactual:86 unhandled type: interval day to second``` || other than the build failures ;;;;0;1;;
5431;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;internal change.;internal change.  relnotes=n/a;;0;2x filtered single never completes;"rxjava v210next code:``` javasinglejust(true)            filter(val -> val)            subscribe(val -> logd(""test"" ""success"")                    throwable -> logd(""test"" ""error"")                    () -> logd(""test"" ""complete""))```only prints ""success"" in logs but never ""complete""but since `filter` returns `maybe` i expect complete action to be called";`singlefilter` returns `maybe` where the signal types [are exclusive]( || thats true sorry for the rookie question i was sure `maybe` should always complete ||;;;;0;1;;
5452;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;mark  abstract*.delegate  methods in  graph  as package-private.;mark  abstract*.delegate  methods in  graph  as package-private.  the method was exposing the package-private  basegraph  type through the public type  immutablegraph .  (but it was exposing it only as  protected   and no one could subclass  immutablegraph  outside the package. so this should be mostly academic.)  fixes   relnotes=n/a;;0;mark `abstract*delegate` methods in `graph` as package-private;mark `abstract*delegate` methods in `graph` as package-privatethe method was exposing the package-private `basegraph` type through the public type `immutablegraph`(but it was exposing it only as `protected` and no one could subclass `immutablegraph` outside the package so this should be mostly academic)fixes https://githubcom/google/guava/issues/5450relnotesn/a;;;;;1;1;mark `abstract*delegate` methods in `graph` as package-privatethe method was exposing the package-private `basegraph` type through the public type `immutablegraph`(but it was exposing it only as `protected` and no one could subclass `immutablegraph` outside the package so this should be mostly academic)fixes  365607207;
5452;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;mark  abstract*.delegate  methods in  graph  as package-private.;mark  abstract*.delegate  methods in  graph  as package-private.  the method was exposing the package-private  basegraph  type through the public type  immutablegraph .  (but it was exposing it only as  protected   and no one could subclass  immutablegraph  outside the package. so this should be mostly academic.)  fixes   relnotes=n/a;;0;error in importing jstyles;"jabref 500-dev--2019-10-15----2a5507fd3linux 520-0bpo3-amd64 amd64 (debian 10 buster)java 1202-  i have tested the latest development version from  and the problem persists<!-- add a clear and concise description of what the bug is -->steps to reproduce the behavior:1 add jstyle file for openoffice/libreoffice from gui2 click ok3   <!-- if applicable add excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```javalangnullpointerexception	at orgjabref/orgjabrefguiopenofficestyleselectdialogviewlambda$new$0(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogsetresultandclose(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogpanelambda$createbutton$3(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationenternestedeventloopimpl(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_enternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuiapplicationenternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuieventloopenter(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitenternestedeventloop(unknown source)	at orgjabrefmergedmodule/javafxstagestageshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolheavyweightdialogshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogshowandwait(unknown source)	at orgjabref/orgjabrefguiopenofficeopenofficepanellambda$initpanel$4(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_runloop(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationlambda$runloop$11(unknown source)	at javabase/javalangthreadrun(unknown source)  ```</details>here is one of my jstyles all of my styles give me the above error but i tested other styles without success (i used already them in previous jabref versions)```# this file is licensed under the terms of the gpl version 2 (or later)nameliteratura - engjournalsliteraturapropertiestitle""references""issortbyposition""false""isnumberentries""false""referenceparagraphformat""list 1""referenceheaderparagraphformat""heading 1""# configurare heading1: italics not capitalized left justifiedcitationauthorfield""author/editor""yearfield""year""maxauthors""3""maxauthorsfirst""3""authorseparator"" ""authorlastseparator"" & ""authorlastseparatorintext"" & ""etalstring"" and oth""italicetal""false""yearseparator"" ""intextyearseparator"" ""bracketbeforebracketafterbracketbeforeinlist""[""bracketafterinlist""]""citationseparator"" ""uniquefierseparator"" ""groupednumbersseparator""-""minimumgroupingcount""3""formatcitations""false""citationcharacterformat""default""multicitechronological""false""pageinfoseparator"" ""layoutarticle\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}book\begin{author}\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \end{author}\begin{editor}\format[authorlastfirstfirstfirstauthorandsreplacer]{\editor} \format[ifplural(edsed)]{\editor} \end{editor}\year <i>\format[htmlcharsformatpagesforhtml]{\title}</i>\begin{subtitle} \format[htmlcharsformatpagesforhtml]{\subtitle}\end{subtitle}\begin{series&&number} \series \number\end{series&&number}\begin{volume} \format[htmlcharsformatpagesforhtml]{\volume}\end{volume}\begin{volumes} \volumes vol\end{volumes}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisherinbook\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}inproceedings\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\eventtitle}</i> \begin{eventtitleaddon}\format[htmlcharsformatpagesforhtml]{\eventtitleaddon} \end{eventtitleaddon}\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}incollection\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}#####phdthesis\format[authorlastfirstauthorabbreviatorauthorandsreplacer]{\author}(<b>\year\uniq</b>) <i>\title</i> \schooldefault\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}```";"i figured out the problem the key is that the preview checks for the default layout quick workaround is to add a format for the entry type ""default"" in the jstylethe real bugfix needs to check if the default layout getdefaultbiblayout is present or return another one from the hashmap in oobibstyle || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || @tobiasdiez no same error:<details>  <summary>log file</summary>javalangnullpointerexception	at orgjabref/orgjabrefguiopenofficestyleselectdialogviewlambda$new$0(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogsetresultandclose(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogpanelambda$createbutton$3(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationenternestedeventloopimpl(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_enternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuiapplicationenternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuieventloopenter(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitenternestedeventloop(unknown source)	at orgjabrefmergedmodule/javafxstagestageshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolheavyweightdialogshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogshowandwait(unknown source)	at orgjabref/orgjabrefguiopenofficeopenofficepanellambda$initpanel$4(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_runloop(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationlambda$runloop$11(unknown source)	at javabase/javalangthreadrun(unknown source)</details>jabref 500-dev--2019-10-18----bc26c3ac5linux 520-3-amd64 amd64 java 1202 || please delete the wrong style and readd it it should be marked as invalid  || i had already deleted it indeed to be more precise i had not even added it to jabref in this pc from which i write || i cannot reproduce your issue this should be fixed now could you please test again? || @siedlerchr i just tested it again but with the same result :-(im attaching a zip file containing a screencast to document my issue[screencast_28-10-2019_17 27zip]( || could you please also post your style file again? or is it still the one above? || here is the style used in the above test but i have the same issue with other styles:```# this file is licensed under the terms of the gpl version 2 (or later)nameliteratura - eng (by domenico cufalo aka doc cufalo@gmailcom)journalsliteraturapropertiestitle""references""issortbyposition""false""isnumberentries""false""referenceparagraphformat""list 1""referenceheaderparagraphformat""heading 1""# configurare heading1: italics not capitalized left justifiedcitationauthorfield""author/editor""yearfield""year""maxauthors""3""maxauthorsfirst""3""authorseparator"" ""authorlastseparator"" & ""authorlastseparatorintext"" & ""etalstring"" and oth""italicetal""false""yearseparator"" ""intextyearseparator"" ""bracketbeforebracketafterbracketbeforeinlist""[""bracketafterinlist""]""citationseparator"" ""uniquefierseparator"" ""groupednumbersseparator""-""minimumgroupingcount""3""formatcitations""false""citationcharacterformat""default""multicitechronological""false""pageinfoseparator"" ""layoutarticle\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}book\begin{author}\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \end{author}\begin{editor}\format[authorlastfirstfirstfirstauthorandsreplacer]{\editor} \format[ifplural(edsed)]{\editor} \end{editor}\year <i>\format[htmlcharsformatpagesforhtml]{\title}</i>\begin{subtitle} \format[htmlcharsformatpagesforhtml]{\subtitle}\end{subtitle}\begin{series&&number} \series \number\end{series&&number}\begin{volume} \format[htmlcharsformatpagesforhtml]{\volume}\end{volume}\begin{volumes} \volumes vol\end{volumes}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisherinbook\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}inproceedings\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\eventtitle}</i> \begin{eventtitleaddon}\format[htmlcharsformatpagesforhtml]{\eventtitleaddon} \end{eventtitleaddon}\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}incollection\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}#####phdthesis\format[authorlastfirstauthorabbreviatorauthorandsreplacer]{\author}(<b>\year\uniq</b>) <i>\title</i> \school#default\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}default\format[authors(lastfirstsemicolon)]{\author} (<b>\year\uniq</b>) <i>\title</i> \journal \volume\begin{pages} : \format[formatpagesforhtml]{\pages}\end{pages}``` || hm this is odd on windows your style works fine1 check if your styles are all in utf8 encoding2 try to reset your preferences and restart jabref there might be some invalid value in the preferences || 1 utf8 is default on linux2 tested with clean preferences but with the same issue :-( || ah now i could reproduce it it happens when you **dont** click on the style you added (no style is ""highlighted"")so jabref tries to get the selected style but if non is selected it failswill prepare a fixif you click on it so thats it is highlighted it will work:( ||   it was a columbus egg! || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || @tobiasdiez yes its fine! thank you so much!  ";;;;0;1;;
5452;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;mark  abstract*.delegate  methods in  graph  as package-private.;mark  abstract*.delegate  methods in  graph  as package-private.  the method was exposing the package-private  basegraph  type through the public type  immutablegraph .  (but it was exposing it only as  protected   and no one could subclass  immutablegraph  outside the package. so this should be mostly academic.)  fixes   relnotes=n/a;;0;fix handling of negative intervals;;5448 || other than the build failures  assuming the tests pass;;;;0;1;;
5452;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;mark  abstract*.delegate  methods in  graph  as package-private.;mark  abstract*.delegate  methods in  graph  as package-private.  the method was exposing the package-private  basegraph  type through the public type  immutablegraph .  (but it was exposing it only as  protected   and no one could subclass  immutablegraph  outside the package. so this should be mostly academic.)  fixes   relnotes=n/a;;0;the number of method references in a dex file cannot exceed 64k after adding rx dependencies;"i had the error ""the number of method references in a dex file cannot exceed 64k"" when i try to generate an apk when i remove reactivexs dependencies i have no error anymoreim using the following dependencies:`compile ioreactivexrxjava2 211``compile ioreactivexrxjava2 201`i know i need to use `multidexenabledtrue` to solve this issue but i dont want my app being multdex for now";you can enable proguard to remove unused methods and also to optimize method count by inlining small methods this library proguards fantastically || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;0;annotate converter for nullness;annotate converter for nullnessrelnotesn/a;;;;;1;1;annotate converter for nullnessrelnotesn/apiperorigin-revid: 368077392;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;0;workspace set up guide for eclipse is not easy to follow;the steps described in the [wiki]( for setting up a workspace on eclipse is not easy to follow for eg * it does not mention the test libraries that should be moved to the class path * the `jhm` class is not present in the modulepath list * the step about module dependencies cannot be followed correctly;on my main machine a `/gradlew run` and then a `/gradlew eclipse ` plus copying over the logging plugin seems to work need to check my laptop || thanks for the update do i have to copy `build/generated/sources/annotationprocessor/java/main/org/jabref/gui/logging/plugins/log4jpluginsjava` to `src/main/java/org/jabref/gui/logging` after creating a directory `plugins` in it? || yes thats a thing i have not yet automated the underlying problem is that eclipse and gradle do not yet work with those annotation processing stuff really good (different folders etc) maybe we can simply commit the file without needing to generate it always need to check this out  || i updated the instructions for eclipse now and clarified some details ||;;;;0;1;;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;0;add hidden input__file__name column to hive connector;this is likely a lot of work as this would need to be added to every reader  the implementation should work like partition keys and it may be possible to leverage that code;+1 would be extremely useful aka awesome to target a specific file in a partition! ||;;;;0;1;;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;5480.0;2x: small note on maybedefaultifempty regarding tosingle;ths pr replaces #5485 regarding the issue of #5480 because our javadoc validation did not allow that type of wording (ie mentioning `single` when the method signature is not related to it); merging 5486 ;suggest maybe#tosingle in maybe#defaultifempty documentation;looking at  i was surprised to find it didnt return `single` searching in closed issues found the answer:  perhaps documentation could be improved by explicitly mentioning `tosingle` as an alternative?;pr welcome || closing via #5486 ||;1;0;2x: small note on maybedefaultifempty regarding tosingle;
5486;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate converter for nullness.;annotate converter for nullness.  relnotes=n/a;;5485.0;2x: small note on maybedefaultifempty regarding tosingle;ths pr replaces #5485 regarding the issue of #5480 because our javadoc validation did not allow that type of wording (ie mentioning `single` when the method signature is not related to it); merging 5486 ;update maybe#defaultifempty javadoc (#5480);adds a link to javadoc for `maybe#defaultifempty` method which has a surprising return type (#5480 #5417);forgot about the javadoc wording guards i posted #5486 that includes your sentences and an updated validator ||;1;0;2x: small note on maybedefaultifempty regarding tosingle;
5500;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrent  relnotes=n/a;;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrentrelnotesn/a;;;;;1;1;suppress or fix all compiler warnings in util/concurrentrelnotesn/apiperorigin-revid: 368896197;
5500;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrent  relnotes=n/a;;0;groups not showing in groups panel;ubuntu 1804 with gnome desktop:installed from deb file downloaded from  version:jabref 500-dev--2019-10-21----0f0dce621linux 500-32-generic amd64 java 1202steps to reproduce the behavior:1 open jabref2 open bibfile3 groups are not showing anymore in groups panel in latest development version;"cannot confirm works fine under windows we didnt change anything related to groups || works also fine under linux note that it takes a moment to load the groups || @siedlerchr ok i can confirm that it works under linux the reason why groups disappeared was that my bibfile did not have the group info ``` @comment{jabref-meta: databasetype:bibtex}@comment{jabref-meta: grouping:```at the end of the file anymore this happened when i upgraded from the jabref development version from last week to the latest lets hope it was just an ""upgrade glitch"" and not something more severe with how the bibfile is saved etci think this can be closed now || this is odd we didnt change anything to the groups stuff recently did you accidentally open the  bib file with an older version of jabref? (pre 50) || @siedlerchr no i didnt i keep an eye on it when i update to newer development versions to see whether it happens again one thing i did notice is that when i hit the save button in jabref i keep getting the message ""the library has been modified by another program"" and the buttons ""dismiss changes"" and ""review changes"" appear when i click ""dismiss changes"" nothing seems to happen and i do have my latest version that i just saved my bibfile is stored in a shared dropbox folder so i suspect it might have something to do with that? i cannot think of any other external program making changes to my bibfile when i hit the save button in jabref? || @siedlerchr nevermind the saving issue is a known issue #5085 this can be closed || ";;;;0;1;;
5500;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrent  relnotes=n/a;;0;non-blocking api in connectorpagesource;it makes possible to use asynchronous data fetch in connectors by analogy to the `connectorpagesink#appendpage` method `connectorpagesource#getnextpage` should return `completablefuture<page>` instead of `page` all of the connectors initially should be migrated to return `completablefuturecompletedfuture(page)` supposed that wrapping the result into `completedfuture` wont do any harm to performance if there are any performance related doubts the `listenablefuture<?> isblocked()` method can be add to `connectorpagesource` interface with the default implementation of `return unblocked`the first approach is more clear and intuitive also it explicitly suggest to use unblocked algorithms for data fetching the second approach wont introduce any harm to the performance for sure and no connectors migration will be required@martint @dain what do you think? what approach is better to choose?;i choose second approach over the first one because of the following reasons:1 it is backward compatible2 it has no performance impact3 with high probability non-blocking asynchronous  elements in connectors wont return `future<page>` but some other `future` that must the transformed before returning it to presto when the transformation of `future` is trivial it is not so for `listenablefuture` that must call the underlying callbacks it is not always clear what exactly thread is going to perform required transformation and we must make sure that the presto worker threads performs such operations (deserializing/encoding/etc)actual implementation is here:  || #6343 was merged closing ||;;;;0;1;;
5500;1;1;0;0;0;0;1;1;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;suppress or fix all compiler warnings in util/concurrent;suppress or fix all compiler warnings in util/concurrent  relnotes=n/a;;0;caused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerror;"thanks for using rxjava but before you post an issue please consider the following points:  -  please include the library version number including the minor and patch version in the issue text in addition if youd include the major version in the title (such as `2x`) that would be great  -  if you think you found a bug please include a code sample that reproduces the problem dumping a stacktrace is usually not enough for us  -  rxjava has more than 150 operators we recommend searching the [javadoc]( for keywords of what you try to accomplish  -  if you have a question/issue about a library/technology built on top of rxjava (such as retrofit rxnetty etc) please consider asking a question on stackoverflow first (then maybe on their issue list)  -  questions like ""how do i x with rxjava"" are generally better suited for stackoverflow (where it may already have an answer)  -  please avoid cross-posting questions on stackoverflow this issue list the gitter room or the mailing list";;;;;0;1;;
5501;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;annotate most of  reflect  for nullness.;annotate most of  reflect  for nullness.  and add some documentation relevant to   relnotes=n/a;;0;annotate most of `reflect` for nullness;annotate most of `reflect` for nullnessand add some documentation relevant to https://githubcom/google/guava/issues/3349relnotesn/a;;;;;1;1;annotate most of `reflect` for nullnessand add some documentation relevant to  368916206;
5501;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;annotate most of  reflect  for nullness.;annotate most of  reflect  for nullness.  and add some documentation relevant to   relnotes=n/a;;0;feature char v2;;"supersedes: #5358 rebased on newest masterchanges: re2j and joni casts are always registered only functions are selected with config propertythis is because for all registered casts (varchar->joni|re2j char->joni|re2j) there should be casts registeredfyi: @cberner  || note to self: review  first so we can base this work on top || can you rebase this on @fiedukow s work? i just accepted that so it should be merged soon || i have rebased on top of current master i have also included  commit and used in char code as requested by @cberner@cberner could you review the code i think it is more important than explain analyze review because it touches wide codebase rebasing it every sprint became quite cumbersome  how about the aggregation spilling pr? can you talk to @pnowojski about which is more important? || we decided with @mattsfuller that we should go with char first i think it should be fairly easy to review since it doesnt involve major design questions however maintaining it takes more and more time  || cool || seems like the constructors like `char aaa` dont work as expectedalso i think we may make a use from cast `char` to `varbinary` operator || - ""add fromliteralparamter as scalarimplementation dependency"": typo in commit message and some minor comments otherwise it  - ""remove unused tosqldecimal function"": looks good- ""make joni and re2j regex cast always registered"": minor comments otherwise looks good- ""add test that ensures cast operators are available for coercible types"": have some basic questions about the behavior of `char` || for reference the postgres docs on `char`:  || superseded by:   || ";;;;0;1;;
5501;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;annotate most of  reflect  for nullness.;annotate most of  reflect  for nullness.  and add some documentation relevant to   relnotes=n/a;;0;caused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerror;javalangillegalstateexception: fatal exception thrown on schedulerworker thread	rxinternalschedulersscheduledactionrun(scheduledactionjava)	androidoshandlerhandlecallback(handlerjava:743)	androidoshandlerdispatchmessage(handlerjava:95)	androidoslooperloop(looperjava:150)	androidappactivitythreadmain(activitythreadjava:5621)	javalangreflectmethodinvoke(native method)	comandroidinternaloszygoteinit$methodandargscallerrun(zygoteinitjava:794)	comandroidinternaloszygoteinitmain(zygoteinitjava:684)caused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerror	rxobserverssafesubscriber_onerror(safesubscriberjava)	rxobserverssafesubscriberonerror(safesubscriberjava)	rxinternaloperatorsoperatorobserveon$observeonsubscribercheckterminated(operatorobserveonjava)	rxinternaloperatorsoperatorobserveon$observeonsubscribercall(operatorobserveonjava)caused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerrorcaused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerrorcaused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerrorcaused by : rxexceptionsonerrorfailedexception: error occurred when trying to propagate error to observeronerror;>  please include a code sample that reproduces the problem dumping a stacktrace is usually not enough for us[google]( || i get the same error when app runs in the bad net！have you solved it? @longzc1314 @akarnokd  ||;;;;0;1;;
5501;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;1;0;0;0;0;1;0;0;1;annotate most of  reflect  for nullness.;annotate most of  reflect  for nullness.  and add some documentation relevant to   relnotes=n/a;;4949;new ads fetcher;i added a new fetcher that uses the new ads api some open question for implementation:* which ids should be viable ids for idbasedfetchers? only doi? only ads bibcode? the current/old version can handle both but im not sure if this is intentional * we need an api key to access the api i have one for development but someone has to create one for the project * we need to set a limit on how much search results are shown is 20 a good value?refs #4949 -----  change in changelogmd described-  -  cleanups tasks (change comments and documentation)-  manually tested changed features in running jabref-  (  add api key;that looks already really good nice job! - if it is (relatively) easy to implement then doi + bibcode support would be nice- i will request an official key- 20 entries sounds indeed gooddo you have any questions codewise at the moment or anything else where we can help? || > if it is (relatively) easy to implement then doi + bibcode support would be nicethat is no problem i already have implemented this> do you have any questions codewise at the moment or anything else where we can help?at the moment i dont have any questions but i would like to get as much feedback as possible || right now i have implemented the fetcher in a new class should we keep the old one and remove it later? || you can delete/replace the old fetcher there is no point in having two fetcher for the same online service || great thanks! any plans / chances that the new fetcher will be back ported to the latest stable release (43) !? ||;switch to ads api;ads classic is closing this fall currently ads search in jabref fetches entries from ads classic (and also they are linked to ads classic) is there any plans for updating ads classic to new ads in web search？although we can by ourselves replace all the  with  in our existed bib files or modify some of the codes i am wondering if there are any other better solutionsmany thanks;currently we were not aware of ongoing changes can you please provide us some links to the new search function and maybe to some documentation? this would make life a bit easier for us thank you! || thanks for your emailopen ads classic ( and you will find on thetop of the page: “ads classic will be deprecated in may 2019 and retired inoctober 2019 please redirect your searches to the new ads modern form orthe classic form more info can be found on our blog”an official reminder about the transition is available here: search in classic form is still available: here is *a simple guide* to the new ads where you can find more aboutthe search function:  i find the new ads is much much better than the old version)i really appreciate your work on it as i am a heavy user of jabrefbeston sat may 4 2019 at 6:21 pm matthias geiger <notifications@githubcom>wrote:> currently we were not aware of ongoing changes> can you please provide us some links to the new search function and maybe> to some documentation?>> this would make life a bit easier for us>> thank you!>> —> you are receiving this because you authored the thread> reply to this email directly view it on github> < or mute> the thread> < > || we should probably switch to the official api:  to  we need to use the search api and then afterwards the [export api]( to obtain the bibtex code || a few weeks ago i noticed that using the ads option in the drop-down list in the id-based entry generator had stopped working and seeing this issue i wonder if the timing of that is related? has it stopped working for anyone else?(im using jabref version 431 on macos 10126 in case thats relevant)edit: nevermind apparently the whitespace character that was being included in the bibcode when i copynpasted it was causing it to fail || i will try to resolve this issue || this issue can be closed || thanks to @johahu this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version ||;1;0;add token;
5503;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;link to the immutable collectors from the utility classes.;link to the immutable collectors from the utility classes.  relnotes=n/a;;0;link to the immutable collectors from the utility classes;link to the immutable collectors from the utility classesrelnotesn/a;;;;;1;1;link to the immutable collectors from the utility classesrelnotesn/apiperorigin-revid: 369235289;
5503;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;link to the immutable collectors from the utility classes.;link to the immutable collectors from the utility classes.  relnotes=n/a;;0;improve accounting of memory used by local exchanges;;;;;;0;1;;
5503;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;link to the immutable collectors from the utility classes.;link to the immutable collectors from the utility classes.  relnotes=n/a;;0;ignore(dont save reference to) disposable returning after subscription rxjava2;"hello and thx for your great work im android developer and i faced with some situation i use observablecreate() **to wrap listeners**  and move into reactive-world:```  observablecreate(emitter -> {            sharedpreferences sharedpreferences  getsharedpreferences()            sharedpreferencesonsharedpreferencechangelistener listener  (sharedpreferences key) -> emitteronnext(sharedpreferencesgetboolean(""some key"" false))            sharedpreferencesregisteronsharedpreferencechangelistener(listener)            emittersetcancellable(() -> sharedpreferencesunregisteronsharedpreferencechangelistener(listener))        })```**the problem** is **this listener is stroring as weakreference** at sharedpreferences in that case only disposable returning after observablesubscribe() method will save strong-reference to this listenersometimes it does not neccessary for me to persist that disposable because i wont dispose() my subscription but in this case( dont store reference to disposable) my listener will be cleared by gc and my observable stops emit items**my question:** whether it is valid to not store disposable returning after subscribe() or not in common caseor my code is wrong and i need to create some proxy-class that will store strong-references in this casethx!";"you have to retain a strong reference to the listener in your case of which the easiest way is to store the `disposable` of the subscription in a strong reference (as it practically does the same thing as a proxy wrapper would at this point) || - i know undestand and wrote about saving listener inside strong reference at _disposable_- storing strong-referenceto listener at _disposable_ is a native behaviour in such cases because(as i mention earlier) it storing by using _emitter#setcancellable()_and so my question was: **whether it is valid to not store disposable( returning after observable#subscribe())in common case**i work at team and we want to maintain some rules during developing necessity(or lack of such necessity) of mandatory preservation strong-reference to disposable is one of such rules || on android you have to store that `disposable` to support cancelling the sequence in case the activity is stopped or paused the usual issue is opposite to your situation namely the strong reference may leak the activity beyond its lifecycle from this perspective the fact that `registeronsharedpreferencechangelistener` uses weak references and unless you store a reference to the observer/disposable the setup will end up being gcd the objective here is to have a working solution counteracting this property and not the philosophical question of whether storing disposables is good practice or not || the counter-question is how would you handle the situation without rxjava and just by interacting with the listener the traditional android way? || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one || @akarnokd hello! id like to rephrase original question: doesnt observable contract guarantee that its subscriptions must work with no regard to whether client code stores references to them or not? || how do you define ""must work""? if you dont store references you cant call `dispose` thus cant stop an ongoing `observable` flow || @akarnokd id define it as follows: subscription works while its observer receives items it has subscribed to || yes there are two cases to consider: - running a synchronous source will work because the current thread will keep references to it through the end `observablesubscribe()` call - running asynchronous source with standard schedulers will keep a reference to the whole chain from the backing scheduledexecutorservices thread as the task it executes has strong references to the inner components of the `observable` operatorsthis guarantee actually comes from java because otherwise everything would break that somehow doesnt store reference in somewhere reachable from static roots || ok lets see code that subscribes for settings and show/hide error:```  private void somemethod() {        observepreferences()subscribe(somevalue -> somevalue ? shownotification()                hidenotifiaction())    }```at that part of code i ignored disposable returned after observable#subscribe() call because im not interested in disposing subscription also i have not any thread switching thus not using schedulers observepreferences() can be realized at this manner:``` private observable<boolean> observepreferences() {        return observablecreate(emitter -> {            sharedpreferences sharedpreferences  getsharedpreferences()            sharedpreferencesonsharedpreferencechangelistener listener  (sharedpreferences key) -> emitteronnext(sharedpreferencesgetboolean(""some_pref_key"" false))            sharedpreferencesregisteronsharedpreferencechangelistener(listener)            emittersetcancellable(() -> sharedpreferencesunregisteronsharedpreferencechangelistener(listener))        })    }```now lets see ioreactivexinternaloperatorsobservableobservablecreatejava:``` @override    protected void subscribeactual(observer<? super t> observer) {        createemitter<t> parent  new createemitter<t>(observer)        observeronsubscribe(parent)        try {            sourcesubscribe(parent)        } catch (throwable ex) {            exceptionsthrowiffatal(ex)            parentonerror(ex)        }    }```as you can see only place where disposable is storing is _observeronsubscribe(parent)_also as we can see at observables```    public final disposable subscribe(consumer<? super t> onnext consumer<? super throwable> onerror            action oncomplete consumer<? super disposable> onsubscribe) {        objecthelperrequirenonnull(onnext ""onnext is null"")        objecthelperrequirenonnull(onerror ""onerror is null"")        objecthelperrequirenonnull(oncomplete ""oncomplete is null"")        objecthelperrequirenonnull(onsubscribe ""onsubscribe is null"")        lambdaobserver<t> ls  new lambdaobserver<t>(onnext onerror oncomplete onsubscribe)        subscribe(ls)        return ls```results disposable is not storing at any placesthus at that implementation no one storing disposable after subscription thus weak listener will be removed by gc soon and my subscriber/observer/consumer will not receive events after that || is `registeronsharedpreferencechangelistener` rxjava ? lets see a simplified example:```javaweakreference<integer> wr  new weakreference<>(123456789)observable<integer> obs  observablefromcallable(() -> wrget())systemgc()threadsleep(200)obstest()  assertfailure(nullpointerexceptionclass)```unsurprisingly rxjava failed to keep `123456789` alive rxjava cant change such weak sources into strong ones and also cant make you hold strong references to its own componentsyour case has nothing to do with rxjava i assume the weak reference property of `registeronsharedpreferencechangelistener` was there all along and when you manually registered a listener you kept a strong reference to the listener somewhere until it could be released now rxjava is taking the place of the listener thus you have to keep a strong reference of the observer or disposable you use/get back to prevent losing the listener (this is no contradiction to my answer to @einmalfel question as he didnt specify what sources he meant and my answer assumed standard rxjava sources that dont have any weak references anywhere near them)  || @akarnokd so does the observable implementation in question violate observable contract? || lets see:- `onsubscribe` called? **yes**  create` itself- `onxxx` methods called sequentially? **yes** the sharedpreferences signals from the main thread right?- `onxxx` stops if the consumer disposes? **yes** the setcancellation call after the register call ensures thisverdict: contract honored || if the question had been how to work around such weak listeners thats a more interesting question for example have a companion task that keeps a reference to the listener as part of the `observable` setup:```javaprivate observable<boolean> observepreferences() {    return observablecreate(emitter -> {            sharedpreferences sharedpreferences  getsharedpreferences()            sharedpreferencesonsharedpreferencechangelistener listener                  (sharedpreferences key) ->                     emitteronnext(sharedpreferencesgetboolean(""some_pref_key"" false))            sharedpreferencesregisteronsharedpreferencechangelistener(listener)            disposable d  schedulersio()scheduleperiodicallydirect(               () -> log(listenertostring()) 100000 timeunitdays)            emittersetcancellable(() ->                   sharedpreferencesunregisteronsharedpreferencechangelistener(listener)                  ddispose()            })      })} || @akarnokd nice solution! in our project we decided to go for sharedprefs decorator that stores strong refs || in a similar scenario i used a `identityhashmap` to store the references and removed the references on cancellation || ";;;;0;1;;
5503;1;1;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;link to the immutable collectors from the utility classes.;link to the immutable collectors from the utility classes.  relnotes=n/a;;5502;fix destination for jabref mozilla json;5502 id keep the branch open to enable test  builds of deb/rpm packages while we fix the last jpackage options;ah shit osssonatype maven repo once again is down || it managed to build locally and went down just as i pushed the change upstream || @siedlerchr i forced the build to run again since the repo is up nowonce its built let me know if you can test it! || @lyzardking what testing do you mean? none of us has linux machines :(if you say its good to go we can merge! || it should be finejust to be on the safe side ill try rebasing on master so i can test the deb first || seeing  @siedlerchr is our linux tester 🎉  || > seeing #5502 @siedlerchr is our linux tester 🎉you wish nope i have only a slow ubuntu vm (running on my hdd cause my ssd is too small) for testing stuff || > > seeing #5502 @siedlerchr is our linux tester tada> > you wish nope i have only a slow ubuntu vm (running on my hdd cause my ssd is too small) for testing stuff  i tested on a live image with no jabref version with the version in the ubuntu repo and reinstalling the debthe install seems to never fail and copies the proper json file@siedlerchr if you want to test it to be sure then youre free to merge || that was fast @tobiasdiez i would have kept the branch to test the deb since the licence/copyright stuff is still missing but we can open a new one once we figure it outregarding that i have never had a reply on the mailing list || yeah you are not alone ive also send a few mails to the jdk mailing list and didnt get a single response yetthe license stuff is not super important so i guess it is fine to wait until jpackage is released and properly documented(the branches are deleted automatically btw) || ah ok sorrythe rest of the deb should workand the license in the rpm should (in theory) worksince its set in a separate commandbut ill test that tomorrow in a vm ) || works fine now ||    ||;error installing jabref deb package in ubuntu: native messaging host is not a dir;latest version of jabref:`  sudo dpkg -i jabref_500-1_amd64\(1\)deb ````install: target /usr/lib/mozilla/native-messaging-hosts/ is not a directory: no such file or directorydpkg: error processing package jabref (--install): installed jabref package post-installation script subprocess returned error exit status 1errors were encountered while processing: jabref```i manually checked it the dir is not existing /usr/lib/mozilla only has a subfolder pluginslinux osboxes 4150-62-generic #69-ubuntu smp wed sep 4 20 53 utc 2019 x86_64 x86_64 x86_64 gnu/linuxubuntu 1804firefox 69; -d     create  all  leading  components of dest except the last or all              components of --target-directory then copy source to dest```i think the issue is i used the destination so it created only `/usr/lib`it should be enough to fix the postinst fileill test now and upload a fix || i created a branch ( with the fix so i can use it to also build and test the rpm before pushing to masterfor now if you want to test it the deb should work so this fix can be  thank for the quick action just create a pr and then we can checkout the branch build   || done if you want to test it before merging i tested on a freshly installed ubuntu-mate that did not have the mozilla folder before the installafter a removal i only remove the json although we could check if the folder is empty and then remove that as well but it might be unnecessary || thanks works now only the ""grep"" is showing of course the dir not found but it works:`grep: /usr/lib/mozilla/native-messaging-hosts/orgjabrefjabrefjson: no such file or directory` || the grep should be from the postrmthe check needs to be more consistenti think this can be solved by adding a check if the file existsill test it now || @siedlerchr i pushed a fix on the same branchif you can test it once it builds let me know if it solves the issue || will test it tomorrow on my vm (reminder for myself) || thanks @siedlerchr i rebased on master to be sure its in syncso the latest version on the branch should be finei guess that if it works for me and on your vm we can say its fine ) || ";1;0;check if json native extension file exists;
5505;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify  atomicdoublearray.set()  javadocs.;clarify  atomicdoublearray.set()  javadocs.  relnotes=n/a;;0;clarify `atomicdoublearrayset()` javadocs;clarify `atomicdoublearrayset()` javadocsrelnotesn/a;;;;;1;1;clarify `atomicdoublearrayset()` javadocsrelnotesn/apiperorigin-revid: 369248396;
5505;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify  atomicdoublearray.set()  javadocs.;clarify  atomicdoublearray.set()  javadocs.  relnotes=n/a;;0;add connection properties for jdbc;after #6078 is merged add properties for time zone local source etc;#5411 is now in #6078  ;;;;0;1;;
5505;0;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify  atomicdoublearray.set()  javadocs.;clarify  atomicdoublearray.set()  javadocs.  relnotes=n/a;;0;212 release preparations;### version 212 - july 23 2017 ([maven]( documentation changes- [pull 5432]( fix/clarify the `observable` class javadoc- [pull 5444]( fix wording in `async` and `publish` processors javadoc- [pull 5413]( add empty source clauses to javadocs of `combinelatest` operators accepting unspecified number of sources- [pull 5465]( fix wording of tolist fix a/an in `subscribeon`- [pull 5476]( fix javadoc for `flowable` and `observable` reduce- [pull 5478]( corrected return type in doc for `freduce(seed reducer)` `freducewith(seedsupplier reducer)` and `oreduce(seed reducer)`- [pull 5486]( small note on `maybedefaultifempty` regarding `tosingle`#es- [pull 5434]( fix time bounded `replaysubjectgetvalue()` inconsistency with `getvalues()` on old items- [pull 5440]( `concat` to report `isdisposed` consistently with termination- [pull 5441]( fix periodic scheduler purging config not honored- [pull 5494]( fix `flowablewithlatestfrom` not requesting more when the other hasnt emitted yet- [pull 5493]( fix `replayprocessor` backpressure and `notificationlite` emission bug- [pull 5507]( fix gc nepotism in `spsclinkedarrayqueue`- [pull 5511]( remove unnecessary generic type parameter for the timed `singledelaysubscription` methods#### other- [pull 5447]( remove `@nonnull` annotation in `consumer` method parameter- [pull 5449]( remove the `@nonnull` annotation from `function`- [commit 4d8f008c]( add missing the to the changed sentences of pull 5413- [pull 5460]( fix javadoc mistakes and some style- [pull 5466]( use a mutable field in `flowabletimeouttimed` instead of an `atomicreference`- [commit 5d2e8fb4]( fix `schedulersio()` javadoc `{link` missing the `@` symbol- [pull 5495]( make `withlatestfrom` conditional subscriber test cold consumption;closing via  ||;;;;0;1;;
5511;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix javadoc typos;fix javadoc typos  relnotes=n/a;;0;fix javadoc typos;fix javadoc typosrelnotesn/a;;;;;1;1;fix javadoc typosrelnotesn/apiperorigin-revid: 369285465;
5511;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix javadoc typos;fix javadoc typos  relnotes=n/a;;0;updates unirest and removes orgjson dependency;-  -  manually tested changed features in running jabref-  (  write a adr gson vs jackson vs orgjson vs  unirest etcmerge after #5501;personally i dont have a strong opinion but @siedlerchr and @matthiasgeiger seemed to prefer `gson` for handling `json` responses not sure how this relates to using `konghqunirest` || > maybe you can directly use the unirest-json implementation?i use the unirest-json implementation that internally uses gson> in any case we should write an adri add this to the todo list || the unirest json is a wrapper for gson which mimicks the api of the orgjson library to provide a painless migration  || ok than this approach is fine with me is this now ready-for-review given that the other pr is merged? || @johahu  could you please resolve the errors (probably came from merging) ? || please merge in the latest changes and resolve the conflict in the changelog then i think we can merge it ||;;;;1;1;;
5511;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix javadoc typos;fix javadoc typos  relnotes=n/a;;0;update 0149 release notes;;keep this open -- ill add some shortly || general:```* add ``queued`` flag to ``statementstats`` in rest api* improve error messages for math operations```hive:```* fix force local scheduling for s3 or other non-hdfs file systems``` ||;;;;0;1;;
5511;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix javadoc typos;fix javadoc typos  relnotes=n/a;;0;remove unnecessary generic type parameters for delaysubscription methods in single;i was running into an issue with using the `delaysubscription(long time timeunit unit)` while testing a `single` and i saw that the `u` generic type parameter was there unnecessarily i believe this is only a kotlin specific issue as i tried playing around in java and there was no inference error upon compilation to get it to compile for kotlin i would need to specify the generic type parameter and it didnt matter what i set it to as `any` was a valid option: `delaysubscription<any>(5 timeunitseconds)` i also went through `flowable` `observable` and `maybe` and saw that the generics were missing for the time-specific `delaysubscription` methods so i believe they should be removed from `single` as well to help keep things consistent and remove this compilation error for future kotlin users![kotlin_error](https://user-imagesentcom/1130517/28450952-83ad8468-6db8-11e7-841e-85be4ddf0c26png); merging 5511 ;;;;1;1;remove unnecessary generic type parameters for delaysubscription methods in single;
5512;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify lru behavior of  cachebuilder .;clarify lru behavior of  cachebuilder .  relnotes=n/a;;0;clarify lru behavior of `cachebuilder`;clarify lru behavior of `cachebuilder`relnotesn/a;;;;;1;1;clarify lru behavior of `cachebuilder`relnotesn/apiperorigin-revid: 369288424;
5512;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify lru behavior of  cachebuilder .;clarify lru behavior of  cachebuilder .  relnotes=n/a;;0;snap: add browser proxy for confined browser integration;update the snap to keep the confinement enabledwhen using the jabfox extension;i added another (fake) app to call the python host script from inside the snap confinementi called it browser-proxy and it shouldnt be used by a user directly (it doesnt do anything)i use the snap and i can now consistently add entries from jabfox directly!!soo im happy to work on it!!      ||;;;;1;1;snap: add browser proxy for confined browser integration;
5512;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify lru behavior of  cachebuilder .;clarify lru behavior of  cachebuilder .  relnotes=n/a;;0;combinelatest-function not called when first parameter emits multiple items (13);"hi folksi think i discovered a bug with the combinelatest function or i just didnt understand how its supposed to work :) if you want to combine two observable one that emits a single item and one that emits two items then the function to combine the two observables only gets called twice if you pass in the observable that emits multiple items as second parameter here is minimal code example that probably better shows what i mean```observable<string> case1observable1  observablejust(""case 1 - observable 1 - string 1"")startwith(""case 1 - observable 1 - string 2"")observable<string> case1observable2  observablejust(""case 1 - observable 2 - string 1"")observablecombinelatest(case1observable1 case1observable2 (s s2) -> {    systemoutprintln(""combining"")    systemoutprintln(s)    systemoutprintln(s2)    return ""combined "" + s + ""|||"" + s2})subscribe(s -> systemoutprintln(""item emitted: "" + s))observable<string> case2observable1  observablejust(""case 2 - observable 1 - string 1"")observable<string> case2observable2  observablejust(""case 2 - observable 2 - string 1"")startwith(""case 2 - observable 2 - string 2"")observablecombinelatest(case2observable1 case2observable2 (s s2) -> {    systemoutprintln(""combining"")    systemoutprintln(s)    systemoutprintln(s2)    return ""combined "" + s + ""|||"" + s2})subscribe(s -> systemoutprintln(""item emitted: "" + s))```this produces the following output:```combiningcase 1 - observable 1 - string 1case 1 - observable 2 - string 1item emitted: combined case 1 - observable 1 - string 1|||case 1 - observable 2 - string 1combiningcase 2 - observable 1 - string 1case 2 - observable 2 - string 2item emitted: combined case 2 - observable 1 - string 1|||case 2 - observable 2 - string 2combiningcase 2 - observable 1 - string 1case 2 - observable 2 - string 1item emitted: combined case 2 - observable 1 - string 1|||case 2 - observable 2 - string 1```id expect both cases to produce the same output but as you can see in the first case the combine function only is called once";this is not a bug but a property of the combine function when driven by synchronous sources the source that gets subscribed earlier will rush through its items synchronously and the operator will only remember its latest item before subscribing to the next source and so on:```a: ----o----o--|b:             --z--|r: --------------m--|``````a:  --z--|b:       ----o----o--|r: ----------m----m--|``` || looks like this question has been answered if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;;;;0;1;;
5533;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .  this brings its behavior in line with other  writer  implementations. unfortunately  the docs don t describe this behavior:    note also that this behavior differs from the behavior of  writer.append(null)   which is to write the four characters  null.  that behavior is itself poorly documented  since the docs for  append(charsequence)  claim that it is equivalent to  out.write(csq.tostring())   which would throw npe... though at least *that* is contradicted in the  @param  tag. (the difference between  write  and  append  presumably arises from inheriting  append  from the newer  appendable  api.)  relnotes= io : changed  charstreams.aswriter(appendable).write(string[  ...])  to reject a null  string .;;0;reject `null` in `charstreamsaswriter(appendable)write(string)`;"reject `null` in `charstreamsaswriter(appendable)write(string)`this brings its behavior in line with other `writer` implementations unfortunately the docs dont describe this behavior: also that this behavior differs from the behavior of `writerappend(null)` which is to write the four characters ""null"" that behavior is itself poorly documented since the docs for `append(charsequence)` claim that it is equivalent to `outwrite(csqtostring())` which would throw npe though at least *that* is contradicted in the `@param` tag (the difference between `write` and `append` presumably arises from inheriting `append` from the newer `appendable` api)relnotes`io`: changed `charstreamsaswriter(appendable)write(string)` to reject a null `string`";;;;;1;1;"reject `null` in `charstreamsaswriter(appendable)write(string)`this brings its behavior in line with other `writer` implementations unfortunately the docs dont describe this behavior: also that this behavior differs from the behavior of `writerappend(null)` which is to write the four characters ""null"" that behavior is itself poorly documented since the docs for `append(charsequence)` claim that it is equivalent to `outwrite(csqtostring())` which would throw npe though at least *that* is contradicted in the `@param` tag (the difference between `write` and `append` presumably arises from inheriting `append` from the newer `appendable` api)relnotes`io`: changed `charstreamsaswriter(appendable)write(string)` to reject a null `string`piperorigin-revid: 370516874";
5533;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .  this brings its behavior in line with other  writer  implementations. unfortunately  the docs don t describe this behavior:    note also that this behavior differs from the behavior of  writer.append(null)   which is to write the four characters  null.  that behavior is itself poorly documented  since the docs for  append(charsequence)  claim that it is equivalent to  out.write(csq.tostring())   which would throw npe... though at least *that* is contradicted in the  @param  tag. (the difference between  write  and  append  presumably arises from inheriting  append  from the newer  appendable  api.)  relnotes= io : changed  charstreams.aswriter(appendable).write(string[  ...])  to reject a null  string .;;0;fix and unquarantine testalldatatypesfromhiveconnector test;;it it passes  lgtm || @martint please merge this in when you have a chance :) || ;;;;0;1;;
5533;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .  this brings its behavior in line with other  writer  implementations. unfortunately  the docs don t describe this behavior:    note also that this behavior differs from the behavior of  writer.append(null)   which is to write the four characters  null.  that behavior is itself poorly documented  since the docs for  append(charsequence)  claim that it is equivalent to  out.write(csq.tostring())   which would throw npe... though at least *that* is contradicted in the  @param  tag. (the difference between  write  and  append  presumably arises from inheriting  append  from the newer  appendable  api.)  relnotes= io : changed  charstreams.aswriter(appendable).write(string[  ...])  to reject a null  string .;;0;cant resolve method subscribe (orgreactivestreamssubscribe<>);"when i used ""observablesubscribe(subscriber)"" it show cant resolve method subscribe (orgreactivestreamssubscribe<>) but when i used ""observablesubscribe(observable)"" it is right my code is as follows：```java                               map<string string> parammap  new hashmap<>()                parammapput(""user_name"" ""guojinjin"")                parammapput(""user_password"" ""1"")                parammapput(""user_language"" ""zhs"")                parammapput(""is_ipad"" ""n"")                parammapput(""is_mobile"" ""y"")                retrofit retrofit new retrofitbuilder()                        baseurl(""                        //增加返回值为string的支持                        addconverterfactory(scalarsconverterfactorycreate())                        //增加返回值为gson的支持(以实体类返回)                        addconverterfactory(gsonconverterfactorycreate())                        //增加返回值为oservable<t>的支持                        addcalladapterfactory(rxjava2calladapterfactorycreate())                        build()                testservice testservice  retrofitcreate(testserviceclass)                observable<testmodel> observable  testservicegettestmodel(parammap)                subscriber<testmodel> subscriber  new subscriber<testmodel>() {                    @override                    public void onsubscribe(subscription s) {                    }                    @override                    public void onnext(testmodel course) {                        logd(""onnext"" coursegetencryted_session_id())                    }                    @override                    public void onerror(throwable t) {                    }                    @override                    public void oncomplete() {                    }                }                observablesubscribeon(schedulersnewthread())subscribe(subscriber)                observer observer  new observer<testmodel>() {                    @override                    public void onsubscribe(@nonnull disposable d) {                        logi(""onsubscribe"" ""onsubscribe"")                    }                    @override                    public void onnext(testmodel testmodel) { // 上面 subscriberonnext(result)在这里回调                        logi(""onnext"" testmodelgetencryted_session_id()+testmodelissuccess())                    }                    @override                    public void onerror(throwable e) {                        logi(""onerror"" etostring())                        eprintstacktrace()                    } // 上面subscriberonerror(new throwable(msg))在这里回调                    @override                    public void oncomplete() {                        logi(""oncomplete"" ""oncomplete"")                    }                }                observablesubscribeon(schedulersnewthread())subscribe(observer)```";in v2 the consumer types have changed:`ioreactivexobservable` <- `ioreactivexobserver``ioreactivexflowable` <- `orgreactivestreamssubscriber`you cant use `subscriber` with `observable`please read the [wiki]( regarding what changed between versions ||;;;;0;1;;
5533;0;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .;reject  null  in  charstreams.aswriter(appendable).write(string[  ]) .  this brings its behavior in line with other  writer  implementations. unfortunately  the docs don t describe this behavior:    note also that this behavior differs from the behavior of  writer.append(null)   which is to write the four characters  null.  that behavior is itself poorly documented  since the docs for  append(charsequence)  claim that it is equivalent to  out.write(csq.tostring())   which would throw npe... though at least *that* is contradicted in the  @param  tag. (the difference between  write  and  append  presumably arises from inheriting  append  from the newer  appendable  api.)  relnotes= io : changed  charstreams.aswriter(appendable).write(string[  ...])  to reject a null  string .;;5532;fix a bug that threw a npe when using middle mouse click on windows;hotfix for solving #5532;code looked good since its a hotfix i just ;npe when using middle mouse click on windows (clipboard);windows 10 latest master:refs #2389 / #5482 ```javalangnullpointerexception	at orgjabref/orgjabrefguiclipboardmanagergetcontentsprimary(clipboardmanagerjava:100)	at orgjabref/orgjabrefguiclipboardmanagerlambda$1(clipboardmanagerjava:76)	at javafxbase/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(compositeeventhandlerjava:86)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:238)	at javafxbase/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(eventhandlermanagerjava:191)	at javafxbase/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(compositeeventdispatcherjava:59)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:58)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventbasiceventdispatcherdispatchevent(basiceventdispatcherjava:56)	at javafxbase/comsunjavafxeventeventdispatchchainimpldispatchevent(eventdispatchchainimpljava:114)	at javafxbase/comsunjavafxeventeventutilfireeventimpl(eventutiljava:74)	at javafxbase/comsunjavafxeventeventutilfireevent(eventutiljava:54)	at javafxbase/javafxeventeventfireevent(eventjava:198)	at javafxgraphics/javafxscenescene$clickgeneratorpostprocess(scenejava:3569)	at javafxgraphics/javafxscenescene$mousehandlerprocess(scenejava:3871)	at javafxgraphics/javafxscenesceneprocessmouseevent(scenejava:1849)	at javafxgraphics/javafxscenescene$scenepeerlistenermouseevent(scenejava:2590)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:409)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(glassvieweventhandlerjava:299)	at javabase/javasecurityaccesscontrollerdoprivileged(accesscontrollerjava:389)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(glassvieweventhandlerjava:447)	at javafxgraphics/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(quantumtoolkitjava:411)	at javafxgraphics/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(glassvieweventhandlerjava:446)	at javafxgraphics/comsunglassuiviewhandlemouseevent(viewjava:556)	at javafxgraphics/comsunglassuiviewnotifymouse(viewjava:942)	at javafxgraphics/comsunglassuiwinwinapplication_runloop(native method)	at javafxgraphics/comsunglassuiwinwinapplicationlambda$runloop$3(winapplicationjava:174)	at javabase/javalangthreadrun(threadjava:835)```;"the `toolkitgetdefaulttoolkit()getsystemselection()` returns null on windows because according to the javadoc platforms that dont have a systemselection return null: || @siedlerchrplease check #5533**:""d** || ";1;0;fix a bug that threw a npe when using middle mouse click on windows;
5534;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.  relnotes=n/a;;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursivelyrelnotesn/a;;;;;1;1;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursivelyrelnotesn/apiperorigin-revid: 370523726;
5534;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.  relnotes=n/a;;0;enable parsing nanoseconds in date_parse;it 5354;@martint: pr as a response to  please review/dispatch if possible || @haozhun can you review? || looks good except the documentation issue i raised@martint @maciejgrzybek i added comments to explain what i believe the documentation need to mention but i would like to see if you can come up with something more concise || @haozhun: my proposal in 33214d8 || @haozhun: how about the change introduced in 03d5545? || ;;;;0;1;;
5534;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.  relnotes=n/a;;0;[120]caused by: rxexceptionsonerrornotimplementedexception:  500 internal server error;when i use retrofit+rxjava+rxcalladapter  foud error  here :```08-03 17 50864 18778-18809/comxuebansoftxinghuomanager e/androidruntime: fatal exception: rxioscheduler-2process: comxuebansoftxinghuomanager pid: 18778javalangillegalstateexception: exception thrown on schedulerworker thread add `onerror` handling    at rxinternalschedulersscheduledactionrun(scheduledactionjava:57)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)    at javautilconcurrentfuturetaskrun(futuretaskjava:237)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)    at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)    at javalangthreadrun(threadjava:841) caused by: rxexceptionsonerrornotimplementedexception:  500 internal server error    at rxinternalutilinternalobservableutils$errornotimplementedactioncall(internalobservableutilsjava:386)    at rxinternalutilinternalobservableutils$errornotimplementedactioncall(internalobservableutilsjava:383)    at rxinternalutilactionsubscriberonerror(actionsubscriberjava:44)    at rxobserverssafesubscriber_onerror(safesubscriberjava:152)    at rxobserverssafesubscriberonerror(safesubscriberjava:115)    at rxinternaloperatorsoperatorobserveon$observeonsubscribercheckterminated(operatorobserveonjava:276)    at rxinternaloperatorsoperatorobserveon$observeonsubscribercall(operatorobserveonjava:219)    at rxinternalschedulerscachedthreadscheduler$eventloopworker$1call(cachedthreadschedulerjava:228)    at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)    at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)     at javautilconcurrentfuturetaskrun(futuretaskjava:237)     at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)     at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)     at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)     at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)     at javalangthreadrun(threadjava:841)  caused by: retrofit2adapterrxjava  500 internal server error    at retrofit2adapterrxjavabodyonsubscribe$bodysubscriberonnext(bodyonsubscribejava:51)    at retrofit2adapterrxjavabodyonsubscribe$bodysubscriberonnext(bodyonsubscribejava:36)    at retrofit2adapterrxjavacallarbiterdeliverresponse(callarbiterjava:115)    at retrofit2adapterrxjavacallarbiteremitresponse(callarbiterjava:97)    at retrofit2adapterrxjavacallexecuteonsubscribecall(callexecuteonsubscribejava:46)    at retrofit2adapterrxjavacallexecuteonsubscribecall(callexecuteonsubscribejava:24)    at retrofit2adapterrxjavabodyonsubscribecall(bodyonsubscribejava:33)    at retrofit2adapterrxjavabodyonsubscribecall(bodyonsubscribejava:25)    at rxobservableunsafesubscribe(observablejava:10151)    at rxinternaloperatorsoperatorsubscribeon$1call(operatorsubscribeonjava:94)    at rxinternalschedulerscachedthreadscheduler$eventloopworker$1call(cachedthreadschedulerjava:228)     at rxinternalschedulersscheduledactionrun(scheduledactionjava:55)     at javautilconcurrentexecutors$runnableadaptercall(executorsjava:422)     at javautilconcurrentfuturetaskrun(futuretaskjava:237)     at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskaccess$201(scheduledthreadpoolexecutorjava:152)     at javautilconcurrentscheduledthreadpoolexecutor$scheduledfuturetaskrun(scheduledthreadpoolexecutorjava:265)     at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1112)     at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:587)     at javalangthreadrun(threadjava:841) ```and  the running code is here:```java    managerapigetins()updatechannelinfoformobileuser(apphelpergetiuser()getmobileuserid() ((xheventbindevent) event)getmchannelid() ((xheventbindevent) event)getmuserid())                                subscribeon(schedulersio())observeon(schedulersio())subscribe(new action1<educommresponse>() {                            @override                            public void call(educommresponse educommresponse) {                                if (educommresponseissuccess()) {                                    remembermeget()devbindeduser()                                }                            }                        })```when the  response code is 500 will throw this error;the key message is:> add onerror handlingie use `subscribe(action1<t> action1<throwable>)` at least || awesome!!!thks ||;;;;0;1;;
5534;1;1;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.;avoid unlikely nullpointerexception in deletedirectorycontents and deleterecursively.  relnotes=n/a;;7033;bump checkstyle from 825 to 826;"bumps [checkstyle]( from 825 to 826<details><summary>release notes</summary>*sourced from [checkstyles releases]( ## checkstyle-826>  [`a666d7b`]( [maven-release-plugin] prepare release checkstyle-826- [`c2cd07f`]( doc: add 826 releasenotes- [`c11154c`]( issue 7225]( bump pmd to 6180- [`5eaada6`]( issue [#7033]( make filetextfulltext to be non final- [`407dd95`]( issue [#7077]( correct docs for unnecessarysemicolonaftertypememberdeclaration- [`d252358`]( config: bump maven-jxr-plugin from 25 to 300- [`d7038d6`]( config: bump orgeclipsejdtannotation from 210 to 22300- [`66c5932`]( config: bump forbiddenapis from 26 to 27- [`f75920f`]( config: bump maven-project-info-reports-plugin from 29 to 300- [`c27d5e3`]( config: bump maven-surefire-report-plugin from 2210 to 2222- additional commits viewable in [compare view]( />[![dependabot compatibility score]( will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)</details>";;"make sure that current database is ""shared""";6959 jabref always tries to pull changes from shared database even if current database is not sharedadded filter to ensure that current db is shared-  change in changelogmd described (if applicable)-  -  -   (for ui changes)-  [](  if not created an issue at < or even better submitted a pull request to the documentation repository;"the original issue did not provide a screenshot i guess that ""pull changes from database"" is enabled even if there isnt a shared database thus the solution is not to fix the action pulling the changes but to fix the menu entry being enabled only for shared datbasesrelated:  || @koppor thanks for a comment indeed now i see that filtering db type is ugly solution ill try to make a new one || the idea is not bad just at the wrong positionthe solution would be to create another booleanexpression in the actionhelper class eg needsshareddatabase filter there and in the action you can then bind it eg:         thisexecutablebind(actionhelperneedsentriesselected(statemanager)) || ";1;0;bump checkstyle from 825 to 826bumps [checkstyle]( from 825 to 826- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5536;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;annotate  io  for nullness.;annotate  io  for nullness.  relnotes=n/a;;0;annotate `io` for nullness;annotate `io` for nullnessrelnotesn/a;;;;;1;1;annotate `io` for nullnessrelnotesn/apiperorigin-revid: 370699928;
5536;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;annotate  io  for nullness.;annotate  io  for nullness.  relnotes=n/a;;0;fix sql injection in raptor shardmetadatarecordcursor;;;;;;0;1;;
5536;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;annotate  io  for nullness.;annotate  io  for nullness.  relnotes=n/a;;0;bug in javadocs?;the [description]( of `flowablesubscriber` says that its `onsubscribe()` method returns a `subscription` but version 2 doesnt have subscriptions dont you mean `disposable`?;`flowable` is a reactive streams type which uses `subscription` || oh right because rxjava 2 is built on top of reactive streams eh? i should have noticed that the supertype is `orgreactivestreamssubscriber<t>` ||;;;;0;1;;
5536;1;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;annotate  io  for nullness.;annotate  io  for nullness.  relnotes=n/a;;4380;bump src/main/resources/csl-styles from `c3fd4bd` to `c11d974`;"bumps [src/main/resources/csl-styles]( from `c3fd4bd` to `c11d974`<details><summary>commits</summary>- [`c11d974`]( create gazeta-medicacsl (4378]( [`82db84b`]( create crustaceanacsl ([#4379]( [`0a311d2`]( create southern-african-journal-of-critical-carecsl ([#4380]( see full diff in [compare view]( />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)if all status checks pass dependabot will automatically merge this pull request[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)- `@dependabot badge me` will comment on this pr with code to add a ""dependabot enabled"" badge to your readmeadditionally you can set the following in the `dependabot/configyml` file in this repo:- update frequency- automerge options (never/patch/minor and dev/runtime dependencies)- out-of-range updates (receive only lockfile updates if desired)- security updates (receive only security updates if desired)</details>";;copy-paste citation to bibtex not working;"jabref 50-dev--snapshot--2018-10-14--master--73ec32189windows 10 100 amd64 java 180_172steps to reproduce:1 copy the following text into the tab ""{} bibtex source""@article{6773024 author{c e shannon} journal{the bell system technical journal} title{a mathematical theory of communication} year{1948} volume{27} number{3} pages{379-423} keywords{} doi{101002/j1538-73051948tb01338x} issn{0005-8580} month{july}}2 click on the ""required fields"" tab: nothing is shownfurthermore trying to mark the text in the ""{} bibtex source"" field behaves strangely (only showing parts of text marked)no messages in log filejust noticed: existing entries in the jabref file do not show information in the ""{} bibtex source"" tabcheersrenger";you can copy/paste directly on the maintable || if we paste data via bibtex source should it create a new line in table or overwrite data in opened entry ? || if you paste the bibtex data into an exiting entry the data should be overwrittenpeople often are unaware of the fact that you can directly paste on the maintable (only possible since a few version) so they create a  new entry copy the bibtex code in the tab and expect their entry to be updated  || i can no longer reproduce this issue works finewe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version || thank you for reporting this issue we think that is already  in our development version and consequently the change will be included in the next releasewe would like to ask you to use a development build from  and report back if it works for you please remember to make a backup of your library before trying-out this version ||;1;0;bump src/main/resources/csl-styles from `c3fd4bd` to `c11d974`bumps [src/main/resources/csl-styles]( from `c3fd4bd` to `c11d974`- [release notes]( [commits]( dependabot-preview[bot] <support@dependabotcom>;
5538;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate  math  for nullness.;annotate  math  for nullness.  relnotes=n/a;;0;annotate `math` for nullness;annotate `math` for nullnessrelnotesn/a;;;;;1;1;annotate `math` for nullnessrelnotesn/apiperorigin-revid: 370909734;
5538;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate  math  for nullness.;annotate  math  for nullness.  relnotes=n/a;;0; convert abbreviation data to csv and adapt jabref accordingly;it is not a definitive version but i would like to get some feedback before continuing!related issues:  and   add python script for converting abbreviation files from txt to csv-  convert abbreviation files to csv format-  update parser and writer for journal files and add shortest abbreviation support-  add shortest abbreviation to the menu bar-  update abbreviation-related teststhere is already a csv version of every data file of **abbrvjabreforg** repository: https://githubcom/jabref/abbrvjabreforg/tree/csv/journals;"@koppor what is this ""shortest abbreviation"" and why is it needed? || this is an idea of the original jabref author: see  (also described at  data exists (partially)we already have the data example (    biochimica et biophysica acta biophysics including photosynthesis  biochim biophys acta biophys incl photosynthbbaberseems to be used in biology etc i would also use it in my fields to have short journal titles and very short journal titles in my publications i would use    international journal of cooperative information systems int j coop inf sys ijcisi very much like the idea of a tri-value this helps to optimize bibtex entries for papers one can play around with the length || @tobiasdiez after this functionality is in for journaltitle it should be possible to do it for conferences (see  i would then have following data:    international conference on service-oriented computing int conf serv-o compicsoc(to be consistent with journals) || to be honest i still dont see the additional value of the very short identifier these seem to be some custom / non-standard abbreviations so some users may profit from them but most dont care thus this seems to be yet another of these edge case features and personally i would vote to remove it based on maintenance code additional ui complexity vs user value  || tobias and me discussed in a direct chat this can go in for the next steps more release-affecting issues (see  should be solvedi personally am happy that this feature goes in code looks good and i merge to enable a proper review on follow-ups! || ";;;;1;1;add a few improvements;
5538;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate  math  for nullness.;annotate  math  for nullness.  relnotes=n/a;;0;load schema in tableau based on initial catalog;;the commit message title is too long please limit to ~50 characters see this guide for details:  || ;;;;0;1;;
5538;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;annotate  math  for nullness.;annotate  math  for nullness.  relnotes=n/a;;0;switch to jsr305 nullability annotations;this pr implements proposal #5341since `@parametersarenonnullbydefault` only covers function parameters ive left `@nonnull` for return results in existing usage places @hzsweers suggested creating `@everythingisnonnullbydefault` but im not sure how tooling will recognise it@akarnokd we can also change rxjavas `@checkreturnvalue` with `javaxannotation@checkreturnvalue` in a separate pr if this one gets merged ps ive tried to minimize imports regrouping but some files were written in different code styles regarding imports so you might find few minor regroupings sorry;"you can make a custom package annotation that specifies that return values are non-null by default in addition to parameters || will it be picked up by tooling? (i wrote about this concert in description of the pr)  ||  merging 5538  ";;;;0;1;;
5539;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.  also  standardize todos.  relnotes=n/a;;0;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one location;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one locationalso standardize todosrelnotesn/a;;;;;1;1;comment out @elementtypesarenonnullbydefault in classes that are missing `@checkreturnvalue` for at least one locationalso standardize todosrelnotesn/apiperorigin-revid: 370940739;
5539;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.  also  standardize todos.  relnotes=n/a;;0;fix race in task results api;a race in jetty causes the results api to randomly fail withgarbage results (most frequently a 500 status code);supercedes #5509 and #5519 || depends on  || looks good but release airlift and use the final artifact ||;;;;0;1;;
5539;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.  also  standardize todos.  relnotes=n/a;;0;2x: zip operator do not handle infinite cold observables;"in rxjava 211 to always use the same events i use the ""repeat"" operator however when i try to use it together with the zip operator i end up with an infinite loop at subscription instead of returning control when one of the zipped observables do not emit values anymore (even with buffersize  1):```final observable<integer> obs1  observablejust(1)repeat()final publishsubject<integer> obs2  publishsubjectcreate()final observable<integer> result  observablezip(obs2 obs1 (o1 o2) -> {      return 1} true 1)resultsubscribe(e -> {})obs2onnext(2)obs2onnext(3)```";"exactly this is an expected behavior from a `observable`s they just keep emitting as fast as they can irrespective of the consumers ability to handle ithowever if you turn the example into `flowable`s everything starts working properly:```javafinal flowable<integer> flo1  flowablejust(1)repeat()final flowableprocessor<integer> flo2  publishprocessorcreate()final flowable<integer> result  flowablezip(flo2 flo1 (o1 o2) -> {      return 1} true 1)resultsubscribe(e -> {})flo2onnext(2)flo2onnext(3)```welcome to rxjava 2 || ok thank you for this clarification it seemed a little strange from a functional viewpoint because in this case zip do not even emit a single valuei have absolutely no back-pressure issue and have a synchronous flow so reading [this section]( i thought the right type to use was observable i completely skipped the first point about ""_no more than 1000 elements_"" || ";;;;0;1;;
5539;0;1;0;0;0;0;1;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.;comment out @elementtypesarenonnullbydefault in classes that are missing  @checkreturnvalue  for at least one location.  also  standardize todos.  relnotes=n/a;;4430;improve performance;improve performance by:- caching fields as keywordlist- remove duplicate change listener- remove preference access in loopwith these changes the mega huge library of @aegit works without too much delays (the initial loading of the database is a bit slow but still ok) thus this pr is a potential fix for #4430 and for  describe the changes you have made here:        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);@tobiasdiez wonderful! let me know when i can start testing this fix ||;performance issues in development version 50;jabref 50-dev--snapshot--2018-10-28--master--05047f32awindows 10 100 amd64 java 180_191steps to reproduce the behaviour:1 open a large database (in my case > 16000 entries)2 select a group in the groups panel3 entries belonging to the group are displayed in the main panel4 select another group in the groups panel5 entries belonging to this group are displayed again in the main panel note however that there is a noticeable delay until the entries are displayed (about 1 to 2 seconds)if you repeat steps 4 and 5 you will always notice this delay of one or two seconds this can get quite annoying if you quickly have to change groups note that in jabref version 382 (which i am still using as my main version) there is no such delay is it possible to get a performance in handling large databases in version 50 that is comparable to that of 382?;the changing of group is still slow and causes a spike in cpu load  tested with a large database o 6400 entries and many groups memory is not an issue( || can confirm - i might have time during this weekend to run some additional performance test unfortunately my yourkit java profiler test license ran out so i will probably have to create a new virtual machine and run a new installation of yourkit in there - unless someone else knows a method to extend the evaluation period a little? i dont really need the tool except for showing the performance issues in the current jabref version compared to version 382 || this should be  now a few remaining performance issues are mentioned at  || jabref 500-dev--2019-11-28----ce0e8870cwindows 10 100 amd64 java 1301this issue indeed appears to be fixed in the current version of jabref (the remaining issues can be found here:  big shout out to @tobiasdiez for the continuous support! ||;1;0;merge branch master into improveperf;
5556;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;generalize  function  and  predicate  factories to let callers specify the desired input type.;generalize  function  and  predicate  factories to let callers specify the desired input type.  relnotes= base : changed  functions.forsupplier  and  predicates.instanceof  to accept an additional type argument to specify the input type for the returned  function / predicate . the flexibility we re adding should typically not be necessary if users follow the [pecs]( principle  but it can be useful in some cases  particularly around nullness analysis. note that this change may require updates to callers  source code (to specify an additional type argument). still  it maintains _binary_ compatibility.;;0;generalize `function` and `predicate` factories to let callers specify the desired input type;generalize `function` and `predicate` factories to let callers specify the desired input typerelnotes`base`: changed `functionsforsupplier` and `predicatesinstanceof` to accept an additional type argument to specify the input type for the returned `function`/`predicate` the flexibility were adding should typically not be necessary if users follow the [pecs]( principle but it can be useful in some cases particularly around nullness analysis note that this change may require updates to callers source code (to specify an additional type argument) still it maintains _binary_ compatibility;;;;;1;1;generalize `function` and `predicate` factories to let callers specify the desired input typerelnotes`base`: changed `functionsforsupplier` and `predicatesinstanceof` to accept an additional type argument to specify the input type for the returned `function`/`predicate` the flexibility were adding should typically not be necessary if users follow the [pecs]( principle but it can be useful in some cases particularly around nullness analysis note that this change may require updates to callers source code (to specify an additional type argument) still it maintains _binary_ compatibilitypiperorigin-revid: 373757473;
5556;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;generalize  function  and  predicate  factories to let callers specify the desired input type.;generalize  function  and  predicate  factories to let callers specify the desired input type.  relnotes= base : changed  functions.forsupplier  and  predicates.instanceof  to accept an additional type argument to specify the input type for the returned  function / predicate . the flexibility we re adding should typically not be necessary if users follow the [pecs]( principle  but it can be useful in some cases  particularly around nullness analysis. note that this change may require updates to callers  source code (to specify an additional type argument). still  it maintains _binary_ compatibility.;;0;improve documentation for mysql date time functions;i changed the text slightly after submitting the pull request use this screenshot to understand the format only:![screen shot 2016-07-01 at 11 21 56 am](https://cloudentcom/assets/2020503/16530730/560c4c1a-3f7e-11e6-9462-257176484eafpng);;;;;0;1;;
5556;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;generalize  function  and  predicate  factories to let callers specify the desired input type.;generalize  function  and  predicate  factories to let callers specify the desired input type.  relnotes= base : changed  functions.forsupplier  and  predicates.instanceof  to accept an additional type argument to specify the input type for the returned  function / predicate . the flexibility we re adding should typically not be necessary if users follow the [pecs]( principle  but it can be useful in some cases  particularly around nullness analysis. note that this change may require updates to callers  source code (to specify an additional type argument). still  it maintains _binary_ compatibility.;;0;[question] is webflux based on rxjava?;is webflux based on rxjava? or what is relationship between these 2 frameworks/libs?;> is webflux based on rxjava?no webflux runs on pivotals reactor 3 reactive library internally but afaik they accept any reactive-streams compatible types thus you can get your flows written with rxjava 2> what is relationship between these 2 frameworks/libs?they are on different levels of abstraction rxjava is a foundational non-networking concurrency library and webflux is a functional web library built on top of a foundational concurrency library || here is a recent video about webflux:  || @akarnokd superior answer! thanks a lot ||;;;;0;1;;
5556;0;0;0;0;0;0;0;1;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;generalize  function  and  predicate  factories to let callers specify the desired input type.;generalize  function  and  predicate  factories to let callers specify the desired input type.  relnotes= base : changed  functions.forsupplier  and  predicates.instanceof  to accept an additional type argument to specify the input type for the returned  function / predicate . the flexibility we re adding should typically not be necessary if users follow the [pecs]( principle  but it can be useful in some cases  particularly around nullness analysis. note that this change may require updates to callers  source code (to specify an additional type argument). still  it maintains _binary_ compatibility.;;5452;select newly added jstyle in table to prevent exception;5452        ( (      because github does not support autolinking there -->-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);;error in importing jstyles;"jabref 500-dev--2019-10-15----2a5507fd3linux 520-0bpo3-amd64 amd64 (debian 10 buster)java 1202-  i have tested the latest development version from  and the problem persists<!-- add a clear and concise description of what the bug is -->steps to reproduce the behavior:1 add jstyle file for openoffice/libreoffice from gui2 click ok3   <!-- if applicable add excerpt of the bibliography file screenshot and excerpt of log (available in the error console) --><details>  <summary>log file</summary>    ```javalangnullpointerexception	at orgjabref/orgjabrefguiopenofficestyleselectdialogviewlambda$new$0(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogsetresultandclose(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogpanelambda$createbutton$3(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationenternestedeventloopimpl(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_enternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuiapplicationenternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuieventloopenter(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitenternestedeventloop(unknown source)	at orgjabrefmergedmodule/javafxstagestageshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolheavyweightdialogshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogshowandwait(unknown source)	at orgjabref/orgjabrefguiopenofficeopenofficepanellambda$initpanel$4(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_runloop(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationlambda$runloop$11(unknown source)	at javabase/javalangthreadrun(unknown source)  ```</details>here is one of my jstyles all of my styles give me the above error but i tested other styles without success (i used already them in previous jabref versions)```# this file is licensed under the terms of the gpl version 2 (or later)nameliteratura - engjournalsliteraturapropertiestitle""references""issortbyposition""false""isnumberentries""false""referenceparagraphformat""list 1""referenceheaderparagraphformat""heading 1""# configurare heading1: italics not capitalized left justifiedcitationauthorfield""author/editor""yearfield""year""maxauthors""3""maxauthorsfirst""3""authorseparator"" ""authorlastseparator"" & ""authorlastseparatorintext"" & ""etalstring"" and oth""italicetal""false""yearseparator"" ""intextyearseparator"" ""bracketbeforebracketafterbracketbeforeinlist""[""bracketafterinlist""]""citationseparator"" ""uniquefierseparator"" ""groupednumbersseparator""-""minimumgroupingcount""3""formatcitations""false""citationcharacterformat""default""multicitechronological""false""pageinfoseparator"" ""layoutarticle\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}book\begin{author}\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \end{author}\begin{editor}\format[authorlastfirstfirstfirstauthorandsreplacer]{\editor} \format[ifplural(edsed)]{\editor} \end{editor}\year <i>\format[htmlcharsformatpagesforhtml]{\title}</i>\begin{subtitle} \format[htmlcharsformatpagesforhtml]{\subtitle}\end{subtitle}\begin{series&&number} \series \number\end{series&&number}\begin{volume} \format[htmlcharsformatpagesforhtml]{\volume}\end{volume}\begin{volumes} \volumes vol\end{volumes}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisherinbook\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}inproceedings\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\eventtitle}</i> \begin{eventtitleaddon}\format[htmlcharsformatpagesforhtml]{\eventtitleaddon} \end{eventtitleaddon}\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}incollection\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}#####phdthesis\format[authorlastfirstauthorabbreviatorauthorandsreplacer]{\author}(<b>\year\uniq</b>) <i>\title</i> \schooldefault\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}```";"i figured out the problem the key is that the preview checks for the default layout quick workaround is to add a format for the entry type ""default"" in the jstylethe real bugfix needs to check if the default layout getdefaultbiblayout is present or return another one from the hashmap in oobibstyle || this should be  in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || @tobiasdiez no same error:<details>  <summary>log file</summary>javalangnullpointerexception	at orgjabref/orgjabrefguiopenofficestyleselectdialogviewlambda$new$0(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogsetresultandclose(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogpanelambda$createbutton$3(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationenternestedeventloopimpl(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_enternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuiapplicationenternestedeventloop(unknown source)	at orgjabrefmergedmodule/comsunglassuieventloopenter(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitenternestedeventloop(unknown source)	at orgjabrefmergedmodule/javafxstagestageshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolheavyweightdialogshowandwait(unknown source)	at orgjabrefmergedmodule/javafxscenecontroldialogshowandwait(unknown source)	at orgjabref/orgjabrefguiopenofficeopenofficepanellambda$initpanel$4(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenenodefireevent(unknown source)	at orgjabrefmergedmodule/javafxscenecontrolbuttonfire(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolbehaviorbuttonbehaviormousereleased(unknown source)	at orgjabrefmergedmodule/comsunjavafxscenecontrolinputmapinputmaphandle(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandler$normaleventhandlerrecordhandlebubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventhandlerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventhandlermanagerdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventcompositeeventdispatcherdispatchbubblingevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventbasiceventdispatcherdispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventdispatchchainimpldispatchevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireeventimpl(unknown source)	at orgjabrefmergedmodule/comsunjavafxeventeventutilfireevent(unknown source)	at orgjabrefmergedmodule/javafxeventeventfireevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$mousehandlerprocess(unknown source)	at orgjabrefmergedmodule/javafxscenesceneprocessmouseevent(unknown source)	at orgjabrefmergedmodule/javafxscenescene$scenepeerlistenermouseevent(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandler$mouseeventnotificationrun(unknown source)	at javabase/javasecurityaccesscontrollerdoprivileged(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerlambda$handlemouseevent$2(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumquantumtoolkitrunwithoutrenderlock(unknown source)	at orgjabrefmergedmodule/comsunjavafxtkquantumglassvieweventhandlerhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewhandlemouseevent(unknown source)	at orgjabrefmergedmodule/comsunglassuiviewnotifymouse(unknown source)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplication_runloop(native method)	at orgjabrefmergedmodule/comsunglassuigtkgtkapplicationlambda$runloop$11(unknown source)	at javabase/javalangthreadrun(unknown source)</details>jabref 500-dev--2019-10-18----bc26c3ac5linux 520-3-amd64 amd64 java 1202 || please delete the wrong style and readd it it should be marked as invalid  || i had already deleted it indeed to be more precise i had not even added it to jabref in this pc from which i write || i cannot reproduce your issue this should be fixed now could you please test again? || @siedlerchr i just tested it again but with the same result :-(im attaching a zip file containing a screencast to document my issue[screencast_28-10-2019_17 27zip]( || could you please also post your style file again? or is it still the one above? || here is the style used in the above test but i have the same issue with other styles:```# this file is licensed under the terms of the gpl version 2 (or later)nameliteratura - eng (by domenico cufalo aka doc cufalo@gmailcom)journalsliteraturapropertiestitle""references""issortbyposition""false""isnumberentries""false""referenceparagraphformat""list 1""referenceheaderparagraphformat""heading 1""# configurare heading1: italics not capitalized left justifiedcitationauthorfield""author/editor""yearfield""year""maxauthors""3""maxauthorsfirst""3""authorseparator"" ""authorlastseparator"" & ""authorlastseparatorintext"" & ""etalstring"" and oth""italicetal""false""yearseparator"" ""intextyearseparator"" ""bracketbeforebracketafterbracketbeforeinlist""[""bracketafterinlist""]""citationseparator"" ""uniquefierseparator"" ""groupednumbersseparator""-""minimumgroupingcount""3""formatcitations""false""citationcharacterformat""default""multicitechronological""false""pageinfoseparator"" ""layoutarticle\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}book\begin{author}\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \end{author}\begin{editor}\format[authorlastfirstfirstfirstauthorandsreplacer]{\editor} \format[ifplural(edsed)]{\editor} \end{editor}\year <i>\format[htmlcharsformatpagesforhtml]{\title}</i>\begin{subtitle} \format[htmlcharsformatpagesforhtml]{\subtitle}\end{subtitle}\begin{series&&number} \series \number\end{series&&number}\begin{volume} \format[htmlcharsformatpagesforhtml]{\volume}\end{volume}\begin{volumes} \volumes vol\end{volumes}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisherinbook\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}inproceedings\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\eventtitle}</i> \begin{eventtitleaddon}\format[htmlcharsformatpagesforhtml]{\eventtitleaddon} \end{eventtitleaddon}\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}incollection\format[authors(fullnamelastfirstfirstfirstamp)]{\author} \format[formatpagesforhtml]{\year}: \format[htmlcharsformatpagesforhtml]{\title} <i>\format[htmlcharsformatpagesforhtml]{\booktitle} \begin{booksubtitle} \format[htmlcharsformatpagesforhtml]{\booksubtitle} \end{booksubtitle}</i>\format[htmlcharsauthors(fullnamefirstfirstamp)]{\editor} \format[ifplural(edsed)]{\editor}\begin{location} \format[htmlcharsformatpagesforhtml]{\location}: \end{location}\begin{place}\format[htmlchars]{\place}: \end{place}\begin{edition}<sup>\edition</sup>\end{edition}\publisher\begin{pages} \format[formatpagesforhtml]{\pages}\end{pages}#####phdthesis\format[authorlastfirstauthorabbreviatorauthorandsreplacer]{\author}(<b>\year\uniq</b>) <i>\title</i> \school#default\format[authorlastfirst]{\author} \year \format[htmlcharsformatpagesforxml]{\title} <i>\journal</i>\begin{volume} \volume\end{volume}\begin{number}(\number)\end{number} \format[formatpagesforhtml]{\pages}default\format[authors(lastfirstsemicolon)]{\author} (<b>\year\uniq</b>) <i>\title</i> \journal \volume\begin{pages} : \format[formatpagesforhtml]{\pages}\end{pages}``` || hm this is odd on windows your style works fine1 check if your styles are all in utf8 encoding2 try to reset your preferences and restart jabref there might be some invalid value in the preferences || 1 utf8 is default on linux2 tested with clean preferences but with the same issue :-( || ah now i could reproduce it it happens when you **dont** click on the style you added (no style is ""highlighted"")so jabref tries to get the selected style but if non is selected it failswill prepare a fixif you click on it so thats it is highlighted it will work:( ||   it was a columbus egg! || this should be fixed in the latest development version could you please check the build from  thanks! please remember to make a backup of your library before trying-out this version || @tobiasdiez yes its fine! thank you so much!  ";1;0;select newly added jstyle in table to prevent exception5452;
5572;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.;clarify comments discussed in   relnotes=n/a;;0;clarify comments discussed in https://githubcom/google/guava/pull/5546#discussion_r626856415;clarify comments discussed in https://githubcom/google/guava/pull/5546#discussion_r626856415relnotesn/a;;;;;1;1;clarify comments discussed in  375718171;
5572;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.;clarify comments discussed in   relnotes=n/a;;0;fix windows installer;as  describe the changes you have made here:        ( (      because github does not support autolinking there -->merge if green-----  change in changelogmd described-  -  manually tested changed features in running jabref-   ()-  (   ( [helpjabreforg](https://githubcom/jabref/helpjabreforg/issues)?);it builds but the installer does not run :( ||;;;;0;1;;
5572;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.;clarify comments discussed in   relnotes=n/a;;0; typo;is this typo?;;;;;0;1;;
5572;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.;clarify comments discussed in   relnotes=n/a;;0;remove unnecessary git command from build instructions;removing line to match wiki instructions and since 2x is the default branch; merging 5572 ;;;;1;1;remove unnecessary git command from build instructions;
5582;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.;fix typo noted by @ben-manes in   relnotes=n/a;;0;fix typo noted by @ben-manes in https://githubcom/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526;fix typo noted by @ben-manes in https://githubcom/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526relnotesn/a;;;;;1;1;fix typo noted by @ben-manes in  377137506;
5582;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.;fix typo noted by @ben-manes in   relnotes=n/a;;0;fix dblpfetchertest -- dblp changed the format;dblp changed the format of urls - `_` is now escapedclean urls in dblpfetcheradditionally:- style removelatexcommandsformatter- add tests for removelatexcommandsformatter- add support for removing single and multiple whitespaces after a command- split tests in removebracketstest- fix casing in cleanupurlformatter (to match style and current name of test class cleanupformattertest)- fix casing in some url method names- format cleanupurlformatter;the fetcher should not store escaped urls the url field is treated as verbatim field in biblatex so no escaping necessarily  || ok i included the `cleanupurlformatter` and adapted it accordingly while doing that i also added some tests see details in the updated pr description ||;;;;1;1;do not apply removelatexcommandsformatter in cleanupurlformatter;
5582;1;0;0;0;0;0;1;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.;fix typo noted by @ben-manes in   relnotes=n/a;;4544.0;implement maybeswitchifempty(single);adds `maybeswitchifempty(single)` 4544; merging 5582 ;maybeswitchifempty(single) method;it would be nice to see a method like this:public class maybe<t> {  public single<t> switchifempty(single<t> single)}semantically if you switchifempty to a single from a maybe then it becomes a single as you are guaranteed either an error or a value  it would just make it less verbose than doing this:maybeswitchifempty(singletomaybe())tosingle();done || im closing this issue due to inactivity if you have further input on the issue dont hesitate to reopen this issue or post a new one ||;1;0;add experimental annotation;
5583;1;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;split  java.time  tests out of  stopwatchtest .;split  java.time  tests out of  stopwatchtest .  relnotes=n/a;;0;split `javatime` tests out of `stopwatchtest`;split `javatime` tests out of `stopwatchtest`relnotesn/a;;;;;1;1;split `javatime` tests out of `stopwatchtest`relnotesn/apiperorigin-revid: 376890185;
5583;1;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;split  java.time  tests out of  stopwatchtest .;split  java.time  tests out of  stopwatchtest .  relnotes=n/a;;0;new crowdin translations;enjoy!;;;;;1;1;new translations jabref_enproperties (french);
5583;1;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;split  java.time  tests out of  stopwatchtest .;split  java.time  tests out of  stopwatchtest .  relnotes=n/a;;0;add fromliteralparamter as scalarimplementation dependency;this is precondition to get some work with `varchar(x)` done and possibly to simplify `decimal` implementation;@cberner can you review this - its based (and possible in such simple way) on last refactoring ( || can you include one of the functions that requires this in this pr? i didnt work on any of the bounded varchar functions and its not immediately clear to me where this would be needed || this is now part of  ||;;;;0;1;;
5583;1;0;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;split  java.time  tests out of  stopwatchtest .;split  java.time  tests out of  stopwatchtest .  relnotes=n/a;;0;how to subscribe biconsumer with 2x;hihow can i subscribe biconsumer just like subscribe consumer? code like this:```javabiconsumer<integer string> biconsumer  new biconsumer<integer string>() {            @override            public void accept(integer integer string s) throws exception {            }        }observablecreate()subscribe(biconsumer)```;that is not possible with rxjava you have to combine data elements into classes or tuples || get itthanks for your prompt reply ||;;;;0;1;;
5584;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;remove  service.state.isterminal() .;remove  service.state.isterminal() .  it was only referenced in one place. since we guarantee that transitions between the states in the  service.state  enum are always from an earlier to a later value  we know that the terminal states must be last. so it s enough to compare with the first terminal state   terminated . the code in question already does something very similar with the  running  state a few lines earlier.  relnotes=n/a;;0;remove `servicestateisterminal()`;remove `servicestateisterminal()`it was only referenced in one place since we guarantee that transitions between the states in the `servicestate` enum are always from an earlier to a later value we know that the terminal states must be last so its enough to compare with the first terminal state `terminated` the code in question already does something very similar with the `running` state a few lines earlierrelnotesn/a;;;;;1;1;remove `servicestateisterminal()`it was only referenced in one place since we guarantee that transitions between the states in the `servicestate` enum are always from an earlier to a later value we know that the terminal states must be last so its enough to compare with the first terminal state `terminated` the code in question already does something very similar with the `running` state a few lines earlierrelnotesn/apiperorigin-revid: 376892852;
5584;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;remove  service.state.isterminal() .;remove  service.state.isterminal() .  it was only referenced in one place. since we guarantee that transitions between the states in the  service.state  enum are always from an earlier to a later value  we know that the terminal states must be last. so it s enough to compare with the first terminal state   terminated . the code in question already does something very similar with the  running  state a few lines earlier.  relnotes=n/a;;0;added description string to the themeloader this is then used to dis…;…play the description of the theme after applying a new theme in the preferences-----  change in changelogmd described-  manually tested changed features in running jabref-  (https://githubcom/joelparkerhenderson/git_commit_message);@carlg0ransson could you check the items in the checklist at your pr? changelogmd entry you can fill the checkbox with an x --> `-  checked` you can remove items not necessary (eg ) || @carlg0ransson nice to see a contribution to jabrefs code base from someone new to jabrefs code || hey this is the first time i am contributing to an open source project - so i am sorry if i am not doing the whole pr process correctly ive implemented the change you suggested now and ive updated the initial comment with the checklist i was not sure how/if it was needed to update the changelog for this small fix || the changelog could read: `added speaking output at theme change 5584]( lgtm wdyt? ||;;;;1;1;added locale strings to the english language file;
5584;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;remove  service.state.isterminal() .;remove  service.state.isterminal() .  it was only referenced in one place. since we guarantee that transitions between the states in the  service.state  enum are always from an earlier to a later value  we know that the terminal states must be last. so it s enough to compare with the first terminal state   terminated . the code in question already does something very similar with the  running  state a few lines earlier.  relnotes=n/a;;0;migration doc for hive is outdated about outer join;in [latest presto doc]( it says hive is not following ansi sql when doing outer joinmore specifically migration doc says > hive will first apply any constant filters in the on clause then perform the jointhis is a bug for hive however it was already  in [hive-1534]( [hive-3381]( [hive-9743](https://issuesapacheorg/jira/browse/hive-9743); by  ||;;;;0;1;;
5584;1;1;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;remove  service.state.isterminal() .;remove  service.state.isterminal() .  it was only referenced in one place. since we guarantee that transitions between the states in the  service.state  enum are always from an earlier to a later value  we know that the terminal states must be last. so it s enough to compare with the first terminal state   terminated . the code in question already does something very similar with the  running  state a few lines earlier.  relnotes=n/a;;0;observable throw exception after isdisposed;higod:sorry for this chinese style englishrxjava-211use observablefromcallablei disposed the disposable before callable returnthen in the call() method  throw an exception(maybe custom) and then the application crash by undeliverableexceptioni do not want to set an errorhandlerbecause i do not know to do what when i accept a undeliverableexception(or other)i want i can ignore the exceptionbecause i know why and how the exception happened and i really dont care the return value by callable#call()  at that time;"you could use `observablecreate()` instead with `observableemittertryonerror` to avoid signalling the error alternatively you could take the `observablefromcallable` implementation and modify it slightly:```javapublic final class observablefromcallable<t> extends observable<t> implements callable<t> {    final callable<? extends t> callable    public observablefromcallable(callable<? extends t> callable) {        thiscallable  callable    }    @override    public void subscribeactual(observer<? super t> s) {        deferredscalardisposable<t> d  new deferredscalardisposable<t>(s)        sonsubscribe(d)        if (disdisposed()) {            return        }        t value        try {            value  objecthelperrequirenonnull(callablecall() ""callable returned null"")        } catch (throwable e) {            exceptionsthrowiffatal(e)            if (!disdisposed()) {                sonerror(e)            //             //} else {            //    rxjavapluginsonerror(e)            //             }            return        }        dcomplete(value)    }    @override    public t call() throws exception {        return objecthelperrequirenonnull(callablecall() ""the callable returned a null value"")    }}``` || thinks for your answer!finally，use this code:```javapublic abstract class observableignoreghostcall<t> extends observable {    @override    protected void subscribeactual(observer s) {        deferredscalardisposable<t> d  new deferredscalardisposable<t>(s)        sonsubscribe(d)        if (disdisposed()) {            return        }        t value        try {            value  objecthelperrequirenonnull(call() ""call returned null"")        } catch (throwable e) {            exceptionsthrowiffatal(e)            if (!disdisposed()) {                sonerror(e)//            } else {//                rxjavapluginsonerror(e)            }            return        }        dcomplete(value)    }    protected abstract t call() throws exception}``` || @akarnokd hmm do you think this is what we should suggest people to handle `undeliverableexception`? lots of operators in rxjava deliver errors arrived after terminal event to `rxjavapluginsonerror()` ie `observeon()` `take()` etc so fixing one of them in userland wont help in complex rx chainssince exception is clearly named `undeliverableexception` i guess we can safely suggest users to set `rxjavapluginsseterrorhandler()` that ignores and/or logs `undeliverableexception` ie:```javafinal class customrxjava2errorhandler implements consumer<throwable> {    @override    public void accept(throwable throwable) {        if (throwable instanceof undeliverableexception) {            ld(throwable ""exception arrived after termination of rxjava2 chain"")        } else {            // mimics default rxjavapluginsonerror() behavior            // crashes on android prints error to systemerr on jvm            thread currentthread  threadcurrentthread()                        currentthread                getuncaughtexceptionhandler()                uncaughtexception(currentthread throwable)        }    }}// needs to be called before any use of rxjava ie in applicationoncreate()rxjavapluginsseterrorhandler(new customrxjava2errorhandler())``` || this was a particular issue with `fromcallable` where suppressing the interruption exception requires you to return some non-null value so either you write a custom operator or you use `create()`:```javaobservablecreate(e -> {    try {        eonnext(compute())        eoncomplete()    } catch (throwable e) {       etryonerror(e)    }})```the `undeliverableexception` can hold anything so throwing away all of them might not be the best action if you scroll up from [the wiki]( the example handler starts with unwrapping the cause of the `undeliverableexception` and decides on that instead || ";;;;0;1;;
