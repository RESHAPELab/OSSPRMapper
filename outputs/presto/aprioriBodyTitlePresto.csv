2,pull request: load default plugins dynamically,to be able to include mockito source in the android open source project  i d like to be able to build a subset of mockito which doesn t rely on cglib. this removes the compile-time dependency on the default mockmaker implementation  which naturally includes references to cglib.,i18n,DevOps,Test,Interpreter,DB,IO,Util
5,mock serialization/deserialization across classloader/jvm,this pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  at the moment it s enabled automatically when using  withsettings().serializable() .  it still require to have mockito on the classpath of the jvm classloader where it is deserialized.,Util,Test,IO,i18n,DB,Interpreter
9,add maskedvalueblock,block filters now simply returns a masked value block add filter to position block,i18n,Test,Interpreter,IO,Util,DB
15,make (un)abbreviating journal titles also work on the journaltitle field,i ve (i) added the toggle button to the  journaltitle  field editor and (ii) made the abbreviate/unabbreviate actions change both the  journal  and  journaltitle  fields. the latter might be a bit simple-minded --  should the field to consider depend on whether biblatex mode is actually turned on?,Data Structure,Thread,DevOps,Interpreter,Logic,i18n,Util,Test,IO,DB
22,extended the  unknown entry type  error message,i had problems locating which entry had this unknown entry type and hence extended the error message to also include the bibtex key.,Util,Test,IO,DevOps,i18n,Interpreter,DB
23,added outputstreamsliceoutput,- also consolidated writezero(int length) generic impl into base class - removed duplicate of readslice from sliceinput,i18n,Interpreter,DevOps,Util,IO,Test
24,extend biblatex: support for alias fields,- added support for aliased fields. for example  the content in the  journaltitle  field is also shown in the  journal  table. - added cleanup option to convert to the new biblatex format - modified the required/optional fields for biblatex entries to reflect the above changes (the  year  field is no longer required),Util,DB,DevOps,i18n,Interpreter,IO,Test,Big Data
27,partial fix for bug #913,realized many fields were not being exported  not only in .csv and .ods formats as stated in the bug report  but in .sxc as well. i fixed the export for both .ods and .sxc  but couldn t figure out how to fix it for .csv.,IO,Test,DB,i18n,Util
28,added special fields  printed  and  read status,added special fields  printed  and  read status   thereby implementing (at least partially): - feature #762 printed attribute - feature #692 marking of new entries and often read entries - feature #685 highlight new entries that were  forgotten  - feature #602 could add the mark as read feature - feature #225 read? checkbox  printed is just a boolean toggle and for the read field currently the values  skimmed  and  read  are possible (if you have any suggestions for further possibilities  i m happy to implement them). the icons are taken from  and should probably be replaced with icons from the same collection as the other currently used ones.,Util,DB,Test,i18n,IO,Network
29,fixed bug #1240. 1-char strings working correctly.,fixed bug #1240  about an error thrown when trying to add a string with length of one character.,DevOps,i18n,DB,IO,Util,Test
38,new  then  method for bdd-style interaction testing,new feature in bddmockito for bdd then part of the test which allows mock behavior verification by using  mockito#verify(object) . for example we have classes person and bike:      java bike bike = new bike()  person person = mock(person.class)       and the following interaction      java person.ride(bike)  person.ride(bike)       current (non bdd) behavior verification would go like:      java verify(person  times(2)).ride(bike)       this feature introduces the following way of verification:      java then(person).should(times(2)).ride(bike),IO,i18n,DB,Interpreter,Test,Util
39,allow calling real implementation of jdk8 extension methods,see also the google code ticket:   enable calling real implementation on extensions method from jdk8 additionally change add validation checking whether callrealmethod is invoked on abstract methods. in fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someinteface.abstractmethod()).thancallrealmethod()  2: someinteface.abstractmethod() exception will be throwned on second line informing that there were attempt to invoke abstract method,Interpreter,IO,Util,i18n,DB,Test,App
41,new  getargumentat  method for convenient implementation of custom answers,the problem is when i need to use answers  i quite often need to cast these arguments. i propose two methods in invocationonmock  so we can get two arguments of method typesafely  so this piece of code       java @suppresswarnings( unchecked )   doanswer(new answer() {       public object answer(invocationonmock invocation) {           object args = invocation.getarguments()            int count  = (int)args[1]           //do something       }})   .when(mock).somemethod()       will be better:      java   doanswer(new answer() {       public object answer(invocationonmock invocation) {            int count  = invocation.getargumentat(1  int.class)           //do something       }})   .when(mock).somemethod(),i18n,IO,Util,Interpreter
44,add entry under the  view  menu to hide the toolbar,in addition  i would suggest to hide the toolbar by default.,App,Data Structure,Interpreter,IO,i18n,Logic,Thread,Util,Big Data,Test,DB,Network,DevOps
46,add option to hide/show gridlines in the main table,cleaned-up version of older pull request 43,Test,App,IO,DB,Interpreter,Util,i18n
53,binary and comparison operators  tests and bug fixes,initial take on binary and comparison operators. for now  they can only operate on specific types. we need to figure out how to generalize them later.,i18n,App,IO,Interpreter,Util,DB,Test
55,mac bundle and integration for java 7,these changes creates a new compilation target for jabref  in order to make a mac application bundle which can work with the newer oracle jvm for mac (versions 7 and 8)  and change the code of the wrapper to integrate the apple events with the non-deprecated api in com.apple.eawt.  main changes are: - create a new target based on oracle s appbundler to create a bundle compatible with newer jvms. (not compatible with apple s jvm). - move the older target to jabref-legacy.app. - remove the old deprecated wrapper osxadapter  which does not work with oracle s jvm. - create new wrapper based on com.apple.eawt (compatible with both jvms). - improve the quit behaviour. - add support for the fullscreen feature.  the code changes are compatible with both oracle s jvms and apple legacy one  but the legacy bundle is currently broken as the code requires java 1.7+. tested with apple s jvm (1.6.0_65) and oracle s jvm (1.8.0_45).,DevOps,DB,Interpreter,Test,Util,Big Data,IO,i18n
56,fix double-click opening of files on mac,moving the registration of apple events ensures that double-clicking on a file to open it works even if jabref is not yet running.,DB,IO,Util,Interpreter,Big Data,Test,i18n,DevOps
65,replace usages of preferences by string through constants,i checked all the usage of strings for getting or setting preferences and replaced them by a the usage of a constant  if one existed. this gives some more static checking and consistency throughout the project. changes are limited to  src/main/java .   again this changes nothing functionwise  but only improves code quality.,i18n,App,Util,Test,IO,Interpreter,DB
66,fixed incompatibility with inspire output page,due to a change in the html output of the inspire search  jabref was no more able to distinguish the interesting output from the rest of the page. it was due to a missing newline character.,IO,GIS,Thread,Test,Network,Logic,Interpreter,DB,DevOps,UI,Util,i18n
68,added custom failure message to mockito.verify. issue 482,issue 482: passing custom failure message to mockito.verify,i18n,Network,DevOps,Util,IO,Interpreter,Test,DB
75,code style,some minor code style cleanups.,Security,i18n,Big Data,Logic,Test,Cloud,Interpreter,Data Structure,App,Util,UI,Network,DevOps,IO,DB,Thread,GIS
76,create dedicated ods output file generator to improve ods export speed & add benchmark warmups,- also adjust the iterations for the benchmarks to run a little faster,DevOps,IO,Interpreter,Util,DB
77,code style,more minor code style cleanups.,Interpreter,DB,i18n,Test,IO,Util
82,hive importer + bug fixes + performance optimizations,still a little rough around the edges  but does what we need for the demo.,Interpreter,DB,Network,Big Data,DevOps,IO,Test,i18n,Logic,Util
89,removes splash screen,this pr removes both the splash screen and the cli option to disable the splash screen.   why? - splash screen on modern systems is shown only for a very short period of time as jabref starts fast - we should focus on making jabref to start as fast as possible. a splash screen reduces the time to start the software as additional code needs to be executed.  - for each new version (even for beta and dev versions)  we have to check in a png with 200kb file size into the repository. this increases the amount of storage required for the git repository by 200kb for each version/dev-version. - the splash screen interferes with using jabref via the cli.  - it reduces code in jabref. hence  less code needs to be maintained.  this is a pr that is open for discussion. please add any pros/cons as you see fit.,DB,IO,Util,i18n,DevOps,Network,Interpreter
93,logic improvements (java 1.7+),this pull request features various improvements of the classes in the logic package with the aim to transition beyond java 1.6 and improve quality. in particular: - updates license headers with current date - syntax optimizations: java 1.7 use of generics (diamond operator) - format code according to java conventions (c-style curly brackets  i am looking at you) - improves exception handling with logging - replace usages of exception with more precise exceptions - improves variable names - removes commented-out code  unused private methods (unused public methods/constructors are not eliminated) - use try-with-resources if possible - delete stale comments - replace stringbuffer with stringbuilder - remove history information from javadoc  (i am aware that i could push this directly  since i am now a contributor. as this started out as a pull request  i want to finish it as such. future cotributions will be made directly to jabref/master),Test,IO,DevOps,Util,DB
95,add support for selecting with qualified wildcard from anonymous columns,queries of this form are now resolved correctly:      sql select t.* from (     select a + b     from u ) t      note that the expression  a + b  doesn t have an alias,Interpreter,App,DevOps,Test,IO,DB,Network,i18n,Util
99,rewrite doi parsing,i rewrote the doi parser as it was hard to understand and missing quite a few valid dois. it s not 100% but should be a lot better than before. - clearer and more permissive regex - better url encoding and decoding - more test coverage  any comments before merging this into master are appreciated.,i18n,Util,Test,IO,DB,DevOps
100,move and refactor entryeditor,moves the classes related to the entryeditor into a separate gui package and performs a few refactorings and quality improvements on the way.,DB,DevOps,IO,Util
103,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks,see issue #99   what it does is propagating the serializing mode of the parent  upon each mock creation when deep stubbing.  before each mock created where made serializable by default. which is not an issue when the types have a default no arg constructor  but may become problematic when the type didn t have one  mockito would report an error explaining that it couldn t mock this type.,Util,Interpreter,i18n,Test,DB,IO,App,DevOps
106,null support,add isnull(field) to tuplereadable null is stored in a bit vector at the head of the tuple aggregates (except) count skip null values,i18n,App,IO,DevOps,DB,Util,Interpreter,Test
108,extract model package with core data classes,this pull request extracts the most central data classes from the root package and puts them into a separate model package. it was possible to remove all gui dependencies from these classes.  additionally  all classes in the model package are refactored and adjusted to java 8 syntax.,DevOps,DB,IO,Util
113,improved exception handling of additionalanswers#delegatesto,when using the additionalanswers#delegatesto method  exceptions thrown by the delegate are wrapped in invocationtargetexception due to invocation via method. instead  the original exception from the delegate should be propagated to the caller.,DB,i18n,Util,Test,IO,Network,DevOps
117,add managers for metastore and datastreamproviders,- also make some needed  augmentations to metastore interface,DevOps,Util,DB,Big Data,Test,App,Interpreter,IO,Microservices,i18n
118,aggregation function improvements,- add intermediate types to aggregation functioninfo (in preparation for distributed plan creation) - rename fullaggregationfunction to aggregationfunction -- the  public  aggregation class  - rename aggregationfunction to aggregationfunctionstep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - mechanism for instantiating aggregation functions bound to inputs in physical plan. this is so that we can get rid of the hard-coded if-then-else checks in executionplanner  also  fix source of potential bugs in page.,App,Interpreter,DevOps,IO,Test,DB,Util,i18n,GIS
126,migrate tpch test data system to be compliant with metadata and datastreamprovider,- this affects the benchmark code as well as the testqueries. - there is currently a temporary hack with the legacystoragemanager to allow it to interface with the executionplanner  but all those hacks should be removed once executionplanner switches to using datastreamproviders.,IO,Util,App,DevOps,Interpreter,i18n,Test,DB
127,minor improvement in googleurlcleaner #126,fixes detection of domains such as google.co.uk / co.jp / etc. and moves test class to test folder.,i18n,Util,App,DevOps,Network,Test,IO,DB,Interpreter
137,unify and simplify gui actions,- using lambdas for the simpler actions - some code cleanup - extract string commands as string constants to actions.java and use the constants in jabrefframe  basepanel and rightclickmenu - use the constants already defined in keybinds to get keystrokes for the actions (in jabrefframe  basepanel  entryeditor and rightclickmenu) - 8e3ad9d: remove quickfix for [sf.net bug #1277]( and implement feature properly: instead of deactivating  show/hide toolbar  when no database is open  the action has been move to jabrefframe and works now even if no database is open.  see also #136,DB,Test,IO,Interpreter,i18n,DevOps,Network,Util,Logic
143,fix sf bug #1285,restores the cursor resp.  caret  position when a field is store during editing. this fixes [sf.net bug #1285](  to be done:  - backport to dev_2.11 - ask for confirmation on sf.net and close the issue there.,IO,Interpreter,Test,i18n,App,DevOps,Util,DB
144,enum answers implements now answer<object>,the enum type answers implements now the answer interface. this allows us to use the enum values in  mockito.mock(class answer) . this is handy when you have to test legacy code with powermockito and want to use both  @mock  and  mockito.mock(..) .      java @mock(answers=returns_deep_stubs)  classa a  classb b   public void setup(){   b= mock(classb mockito.returns_deep_stubs)   //<< static import is not possible here  but with this pull request we can use returns_deep_stubs we used in @mock. },IO,Network,Util
150,removes the legacy-action integrity check,removes the **legacy**-action  tools--> legacy tools --> integrity check  with all its files.   what it helps: - removes 1000 lines of code - removes a feature that is marked as a legacy tool  what does the feature do at the moment: - check year: raise error if it contains a 4digit number - check title: warn only about wrong braces - check author/editor: check that the structure is correct using  and  and the     separator.  anyone who wants this feature to stay?  is there any other validation facility in place where we could add the checks instead?,IO,Network,DevOps,Util,App,i18n,Security,Test,Big Data,DB,Interpreter
163,fix bug in count aggregation from inline view,this query now works:  select count(*) from (select  ) x,Test,Interpreter,DevOps,IO,DB,Util,App,i18n
164,small changes to default preferences,- fields in table are not colored (required/optional) - owner column is not shown - slightly increasing row padding in table,Test,App,Interpreter,IO,DB,Util,i18n,DevOps
165,timestamp is not displayed by defaut,as discussed in #164 the timestamp column shouldn t be displayed by default.,Interpreter,DevOps,Test,Network,Util,IO,DB,i18n
175,increase saving speed,intended to 122  this pr turned into a major api change. it replaces  string  in the return types of  bibtexentrytype  with  list<string> . this allows to return immutable lists instead of mutable arrays and improves the stability of the program. additionally  the rewrite allowed to replace a lot of duplicate object creation with instance variables.  with respect to #122  the immutability of the new lists removes the necessity to create defensive copies and therefore avoids a lot of cloning.,Network,DB,i18n,Util,Cloud,Test,Big Data,IO,Logic,Interpreter,DevOps
176,make propertyandsetterinjection field sorting consistent,#155 is caused by calling  collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  for example  with fields of type  [iterable  integer  number]   it gives  iterable == integer  and  iterable == number   but also an inconsistent  integer < number .  i m not sure it s possible to sort consistently with a stateless  comparator   so this change switches to a  sortsupertypeslast  method that first sorts by name and then shuffles any subclasses to after their superclasses. it s slower  but should be deterministic. the existing tests are preserved by leaving behind a dummy  comparator  that uses the new sort method. new tests make sure that the sorted ordering doesn t depend on the original order.  155.,Cloud,DB,i18n,IO,Interpreter,Test,Big Data,DevOps,Network,Util,Logic
178,auto detect user language #177,jabref now uses the system locale as default with this pr.  i simplified some methods in the process and implemented a fallback to  en  when there is no bundle for the default locale.  any suggestions?,Util,Microservices,IO,App,Interpreter,DB,Big Data,i18n,Test,Logic,DevOps
182,bookkeeping,rewrite bookkeeping objects to be correct and thread safe added stage abstraction add more stats and cleanup stats collection record exceptions in info objects and propagate to client add multiline progress to console,Test,DevOps,DB,IO,i18n,Interpreter,Util
187,fix linebreaking,evaluating the usage and problems of #114. what is fieldcontentparser really doing? what is jabref style formatting?,Test,Util,DB
203,rename newinmemoryorderbyoperator to inmemoryorderbyoperator,remove old inmemoryorderbyoperator code,Util,Test,DevOps,App,Interpreter,IO,i18n,DB
204,added pushing citations to texmaker,implements sourceforge feature requests #318 and #582.,DB,Interpreter,DevOps,Logic,IO,i18n,Test,Util
206,added ability to merge from a downloaded doi based bibtex entry,- refactored mergeentriesdialog by splitting into a mergeentries providing a jpanel for merging and the dialog and moved these into gui.mergeentries - added mergeentrydoidialog to merge with a bibtex entry downloaded based on doi  e.g.  to add missing information or correct - added that functionality to the right-click menu for the entry table - made getentryfromdoi in doitobibtexfecther public to be able to use that to get the bibtex entry - added a new icon for doi (which probably should be used in other places),IO,Util,DB,DevOps,i18n
207,197 : blocks ability to use negative value for timeout() and after() method.,it should  #197.   if user uses mockito.after() or mockito.timeout() with negative values  then friendly reminder exception with details will be thrown.,Test,Util,DB,IO,i18n,DevOps
211,argumentcaptor no longer working for varargs,188 . these commits should  with capturing varargs.,Test,IO,Data Structure,Network,Interpreter,i18n,DB,Util,DevOps
215,adding an advanced data structure for title/word in the casechangers …,…implementation.  @koppor this is what i ment. what do you think?,Util,Cloud,Logic,i18n,IO,Test,DB,Big Data,DevOps,Network,Interpreter
217,remove the option move-to-systray,why? - only applications that do background work are put in the systray  e.g.  dropbox or anti-virus-software.  - other software stays in the normal task bar - jabref currently does no background stuff  hence  should stay in the task bar only  gains? - less code - lesser quirky workarounds (see commit),DB,i18n,DevOps,Interpreter,Test,App,IO,Util
219,ieee journal abbreviations,why? - see #173   what is does: - bugfix: correct abbreviations are loaded when storing preferences through the advanced tab - ieee abbreviations are either plain (text) or in latex (code) form. for each of them  a separate file exist now. the config option  use_ieee  loads the latex one if it is true  and the plain one otherwise.,Test,IO,DB,i18n,Util,DevOps
221,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions,follow-up to #212,IO,DB,Util
222,203 : introduce bdd inorder verification,follow-up to #203.,Util,DevOps,DB,i18n,Interpreter
223,206]  related to windows path,problem was caused by file separator. replacing hardcoded char  /  by file.seperatorchar solves issue. in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case  /  is only acceptable separator.,GIS,Big Data,DB,Interpreter,Security,Logic,UI,App,IO,Thread,i18n,Test,Network,DevOps,Util
225,replaced defaultformbuilder with formbuilder,another batch of replacing the deprecated defaultformbuilder with formbuilder: autosetexternalfileforentries  basepanel  colorsetuppanel  dbconnectdialog  fromauxdialog  managekeywordsaction  masssetfieldaction  and synchronizefilefield.  clean up in util.java.,DB,i18n,Util,Test,Interpreter,DevOps,IO
229,removes non-compact rank symbols in favor of compact rank,why? - because it is ugly :taxi:  - keep consistent icon width - removes 140 lines of code  five icons  one preference check box,i18n,IO,Util,App,DB,Interpreter,Test
232,architecture,adds a the architecturetests class that ensures that specific packages stay independent from other packages.  why? - ensure that the architecture of jabref stays healthy.,DB,Interpreter,App,Util,i18n,Test,DevOps,IO
235,clean ups,purpose was to replace more defaultformbuilders  but ended up cleaning up minor issues and removed quite a bit of disabled code from ieeexplorefetcher (bibtex fetching and multi-page search results)  which has not been working for years  and added support for a few more publication types that ieee xplore has added.,DevOps,Util,IO,Test,DB,App,Interpreter,i18n
238,moves responsibility of istypemockable to mockmaker,mock makers may have different capabilities. historically cglib and mockito were deeply related  later mockmaker was created to allow android developers to use dexmaker to create mocks. but logic that decided if a type could be mocked still reside in the mockito base  while it should be the responsibility of the mockmaker.  also for example one could create his own mockmaker that forbid to mock type if some annotation is present.,Util,App,DevOps,DB,i18n,Interpreter,Test,IO
239,remove edit preamble and edit strings from toolbar. it is still avail…,…able under the bibtex menu.,i18n,Test,IO,DB,DevOps,Interpreter,App,Util
245,make session available to expression interpreter and functions,session is passed from coordiator to tasks during creation add start time to session change current_timestamp to use session start time,Big Data,App,DB,IO,Util,Network,Logic,Interpreter,DevOps,Cloud,Security,Data Structure,Test,i18n
251,removes legacy options to sync files in the  pdf  or  ps  field,why? - these legacy actions are replaced by using the  file  field and a much more sophisticated file sync action.,DevOps,Microservices,Network,IO,Big Data,Interpreter,Util,App,i18n,Test,Cloud,DB
253,cleanup preferences,this pr remove preferences that are no longer used in jabref.  i checked the usage each public field of  jabrefpreferences  and  if there was no such usage  searched for string occurrences of the preference value in the complete project. if such usage was found  i replaced it with a usage of the respective field. otherwise  i deleted the preference.  all in all  only a surprisingly small amount of preferences is not used.,App,Cloud,DevOps,IO,i18n,Util,Interpreter,DB,Test
264,remove unused menus for import/export,found some dead code in jabrefframe which has been used to generate submenus for custom imports/exports.   would be glad if someone checks whether this is okay.,i18n,IO,Interpreter,Test,Util,App,DB
266,removed a number of warnings  added copyright etc,cleanups based on warnings  primarily: - removed right-hand side arguments of diamond operators - static functions - commented empty blocks - added try-with - avoided hiding variables  included copyright statements.,DevOps,IO,Util,i18n,DB
267,removes option to hide the bibtex code tab in the entry editor.,why? - i do not see the point of hiding the bibtex code tab in the entry editor. hence  i removed the option.,i18n,Util,Interpreter,DevOps,Network,IO,DB,Test
270,issue #268: added support for generic arrays as return types.,solves  by explicitly checking for return types that represent a generic array and by resolving for the array s component type.,Network,IO,DevOps,i18n,DB,Util,Interpreter,Test
274,save size of mergeentrydialog and mergeentrydoidialog,as per @koppor s request (sort of)  the  mergeentry*  dialogs now save and restore their size and position (same for both).,IO,DevOps,Interpreter,Test,Util,DB,Thread,i18n,Network,GIS
276,refactor bibtex model (a bit),- renames getallfields() to getfieldnames()  - add getfields() method  often the workflow in our code is:      java for(string name: entry.getfieldnames()) {   entry.getfield(name)    // do something }      we can directly use  entry.getfields()  for this now. are there any concurrency problems behind the old rationale or was it just dumb?,Logic,Network,DevOps,Test,DB,Util,Interpreter,i18n,IO
280,removes option to disable renaming in filechooser dialogs.,why? - i think this is annoying as one would expect this to work.   i can also live with the option that this is always active  but giving the user the option to choose is not good in my opinion.,DB,i18n,IO,Util,DevOps
285,make presto build in eclipse,exclude the dependency:copy goal because eclipse can not handle it.,Util,Interpreter,GIS,Network,Thread,IO,DevOps,DB,Test,i18n,Logic
288,add optional answer to support mocked builders,when googling the mocking of builders  a lot of people said it was not possible with mockito to support them in a clean way.  returns_deeps_stubs  does allow cascading  but can become quite fast very cumbersome. the added  returns_self  will try to return itself by looking at the method  returntype  and compare this with the class of the mock.,IO,Microservices,App,Big Data,Test,DevOps,i18n,Interpreter,Network,Util,DB,Cloud
292,warning removal,more warnings removed.,DevOps,IO,Util,DB,Test
293,remove validateserializable(),245:  remove serializable validation.,Test,DevOps,Interpreter,i18n,Util,Data Structure,DB,IO
298,warningremoval5,removed a bunch of warnings. - redundant specifications in <> - resource leakage - commented empty blocks - removed calls to util.pr,Util,DB,Test,IO,i18n,Interpreter,App
299,log message translation removals,trying to remove translated log messages  unless the translation is needed elsewhere. in that case i add a comment stating where the string is found.  i ll do this every now and then  so while not complete yet  it will be split in separate prs (unless there are any objections).,DB,Util,i18n,DevOps,IO
302,replaced some of the getkey arguments with constants from keybinds,replaced some of the getkey arguments with constants from keybinds  change: the preamble editor dialog doesn t have its own key entry for closing it.,Test,IO,i18n,Big Data,DevOps,Util,DB,Interpreter,Network
303,replaces the final(?) keybinds.string and some actions.string,some more cleanups.  in generalfetcher  the key binding for  fetch medline  is defined  which seems a bit non-intuitive. not sure how to proceed here.,Test,DB,IO,Util,DevOps,i18n
304,replaced system.*.println with logger in vm.java,after looking more into the bibtex vm (as part of pr #298)  i better understood the structure of vm.java. hence  the main focus was to introduce logging for the warn function and it also lead to that other printouts were replaced with the logger.,DevOps,Interpreter,Network,i18n,DB,IO,Util
305,add ability to format/cleanup the date field,the value in the date field has to be of the form yyyy-mm or yyyy-mm-dd according to the biblatex manual. this pr adds the ability to format/cleanup the date field to the correct format.,Util,DB,Test
308,removes option to toggle native file dialog on mac by making jabref a…,…lways use native file dialogs on mac  as discussed in the dev meeting. but the option is only for mac users. to make this available for all other operating system  more has to be investigated. but this is not necessary for now.,Test,Logic,DB,Interpreter,IO,Network,Util,DevOps,i18n
310,copacimportertest,new pr on a new branch. edited tests. no assignments. better formatting. cover dt (documenttype). new test in case an empty text is imported.  edit: added the suggestions into the testfile. checking the equality of copac and ris is ongoing.,Util,Test,DB
311,openoffice.org/libreoffice improvements,changed default file names suitable for oo.o 4 and lo 5 and added support for having both openoffice.org and libreoffice installed (sort of),DB,IO,App,Util,Interpreter,i18n,Test
317,modify stacktracefilter to not exclude  good  stack trace elements,currently stacktracefilter filters in this way (example from javadoc): [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  g+]  this patch makes it work: [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  d+  e+  g+]  not sure why it was implemented first time in this strange manner.  ---  **edit by mockito team** : 316,Network,DB,Logic,DevOps,Util,IO,Interpreter,Test,i18n
323,fix hash aggregation operator slice sizing bug,fixes this:  presto> select ds  stddev(cpu_msec) from hive_silver.default.hivedba_query_stats group by ds limit 20  query 0 failed: task 0.0.0 failed: java.lang.indexoutofboundsexception: end index (2625) must not be greater than size (2621)     at com.google.common.base.preconditions.checkpositionindexes(preconditions.jav a:388)     at com.facebook.presto.slice.slice.checkindexlength(slice.java:914)     at com.facebook.presto.slice.slice.setdouble(slice.java:480)     at com.facebook.presto.tuple.tupleinfo.setdouble(tupleinfo.java:337)     at com.facebook.presto.operator.aggregation.abstractvarianceaggregation.initia lize(abstractvarianceaggregation.java:69)     at com.facebook.presto.operator.hashaggregationoperator$fixedwidthaggregator.i nitialize(hashaggregationoperator.java:350)     at com.facebook.presto.operator.hashaggregationoperator$hashaggregationiterato r.aggregate(hashaggregationoperator.java:191)     at com.facebook.presto.operator.hashaggregationoperator$hashaggregationiterato r.computenext(hashaggregationoperator.java:234)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.operator.filterandprojectoperator$filterandprojectitera tor.computenext(filterandprojectoperator.java:84)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.operator.limitoperator$limititerator.computenext(limito perator.java:60)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.execution.sqltaskexecution$splitworker.call(sqltaskexec ution.java:269)     at com.facebook.presto.execution.sqltaskexecution.run(sqltaskexecution.java:12 6)     at com.facebook.presto.execution.sqltaskmanager$taskstarter.run(sqltaskmanager .java:282)     at java.util.concurrent.executors$runnableadapter.call(executors.java:471)     at java.util.concurrent.futuretask$sync.innerrun(futuretask.java:334)     at java.util.concurrent.futuretask.run(futuretask.java:166)     at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1 110)     at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java: 603)     at java.lang.thread.run(thread.java:722) java.lang.indexoutofboundsexception: end index (2625) must not be greater than size (2621)     at com.google.common.base.preconditions.checkpositionindexes(preconditions.jav a:388)     at com.facebook.presto.slice.slice.checkindexlength(slice.java:914)     at com.facebook.presto.slice.slice.setdouble(slice.java:480)     at com.facebook.presto.tuple.tupleinfo.setdouble(tupleinfo.java:337)     at com.facebook.presto.operator.aggregation.abstractvarianceaggregation.initia lize(abstractvarianceaggregation.java:69)     at com.facebook.presto.operator.hashaggregationoperator$fixedwidthaggregator.i nitialize(hashaggregationoperator.java:350)     at com.facebook.presto.operator.hashaggregationoperator$hashaggregationiterato r.aggregate(hashaggregationoperator.java:191)     at com.facebook.presto.operator.hashaggregationoperator$hashaggregationiterato r.computenext(hashaggregationoperator.java:234)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.operator.filterandprojectoperator$filterandprojectitera tor.computenext(filterandprojectoperator.java:84)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.operator.limitoperator$limititerator.computenext(limito perator.java:60)     at com.facebook.presto.operator.abstractpageiterator.trytocomputenext(abstract pageiterator.java:137)     at com.facebook.presto.operator.abstractpageiterator.hasnext(abstractpageitera tor.java:130)     at com.facebook.presto.execution.sqltaskexecution$splitworker.call(sqltaskexec ution.java:269)     at com.facebook.presto.execution.sqltaskexecution.run(sqltaskexecution.java:12 6)     at com.facebook.presto.execution.sqltaskmanager$taskstarter.run(sqltaskmanager .java:282)     at java.util.concurrent.executors$runnableadapter.call(executors.java:471)     at java.util.concurrent.futuretask$sync.innerrun(futuretask.java:334)     at java.util.concurrent.futuretask.run(futuretask.java:166)     at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1 110)     at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java: 603)     at java.lang.thread.run(thread.java:722),Test,i18n,DB,Util,DevOps,IO
329,moved things from the util file,i ve moved some methods from the util file to more suitable places.  the destination was determined by where the method was (most) used or where it seems to fit.  as a result of this i also moved the corresponding tests to a more suitable location.,Util,DevOps,i18n,IO,DB
335,clean-up of stringutil and some added tests,replaced/removed/unified some methods in stringutil and added some tests in stringutiltest.,App,Test,i18n,IO,Interpreter,Util,DB,DevOps
337,upgrade to latest airlift with latest jackson and switch to more efficient json,jackson 1.9.12 fixes the bug we were seeing with nextfieldname method from jackson. the code no longer hangs when there is a space before a colon.  the json parsing function in presto should be substantially more perfomant now.,IO,Util,DB,Test
342,added tests for most methods in stringutils,the ones that remain are: -  getpart - not really clear to me how it works -  findencodingsforstring - unused  but seems quite useful (e.g. we could possibly suggest an encoding when trying to save with a bad encoding)  related change in this pr: - change in filelisttablemodel  which basically reimplemented stringutil.encodestringarray,DB,i18n,Util,IO,DevOps
343,replaced deprecated glazedlists-api with current,i replaced the deprecated calls to the glazedlists-api with the current versions. the major difference is that the new ones are not thread-safe and as such in most placed i ve used the suggested factory method to obtained a wrapped list/model.  this seems to work  but may require a bit more testing/thinking. especially to figure out if the wrapping may not be needed in all places and if there actually should be wrapping where there currently isn t.  a better option would be to explicitly lock and unlock the tables  but that require much more work.,Util,Big Data,DevOps,Interpreter,DB,IO,Test,Cloud,Logic,i18n,Network
345,update timing stats incrementally,they were only being updated at the end of processing a split. bytes and rows are updated incrementally so we need timings to be updated at the same rate to get consistent row and data rate reports.,Util,Test,DevOps,i18n,Interpreter,IO,DB
349,issue #345 : removes previously verified invocations when capturing argument is combined with after and atmost verifiers,solves #345 by removing already verified invocations before redundant capture of their arguments in atmost class.,Interpreter,i18n,DevOps,IO,DB,Util
356,test for inspecimporter,completed code coverage and discovered a bug in bibtexentrytype (bibtetentrytype.gettype() all_types.get() returns null),DB,Util,Interpreter,i18n
359,add test for bibtex key generation and refactoring,verify that special latex characters in author names are handled correctly in bibtex key generation (from [sf bug 1186](  small code cleanup ( makelabel  now returns voids since it updates the entry instead of returning a updated one),Util,GIS,App,Network,i18n,Thread,DB,Logic,Interpreter,Test,DevOps,IO
361,fix bug: encoding was not read from comment,the encoding was not correctly inferred from the first/second line of the file  i.e. from      % encoding: encoding      this bug is covered in the tests by changing the default encoding to something different from the encoding in the test files. fixed this bug by completely rewriting  checkforencoding .,i18n,Test,DevOps,DB,IO,Interpreter,Util,App
363,hackathon project - csv output for the console,- add command line command execution to the console - add csv / tsv output format to the console  this implements  --execute  sql command  and sends the output to stdout. default format is  csv . available formats are  csv - comma separated tsv - tab separated csv_header - comma separated with an additional row that has the column names tsv_header - tab separated with an additional row that has the column names,Interpreter,IO,Thread,i18n,Network,Util,Test,DevOps,DB,GIS
369,convert to netty  client,this depends on https://github.com/airlift/airlift/pull/39,Test,IO,Interpreter,i18n,Big Data,Logic,DB,DevOps,Network,UI,App,Util
371,add cron based import into presto.,this is driven by a configurable background service that accepts import requests through a rest endpoint.,Util,DevOps,DB,Logic,IO,Interpreter
374,better support for ieeetranbstctl entries,added better support for the specific fields in ieeetranbstctl. especially  a new extra field  yesno  was introduced to simplify the setting of some of the fields.,Interpreter,DevOps,DB,Test,Util,i18n,Big Data,Network,IO
375,integrated key word handling in bibtexentry,moved the key word handling to bibtexentry.  added new methods addkeyword and addkeywords to simply add one or more keywords. will be useful when merging key words later on.,Util,DB,DevOps,IO
376,fix typo in example in javadoc.,this is a trivial javadoc-only change  just fixing a typo.,Network,Interpreter,i18n,DB,Util,Big Data,IO,Test,DevOps
377,removed some random unused stuff,removed unused variables  methods  and classes that i happened to stumble upon.,Interpreter,DB
378,integrate gvk plugin,this integrates the [gvk plugin]( into jabref.  location of the original source code at http://jabref.tempelb.de/,i18n,Test,DB,Util,IO
380,added month selection to entryeditor,added a button for the month field such that one can select a month and get the correct bibtex string for that month.  ideally there should probably be localized month names in the list  but i didn t manage to find a way to do that which still keeps the entry model independent  avoids hard coding the month names again and make sure that synclang can find the strings.,DB,i18n,Util,Test,IO
383,type deser configurable for multiple types,turns out that not only the tablehandle but also the columnhandles need to be serialized and deserialized.  factor out the common code into a base class  add code for columnhandles.,i18n,DB,Logic,Test,Cloud,Network,Big Data,Util,UI,IO,App,DevOps,Interpreter
386,remove deprecated code,fixes for #374 - more left though.,DevOps,i18n,IO,DB,Test,App,Interpreter,Util
403,force to have at least english localization,what has been done: -  cleanup python script -  localization keys no longer contain trailing/leading spaces and newlines. tests are in place to ensure that this will never happen again.  -  localization keys do not use %e and %c for = or : anymore -  unit test find all usages of of localization.lang and localization.menutitle. hence  the workaround to disable the formatter is no longer required. -  if the unit test fails  on the console the appropriate measures are printed how to add the keys.  -  fixed a lot of other issues as well  e.g.  when the exception message was part of the localization key.  -  that all non-english property files have the same keys as the english property file is checked by the unit test. however  there is also gradle task/python script for this. -  unit test that checks that every english translation is equal to the key.  - postpone  <br>  is similar to  \n   but for this we do not have checks yet as well. - postpone rename  localization.lang  to  localization.message  -  the keybindings use  localization.lang  directly. -  refactored code of keybinding -  update documentation -  if any resource bundle is not available or if the given locale is not known or if the resource bundles have not bin initialized  always use  en  language.   this is good for a review. the remaining points i would like to ignore as this is really annoying work  and this should be good enough with this pr already.   new process: 1. add new localization.lang( key ) to java file. 2. tests fail. in the test output a snippet is generated which must be added to the english translation file. there is also a snippet generated for the non-english files  but this is irrelevant. 3. add snippet to english translation file 4. with  gradlew -b localization.gradle compareandupdatetranslationswithenglishtranslation  the  key  is added to the other translation files as well.  5. tests are green again.,Test,DB,DevOps,Interpreter,IO,i18n,Data Structure,Network,Util
408,replace jersey mediatype with guava mediatype,jersey mediatype now requires internal classes only available in server jars,Util
419,bddmockito: rename willnothing to willdonothing,.. and keep the original signature as deprecated,Network,DevOps,Interpreter,IO,Util,DB,Test,i18n,Logic
424,inorder timeouts,*fixes issue    *updated code provided by  in pr #20  closes #20,Interpreter,Network,Util,DB,IO,DevOps,Test,i18n,App
427,refactored class reporter to a static utillity,426 for class reporter   this pr changes the way errors are created and thrown. all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly. this improves the readability and eliminates the use of hacks to satisfiy the compiler.  here is a sample:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             reporter().noargumentvaluewascaptured()              return null          } else {             return arguments.getlast()          } }      the above code snipped can be rewritten to this:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             throw noargumentvaluewascaptured()          }          return arguments.getlast()  },Interpreter,Network,DB,IO,Util,Test,i18n,DevOps,Big Data
428,support queries with no matching partitions,when setting no more splits on exchanges  mark all exchange sources not just the ones that had locations assigned,Network,Logic,i18n,Interpreter,DB,IO,Util,Test,DevOps
434,very tiny typo.,missing word in error message.,DevOps,Util,DB,IO,Test
436,clean up issues reported by intellij,some general issues reported by intellij. mostly concerning modifiers and unused imports.,Network,Test,DevOps,Logic,IO,i18n,Interpreter,DB,Util
440,cleanup tests and latexformatter,instead of #427 (easier to start all over as some files were already moved).,DB,Util
441,cleanups  warning removals  move and test.,some cleanups and warning removals. should get rid of six high impact coverity issues (i hope).,DB,Util,i18n,Logic,IO,DevOps,Test,Interpreter
442,enable some ignored tests of bridgemethodshitagaintest and detectingf…,…inalmethodstest  this worked locally  so let s see if this also works on the ci server.  304,Network,Interpreter,Test,Util,DB,i18n,DevOps,Logic,IO
449,tests for comparators,was the original idea  but after simon informed me about findbugs  a number of issues were sorted out. still a few more tests are added.,IO,Network,Test,Util,DevOps,Logic,Interpreter,DB,App,i18n
451,refactored timeout and after concurrent test,refactored concurrent test in order to 433. the implementation now uses  an  executor to perform async calls instead of extending  thread  and doesn t extend testbase anymore.   i also added a stopwatch which can be used for further time dependent testing. in the future i want to use this class to write more tests for after/timeout.,Network,Big Data,DevOps,App,Interpreter,DB,Util,IO,i18n,Cloud,Test,Microservices
452,revise maintable,complete check and rewrite of maintable and related classes  this will fix and implement: -  #315  -  #384 - show tooltip for header columns -  #384 - show tooltip for contents which are too long for table columns -  #443  -  #445  -  add ability to drag and drop specialfield columns - ~~ allow storing position of specialfield columns~~ postponed to another pr -  remove table column for  pdf/ps  which is obsolete (498) -  remove option  show one letter heading for icon columns  which is now obsolete -  changed default order in main table: # | all file based icons (file  url/doi  ) | all bibtex field based icons (bibtexkey  entrytype  author  title  ) | all special field icons - ~~ #490~~ postponed - ~~ think about  must be implemented  vernünftig (matthias)   entry table -> fit table horizontally ....   from the minutes~~ postponed -  final cleanup + changelog,Test,App,IO,Interpreter,Logic,Util,i18n,DB,DevOps
455,activate verificationwithtimeouttest#shouldallowtimeoutverificationin…,…order  this test work since  but was deactivated by mistake with https://github.com/mockito/mockito/pull/451,Util,IO,i18n,DevOps,DB
456,default time stamps follows iso-8601,default time stamps follows iso-8601. reason:   i am not aware of side effects at the currentdate formatter.,Big Data,Test,DevOps,Cloud,Util,App,Network,DB,i18n,Logic,IO,Microservices,Interpreter
459,use default directory when adding files to an entry,see #458. - the current implementation is hard to understand. i don t get how these three existing folder preferences are used.  - also  the method itself should be simplified and return a list,Util,i18n,DB,DevOps,Network,Interpreter,Test,IO
462,quote identifiers when formatting expressions,this is to avoid issues with identifiers that are also sql keywords,i18n,IO,Test,DB,Util,App
464,refactor code from cleanup action to separate classes,i removed all the functionality from  cleanupaction  to separate classes. the next step would be to add tests.next pr :),Util,IO,Interpreter,DevOps,DB,App,Network,Logic,Test,i18n
468,improved duplicate checker,i changed the core function of the duplicate checker from correlation to approximate string matching. this enables the test to work (which earlier failed as  bob  and  joyce  was deemed as close enough to indicate a duplicate). probably some of the constants used for comparison needs to be tuned. also  as the approximate string matching is based on edit distance (the number of edits required to turn one string into the other)  it might be that one may operate the complete comparison on the full string rather than the word by word style as currently is used.  i think this is good to go (in the sense that it probably performs better than the previous)  but please check it with a few different databases to make sure that the false positives or missing hits are to frequent.,DB,i18n,DevOps,Util,IO
470,refactored mock cache to be non-blocking.,the previous cache used a lock to unify concurrency and weak references. instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. this avoids blocking.,Util,Logic,Test,DevOps,Interpreter,i18n,Network,DB,IO
472,show author/editor and journal/publisher in the main table by default,implements #470.,Interpreter,Util,Cloud,Logic,DB,Big Data,Test,i18n,IO,Network,DevOps
474,refactor autocompleter code,main change is that the preferences are moved to a separate class  autocompletepreferences . i also added or reworked some comments.  the tests for autocompleter should be reworked. next pr,DB,Util,IO,Interpreter
475,fix that the cleanup process aborts if linked file does not exists,the cleanup process sometimes wasn t successful and reported a  null  reference. the reason was that a registered file wasn t available. this is fixed in this pr.  moreover  if an exception is thrown in actions then a more detailed error message is displayed including the stack trace.,DevOps,DB,Interpreter,Network,Test,Thread,IO,GIS,i18n,Util
476,refactored threadsafemockingprogress to a singleton,the actual implementation of [threadsafemockingprogress]( disguise that it is effectively a singleton cause the threadlocal member is static. this makes it hard to see that different instances  share the same state.  this pr - refactores  threadsafemockingprogress to provider of mockingprogress instances - uses the standard way of instantiating the initial  threadlocal value this also avoids possible race conditions,Util,GIS,Thread,App,DB,Network,IO,Test,DevOps,i18n,Interpreter
478,delete jstorimporter  edit changelog,jstor is exporting bibtex and has no own format anymore.,Util,DB,DevOps,Logic,Interpreter,IO,i18n,Test
480,add event logging for split completion,the nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  splitcompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09t22:40:23.309z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09t22:40:48.033z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  },Network,Util,Data Structure,IO,Test,DevOps,Logic,Interpreter,i18n,DB
484,error console and debugging,changed the order of the error console tabs.  add cli switch  --debug  which enables logging of debug messages (shown as  fine ).,Util,Test,DB,IO,i18n,Big Data
486,add autocomplete tests,- add mockito test framework: it felt really easy to write tests changing properties with mockito. see for example  namefieldautocompletertest   where the preference changes are just a one line thing. this however only works if the dependencies can be easily injected into the class.  - add a few tests to the autocompleter framework. fixed some nullpointexceptions which i found. - fixed the bug that short keys and names were not completed  tests:  bibtexkeyautocompletertest.completeshortkeyreturnskey  and  namefieldautocompletertest.completeshortnamereturnsname,Interpreter,Network,IO,DevOps,Util,i18n,DB
488,ieeexplore fetcher downloads the raw bibtex records from ieeexplore,summary of changes - moved away from the freesearchresult.jsp script for older browsers (notice on the ieee suggests support for this will be dropped in jan 2016)  instead use the  search  script and post method - results are returned in json format and the article numbers are obtained directly  html parsing has been removed - the article numbers are used to construct a second query for the raw bibtex records  which now captures all fields available from the ieee - the bibtex entries are still passed to the existing cleanup() routine to improve the formatting consistency - cleaned up unsued code as a result of the changes (removed html parsing code) - added a method to util for performing  post,DB,i18n,Util,Logic,Test
490,atleast to static,- unified  atleastxnumberofinvocationschecker  and    atleastxnumberofinvocationsinorderchecker  into a static utility class - unified  missinginvocationchecker  and  missinginvocationinorderchecker  in   a static utility class,Big Data,Network,DevOps,i18n,Util,IO,DB,Test
492,revert  remove deprecated method,simple git revert for an accidental removal of a deprecated api since 2.0 instead of 1.x.  482.,DB,IO,DevOps,Util,Interpreter,Network,i18n
499,401 - makes the junit runner detect unused stubs,401  this is a breaking change because junit runner will now fail the test class if there is an unused stubbing.  feedback is welcome. sorry for working on it for a long time and big number of commits.,Util,Test,IO,i18n,DB,DevOps,App,Interpreter
500,database type detection,please see  bibdatabasetypedetection.java for review.  some refactoring and a class for auto-detection of database types. ### algorithm - should we introduce a hard-coded field like encodings inside the bib file? - fast-enough? - what about false detection? ### refactoring - bibtexdatabase -> bibdatabase - bibtexentry -> bibentry  also see #495  #167,Interpreter,DevOps,Util,Logic,DB,IO
502,unused code,removes unused code. rationales are given for each removal in commit message.,GIS,i18n,Test,Thread,Interpreter,DB,Network,DevOps,Util,IO
508,msbibimportertest,the part  that is commented       java          //         nodelist rootlst = docin.getelementsbytagname( b:sources )          //          if(rootlst.getlength()==0)         //              rootlst = docin.getelementsbytagname( sources )          //          if(rootlst.getlength()==0)         //              return false          // system.out.println(docin.getdocumentelement().gettagname())       is covered with the part       java if ((docin != null) && !docin.getdocumentelement().gettagname().contains( sources )) {             return false          }      because in the commented part  you check  wether there is an element  b:sources . if not  then you check wether there is an element with sources. when you check wether there is an element which contains  sources   you have both in one. also if there stands something before or after  sources   then you go in the if part despite of what stands before or after  sources .   so we deleted the commented part.,Util,Test,DB,Interpreter,i18n,DevOps,IO
515,bibteximporter test,added tests for bibteximporter  depends on pr #514 (missing gradle test encoding  special char  ß ),i18n,Test,Interpreter,IO,DB,App,Util
516,replace testbase#assertnotcontains(string sub  string string) with as…,…sertj #doesnotcontain(charsequence sequence),Test,DB,Util,Interpreter,DevOps,i18n,App,IO
519,fixed all fields set to null,as entry.setfield() does not accept a null argument anymore  the method entry.clearfield() is used instead.,Network,IO,Interpreter,DevOps,DB,i18n,Util,Test,Big Data
523,made some timeouts in verificationafterdelaytest and verificationwith…,…timeouttest more lenient to prevent frequent build failures on travis ci,App,DB,IO,DevOps,Test,i18n,Util
525,add regression test for #508,as mentioned in the bug report for #508   adds a test which would catch this issue if it happened to regress in the future.,IO,i18n,DevOps,Test,Util,Interpreter,DB
526,add retry code back into hive client,remove other unnecessary uses of retrydriver move retrydriver to hive module,i18n,DevOps,Util,App,DB,IO,Network,Big Data,Interpreter,Test
527,fix show partitions bug,supply a default value to bindings optional,Util,Logic,Test,Interpreter,DevOps,DB,Big Data,IO,Network,i18n,Cloud
528,missing generics info on collection matchers,follow up on #510 (issue #194) following this comment   basically it tweaks the collection matchers with generic support. it should have bee in abf9851.,Test,IO,Util,DB,Interpreter,i18n
530,fixed #526,now the openoffice/libreoffice should work again on linux (and on osx).,Util,App,DB,Test,IO,i18n
531,import format reader fix,the problem is  that the stream can not be resetted without a bufferedinputstream.  however this is necessary since we check if a import file is in the right format with looking into the stream and searching for specific patterns.  result of the above mentioned issue is that i always got an error message saying  no entries found  when trying to import a file with a valid format and entries.   this fixes the issue without changing any method interfaces.,IO,Test,Network,DB,DevOps,Util,i18n,Interpreter
532,fix typo in javadocs,-  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_  also improve sentence structure of surrounding sentences.,Interpreter,Test,i18n,Util,App,IO,DB
536,changes to parserresult warnings,some restructuring of the parserresult warnings code. introduced a new class that is used in a number of other classes to do the same thing.,IO,DB,Test,DevOps,App,i18n,Util
542,add more data to sys.query and sys.task,rename heartbeat to heartbeat,Data Structure,Util,Test,Network,Interpreter,DevOps,IO,i18n,DB
549,fully register a class ancestry for genericmetadatasupport,the old implemention would take a class x and consider all of its superclasses and the interfaces implemented by x and the interfaces implemented by all of its superclasses.  the new implementation also considers the superinterfaces of the interfaces implemented by x and the superinterfaces of the interfaces implemented by its superclasses.  497,i18n,IO,Util,Test,App,DevOps,DB
550,fixed #538 changed error message in case initialization for mock injection fails.,fixed #538  if a filed is annotated with @injectmocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ mock injection failed on field  fieldname  cause the type  abstractcollection  is an abstract class._,DB,IO,App,DevOps,Test,Util,i18n
554,biomailimport format deleted.,deleted biomailimporter class since the website (biomail.org) does no longer correspond to the biomail format. for further information see: http://sourceforge.net/p/jabref/mailman/message/34696703/,IO,Util,DB,DevOps
555,junit rules report unused stubs - 384,- makes junit rules detect unused stubs - introduces mockitolistener api - see the use case in issue #384  - recreated pr #527 with squashed commits,IO,Test,DevOps,Network,Interpreter,DB,Util,i18n,Big Data
557,replace or remove code.google.com links in documentation,most links are replaced by their github equivalent. some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods i decided to remove them.  533,Util,Big Data,IO,Interpreter,Logic,DB,DevOps,Test
566,remove alternative display name since it is never set,i think  we don t need alternative display names. this will surely confuse users.,IO,Network,Util,Big Data,DevOps,Interpreter,i18n,DB,Test
567,implements #565: highlighting matches works now also for regular expr…,…essions in preview panel and entry editor,Interpreter,DB,IO,Data Structure,Network,Test,i18n,DevOps,Util
569,remove field saving options,as decided in #116 all field saving options should be removed.  this pr purges the options from the gui and cleans up related reader and formatter classes. this simplification greatly reduces the complexity of  bibentrywriter .,Test,Data Structure,Util,DB,Interpreter,DevOps,Network,IO,i18n
571,pretty print primitive and wrappers types in maps,check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_  in following case  user can t understand the difference between expected and actual.  code:      @test public void foo() {     foo m = mock(foo.class)      m.foo(new hashmap<string  object>(){{         put( hoge   4)      }})      verify(m).foo(new hashmap<string  object>(){{         put( hoge   4l)      }})  }  public static class foo {     void foo(map<string  object> map) {     } }      output:      argument(s) are different! wanted: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      if mockito outputs the  l  suffix for long values  user can understand the difference easily.  after this commit  the output will be following:      argument(s) are different! wanted: foo.foo({ hoge =4l})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      this will 570,Util,Interpreter,IO,DevOps,DB,Network
578,made some timeouts in verificationafterdelaytest and verificationwith…,…timeouttest more lenient to reduce build failures on travis ci,Interpreter,Data Structure,DevOps,IO,Test,i18n,Network,DB,Util
580,used a scrollable text area for parser warnings,now  all warnings when opening a file is shown in a scrollable text area instead of as plain warning text (with all the consequences  try opening a file with ~1000 items without keys).,Util,Interpreter,Big Data,DB,Network,IO,i18n
581,small fixes,was the original purpose at least. - code improvements - removal of unused variables and in some case propagation of constants to avoid having these as parameters,Interpreter,DB,Test,Util
585,some cleanups in maintable and related files,more pmd-motivated cleaning.,Util,DB,Interpreter
587,make verificationwithtimeouttest#shouldallowmixingonlywithtimeout mor…,…e lenient to reduce build failures on travis ci  the two recent build failures where both caused by this test:  https://travis-ci.org/mockito/mockito/jobs/154506554,App,Util,DB,IO,Test,i18n,Interpreter
594,solved #593 and cleaned up the oo-code a bit,hopefully solved #593.  try it out at   (also cleaned up the code a bit based on pmd. the actual fix is on lines 76-90 in ooutil.java.),i18n,Util,DB,Test
595,fixed #545 - acm fetcher works again,fixed #545 and some pmd cleanup.,Network,DevOps,IO,Test,DB,i18n,Logic,Interpreter,Util
597,reverted a fix that lead to new coverity warnings and more pmd cleanups,sometimes comparing objects with  ==  and  !=  is better than  equals,App,Interpreter,i18n,Util,DB,Test,DevOps,IO
600,suppressed compiler warning and unchecked collections cast,- suppressed compile time warning - refactor raw collection cast,Test,Util,DB,DevOps,IO,i18n
601,fixes and cleanup for openoffice,revert a minor error introduced in earlier fix.  further cleanup  primarily getting rid of duplicated code and some coverity warnings.,DB,IO,Test,Interpreter,Util,i18n,App
605,change entrytype to string in bibentry,this pr tries to resolve the issues discussed in #337 and #495.  right now the entry type is converted from a string representation (in the bibtex file) to an entrytype by the parser. the problem with this approach is that the parser has to know about the bibtex vs biblatex mode. the idea was to just store the string in the bibentry and only get the corresponding entrytype whenever it is really necessary.,i18n,IO,Util,App,DevOps,Test,DB
606,logic cleanup,the cleanup continues,DevOps,Util,i18n,DB,Test,IO,App
615,497 : returns_deep_stubs may try to mock final classes,497  with deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. this could cause  returns_deep_stubs  to try mocking final classes which would result in a  classcastexception .  apparently my other pr (#549) wasn t quite enough to fully fix this problem.  ---  **edited by mockito team**,IO,Interpreter,DB,Thread,DevOps,Test,Logic,Util,Data Structure,i18n
619,548 from now on verification happens always call in other thre…,should fix problems with #548 and #601,Big Data,DB,i18n,Network,IO,Interpreter,Util,DevOps,Test,Logic
623,updated the javadocs,polishing the javadocs  starting with this small pr:  issue #596 - updated @since to 2.1.0 (instead 2.0.0) - added more docs around the verification collector,DevOps,IO,DB,Network,Util,Interpreter,i18n,Test
626,ensured javadocs are correct,based on feedback from brice.,Util,Interpreter,IO,Test,DevOps,i18n,DB,Network
628,fixed javadoc documentation in the main class,checks out line item in #596,Util,App,DB,Test,i18n,IO,DevOps
636,reduce the number of expected groups,the current value of 100k means that each aggregation requires at least 400 kb of memory. for a query running ~120 splits per node  this adds up.,Util,IO,Interpreter,Test,DB,i18n,DevOps,App
638,fix eclipse compile errors,the eclipse incremental compiler can not deal with the short expressions. hint with some casts.,Interpreter,i18n,Test,IO,DB,DevOps,Util
641,refactor journal abbreviations and rewrite tests,injecting the preferences via the constructor and thus making it easy to the class via mockito.,DevOps,i18n,Util,IO,Test,Interpreter,DB
643,fix failure of some tests due to non initialized preferences,these tests were failing locally for me (but apparently not on the ci server).,IO,Thread,i18n,DB,Test,DevOps,Util,Logic,Data Structure,Interpreter
646,640 warns user to upgrade if java 8 version is to low,640 warns user to upgrade if java 8 version is to low.  also took the opportunity to log other platform details if mock class cannot be created.,UI,IO,DB,Util,i18n,Test
652,replaced getstringarray and putstringarray with getstringlist and putstringlist in preferences,also fixed an npe in the xmp metadata preference tab.,DevOps,i18n,Network,DB,IO,Test,Util
654,renamed failuredetecter to failure detector.,also renamed misspelled issussessful() to issuccessful().  fixes: #653.,DevOps,DB,App,i18n,IO,Logic,Interpreter,Test,Util
658,refactor proxy registration and preferences,moves code from  jabref  to own class and introduces new class encapsulating the proxy preferences.,UI,IO,Logic,Interpreter,DevOps,Test,Util,Network,Big Data,App,i18n,DB
673,removed duplicate test,hello again :p   i originally requested this test to be added in #525 after the underlying problem had been resolved. while browsing the code now  i discovered that it had already been added (as  this probably doesn t need to be tested twice  so i ve removed the duplicate test.,i18n,DevOps,Interpreter,DB,Network,Util,Logic,Test,App,Big Data,IO
674,disable jackson field name canonicalization (string intern cache),close jackson parsers after use,IO,Util,DB,DevOps,i18n,Test
677,make bibtex parser more robust against missing newlines,as described in #669 and #621 the parser has some problems when an entry (or preamble) follows directly the file encoding header (on the same line)  i.e.   % encoding: myencoding @article{} . actually  as the tests reveal it was not a problem with the actual parser but within the file opening logic.  i don t view this pr as a complete fix for #669 and #621 since not just the parser but also the serialization should be improved.  also fix a bug that prevented the import of bibtex entries having only a key as its content.,Test,i18n,Util,IO,DevOps,DB
683,remove url sanitizer as it is malfunctioning and unclear where needed…,also see #667.  @jabref/developers if someone knows a use case where this is needed and why we can try to reimplement it properly. but this way it really makes no sense imho.,DB,Test,IO,Util
690,simplify matching complexity of unlinked file finder,reenables functionality #410   important point: - removed one file.exists check in fileutil.java expandpath   i think one check after replacing / and \ is enough  without checking the expanded path with directory in front. - cache is filled at initial creation for bibdatabase  therefore no checks against the whole database  for each file entry - parse logic for file field should moved from the filelisttablemodel to filefield.java.  we could still improve quite a lot here but maybe its good enough :tm: for now.,DB,Util,Test
691,cleanup in aux import,cleanup and warning removal.,Test,Util,IO,DB,DevOps,GIS,Network,Interpreter,Thread,i18n
693,cleanup in logic.mods and logic.msbib,additional change: added method  hasfield  to  bibentry .,Util,DevOps,DB,Interpreter,IO
698,new api: mockingdetails.printinvocations() for debugging mock behavior,for motivation  see issue #543,DevOps,Util,DB,Test,Network,IO
699,cleanup in gui,lots of minor cleanup in gui.,Network,Big Data,IO,DB,Logic,Test,App,i18n,Util,Data Structure,DevOps,Interpreter
708,replaced string.replaceall with string.replace when no regexp is used,better to use  replace than  replaceall  as the latter compiles a regular expression.,DB,App,IO,Test,i18n,Util,DevOps
709,fix like escaping,makes it compliant to ansi,i18n,DevOps,DB,App,Test,Util,IO
715,file based bibtex mode,see #706  changes - file based setting of bibtex/biblatex mode which is stored as a metadata in the .bib file - if no metadata is found  jabref tries to detect the mode by checking if there are biblatex entry types which results in biblatex mode  and otherwise in bibtex mode (except one has set the biblatex mode setting in the global preferences  in that case it would use the biblatex mode) - ui changes completely  no restart necessary  please provide feedback.,DevOps,DB,IO,i18n,Util,Test
719,verification listeners,i had the need to be notified when ever a verification happens  this pr implements this.  to do anything useful with this notification the following data is important: - the mock that we are verifying on. - the verification mode we are using. - and what method we wish to verify.  the one place where this data is collectable is in mockawareverificationmode.  what remains is to get the listeners there so we are able to notify them.  the tests i added try to follow those of the invocation listeners  however there might be more cases that are important that i m unaware of.,Big Data,Interpreter,Test,Util,Logic,IO,i18n,DB,DevOps,Cloud,App,GIS,Network
722,osx improvements,integrated osx compatible toolbar,DevOps,Thread,IO,DB,i18n,Interpreter,Test,GIS,Util,Network
728,remove pdf preview functionality,i suggest to remove the pdf preview functionality in the preview panel  why? - the preview is not working all the time - the preview is too small to provide valuable information - opening the linked pdf via a simple click on the pdf icon is way faster and more convenient  @jabref/developers wdyt?,DB,Logic,i18n,Interpreter,Test,Util
729,more cleanup and warning removals,not really required to have the resultset in the try-with  but to get rid of eclipse warnings,DevOps,App,Util,Interpreter,Test,IO,DB,i18n
732,tests of two layout formatters,two more tests (took a while to understand authors  so incomplete but at least something).  i will merge as soon that i see the coverage and it is not to bad.,DevOps,Interpreter,i18n,DB,Logic,Util,Test,IO,App,Network
733,improved menu structure,![new menu](https://cloud.ent.com/assets/375693/12645272/3db1662a-c5c9-11e5-92f6-55b64f0515b2.png),Test,DB,Util,IO,App,i18n,Interpreter,DevOps
734,new nullable(class<t>) matcher for convenient matching of nullable arguments,after using mockito  i have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. however i have found that i miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  stream.of(<mixed values>).map(o -> mapper.map(c))   the current options are :,DB,Util,DevOps,IO
741,new operator framework,the commits are structured as follows - add new operator and testing framework - add new versions of all existing operators - convert execution engine to use new operators - add new scheduler that favors interactive queries - add blocking support to operators - rewrite the context and stats system  - convert compiler to new operators - convert benchmarks to new operators - convert storage manager to new operators - convert a few remaining tests - remove old operators  after this main body of work is reviewed  i will add additional commits to repackage and rename classes to the old style  because doing this before the review will make fixes more difficult.,Interpreter,Util,IO,Test,Network,i18n,DevOps,DB
747,cleanup,more cleanups and logging.,Util,Network,IO,DevOps,Interpreter,Test,DB,Big Data,i18n
751,parser changes for table sample,this request only has the changes made to the grammar for implementing tablesample.   used the syntax for tablesample from here:  parse tree for a sample query: https://gist.github.com/nileema/6458383,IO,Test,i18n,DB,Util,Interpreter
752,fixed #751,this should 751. should be merged in without waiting for confirmation.,DB,i18n,Util
754,improved documentation regarding unused stubbing detection,improved documentation regarding unused stubbing detection  609,DevOps,Util,Test,IO,DB,i18n
755,fix npe at saving does not reset save flag #741,741 (and a lot of other null pointer exceptions). gettype and getstandardtype now return an optional instead of possible null values.,Test,Interpreter,DB,IO,App,i18n,Util
758,made all static regex patterns private static final fields,should not be worse than the previous solution,Test,Util,IO,DB,i18n,DevOps,Interpreter,App
765,removed unused group submenu from rightclickmenu,all code is now gone (and the move to group menu item follows the same logic as the add to and remove from group).,Util,Network,IO,Interpreter,Logic,DevOps,DB,i18n
770,limit the number of queries remembered after they are finished,prune the set of remembered queries down to a configurable number  but only consider queries that haven t heartbeat within the client timeout period.,IO,Util,Test,i18n,DB,Interpreter,DevOps
775,removed private ismockitomock(..) in mockutil,small internal refactoring.,DevOps,Test,Interpreter,Network,DB,Logic,Util,IO
778,valueprinter small improvements,* added private construtor,DB,Interpreter,DevOps,i18n,Logic,Util,Test
779,removed argument from mockingprogress.stubbingcompleted(..),removed unneccessary argument from internal mockingprogress.stubbingcompleted(..),Interpreter,Logic,i18n,Util,Network,DB,DevOps,IO,Test
784,more openoffice fixes,- extracted strings - more detailed exception handling - simplified/improved code  note that there s a new file and one removed  but here it looks like it is edited and renamed,i18n,Util,IO,Interpreter,DB,DevOps
787,fixed some warnings,the most important consequences: - the entry count when synchronizing file links is correct again (and the database is marked as modified). - the correct (i.e. current) encoding is hard coded for acm  ads and inspire fetchers.,Test,i18n,Util,DevOps,DB,IO,Interpreter
790,make cpu time tracking in operatorstats configurable,added task.cpu-timer-enabled  which can be used to turn off cpu time tracking,i18n,IO,DB,Util,Interpreter,DevOps,Network,Test,Data Structure
793,more list<bibentry> instead of bibentry,instead of #762.,DB,Test,Util,DevOps,IO,Interpreter,i18n,App
795,deep stubs no longer cause unnecessary stubbing exception with junit runner,756,Test,DB,Interpreter,Util,i18n,DevOps,IO
799,better preference for default file-based mode,see #789. - description rewritten to say  default tex mode . - dropdown for bibtex & biblatex - moved to general tab - decided to keep old boolean preference to avoid preference migration for now  (  @jabref/developers wdyt?,Interpreter,Util,App,DevOps,IO,DB,i18n,Test
800,partitioned hash aggregations,this implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8),Util,DevOps,Thread,i18n,Interpreter,DB,Test,Network,IO,Logic
806,some refactoring,moved some files to better places.  long term goal is to use the huge html <-> unicode <-> latex conversion list is applicable formatters.,Test,IO,Interpreter,DevOps,Util,DB,Big Data,i18n,Network
807,new opt-in stubbing strictness implemented in junit rules,new api (for rationale  see #769  for code review history see #770):,Test,i18n,Interpreter,IO,DB,Util
808,added simple tests for html and unicode converters and added handling…,… of combining accents for unicode to latex,DB,Big Data,Util,Test,i18n,IO
809,split up querymanagerconfig,this renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. the task property controls how often the coordinator must heartbeat tasks on the workers. the query property controls how often the end user (statement client) must heartbeat the query on the coordinator.,Logic,DB,DevOps,Network,Data Structure,i18n,Util,Test,IO,Interpreter
811,enable annotation engine as plugin,currently  annotationengine  can be overrriden with the _deprecated_  mockitoconfiguration   in order to be more consistent with the new way  i propose to get the  annotationengine  from the  pluginregistry .,i18n,Test,Interpreter,DB,IO,Util
821,820 returnsargat to handle returning vararg as arrays,attempt at fixing #820,DevOps,i18n,Test,IO,Big Data,Util,DB
825,only announce coordinator if configured as one,this fixes a bug introduced in the coordinatormodule refactoring that causes every node to announce itself as a coordinator.,DB,Util,Interpreter,Logic,DevOps,IO
831,test clean up according to discussions for rememberinglisteners,according to issue @719 we wanted to clean up the tests for rememberinglisteners.,DevOps,DB,Network,Big Data,i18n,Util,Test,IO,Interpreter,Cloud,App,Logic
832,warning removals and fixed an issue with pushing citations to openoffice,removed some coverity warnings and fixed an issue in openoffice (and possibly elsewhere) where getselectedrows() did not return a copy of the bibentries (i introduced that when changing arrays to lists)  and  hence  some entries was deselected and never pushed.  another old major issue in openoffice was also solved  which relates to crossrefs and strings. not sure if it was ever triggered  but there was one fundamentally wrong access to a map.,DB,Network,App,Big Data,Cloud,Logic,IO,i18n,Interpreter,DevOps,Test,Util
834,handle binary rcfiles correctly,this also changes the unit tests to work correctly when the timezone is set to that of the hive installation.,Util,Big Data,i18n,DevOps,Test,IO,DB
846,example plugin,this connector exposes schemas defined in the  metadata-uri  catalog property.  the  metadata-uri  can reference a local file or a remote  resource.  the table data files are simple csv (no escaping supported) fetched from a location relative to the  metadata-uri .  the sample  etc/catalog/example.properties  file has uris for local file data and a sample remote dataset hosted on amazon s3.,IO,Logic,Network,DB,Util,Test,Interpreter,DevOps
863,more integrity checks,adds more integrity checks: - detect abbreviations in journal field - detect abbreviations in booktitle field - detect wrong usage of proceedings entry type - detect broken file links -  ? -   -  ? -  ?,Big Data,DevOps,DB,Interpreter,Microservices,Network,Cloud,Test,i18n,Logic,App,IO,Util
865,deleted code related to the pdf and ps fields,dropping the support for ps and pdf fields (which seems dropped already as hardcoding a pdf-field in a .bib-file doesn t even show up in the entry editor) seemed to remove quite a bit of code.,IO,DB,Network,i18n,Big Data,DevOps,Test,Util
866,more systematic hashcode and equals,changed hashcode (and equals) to be more consistent and per recommendations.,Logic,IO,Util,DB,DevOps,Interpreter,Test
879,466: rename pdf cleanup now also changes case of file name,466. -  ? -   -  ? -  ?,Interpreter,Test,DB,i18n,Util,IO
883,add --source option to cli,this lets you set the source of the query for logging purposes. tested by running the cli with --help to make sure the option showed up  and added a unit test,DB,Network,Util,Test,IO
884,fixed #883,should solve #883. -  ? -   -  ? no  tests already passed  this is a gui issue. -  ? yes.,Interpreter,DevOps,Util,i18n,Test,Network,DB,IO
885,spy annotation reports better error message if instance creation is impossible,this simple piece of code prevents the  spyannotationengine  to try create a spy instance for a some inner private class with different set of modifiers.,DB,App,IO,Interpreter,i18n,Test,Util
888,execution performance improvements,change blocks and tupleinfo to only contain a single field value move looping into aggregation implementations use classloader magic to share base classes of aggregations without creating megamorphic call sites change aggregation to support multi-channel grouping change orderby  topn  and window to support multi-channel sorting change join to support multi-channel keys pipeline schedule splits in batches instead of one at a time,IO,i18n,Util,DevOps,Network,DB,Interpreter
889,add custom cursor for rc binary format,ran the unit tests  and also ran a simple query against a table in the hivedev cluster,Util,i18n,DB,Test,DevOps,IO,Big Data
904,removed some switch warnings and restructured code,extracted methods from large switch  rewrote as switch and added default labels to switch. -   -  ?,i18n,Interpreter,Test,Util,IO,App,DB
905,made sure all importformat classes never return null  but collections…,….emptylist() instead - importformat.importentries now never return null (still not propagated to calling code) - all(?) importformat readers are handled with try-with - replaced stringbuffer with stringbuilder where possible - used interface where applicable -  ? not relevant -   -  ? not relevant -  ?,Util,IO,Big Data,i18n,DB,DevOps,Test
907,more tests for oobibstyle,testing of a few more methods in oobibstyle.,Util,IO,DB,i18n,Test,DevOps,Network
911,add a summarized print of tablescannode tupledomain to cut down on logging size,formatting:  where there are a small number of range segments:  presto> explain select ds  id  count(1) as count from table where ds >=  2013-11-15  and (type= a  or type= b ) group by ds  id   --- - output[ds  id  count]        id := id        count := count   - aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - tablescan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) and (( type  =  a ) or ( type  =  b )))  domain={ds => domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullallowed=false}  type => domain{ranges=[[a]  [b]]  nullallowed=false}}] => [id:varchar  ds:varchar]              id := hivecolumnhandle{clientid=default  name=id  ordinalposition=1  hivetype=string  hivecolumnindex=6  partitionkey=false}              ds := hivecolumnhandle{clientid=default  name=ds  ordinalposition=2  hivetype=string  hivecolumnindex=-1  partitionkey=true}              type := hivecolumnhandle{clientid=default  name=type  ordinalposition=3  hivetype=string  hivecolumnindex=-1  partitionkey=true}  (1 row)  when there are a large number of range segments:  presto> explain select ds  id  count(1) as count from table where ds >=  2012-11-15  and (type= a  or type= b ) group by ds  id  ##                                                                                                                                                                                                                                                               query plan - output[ds  id  count]        id := id        count := count   - aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - tablescan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) and (( type  =  a ) or ( type  =  b )))  domain={ds => summarized:domain{ranges=[[2013-08-04  2013-12-15]]  nullallowed=false}  type => domain{ranges=[[a]  [b]]  nullallowed=false}}] => [id:varchar  ds:varchar]              id := hivecolumnhandle{clientid=default  name=id  ordinalposition=1  hivetype=string  hivecolumnindex=1  partitionkey=false}              ds := hivecolumnhandle{clientid=default  name=ds  ordinalposition=2  hivetype=string  hivecolumnindex=-1  partitionkey=true}              type := hivecolumnhandle{clientid=default  name=type  ordinalposition=3  hivetype=string  hivecolumnindex=-1  partitionkey=true}  (1 row),Network,DevOps,IO,Interpreter,i18n,Util,DB,Test
912,added missing localization strings,found a number of strings which should have been translated.,i18n,DB,Test,Interpreter,Util,App,IO
915,add button in preference dialog to reset preferences,implements #455 and/or  -  ? -   -  ? - only ui change -  ?,Test,IO,i18n,DevOps,DB,Interpreter,Util,Network
917,removed method entryutil.getremainder() and replaced with collection.…,…removeall(),IO,Big Data,Test,Util,i18n,DB
919,fix handling of hive bucketed tables,this 918.,i18n,Test,Big Data,Interpreter,Util,Network,DB,IO,DevOps
920,added subproject for configuration-free inline mock making.,added a preconfiguration for using the inline mock maker as a convenience artifact that can be included instead of creating the plugin file. this is very helpful when creating multi-module projects where the mock maker file has to repeated many times.,App,DB,IO,DevOps,Network,Util,Test,i18n,Interpreter
929,find unlinked files  freezes when using for pdf,1. fixed #410 reason was an illegalargumentexception thrown by doi class when pasting the contents of the whole first pdf page to the constructor. 2. the doi class can only handle real dois and does not extract strings that might look like a doi from the text  therefore the whole doi scraper was removed in  3. the whole pdfimporter class is screwed and a monkeypatch. it should be reimplemented from scratch.,DB,i18n,Interpreter,Test,Util,App,DevOps,IO
930,fix 845,- better german translation of the menu items groups -> highlight groups  - add radio button functionality to the menu items groups -> highlight groups  which is mutually exclusive plus add a disable menu entry which was not explicit before - enable showing what is currently toggled in the menu as well (and not only in the toolbar),Big Data,Util,i18n,IO,DB,Test,DevOps
932,remove support for implicit cross joins,the pre-ansi join syntax makes it very easy to accidentally perform a cross join when an inner join was intended  not to mention resulting in harder to read queries  so we need a way to disable it via configuration.,Interpreter,DB,Util,App,i18n,IO,Test
944,removed  fetch  in title from database fetchers,-   -  ?  removed translation of fetcher names  because that are proper nouns. #941,Test,DB,App,i18n,DevOps,Network,IO,Util
947,fix for undoing deletion/cutting multiple entries,workaround for #796. when an undo with multiple entries is undone  each entry is undone one at a time. the problem herein lies  that when the first entry is undone  the insertion in the database triggers the creation and insertion of an namedcompund into the undomanager which kills the main undo (the one with the multiple entries)  which result in just one entry being undone.  with this workaround each entry has its own namedcompund which solves the problem but the user has to call the undoaction several times (ctrl-z for each entry). -  ? -   -  ? -  ?,DevOps,Big Data,DB,Test,i18n,Interpreter,Network,IO,Util
950,fix nullpointerexception when reading from s3,when presto reading from s3  get the following nullpointerexception:  presto:benchmark> select dateint  hour  hostname  count(*) as cnt from streaming_client_log where dateint=20130701 group by dateint  hour  hostname order by cnt   query 20140109_060239_00014_ddzak  failed  8 nodes  splits: 10 total  8 done (80.00%) cpu time: 0.0s total      0 rows/s      0b/s  50% active per node: 0.0 parallelism      0 rows/s      0b/s parallelism: 0.0 0:01 [0 rows  0b] [0 rows/s  0b/s]  query 20140109_060239_00014_ddzak failed: null java.lang.nullpointerexception     at org.apache.hadoop.fs.bufferedfsinputstream.getpos(bufferedfsinputstream.java:50)     at org.apache.hadoop.fs.fsdatainputstream.getpos(fsdatainputstream.java:41)     at org.apache.hadoop.io.sequencefile$reader.getposition(sequencefile.java:2257)     at org.apache.hadoop.mapred.sequencefilerecordreader.getprogress(sequencefilerecordreader.java:114)     at com.facebook.presto.hive.generichiverecordcursor.getcompletedbytes(generichiverecordcursor.java:194)     at com.facebook.presto.operator.recordprojectoperator.getoutput(recordprojectoperator.java:157)     at com.facebook.presto.operator.tablescanoperator.getoutput(tablescanoperator.java:201)     at com.facebook.presto.operator.driver.process(driver.java:214)     at com.facebook.presto.operator.driver.processfor(driver.java:243)     at com.facebook.presto.execution.sqltaskexecution$driversplitrunner.processfor(sqltaskexecution.java:636)     at com.facebook.presto.execution.taskexecutor$prioritizedsplitrunner.process(taskexecutor.java:436)     at com.facebook.presto.execution.taskexecutor$runner.run(taskexecutor.java:570)     at java.util.concurrent.threadpoolexecutor.runworker(threadpoolexecutor.java:1145)     at java.util.concurrent.threadpoolexecutor$worker.run(threadpoolexecutor.java:615)     at java.lang.thread.run(thread.java:744)  this root reason is  in recordprojectoperator.getoutput()  advancenextposition() will close the cursor when reaching the end of file  the following cursor.getcompletedbytes() will get nullpointerexception  since cursor is already closed.  this patch fixes the bug.,IO,i18n,DB,Util,Big Data
951,add test to metadata serialization,changes: -  @comment{groups}  is now in the right position (based on alphabetical order of metadata keys) - empty content selectors are no longer written  code changes: -  add tests for metadata serialization - move  the biggest part of metadataserialization to metadata class (probably not the final solution  just eased writing tests) - add a few methods which allow to change the metadata in a typed fashion - cleanup bibdatabasewriter tests ##  -  ? (not big enough for changelog entry) -   -  ?  -  ?,DB,Util,Test,i18n,DevOps,Network,IO
953,fix javadocs on mockitorule.java to correct an error on its usage.,fixing the javadoc to reflect the api for mockitojunitrule,i18n,Test,Util,DB,DevOps,Logic,Interpreter
956,make tabbedpane in mainframe private,triggered by #931.  - makes tabbedpane in mainframe private - set tab tooltips in consistent way (for example they should now also show up after the tab list is sorted) ##  -  ? not worth it -   -  ? well. -  ?,IO,Test,DevOps,Interpreter,i18n,App,Util,DB
965,extract native functions to os package,-  ? -   -  ? -  ?,i18n,IO,DB,Util,Test,Big Data
983,some random cleanups (and probably a bug-fix),- removed unused imports - some code style fixes - most likely fixed a potential npe in savedatabaseaction (chosenfile will never be null here  but f might be and is later dereferenced),DB,DevOps,Network,Big Data,Cloud,IO,i18n,Test,Interpreter,Util
985,981: update javadoc about the  mockito-inline  artifact,this pr 981.,Interpreter,Util,Big Data,DB,DevOps,Test,i18n,Network,IO
987,serdeutils,rewrite of hive serdeutils.getjsonstring() using jackson.,Test,i18n,DB,IO,DevOps,Big Data,Util
988,when clicking on a tab  the first field now has the focus,-  ? -   -  ? -  ?  this is referes to #623  i just had to add the activatevisible() method to the changelistener to ensure the focus is set.,DB,Util,Test,DevOps,IO
1000,improve encapsulation of native connector interfaces,- inject nativemetadata into nativeconnectorfactory  just like datastreamprovider et al. - make nativesplitmanager depend on the connector-specific nativemetadata instead of global metadata,Interpreter,i18n,Logic,DB,DevOps,Util,Network,IO
1001,predicate optimization improvements,- between ranges - simplified effective predicates from partitions,DB,Util,Test
1003,used optional for the getexternalfiletype-methods and fixed an issue …,better to avoid null assignments and null checks,Network,Util,DB,Interpreter,IO
1006,reworked and checked the constants in guiglobals,there were a few unused constants in guiglobals and a few which shouldn t be there.,Test,IO,Util,DevOps,DB
1007,fixed problem with whitespaces in file paths for tests,after i relocated my workspace  i notice some problems with white spaces in file paths. the whitespaces got encoded as %20 and failed on windows. problem was url.tofile()  paths.get(url.touri()).tofile()  is now the correct way to handle files from urls. see   -   -  ? -  ?,Test,DB,Interpreter,i18n,Util,App,IO
1008,used positionwindow for preambleeditor dialog size,now the preamble editor opens with the same size and position as last time. (plus that some unused preferences and guiglobals variables were removed.),DB,Util,Big Data,Network,i18n,Thread,Test,IO,Microservices,GIS,DevOps,Cloud,Interpreter,Logic,App
1009,added enums,used enums instead of explicit ints for the mode of basepanel  how to render cells in maintable  and mode and result for duplicateresolverdialog.,IO,Test,DB,Interpreter,DevOps,Util,i18n,Network
1014,improved exception handling in tests cases,never catch an exception removed unnecessary exceptions throw specific exceptions  never only exception ref #1012  -   -  ? -  ?,IO,Network,Util,Interpreter,Test,DevOps,DB,i18n
1016,added info about current font size when changing it using key bindings,shows the new font size in the status bar after changing it with increase/decrease table font size.,DevOps,DB,i18n,IO,Util,Test
1018,enabled continuous delivery via robust mockito-release-tools project,- continuous delivery pipeline 2.0 (#911) almost implemented!,Util,Test,DB,i18n,DevOps,Interpreter,IO,App
1029,better main table rendering,the main table doesn t always look that nice with latex commands in it. this pr makes things much better.  potential drawback is rendering time  but i am not sure how much of a problem it actually is.  ![clipboard03](https://cloud.ent.com/assets/8114497/14004300/4a1a9146-f159-11e5-93c3-75f75a676231.jpg),Microservices,Cloud,Util,DevOps,Logic,App,Test,i18n,IO,Big Data,Interpreter,DB,Network
1032,extracted field updating methods out of util,moved methods related to updating fields and timestamp from util to logic. since namedcompounds were passed  the methods were changed to return fieldchange.  i am not convinced that the current naming/position of the new classes is optimal  so input is welcome. -   -  ?,DB,App,DevOps,Util,Test,IO,i18n,Interpreter
1036,replaced integers with enum,minor cleanup.,DevOps,DB,Util,IO,i18n,Interpreter,App,Test
1037,fix scheduling bug where drivers queued in taskexecutor are not counted,create drivercontext when split is added instead of waiting until a thread is associated with the split.,DB,i18n,Test,Util,DevOps,Interpreter,IO
1040,cleanups,fixed a number of issues  including: - removed unused imports - moved a class - provided get-methods for some fields in jabrefframe,DB,Util
1042,encoding fixes,fixed some issues with the encoding for files and resources. now the user defined journal abbreviation lists are always saved and loaded using the current default encoding from the preferences. ideally  it should be possible to specify the encoding (or maybe not needed?). similarly  oo style files are loaded with the default encoding.,Test,i18n,Interpreter,Network,IO,DB,Big Data,Util,DevOps
1046,refactor authorlist,- refactor authorlist by extracting author class and move parsing logic to new authorlistparser - rename a few methods in authorlist - add a few tests taken from biber  (two of them actually fail  so maybe somebody with better understanding of the inner workings of authorlist may fix them) ##  -   -   -   (),Interpreter,IO,Util,Test,i18n,Network,DevOps,Big Data,DB
1050,restructrued cleanup formatters dialog  #1038,reworked cleanup formatter dlg: -  description updates when and item is selected. also on startup. the field is now also multilane with auto resizing and word wrap. -  after deleting a selected item in the list  the next one (previous) is selected -  changed layout to be more consistent   renamings to be more precise and moving in new package. added tests. -   -   -   ()  ![cleanupentriesdialog](https://cloud.ent.com/assets/320228/14066003/1fa8ac48-f43f-11e5-9d5c-782a027ad581.png),i18n,Test,DB,DevOps,Util,App,Big Data,Interpreter,Data Structure,IO
1054,fix sorting of entries on save,fix sorting of entries on save (this shouldn t affect the sorting of export  so is unrelated to #1051). in the end it was just a wrong boolean in the preference. -   - no  i think the issue was introduced in this version -   - kind of  there is a test for the sorting now but it passed before any fix  no test added for the boolean in the preference -   (),Network,DB,Big Data,Interpreter,Util,Logic,DevOps,Test,IO,i18n
1056,fix effectivepredicateextractor range summary bug,occurs when the rangeset has no ranges.,App,Interpreter,Util,DB,IO,i18n,Test
1061,minor cleanups and a bug fix,bugfix in freeciteimporter  some naming cleanups  primarily in globals  and some unused imports.,Util,App,Interpreter,i18n,DB,Test,IO
1065,fix handling of hive timestamp in maps/lists,also  add more unit tests for rcfile formats,Big Data,Util,DB,IO,Test,i18n
1069,rename analyzer.approximate-queries-enabled,change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling),App,Network,i18n,DevOps,Logic,Test,Util,DB,Interpreter,IO
1087,change default read timeout to 1 second,i m not sure if the values are correct  but this shows how the default config system works,DB,Interpreter,Logic,IO,DevOps,Util
1089,filelist field size now dependent on its content,672. the filelist (within the entryeditor) now automatically resizes its columns dependent on the length of its content.  ![java 2016-04-03 12-13-50-65]( -   -   -   (),DB,Util,Test,IO,Interpreter,i18n,Network,DevOps
1100,run all tests in parallel by default,annotate all tests that use @beforemethod with singlethreaded=true,DB,DevOps,i18n,Util,Big Data,IO,Test,Interpreter,Network
1105,remove potential deadlock with broken connectors,replace synchronized lock with a custom lock with timeout support  for close and updatesource stage change and then attempt to acquire lock.  if lock is acquired  process change  otherwise lock holder will process change before releasing lock.  for close  if lock can not be acquired  interrupt lock holder.,Interpreter,i18n,Test,Network,DB,Util,IO,DevOps
1109,update s3 filesystem,this is an updated version of #1044.,Util,DB,Test,i18n,DevOps,Interpreter,IO
1116,open jdk problems with look and feels,see #393 #638.  still not 100% sure if this only applies to openjdk and gtk l&f or also to oracle jdk and gtk l&f. metal l&f seems to work but looks ugly.  idea is to try metal on openjdk and wait if more bug reports pop up even for oracle. -  maybe we should close at least one of the two bug reports that seem to be related to openjdk and gtk #393 #638 or maybe even open a new one with possible solutions.  also see   **especially see**   maybe we can just ignore this and wait for it to be fixed in openjdk and add a hint to our faq and documentation?,IO,Test,Util,DevOps,Network,DB,Interpreter,i18n
1122,made it possible to delay the return of a mock or spy (#1117),a cherry-picked version of #1119 for the 2.x branch.,DB,Util
1128,improve detection on non-mockable types - byte buddy 1.6.14->1.7.0,stronger assertions on class loader origin when choosing what methods are mockable.,Test,Logic,IO,DB,Util,DevOps,i18n,Interpreter,Big Data,Network
1129,refactor failure handling,- split failureinfo into clientfailureinfo and failureinfo  so that error codes can be propagated back from workers - change errorcode to a concrete class  instead of an interface  to allow it to be json serialized,Logic,IO,DevOps,i18n,DB,Data Structure,Util,Network,Test,Interpreter
1131,record  started  counter for queries that fail to parse,in the last release we started tracking parsing failures for error categorization  but the change was missing the call to increment the started counter.  as a result  the started and completed counters get permanently out of sync and cause the number of running queries to be reported as 0.  fixes https://github.com/facebook/presto/issues/1130,DB,DevOps,Interpreter,Util,IO,i18n
1134,categorize user errors,- categorize a bunch of illegal argument exceptions as user errors - categorize division by zero as a user error,Util,DB,Interpreter,DevOps,i18n,IO,Test,App,Big Data
1136,1135: properly resolve visibility bridges.,resolve the method hierarchy by byte buddy s method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect.,Interpreter,DB,IO,i18n,Network,Util
1151,add experimental syntax flag to functionregistry,- gate approximate functions with experimental syntax flag - will also be used to gate future experimental functions  like the ml functions,Big Data,Microservices,Interpreter,Test,Util,DB,App,i18n,Network,DevOps,IO
1154,categorize partition offline exceptions,also preserve their exception type by making partitionofflineexception extend prestoexception. this fixes our internal tests,Util,DB,Test
1160,remove %s in formatter descriptions,in the developer telco  we discussed that we don t want to have  %s  in the descriptions of formatters. this pr removes the last two remaining  %s .,DB,DevOps,i18n,IO,Util
1162,fix for #1155 thenthrow(class),fix for #1155,Util,DB
1163,fix range bug in spi,this is a nasty one.,DB,i18n,DevOps,IO,Big Data,Test,Util
1167,positionwindow automatically installs resize event listener,instead of always having to copy and paste the same code  the componentadapter is now automatically installed.,Test,Big Data,IO,DevOps,Util,DB,i18n
1168,1163 by removing the strange functionality which enabled sorting…,we have some very strange logic in jabref which allows to handle years using only the two last numbers  so we can detect that 68 means 1968. this causes a lot of issues. i do not think that jabref should still support such strange logic  and just use the value which is in the year field.   hence  i removed it.   this also solves the issue of having that yearutil in the model package which duplicated a method in the stringutil class.   refs #1163,Test,Interpreter,DB,Util
1194,reuse pre computed partitiondomainsummary,partitiondomainsummary computation is an expensive operation(250ms for 12k partitions). instead of computing it every time a new instance of tablescannode is created  we can use pre computed partitiondomainsummary value.,Test,DB,Util,i18n,Interpreter
1201,added method to generate string with n spaces or n characters,used in a number of places so makes sense to have a method.,Big Data,Test,IO,DB,Util,DevOps,i18n
1202,replaced some guava usage with standard java.*,while looking for the use of guava i found these calls which can be replaced with standard java-classes.  regarding the original quest: - most uses are for checking null or empty strings or similarly return an empty string if the input string is null  it may not be worth importing the library just for these two and better to create these two trivial methods in stringutil (and use them to a larger extent) - there is also  charmatcher.whitespace  which may be slightly less trivial to replace,Test,DevOps,Util,IO,DB,App,Interpreter,i18n
1205,change output level from info to debug to remove clutter in the output,when openning a file and special fields are used  users currently **always** get the message  info net.sf.jabref.importer.opendatabaseaction - synchronized special fields based on keywords  displayed. this is confusing. see for example   currently  jabref uses  info  for errors and warnings  too:  ![grabbed_20160414-125653](  the synchronized message is a debug message  which should not be shown in the general case.  to be consistent with the current logging approach  i changed the log level for a message from  info  to  debug . this also reduces clutter in the log and on the console.   the alternative is to rethink all log levels and the preferred default output.,i18n,Util,Test,App,DB,DevOps,Interpreter,IO
1208,fix that fieldformatters run although they are disabled,as reported by @stefan-kolb  the field formatters run although they were disabled. this is fixed with this pr. -   -   -   (),DB,IO,DevOps,Util,i18n
1210,fix regression with varchar partitions in hive,fix the hive connector to return slice objects for the values of varchar partition columns instead of string objects. also fix the hive tests to use slice instead of string.,Interpreter,DB,IO,Util,DevOps,Network,Big Data,Test,i18n
1213,standardize junit imports,this pr standardizes importing assertion methods  making the code base cleaner and easier to maintian.,Network,Test,Interpreter,Util,i18n,DevOps,DB,Big Data,IO
1216,refactored cli code,moved code related to the cli to the cli package  including half of jabref.java.,i18n,IO,Test,Util,DB
1218,fix exchange client leak when queries are abandoned,the query purger in statementresource wasn t calling close() on query objects when purging them from the list of active queries. as a result  abandonded queries would result in statementresource leaking an exchange client,DevOps,Network,DB,Interpreter,Util,i18n,IO
1230,removed some issues and encapsulated some fields,- encapsulated fields and extracted methods in basepanel - some minor code cleanups,Util,Big Data,DevOps,i18n,Test,Interpreter,IO,Network,Microservices,App,DB
1234,fix memory leak in bootstrapfunctionbinder,callsites were being registered in a global bootstrapfunctionbinder but were never removed.  in this implementation  we create one bootrapfunctionbinder per dynamic classloader and load an  isolated  version of the bootstrap class used by invokedynamic calls. when the classloader is garbage-collected (i.e.  the compiled code is no longer needed)  the callsite registrations are collected  too.,i18n,DevOps,Util,Test,DB,IO,Interpreter
1238,added integrity checker to detect html encoded characters in fields,based on discussions in #1188,Interpreter,IO,Network,Util,Test,i18n,DevOps,DB
1240,removed leftovers from option to edit in table cells,found some unused code when doing translations. this is a left over from when it was possible to edit in the table directly.  i ve earlier seen some code which checks if a single cell is selected. that should also be safe to remove i assume (i was a bit confused why it was ever there  but now i think i know the reason).,Network,IO,DB,Logic,Interpreter,Util,DevOps
1245,provide locale via x-presto-language header,the expected format is as defined by ietf bcp 47 (http://tools.ietf.org/html/bcp47),i18n,DevOps,Interpreter,IO,Network,DB,Test,Util
1247,remove several container classes and inline code,remove several classes that were containers for code that is easier to be inlined. they were only referenced once  or never at all. this makes it easier to reason about the code  while also maintaining less code and classes.,IO,DB,Big Data,Util,i18n,Test
1250,replace general get/put/remove metadata calls with typed versions,also removed support of legacy user-specific file paths (serialized with a @ symbol). jabref stopped writing this format over 3 years ago (according to  -   -   -   (),i18n,Interpreter,Test,DB,App,Util,IO
1255,add config to disable proximity scheduling,add a config parameter to disable scheduling based on proximity. this will enable us to remove a variable and help us drill down into the cause of uneven split distribution.,IO,DB,DevOps,Interpreter,i18n,Test,Network,Util
1257,1254 and #1256: improved check for self-invocation.,better checks for recursive calls and guards internally used jdk types.,Interpreter,Big Data,DevOps,Cloud,Microservices,DB,Test,Logic,Util,Data Structure,IO,App,i18n,Network
1258,prevent class loading race condition,allow singleton locking in context with class loading races.,IO,Test,DB,DevOps,i18n,Util
1260,cleanup of cleanup dialog,- remove unnecessary cleanups which are replaced by field formatters (ordinals to latex and unicode to latex) - field formatters in the dropdown box in the cleanup dialog are now correctly displayed using the name instead of the key ##  -   -   -   (),DB,Test,i18n,DevOps,IO,Util
1261,cleanup now uses active preferences,previously  the cleanup used the preference state from the program start and not the most recent preferences. this is fixed with this pr. -   -   -   (),Interpreter,DB,Big Data,i18n,Logic,Test,Util,UI,App,IO,Network,DevOps
1268,1262: update doc for answers.calls_real_methods,update the documentation for the answers.calls_real_methods according to #1262 and also included a note with recommendation not to use when().thenreturn() for partial mock.,DevOps,Network,Util,Interpreter,DB,IO
1272,strictness configurable per mock / stubbing,792,DevOps,Util,Test,Big Data,IO,Network,DB,Interpreter,i18n
1273,improved integrity check dialog,- table can be sorted - editing disabled - resize properly if a different menu font size is used - extracted to its own class  also made writing of  bibtex key  consistent.,Util,Test,DB,IO,i18n
1275,add machine learning functions plugin,add functions to train and use machine learning models (classifiers and regressors) in presto. this is currently only a proof of concept  and is not ready for use in production. example usage is as follows:      sql select evaluate_classifier_predictions(label  classify(features  model)) from (     select learn_classifier(label  features) as model     from my_training_data  ) cross join my_validation_data,DB,Util,Network,IO,DevOps,i18n,ML,Test
1279,more tests for doi cleanup and a small fix,tests when doi in url-field.  fix so that the fieldchange new value is null instead of    after removing field contents.,Util,Network,Interpreter,Test,IO,DB,i18n,DevOps
1280,update strict_stubs documentation for verifynomoreinteractions,1086,Util,Test,DB,DevOps
1281,replace bibtexentryassert by overwriting bibentry.equals method,as proposed in #625 a proper bibentry.equals is provided in this pr and used for the tests.   this as a few advantages: - detect differences which are not visible in the canonical string representation (so far this hit empty fields and different line breaks) - get more meaningful test-failure messages for lists (instead of  expected 2 got 3  the added entry is displayed) - assert.assertequals just works and no custom written assertequals method has to be used  i clicked around a bit  but couldn t find any unexpected side effects due to the overwritten equals method.   if this pr is accepted  then i would inline the bibtexentryassert.assertequals methods. -   -   -   (),IO,DevOps,Interpreter,Test,DB,Util
1282,1271: authors with compound first names are parsed properly,-   -   -   (),i18n,Util,Big Data,IO,DB
1296,improve bibtexentryassert,this is a follow up of  #1281 with removing obsolete bibtexentry.assertequals methods,Test,DB,Util
1297,minor bibentry tweaks,- remove obsolete settings of  changed  variable - remove empty line - use formatting rules for additional brackets in conditions,Test,i18n,Util,Interpreter,IO,Microservices,DB,App,Big Data,DevOps
1306,implement varbinary type,adds a varbinary type and basic operators/functions,i18n,Interpreter,DB,Util,Big Data,Test,IO
1309,minor updates to bibentry,- <s>rename citekey to bibtexkey to be consistent with wording of jabref users</s> - reorder methods in bibentry to follow id  cite key  type  everything else - add some javadoc - remove obsolete setting of  changed=true,DevOps,i18n,DB,Interpreter,Test,IO,Util,Network
1310,1295 npe when sorting tabs,- selected tab might be null when sorting tabs - the logic is really strange in general  so this fixes the problem but we need to rework the actions enabling in general imho.,Util,DB,IO,DevOps,Interpreter,Test
1316,hidden columns,allow connectors to expose columns that are hidden.  a hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  the only way to access a hidden column is explicitly by name.  additionally  i have added a hidden column   row_number   to the tpch connector for testing.,Util,i18n,Test,IO,DB
1317,take srceenshots in gui tests,this pr adds the possibility to take srceenshots in gui tests. the idea is that srceenshots for the website can easily be updated for a new version by just running the gui tests.  the images are stored in  builds/srceenshots/ . -   -   -   (),i18n,Test,App,IO,Interpreter,DB,Util
1319,1314 : include all the invocation in mock verification error message,have changes the verify error message to include all the invocation instead of including just one undesired invocation.,IO,Interpreter,Network,Security,i18n,DB,Logic,Test,Big Data,App,Util,DevOps
1320,avoid bytebuddy import issue to enable repackaging without bytebuddy,this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.,DB,Util,IO,i18n,Test
1321,fix show partitions and dual catalog with include-coordinator=false,mark dual and information schema as system datasources. also add more unit tests for disabling coordinator work scheduling,Interpreter,Logic,App,IO,Test,i18n,DevOps,DB,Util
1324,improved stubbing internals and test coverage,some improvements in exception-stubbing code:,DB,DevOps,IO,i18n,Test,Util,ML
1326,deprecate the datasources configuration property,this property  if not set  is now configured automatically at startup based on the list of installed catalogs.  this will be completely removed later.,Logic,DB,Util,Test,DevOps,Interpreter,Network,IO,i18n
1327,1326 : reduce the allocation rate for the typical use of locat…,…ionimpl,Logic,Util,Interpreter,DevOps,IO,DB
1328,rewrite explain to a values query,this helps avoid bytecode generation failures when plan string is too large due to max constant pool size being exceeded.,IO,i18n,Util,Cloud,DB
1329,cleanups improvements,- fix move files cleanup (link between gui and logic was missing) - add  all  to field names combobox for field formatters cleanups  - make latextounicode converter available as cleanup - combine casechangers and bibtexfieldformatters to formatters class ##  -   -   -   (),DB,Logic,Network,Interpreter,i18n,IO,DevOps,Test,Util
1333,fix failing unit tests in java 8,the user.timezone property for the surefire plugin must match the setting via argline. the pom was inheriting the property from airbase set to utc  but argline was set to asia/katmandu.  as far as i can tell  the surefire plugin executes the following steps: - create a vm using the argline arguments - call setproperty for each systempropertyvariable - run the tests  unlike java 7  calling system.setproperty for user.timezone in java 8 after the vm is initialized has no effect. see d2fee8d93952054883bf94a65576cead632314cf for additional details,Test,IO,i18n,App,Util,DB,DevOps
1335,improve symmetric diff,changes are only highlighted. see the doi field in the following screenshot. previously the change  was written as  msp~~msp~~ . ![untitled]( also fixed some smaller bugs in the symmetric diff (like accidentantly removed whitespace). -   -   -   (),Test,IO,Util,Interpreter,DB
1336,refactor open and save dialogs,complete refactoring of the ugly and propably outdated filedialogs code newfiledialogs will be renamed when the work is done atm i want to keep it parallel.  todo: -  refactor getmultplefiles  -  provide methods for other open and save dialogs  -  replace openfilefilter with filenameextensionfilter   -  refactor browseaction to use new the methods -  test #1324  again,i18n,DevOps,Interpreter,IO,App,DB,Util,Test
