1,new sorting/export preferences,this will add a new  file sorting  tab to the preferences that allows to exactly specify the sort and export order of entries  rather than the rather limited set of choices that were available to date.,Util,IO
5,mock serialization/deserialization across classloader/jvm,this pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  at the moment it s enabled automatically when using  withsettings().serializable() .  it still require to have mockito on the classpath of the jvm classloader where it is deserialized.,Util,IO
106,null support,add isnull(field) to tuplereadable null is stored in a bit vector at the head of the tuple aggregates (except) count skip null values,IO,Util
108,extract model package with core data classes,this pull request extracts the most central data classes from the root package and puts them into a separate model package. it was possible to remove all gui dependencies from these classes.  additionally  all classes in the model package are refactored and adjusted to java 8 syntax.,i18n,Util,IO
113,improved exception handling of additionalanswers#delegatesto,when using the additionalanswers#delegatesto method  exceptions thrown by the delegate are wrapped in invocationtargetexception due to invocation via method. instead  the original exception from the delegate should be propagated to the caller.,Util,IO
120,fixing javadocs,- added correct links to external images - cleaned up some of the text - improved some function memoization that was missed,Interpreter,Util,IO
129,code cleanup,cleaned up some warnings highlighted by intellij idea,Util,i18n,IO
137,unify and simplify gui actions,- using lambdas for the simpler actions - some code cleanup - extract string commands as string constants to actions.java and use the constants in jabrefframe  basepanel and rightclickmenu - use the constants already defined in keybinds to get keystrokes for the actions (in jabrefframe  basepanel  entryeditor and rightclickmenu) - 8e3ad9d: remove quickfix for [sf.net bug #1277]( and implement feature properly: instead of deactivating  show/hide toolbar  when no database is open  the action has been move to jabrefframe and works now even if no database is open.  see also #136,Util,IO
147,remove option to set custom icon theme,the setting of a custom icon theme is not available in the gui. because of this  i removed it.   what is changed: - no support for custom icon themes anymore - a smaller guiglobals class - more explicit referencing of icons - less setup logic that is required to be called explicitly - when no icon is available  the default one (red.png at the moment) will be used. this allows to detect icon errors -> see below - less code  uncovered issues through this change: - the action openfolder is used in the icon bar  but as it had no icon  it was never displayed to the user. this is now marked explicitly in red  allowing us developers to fix this.  i am open for feedback.,IO,Util
157,implemented single and singleordefault,for issue #77.,Util,IO
159,implemented lastordefault operator,for issue #58,Util,IO
160,manual merge of mairbek/single pull #157,merging  which had conflicts and needed a manual merge.,IO,Util
165,timestamp is not displayed by defaut,as discussed in #164 the timestamp column shouldn t be displayed by default.,Util,IO
176,make propertyandsetterinjection field sorting consistent,#155 is caused by calling  collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  for example  with fields of type  [iterable  integer  number]   it gives  iterable == integer  and  iterable == number   but also an inconsistent  integer < number .  i m not sure it s possible to sort consistently with a stateless  comparator   so this change switches to a  sortsupertypeslast  method that first sorts by name and then shuffles any subclasses to after their superclasses. it s slower  but should be deterministic. the existing tests are preserved by leaving behind a dummy  comparator  that uses the new sort method. new tests make sure that the sorted ordering doesn t depend on the original order.  155.,IO
178,auto detect user language #177,jabref now uses the system locale as default with this pr.  i simplified some methods in the process and implemented a fallback to  en  when there is no bundle for the default locale.  any suggestions?,IO,Util
182,bookkeeping,rewrite bookkeeping objects to be correct and thread safe added stage abstraction add more stats and cleanup stats collection record exceptions in info objects and propagate to client add multiline progress to console,Util,IO
184,convert  last  from non-blocking to blocking to match rx.net,merging pull request  which needed manual merging.  did some other cleanup while in there and added a missing generic  object  override.  thank you @mairbek for doing this work.,IO,Util
187,fix linebreaking,evaluating the usage and problems of #114. what is fieldcontentparser really doing? what is jabref style formatting?,IO,Util
189,handful of improvements,some improvements made while reviewing code. - add error handling to videoexample.groovy so it s a better representation of how onerror is used - handle errors from func1 failures when subscribe happens - handle null subscriptions on  trusted  functions  not just untrusted,IO,Util
190,update dematerialize so can chain correctly,just noticed this when i actually had to chain it.      java observable<file> saveresult = .       current:      java observable<notification<file>> a = saveresult.materialize().dematerialize()       expected:      java observable<file> a = saveresult.materialize().dematerialize()       here is what is happening      java observable<file> x = saveresult  observable<notification<file>> y = x.materialize()  observable<notification<file>> currentresult = y.dematerialize()  observable<file> expectedresult = observable.dematerialize(y)       workaround is to use static method to get the expected result.  with this change you can chain correctly. added unit test.      java observable<integer> obs = observable.just(1)  observable<integer> chained = obs.materialize().dematerialize()       this will be a breaking change. but i think this is the expected way.,IO,Util
205,replaced defaultformbuilder with formbuilder,replaced the deprecated defaultformbuilder with formbuilder in about ten instances.  as i was working with the external programs code  the strings there were unified to ease the translation work a bit.,IO,Util
221,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions,follow-up to #212,IO,Util
222,203 : introduce bdd inorder verification,follow-up to #203.,Util,IO
225,replaced defaultformbuilder with formbuilder,another batch of replacing the deprecated defaultformbuilder with formbuilder: autosetexternalfileforentries  basepanel  colorsetuppanel  dbconnectdialog  fromauxdialog  managekeywordsaction  masssetfieldaction  and synchronizefilefield.  clean up in util.java.,IO,Util
229,removes non-compact rank symbols in favor of compact rank,why? - because it is ugly :taxi:  - keep consistent icon width - removes 140 lines of code  five icons  one preference check box,IO,Util
232,architecture,adds a the architecturetests class that ensures that specific packages stay independent from other packages.  why? - ensure that the architecture of jabref stays healthy.,IO,Util
235,clean ups,purpose was to replace more defaultformbuilders  but ended up cleaning up minor issues and removed quite a bit of disabled code from ieeexplorefetcher (bibtex fetching and multi-page search results)  which has not been working for years  and added support for a few more publication types that ieee xplore has added.,Util,IO
236,simplify key bindings,currently  there is a key binding for  push to application  but there can be key bindings for each specific application  e.g.  lyx  vim  etc.  to simplify  there should only be a key binding for the currently selected application  hence  only the  push to application  key binding.,IO,Util
240,fixes coverage reports,test coverage reports have been broken with gradle without satisfying explanation  for quite some time. this pull request hopes to fix things,IO,Util
241,set default encoding to utf-8,the utf-8 support of latex  [biber]( and [latex editors]( is really mature. to have interoperable  .bib  files  jabref should set the default encoding (for new users) to  utf-8,Util,IO,i18n
244,pre 0.8.0 release changes,some cleanup before releasing.,Util,IO
247,add flatmap alias to mapmany,this is to match with what java 8 is adding to stream so we support the duality of iterable/collection to observable.  http://download.java.net/lambda/b86/docs/api/java/util/stream/stream.html#flatmap(java.util.function.function),IO,Util
248,removes button to merge entries and keep the old ones.,- renames merge button into  merge entries . - removes button to merge entries and keep the old ones. the old ones are now always deleted.,Util,IO
249,timestamp operation,straightforward implementation of issue #93  based on  operationmap  (without the scheduler version  as  map  doesn t take a scheduler yet either).,IO,Util
250,initial implementation of asyncsubject,i ve done some work on asyncsubject<t>  including unit tests and i m looking for feedback.   i don t expect to get this pull request immediately accepted. but i hope to find out if this is the correct workflow for this repository  and if the code is up to your standards  before i start pouring in more hours into issue #17. if you guys are ok with the asyncsubject<t> implementation i ll start working on the others.  looking forward to some feedback!,IO,Util
252,251] migrate fest assert code to assertj,251,IO,Util
256,created the initial implementation of behaviorsubject,i ve been trying to implement the behaviorsubject. functionally it works as it should  but i m not entirely happy with the static  createwithdefaultvalue(t)  method. i can t create a static method  create(t)  because subject extends observable  which has a static  create(object)  method. so to resolve that i had to give the static method in behaviorsubject a different name.  additionally i m using an  atomicreference<t>  in this static method to keep track of the last published value. i tried coming up with different solutions to push the last published value to the observer when it s subscribing  but this seems to be the most clean solution.  if there s any feedback on either issue  please let me know.,Util,IO
263,publish  replay and cache operators,(redo of  after merging)  added basic publish ( and replay ( operators to observable. i have not done any of the overloads (particularly  replay  which has 10+ in .net.  i also added a new  cache  operator as discussed by @johngmyers and i at   playing with  replay  and  connectableobservable  it does not cater well to the typical use case of needing to just de-dupe calls (cache the responses) so this  cache  operator can be thought of as an automatic version of  replay . it comes with the same risk as  tolist  if used with infinite or very large sequences as you can not unsubscribe from it.,IO,Util
264,remove unused menus for import/export,found some dead code in jabrefframe which has been used to generate submenus for custom imports/exports.   would be glad if someone checks whether this is okay.,IO,Util
280,removes option to disable renaming in filechooser dialogs.,why? - i think this is annoying as one would expect this to work.   i can also live with the option that this is always active  but giving the user the option to choose is not good in my opinion.,Util,IO
281,operation: buffer,the buffer operation is an operation which allows you to buffer incoming events into one or more buffers. depending on their purpose  these buffers can be emitted to an  observer  when needed. in essence this means that events are collected and propagated to the  observer  in batches. the [original issue](  which this pull request addresses  mentions a total of 10 variations on this operator. this pull request contains code which supports all of them.  ![buffer](  the 10 variations which exist in rx .net  can be subdivided into two categories: single and multi buffers. with single buffers  only one buffer at any time is actively collecting incoming events  whereas with multi buffers  multiple buffers are actively collecting incoming events. in the first case the  observer  will receive every original event only once in one buffer  whereas in the latter case  the  observer  will receive every original event zero or more times. ### single buffers ##### buffer(bufferclosingselector)  the bufferclosingselector parameter is a  func0<observable<bufferclosing>> . it uses to  func0  object to construct an  observable  which produces a  bufferclosing  object. once this object has been produced by the  observable  the currently active buffer will be closed and emitted to the  observer . at the same time a new buffer will be created which will start recording incoming events.  ##### buffer(count)  this operator closes and emits the current buffer after counting a certain amount of received events. at the same time it will create a new buffer which will start recording incoming events. one example would be  buffer(2)   which with the following input:  [0  1  2  3  4  5]  will output the following buffers:  [0  1]  [2  3]  [4  5] . ##### buffer(timespan)  this operator closes and emits the current buffer after a certain amount of time has elapsed. at the same time it will create a new buffer which will start recording incoming events. ##### buffer(timespan  scheduler)  same as previous operator  but now with a custom scheduler. ##### buffer(timespan  count)  this operator closes and emits the current buffer after counting a certain amount of received events or after a certain amount of time has elapsed. at the same time it will create a new buffer which will start recording incoming events. ##### buffer(timespan  count  scheduler)  same as previous operator  but now with a custom scheduler. ### multiple buffers ##### buffer(count  skip)  this operator will create a new buffer after it has received  skip  amount of events. each buffer will be closed once it has reached a capacity of  [count . one example would be  buffer(3  1)   which with the following input:  0  1  2  3  4  5]   will output the following buffers:  [0  1  2]  [1  2  3]  [2  3  4]  [3  4  5] . ##### buffer(bufferopenings  bufferclosingselector)  this operator takes two parameters: an  observable<bufferopening>  and a  func1<bufferopening  observable<bufferclosing>> . the first parameter determines when buffers are created. the second parameter determines when the buffers are closed. every time a  bufferopening  object is received from the  observable  a new buffer is created. the received  bufferopening  object is fed into the second parameter which yields an  observable<bufferclosing>  object. when this  observable  produces a  bufferclosing  object  the associated buffer is closed and emitted. ##### buffer(timespan  timeshift)  this operator is very similar to  buffer(count  skip)   but in stead of counting events  it s based on time. the  timeshift  period defines how often a new buffer will be created. the  timespan  period defines the period between buffer construction and buffer emission. ##### buffer(timespan  timeshift  scheduler)  same as previous operator  but now with a custom scheduler.  as always  **feedback is welcome!**,Util,IO
285,make presto build in eclipse,exclude the dependency:copy goal because eclipse can not handle it.,IO,Util
287,doaj search,search for directory of open access journals. quite functional  but the remaining things should (probably) be done -  ~~help page~~ -  decide on where the bibjsonconverter class should be positioned (input?) -  more fields? ~~issn?~~ -  ~~better/more error checking~~ -  ~~handle search results with more than 100 entries properly~~ -  ~~fill empty methods in doajfetcher~~ -  ~~update status bar~~ -  add test for bibjsonconverter -  ~~enable stopping search~~  implements what is discussed in #208,Util,IO
288,add optional answer to support mocked builders,when googling the mocking of builders  a lot of people said it was not possible with mockito to support them in a clean way.  returns_deeps_stubs  does allow cascading  but can become quite fast very cumbersome. the added  returns_self  will try to return itself by looking at the method  returntype  and compare this with the class of the mock.,IO,Util
290,issue 103,adding the zip operator that works on collection of observables and a funcn.  https://github.com/netflix/rxjava/issues/103,Util,IO
302,replaced some of the getkey arguments with constants from keybinds,replaced some of the getkey arguments with constants from keybinds  change: the preamble editor dialog doesn t have its own key entry for closing it.,Util,IO
303,replaces the final(?) keybinds.string and some actions.string,some more cleanups.  in generalfetcher  the key binding for  fetch medline  is defined  which seems a bit non-intuitive. not sure how to proceed here.,Util,IO
308,removes option to toggle native file dialog on mac by making jabref a…,…lways use native file dialogs on mac  as discussed in the dev meeting. but the option is only for mac users. to make this available for all other operating system  more has to be investigated. but this is not necessary for now.,IO,Util
311,openoffice.org/libreoffice improvements,changed default file names suitable for oo.o 4 and lo 5 and added support for having both openoffice.org and libreoffice installed (sort of),IO,Util,i18n,Interpreter
331,make model independent,net.sf.jabref.model has no dependencies anymore to whatsoever in jabref. this would allow to extract these classes in a separate library. or to put them under heavy testing as this is the core of jabref.,IO,i18n,Util
343,replaced deprecated glazedlists-api with current,i replaced the deprecated calls to the glazedlists-api with the current versions. the major difference is that the new ones are not thread-safe and as such in most placed i ve used the suggested factory method to obtained a wrapped list/model.  this seems to work  but may require a bit more testing/thinking. especially to figure out if the wrapping may not be needed in all places and if there actually should be wrapping where there currently isn t.  a better option would be to explicitly lock and unlock the tables  but that require much more work.,IO,i18n,Util
345,update timing stats incrementally,they were only being updated at the end of processing a split. bytes and rows are updated incrementally so we need timings to be updated at the same rate to get consistent row and data rate reports.,Util,IO
349,issue #345 : removes previously verified invocations when capturing argument is combined with after and atmost verifiers,solves #345 by removing already verified invocations before redundant capture of their arguments in atmost class.,IO,Util
351,show folder info on tab if file names are identical,- tab shows the minimal unique folder name substring if multiple database files share the same name,Util,Test,IO
354,medline plain importer test,fixed indexoutofbounds for medlineplainimporter when testfile has lines with too few characters. removed unreachable code. created 100% testcoverage for medlineplainimporter.,Util,IO
356,test for inspecimporter,completed code coverage and discovered a bug in bibtexentrytype (bibtetentrytype.gettype() all_types.get() returns null),Util,IO
357,implemented  first  and  firstordefault  operations,this pr builds upon the  skipwhile   pr (#355) which makes implementing the two  first  variants extremely easy.  i changed  firstordefault  slightly from what rx.net does by explicitly requiring a default value as parameter of the function call. i don t know what default value i should return otherwise  except  null  (and imho this would be pretty useless).  this pr addresses issue #44.,IO,Util
362,merge  first  operator,merge pull request  with  first  and  firstordefault  operators.,Util,IO
363,hackathon project - csv output for the console,- add command line command execution to the console - add csv / tsv output format to the console  this implements  --execute  sql command  and sends the output to stdout. default format is  csv . available formats are  csv - comma separated tsv - tab separated csv_header - comma separated with an additional row that has the column names tsv_header - tab separated with an additional row that has the column names,Util,IO,Test
369,convert to netty  client,this depends on https://github.com/airlift/airlift/pull/39,IO,Util
370,add compatibility check for utf8,this pr attempts to 367  we have a bit of a problem.  utf8  came from these lines      java         try (inputstreamreader reader = openfile(filetoopen  suppliedencoding  fallbackencoding)) {             bibtexparser bp = new bibtexparser(reader)               parserresult pr = bp.parse()              pr.setencoding(reader.getencoding())       it is set in [this method call]( that s the java api. the  inputstreamreader  says that the proper name of the encoding is  utf8 .   my solution is an ugly compatibility hack in which we just insert the  -  manually. ugly  but works what do you think?,IO,Util
371,add cron based import into presto.,this is driven by a configurable background service that accepts import requests through a rest endpoint.,IO,Util
373,extracted logic out of filehistory,separated filehistory into filehistorymenu which contains the menu functions and filehistory which contains the logic for the file history.,Util,IO
375,integrated key word handling in bibtexentry,moved the key word handling to bibtexentry.  added new methods addkeyword and addkeywords to simply add one or more keywords. will be useful when merging key words later on.,Util,IO
377,removed some random unused stuff,removed unused variables  methods  and classes that i happened to stumble upon.,IO,Util
378,integrate gvk plugin,this integrates the [gvk plugin]( into jabref.  location of the original source code at http://jabref.tempelb.de/,Util,Test,IO
381,change default preferences: remote server is started,i think  the new default makes sense as jabref sometimes opens twice which is a bit annoying for me.  before resetting the preference every now and then  i had the remote server activated for a few months and it worked fine.,IO,Util
398,merge  any  pull request,merges pull   i changed  any  to  isempty  and  exists  as i agree with @samuelgruetter comment at  these names feel more idiomatic to java languages.,IO,i18n,Util
407,implemented refcount operator,please note that i placed the unit tests under the test root rather than inline with the implementation as has been done for other operators.  this is due to a bug in idea that prohibits running unit tests in folders designated as source rather than test.  i can see that a bunch of other operators follow this convention so hopefully that s okay.,Util,IO
409,implemented  synchronize  with  lock,hi   i implemented #84 to support that sending a lock to the  synchronize  operator.  i also found that there was a issue that  testmultithreadedwithnpe  and  testmultithreadedwithnpeinmiddle  might fail in some special situation. when  onerror  is invoked before any  onnext   the last statement  assertequals(1  busyobserver.maxconcurrentthreads.get())   in these methods will fail. i also fixed this issue in the pull request.,Util,IO
415,implemented the  empty  operator with scheduler,hi   i implemented the  empty  operator with scheduler #42. please take a look. thanks.,Util,IO
416,implemented the  throw  operator with scheduler,hi   i implemented the  throw  operator #89 with scheduler. i found that rxjava had an  error  method. so i just implemented the scheduler overload.,Util,IO
424,inorder timeouts,*fixes issue    *updated code provided by  in pr #20  closes #20,Util,IO
425,manual merge of pull request #407,added a unit test to #407 while testing it.,Test,IO,Util,i18n
434,very tiny typo.,missing word in error message.,Util,IO
447,caching the result of  isinternalimplementation,currently  reflective getpackage() call happens on every subscribe() invocation.  this pr sets up a concurrent hashmap to cache the result of this call per-class.,IO,Util
450,implemented the  timeinterval  operator,hi  this pr implemented the  timeinterval  operator #90. please take a look. thanks.,IO,Util
452,revise maintable,complete check and rewrite of maintable and related classes  this will fix and implement: -  #315  -  #384 - show tooltip for header columns -  #384 - show tooltip for contents which are too long for table columns -  #443  -  #445  -  add ability to drag and drop specialfield columns - ~~ allow storing position of specialfield columns~~ postponed to another pr -  remove table column for  pdf/ps  which is obsolete (498) -  remove option  show one letter heading for icon columns  which is now obsolete -  changed default order in main table: # | all file based icons (file  url/doi  ) | all bibtex field based icons (bibtexkey  entrytype  author  title  ) | all special field icons - ~~ #490~~ postponed - ~~ think about  must be implemented  vernünftig (matthias)   entry table -> fit table horizontally ....   from the minutes~~ postponed -  final cleanup + changelog,IO,Util
463,added the rest overloads of timeout operator,hi  this pr implemented the rest overloads of  timeout  operator #91. please take a look. thanks.,Test,IO,Util
472,show author/editor and journal/publisher in the main table by default,implements #470.,Util,IO
474,refactor autocompleter code,main change is that the preferences are moved to a separate class  autocompletepreferences . i also added or reworked some comments.  the tests for autocompleter should be reworked. next pr,Util,IO
476,refactored threadsafemockingprogress to a singleton,the actual implementation of [threadsafemockingprogress]( disguise that it is effectively a singleton cause the threadlocal member is static. this makes it hard to see that different instances  share the same state.  this pr - refactores  threadsafemockingprogress to provider of mockingprogress instances - uses the standard way of instantiating the initial  threadlocal value this also avoids possible race conditions,Util,Test,IO
477,compositesubscription bugfixes,- remove now also unsubscribes the removed subscription - added clear method,Test,IO
478,delete jstorimporter  edit changelog,jstor is exporting bibtex and has no own format anymore.,Util,IO
480,add event logging for split completion,the nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  splitcompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09t22:40:23.309z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09t22:40:48.033z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  },IO,Util
486,add autocomplete tests,- add mockito test framework: it felt really easy to write tests changing properties with mockito. see for example  namefieldautocompletertest   where the preference changes are just a one line thing. this however only works if the dependencies can be easily injected into the class.  - add a few tests to the autocompleter framework. fixed some nullpointexceptions which i found. - fixed the bug that short keys and names were not completed  tests:  bibtexkeyautocompletertest.completeshortkeyreturnskey  and  namefieldautocompletertest.completeshortnamereturnsname,Test,Util,IO
492,revert  remove deprecated method,simple git revert for an accidental removal of a deprecated api since 2.0 instead of 1.x.  482.,IO,Util
496,renames matchers to argumentmatchers to avoid name clash with hamcrest matchers class,renames  matchers  to  argumentmatchers  to avoid name clash with hamcrest  org.hamcrest.matchers  class.  this plagued usage of mockito and hamcrest together since the introduction of matchers. the work in mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the hamcrest matcher factory  mockitohamcrest . yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both api.  this change helps in that regard  as it renames the import class. not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (that is why i didn t updated tests yest  they could be upgraded in a late pr  a good timing would probably be when  matchers  is removed)   matchers  class can be removed in the next version of mockito  likely 3.0.,Util,IO
499,401 - makes the junit runner detect unused stubs,401  this is a breaking change because junit runner will now fail the test class if there is an unused stubbing.  feedback is welcome. sorry for working on it for a long time and big number of commits.,IO,Util
502,unused code,removes unused code. rationales are given for each removal in commit message.,IO,Util
508,msbibimportertest,the part  that is commented       java          //         nodelist rootlst = docin.getelementsbytagname( b:sources )          //          if(rootlst.getlength()==0)         //              rootlst = docin.getelementsbytagname( sources )          //          if(rootlst.getlength()==0)         //              return false          // system.out.println(docin.getdocumentelement().gettagname())       is covered with the part       java if ((docin != null) && !docin.getdocumentelement().gettagname().contains( sources )) {             return false          }      because in the commented part  you check  wether there is an element  b:sources . if not  then you check wether there is an element with sources. when you check wether there is an element which contains  sources   you have both in one. also if there stands something before or after  sources   then you go in the if part despite of what stands before or after  sources .   so we deleted the commented part.,Util,IO
525,add regression test for #508,as mentioned in the bug report for #508   adds a test which would catch this issue if it happened to regress in the future.,IO,Util,Test
526,add retry code back into hive client,remove other unnecessary uses of retrydriver move retrydriver to hive module,IO,Util
527,fix show partitions bug,supply a default value to bindings optional,IO,Util
531,import format reader fix,the problem is  that the stream can not be resetted without a bufferedinputstream.  however this is necessary since we check if a import file is in the right format with looking into the stream and searching for specific patterns.  result of the above mentioned issue is that i always got an error message saying  no entries found  when trying to import a file with a valid format and entries.   this fixes the issue without changing any method interfaces.,Util,IO
555,junit rules report unused stubs - 384,- makes junit rules detect unused stubs - introduces mockitolistener api - see the use case in issue #384  - recreated pr #527 with squashed commits,Util,IO
560,write all field keys in lower case,write all field keys in lower case. no more camel casing of field names. e.g.   title  is written instead of  title    howpublished  instead of  howpublished   and  doi  instead of  doi . the configuration option  use camel case for field names (e.g.   howpublished  instead of  howpublished )  is gone.  refs #116,IO,Util
567,implements #565: highlighting matches works now also for regular expr…,…essions in preview panel and entry editor,IO,Util
568,fixed #564: cite command changes are immediately reflected in the pus…,…h-to-application actions  and not only after restart,Test,IO,Util
569,remove field saving options,as decided in #116 all field saving options should be removed.  this pr purges the options from the gui and cleans up related reader and formatter classes. this simplification greatly reduces the complexity of  bibentrywriter .,IO,Util
571,pretty print primitive and wrappers types in maps,check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_  in following case  user can t understand the difference between expected and actual.  code:      @test public void foo() {     foo m = mock(foo.class)      m.foo(new hashmap<string  object>(){{         put( hoge   4)      }})      verify(m).foo(new hashmap<string  object>(){{         put( hoge   4l)      }})  }  public static class foo {     void foo(map<string  object> map) {     } }      output:      argument(s) are different! wanted: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      if mockito outputs the  l  suffix for long values  user can understand the difference easily.  after this commit  the output will be following:      argument(s) are different! wanted: foo.foo({ hoge =4l})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      this will 570,Util,IO
575,fix sf bug 482 partly: escaped brackets are now properly parsed,field values as  escaped \{ bracket  are now parsed properly by the bibtexparser. however  there is still a warning about non-matching brackets if the same string is entered directly in the review panel.,Util,IO
587,make verificationwithtimeouttest#shouldallowmixingonlywithtimeout mor…,…e lenient to reduce build failures on travis ci  the two recent build failures where both caused by this test:  https://travis-ci.org/mockito/mockito/jobs/154506554,Util,IO
594,solved #593 and cleaned up the oo-code a bit,hopefully solved #593.  try it out at   (also cleaned up the code a bit based on pmd. the actual fix is on lines 76-90 in ooutil.java.),IO,Util
597,reverted a fix that lead to new coverity warnings and more pmd cleanups,sometimes comparing objects with  ==  and  !=  is better than  equals,Util,IO
599,refactor rx.concurrency to rx.schedulers,to match the naming convention of rx.observables  rx.subjects and rx.subscriptions we have decided to rename rx.concurrency to rx.schedulers prior to the 1.0 release. these commits makes this change.  since this is a non-trivial breaking change to anyone using schedulers  this leaves the  rx.concurrency.*  classes in place and deprecates them to give time to migrate. these deprecated classes will be deleted prior to the 1.0 release.,IO,Util
600,suppressed compiler warning and unchecked collections cast,- suppressed compile time warning - refactor raw collection cast,i18n,Util,IO
602,observeon fixes,- refactor to remove imperative assignment of innerscheduler for clearer concurrency and data access - fix subscription leak (composite+multipleassignment instead of just composite) - remove confusing conditional logic for inner/outer scheduler,Test,Util,IO
607,javadoc improvements:,- consistent nomenclature - consistent/standard javadoc formatting - more-precise descriptions - timer() marble digram & wiki link - delay() marble diagram & wiki link,Util,IO
617,moves arity interfaces of java8 helper answers to public api,the java 8 helper interfaces have been introduced in #338. however the public  additionalanswers.answer  family leak the functional interfaces.  these _parameter arity_ interfaces can be public  hence they are moved next to  answer  in the  org.mockito.stubbing  package.  i m however in favor of adding the  @incubating  annotation on those apis and related objects. thoughts ?  614,IO,Util
621,serialsubscription & from,update scala bindings for serialsubscription since underlying type now implements isunsubscribed.  changed observable.from to use currentthreadscheduler (principle of least surprise). used scheduler in create instead of observeron. fixed blocking tests.,IO,Util,Test
638,fix eclipse compile errors,the eclipse incremental compiler can not deal with the short expressions. hint with some casts.,Util,IO
661,subscriptions rewrite,refactor rewrite of subscriptions by @headinthebox and myself after reviewing the various different implementations. - we removed  singleassignmentsubscription  while trying to reduce surface area and simplify code. - moved to a non-blocking state-machine model that does not lock or busy spin during  mutation states,Util,IO
667,operators skip  skiplast  take with time,rebased version  without the drain scheduler variant. - fixes issue mentioned in #666 as well.,IO,Util
669,javadoc improvements:,- diagrams for switchcase  dowhile  whiledo  ifthen  delaysubscription  single  singleordefault  takefirst  takelast (and variant forms of these) - standardizing javadoc comment formatting - standardizing nomenclature,IO,Util
690,simplify matching complexity of unlinked file finder,reenables functionality #410   important point: - removed one file.exists check in fileutil.java expandpath   i think one check after replacing / and \ is enough  without checking the expanded path with directory in front. - cache is filled at initial creation for bibdatabase  therefore no checks against the whole database  for each file entry - parse logic for file field should moved from the filelisttablemodel to filefield.java.  we could still improve quite a lot here but maybe its good enough :tm: for now.,Util,IO
691,cleanup in aux import,cleanup and warning removal.,i18n,IO,Util
697,manual merge of pull #667,manual merge of https://github.com/netflix/rxjava/pull/667,Util,IO
698,new api: mockingdetails.printinvocations() for debugging mock behavior,for motivation  see issue #543,Util,IO
699,cleanup in gui,lots of minor cleanup in gui.,IO,Util
703,remove session functionality,open tabs are saved by default. could be extended to workspace functionality later on but should be removed for now as it provides no benefits at the moment.,IO,Util
705,fixes exception typo,this is a simple correction in an error message that can be thrown by mockito.,Util,IO
712,fix scheduler memory leaks,the  newthreadscheduler    currentthreadscheduler  and  executorscheduler  all had memory leaks when doing recursion with the  func2  method signature. this pull request fixes that along with improving the unit test coverage.  the fix involved treating  outer  and  inner  schedulers differently  with  inner  being the place where recursion happens.  the memory behavior can be tested using  testrecursionmemoryusage .  this fixes the problems reported in  and   but does not change the  scheduler  or  subscription  interfaces or public implementation details.,IO,Util,Test
714,rxjava-computation-expressions,the conditional operators are going in this contrib module.  see https://github.com/netflix/rxjava/issues/683,IO,Util
724,added new release workflow for release automation,the purpose of this rb is to give you heads-up about the improvements to the release automation that i work on. the algorithm is implemented and will not change much. documentation  edge case unit tests and fixing runnability from gradle are pending (travis ci will fail on this pr).  the goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseworkflow {     step releaseneeded     onlyif { releaseneeded.needed }     step bintrayupload     step pullcommits     step configuregenericgituser  cleanup: restoregituser     step commitreleasenotes  rollback: resetreleasenotes     step tagnewversion  rollback: removenewtag     step bumpversion  rollback: unbumpversion     step pushchanges }      more over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -pdryrun ./gradlew pullcommits -psinglestep,IO,Util
732,tests of two layout formatters,two more tests (took a while to understand authors  so incomplete but at least something).  i will merge as soon that i see the coverage and it is not to bad.,Util,IO
733,improved menu structure,![new menu](https://cloud.ent.com/assets/375693/12645272/3db1662a-c5c9-11e5-92f6-55b64f0515b2.png),Util,IO
734,new nullable(class<t>) matcher for convenient matching of nullable arguments,after using mockito  i have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. however i have found that i miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  stream.of(<mixed values>).map(o -> mapper.map(c))   the current options are :,IO,Util
738,publish and publishlast overloads,listed in #653  these operators use the existing multicast and subject infrastructure so i omitted any direct tests.,Util,IO
739,use urldownload instead of getresults for fetching stuff,relates to #738   fixed some things in gvkparser to hopefully get rid of the final coverity warnings there.,Util,IO
740,timeout with selector overloads,listed in #653.,Util,IO
741,new operator framework,the commits are structured as follows - add new operator and testing framework - add new versions of all existing operators - convert execution engine to use new operators - add new scheduler that favors interactive queries - add blocking support to operators - rewrite the context and stats system  - convert compiler to new operators - convert benchmarks to new operators - convert storage manager to new operators - convert a few remaining tests - remove old operators  after this main body of work is reviewed  i will add additional commits to repackage and rename classes to the old style  because doing this before the review will make fixes more difficult.,IO,Util
752,fixed #751,this should 751. should be merged in without waiting for confirmation.,i18n,IO,Interpreter,Test,Util
755,fix npe at saving does not reset save flag #741,741 (and a lot of other null pointer exceptions). gettype and getstandardtype now return an optional instead of possible null values.,Util,IO
765,removed unused group submenu from rightclickmenu,all code is now gone (and the move to group menu item follows the same logic as the add to and remove from group).,Util,IO
786,careful with that global search and replace  eugene.,restoring the working urls of rxjava wiki pages and marble diagrams in the javadocs http://www.youtube.com/watch?v=aymyxtfwuz8,IO,Util
790,make cpu time tracking in operatorstats configurable,added task.cpu-timer-enabled  which can be used to turn off cpu time tracking,IO,Test,Util
791,improve switchonnext description in javadocs,also: repair anchors in links to rxjava wiki in javadocs,Util,IO
793,more list<bibentry> instead of bibentry,instead of #762.,IO,Util
803,adds a warning for ibm j9 vms if mock generation fails,related to #801  this pr simply adds a warning for ibm j9 vms if the mock maker fails.,IO,Util,Test
805,never throw mockito exceptions from a plugin type s constructor,throwing a  mockitoexception  from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugin s creation.,Test,IO,Util
816,one global oncompleted object,issue https://github.com/netflix/rxjava/issues/662,Util,IO
819,fixes bug were previously verified invocations could not capture argu…,since mockito 2 / #380 captured arguments is not anymore done for already verified interactions.,Util,IO
824,set setdaemon on newthreadscheduler,first noticed by @zsxwing.,IO,Util
825,only announce coordinator if configured as one,this fixes a bug introduced in the coordinatormodule refactoring that causes every node to announce itself as a coordinator.,IO,Util
826,introduce validable answers for early validation of stubbing,## overview,Util,IO
828,mimetypedetector improvements,see #824. - added a  stubbing library - added a redirection test - added a mime type variation test - changed detection implementation to   looks like it works,Util,IO
838,make scala oncompleted notification an object,this should solve issue  and  .,Util,IO
839,838 : adds a matches(pattern),following discussion in #838 it is sensible to add a mockito matcher that can take a  pattern  as an argument.,Test,IO,Util
841,improved conversion from latex to html/unicode,now the huge list of conversion symbols is used when converting from latex to html and unicode. i also added a field right-click menu item to convert from latex to unicode. this sort of works except that it doesn t handle text within $$ in a good way (remove the $$ and the symbol conversion works).  the huge diff is caused by reformatting the huge list  as the newly added entries was aligned differently compared to earlier on saving,IO,Test,Util
842,fixed #492: all text is copied if nothing is marked and preview of pa…,fixed #492  when nothing is selected the whole field is copied. if the field is empty  the right click copy item is disabled.  preview of text to be pasted in tool tip. now maximum 20 characters. should it be longer?,Util,IO
852,rxjava-debug,manual merge of https://github.com/netflix/rxjava/pull/836,Util,IO
860,fixing the generics for merge and lift,i ve tracked down to two problems #858   the first is that lift wasn t quite right. i changed the lift argument from  operator<r  t>  to  operator<? extends r  ? super t> .  unfortunately java won t let us hide that away in the  operator  class so we have to redeclare that everywhere in the debug hooks but it s still better than the alternative of having to use the full  func1<? extends subscriber<? super r>  ? super subscriber<? super t>>  everywhere.  the second problem was in the return type of merge  observable<t> .  because of operators like  merge(observable<? extends t> t1  observable<? extends t> t2)  the only thing that can be said for the return type is that it is also  observable<? extends t>  but at the moment it is returning  observable<t> .  this pull request changes all of them and leads to some silly return values like      observable<string> a  b  observable<? extends string> x = merge(a  b),Util,IO
866,more systematic hashcode and equals,changed hashcode (and equals) to be more consistent and per recommendations.,IO,Test,Util
874,fixing openoffice citation with curly braces and manual connection browsing,-  ? -   -  ? -  ?  fixed #856: clicking on browse for manual openoffice does now work fixed #815: curly braces in oo/lo citation no longer ignored - code cleanup: replaced actionlistener with lamdbas  one point for discussion: defaultformbuilder (jgoodies) is deprecated. is there already a replacement for the creation? i found this thread:  @oscargus  @koppor,IO,Test
888,execution performance improvements,change blocks and tupleinfo to only contain a single field value move looping into aggregation implementations use classloader magic to share base classes of aggregations without creating megamorphic call sites change aggregation to support multi-channel grouping change orderby  topn  and window to support multi-channel sorting change join to support multi-channel keys pipeline schedule splits in batches instead of one at a time,IO,Util
890,split subscribeon into subscribeon/unsubscribeon,working with @headinthebox based on discussions at  and  we determined that there are times when  unsubscribeon  behavior is needed.  the  subscribeon  operator can not mix  subscribe  and  unsubscribe  scheduling behavior without breaking the  lift / subscriber  behavior that allows unsubscribing synchronous sources. the newly added  unsubscribeon  operator will not work with synchronous unsubscribes  but it will work for the targeted use cases such as ui event handlers.,Util,IO
903,fixed #890,this should 890  -  ? -   -  ? not relevant -  ?,Util,IO
904,removed some switch warnings and restructured code,extracted methods from large switch  rewrote as switch and added default labels to switch. -   -  ?,IO,Util
905,made sure all importformat classes never return null  but collections…,….emptylist() instead - importformat.importentries now never return null (still not propagated to calling code) - all(?) importformat readers are handled with try-with - replaced stringbuffer with stringbuilder where possible - used interface where applicable -  ? not relevant -   -  ? not relevant -  ?,Util,i18n,IO
910,fixes coverity issues  suppress serialization issues,-    used lambdas for actionlistener fixed resource leak in db exporter methods,Util,IO
918,cleanups,see commit messages,Util,IO
919,fix handling of hive bucketed tables,this 918.,Util,IO,Test
924,localized operator error handling,do error handling in the  lift  function rather than try/catch in  subscribe  since this catches at the operator level rather than for an entire sequence. this then allows  onerrorresumenext  and siblings to handle the error instead of it only being emitted to the final  subscriber .  i derived this fix while working on hystrix 1.4.,IO,Util
926,key bindings are now working in preview panel,649. until now the toolbar within the preview panel held the key bindings which weren t active when the toolbar wasn t created. now the preview panel itself carries the key bindings. -  ? -   -  ? -  ?,Util,IO
934,add observable.startwith(observable) method and unit test,add observable.startwith(observable) method and unit test.   i would like to avoid breaking method chaining when want to startwith an observable rather than just an iterator or specific values. this is a very minor change as under the covers startwith uses concat anyway but it is significant in terms of code readability and is a natural completion of the startwith api.,Util,IO
942,allow spying on interfaces so that it is convenient to work with java 8 default methods,680,IO,Util
944,removed  fetch  in title from database fetchers,-   -  ?  removed translation of fetcher names  because that are proper nouns. #941,Util,IO
945,tweak pdfcontentimporter,this is a minor update on pdfcontentimporter  which fixes minor issues and enables a broader test.,IO,Util
948,introduce  search %0  and  error while fetching from %0,instead of having separate strings for each fetcher  the placeholder  %0  is used now.  refs #941,IO,Util
955,fixed replaysubject leak,fix for issue #939.,i18n,IO,Util,Test
958,operatorskipwhile,reimplemented operatorskipwhile (the operationskipwhile has a state-sharing bug with  skipping  and  index ).  +1 test for many subscribers.,Util,IO
962,migrate from synchronizedobserver to serializedobserver,this pull request replaces use of  synchronizedobserver  with  serializedobserver .  ### why? #### 1) deadlocks  holding a lock while emitting notifications ( onnext    oncompleted    onerror ) allows for deadlocks if the event results in a cycle back to the parent.   while testing rxjava 0.17.0 in netflix production we ran into one of these. the vulnerability has existed all along but we finally hit it.  this issue has also been reported before such as:  #### 2) blocking threads  the use of  synchronized  can block threads. if it s used in areas such as modifying a data structure this can be okay. when emitting a notification however it is a problem as the result of an  onnext  can take a non-deterministically long time to complete. this means any other thread trying to emit will be blocked.  if the source threads are event loops (such as vert.x or netty) this will block the event loops.   for example  if two network calls off two netty event loops are being merged (such as via  flatmap ) and one of them does further slow processing that causes  onnext  to be slow  it will block the other  onnext  which blocks the event loop and prevents any further io on that thread. this is a significant problem for system scale and breaks the promise of rx being a non-blocking  reactive library. ### solution  the  synchronize    synchronizedobserver  and  synchronizedsubscriber  operator and classes have been deprecated. they are replaced by  serialize    serializedobserver  and  serializedsubscriber .  the  serializedobserver  still ensures only a single thread can emit  onnext    oncompleted   or  onerror  at a time but does not hold a lock while doing so. instead of blocking threads it will accept the incoming events into a buffer. thus  it becomes an asynchronous operator.  the  merge  operator (which impacts  flatmap ) now uses  serializedobserver   along with any other place in rxjava that needed synchronization. ### implementation  3 implementatations were written and tested: - [queue and counter]( - [queue and lock]( - [atomic state machine](  performance testing [revealed](      java     /**      * 1 streams emitting in a tight loop. testing for single-threaded overhead.      *       * -> blocking synchronization (synchronizedobserver)      *       * run: 10 - 58 186 310 ops/sec      * run: 11 - 60 592 037 ops/sec      * run: 12 - 58 099 263 ops/sec      * run: 13 - 59 034 765 ops/sec      * run: 14 - 58 231 548 ops/sec      *       * -> state machine technique (serializedobserverviastatemachine)      *       * run: 10 - 34 668 810 ops/sec      * run: 11 - 32 874 312 ops/sec      * run: 12 - 33 389 339 ops/sec      * run: 13 - 35 269 946 ops/sec      * run: 14 - 34 165 013 ops/sec      *       * -> using queue and counter technique (serializedobserverviaqueueandcounter)      *       * run: 10 - 19 548 387 ops/sec      * run: 11 - 19 471 069 ops/sec      * run: 12 - 19 480 112 ops/sec      * run: 13 - 18 720 550 ops/sec      * run: 14 - 19 070 383 ops/sec      *       * -> using queue and lock technique (serializedobserverviaqueueandlock)      *       * run: 10 - 51 295 152 ops/sec      * run: 11 - 50 317 937 ops/sec      * run: 12 - 51 126 331 ops/sec      * run: 13 - 52 418 291 ops/sec      * run: 14 - 51 694 710 ops/sec      */      /**      * 2 streams emitting in tight loops so very high contention.      *       * -> blocking synchronization (synchronizedobserver)      *       * run: 10 - 8 361 252 ops/sec      * run: 11 - 7 184 728 ops/sec      * run: 12 - 8 249 685 ops/sec      * run: 13 - 6 831 595 ops/sec      * run: 14 - 8 003 358 ops/sec      *       * (faster because it allows each thread to be  single threaded  while blocking the other)      *       * -> state machine technique (serializedobserverviastatemachine)      *       * run: 10 - 4 060 062 ops/sec      * run: 11 - 3 561 131 ops/sec      * run: 12 - 3 721 387 ops/sec      * run: 13 - 3 693 909 ops/sec      * run: 14 - 3 516 324 ops/sec      *       * -> using queue and counter technique (serializedobserverviaqueueandcounter)      *       * run: 10 - 4 300 229 ops/sec      * run: 11 - 4 395 995 ops/sec      * run: 12 - 4 551 550 ops/sec      * run: 13 - 4 443 235 ops/sec      * run: 14 - 4 158 475 ops/sec      *       * -> using queue and lock technique (serializedobserverviaqueueandlock)      *       * run: 10 - 6 369 781 ops/sec      * run: 11 - 6 933 872 ops/sec      * run: 12 - 5 652 535 ops/sec      * run: 13 - 5 503 716 ops/sec      * run: 14 - 6 219 264 ops/sec      */      /**      * 2 streams emitting once a millisecond. slow emission so little to no contention.      *       * -> blocking synchronization (synchronizedobserver)      *       * run: 10 - 1 996 ops/sec      * run: 11 - 1 996 ops/sec      * run: 12 - 1 995 ops/sec      * run: 13 - 1 997 ops/sec      * run: 14 - 1 996 ops/sec      *       * -> state machine technique (serializedobserverviastatemachine)      *       * run: 10 - 1 996 ops/sec      * run: 11 - 1 996 ops/sec      * run: 12 - 1 996 ops/sec      * run: 13 - 1 996 ops/sec      * run: 14 - 1 996 ops/sec      *       * -> using queue and counter technique (serializedobserverviaqueueandcounter)      *       * run: 10 - 1 996 ops/sec      * run: 11 - 1 996 ops/sec      * run: 12 - 1 996 ops/sec      * run: 13 - 1 996 ops/sec      * run: 14 - 1 995 ops/sec      *       * -> using queue and lock technique (serializedobserverviaqueueandlock)      *       * run: 10 - 1 996 ops/sec      * run: 11 - 1 996 ops/sec      * run: 12 - 1 997 ops/sec      * run: 13 - 1 996 ops/sec      * run: 14 - 1 995 ops/sec      */      the state machine solution was tested in production but caused performance problems  most likely due to the immense object allocation it needs to do.   the elegant  queue and counter  solution does not perform well enough in the non-contended case.  the  queue and lock  model performs well in the non-contended case and under contention  despite not being a very elegant solution and requiring the use of mutex locks for the state changes (but it does not hold the locks during notification). ### considerations  this does allow unbounded buffer growth  the same as  observeon  and  zip  instead of blocking the producer threads.  ### conclusion  the implementation in this pull request can and likely will be improved over time. the other implementations are purposefully being shown to allow others to provide further insight on how to do this better.   this change is important to ensure rxjava is non-blocking and our canary testing of this change in the netflix production environment suggests this change is both performant and functional.,Test,IO,Util
964,subjectsubscriptionmanager fix.,fix for #961  if an already unsubscribed subscriber is added  the subscription function ends up in an infinite loop as the inner unsubscription logic changes the state to another object before the outer state machine continues. - the outer state machine loop now exits if unsubscription happened and doesn t attempt to modify the state. - the removeobserver method is changed so that if the subscription to be removed is not in the array  it returns this instead of an unnecessary copy. in addition  copyof calls have been replaced by arraycopy to avoid reflective array creation.,Test,i18n,IO,Util
965,extract native functions to os package,-  ? -   -  ? -  ?,IO
970,notifications for the allocation averse.,i ve seen and used the sentinel pattern in a couple of places in the implementation of operators.  i figured i d formalize the hacks into one place where bugs can coalesce.  as a bonus the code that uses it looks a bit cleaner now.,Util,IO
972,verifies #688: acceptance test to prevent future regression,added an acceptance test to verify #688,i18n,IO,Util
974,always trim fields on save and remove trimformatter,the consensus in #920 was that fields should always be written without leading or trailing whitespace. this is done in this pr and the trimformatter is removed. (by the way  empty fields are never written as one of the added tests shows)  -  ? -   -  ? -  ?,Util,Test,IO
982,preserve bibtex import order,@obraliar  noted that the order of the bibentries in  parserresult.getdatabase().getentries  is not the same as in the bib file. as it turned out  fixing the order required to store the bibentries not as  map<id  bibentry>  but simply as a list. so i removed almost everything which is connected to id s. now they are only used for writing bibentries (to determine the original order) and for the sql export.  -  ? not relevant -   -  ? -  ?,Util,IO
988,when clicking on a tab  the first field now has the focus,-  ? -   -  ? -  ?  this is referes to #623  i just had to add the activatevisible() method to the changelistener to ensure the focus is set.,Test,IO,Util
999,db properties layout and save order config changed,-  ? -   -  ?  957  and #958   fix height of the dialog and add spacing between ok/cancel button and  border changed jcomboxbox to editable and removed the unnecessary textfields added jcombobox for selecting the fields to apply the selected formatter to changed position of delete button removed indexoutofbound exception when no item is selected  edit// i just see this pr is #999  ),Util,IO,Test
1010,added initial tests for exportformat,really trivial and early test  but could maybe avoid bugs like #1001 to happen (and form a foundation to extend on).,IO,Util
1012,do not suppress instrumentation exceptions,rather propagate them to mock maker that attempts instrumentation. addresses #1005.,IO
1040,cleanups,fixed a number of issues  including: - removed unused imports - moved a class - provided get-methods for some fields in jabrefframe,i18n,IO,Util
1047,refactoring of oo connection,i m restructuring the oo connection with the following goals: -  split the files between gui and logic -  change the style selection dialog so that it is easier to support many internal styles as well as adding/removing external styles  long term (probably not in this pr) -  improve the mechanism that searches for binaries and .jars  a question: should classes that accesses the oo-specific jars reside in gui or logic (assuming that they do not access gui or swing  so they could reside in logic from a test perspective)?,IO,Util
1048,fix npe on database load in specialfieldsync,will merge this in as soon as the build passes.  -   -   -   (),IO,Util,Test
1049,move rx.joins to rxjava-joins module,migrating rx.joins into a separate contrib module as part of roadmap to 1.0:  this is being done until the rx.joins api has further time to mature as it is likely to change and we can t make breaking changes any further once we hit 1.0.,Util,IO
1051,manual merge #967,manually merge #967,IO,Test,Util
1052,move files,add cleanup procedure which moves linked files to the main file directory as specified in the database properties dialog.   further code cleanups: - add methods for accessing the linked files to typedbibentry - some renamings - introduce getter for fields in parsedfilefield - extract parsedfilefield to own class - some smaller code cleanups to cleanupworker  ##  -   -   -   (),Util,IO
1053,deprecation cleanup,the time has come to delete the deprecated methods/classes.  a few still remain to be done before 1.0 but can t be done until all operators are migrated: -  observable.onsubscribefunc  -  observable.create(onsubscribefunc)  -  safeobservablesubscription  -  safeobserver,IO,Util
1056,fix effectivepredicateextractor range summary bug,occurs when the rangeset has no ranges.,IO,Util
1061,minor cleanups and a bug fix,bugfix in freeciteimporter  some naming cleanups  primarily in globals  and some unused imports.,IO,Util
1062,operatorany,reimplemented  any   aka  isempty  and  exists .  issue #1060,Util,IO
1065,fix handling of hive timestamp in maps/lists,also  add more unit tests for rcfile formats,IO,Util
1066,changed preview font from arial to sans-serif family,questions on that?,IO,Test,Util
1071,unified translations strings,removed: - 10 translations strings where a very similar one was already available - 3 unused keybindnings - 14 names which cannot be translated,IO,Util
1072,doi field improvements,## **major changes of this pr** -  removed unused browse action -  remove double click action for url and doi fields -  add open and fetch from buttons for url and doi -  only activate button if field includes valid doi/url ## **new look**  (https://cloud.ent.com/assets/2141507/14265877/56a065f2-fac4-11e5-9ee2-d1cb0611e1df.png),Test,IO,Util
1073,operatorbuffer,operator buffer  split into 4 variants.  issue #1060.  there are some important behavioral changes compared to the original versions: - when an onerror event appears from anywhere  the currently accumulated chunk(s) are _not_ emitted before the error is propagated. this conforms with rx design guideline 6.6. - the observable returned by the func0 inside the  buffer(func0<observable<b>>)  now is used as long as possible and whenever it fires an event  a new buffer chunk is started. the func0 is called only once per subscriber. the original called it and subscribed to it all the time  causing all-increasing resubscriptions.,IO,Util
1079,improded readability of some bibtex test strings,fixed encoding problem in test when running gradle check follow up from #1014   @tobiasdiez,Util,IO
1080,operatordefaultifempty,operator defaultifempty  issue #1060,IO,Util
1081,operatordefer,operator defer  issue #1060,Util,IO
1083,metadata cleanup,- move file handling from metadata to bibdatabasecontext which resulted in a lot of classes using the database context instead of the metadata - remove globals.prefs.databasefile ##  -   -   -   (),Util,IO
1084,translated more german strings,translated more german strings. maybe some of them can be improved  :smirk:  currently only 2 are missing  because i had not idea on how to translate them. i would need some context for that:      wrong_entry_type_as_proceedings_has_page_numbers= disable_highlight_groups_matching_entries=      @tobiasdiez  mabye you can give some context here for the group-thing: what does it exactly do/mean?  @domwass @matthiasgeiger you may want to look at my translations.,Util,IO
1085,operatordistinctuntilchanged,operator distinctuntilchanged  issue #1060  again  i haven t ported the custom comparator version.,IO,Util
1086,fixed some things related to localization,fixed a number of todos/fixmes.,IO,Util
1087,change default read timeout to 1 second,i m not sure if the values are correct  but this shows how the default config system works,IO,Util
1089,filelist field size now dependent on its content,672. the filelist (within the entryeditor) now automatically resizes its columns dependent on the length of its content.  ![java 2016-04-03 12-13-50-65]( -   -   -   (),Util,IO
1091,1088 : updating documentation of verify feature to correct a s…,updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut  pasted  and run verbatim.,IO,Util
1095,operatorgroupbyuntil,operator groupbyuntil  for issue #1060  while rewriting  i ve noticed a common pitfall with the observation of the duration: many other operators react to onnext or oncompleted  but one should only  expire  once. i ll review my recent operators and post a separate pr if any.,Util,IO
1096,inorderimpl constructor signature,replace  list<? extends object>  in the constructor s argument list with a simpler  list<?> .,Util,IO
1097,operatortomultimap,operator  tomultimap   issue #1060,IO,Util
1098,operatortimerandsample,operator timer and sample  because there was a dependency in sample towards the now removed interval  i had to reimplement sample in this pr as well.  note that the new  operatorsamplewithtime  schedules its first sample call before any upstream code is executed. given the testscheduler  a sample with 1sec and a timer with 1sec as well won t sample any value. the reason is that in the internal queue of testscheduler  the sampler s action to take the sample is followed by the action to emit the timer s value.,IO,Util
1099,operatortomap,operator  tomap   issue #1060,Util,IO
1100,run all tests in parallel by default,annotate all tests that use @beforemethod with singlethreaded=true,IO,Util
1103,add benchmarks,this pr adds some basic benchmarks for parsing and writing a bib file. the results are as following for a database consisting of 1000 entries. benchmark                         score     error  units benchmarks.parse                 49736.582 ± 788.879  ops/s benchmarks.write                0.706 ±   0.012  ops/s benchmarks.search                258.838 ±   5.604  ops/s benchmarks.inferbibdatabasemode  1297.622 ±  22.910  ops/s  as one can see the parse operation is by many orders of magnitudes quicker then writing. i had a closer look at the write operation and it turned out that 66% of the time is spent in database.getmode(). some small changes improved the situation by a factor of 10 benchmark                         score      error  units benchmarks.parse                42031.971 ± 8188.833  ops/s benchmarks.write                 8.299 ±    0.304  ops/s benchmarks.search               248.093 ±    7.573  ops/s benchmarks.inferbibdatabasemode  20759.711 ±  397.031  ops/s  i suspect the changes in #1100 improve the situation even more (since there the database mode is cached).  (by the way   gradle jmh  runs the benchmarks. so its pretty simple to use.) -   -   -   (),IO,Util
1107,fix replaysubject s double termination problem.,fix for issue #1105,IO,Test,i18n,Util
1109,update s3 filesystem,this is an updated version of #1044.,IO,Util
1110,removed some variables from guiglobals,removed the unused zoomlevel and moved typenamefont.,IO,Util
1111,operatortimeinterval,operator  timeinterval   issue #1060,Util,IO
1112,operatorthrottlefirst,operator  throttlefirst  and moved tests in  throttlefirsttests  to  operatorthrottlefirsttest .  issue #1060,IO,Util
1117,operator onexceptionresumenextviaobservable,operator onexceptionresumenextviaobservable  issue #1060,Util,IO
1118,some performance improvements,motivated by the nice blog post from @mlep  i tried to further improve the performance.  starting point  benchmark                         score      error  units benchmarks.parse                 30        ± 2.7  ops/s benchmarks.search                230.359 ±   27.399  ops/s benchmarks.write                 53.323 ±    5.528  ops/s  now with this pr benchmark                         score     error  units benchmarks.parse                 46.965 ±   0.608  ops/s benchmarks.search                304.795 ±   5.905  ops/s benchmarks.write                 85.171 ±   1.301  ops/s  for further improvements on should have a closer look at the formatter: - removelatexcommands for search (70% of time is spent there) - fieldcontentparser and latexfieldformatter for write (also >50%)  (also fixed a bug in the parse benchmarkthis is why the numbers are so different than in my previous post) ##  -   -   -   (),IO,Util
1119,made it possible to delay the return of a mock or spy.  (#1117),this is a useful aid in debugging race conditions and other synchronicity problems.,Util,IO
1120,operatorsequenceequal,operator sequenceequal #1060  lightened the operator  but note that notificationlite escaping an operator may cause undesired effects in other operators relying on notificationlite as well.,IO,Util
1121,improve and develop apis required for framework integrators,### problem,Util,IO
1122,made it possible to delay the return of a mock or spy (#1117),a cherry-picked version of #1119 for the 2.x branch.,Util,IO
1128,improve detection on non-mockable types - byte buddy 1.6.14->1.7.0,stronger assertions on class loader origin when choosing what methods are mockable.,Test,IO,Util
1130,operator switch,operator switch  issue #1060,Util,IO
1131,record  started  counter for queries that fail to parse,in the last release we started tracking parsing failures for error categorization  but the change was missing the call to increment the started counter.  as a result  the started and completed counters get permanently out of sync and cause the number of running queries to be reported as 0.  fixes https://github.com/facebook/presto/issues/1130,IO,Util
1133,collapse imports,attempt to reduce merge conflicts as it s always the import statements that are conflicting,IO,Util
1134,categorize user errors,- categorize a bunch of illegal argument exceptions as user errors - categorize division by zero as a user error,IO,Util
1142,removed unused imports and some other minor things,oh  how the codacy issue count will drop,IO,Util
1144,readd formatchars support,alternative to  #1114 to add backwards compatibility for formatchars (and a few other renamed layoutformatters). the idea was to replace the reflection code by an (admittedly big) switch statement. in this way we gain some flexibility about the location and naming of layoutformatter classes.  by the way   according to  all layoutformatters starting with  author  are deprecated and are replaced by  authors  since 2.7. should we just delete them now? -   -   -   (),Util,IO
1150,fix replaysubject terminal state race condition,fixes  with change from @akarnokd,IO,Util,Test
1158,scheduler correctness improvements.,second round on the scheduler correctness issue.  sure it looks more heavy as  scheduledaction  now has its own inner  compositesubscription  and a shared reference to the parent  innersubscription .  i ve tried to benchmark it with  schedulerperformancetests  but that test is flawed: - multiple threads pound on the same long sum value  so naturally additions get lost. - the longobserver gets unsubscribed after the first loop so  from  will not actually call  onnext  but  isunsubscribed  a lot. - does not wait for the computations to finish and basically measures how fast 5m tasks can be added to the newthreadscheduler s innersubscription.  the flawed test gives ~ 11m ops/sec on my machine. if i fix the test and run against the master  5m takes extremely long to finish due to the inherent slowness of add/remove in compositesubscription if large. on my 4 core hyperthread enabled machine  i get 50k-150k ops/second for baseline with a 100k loop.  the proposed changes run with the flawed test gives ~10.8m ops/sec. with the test fixed and with the proposed changes  i get ~1.2m ops/sec.,IO,Util
1160,remove %s in formatter descriptions,in the developer telco  we discussed that we don t want to have  %s  in the descriptions of formatters. this pr removes the last two remaining  %s .,Util,IO
1161,add method getexampleinput() to format class,i added  getexampleinput()  to the formatter class to improve #1050.,i18n,Util,Test,IO
1162,fix for #1155 thenthrow(class),fix for #1155,Util,IO
1163,fix range bug in spi,this is a nasty one.,Util,IO
1175,fixed synchronous connectableobservable.connect problem,connectableobservable.connect returns a subscription and thus cannot be unsubscribed synchronously  similar how take didn t work before the subscriber changes. this pr modifies the  connectableobservable  and its current implementation  operatormulticast  to extract the connection subscription token before it is connected to the source. cancelling this extracted token makes sure the synchronous connection is unsubscribed.  (the rx.net version of the test case seemingly doesn t exhibit the problem. i suspect it is the interplay of  idisposable s.),Util,IO
1183,notificationlite.accept performance improvements,this is a proposal for speeding up the  accept()  method (i.e.  reducing its latency).  benchmark comparison:  direct onnext: 488 mops/s master accept: 378 mops/s this accept: 477 mops/s  (i7 4770k  jdk 1.8u5 x64),IO,Util
1195,small fixes,first commit is some code cleanups. the rest is mostly spelling and localization consistency.,Util,IO
1228,add @checkreturnvalue to stubbing/verification methods,introduce a new annotation  @checkreturnvalue  and add this to methods like  when  and  verify  such that static analysis can verify the value is actually used ( this makes sure developers can get warnings on build-time instead of run-time (with our internal  validatestate ),IO,Util,Test
1229,1091 apply and ensure correct import sort order,see #1091,Test,Util,IO
1231,invocationsprinter string concatination,replace string concatination inside an append call with a chained  append  calls to make the code a tad easier to read  so the reader isn t left wondering why some of the concatinations  with  append s and some with the  +  operator.,Util,IO
1233,deprecate toblockingobservable in favor of toblocking,as per discussion at   this will better match  toparallel  and is shorter to use while still being clear as to what is happening.,Util,Test,IO
1235,lock-free  mpsc-queue based  fast-path serializing observer.,i ve rewritten the  serializedobserver  to improve performance. it is now lock-free  uses a multiple-producer-single-consumer queue based on netty s implementation and employs a fast-path logic for single-threaded write-through.  benchmarked by measuring how fast 500k integers can get through it  if running 1-8 producers at the same time. for a single threaded case  master gives about 18 mops/s  this implementation gives ~36 mops/s (would be ~16 mops/s on the slow path). for producers > 2  master gives ~5.5 mops/s and this gives ~11.5 mops/s. for 2 producers  aka 1 producer - 1 consumer  master gives ~4.5 mops and this gives ~8.5 mops/s.  the two new class   paddedatomicinteger  and  mpscpaddedqueue  will come in handy with other lock-free structures such as schedulers  etc. we may consider adding back the  rx.util  or some other sub-package to store these helper classes: they don t need to be part of the public api but can be left  public  to enable cross-package access internally.  things i learned during the implementation: - it is worth padding the wip counter to fit a cache line so the constant cache thrashing won t affect the parent class  other fields  most likely. - using fieldupdaters saves space but  sun.misc.unsafe  can add 8-10% more throughput. to avoid platform issues  i stayed with the fieldupdaters. - using  getandincrement  and  decrementandget  are intrinsified in java 8 and are compiled to a single x86 instruction  which generally outperforms any cas loop. same is true for the  getandset . - padding out the  tail  in the  mpscpaddedqueue  again helps separate producers trashing on the tail and a consumer reading the head. without it  the throughput would decrease by about ~1.5 mops/s - by adding the fast-path logic  the single-threaded throughput increases by a factor of 2 since it avoids an unnecessary enqueue and dequeue and all associated volatile writes. however  if taking the fast-path fails  it incurs extra cost on the slow path for everyone else because of the +1 failed cas at the start. to fix this case  i ve introduced a flag that enables and disables fast-path. to disable the fast path  the active fast path checks if it was able to change wip to zero. if not  it means there was concurrent access and continues on the emission loop path  but disables the fast-path then on. it is basically a detector for concurrent use. since such concurrent use may be transient  the loop counts how many elements it had to emit  an if it was only 1 or 2  it reenables the fast-path. this limit is the result of trying several values with the benchmark above. - the fast-path logic has its weak spot in 2 producer case compared to a plain mpsc queue running in spsc mode  the latter gives about ~11 mops/s which is better than this implementation s ~8.5 mops/s. in contrast  the single-treaded use for the plain mpsc is only ~16 mops/s. both implementations perform the same if producers > 2. therefore  i decided it is more worth having an implementation that is weak for 2 producers but otherwise is as good or outperforms the alternatives. note that if one knows the number of producers up front  one can create a more specialized implementation  but this is not the case with rxjava operators. this may affect  merge  and co which serialize multiple sources. note however  that if the source speed isn t that high as in the benchmark  this implementation still provide less latency than the alternatives because the fast-path would be most likely open if the source emission is interleaved.,Util,IO
1243,remove subscription wrapper from observable.subscribe,remove subscription wrapper from observable.subscribe  performance increase from 7.7m to 8.8m ops/second  before:      benchmark (size) mode samples mean mean error units r.u.perftransforms.maptransformation 1 thrpt 5 7714453.187 362218.633 ops/s r.u.perftransforms.maptransformation 1 thrpt 5 7527144.767 497816.471 ops/s      after:      benchmark (size) mode samples mean mean error units r.u.perftransforms.maptransformation 1 thrpt 5 8853534.333 183494.242 ops/s r.u.perftransforms.maptransformation 1 thrpt 5 8806958.403 452595.219 ops/s      test can be run  using:      ../gradlew benchmarks  -pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 5 -prof gc .*perftransforms.maptransformation*,IO,Util
1244,fixed so the resulting type does not become misc when merging two ent…,apparently  the type of resulting entry was not set correctly,IO,Util
1269,fix the bug that int overflow can bypass the range check,fix the bug mentioned in #1266,IO,Util
1271,operator retry with predicate,operator retry with predicate + 1 overload for issue #1214.  the func1 version is simply named  retry   the func2 version is named  retryif  due to lack of ideas and because to avoid overload resolution issues. i also had to open up the operatorretrytest classes a bit.,Util,IO
1272,strictness configurable per mock / stubbing,792,Test,i18n,IO,Util
1275,add machine learning functions plugin,add functions to train and use machine learning models (classifiers and regressors) in presto. this is currently only a proof of concept  and is not ready for use in production. example usage is as follows:      sql select evaluate_classifier_predictions(label  classify(features  model)) from (     select learn_classifier(label  features) as model     from my_training_data  ) cross join my_validation_data,Util,IO,i18n,Test
1281,replace bibtexentryassert by overwriting bibentry.equals method,as proposed in #625 a proper bibentry.equals is provided in this pr and used for the tests.   this as a few advantages: - detect differences which are not visible in the canonical string representation (so far this hit empty fields and different line breaks) - get more meaningful test-failure messages for lists (instead of  expected 2 got 3  the added entry is displayed) - assert.assertequals just works and no custom written assertequals method has to be used  i clicked around a bit  but couldn t find any unexpected side effects due to the overwritten equals method.   if this pr is accepted  then i would inline the bibtexentryassert.assertequals methods. -   -   -   (),Interpreter,Util,IO
1283,reduce subscription object allocation,- significant reduction in object allocations - details on research available at https://github.com/netflix/rxjava/issues/1204,Util,IO,Interpreter
1284,manual merge of lock-free  mpsc-queue based,pulling in the mpsc queue from  leaving out the serializedobserver change until further analysis. getting this data structure in as we likely want to use it in other places.  moved it into rx.internal.util and added a readme so it is very clear this is an internal package and not part of the public api.,Util,IO
1286,rename some operator* classes to onsubscribe* as per #1270,see discussion in issue #1270.   numerous classes in the  rx.operator  package are not implementations of  operator  but are actually implementations of  onsubscribe . the classes have been renamed in this pull request.  excuse me not squashing commits  looked complicated after doing a pull from upstream in the middle.,IO,Util
1287,replaysubject remove replaystate chm and related subjectobserver changes,for issue #1204  this change should help avoid chm garbage (although boxed integers will still fly around). in addition  i moved the notificationlite around to make room for the index. i ve also removed the callback onadd in publishsubject because it was unnecessary.,Util,IO
1290,upgrade to jmh 0.7.3,as per https://github.com/netflix/rxjava/issues/1205,Util,IO,Interpreter
1293,fix and update jmh perf tests,- the tests were wrong and re-using a single subscriber instance which meant they weren t really testing much. - same with the countdownlatch which meant they weren t waiting if async. - added several serializeperf and perftransform tests,IO,Interpreter,Util
1294,rx.operators -> rx.internal.operators,move  rx.operators  to  rx.internal.operators  for clarity that these can change at any time and are not part of the public api.  discussed at https://github.com/netflix/rxjava/issues/1270#issuecomment-44668606,Util,IO,i18n,Test
1295,change  void accept  to  boolean accept,as per a change @akarnokd did elsewhere with  accept2  method.,Util,IO
1296,improve bibtexentryassert,this is a follow up of  #1281 with removing obsolete bibtexentry.assertequals methods,Util,IO
1307,update public api of invocationfactory needed for android static mocking,1306,Util,Test,IO
1309,minor updates to bibentry,- <s>rename citekey to bibtexkey to be consistent with wording of jabref users</s> - reorder methods in bibentry to follow id  cite key  type  everything else - add some javadoc - remove obsolete setting of  changed=true,IO,Util,Interpreter
1311,tiny integration test change,it s a tiny change.  i ve been following this project for a while as a hobby  also want to contribute to it.   currently i am going through test cases to learn. found some tiny problems as we are testing  concat   we should care not only the total number of elements  but also the sequences.  creating this request mainly want to make sure i am writing/commiting code to the correct place.  let me know if there is any problem.  best regards  mingtao,Test,Util,IO
1324,improved stubbing internals and test coverage,some improvements in exception-stubbing code:,Test,IO,Util
1347,allow use of the returned subscription to cancel periodic scheduling,the documentation for scheduleperiodically indicates that the returned subscription can be used to unsubscribe from the periodic action  or to unschedule it if it has not been scheduled yet. that was the case only before the first action took place  and it was then impossible to unsubscribe using the given subscription  although unsubscribing the worker did work.  this 1344.,Util,Test,IO
1357,mergewith  concatwith  ambwith,single-arity instance versions of merge  concat and amb. since we can t use the  merge / concat / amb  names on both static and instance methods  these have the  with  suffix  which actually reads quite well.      java o.mergewith(o2).subscribe(ts)  o.concatwith(o2).subscribe(ts)  o.ambwith(o2).subscribe(ts)       if we feel the need for more arities fine  but i wanted to start simple.  this originated from discussions with @headinthebox and over a year of wanting instance methods for  merge .,Util,IO
1367,fix the bug that  flatmap  swallows onerrornotimplementedexception,fixed #1365 not sure if any other place will swallow  onerrornotimplementedexception  or the fatal errors.,IO
1376,small improvements for page normalizer,see test cases. -   -   -   (),Interpreter,IO,Util
1380,variety of fixes,found while working on backpressure.,Util,IO
1387,1386: adding atmostonce()  rename threadverifiescontinuoslyinteractingmocktest and one todo,hi,Util,Interpreter,IO
1388,fix sorting issue #1357,the logic is fucked but this should fix the issue.  problem was that when sort in original order was selected  the corresponding variable newsortorder would still read the disabled sort order inside the jdialog.,Util,Test,IO
1393,add cache(int capacity) to observable,proposed patch for #1303,Util,IO
1397,add fields for nbibimporter and add testfile,regarding: 1063]( the medlineplain importer doesn t have all fields  that the nbib format has. so i added the fields to the medlineplain format and added a test+ testfile for the nbib format. a list of the elements that should be imported now  can be found [here]( -,Util,IO
1399,update perf tests,matching with work being done for 0.20 to allow comparisons,Util,IO,Interpreter
1400,internal data structures,various data structures to allow performance improvements. i am committing these separately from the code that uses it to keep the pull requests simpler. nothing in rxjava depends on these classes in this commit.,Util,IO
1412,backpressure & 0.20.0-rc1,this is a functioning implementation of backpressure. of the major unbounded queue operators in 0.19  this implements  observeon  and  merge  but not yet  zip .  ### new signatures      java public interface producer {     public void request(int n)  }          java public abstract class subscriber<t> implements observer<t>  subscription {      /**      * optionally called from  observable.onsubscribe .      */     public final void setproducer(producer producer)       /**      * allow implementing classes to capture  decorate or override the  producer  without affecting the  subscriber  logic.      */     protected producer onsetproducer(producer producer)       public final void request(int n)  },IO,Util,Interpreter,Test
1414,merge fixes,a handful of fixes  particularly one that could cause non-deterministic missing data.,IO,Util,Test
1417,proposal: subscriber.onstart,this is a proposal derived from conversations with @headinthebox to use  subscriber.onstart  rather than constructor overloads as the mechanism for allowing  request(n)  to be called to operationally start backpressure (or do anything else at the start of a stream).  the idea is that it is at the start the same as  onerror  or  oncompleted  are terminal events. it will always be called.  usage for subscribing is like this:      java         observable.from(1  2  3  4).take(2).subscribe(new subscriber<integer>() {              @override             public void onstart() {                 request(1)              }              @override             public void oncompleted() {              }              @override             public void onerror(throwable e) {              }              @override             public void onnext(integer t) {                 system.out.println(t)                  request(1)              }          })       or when writing an  operator  via  lift :      java         observable.from(1  2  3  4).lift(new operator<integer  integer>() {              @override             public subscriber<? super integer> call(final subscriber<? super integer> child) {                 return new subscriber<integer>() {                      @override                     public void onstart() {                         request(1)                      }                      @override                     public void oncompleted() {                         child.oncompleted()                      }                      @override                     public void onerror(throwable e) {                         child.onerror(e)                      }                      @override                     public void onnext(integer t) {                         system.out.println(t)                          child.onnext(t)                          request(1)                      }                  }              }          }).subscribe()       both of these examples are requesting 1 item at a time.,IO,Test,Util
1422,concurrency fixes for rxringbuffer & merge,possible fix for #1420  i was unable to exactly reproduce the issue  but was able to create a possibly related one. this fixes it. it also simplifies the logic and code somewhat  at a possible small performance cost for these:      r.o.operatormergeperf.merge1syncstreamofn            1000  thrpt         5    59407.716     2073.945    ops/s r.o.operatormergeperf.merge1syncstreamofn         1000000  thrpt         5       66.557        2.693    ops/s r.o.operatormergeperf.mergensyncstreamsofn           1000  thrpt         5       59.293        5.046    ops/s,Interpreter,Util,IO
1423,changed producer interface to work with long instead of int,changing  int  to  long  in  producer  implementations.,Interpreter,Util,IO,Test
1431,compositeexception fix for android,1405 - revert changes from f4ae92aa - remove duplicated causes in stack trace chain,Test,IO,Util
1443,651: improve parsing of author names containing braces,651. -   -   -   (),Test,Interpreter,IO,Util
1458,add stubbinglookupevent and notifier (a part of #793),this pr adds  stubbinglookupevent  and  stubbinglookupnotifier  as a part of the issue #793.,Util,IO
1489,backpressure fixes and docs,docs for operators that don t support backpressure  particularly all the temporal operators.  fixes for several that needed to request(1) or request(long.max_value).,Util,IO
1493,manual merge of retrywhen/repeatwhen,manual merge and rebase of https://github.com/netflix/rxjava/pull/1470,IO,Util
1494,zipwith,match the naming convention of  mergewith    concatwith    ambwith  etc.,Util,IO
1498,non-deterministic testusersubscriberusingrequestasync,fix non-deterministic failures of backpressuretests.testusersubscriberusingrequestasync  i was able to replicate the occasional failure by putting it in a tight loop. with these changes it no longer fails.,Util,IO,Test
1515,support subject factory with multicast,this is a proposed change to allow using a  subject  factory with  multicast  and for methods such as  publish()  and  replay()  to use the factory so that each time  connectableobservable.connect()  is invoked  a new  subject  is created and used. otherwise  an  observable  sequence can not be reused. #### use case      java         final atomicinteger count = new atomicinteger()          observable<integer> subject1 = observable.just(10)          observable<integer> subject2 = observable.just(20)          observable<integer> combined = observable.combinelatest(subject1  subject2  (fst  snd) -> {             int i = count.incrementandget()              system.out.println((fst + i) +   +   + (snd + i))              return fst + snd          }).publish().refcount()           combined.subscribe(                 system.out::println                  t -> t.printstacktrace()                  () -> system.out.println( completed ))           combined.subscribe(                 system.out::println                  t -> t.printstacktrace()                  () -> system.out.println( completed ))       output without these changes:      11 + 21 30 completed completed      output with changes:      11 + 21 30 completed 12 + 22 30 completed     #### test case      java     @test     public void testconnectdisconnectconnectandsubjectstate() {         observable<integer> o1 = observable.just(10)          observable<integer> o2 = observable.just(20)          observable<integer> combined = observable.combinelatest(o1  o2  new func2<integer  integer  integer>() {              @override             public integer call(integer t1  integer t2) {                 return t1 + t2              }          }).publish().refcount()           testsubscriber<integer> ts1 = new testsubscriber<integer>()          testsubscriber<integer> ts2 = new testsubscriber<integer>()           combined.subscribe(ts1)          combined.subscribe(ts2)           ts1.assertterminalevent()          ts1.assertnoerrors()          ts1.assertreceivedonnext(arrays.aslist(30))           ts2.assertterminalevent()          ts2.assertnoerrors()          ts2.assertreceivedonnext(arrays.aslist(30))      },Util,IO
1518,fix typos in javadoc comments.,recieve  ->  receive,Util,IO
1558,mergemap generics,fixes issue #1550,Util,IO
1559,more consistent hooks for scheduler plugins.  this is a rework of #1514.,- deprecated rxjavadefaultschedulers and rxjavadefaultschedulersdefault (i think these names are confusing) - added rxjavaschedulershook - ability to override entire schedulers from scratch - ability to decorate action0 before submission to scheduler  the main change from #1514 is the decoration of action0 instead of runnable.  action0 is an improvement as all schedulers must handle these  whereas not all schedulers handle runnables.,i18n,Util,IO
1560,flatmap overloads,- migrate mappair to use actual merge instead of reimplementing it - deprecate mergemap  done during api review with @headinthebox,Util,IO
1561,some codacy issues removed and some more use of getfieldoptional,minor cleanups,IO,Util
1567,fix 1530: integrity checker should ignore unescaped hashes in url field,addresses #1530  -   -,IO,Util
1568,compose/transformer,see  for discussion that led to this.  this does not have co/contra-variance which needs to be figured out.,IO,Util
1569,removed support for optinally following crossrefs since it wasn t used,initialized to true and set to true,Util,Test,IO
1576,fixed undo when update time stamp on edit is enabled,fixed a bug where the field change compound was not ended  leading to that field changes could not be undone when  automatically update time stamp on edit  was enabled. -,IO,i18n,Util,Test
1581,fixed #1264,i finally got around to understand the reasons for #1264 (and parts of #1464). it turned out that commands starting with c was handled in a special way and that  {\v{s}}  was for unknown reasons used as  line tabulation set .  as a result  not only does jabref now render  \v{s}  and  \chi  correctly  it also renders combining accents  see screen shot. <img width= 291  alt= capture4  src=  > -   -   (),IO,Util
1582,extend the openconsolefeature,extend the openconsolefeature by offering a selection between default terminal emulator and configurable command execution.  @koppor  s wish (see  was to have a selection between own terminal emulators. this feature extension provides that. - add:   - radio selection to the externaltab   - program execution to jabrefdesktop   - new jabrefpreference entries   - ui outputs   - localization keys  screenshots: ![oc_sc3]( -   -   (),IO
1589,implement 1516,implements #1516. selected fields ( isbn    url    uri    issn    doi ) are displayed in upper case in the entry editor. -,IO,Util
1592,decouple dispose function for using,as per discussion at https://github.com/netflix/rxjava/issues/1466,Util,IO
1593,some globals.prefs injection in logic and model,based on the discussion that globals should not be accessed from logic and model.,Util,IO
1599,fixed #1592,this should 1592. -,IO,Util
1602,make retrywhen the same with the scheduler as the retrywhen without the scheduler,came up in #1580,Util,IO
1610,deprecate multicast without factory,this method is nuanced and generally causes broken behavior if the observable is subscribed to more than once.,Util,IO
1611,fix outofboundsexception when importing multiple entries in medline format,@zellerdev found out a bug when importing more than one entry in the medline format into jabref.  jabref version jabref 3.5 windows 8.1 6.3 amd64  java 1.8.0_25  steps to reproduce: 1. select more than entry from [here]( . 2. select  send to file  and then choose  medline  format. 3. open jabref and select  import into new database . 4.  i get an indexoutofboundexception shown on the console and no entries are imported.  alternatively use the testfiles i added in this pr.  quick fix: add an if clause around the substring method  that causes the exception. -,IO,Util
1613,moving netflix to reactivex,i fixed the readme by hand and then did a replace search for netflix/rxjava to reactivex/rxjava to replace github wiki and issue occurences.  i did a eyeball sanity check so i hope things are good. my gut feeling says there are many more com.netflix occurences somewhere else  but it s a start to get it all back to  normal .,i18n,Util,Test,Interpreter,IO
1632,composite exception - circular reference handling,the printstacktrace and getcause implementations have different approaches to handling circular references. if on a jvm where printstacktrace is called directly  the full causal chain will always be printed. if on one such as dalvik where getcause is invoked directly then it will cut the causal chain if it sees a duplicate.  see https://github.com/reactivex/rxjava/issues/1405,IO,Util,Test
1638,keep @comment text in a bib file,implements #1632. user comments marked by  @comment  are now kept in the bib file  regardless of whether they use brackets or not. -   -   -  manually tested changed features in running jabref,Util,Test,IO
1645,remove parallelmerge,removing confusing operator before locked in stone with 1.0.0 final,Util,IO
1646,add back getargument(int  class) to circumvent compilation issues,also add  @notextensible  to several of our interfaces to document they,IO,Util
1705,improve db tests,the new database tests cannot be run locally as it requires postgres and mysql to be installed. therefore  i reused the idea of the integration tests to separate the tests as  databasetest .  alterantive solution: assumetrue ( in  @beforeclass  and check whether the database is there. i opted for the separate grdle task to make it obvious when the database test is done and when not.  <s>minor thing: i added  assertutil.assertdoesnotthrow  (inspired by  to improve the output of unexpected exceptions.</s>,IO,Test
1715,298: replaces objenesis references from stubbing classes with plugin equivalents.,this enables the ios mockito plugin,IO,Util
1716,remove observable.parallel,see https://github.com/reactivex/rxjava/issues/1673,IO,Util
1727,groupby/groupbyuntil changes,this is a proposed change to  groupby  and  groupbyuntil  that does the following:  1) eliminate  groupbyuntil  and rolls that functionality into  groupby  2) adds support for reactive pull backpressure to  groupby  3) child  groupedobservable s can now be unsubscribed and they will be cleaned up and then new instances for the same key can be emitted  like  groupbyuntil  worked  except that now instead of passing in a special durationselector function  the child can be composed using  take / takeuntil /etc to cause an unsubscribe.  if the previous non-obvious groupby behavior is wanted  then instead of unsubscribing  it can be filtered to ignore all further data  which is what the old groupby used to do when a child was unsubscribed.  the reason for these changes are: - adding backpressure to  groupbyuntil  was very difficult with its existing signature as the duration selector function effectively required a  groupedobservable  being a  publishsubject  which meant multicasting. in this specific case it may have been possible to do backpressure with the multicasting  but it would be difficult and non-obvious as generally multicasting means the stream is  hot  and reactive pull backpressure can t be applied. - the existing  groupby  almost always confused people as to what would happen when they unsubscribed a child using  take  or  takeuntil . it always surprised people that it meant all further data would be dropped but the key and group would not be garbage collected. almost always on an infinite stream people determined they needed  groupbyuntil   but only after stumbling around. after speaking with @headinthebox about this briefly we had enough agreement to submit this proposal and discuss further.  now  groupby  can behave by default as people expect with  unsubscribe  and support infinite streams  garbage collection  etc as well as backpressure.  i will provide usage examples below.,IO,Util
1733,fixed concurrentmodificationexception when removing a field in the so…,1724. really simple it turned out  no changelog since i m not sure if it was in 3.5. -  -   ( ()?),Test,Util,IO
1736,fix trampolinescheduler nullpointerexception,i tried for about 30 minutes to replicate the npe reported in  but couldn t. it makes sense reading the code that an unsubscribe could trigger an npe though so i m fixing it as per recommendation of @dylansale even though i can t replicate. i confirmed that the items are being put in the queue before the wip variable is incremented  so that concurrency seems okay.,Util,IO
1738,added method singlefromstringoptional,seemed convenient  even though the source does not fully benefit from it.,Util,IO
1740,got rid of globals in tests,removed not needed initializations of  globals.prefs .,IO,Util
1742,emptyobserver and testobserver,- remove  emptyobserver  as it was confusing compared to  observers.empty()  (1741) - make  testobserver  not throw  onerrornotimplemented  if a delegate is not provided (1571),Test,IO,Util
1743,disable some actions while no database is open,i am working on this issue   i have disabled and greyed out all menu items and toolbar buttons that should not be active if no database is open. (take a look at screenshots)  ![2016-09-05_14h06_41]( ![2016-09-05_14h08_15]( ![2016-09-05_14h08_31]( ![2016-09-05_14h08_52]( ![2016-09-05_14h09_09]( ![2016-09-05_14h09_22]( ![2016-09-05_14h11_28]( ![2016-09-05_14h11_41]( ![2016-09-05_14h11_55]( ![2016-09-05_14h12_04]( ![2016-09-05_14h12_20]( -   -  insert screenshots of menu item and toolbar item  if no database is open.,IO,Test,i18n,Util
1745,1743: clarify default answer in 3.0.0,api changes postponed to 4.0.0. default answer has not been changed in 3.0.0.,IO,Util,Test
1747,cleanup: final and utility classes,- added  final  to utility classes. - added private constructor to utility classes.,Util,IO
1757,cleanup: added missing annotations  removed unnecesary annotations,plus fixed a few unnecessary casts i missed last time.,Util,IO,Interpreter,Test
1761,added more characters to converters,added a number of characters to the converters. sorted a bit so that it is easier to find the gaps.,IO,Test
1762,1758: method generictypeextractor#findgenericinterface always …,…returns first interface,Test,Util,IO
1766,added program to generate a table of all characters and fixed some ch…,i made a small program that generates a latex table with all characters in the converter. it prints the number  the character as unicode  \symbol{nnn}   the resulting latex symbol  and the latex code  see the attached file. in this way  we can make sure that all symbols makes sense (some of the current one were incorrect). also relates to #1761 which is not currently included.  i note two thing:  1) using  \usepackage[utf8]{inputenc}  did only work for accented characters. i had a version where i printed the unicode character in the table  but that only rarely worked  although they appeared nicely in the .tex-file 2) packages and fonts are a bit of a mystery. it may be that with a better font and maybe a few more packages  more symbols are shown. [chargen5.pdf]( -  -   ( ()?),IO,Test,Util
1767,executorscheduler delivers uncaught exceptions,instead of swallowing unhandled errors  executorscheduler delivers them to the executing thread s uncaughtexceptionhandler.  this addresses the same issue as reactivex/rxjava#1682  but for executorscheduler which does not used scheduledaction.,IO,i18n,Util,Test
1776,observable.compose generics,manual merge of  with an extra unit test added.,IO,Util,Test
1777,quickfix for import into current [shared] database,quickfix for the comments in   > jabref shows  aktualisierung verweigert. den eintrag  den sie zur zeit bearbeiten  ist auf der geminsam genutzen datenbank nicht mehr vorhanden.  for each entry.  and  > after the import  all entries appear twice.  bug occured due to change of a  bibentry  before adding it into local database.,i18n,IO,Test,Util
1778,change transformer to func1<observable<t>  observable<r>>,less variance is better. i cannot find any bad case for this pr. can someone help test it in java 8 and groovy?,Test,IO,Util
1784,publish with backpressure,implementation of  publish  with backpressure:   this moves away from using the  multicast  operator and  publishsubject  as per discussion in #1732 and #1779,IO,Util
1786,moved preference constants to jabrefpreferences and renamed,all preference constants should be in  jabrefpreferences .  relates to   also  renamed some variables (not the actual preference strings).,IO,Util
1787,removed entry preview toolbar,has been disabled since long so might as well remove the code.  also cleaned up the preferences a bit. -,Util,IO
1788,upgraded junit jupiter 5.1.1 -> 5.4.2,we need higher version of junit jupiter to reproduce and 1630,IO,Util
1789,replace all file dialogs with new filedialog,and set default filefilter or aggregate filefilter for all supported types. -  database from aux -  remove browseaction,IO
1802,add hasobservers method to subjects (#1772),as per   serializedsubject now keeps track of the actual subject. bufferuntilsubscriber synchronizes on the state guard.,Test,i18n,Util,IO
1806,fixed junit5 concurrency bug,fixed junit jupiter mockitoextension so that it behaves correctly in a parallel execution with nested tests. i found this issue recently when working on the extension. threadlocal here is ok but i m happy to use a different solution if someone has a better idea.,IO,Util
1809,update javadoc.io link from /page/ to /doc/  which gives an extra nav…,… bar on the top so that users can easily navigate to old versions,Util,i18n,IO
1817,fix synchronous onsubscribe exception skips operators,fixes https://github.com/reactivex/rxjava/issues/1816,Util,IO
1834,subject.toserialized,adds toserialized as discussed in https://github.com/reactivex/rxjava/issues/1748,i18n,IO,Util
1835,scan/reduce with seed factory,adds overload with seed factory as per https://github.com/reactivex/rxjava/issues/1831,Util,IO
1866,fix memory leak in bounded replaysubject due to retaining the node index,indefinitely once the subscriber caught up.  for issue #1865.,i18n,Util,IO
1882,remove unused scheduler.parallelism,before hitting 1.0 removing this api as it is not used.,Util,IO
1884,fix scan/reduce/collect factory ambiguity,this puts the seed factory on  collect  and removes it from  scan  and  reduce  due to ambiguity. see  and   the  collect  api was already very close so this fixes it to use a seed factory so the signature is now:      java public final <r> observable<r> collect(func0<r> statefactory  final action2<r  ? super t> collector) {      i remove the factory overloads for  scan  and  reduce  due to the issue in #1881 related to generics  type erasure and lambdas causing ambiguity and compilation failures.  we may want to add at least a  scan  impl in the future with a seed factory  but it will need a different name if we do such as  scanto . i don t want to do that now for 1.0 so we ll need to revisit that for 1.1 with more time to think about it.,IO,Util
1903,fix testscheduler handling of immediate vs virtual time,manual merge of  by @ylecaillez,Test,IO,Util
1907,fileutil: copy files using files methods,jabref now copies files by using java.nio package instead of java.io  see: 23,IO,Util
1918,improve localizionconsistencytest to include javafx files,-->  the fxml files may contain localized strings in the form  <label text =  %localized description >  (and not  localization.lang( localized description  )). i adapted the localizationparser to also look for these kind of strings. together with #1753  the javafx branch should now build without errors.  for some reason the managejournalabbreviationsview has some problems with localized strings  although the same code works for the other dialogs. this needs further investigations (not part of this pr). -   -   -   () -  -   ( ()?),IO,Util
1922,set removeoncancelpolicy on the threadpool if supported,this should solve the task retention problem of unused timeout tasks mentioned in #1919.  i know java 7+ scheduledthreadpoolexecutor has the  setremoveoncancelpolicy  and i remember seeing it in android although i can t tell from which api version.  in java 6  this can t be solved without rewriting the entire scheduler or using a backported executor.,IO,Util
1928,support citationstyles,implements #119.  the user can choose multiple citationstyles which he can cycle threw in the preview panel (forward with <kbd>f9</kbd>  backwards <kbd>shift</kbd> + <kbd>f9</kbd>  both are in the context menu and the menu bar) . as discussed i removed the 2nd preview. ### preview before:  ![preview_before]( ### preview after:  ![preview_after]( ### preferences before:  ![preferences_before]( ### preferences after:  ![preferences_after](  i didn t include the localization (other the english) on purpose because they create unnecessary conflicts when rebasing quite often (i push them when everything else is fine).  the help page has to be updated too. i do that as soon as this pr is merged. -   -   -   () -  -   ( (  warning: currently i read the available citationstyles at runtime. i had problems reading them from the gradle dependency thus currently they are only found when jabref is started from the jar.,Util,IO
1937,scheduler.worker to be finally unsubscribed to avoid interference,and leaks.,Test,IO,Util
1947,redesigned about dialog in javafx,as discussed in #968 the about dialog is still not satisfying and therefore i redesigned it. the new design is a more flat like design with all important information in one place. the version still clickable and copies the version information to the clipboard and the logo is a hyperlink to www.jabref.org. i also changed the copied version string to include jabref  java and os version so it is the same as in the master branch.  ![screen shot 2016-09-10 at 14 59 58]( -   -   -   () -  -   ( ()?),Test,i18n,Util,IO
1960,doonrequest,similar to doonsubscribe  doonnext  etc,Util,IO
1973,fixed test issuing non-serialized messages to the subject.,should resolve the test failure of #1972 .  when the main part of the test succeded  an oncompleted was sent out from the main thread which was not serialized in respect to the onnext(1) issued from the worker thread  therefore  two replay was attempted sometimes. at first the caughtup was seen false  the replay was entered but the next instruction cleared the index causing the illegalstateexception.,Util,Test,IO
2053,fixed wrong bounded replaysubject use in test.,same issue as before.,Util,Test,IO
2332,operator retry test fix attempt,maybe the error function was not emitting events properly.,Util,IO
2335,a set of stateless operators that don t need to be instantiated,for  lift()  all the time.,Util,IO
2447,fail early if a null subscription is added to a compositesubscription.,otherwise  it ll just fail late when unsubscribing  which is much harder to trace.  i discovered this while writing  a unit test  when i didn t properly mock out a method to return a valid observable. seems like it would be more likely to happen in test code than production  but still could be a stumbling block that s hard to track down if there s a bug in app logic adding a null subscription.,Util,IO
2465,scheduledexecutorservice: call purge periodically on jdk 6 to avoid,cancelled task-retention.  first debated in #1922  see also #1919.  we may want to discuss the naming of system parameters. i chose these so rxjava 2.0 specific properties may be trivially separated:   io.reactivex.rxjava.scheduler.jdk6.purge-frequency-millis  specifies the purge frequency in milliseconds. default is 1000.   io.reactivex.rxjava.scheduler.jdk6.purge-force  forces the use of the purge (if set to true) even if the setremoveoncancelpolicy is supported. the benefit is that removing cancelled tasks now runs on a different thread so the main pool thread doesn t waste time on them. the drawback is the retention window can be still to large.  do we have a wiki page where such parameters are listed?,IO,Test,Util
2470,subject state information methods & bounded replaysubject termination,fix.  this pr aims to support the requests in #2331 and #1897 by adding methods to the (final) subject classes that let developers access in-flight state in a snapshot fashion.   this may be considered safe api change because all subject classes were final already so adding extra methods won t break anyone s code (and we will be careful with our observable in the future). -  notificationlite  is now extended with two missing value checks: isnull and isnext. - each subject has  hascompleted    hasthrowable  and  getthrowable  methods  however  i can t add them to  subject  because that would be an incompatible api change. - where applicable   getvalue  and  getthrowable  return  null  instead of throwing exceptions so users are encouraged to call hasxxx methods beforehand. - there was a chaining bug in the bounded replaysubject: because the terminal value was added after a potential pruning  the node links could get broken and concurrent replays might not have seen the terminal value. - since  replaysubject  can have multiple values  i ve added  size()    hasanyvalue()  (isempty is taken) and  getvalues()  methods to make a snapshot of the current buffer contents whether or not the  replaysubject  has terminated (the usual tolist() would wait until the subject has terminated).  - the unrelated  operatormergetest.testconcurrency  hangs for me for some reason without activity (either a buffer bug or a merge bug is in play there). i ve added a timeout so it doesn t stop the other tests.,Util,IO,i18n
2471,fixes npes reported in reactivex#1702 by synchronizing queue.,also adds a unit test for regression.  it appears there is a potential race condition if something adds to/removes from the pq while it s _inside_ the  poll  operation  which is where the exceptions in #1702 seem to have actually come from. therefore  the initial null check didn t really address the original problem. the test here seems to reliably recreate those conditions.  i considered using a priorityblockingqueue instead of synchronized  but since the isempty and poll calls should not allow something to interleave between them and access the queue  a synchronized block seemed wiser here.,Util,IO
2477,backpressure tests fix0121,- increased the limits of  testmergeasyncthenobserveon  - fixed  testonbackpressuredrop  because in case there was no drop at all  the last value would be num - 1. - changed  slow_pass_thru  to perform non-trivial work that can t be optimized away by jit.,Util,Test,IO
2493,operator takeuntil with predicate,take values and check the condition after the value is emitted.  for enhancement request #1649.,Util,IO
2547,warnings cleanup,more cleanup: - removed unnecessary imports - added missing generic types - added suppresswarning annotations,IO,Util
2548,subscriber.request should throw exception if negative request made,as per discussion in #1956 and #2545  making a call to  subscriber.request(n)  with negative n should throw an  illegalargumentexception .  includes unit test.,Util,Interpreter,IO,Test
2550,bib database -> library,2095,Interpreter,IO,Test,Util
2553,rxringbuffer with synchronization,changed rxringbuffer to use synchronized blocks for correctness. we are relying here upon biased locking and lock-elision. it gets pretty close to the baseline  benchmark:      benchmark              (size)        1.x   |    pr#2333  |    this    1syncstreamofn              1  3779678 748 | 3767936 028 | 3775157 195 1syncstreamofn           1000    21250 675 |   18530 542 |   20759 900 1syncstreamofn        1000000       20 406 |      17 712 |      19 768 nasyncstreamsofn            1   115390 116 |  115629 480 |  113859 532 nasyncstreamsofn         1000        2 579 |       2 546 |       2 435 nsyncstreamsof1             1  3543551 254 | 3602242 709 | 3539162 675 nsyncstreamsof1           100   299166 910 |  301703 721 |  302642 458 nsyncstreamsof1          1000    28404 751 |   28420 833 |   28030 881 nsyncstreamsofn             1  4054571 577 | 4003156 953 | 4061124 105 nsyncstreamsofn          1000       24 324 |      20 601 |      23 137 twoasyncstreamsofn          1    85846 727 |   85682 983 |   86691 331 twoasyncstreamsofn       1000     1823 137 |    1889 458 |    1761 977 reamofnthatmergesin1        1  3724179 351 | 3725068 220 | 3715637 985 reamofnthatmergesin1     1000    19051 928 |   19392 595 |   19487 059 reamofnthatmergesin1  1000000       18 265 |      18 069 |      18 102      changes (in respect of 1.x): - using spscarrayqueue  removed look-ahead and null check - using peek to check for emptyness in certain positions - using short-as-possible synchronization blocks,Util,IO
2559,onsubscribefromiterable - add request overflow check,a subscriber like so provokes a hang from  onsubscribefromiterable  due to overflow to negative of requested field:      java     @override     public void onstart() {         request(2)      }      @override     public void onnext(integer t) {         request(long.max_value-1)      }      i ve moved the  getandaddrequest  method that does the overflow check to a new  rx.internal.operators.util  class that is also now used by the request overflow check in  operatormerge .  of course there are plenty more of these to be done. i propose to do them bit by bit.,IO,Util,Interpreter
2561,updating queue code from jctools,rebased onto master.,Util,IO
2565,obstruction detection in tests.,to make sure tests don t hang the computation scheduler.,Test,Util,IO
2572,give more time to certain concurrency tests.,on my windows machine  i ve virtualized an ubuntu machine and adjusted some tests according to the time it takes on this  slow machine .,IO,Util,Test
2574,sizeeviction test needs to return false,when a replay subject with size and time eviction policy is used then any observer that subscribes after some events are already pushed will not get those older events.  this is because if an observable is not yet terminated then on subscription by any new observer the check for event validity fails on the size eviction policy hence that event is dropped and not pushed to the new subscriber.  relevant call stack:    {{{       timeonadd.call      boundedstate.replayobserverfromindextest         boundedstate.replayobserverfromindextest              pairevictionpolicy.test }}}      test case:  - add test case for this use case  fails if without changes.,Util,i18n,IO
2585,replace urldownloading logic,imho the downloading logic should be based on some stable  library.,Util,IO
2591,changed the naming of the newthreadworker s system parameters,changed the parameter naming as per [discussed](https://github.com/reactivex/rxjava/pull/2465#discussion_r24035981).,IO,Util
2594,revert behavior change in testsubscriber.awaitterminalevent,reverts change made at   see discussion at   the javadoc for this method clearly states that it will wait until completion or timeout. it does not say it will throw an exception on timeout  so we can not start throwing as that is a behavioral change.,Util,IO
2601,remove ordinalstosuperscriptformatter from recommended biblatex save actions,2596,Util,i18n,IO
2622,changed observable.empty() into a stateless constant observable.,empty was always stateless so creating a new instance all the time (especially through a  from(iterable) ) is wasteful. besides   oncompleted  events don t have to be backpressured.  should enable identity based optimizations discussed in #1653.,IO,Util
2627,flatmap overloads with maximum concurrency parameter,for issue #2626.  there is no point in adding maxconcurrent to flatmapiterable because each iterable is subscribed to sequentially and run to completion.,Util,IO
2630,cast back observer to subscriber if passed to subscribe(observer),rebased #2600.,IO,Util
2642,fix a potential memory leak in scheduleperiodically,there is a potential memory leak in  scheduleperiodically  that may keep a reference to  action  after  unsubscribe .   because  mas.set  is called after  schedule    it may replace a new subscription (created in  recursiveaction ) with the old one. therefore   unsubscribe  won t be able to unsubscribe the new subscription and will keep the reference to  action  until the period time elapses.  this pr fixed it by calling  mas.set  before  schedule .,Util,IO
2648,takewhile: don t unsubscribe downstream.,2647 issue with takewhile.,IO,Interpreter,Util
2759,more javafx editors,-->,IO,Util
2760,operator: withlatestfrom,named after rxjs  for issue #405,IO,Util
2762,optimized isunsubscribed check,extracted isunsubscribed optimization from #2603.      benchmark                                   (size)   mode   samples          1.x        2603     r.s.computationschedulerperf.observeon           1  thrpt         5   104110.926  104707.286 r.s.computationschedulerperf.observeon          10  thrpt         5   100723.402  105825.148 r.s.computationschedulerperf.observeon         100  thrpt         5    24609.763   65571.461 r.s.computationschedulerperf.observeon        1000  thrpt         5     3212.434   13020.027 r.s.computationschedulerperf.observeon       10000  thrpt         5      955.002    1555.493   r.s.computationschedulerperf.observeon      100000  thrpt         5       96.628     160.218   r.s.computationschedulerperf.observeon     1000000  thrpt         5        9.508      16.559   r.s.computationschedulerperf.subscribeon         1  thrpt         5   114212.000  114485.516   r.s.computationschedulerperf.subscribeon        10  thrpt         5   112376.809  112270.024   r.s.computationschedulerperf.subscribeon       100  thrpt         5    88433.002  104240.739   r.s.computationschedulerperf.subscribeon      1000  thrpt         5    31503.640   64446.984   r.s.computationschedulerperf.subscribeon     10000  thrpt         5     3932.988    8200.048 r.s.computationschedulerperf.subscribeon    100000  thrpt         5      437.626    1439.069 r.s.computationschedulerperf.subscribeon   1000000  thrpt         5       43.104     146.385,Util,IO
2767,optimized scalar observeon/subscribeon,redone #2603.  run on i7 920  2.6ghz  windows 7 x64  jdk 1.8u31      benchmark      (size)       this   score error       1.x   score error observeon           1  160377 408     3091 205  140913 081     7097 415 observeon          10  132990 049     1477 661  125288 149    14304 259 observeon         100   43701 203     2342 570   43840 921      944 682 observeon        1000   11603 952     2377 205   11400 340     1400 628 observeon        2000    6769 716      220 476    6853 283       71 276 observeon        3000    4753 876      326 497    4741 108      120 612 observeon        4000    3616 782      212 285    3632 433      433 754 observeon       10000    1544 141       28 796    1548 504       61 419 observeon      100000     149 573       14 974     150 924        8 331 observeon     1000000      14 909        2 079      13 658        7 702 subscribeon         1  160639 801    16463 799  156911 862     2463 637 subscribeon        10  148883 172     6885 684  151514 397     9425 348 subscribeon       100  133756 358     3329 421  133327 933     3479 124 subscribeon      1000   56411 785    22525 962   52902 999    19948 305 subscribeon      2000   35471 110    12240 514   34272 374    16515 454 subscribeon      3000   25868 564     2755 244   26291 293     2435 165 subscribeon      4000   20453 512     2996 777   19598 400     4643 195 subscribeon     10000    8817 797      465 195    5389 428      272 784 subscribeon    100000     958 665       22 157     900 036      320 547 subscribeon   1000000      91 606        2 462      91 396        3 407      note that since the tests create a lot of garbage  some perf numbers have quite some error margin: some appear to be faster with this pr while others appear to be slower  even if they are not affected by the changes.,IO,Util
2804,observeon throughput enhancements,squashed commits of #2773.  ---  further optimizations to  observeon . - using spscarrayqueue directly in observeon instead of  ringbuffer  to avoid the synchronization block - split tracking structure to serial (subscriptionlist) and timed (compositesubscription) in  eventloopsscheduler  which improves the sequential scheduling performance because a completing task s subscription will be most likely the first item in the underlying linkedlist.  benchmark: (i7 920  window 7 x64  java 1.8u31  5x1s warmup  5x5s iteration)      benchmark      (size)         1.x    1.x error      this pr   this error observeon           1  162326 012     2458 085   166536 559     3154 174 observeon          10  132471 205     1857 434   142517 407     3734 424 ++ observeon         100   43282 527     2145 910   112238 179     2270 103 ++ observeon        1000   11779 482      173 370    25726 564      309 193 ++ observeon        2000    6756 211       89 196    12123 276      276 470 ++ observeon        3000    4736 893      253 796     9342 673      263 667 ++ observeon        4000    3661 874       51 359     7346 015      123 049 ++ observeon       10000    1519 282      108 503     1546 547       21 885 observeon      100000     151 193        2 569      156 160        1 974 observeon     1000000      15 373        1 310       15 660        0 153 subscribeon         1  161290 037     2867 882   164952 259      797 408 subscribeon        10  151842 821     2448 734   147906 491     4373 682 subscribeon       100  136418 065     1773 558   136889 052     2362 203 subscribeon      1000   58389 066     4559 030    59482 225     1372 692 subscribeon      2000   34089 152     9318 205    36581 203     1264 100 subscribeon      3000   26712 331     1265 442    26519 320     1319 293 subscribeon      4000   20118 326     2018 439    20163 395      839 709 subscribeon     10000    8914 213      677 164     9059 934      200 158 subscribeon    100000     958 038       43 349      965 663       60 708 subscribeon   1000000      91 849        2 148       92 706        1 202      notes: - at  size = 1   the throughput varies in a +/- 3000 range on each run  and since the changes don t touch the scalar optimization  there is no real improvement there. - at  size = 10.000  my system reached either the cache capacity or the os scheduler s time resolution so there no improvement there on. - at  size = 100.000  and  size = 1.000.000  the throughput doubles if i introduce some extra delay (i.e.  via sleep(1) or some extra work). - the benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput  subscribeon(1.000.000)  from 91 to 136.   since it conflicts with #2772 anyway  this is pr is to let others verify the optimizations actually work on other oses  because on my windows  i sometimes get significant variance in the throughput during iterations. increased iteration time may be required as well.,IO,Util
2807,corrected all java interfaces declarations,just little java syntax fix for interfaces  i checked all interfaces in rxjava.  @benjchristensen i can add and configure  checkstyle  gradle plugin for rxjava if you don t mind  mm?,Util,Interpreter,IO
2817,fix for non-deterministic: testonbackpressuredropwithaction,it is possible the synchronized block inside rxringbuffer blocks out the firehose thread long enough that there will be enough requests cumulating up and no values have to be dropped. the change increases the taken value count and should decrease the likelihood of such no-drop situation.,Test,Util,IO
2820,backpressure for window(size),changes to the  window(size)  operator to respect the backpressure on its _outer_ observable: asking for 1 window will request  size  values from upstream.   backpressure is ignored on the inner observable for now  partially because the  bufferuntilsubscriber  doesn t support it  partially because coordinating the inner requests with the outer requests needs more thoughts. the problem is that the outer has to request at least 1 element from upstream in order to open the window  but the inner subscriber may not want that single element just yet or would request more than the remaining window size and it would trigger new windows whose value it can t receive but would overflow the next window s observers.   window(size  skip)  is not changed as i need to think about it more.,IO,Util
2825,fixed javadoc for observable.repeat() method,removed wrong link inside of javadoc for observable.repeat() method,Util,IO
2831,testonbackpressuredropwithaction restored original test count,not for merge. diagnosing travis build failure.,IO,Test,Util
2862,fix export and import of ms office day/year/month acessed fields,fix possible npe in date parsing,IO,Test,Util
2880,use singleton reduction functions in count and countlong,every call to observable.count() and countlong() instantiated a new func2 which i have now made a singleton in the interests of minimizing gc pressure.   can anyone in the know confirm for me that there is gc benefit from this one because i assume a sophisticated enough compiler could replace the new func2 call with a singleton during its optimizations.  if this one is worthwhile then there are heaps more of these in  observable.java  and possibly elsewhere.,IO,Util
2883,proposal: standardized subject state-peeking methods.,this pr modifies the  subject  class to host the union of the state-peeking methods of the various  subject  implementations and fixes the inconsistent behavior of  replaysubject.getvalues(t) .  the changes enable the  serializedsubject  to relay such state-peeking method calls into the wrapped subject and allows future  subject  wrappers to do the same (#2458).,i18n,Util,IO,Test
2901,operators tolist and tosortedlist now support backpressure,added support for backpressure in  tolist  and  tosortedlist : they emit their buffered content only when downstream actually requested it.  few other notes: - added overload to  tosortedlist  taking a  initialcapacity  argument which should help reduce the number of times the buffer needs to be resized. - the func2 parameter of  tosortedlist  is now wrapped once per operator instead of once per subscriber. - using non-final list buffers which are set to null on completion to not hold onto the buffer. -  tosortedlist now returns a modifiable  arraylist : since it is a handoff procedure  there is no value in forcing a non-modification constraint on the emitted list (similar to  tolist  even before this pr).,Util,IO
2902,prevent exceptionstest from hanging when testing stack overflow,on my i5 laptop  exceptionstest.teststackoverflowisthrow  hangs. this pr changes the test so that it confirms that significant stack depth occurs and in another test ensures that the fatal  stackoverflowerror  is thrown by  subscribe  when it occurs in  onnext .  i also removed some unused code from the original test and some extra subscriptions that didn t seem to serve a particular function.,Test,IO,Util
2905,use singleton operators where we can,to reduce gc pressure use singleton  operator s for  observable.single    distinct    distinctuntilchanged     onbackpressurebuffer     isempty .,IO,Util
2907,fixed schedule race and task retention with executorscheduler.,fixes a race condition with the timed schedule (first potentially overwriting the result of the untimed schedule in mas) and a scheduled task retention problem due to not tracking those.,IO,Test,Util,i18n
2914,optimization - use operatortakelastone for takelast(1),this is an optimization for  takelast  when called with parameter 1. using  operatortakelast  carries unnecessary overhead for the  takelast(1)  case and a decent throughput improvement (x2) for streams of 100 elements or more is seen in the benchmarks below.   takelast(1)  is used by the following operators which will also demonstrate a throughput improvement: -  last    lastordefault  -  reduce  -  collect  -  count    countlong   benchmarks comparing using the new  operatortakelastone  and  operatortakelast :      benchmark                                                        mode   samples        score  score error    units r.o.operatortakelastoneperf.takelastoneusingtakelastone_few     thrpt         5  2235516.141   129091.019    ops/s r.o.operatortakelastoneperf.takelastoneusingtakelastone_many    thrpt         5      103.980        9.233    ops/s r.o.operatortakelastoneperf.takelastoneusingtakelastone_some    thrpt         5   984689.481    48560.897    ops/s r.o.operatortakelastoneperf.takelastoneusingtakelast_few        thrpt         5  2187421.223    93550.379    ops/s r.o.operatortakelastoneperf.takelastoneusingtakelast_many       thrpt         5       54.575        2.054    ops/s r.o.operatortakelastoneperf.takelastoneusingtakelast_some       thrpt         5   466892.497     9267.405    ops/s,IO,Util
2915,observable.ignoreelements - optimize,as suggested by @akarnokd  instead of  filter(alwaysfalse)  use a custom operator and a singleton instance of it.  also snuck in the removal of an unused import from  operatortakelastonetest.java .,Util,IO
2923,fix key combination related exceptions,use keycombination match method,IO,Util
2928,merge and mergemaxconcurrent unified and rewritten,i ve rewritten  merge  and  mergemaxconcurrent  together from scratch. - added experimental  maxconcurrent  overloads to the array-merge and the mergedelayerror - fixed  operatormapnotification  beause it disregarded backpressure on its terminal emissions. - while debugging some merge test failures  i ve encountered a bug in operatorpublish with the same underlying logical error (see comment) and fixed it here. - accidentally introduced a few tabs  therefore  i went in and replaced all tabs with spaces. - i ve changed  operatormergetest.shouldnotcompleteiftherearependingscalarsynchronousemissionswhenthelastinnersubscribercompletes  because it is legal to get oncompleted without any request.,IO,Interpreter,Util
2948,more assertions for testsubscriber,additional asserts for testsubscriber and the option to specify the initial request via a constructor.,Util,IO
2963,set of standard producers and updated queue implementations with some,platform-safe variants.,Util,IO
2969,operator cache() now supports backpressure,i ve removed the controversial features and made the backing cachedobservable internal.  related issue #1483.,IO,Util
2970,deprecated onbackpressureblock,see #2799 for reasons to deprecate.,Util,IO
2972,add remove link context menu entry in file editor,-->,IO,Util
2975,deprecate and rename two timer overloads to interval,the existing six methods below didn t make sense and caused some confusion.      timer(delay  timeunit[  scheduler])   --> emits 0 after delay and completes timer(delay  period  timeunit[  scheduler])  --> emits 0 after delay and then i++ after every period forever interval(period  timeunit[  schduler)  --> emits i++ after every period forever      i felt that the middle method acted more like the third method  interval  than first method  timer .  this pr is to make this change.       timer(delay  timeunit[  scheduler])   --> emits 0 after delay and completes +@deprecated  timer(delay  period  timeunit[  scheduler])  --> emits 0 after delay and then i++ after every period forever +interval(delay  period  timeunit[  scheduler])  --> emits 0 after delay and then i++ after every period forever  interval(period  timeunit[  schduler)  --> emits i++ after every period forever      ps: yes  i understand that we can t delete the deprecated timer method. @davgross and if this pr is merged will have to change the images.,IO,Util
2982,testsubscriber - add factory methods,since we use this so much i ve added factory methods so we can infer types.   instead of       java testsubscriber<integer> ts = new testsubscriber<integer>()       we can write      java testsubscriber<integer> ts = testsubscriber.create()       i changed the tests in  onsubscriberangetest  to demo the usage.,Util,IO
2983,fixed multiple calls to onstart.,started investigating multiple calls to onstart based on #2979 and found a bunch  but since onstart can be overridden  i might have missed cases. in addition  i ve found a single place where a producer is set twice on a subscriber but again  many other places may exist.,IO,Util
2990,remove <pre> tag from entries fetched using mathscinet,-->,Interpreter,IO,Util
3000,fix mac keybinding by replacing ctrl it with meta key,this should make the entry editor commands work again with command+x /c etc,Util,IO
3012,mark libraryofcongresstest as a fetcher test,this test is currently failing with a 500 error. i would suggest to add it to the allowed failures and open an issue.,Util,Test,IO
3018,testsubscriber - fix awaitterminaleventandunsubscribeontimeout,the method  testsubscriber.awaitterminaleventandunsubscribeontimeout  did not unsubscribe on timeout. this pr fixes it.,Test,IO,Util
3019,update source tab when an entry is changed,attempts to fix the remaining part of #2888. the source tab is now updated each time an entry is changed in the editor.,Util,IO
3023,connectableobservable autoconnect operator,there is a need for auto-connection capability for an arbitrary connectableobservable similar to how it is possible now to use cache() as an auto-connected unbounded replay.  the new  autoconnect()  method let s specify the number of  subscriber s required for the real connection to happen and also offers the ability to receive the connection  subscription .  i ve also updated the parameter name of  cache(int)  to reflect it is a capacity hint and not a bound.,IO,Util
3029,replaced tabs with spaces for good.,somehow  every second rebase i do i get this tab-space conversion which pollutes my prs.,Util,Test,IO
3031,fix operatorflatmapperf.flatmapintpassthruasync perf test,this test was reported broken in   fixing by adding the use of latchedobserver.  previously broken test results:      r.o.operatorflatmapperf.flatmapintpassthruasync         1  thrpt         5   363615.622   115041.519    ops/s r.o.operatorflatmapperf.flatmapintpassthruasync      1000  thrpt         5      350.204      125.773    ops/s r.o.operatorflatmapperf.flatmapintpassthruasync   1000000  thrpt         5        0.319        0.184    ops/s      fixed results:      r.o.operatorflatmapperf.flatmapintpassthruasync         1  thrpt         5   102109.681     8709.920    ops/s r.o.operatorflatmapperf.flatmapintpassthruasync      1000  thrpt         5      403.071      130.651    ops/s r.o.operatorflatmapperf.flatmapintpassthruasync   1000000  thrpt         5        0.355        0.070    ops/s,IO,Interpreter,Util
3033,takelast() javadoc fixes  standardize parameter names (count instead of num),this pr includes these changes: - standardized parameter names for  take    takelast    skip    limit  to use  count  instead of  num  - enhanced the javadoc for  takelast  so it is clear for all overrides that if the observable contains less than  count  items then all will be emitted. - improved the exception message thrown by  operatortakelast  when  count  <0  addresses #3027,IO,Util
3034,instantiate empty lazily,the singleton  empty  returned by  observable.empty()  can be instantiated lazily because it is not always required.,Util,IO
3039,window with observable: fixed unsubscription and behavior,fixed unsubscription propagation of two window variants (boundary  start-end).  in addition  there was a discrepancy reported on [stackoverflow]( regarding the factory-boundary version. in rx.net  the factory is called whenever the previous boundary observable has produced a value. i.e.  instead of a series of  onnexts  from the same  observable   it uses a series of  observable s with a single  onnext  emission as a boundary indicator.,Util,IO
3042,add backpressure support for defaultifempty(),when looking at implementing backpressure support for  defaultifempty  the obvious strategy is to reuse  switchifempty  and get rid of  operatordefaultifempty . that s what this pr does.  there is a little bit of overhead with using  observable.from(arrays.aslist(defaultvalue))  as the alternate observable. might be nice to have a version of  observable.just(item)  that supports backpressure to use in its place (you ve mentioned this before @akarnokd).,IO,Util
3043,testsubscriber javadoc cleanup,- standardize on  asserts that  and  returns  - fix tenses and wordings,Util,IO
3048,fix ads fetcher,fix for #3035,Util,IO,Test
3049,single: add tosingle method to observable,- closes reactivex/rxjava#3038 - this method allows an observable which is guaranteed to return exactly one   item to be converted to a single - note: the semantics of this function are very similar to that of single - i.e. errors are passed through  more than one item results in an   illegalargumentexception  completion without emission results in a   nosuchelementexception and exactly one item is passed through the onsuccess   method of singlesubscriber,Util,IO
3052,reduce test failure likelihood of testmultithreadedwithnpeinmiddle,factored out the npe before the thread creation as it can take several milliseconds and other values can just slip through.,Util,Test,IO
3058,add and improve javadoc in subscriber,this pr  - adds missing javadoc to the  subscriber(subscriber)  constructor - improves (hopefully!) the javadoc for the constructor  subscriber(subscriber boolean)  - adds missing javadoc for  setproducer,Util,IO,Interpreter
3077,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make bytesource.read() use sizeifknown()  if available  to help avoid extra byte array allocations/copies.  also don t use 32 as the initial bytearrayoutputstream size in either version of bytestreams.tobytearray()  just seems way too small. use the default size for buffers instead  at a minimum.  also change concatenatedbytesource.sizeifknown() to return absent if its iterable of sources is not a collection  this is to prevent sizeifknown() trying to loop over an infinite iterable  which previous caused an infinite loop. that is also fixed in this cl  concatenatedbytesource.size() and sizeifknown() now stop and return long.max_value if the result would exceed that rather than going negative and continuing. but looping over an infinite iterable in sizeifknown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeifknown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> set serialversionuid in typetoken.java  relnotes=add a  serialversionuid  to  typetoken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc,IO,Util
3079,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** reason for rollback ***  causing outofmemoryerror in some tests.  *** original change description ***  stop using bytearrayoutputstream in bytestreams.tobytearray methods.  they were using bytestreams.copy to copy the source to the baos. this meant reading from the source into a buffer  then copying from that buffer to a different buffer in the baos. additionally  the way baos operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  instead  read directly from the source into a sequence of buffers. when a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2,Util,IO
3081,revert of cache/replay,#3076. i did revert commit of the pr that added back pressure support to the cache operator and ran a canary.  our production systems seem stable now even with the new merge.,Util,IO
3082,javafx fileannotationtab,i have created an initial port of the fileannotationtab. it is not done yet  as i am not so proficient in gui programming.,Util,IO
3085,only load the telementry service as a background task if used,up to now  the telemetry service was always running (even if the reporting was turned of).,IO,Test,Util
3086,improve executorschedulertest.testonbackpressuredrop,this test fails for me occasionally on my slow laptop when full test suite run because work is scheduled for only 1ms in the future. i ve decreased the probability of this one failing by changing the schedule to 50ms in the future.,Test,i18n,Util,IO
3092,fetcher timestamp,3074.,Util,Test,IO
3093,fix request != 0 checking in the scalar paths of merge(),requested amount could reach zero between the first check and entering the synchronized block where it has to be re-read in order to verify the scalar emission can really happen at that point  the new  testmergeasyncthenobserveonloop  test failed with  missingbackpressureexception  after ~20 rounds on my i7 4770k.  this might or might not relate to the canary failure  if combined with retry()  it could have failed over and over  but i m not sure where the worker retention might have happened.,Test,IO,Util
3109,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove pre-mature optimization of storing a total bit size for concatenatedhashfunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    3c3aedeb600306c689655fc8ca950f662cada625,Util,IO
3110,test coverage of rx.functions utility methods.,since these are public api methods  their expected behavior needs to be verified.,IO,Util,Test,i18n
3112,observers package test coverage and fixes.,this includes a rewrite of  serializedobserver  to have a more cleaner exception semantics.  the  testsubscribertest  can be improved further but i ve run out of time for today.,Util,Test,IO
3117,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix tostring of nonserializablememoizingsupplier  3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> use splitter instead of string.split  in internetdomainname.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> use splitter for ipv6  too. this eliminates usage of java.util.regex from this file (which is used via string.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> use diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  it looks like the original change can cause an infinite loop in localcache.loadingvaluereference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> don t enable use of unsafe.getlong() on aarch64 devices.  android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422,IO,Util
3118,implementing the synconsubscribe,this is useful for creating an observable that reads from a data source in a synchronous manner. this is a rewrite of the  abstractonsubscribe  experimental class based on the ideas in #3003.,Util,Interpreter,IO
3121,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adding a new (initially internal  pending api review) static factory to striped.  this allows for custom lock injection  which might be useful for cases not covered by the currently existing factories. with this  striped<lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379,IO,Util
3129,fix retry with predicate ignoring backpressure.,apparently  we forgot about this operator. the backpressure handling is a trivial case with  producerarbiter . i ve also fixed some apparent code indentation error.  originally reported in #3128 with a test case which i didn t include due to its lengthy nature  however  i did run the test manually and both passed after the fix.,Util,IO
3141,increase size of file and keywords editors,in the new entryeditor  we have the problem that sometimes text in the textareas is hard to read  because the areas are very narrow. the reason for this is that java tries to fit them in the available display space. examples: #3130 #3117 #2941,Util,Test,i18n,IO
3144,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    16cb0383e37d26e1da4b6f7cfb7a9d21078d0912,IO
3147,export pdf/linked files,2539,Util,IO
3149,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> continue migrating to type annotations for @nullable  relnotes=n/a  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> remove usages of calipermain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include calipermain anymore.  such benchmarks should be run via the java_benchmarks generated binary directly.  github_breaking_changes=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae,Util,IO,Test
3150,window operators now support backpressure in the inner observable.,repost of #3050.,Util,Test,IO
3154,add preference to disable validation in the entry editor by default,adds a preference option for enabling/disabling validation in the entry editor: #3100 (but not the ui),Util,IO
3155,safesubscriber - report oncompleted unsubscribe error to rxjavaplugin,discussed in #2464  when an observable emits  oncompleted  but  unsubscribe  in  safesubscriber  throws then the error should be reported to the  rxjavaplugin  error handler and if that fails a stack trace is written to  system.err .,IO,Test,Util
3169,allow removal of online links from entry,don t call paths.get on  link to prevent an exception,Util,IO,Interpreter
3172,rs dependency  some basic observable/observer methods.,- added compile dependency for reactive-streams. - added some basic methods to observable.  as long as the project defaults to 1.x  the create pr webpage will take a long time to render because it tries to compare a small branch 2.x against the huge 1.x branch with lots of  deleted  content. a separate project would be much simpler to operate.,IO,Util
3175,some safe queue implementations,spsc: - power-of-2 array - exact capacity array - linked array  mpsc: - linked,IO,Util
3183,refactored exception reporting of most operators.,added two convenient methods to  exceptions  which either throws a fatal exception or reports it with our without the causing value to an observer.,IO
3185,publishsubject  asyncsubject and a few helper classes,we can use  publisher  directly and no need for  onsubscribe .  operator  is still quite a convenience.,Util,IO,i18n
3186,disposable interface and a bunch of general resource containers.,mostly internal addition plus the public  disposable  interface.  naming of packages and classes can be changed at any time if one wishes,IO,Util
3188,schedulers (a few) + api  slight modifications to other classes,incomplete.  this pr has a few todo questions that require decisions.,IO,Util
3189,added a bunch of basic event sources and helper subscription,implementations.,IO,Util
3190,basic subscribers and plugin class,- safesubscriber - serializedsubscriber - rxjavaplugins (partial),IO,i18n,Util
3191,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.,Util,IO
3193,connectableobservable and autoconnect,refcount  will come later  although its behavior is sometimes surprising to developers: it disconnects and reconnects in certain use pattern. the alternative is to use  autoconnect(n  connectionconsumer)  which lets the developer explicitly disconnect.,Util,IO
3194,implement drag and drop reordering in general files list,add drag and drop related methods to viewmodelfactory,Util,IO,Interpreter
3196,fix tooltip for hotkey,before,Util,IO
3197,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.,Util,IO
3198,localisationtestforinvalidstrings,…te for instance,Util,IO
3199,operators all  any  count  elementat  single,- isempty == any(v -> true),Util,IO
3200,all standard schedulers ported and cleaned up.,- updated rxjavaplugins and added decorator calls to the schedulers.,IO,i18n,Util
3202,followup to issue #3167,entry editor now adds missing curly braces on closing.  3167,IO,Util
3204,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constants for sec-metadata header.    relnotes=adds constants for sec-metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> update public suffix data.  this copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> add @nullable to abstractsequentialiterator s computenext() method return value so that  doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> internally  use patterncompiler from doubles.tryparse.  (redo of cl 202132002  which was partially rolled back in cl 202139691.)  this time including tests to cover the re2j approach. to avoid the errors of last time  i had to remove the possessive quantifiers under re2j and replace \p{xdigit} with [0-9a-fa-f] (which is equivalent  see the pattern javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd,Util,IO
3205,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> change hostandport equals() and hashcode() to stop depending on whether brackets were included  now they depend only on host and port.  useful for storing ipv6 addresses in set and map  relnotes= net.hostandport : changed equals() and hashcode() to stop depending on whether brackets were included. now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0,IO,Util
3206,testsubscriber implemented,- internal  emptysubscriber,Util,IO
3207,some repeat + retry methods  fix to subscriptionarbiter.,i ll post the  retrywhen  and  repeatwhen  separately.,Util,IO
3208,operators interval and intervalrange,intervalrange  helps when one needs a fixed amount of timed values and wants to avoid map+take overhead.,Util,IO
3209,2775: hyphens in last names are properly parsed,-->,Util,IO
3212,operator groupby,this default implementation supports backpressure but doesn t coordinate the group requests with the main requests in any way.   this means  for example  that given a million element source and a constant true key selector will queue up all million elements until a single subscriber consumes them.  the 1.x version had some coordination and all sorts of group management logic which i don t understand. i ll revisit this operator later.,IO,Util
3214,real test linking real other entry,-,Util,IO,Test
3215,operator zip plus function3..function9.,functionx extends function<object  r> and the default method for it unpacks the array.,Util,IO
3220,strenghtening flatmap against misbehaving sources  testsubscriber +,methods.,IO,Util
3222,operator withlatestfrom  publishlift to help with operator fusing,subscriptionhelper for common validation logic.  the subscriptionhelper s methods are not yet applied to former operators.,IO,Util
3223,fixes to classes  convenience operators mostly.,also corrected the naming of one-shot timer and fixed-period interval,Util,IO
3224,operator distinct  timeinterval  common timed container.,instead of having  timestamped  and  timeinterval  with the same structure  let s have just a single one:  timed .   distinctuntilchanged  is implemented via special  distinct .,IO,Util
3225,operations doonx.,the various doonxxx operator overloads + range(scheduler) + repeat(scheduler).,IO,Util
3226,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a note about the relative ordering of afterdone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> insulate abstractfuture from futures.java/moreexecutors.java dependency  made directexecutor package-private so that we can refer to it directly in abstractfuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> remove reference to strings.isnullorempty from abstractfuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8,Util,IO
3227,collect: javac is unable to select the right overload for some reason,javac is unable to select the right overload for some reason,IO,Util
3228,conditionalsubscriber to help fusing filter-like operators into,emission/drain loops.  this may help with operators that call request(1) to replenish a dropped value (filter for example).  i ve only implemented this with the array-source and with a lot of code duplication. i ll think about how to reduce this duplication via inheritance or with lambdas (which might negate the benefit).,IO
3229,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** reason for rollback ***  the test that caused the inital rollback is buggy  *** original change description ***  introduce trusted interface.  so we can create fluentfuture.trusted without introduction of a dependency on fluentfuture in abstractfuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> optimize immutablecollection.toarray(t) as per   the key goal being to avoid the necessity of zeroing a newly created array where possible.  addresses   f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> adds wasm as a supported media type to google java utilities. adds wasm support to the staticfileaction in devserver (so that it is served with the correct content type).  relnotes=adds wasm as a supported media type to google java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> allow service to transition from starting to terminated. add a new  docancelstart  method that is called when a service is stopped while still starting. this gives implementations a chance to abort code which may be preventing the service from starting.  relnotes=added  docancelstart  protected method to  abstractservice   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> fix javadoc typo in linkedlistmultimap  fixes   1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> add callable s tostring to null failure message.  i find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> enhance tostring() for futures returned from executionsequencer.  also make tests for executionsequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> make ordering of primitives#all{wrapper primitive}types deterministic  relnotes=n/a  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2,Util,IO
3231,operator takelast time + size  skiplast time,- buffersize +delayerror options  as usual by now,Util,IO
3232,operators first  last  multi-offer for spsclinkedarrayqueue,the multi-offer helps with the timed skiplast. by offering two at once  the drain won t loop until the second value arrives.,Util,IO
3234,operator switchmap  switchonnext  added missing merge and concat,overloads  some refactorings,IO,Util
3235,operator amb  ambwith,very similar to zip in terms of structure.,IO,Util
3237,operators onerrorreturn  onerrorresumenext  onexceptionresumenext,- onerrorreturnvalue,IO,Util
3238,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a gap method to range which computes the range that lies between two ranges. this operation is particularly useful as a replacement for joda time s interval.gap when migrating to java time which has no interval class.  joda time: interval interval =   interval gap = interval.gap(interval)   java time (after this cl): range<instant> interval =   range<instant> gap = interval.gap(otherinterval)   relnotes=adds a gap() method to range that computes the range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> use gradle formatting  fixes   44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> add missing @since tag.    noticed because of   2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> add information about thread wakeup or scheduling delays to timeoutexceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> remove unnecessary local.  it is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> switch fluentfuture and abstractfuture in inheritance chain  relnotes=abstractfuture doesn t expose fluentfuture apis anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879,Util,IO
3240,use only last name for auto completion in search bar,now only the last name of the author is added (and shown as a suggestion) to the search bar. previously it was in the format  last  f. . thus authors specified as  last  first  were not found correctly because of the  dot .,IO,Util
3241,update link to renamed file,this patch fixes the issue described in #3230. the link to the renamed file is successfully updated now.,IO,Util
3242,add  -console  parameter for windows launcher,-->,IO,Util
3243,fix for issue 3143: import entry from clipboard in different formats,see #3143,Util,IO
3244,operators delay  delaysubscription  share.,the  delaysubscription  is implemented via composition.,IO,Util
3245,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> don t allocate a cancellationexception if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51,IO,Util
3246,implement native messaging,-->,IO,Util
3247,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add javadoc for mediatype.kml+kmz+mbox  via   original author=simon legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] inlined getdone() and getuninterruptibly() to break the source dependency from abstractfuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba,Util,IO
3248,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix parameter name in javadoc   name  doesn t exist in the current context.  #codehealth  relnotes=fix parameter name in javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344,Util,IO
3250,operator buffer with boundary and open-close  fixes to the timed,variants.   added  queuedrain  and  queuedrainsubscriber  for common queue-drain operations. not applied outside the  buffer() s as of now.,IO,Util
3251,window with count  count + skip.,luckily  there is no need to count the emission per subject but just use arithmetic.,Util,IO
3253,operator window timespan  timespan + count  timespan + timeskip,the timed buffer and window operators are quite complicated in terms of concurrency. i m not sure if all corner cases are covered.,IO,Util
3254,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> suppress violation of missingequalscall for equalstestertest  given it quite legitimately fails to call #testequals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** reason for rollback ***  test depends on incorrect future implementation  *** original change description ***  add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    5fafe7832579ab221804480a7545d486a14d083d,IO,Util
3255,operator scan  reduce. fixes to testsubscriber async behavior.,testsubscriber now does asynchronous requests and cancellation.,IO,Util
3256,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add more validation to abstractfuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> bail early without a cancellationexception in abstracttransformfuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0,IO,Util
3257,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> use trustedfuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf,Util,IO
3258,replaysubject,has full backpressure support (replays as many elements as requested).,IO,Util,i18n
3260,behaviorsubject,the continuous delivery guarantee and the no-duplication requirement makes it necessary to read/write an index and object values together. i ve implemented this with another synchronized block. the alternatives are: - use an object of (index  value) and atomically set the reference (requires allocation on every value delivered. - this current nested-synchronized block (no deadlock) - use a reader-writer lock which works better when concurrent subscribers want to do their first emission at the same time.,IO,Util,Interpreter
3262,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> remove trustedgetexception()  tryinternalfastpathgetfailure gives access to similar fast-path  relnotes=n/a  9d9d4d253c377a41919542ac65c5fa7205bd7f52,Util,IO
3263,subjects onnext and onerror null safety,subjects are exposed so they may receive nulls that would mess up the internal state.,IO,i18n,Util
3265,rxjavaplugins performance enabling fix & lockdown.,by using null checks and direct returns we can avoid a dynamic dispatch on a volatile variable which always more expensive.  i ve also added the  lockdown()  method to prevent any further changing of the plugin handlers. there is a  unlock  package-private method to allow testing the plugin in the locked state and then return to the unlocked state as other tests may want to install custom plugins.,Util,IO,i18n
3267,operator generate: create an observable that generates values by calling,a function and handling backpressure/resource cleanup automatically.  the logic is based on @stealthcode  s syncsubscriber proposal from 1.x but using only the lambda-form.,Util,IO
3268,standard disposables  changes to resource containers to support them.,-  disposables  utility class with wrapper methods named  from .,IO,Util
3271,first unit test and fixes to operators.,fixed mistakes in the operators.,IO,Util,Test
3273,fix attempt to the firehose test.,either the test is non-deterministic or i still have a bug.,IO,Util,Test
3275,simplest combinelatest tests and fix to groupby.,forgot to deliver the value inside the groupedunicast drain loop.,Test,IO,Util
3276,simplest concat test from 1.x,i ve also added convenience overloads to concat 2-9 sources because  concat(publisher)  causes overload resolution conflict with  concat(publisher<publisher>) .,Util,Test,IO
3277,errorhandlingtests and eventstream,i ve changed them to use  safesubscribe  because plain rs subscribers are not expected to throw.,Util,IO,Test
3278,simplest tests of groupby  merge and notification,we need to talk about  notification s.,Util,IO,Test
3279,conversiontest and doontest,forgot to call request  refactored some validation code.,Util,IO,Test
3280,observabletests and bugfixes.,bugfixes in many operators.,Util,Test,IO
3282,simpler tests for window reduce  scan  starwith.,i ve refectored the mocksubscriber method out into a helper enum since it will be required almost everywhere.,IO,i18n,Network,Util,Test
3283,subscribertests port from 1.x,they seem to try testing the request mechanism on thin implementations and are somewhat of no use.,Util,IO,Test
3284,simpler tests of throttlelast  throttlewithtimeout  zip,tests expect certain operator parameter orders so i d expect a few changes in observable in this regard.  fixed timing bug with  throttlewithtimeout  but i m not 100% certain it works as expected beyond this single test.,Test,IO,Util
3286,1.x: implements blockingsingle,adds blockingsingle (issue #3252)  the blocking version of rx.single.  blockingsingle has the following methods: -  from(single)  -- factory method for creating a  blockingsingle  from a    single  -  value()  -- returns the value emitted from the single -  tofuture()  -- returns a  java.util.concurrent.future   couldn t actually think of any other useful operations to perform on  blockingsingle  - in comparison to  blockingobservable   there s not much to this class (at the moment).,IO,Util,Test
3293,test some unicastsubject  cache  notificationlite  amb,- bugfix to cache  skipuntil and takeunit,IO,Test,Util
3298,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime api checker for guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba,IO,Util
3300,2.x: test for operators all  any  asobservable  fixes to all and any,bugfix: since they would emit a value on an empty source  they have to hold it until an actual request comes in.,Util,IO
3303,open unix filenames with spaces,3264,IO,Test,Util
3305,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> enable goodtime-api for guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  this is in response to (and should resolve)   9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> suppress warnings in classes that implement equals() without also implementing hashcode().  the contract for object.hashcode states that if two objects are equal  then calling the hashcode() method on each of the two objects must produce the same result. implementing equals() but not hashcode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f,IO,Util
3306,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> document that chars.lexicographicalordering is different than alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a,IO,Util
3309,2.x: operator test distinct  distinctuntilchanged and dooneach,note: several tests have been ignored due to non-conformance with rs  added missing distinct and distinctuntilchanged overloads  fixed dooneach not cancelling upstream if the callback crashes on the onnext path.,Util,IO
3311,2.x: operator test elementat  filter  finally  first,- fixed exceptions throw by elementat,IO,Util
3312,2.x: operator test flatmap  merge  mergedelayerror,- added operator flatmap of notifications  fixed a bug in onbackpressurebuffer  note also the few ignored tests because they either want to test against a null value or try to throw from rs methods.,IO,i18n,Test,Util,Network
3313,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> correct documentation for splitter#withkeyvalueseparator(splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  internally  immutabletable.builder.build() delegates to two classes  {dense sparse}immutabletable and these currently have inconsistent error messages when a duplicate key is detected.  prior to this cl  sparseimmutabletable had a message formatted like:    duplicate value for row=%rowkey%  column=%columnkey%: %newvalue%  %oldvalue%  whereas denseimmutabletable had:    duplicate key: (%rowkey%  %columnkey%)   after this cl both classes will format the message like:    duplicate key: (row=%rowkey%  column=%columnkey%)  values: [%newvalue%  %oldvalue%].   relnotes=standardise message format for  duplicate key  illegalargumentexception thrown from immutabletable.builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph packagesanitytests: specify a default object for endpointpair inputs. this should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8,Util,IO
3315,fix freezing when running cleanup file operations like rename,i noticed a problem when executing a rename cleanup operation. it lead to a freeze.,Util,IO
3317,2.x: operator test onerror and onexception  relevant bugfixes,i had to ignore tests that throw exceptions from a publisher.subscribe or an operator.apply due to their non-conformant behavior.,IO
3318,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address why users should prefer our immutable collections to things like collections.emptylist().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> add the origin-trial  response header.  229188e18e6504ffa9747e8bd00622d28e460477,Util,IO
3319,2.x: operator test for replay,note that testissue_2191_schedulerunsubscribe had to change the call count to pass. i don t understand this test and the over-mocking (but recognize the style).,Util,IO
3320,increase relative size of abstract field in editor,-->,Util,IO
3323,2.x: operator test: skip variants and bugfix,note that since we know have time unit in schedulers  one must be careful with the time unit of the timed skip operators. the timestamps will be calculated via this unit and may not return the expected values.   for example  a skiplast of 1 second will not skip the value 0.5 seconds before completion because its timestamp is rounded down to the start of the second. but if one uses 1000 milliseconds  the value will be skipped.,IO,Util
3325,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.,IO,Util
3327,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    648071f0c529c87cb28537488f27f971bce3c3c5,Util,IO
3328,small fix in drag and drop handler of linked files,-->,Util,IO
3329,2.x: operator test: window variants,i had to adjust some test slightly due to the a new behavior: if one cancels a source which is windowed  as long as the windows are active  the source has to stay active. however  there are more subtle possibilities that need new tests.,Util,IO
3330,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> add the @immutable a few more classes. both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0,IO,Test,Util
3333,refactoring: lazy init of all editor tabs,-->,Test,IO,Util
3334,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> make example compile (i.e. supply a path/file) and use depth first instead of breadth first.  reason: depth first is more common for file traversal.  relnotes=n/a  e7b80454e4d463af61fc81c3beb96b5e46b07312,i18n,Util,IO,Test
3335,2.x: scalar flatmap optimization enabled,- i wanted to make sure the slow path passes all tests before enabling   the scalar optimization. - fixed headers for internal classes,IO,Util
3340,used late initialization for context menus,i believe i could bring down the performance impact of the context menus to a bare minimum. i reported this in  and @tobiasdiez provided me with the hint how this could work. against his suggestion to not overshoot  i decided to prove my point that even those small context menus have a significant impact because things will sum up in the end and those menus are newly instantiated for every visible field in the editor.,Util,IO,Test
3352,2.x: perf checks for flatmap and merge,ported the two perf tests to evaluate 2.x throughput.  (  my primary suspect for the extra overhead are the atomics of queue-drain. the 1.x uses a synchronized-based emitter-loop which is elided by the jit compiler but atomics can t be elided. as i mentioned before  synchronized works better for light-to-none asynchronous use whereas atomics work better for asynchronous use.  also quote from #3157  > exceptions that do not require a :+1: would be: >  > javadoc changes > unit test additions or refactoring > **perf test additions  fixes or refactoring** > grammatical and presentation fixes to readme  contributing  and other such metadata files,IO,Util,Interpreter
3353,refactor collab package,-->,IO,Interpreter,Util
3354,2.x: perf change wait to spin-loop for short async benchmarks,i ve noticed that the  times = 1  async range sometimes produces double the throughput without any change to the underlying structure and i ve figured out it is because how my operation system wakes up the await in the benchmark. i switched the tests to spin-loop and now i get a consistent and higher value than before:  (  there are a few light-greens and a few light-reds which i attribute to other fluctuating factors on my computer.  in addition  i ve experimented with two optimizations: one for observing a scalar value on a different thread and one where the  operatorobserveon  is turned into a  publisherobserveon  to save on the allocation of a  publisherlift . the scalar optimization ended up being slower by 15% for some reason i don t understand and the  publishobserveon  had no impact on the throughput within the error range.,IO,Interpreter,Util
3357,eager concatmap,related discussion in #3017.,Util,IO
3358,2.x: single class more operators + test from 1.x,i ve added the methods from the 1.x single plus a couple more based on observable operators that makes sense to me in respect to single. no plus unit tests and no javadoc.,Interpreter,Util,IO,Test
3369,lint fixes for unnecessary unboxing,believe i m removing some unnecessary unboxing calls  but please correct me if i m wrong.,IO,Util
3371,2.x: non-backpressure nbpobservable all relevant operators + tests.,- non-backpressured subjects.,Network,Util,IO,i18n,Test
3376,2.x: perf comparing observable  nbpobservable  stream and parallelstream,this benchmark compares the overhead of backpressured range  non-backpressured range  streamed range and parallel-streamed range. run on i7 4770k  windows 7 x64  java 1.8u60.  (https://cloud.ent.com/assets/1269832/10107747/75d7c094-63bd-11e5-9e6d-fd3afd50b552.png),Interpreter,Util,IO
3382,2.x: fix spsclinkedarrayqueue leaves 1 slot null just before growing,discovered while debugging #3381. confirmed with jctools in https://github.com/jctools/jctools/pull/80,IO,Util
3383,fix typo in a comment inside observable.subscribe,sigificent -> significant alreay -> already,Util,IO
3386,1.1.0 - changed javadoc for observable.doonrequest(action1),this is one of the many 1.1.0 promotion related pull requests. there is a split decision on the operator  observable.doonrequest(action1) . a majority of core committers have voted to promote this operator from  @beta  to public. there is currently a minority is support for removing the convenience method on  observable  or demoting it to  @experimental . instead users would lift the underlying operator  obs.lift(new operatordoonrequest<t>(onrequest)) . in this pull request i have taken the more conservative approach and expect that comments will guide our decisions.  ### rationale: - the  doonrequest  use case is to debug back-pressure use cases and as such should not pollute the public operator namespace.  - the existence of this operator may mislead and confuse users. it could be misinterpreted and abused to alter or reset over arching state when the back-pressure mechanics should be more or less self contained (with the exception of  asynconsubscribe ).  if my understanding is incorrect and there is a valid use case aside from debugging then please comment.,Util,IO
3408,dooneach: report both original exception and callback exception.,this came up in a [stackoverflow]( answer. if the  doonerror  s callback or the  dooneach  s  onerror  method throws  any non-fatal exception replaced the original error which got lost. this pr will wrap them both into a  compositeexception .  2.x note: since java 8 supports  addsuppressed  all callbacks in this situation either attach to the original exception or the original exception is attached to the callback s exception.,IO,Util
3415,deprecate the experimental/beta method that will be deleted until 1.1.x,squashed commits: [c6e43fc] 1.0.15. beta/deprecation of subject state peeking methods.  this should give users one release to prepare for the class structure changes.,IO,i18n,Util
3417,add single.doonsuccess(),closes #3385.,Util,IO,Test
3418,add single.fromcallable(),second part of #3154.  @akarnokd i d like to reuse  observable.fromcallable()  but didn t find apropriate way to do it:  observable.fromcallable().tosingle()  is not best option  if you have some thoughts on this — please share them.,Util,IO,Test
3434,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix @param tag as per   cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e,IO,Test,Util
3438,fix removal of special fields when syncing them via keywords,fixes a bug where jabref special fields (such as  printed    relevant   ) were not cleared (e.g. removing the  printed  flag) when using synchronization of special fields via the bibtex keywords field.,IO
3444,implements #1664: group based on aux file,-->,Test,IO,Util
3447,1.x: delaysubscription with a plain other observable.,requested in #3445.  this is an efficient implementation as it avoids allocating the lifter object  doesn t require a function wrapper and doesn t use producer arbitration.  (bonus points to those who can recognize the similarities with #3446).,Util,IO
3448,single delay,adds the  delay(long delay  timeunit unit  scheduler scheduler)  and  delay(long delay  timeunit unit) operators to  rx.single .  includes (in a separate commit) a refactor of  operatordelay . as far as i can tell  the  source  field isn t used at all - by removing it  i was able to reuse  operatordelay  in  rx.single  to implement the delay operator pretty easily.,Util,IO,Test
3455,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fixed some links.  the comparisons to the android hash* classes haven t been accurate since at least cl 81367572  so i ve removed them entirely.  3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named() to [assert]withmessage().)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> migrate from is(not)sameas to is(not)sameinstanceas.  they behave identically  and the old names are being removed.  open-source note: the new methods are available in truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> a few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> remove checkedfuture from guava.  relnotes=removed deprecated  checkedfuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> migrate from assertthat(foo).named( foo ) to assertwithmessage( foo ).that(foo).  (the exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]withmessage(...).)  named(...) is being removed.  this cl may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7,Util,IO,Test
3458,remove dependency to jgoodies-looks,jgoodies-looks uses internal apis (see  )  which means that it causes problems with java 9. this pr removes this dependency. the biggest change is that two look and feels go and that particularily affects linux users.,Util,IO
3467,1.x: compensation for significant clock drifts in scheduleperiodically,there is a problem  reported in #3461 and #2943  in which if the system clock drifts  the periodic calculation inside scheduler.worker gets off and either taking a longer time for the next invocation of the task or doing  catching-up  with all the lost invocations.  the solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly  it rebases the timer period and schedules the next execution relative to now.  if the clock goes back  the original code scheduled the next invocation way into the future. this pr will schedule it after the period.  if the clock goes forward  the original code scheduled executions for all the missed time between the last run and the new time immediately  yielding a bunch of 0 delays. this pr will simply schedule the next invocation after the period.  the algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along. the subsequent invocations will be scheduled at a fixed rate again.  i ve added the system parameter  rx.scheduler.drift-tolerance  (unit: minutes  default: 15 minutes)  which is used to determine if the clock drifted too far between invocations of the periodic task.,Test,IO,Util
3468,1.x: fix other places that may swallow onerrorfailedexception,reviewed all usages of  onerrornotimplementedexception  and fixed issues similar to #3455.,IO,Util,Test
3470,1.x: replay request coordination reduce overhead,reported in #3469.  this change will make sure whenever a new subscriber arrives  the request coordination doesn t scan every other subscriber unnecessary. (they will trigger a managerequests individually anyway).  unfortunately  i can t make the subscription registration constant (via a hashset) because that would slow down the dispatching loop (which is quite expensive to for-each over compared to a plain array).  note also that this will likely conflict with #3454.  i get the following numbers with the program in #3469.      subscribing subscribed so far 10000  took 54ms to subscribe last 10000 at rate: 185185 per sec subscribed so far 20000  took 110ms to subscribe last 10000 at rate: 90909 per sec... subscribed so far 30000  took 157ms to subscribe last 10000 at rate: 63694 per sec... subscribed so far 40000  took 267ms to subscribe last 10000 at rate: 37453 per sec... subscribed so far 50000  took 211ms to subscribe last 10000 at rate: 47393 per sec... subscribed so far 60000  took 320ms to subscribe last 10000 at rate: 31250 per sec... subscribed so far 70000  took 331ms to subscribe last 10000 at rate: 30211 per sec... subscribed so far 80000  took 369ms to subscribe last 10000 at rate: 27100 per sec... subscribed so far 90000  took 415ms to subscribe last 10000 at rate: 24096 per sec... subscribed so far 100000  took 462ms to subscribe last 10000 at rate: 21645 per sec... subscribed so far 110000  took 516ms to subscribe last 10000 at rate: 19379 per sec... subscribed so far 120000  took 547ms to subscribe last 10000 at rate: 18281 per sec... subscribed so far 130000  took 647ms to subscribe last 10000 at rate: 15455 per sec... subscribed so far 140000  took 720ms to subscribe last 10000 at rate: 13888 per sec... subscribed so far 150000  took 811ms to subscribe last 10000 at rate: 12330 per sec... subscribed so far 160000  took 806ms to subscribe last 10000 at rate: 12406 per sec... subscribed so far 170000  took 873ms to subscribe last 10000 at rate: 11454 per sec... subscribed so far 180000  took 911ms to subscribe last 10000 at rate: 10976 per sec... subscribed so far 190000  took 986ms to subscribe last 10000 at rate: 10141 per sec... subscribed so far 200000  took 1003ms to subscribe last 10000 at rate: 9970 per sec... subscribed so far 210000  took 1168ms to subscribe last 10000 at rate: 8561 per sec... subscribed so far 220000  took 1213ms to subscribe last 10000 at rate: 8244 per sec... subscribed so far 230000  took 1340ms to subscribe last 10000 at rate: 7462 per sec... subscribed so far 240000  took 1314ms to subscribe last 10000 at rate: 7610 per sec... subscribed so far 250000  took 1548ms to subscribe last 10000 at rate: 6459 per sec... subscribed so far 260000  took 1372ms to subscribe last 10000 at rate: 7288 per sec... subscribed so far 270000  took 1835ms to subscribe last 10000 at rate: 5449 per sec... subscribed so far 280000  took 2087ms to subscribe last 10000 at rate: 4791 per sec... subscribed so far 290000  took 1910ms to subscribe last 10000 at rate: 5235 per sec... subscribed so far 300000  took 1966ms to subscribe last 10000 at rate: 5086 per sec... unsubscribing... unsubscribed so far 10000  took 1910ms to unsubscribe last 10000 at rate: 5235 per sec... unsubscribed so far 20000  took 1782ms to unsubscribe last 10000 at rate: 5611 per sec... unsubscribed so far 30000  took 1730ms to unsubscribe last 10000 at rate: 5780 per sec... unsubscribed so far 40000  took 1593ms to unsubscribe last 10000 at rate: 6277 per sec... unsubscribed so far 50000  took 1514ms to unsubscribe last 10000 at rate: 6605 per sec... unsubscribed so far 60000  took 1468ms to unsubscribe last 10000 at rate: 6811 per sec... unsubscribed so far 70000  took 1188ms to unsubscribe last 10000 at rate: 8417 per sec... unsubscribed so far 80000  took 1234ms to unsubscribe last 10000 at rate: 8103 per sec... unsubscribed so far 90000  took 1271ms to unsubscribe last 10000 at rate: 7867 per sec... unsubscribed so far 100000  took 1358ms to unsubscribe last 10000 at rate: 7363 per sec... unsubscribed so far 110000  took 1103ms to unsubscribe last 10000 at rate: 9066 per sec... unsubscribed so far 120000  took 1100ms to unsubscribe last 10000 at rate: 9090 per sec... unsubscribed so far 130000  took 990ms to unsubscribe last 10000 at rate: 10101 per sec... unsubscribed so far 140000  took 953ms to unsubscribe last 10000 at rate: 10493 per sec... unsubscribed so far 150000  took 854ms to unsubscribe last 10000 at rate: 11709 per sec... unsubscribed so far 160000  took 789ms to unsubscribe last 10000 at rate: 12674 per sec... unsubscribed so far 170000  took 779ms to unsubscribe last 10000 at rate: 12836 per sec... unsubscribed so far 180000  took 624ms to unsubscribe last 10000 at rate: 16025 per sec... unsubscribed so far 190000  took 634ms to unsubscribe last 10000 at rate: 15772 per sec... unsubscribed so far 200000  took 514ms to unsubscribe last 10000 at rate: 19455 per sec... unsubscribed so far 210000  took 411ms to unsubscribe last 10000 at rate: 24330 per sec... unsubscribed so far 220000  took 373ms to unsubscribe last 10000 at rate: 26809 per sec... unsubscribed so far 230000  took 337ms to unsubscribe last 10000 at rate: 29673 per sec... unsubscribed so far 240000  took 286ms to unsubscribe last 10000 at rate: 34965 per sec... unsubscribed so far 250000  took 234ms to unsubscribe last 10000 at rate: 42735 per sec... unsubscribed so far 260000  took 222ms to unsubscribe last 10000 at rate: 45045 per sec... unsubscribed so far 270000  took 159ms to unsubscribe last 10000 at rate: 62893 per sec... unsubscribed so far 280000  took 96ms to unsubscribe last 10000 at rate: 104166 per sec... unsubscribed so far 290000  took 63ms to unsubscribe last 10000 at rate: 158730 per sec... unsubscribed so far 300000  took 31ms to unsubscribe last 10000 at rate: 322580 per sec...,Test,IO
3474,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add faketicker.advance(duration) and setautoincrementstep(duration).  #goodtime  relnotes=add faketicker.advance(duration) and setautoincrementstep(duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> add queues.drain(blockingqueue  collection  int  duration) and drainuninterruptibly(blockingqueue  collection  int  duration).  relnotes=add duration-based queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> add a new header field  cdn-loop  to   more details:   relnotes=add cdn-loop header to library according to rfc8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> remove app.link from the public suffix list.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd,IO,Util
3477,1.x: add a source onsubscribe which works from an array directly,this specialized onsubscribe performs ~33% better on longer streams.  benchmark comparison (i7 4770k  windows 7 x64  java 8u66):  (  the  slowpath  requests the available amount + 1 to trigger a slow path   slowpath2  requests in batches of 128 and replenishes only after all were received.,IO,Util
3486,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> copy durations.saturatedtonanos(duration) to package-private c.g.c.u.c.internal so it can be used by the concurrent package (and in guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> tighten the goodtime suppression locations in ratelimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> add duration-based overloads to uninterruptibles.  #goodtime  relnotes=add duration-based overloads to uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> always complete timeoutfuture  even if tostring() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> add duration-based overloads to moreexecutors.  #goodtime  relnotes=add duration-based overloads to moreexecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> add duration-based overloads to fluentfuture.  #goodtime  relnotes=add duration-based overloads to fluentfuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> add duration-based overloads to futures.  #goodtime  relnotes=add duration-based overloads to futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> add duration-based overloads to abstractscheduledservice.  #goodtime  relnotes=add duration-based overloads to abstractscheduledservice.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> add duration-based overloads to service.  #goodtime  relnotes=add duration-based overloads to service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> add duration-based overloads to servicemanager.  #goodtime  relnotes=add duration-based overloads to servicemanager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> remove checkedfuture utilities from util.concurrent.futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> add duration-based overloads to ratelimiter.  #goodtime  relnotes=add duration-based overloads to ratelimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> add duration-based overload to monitor.  #goodtime  relnotes=add duration-based overload to monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> define project build source encoding as utf-8  closes   196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> fix  apache license  version 2.0  spelling  there are many java libraries licensed under  apache license  version 2.0  that do not use its official spelling. this causes issues like  with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. this pr changes the license spelling to the official one  as advised by maven developers.  closes   eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> fix streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> add mediatype for  application/geo+json .  via   relnotes=add mediatype for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> upgrade maven-javadoc-plugin to 3.1.0.  fixes   34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> add cross-origin-resource-policy header name constants.  details   relnotes=add cross-origin-resource-policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> fix javadoc links.  fixes   86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> update documentation to refer correct method name.    relnotes=n/a  a6f7253500de9a6a88c56e94858759c437dee20b,IO,Util
3487,add \textquotesingle to the html conversion table,-->,IO,Util
3488,1.x remove all instances of atomic*fieldupdater,replace them all with their respective atomic\* counterparts for example atomiclongfieldupdater -> atomiclong addresses https://github.com/reactivex/rxjava/issues/3459,IO,i18n,Util
3498,1.x: rename cache(int) to cachewithinitialcapacity(int),~~the parameter is a capacity hint  but more frequently confused with a buffer size like replay(int) than it is correctly understood. it also offers no guarantees  only the weak hope of optimization.~~  the parameter is a capacity hint  but more frequently confused with a buffer size like replay(int) than it is correctly understood. it also offers no guarantees  only the weak hope of optimization.  this change renames the method  deprecating the old name. it also adds javadoc calling out that the parameter is not a bound and referencing replay(int).autoconnect() as a way to achieve that behavior.,IO,Util
3500,some code clean ups.,nothing that could change logic or application flow  just minor refactors to be consistent with good practices and clean code. to sum up changes: - simplified some conditions - changed small l to l in long number  as l tends to look like 1 and might confuse - removed  return  statements where those are not necessary (last instruction in function) - inlined returns where there were no need for creating new variable (easier to read) - deleted unnecessary colons,i18n,IO,Test,Util
3512,3505: another try to fix the npe in the search bar,fiexes #3505,IO
3513,1.x: add shorter rxjavaplugin class lookup approach.,this adds a new pattern and lookup method that let s the developer specify the custom plugins with shorter system property keys. android is quite restrictive and allows only 31 characters.  the new pattern splits the target simple class name and its implementation into two separate system properties:      rxjava.plugin.1.class=simpleclassname rxjava.plugin.1.impl=path.to.impl.class      the index tag ( 1 ) can be any string of your chosing:      rxjava.plugin.mykey.class=simpleclassname rxjava.plugin.mykey.impl=path.to.impl.class      but make sure they are paired  otherwise nothing will happen.  if there are multiple  class  entries with the same  simpleclassname  one of them will be chosen (depending on the walk order in  java.util.properties ).  related issue #2835.,Test,IO,Util,i18n
3524,fix subscribe() javadoc,fix for javadoc issue #3523,Util,IO
3539,fix options databinding by adding elements if they are not in the initial map,3538,Util,Test,IO
3549,remove double whitespace in if conditions,just found them while walking through the source code trying to get a better overview of the rx internals.,Util,IO
3561,corrected buffer operator onerror behaviour documentation,#3560,IO,Util
3562,add single.doonunsubscribe(),as promised  adding more operators to  single . this one is very useful for releasing resources if task can be cancelled externally via  subscription.unsubscribe()  and subscriber may not receive the result.,IO,Test,Util
3565,replace never() calls in behaviorsubjecttest with verifynomoreinteractions,advantage is that we verify that there s no interaction at all so also something that we might not expect is not going to happen.,IO,Test,Util
3566,deprecate observable.finallydo() and add observable.doafterterminate() instead,#3434 but for  observable .,IO,Util
3568,renamed completable#finallydo to #doafterterminate,renames as part of #3434 for the recently added completable.,Util,Test,IO
3569,disable the autocompletion as default,implements the workaround presented at 3522#issuecomment-351046350.,IO,Util
3570,implemented completable#andthen(observable),i expect some discussion around the method name.,Util,Test,IO
3575,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> adds constant for the upgrade-insecure-requests header.    relnotes=adds constant for the upgrade-insecure-requests header.  7e5aa662985c6e54396b1e751149bef17236bc27,Util,IO
3579,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> fix  bug  link that was actually a cl.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> simplify while+break into do-while.  3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> release resources of whenallsucceed/whenallcomplete once input futures are complete.  relnotes=fixes potential memory leak in futures.whenallsucceed/whenallcomplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> prepare for removing gwt-rpc support for guava types by adding a system property that disables it.  when the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.    967010aa4d5ecf35fd3861913c3f17c10c4f6d40,IO,Test,Util
3584,clarify behaviour of groupby in javadoc,as discussed in #3411  some clarification of the behaviour of  groupby  looks necessary re its behaviour when the  groupedobservable  terminates early (for example has  .first()  applied to it). see also  #3581.  i also took the liberty of recommending  ignoreelements  instead of  take(0)  for the section in the javadoc that recommends how to ignore emissions because the  take(0)  approach would have more overhead (every emission from source would prompt the emission of a new  groupedobservable ) than the  ignoreelements  approach.  once this is accepted i ll look to submit a pr with  groupbyonce  (mentioned in #3411).,IO,Util
3585,new crowdin translations,enjoy!,Util,IO,Test
3586,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> let listenablefuture implement thenable via a default interface method in j2cl  relnotes=let listenablefuture implement thenable via a default interface method in j2cl  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> let listenablefuture implement thenable via a default interface method in j2cl  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> update public suffix data.  the copy is updated whenever chrome s copy is updated  which is typically every 6 weeks. star the following to watch chrome s updates:    when that bug is not updated  the copy is updated 3 weeks before the estimated week of stable:    a793784ba71562cdabf41ba87aad849440b145a7,Util,IO
3587,remove the need for javac to generate synthetic methods.,outer classes accessing inner class private fields and methods (and vise versa) causes javac to generate package-scoped trampolines. these bloat the class files  adds overhead to the inliner analysis  and for android create needless method that eat away at our fixed limit of methods in an application. by simply promoting the private interactions to package scope directly  the synthetic methods do not need generated.  2.5% of rxjava s methods were these needless generated trampolines accounting for 1.2% of jar size and 1.4% of dex size.      $ dex-method-count before.dex 5005  $ dex-method-count after.dex 4875          -rw-r--r--   1 jw  jw   699k dec 25 03:08 after.dex -rw-r--r--   1 jw  jw   952k dec 25 03:08 after.jar -rw-r--r--   1 jw  jw   709k dec 25 03:06 before.dex -rw-r--r--   1 jw  jw   964k dec 25 03:06 before.jar,Util,IO
3592,1.x: add never test for  publishsubjecttest,this pr complete the never assert in publishsubjecttest.,Util,IO,Test
3609,delaysubscription(func0) does not use a scheduler,it subscribes to the upstream  observable  on the emitting thread of the other  observable  obtained from the  func0 .,IO,Util
3614,1.x: just() now supports backpressure (+ related fixes/changes),updated  just()  to fully support backpressure.  this is a repost of #3496 due to merge and rebase problems.,Util,IO
3620,cleanupstep.move_pdf is not a cleanuppreset anymore,this fixes  with a (imho) less confusing default:,Test,IO,Util
3626,use exceptions.throworerror to simplify error handling,this pr simplifies error handling by making use of existing  exceptions.throworerror  overloads.  a number of classes are touched by this one pr but i m assuming review will be easy enough that merge can happen soon.,IO,Util
3627,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> add futures.submit().  relnotes= util.concurrent : added  futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc,Util,IO
3642,extend ris import with multiple fields,meeting time is programming time :),Test,Util,IO
3648,moe sync,this code has been reviewed and submitted internally. feel free to discuss on the pr and we can submit follow-up changes as necessary.  commits: ===== <p> address tsan errors:  1. suppress safe racy init in abstractmultiset and hashbimap. all the classes that are stored in the newly annotated fields have only final fields (except hashbimap.inverse  which inherits abstractbimap s keyset and values fields  which are themselves @lazyinit)  so they are safe to read racily.  2. mark some graph  cache  fields as volatile. these fields are an optimization: when the user accesses an entry through iteration (and sometimes through get())  the graph stores the entry in a field. that way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. but this caching isn t implemented in a thread-safe way. it *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. but because of the racy reads of the cached entry fields  i don t think this is guaranteed to be safe.  relnotes= graph : fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac,Test,IO,Util
3651,1.x: remove redundant  final  modifiers,as promised in #3579.,i18n,IO,Util
3655,1.x: add single.onerrorresumenext(single),part of #3652  will submit a pr for  onerrorresumenext(func1<throwable  single>)  later.,IO,Util,Test
3661,export no empty lines in ris format,this fixes the remaining part of #3634,Util,IO
3668,fix medline and convert some fetchers to junit5 where possible,i converted only some  because others rely on mockito and there is not yet an offical mockito-extension for junit5,IO,i18n,Util,Interpreter
3671,2.x: fix schedulerlifecycle.teststartidempotence vs cached threads dying,i forgot that rxcached threads can get evicted during the test. the new logic makes sure no new threads appeared.,IO,Util,Test
3678,1.x: fix counted buffer and window backpressure,this pr fixes the backpressure behavior of the counted  buffer  and  window  operators and consists of several changes.  the main issue lies when  count > skip  in the operators  yielding overlapping buffers/windows.   for  buffer   when the upstream completed  the logic emitted all remaining partial buffers even if there was no request for new buffers  which can result in  missingbackpressureexception  somewhere. the proper handling of the final buffers required a new backpressure management algorithm which is now part of the  backpressureutils  class and consists of two new methods:  postcompletedone  called from oncomplete to take over the emission of queued values and  postcompleterequest  which manages requests before and after the completed state.  for  window   the new window opened was emitted regardless of requests which was common due to request-amplification (i.e.  requesting n windows results in requesting  count + skip * (n - 1)  elements at first (then  skip * n  later) which opens  ceil(count / skip)  windows upfront. to avoid the overflow  the individual windows have to go through the usual queue/drain logic as well. i ve also updated the javadoc to reflect the backpressure behavior along with parameter validation.  in addition  the window case didn t manage cancellation properly. when the outer observable is unsubscribed  the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. instead  the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e.  count reaches zero)  the upstream is unsubscribed. to accomplish this  the  unicastsubject  had to be retrofitted with a new optional callback  action0  which gets called at most once whenever either  onerror  or  oncompleted  is called or when the single  subscriber  unsubscribes.  a secondary issue was with the  testsubscriber  s initial request  some upstream operators could get triggered with  long.max_value  despite the initial request amount was set. this pr changes it to be set at construction time instead of in  onstart .,IO,Util
3682,fix annotation tab,-->,IO,Util
3683,fix select entries my holding mouse,-->,IO
3689,1.x: unified onerrorx and onexceptionresumenext and fixed backpressure,the operators didn t honor backpressure when they switched over to the other observable.  this pr also includes the 3685.,Util,IO
3692,1.x: fix completable using jdk 7 suppressed exceptions feature,the upgraded gradle switched my ide to use a jdk 6 library i have installed all along and these popped up immediately.,IO,Test,Util
3696,use streams in group matcher,-->,IO,i18n,Test,Util
3701,1.x: add completable.dooncompleted and deprecate completable.dooncomplete,closes #3700.,Util,IO,Test
3707,1.x: make completable.subscribe() report isunsubscribed consistently,the empty and lambda-based  completable.subscribe()  returns a  subscription  whose  isunsubscribed  should be consistent with the rest of the reactive objects by returning true if the sequence terminated (not just when one truly cancelled it).,Util,Test,IO
3712,add takeuntil support in single,as discussed in #3708  this adds  takeuntil(observable)  and  takeuntil(single)  support in  single . it was mostly just adapting the logic from the existing  operatortakeuntil  and adjusting it for accepting a  single  and sending a  cancelattionexception  in the event of a submission from  other  prior to a terminal event in the source  single .  any feedback is appreciated it  this is my first time contributing an implementation to this project. particularly wondering if it s worth keeping both overloads or if the user should just coerce their  other  to one type or ther other. also particularly looking for feedback on what information to include in the  cancellationexception .,IO,Util,Test
3714,update entry editor when entry type changes,fixes an issue partly described here: 289,Util,IO
3718,add cleanup operation for replacing ligatures,3613,Util,IO
3720,refactor deprecated part of protectedtermsformatter,just a code cleanup pr.,IO,Test,Util
3722,add maxconcurrent parameter to flatmapiterable,refs #3711. should these new overloaded functions be annotated with  @beta ?,Util,IO
3733,refactor bibdatabase migrations,this is the followup for 3658#discussion_r168779345.,IO,Util,Test
3738,creating observable#create overloads for synconsubscribe and asynconsubscribe,this is to facilitate the discovery of methods for creating observables that respect back pressure semantics. currently the  observable#create(onsubscribe)  static method is the easiest method to discover for creating an observable which does not provide clear facilities for managing back pressure.,IO,Util
3741,moe sync 2019-12-18,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> actually map thenable helper interface to js ithenable. the name is different to avoid a clash with elemental2 ithenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> use error prone s @guardedby enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d,IO,Test,Util
3752,moe sync 2019-12-24,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct @nullable and use ints.constraintorange()  5d9fc397a80618ea90786f026962f208b979bece,Test,Util,IO
3753,1.x: fix serializedobservertest.testnotificationdelay,this pr fixes the  serializedobservertest.testnotificationdelay  test to use reentrancy to verify the buffer in  serializedobserver  is properly drained. for now  it loops 10 000 times to see if the ci brings up the issue again. takes 400ms on my machine but i ll probably reduce it to 1 000 times.  (the previous version was a bit convoluted with all those countdowns that didn t properly lock out the other thread).  reported in issue #1389,Test,Util,IO
3756,1.x: clarify join/groupjoin no ordering guarantees,original issue: #3616.,IO,Util
3759,1.x: concatmap full rewrite + delayerror + performance,this is a full rewrite of the  concat / concatmap  operator with the following properties: - using  onsubscribe  to save on the allocation of  lift  -  concatdelayerror  and  concatmapdelayerror  to delay errors to the very end - new trampolining logic that also subscribes to the next source even if requested is zero - using  concatmap  or  concatmapdelayerror  on a scalar source now bypasses the operator completely and uses  scalarsynchronousobservable.scalarflatmap  as well. - the operator now detects  just  and  empty  sources and bypasses subscribing accordingly - added  exceptionsutils  to work with composite exceptions and terminal state  useful for other similar delaying operators later on. -  concat  is now implemented as  concatmap(v -> v)  which saves on the allocation of an entire  map  operator -  operatorwindowwithsizetest.testbackpressureouterinexact  had to be ignored because  window  doesn t honor backpressure properly and it is fixed in #3678  once it has been resolved  the test can be reenabled - added varargs constructor to  compositeexception  for convenience  avoids creating a list when the number of initial exceptions are known upfront.  performance comparison to baseline (i7 4770k  windows 7 x64  java 8u72):  (https://cloud.ent.com/assets/1269832/13744915/603866a8-e9eb-11e5-8711-8feb24fbb872.png),IO,Test,Util
3760,pressing esc while searching clears searchfield and selects first available entry,,IO,Util
3762,meaningful button review field migration,fixes 312.,IO,Util,Test
3763,moe sync 2020-01-06,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> update to junit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> note another case in which our implementation of typevariable throws unsupportedoperationexception.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> suppress ignored return values from collection#contains*.  i think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8,Util,IO
3765,moe sync 2020-01-08,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add test case stable incidentedgeorder with a self loop to abstractstandard[un]directedgraphtest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> add test for stable incidentedgeorder support for mutable undirected valuegraphs in valuegraphtest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> fix off-by-one error in asciidigits.asciidigits initialization.  3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> disable gwt-rpc by default in the open-source release.  relnotes=[guava types can no longer be sent over gwt-rpc.]( to _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f,Util,IO
3766,update architecture tests to catch static imports,fixes a part of #2617,Util,Test,IO
3777,observeon: allow configurable buffer size,the observeon operator is backed by a small queue of 128 slots that may overflow quickly on slow producers.  this could only be avoided by adding a backpressure operator before the observeon (not only inconvenient  but also taking a perf. hit as it forces hops between two queues).  this patch allows modifying the default queue size on the observeon operator.  fixes: #3751 signed-off-by: galo navarro anglorvaroa@gmail.com,Util,IO
3783,save order of columns across sessions,,IO,Util,Interpreter
3787,1.x: fix groupby delaying group completion till all groups were emitted,in 1.1.1   groupby  was fixed to properly honor backpressure on the outer  observable . the change included a drain loop that emitted  oncompleted()  to the groups only when all  groupedobservable s were drained from the main queue. this delayed the group s completion unnecessarily causing the  concat  operator to hang in some source-consumer cases such as #3775.  this pr fixes the behavior by signalling  oncompleted()  to the groups the moment the main completes.   note  however  that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes  thus  concat  can t switch to the next source. one should use  flatmap  or  concatmapeager  instead.,IO,Test
3789,add telemetry to track every action,,Test,Util,IO
3790,set main stage for file dialogs,,Util,IO
3799,1.x: add completable.andthen(single),https://github.com/reactivex/rxjava/issues/3730,Test,IO,Util
3818,moe sync 2020-03-09,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76,IO,Util
3820,3796: pretend that we have every translation for every key,3796,IO,Util,i18n
3822,1.x: make defensive copy of the properties in rxjavaplugins,possible solution to #3749.,IO,i18n,Util
3824,moe sync 2020-03-16,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> implement some more tostring() methods for debugging.  i added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8,IO,Util
3826,show dialog when copy files did not found file,follow up from #3818,Util,IO
3828,1.x: asyncsubject now supports backpressure,asyncsubject  can trivially support backpressure when it emits a single item by setting the  singleproducer  on the child  subscriber  instead of calling  onnext  immediately.,Test,Util,IO
3836,moe sync 2020-03-30,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> deprecate 1-arg overload of servicemanager.addlistener.  it default to directexecutor(). directexecutor() is often useful  but it should be an explicit choice  as some usages are dangerous:     relnotes= util.concurrent : deprecated the 1-arg overload of  servicemanager.addlistener .  200056a4525bf28f1d252505f1564fdf26322ccb,IO,Util
3842,moe sync 2020-04-02,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add j2cl specializers for doubles.min/max  floats.min/max  ints.min/max  and shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c,Test,IO,Util,i18n
3848,1.x: deanonymize observable inner classes,this pr factors out many anonymous inner classes into named classes and moves them outside  observable .  this cleanup makes the  observable  more compact and helps debugging by showing more meaningful names in stacktraces.,Util,IO
3856,moe sync 2020-04-10,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove  @beta  from  service  and  servicemanager .  this leaves  abstractlisteningexecutorservice  as  @beta .  3806  #3418 relevant to #2966  (i have tweaked jesse s initial pr to leave  abstractexecutionthreadservice.triggershutdown  and  abstractservice.docancelstart  as  @beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  listener.stopping  _might_ be a reasonable substitute for both.)  relnotes= util.concurrent : removed  @beta  from  service  and related classes.  33574d771b099991822ed78a726df0eea4646eea,Util,IO
3866,1.x: add single.tocompletable(),closes #3865.,IO,Test,Util
3867,1.x: improve executorscheduler worker unsubscription some more,as per discussion in #3842  there was an outstanding possibility that unsubscription of a  worker  would not cancel all tasks waiting in the queue. this pr addresses that possibility. i attempted to provoke the condition in a unit test but didn t manage it. nethertheless i think this change completes the protection desired in #3842.  i do have mixed feelings about the possible double calling of  queue.clear()  (once in the  run()  method and once in the  unsubscribe()  method. any preferences?,IO,Util
3868,fix an unsubscribe race in eventloopworker,there is an unsubscribe race condition similar to #3842 in  cachedthreadscheduler.eventloopworker  and  eventloopsscheduler.eventloopworker . image the following execution order:  | execution order | thread 1 | thread 2 | | --- | --- | --- | | 1 |  | submit task a | | 2 |  | submit task b | | 3 | unsubscribe worker |  | | 4 | unsubscribe task a |  | | 5 |  | task a won t run as it s unsubscribed | | 6 |  | run task b | | 7 | unsubscribe task b |  |  so task b will run but its previous task a will be skipped.  this pr adds a check before running an action and moves  workerunderconcurrentunsubscribeshouldnotallowlatertaskstorunduetounsubscriptionrace  to  abstractschedulerconcurrencytests  to test all concurrent schedulers.,IO,Util,Test,i18n
3871,switch colors of search icon for the two search modes,3870,Util,i18n,IO,Test
3879,expose scheduler factories which accept thread factories.,this allows hooks to create schedulers whose threads have different priorities.  closes #3724.,IO,Util,Test
3880,make it easier to create fxml dialogs,,Util,IO,Test
3883,reenable closing of entry preview by pressing esc,,Test,Util,IO
3886,state button,,Util,Test,IO
3887,moe sync 2020-04-28,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fixed treerangemap.subrangemap.putcoalescing  the short circuiting on an attempt to put an empty range caused the contract of putcoalescing to be violated.  3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2,Util,IO
3888,1.x: proposal: onterminatedetach - detach upstream/downstream for gc,by default  operators have final link to their child subscriber and they never clear the upstream s producer. if the end subscriber is referenced  for example in a  compositesubscription   that keeps an entire chain of objects alive and can cause memory leaks (a use case common on android).  this proposed operator detaches the structures and nulls out references if the sequence terminates or the downstream unsubscribes - at the cost of atomic operations and mandatory volatile read for each onnext().   i know this issue has been brought up several times  but instead of adding the overhead to every operator  i propose an operator that can be applied when the developer really needs it (i.e.  could be part of the usual compose(subscribeon/observeon) setup).  on the implementation side  this requires deferred  producer / request()  handling because requests from downstream may appear even before the upstream calls  setproducer  (if at all) and we can t use the base class  behavior for this.,IO,Util
3898,moe sync 2020-05-12,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> ensure queueworker does not outlive sequentialexecutor on ios.  when  sequentialexecutor  is used on ios as j2objc-transpiled code  we need to make sure that  sequentialexecutor.queueworker  does not outlive its outer class. previously  because the inner class was annotated with  @weakouter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. the issue is now fixed by annotating the worker field in the outer class with  @retainedwith .  although  @retainedwith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d,IO,Test,Util
3904,moe sync 2020-05-14,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> suppress identityhashmapboxing check  this would soon become an error in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> adding the sec-ch-ua header. ignore clangtidy. it has to do with the constant naming scheme for   spec for header:   bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c,Util,IO,Test
3907,integrate codestyletest into stringutiltest,during   i observed that having many classes causes difficulties in migrating to a multi module build. since 1) we have [archunit]( in place and 2) the current test in  codestyletest  just covers  stringutils . therefore  i propose to include the test included there into  stringutiltest .,IO,Util
3909,add required mock to linkedfileviewmodeltest,while working on #3704  test were failing in other settings. this is a quick fix to get the tests running.,Util,IO
3918,1.x: replaysubject now supports backpressure,in addition  the behavior of time-limited mode has been changed. late subscribers will now skip stale data.  related issue: #3917,Test,IO,Util,i18n
3919,moe sync 2020-06-04,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> remove @donotcall from fluentiterable.from(fluentiterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> update public suffix data.  this copy is typically updated whenever chrome s copy is updated  which is roughly every 6 weeks. subscribe to the chrome milestone calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1,Util,IO,Interpreter
3931,moe sync 2020-06-12,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> upgraded bytestreams#copy(inputstream  outputstream) to use the faster filechannel if possible. see also  for some background.  relnotes= io : upgraded  bytestreams#copy(inputstream  outputstream)  to use the faster  filechannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34,Util,IO
3934,1.x: testsubscriber extra info on assertion failures,this pr adds extra information to assertion failure messages on  testsubscriber  and  testobserver   indicating: - the listener didn t receive any  oncompleted  calls  which is an indication of hung or skipping operation  - there were errors received  indicating a failure in the event generation process.  previously  if there was something wrong with the sequence  the order and type of assertions were mostly unhelpful: if  assertvalues  was first  the lack of values failure could hide a revealing onerror call. if the  assertnoerrors()  was first  the error is visible but no way of knowing how far the sequence got.  now  it is generally okay to use  assertvalues  first  which along the difference  will print the lack of completion and the number of exceptions received  plus  the  assertionerror  will have its cause initialized to the actual or composited exception. the message format thus changes:      original assertion message with details (0 completions) (+1 error)  caused by       this extra information saved me a lot of time in 2.x and rsc development.  note that this change doesn t make the  assertxxx s also assert for completion or error at all. if the values match  but there is an additional error instead of completion  one has to assert that separately  just like now.,Test,Util,IO
3936,moe sync 2020-06-16,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a,Test,Util,IO
3941,moe sync 2020-06-22,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid reentrancy in executionsequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de,IO,Util,Test
3942,moe sync 2020-06-23,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix memory leak in singletonimmutablebimap which would appear in transpiled j2objc code.  the @retainedwith annotation can not be used on both sides of the retain-cycle. the regularimmutablebimap does not have this problem  because it uses inverse inner class. this cl applies similar trick in singletonimmutablebimap  although without additional inner class.  relnotes=update singletonimmutablebimap to avoid retain-cycle in transpiled obj-c code.  d7d07d50c7ae699b71c9a239212f4c3728180327,IO,Util,i18n
3944,replace all ieee urls with  #3930,ieee tests are broken  but they were before. needs to be fixed.,IO,Util
3948,add completable.andthen(completable)  deprecate endwith(),see #3947,Test,Util,IO
3949,moe sync 2020-06-30,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix converter.java by moving @retainedwith annotation to the correct side of the cycle.  the annotation should be placed inside the  parent  object  and not the  child  object.  reference:   relnotes=n/a  58ad44a9ac2fde40095f28c504c95c6fed902d1f,i18n,Test,IO,Util
3951,1.x: javac- and javadoc-related cleanup in components  part 2,next round of cleanup  still about 100 cases remain in  completable  and  observable   but those will most likely conflict with open prs.,Util,IO
3966,1.x: add multi-other withlatestfrom operators,add  withlatestfrom  operator version that can take 2 to n other sources and combine them with the main source.  related: #3779.,Util,IO
3971,moe sync 2020-07-22,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> add awaitterminationuninterruptibly.  3908 1315 somewhat relevant to  vaguely relevant to   since it creates a  @checkreturnvalue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  relnotes= util.concurrent : added  awaitterminationuninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db,IO,Util
3974,1.x: add terminal clarification to switchmap operators,see #3576 .,Util,IO
3977,1.x: use the correct throwable to set the cause for compositeexception,the cause of #3679 is we use a wrong throwable (its cause has been set) to set the cause and  initcause  will throw an exception. hence  the cause chain is not created correctly. in this pr  it searches the root cause (which doesn t have a cause) and use it to call  initcause .,Util,IO,Test
3981,1.x: document zip() eagerness,see #3960 and #3124.,Util,IO
3986,add schedulers.reset() for better testing,3985  this adds a  reset()  method to  schedulers   with the main benefit being improved testing support. this does slightly tweak the internal api of  schedulers  to use a  getinstance()  approach to allow lazy init. this way we don t have to replace the singleton instance during  reset()  and allow it to lazily re-evaluate upon next usage. otherwise  if you change your scheduler hook  you d always have to make sure you set it before you call  schedulers.reset() .  will run perf tests overnight in case  i m not sure how much of a tradeoff moving to an internal  getinstance()  approach costs  if anything.  cc @zsxwing,Util,IO
3987,moe sync 2020-08-12,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> avoid boxing in doubles.constraintorange() and floats.constraintorange().  fixes   f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> remove  @beta  from  multimaps.tomultimap .  fixes   relnotes= collect : removed  @beta  from  multimaps.tomultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> bring back previously deleted serializedforms so that old data can still be read.  relnotes= collect : data that was previously serialized  and that originated from immutablemap.keyset() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86,IO,Test,i18n,Util
3996,moe sync 2020-08-24,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> adding sec-ch-ua-arch header.  header spec here:   relnotes=n/a  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> work around an android bug in locksupport  this time with @canignorereturnvalue  a849f7f1264b586d44f2b34f274bac9f1d7eff19,IO,Util
4005,1.x: fix spsc queues reporting not empty but then poll() returns null,in the spsc queues  the indexes were written before the actual elements and thus a concurrent  isempty  check would report a non-empty queue but a  poll  would still return  null . the fix swaps the two writes.  note that this an inconsistency in the original jctools code and not the lack of keeping up with it.,IO,Util
4011,reimplement tooltips for file and identifier columns,this 3973.,Util,Test,IO
4014,add specificity to documentation for asyncsubject,this documentation answers questions i had while reading it.,Util,IO
4019,fix acm fetcher import of entries,4018,Test,IO
4024,1.x: update dooneach(observer) javadoc,fixes the documentation problem reported in #3721.,Util,IO
4026,1.x: expand and explain cache() in more detail,this pr rephrases the  cache  documentation a bit and adds workaround for stopping and forgetting the cached values.  related: #3007.,IO,Util
4027,1.x: fix completable.onerrorcomplete(func1) not relaying function crash,the catch around the predicate didn t actually signal the compositeexception.  discovered in #4025,Util,IO,Test
4030,moe sync 2020-09-18,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fix unsupportedoperationexception from treerangeset.subrangeset().add().  4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> deal with class#isinstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> change  forwardingmap.remove(object)  parameter name from  object  to  key  to match  map.remove(object key) .  fixes   204904cbe79852e29aec2e461273f9b6112bd2f9,i18n,IO,Util
4034,1.x: distinctuntilchanged with direct value comparator - alternative,alternative implementation to #4001.,Util,IO
4036,1.x: added zip function with observable array.,as discussed in #4035 with @akarnokd,IO,Util
4039,use all-text-fields magic also in bibtex cleanup.,the cleaup presets in bibtex were not equal to the ones at biblatex. i fixed that:,Util,IO
4041,2.x: update observable s ops to work with observableconsumable,this pr updates the  observable  method signatures to accept  observableconsumable   similar to how  flowable  methods accept  publisher .  the architecture switch may take a couple of more prs. i ll try to limit the change amount in each.,Util,IO
4042,2.x: use xconsumable in completable and single,update to  completable  and  single  to use  completableconsumable  and  singleconsumable  as input.,Test,i18n,Util,IO
4043,add  add braces  formatter,in the context using springer s default bst file  the  title casing  feature of bibtex is not desired. when working with persons quickly creating their bibliography  the solution is to put  {}  around the  title  field. up to now  jabref supports the inverse feature by the  removebracesformatter . this pr adds the  addbracesformatter . i am very aware that the other formatters such as our  org.jabref.logic.formatter.casechanger.protecttermsformatter . however  that formatter relies on a fixed list of terms  whereas this  addbracesformater   just works  (under some assumptions).,Util,IO
4045,2.x: single operators factored out  headers added,single  operators factored out and made them extend  single  directly. added missing headers.,IO,Util
4049,2.x: make flowable operators extend flowable directly to reduce allocation,relatively straightforward  although manual an tedious  refactoring of the flowable operators. the number of files is this large because for consistency  the tests have been renamed as well.,Util,IO,Test,i18n
4051,1.x: fix replaysubject anomaly around caughtup by removing that optimization,adding the backpressure support to  replaysubject  exposed a race condition around the  caughtup  optimization.  the problem occurs when the source thread has caught up after  drain()  returned true but at the same time  a concurrent  drain()  starts running (due to a subscribe() process finishing or requesting on top of the previous  long.max_value ). this concurrent drain may think the replay hasn t started yet (by finding  rp.node  null) or seeing that the buffer has more elements (that may get double emitted).  the current solution is to remove this optimization until we come up with a correct optimization.  related: #4028.,Test,i18n,IO,Util
4053,2.x: convert schedulersupport annotation to accept a string value.,closes #4052.,IO,Util,i18n
4058,cpu leak,see #3943,IO,Util
4059,change date parsing warning to debug statement,,IO,Util
4060,small fixes,,IO,Test,Util
4063,1.x: scan & reduce give javadoc about unsharing the initialvalue,replacement for #3959.,Util,IO
4069,remove second type parameter from subject and flowprocessor.,closes #4056.,Test,i18n,IO,Util
4070,2.x: merge serialdisposable and multipleassignmentdisposable.,closes #4057 although doesn t address the name of the class.,Util,Test,IO
4074,mac graphics,4070,Util,IO
4088,1.x: fix some flaky tests  add more timeout to others,some tests are sensitive to travis hiccups. this adds more timeout to some and reduces heavyness on others.,IO,Test,Util
4091,1.x: apply fixes based on pmd suggestions,some notable changes: - move fields to the beginning of a class - remove unnecessary modifiers and initializers - avoid creating objects to early - update most drain algorithm to use the (more modern)  while (e != r)  pattern - pmd has a few incorrect checks: complaining about a final local that gets used in an inner class - adding braces to ifs - documenting deliberately empty methods - fix internal field and method namings - delegate to  exceptions.propagate,IO,Util
4094,2.x: remove emptysubscriber  start to remove nbpemptysubscriber.,follow up from comments in #4083 and #4085.,Test,Util,i18n,IO
4096,2.x: convert observable onsubscribe to direct implementation,first part of converting the onsubscribe operators of  observable  into direct implementors of  observable  - saves allocation.  don t worry about the unnecessary parenthesis  will be removed in a future pr.,Util,IO
4097,1.x: update map() and filter() to implement onsubscribe directly,this change reduces the indirection and allocation count when using  map  or  filter .,Util,IO
4102,2.x: expose isdisposed method on disposable.,this is a fairly  dumb  addition. there s lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state management.  closes #4075.,Test,Util,IO,i18n
4103,2.x: prepare the operator-fusion enhancement,this pr adds 3 operator-fusion related interfaces:  -  queuesubscription  will support fusion for  flowable  - avoid creating queues  avoid cost of multiple enqueue-dequeue  reduce  request()  overhead -  queuedisposable  will support fusion for  observable  - avoid creating queues  avoid cost of multiple enqueue-dequeue -  scalarcallable  - indicate a scalar constant source  in addition  conditionalsubscriber  is marked and will be moved to the new package and its method renamed to  tryonnext .  unlike reactor-core (and rsc)  there is no  fuseable  marker interface. the ability of fusing is indicated by calling  onsubscribe  with the above  queuex  enabled instances and then called back via  requestfusion . this allows having less duplicated code compared to reactor/rsc - at the cost of usually one extra field to store the  queuex  value that may be null.,IO,Util
4105,fix that sometimes an empty side pane is shown,,Util,IO
4106,opens the directory of the currently edited file when opening a new file,opens the directory of the currently edited file when opening a new file,Util,IO
4107,fix a few things in entry editor,,Util,IO
4111,fix open thread prevents shutdown,@tobiasdiez  as this is just contains the relevant fix and works for me  i would be in favor for using this pr. you could still have your pr as refactoring pr then,IO,Util
4114,2.x: case io acronym like a word.,this is already being done in the library  and is fairly [standard practice](https://google.github.io/styleguide/javaguide.html#s5.3-camel-case).,Test,IO,Util,i18n
4118,1.x: provide an explanation why certain tests are ignored,during code reading i ve found some tests that are ignored but don t have a record why they are being ignored. some of them have meaningful explanations present as line comments  so i decided to make them the parameters of  @ignore  annotation  so it will be correct.,IO,Test,Util
4120,2.x: provide an explanation why certain tests are ignored,the same as #4118  but for 2.x,Util,IO,Test
4122,refactor conditionalsubscriber  add base fuseable subscribers,this pr refactors  conditionalsubscriber  and renames its method to  tryonnext . in addition  two new abstract subscriber types were added:  basicfuseablesubscriber  and  basicfuseableconditionalsubscriber  to help writing operators that support fusion (queue and/or conditional).,IO,Util
4124,saves and reloads window state on close and on open,saves and reloads window state on close and on open.,Test,IO,Util
4126,remove xresource classes,this pr removes the  xresource  types and replaces them with  xdisposable  or  xsubscription  where necessary.,IO,Util
4128,fix build,,Util,IO
4129,2.x: cleanup of pmd suggestions,this pr adjusts the pmd rules and fixes about 300 suggestions.,i18n,IO,Test,Util
4133,refactor private constructor checker into a utility class,move into  testutil.checkutilityclass() .,Test,i18n,IO,Util
4134,2.x: cleanup and test renames,this pr adds the missing  @override  annotations and renames the  observable  unit tests to conform a single name pattern.,Test,Util,i18n,IO
4136,2.x: enable fuseable sources  adjust operators,- adds an operator  hide  to allow hiding and breaking optimizations - update  filter  to support fusions: queue and conditional -  range  now supports fusion: sync-queue and conditional -  fromarray  now supports fusion: sync-queue and conditional -  fromiterable  now supports fusion: sync-queue and conditional - enhanced  testsubscriber  methods to return this - allows chaining the assertions - extended  testsubscriber  to act as a consumer for queue-fusion - introduced  flowablesource  as an intermediate type for operators: allows discovering the upstream in a standard way  allows the ide to generate a constructor with a source value. - added  basicqueuesubscription  that locks down unused  queue  methods plus is a container for an atomic long value useful for request/wip tracking.,IO,Test,Util
4139,convert doaj fetcher to new interface,,IO,Test,Util,i18n
4140,1.x: change completable.subscribe(onerror  oncomplete) to (oncomplete  onerror),closes #3851  closes #4137.,Test,IO,Util
4142,1.x: add rxjavahooks tests  fix small bugs,this pr adds unit tests for the new  rxjavahooks  facility and fixes - small mistakes in calling the right hook. - dealing with constant  completable  sources such as  complete()  and  never() : they executed the hook on class initialization so they couldn t be properly overridden later via an  oncreate  hook. (this could affect the other constants and will be addressed separately.),IO,Util
4145,observable direct rest,this concludes the architecture switch for 2.x.,i18n,Util,Test,Network,IO
4146,fix the initialization of completable.complete(),i forgot to invert the nohook -> usehook change.,Util,IO
4151,2.x: enable scalar and async fuseable sources and intermediates,this pr enables operator fusion for scalar and knowingly single-element sources.  there are no fusion-consumers yet.,IO,Test,Util
4154,ability to create custom schedulers with behavior based on composing operators.,based on #4115  allows the use of operators for controlling the timing around when actions scheduled on workers are actually done. this makes it possible to layer additional behavior on an existing  scheduler . the main parameter is a function that flattens an  observable<completable>  into just one  completable . there must be a chain of operators connecting the returned value to the source observable otherwise any work scheduled on the scheduler will not be executed.  when  scheduler.createworker()  is invoked a  completable  is onnext d to the combinator to be flattened. if the  completable  is not immediately subscribed to an calls to  worker.schedule()  are buffered. once the  completable  is subscribed to actions are then scheduled on the actual scheduler. when the  worker  is unsubscribed the  completable  emits an oncomplete and triggers any behavior in the flattening operator. the  observable<completable>  and all  completable s give to the flattening function never onerror.  slowing down the rate to no more than than 1 a second.      java  scheduler slowsched = new schedulewhen(workers -> {     // use concatenate to make each worker happen one at a time.     return completable.concat(workers.map(worker -> {         // delay the starting of the next worker by 1 second.         return worker.delay(1  timeunit.seconds)      }))   }  schedulers.computation())       limit the amount concurrency two at a time without creating a new fix size thread pool:      java  scheduler limitsched = new schedulewhen(workers -> {     // use merge max concurrent to two at a time     return completable.merge(workers  2)   }  schedulers.computation()),Util,IO,Test
4157,2.x: enable fusion-consumers,this pr enables fusion-consumers such as  observeon    flatmap    zip    concatmap   makes  unicastprocessor  async-fuseable (used by  window )  fixes a few hidden issues with operators and has convenience renames of  subscriptionhelper.validatex . in addition  it features the new  flowableflatteniterable  used by  flatmapiterable  and  concatmapiterable .,IO,Util
4160,2.x: enable op-fusion on groupby  doonx  fix mistakes in map and filter,this short pr enables operator fusion on  groupby  and on the  doonnext    doonerror    dooncomplete  and  dooneach  operators.  in addition  it fixes small mistakes in  map  and  filter  and adds a method to  testsubscriber  to print better fusion-assertion failure message.,Util,Test,IO
4165,2.x: fix wrong reference check in flatteniterable,this was due to bad rewrite of field updater to atomic reference.,Util,Test,IO
4166,2.x: measure overhead of toblocking() first and last,this updates the perf classes a bit and adds a blocking benchmark.  (https://cloud.ent.com/assets/1269832/16580974/5ff08e54-42a7-11e6-889e-cfbb5c0bdecb.png),IO,Interpreter,Util
4167,2.x: reduce overhead of blocking first/last/single,optimize the reception  less allocation  less overhead in general.  benchmark comparison (i7 4790  windows 7 x64  java 8u92)  (https://cloud.ent.com/assets/1269832/16583761/065268fc-42b8-11e6-86a1-4ac91da80c97.png),IO
4172,1.x: add missing backpressure descriptions and update old ones,this pr adds or updates places where the  backpressure:  description was missing or outdated.  unfortunately  github has a hard limit on diff size per file so reviewers have to use their own local diff.,IO,Util
4176,1.x: optimize collect  reduce and takelast(1),this pr reduces the overhead with  collect    reduce  and  takelast  and introduces the  deferredscalarsubscriber  to support similar unbounded-in single-out scenarios.  benchmark comparison (i7 4770k  windows 7 x64  java 8u92)  (  relative to each other: (each practically returning the very last value)  (https://cloud.ent.com/assets/1269832/16669793/a35183fa-4497-11e6-9a93-36f7effe7e3b.png),Test,IO,Util
4178,1.x: improve coverage of rx.observable methods,this pr improves the coverage of  rx.observable  methods plus  - fixes a javadoc issue  - fixes an enum-coverage anomaly in notification (now it is simply biased towards onnext signals) - removes  equals()  from  testexception  as it caused anomalies with deduplication inside  compositeexception  - fixes 3 pmd rule violations (2 suppressed  1 corrected) -  timestamp  and  timeinterval  now use the  schedulers.computation()  as the source for the current time instead of  schedulers.immediate()  which can t be properly hooked. by default  they both return  system.currenttimemillis() .,Util,IO
4182,fix not on javafx thread exception in  generate data from doi,,IO,i18n,Util
4188,1.x: add missing headers  add suppresswarnings,i still forget about these sometimes.,Util,IO
4190,2.x: implement concat(map)eager(delayerror) and expose concat(map)delayerror overload,started a syncing process between 1.x and 2.x operators (based on [this diff]( the first set is the addition of the eager version of  concat  and  concatmap . in addition  all of them get a  xdelayerror  overloads as well.,Util,IO
4192,2.x: +fromasync  distinctuc  skip  take overloads  fix testsubscriber api,this pr adds a few operators and overloads from 1.x -  fromasync  -  just  - 10 arguments -  distinctuntilchanged(bipredicate<? super t  ? super t> comparer)  -  skip  timed - default scheduler -  take  timed - default scheduler -  tocompletable   in addition  this pr fixes the api of testsubscriber by making the initial value primitive  long  and having 0 as no initial request instead of the trickery with  null .,Util,IO
4195,2.x: sync unit tests of completable  add missing features,don t worry about not all things tested in this pr  anything extra relative to 1.x will be covered after the sync.,IO,Util
4204,2.x: test sync + cleanup,- more unit tests ported  -  testobserver  cleanup and sync with  testsubscriber   - fix travis to run with java 7 instead of 8  - added animalsniffer  - cleaned up  combinelatest   introduced  combinelatestdelayerror   - test names are as in 1.x  please don t complain about the  test  prefix in the method names!,Util,Test,IO
4211,2.x: use generic type instead of object in combinelatest and zip,as discussed in   this pr gives a stricter type signature for  combinelatest    zip    ziparray  and  zipiterable . it replaces occurrences of  object  with its generic type  t . in practice users will not need to type-cast arrays in the combine function anymore.,IO,Util
4217,2.x: test sync  +groupjoin  +join  +onterminatedetach,- add  groupjoin    join    onterminatedetach  - fix missing cancellation in  flowableflatteniterable  - fix  fromiterable  error handling - added several unit test methods and classes from 1.x,Util,Test,IO
4222,2.x: subscribeon allow cancelling before the actual subscription happens (just like 1.x),this pr fixes the  subscribeon  operator to allow cancellation before the actual subscription to the source takes place - just like how 1.x works.,Util,IO,Test
4225,1.x: publishsubject fail-fast when backpressured,this pr modifies the  publishsubject  to fail fast if the child subscriber can t keep up. therefore  instead of some other operator failing somewhere downstream  the  missingbackpressureexception  now points to the  publishsubject  instead.   in addition  there were complaints in #3850 that cross-unsubscription doesn t stop another subscriber from receiving events if it comes after the unsubscribe() call in the dispatch loop. since  publishsubject  now tracks request - which is the main extra overhead - it is trivial to add the necessary eager check for the unsubscribed state.  benchmark comparison (i7 4790  windows 7 x64  java 8u102)  (  as expected  this adds some overhead although most noticeably for the mid-range only. short-lived publishing is now slightly faster even.  interestingly  many benchmarks behave oddly in these 1000s range - we could be hitting some jit threshold. while in other benchmarks  the warmup iteration numbers keep increasing as jit does its work but here  it starts out quite nicely then drops 25% and stays that way. i m on windows so jmh -perfasm doesn t work.  if this direction is accepted  i ll update  behaviorsubject    timer()  and  interval()  do do the same tracking.,Util,IO
4226,1.x: single.flatmapcompletable,addresses #4216   happy to receive feedback on the implementation. also should i take the documentation from  flatmapobservable  and adjust it?,Util,Test,IO
4238,1.x: fix typo eigth to eighth,found another one,IO,Util
4251,tomap - prevent multiple terminal events  support backpressure,as per discussion in #4242  if an operator maps an  onnext  emission to an  onerror  emission downstream then it needs be defensive about an  oncompleted  being sent from upstream even if upstream has been unsubscribed.  includes three unit tests that failed on the original code. the fix also has the side effect of enabling gc of  map  when the factory fails ( onerror  was called on the child  not  this  so  map  was not set to null).,Util,IO
4254,1.x: fix singletest generics warnings,this fixes the generics warnings in the new  single.flatmapcompletable  unit tests.,Util,IO,Test
4261,fix display of checkboxes,,Util,IO
4262,dooneach - reduce allocations  report to rxjavahooks,as discussed in #4260  - call  rxjavahooks.onerror  for secondary errors - reduced allocations ( actionsubscriber  ->  actionobserver    operator  ->  onsubscribe ) - added 5 unit tests,Util,IO
4266,2.x: add dedicated concat for array of publishers,this pr adds a dedicated  concat  implementation that works with the source array. the main benefit is that there is no need to serialize emissions because the source array can t throw (unlike  concatmap  where there could be an onerror from the main source while an inner source is running). plus  there is a new  concatarraydelayerror  version.,Util,i18n,Test,IO
4268,convert part of the issue#3861 quality->cleanup entries,,Util,Test,IO,i18n
4270,tomultimap - prevent post terminal emissions  reduce allocations,- switched to  onsubscribe  - switched to use  deferredscalarsubscribersafe  - previous source failed to handle post terminal emissions  - added 4 unit tests,Util,IO
4273,2.x: test sync and missing operators (8/02),- add  rebatchrequests  which delegates to  observeon  with the help of an internal  immediatethinscheduler  that only executes tasks immediately. still not planning to expose an immediate scheduler. - fix  flowablemapnotification  s type signature  no need to restrict it to return  publisher<r>  but can go with  r  itself. - make sure  flatmap  doesn t reorder scalars and elements of the same inner source. - change parameter ordering on  mergedelayerror(iterator)  overloads.,Util,IO,Test,i18n
4278,fix npe with bibdatabasecontext in preview style dialog,3765. i discovered an npe with the bibdatabasecontext in the newdroppedfilehandler.,Util,IO
4282,added a comment for the purpose of the class,this is a comment that describes the purpose of a class.,IO,Util
4288,2.x: move exceptions to public area  + exceptionhelper,related: #4280.  the  exceptions.propagate  and  exceptions.throwiffatal  are too useful to be hidden in an internal package so this pr moves them into the public  io.reactivex.exceptions  package. the terminal atomics related to throwable containers lives in the  exceptionhelper  enum.,IO,i18n,Test,Util
4289,fix npe in merge entries dialog,4233,IO,Util
4291,fix loading and storing of xmp field exclusions,4072,Util,IO
4292,2.x: actually apply custom scheduler when applying future.,correct annotatoin declaration as well.,Util,IO,Test
4297,2.x: rename single base interface types for consistency,addresses #4044,Interpreter,Util,i18n,Test,IO
4298,2.x: clarify behavior of rxjavaplugins.reset() in javadoc,noticed in rxandroid https://github.com/reactivex/rxandroid/pull/316#discussion_r73783555,Util,i18n,IO
4299,fix freeze on import into current library,execute import inspetion dialog in swing thread,Test,Util,IO,i18n
4300,2.x: rename observable base interface types for consistency,addresses #4044.,Util,Test,IO,i18n
4301,2.x: rename observablesource to observablewithupstream,to unblock #4300,IO,Util
4302,convert to circle ci 2.0,i just found that @koppor  already had a  branch and configuration for circle ci 2.0,Test,Util,IO,i18n
4304,2.x: add missing license headers,now every file has a license header.,Util,IO,Test
4309,completely rework save operation,,Util,IO,Test
4310,2.x: fix subscriptionarbiter reentrancy/cancel bug,this pr fixes the case when a call to request() prevented cancellation of the arbiter if the call never returned  thus locking out the drain loop from the cancellation call.  the pr makes sure  request()  is only called outside the guarded region.  1.x is not affected because unsubscription and requesting go on separate  channels .  the pr also fixes  flowableredo  by serializing the repeat signal  processor .,Util,IO,i18n,Test
4311,fix drag and drop in entry editor,4305,IO,i18n,Test,Util
4314,readd status line in form of a snack bar,,Util,IO
4317,fix that  rename and move file  throws file not found exception,4307. moreover  i refactored a bit how files are renamed/moved to the default file directory. this should make it easier to reuse the code.,i18n,Interpreter,Test,IO,Util
4322,1.x: add testsubscriber.assertvaluesandclear,this pr adds an ~~ assertandconsume ~~  assertvaluesandclear  method to  testsubscriber  to assert on value content and then clear the internal value list. this helps asserting on received values without the need to list all previously seen values in  assertvalues .   on a sidenote   getonnextevents()  returns the internal list and one can call  clear()  on it.,Util,IO
4324,2.x: skip static factories when converting between stream types.,also rename publisher->completable factory method and operator implementation to match other stream types.,Test,IO,Util
4326,fix height of entry editor fields,some of the text fields didn t use all the available height  which resulted in a unharmonic display. this is now fixed.,Util,IO
4330,added observable.concat(iterable),see #4329   i also adjusted the test as it was testing the wrong thing before.,IO,Util,Test
4333,fix entry editor field display,some of the entry editor fields were not using all the available height which resulted in an inhomogenous display. this is fixed now.  i also marked more fields as  singleline . moreover  singleline fields are now vertically centered (i m not sure if i like this change or not - but i couldn t find a way to make text in text fields not centered).,Util,IO
4337,fix export of corporate author to msoffice,fix tests,IO,Util
4338,added new keyboard shortcut  ctrl+e  for closing the entry editor. (#4222),enhancement presented here [,Test,Util,IO
4342,2.x: sync javadoc of flowable,this pr adds the javadoc to the  flowable  plus removes some deprecated or unnecessary operator overloads.  by the sheer amount of documentation   flowable  can t be reviewed on github. once the ci passes  i ll merge it and people who wish to review it can immediately start a pr to fix any documentation mistakes.,IO,Test,i18n,Util
4343,remove tabs indent and redundant space.,- remove tabs indent and redundant space.   - currently tabs and spaces are mixed up in the code so just unify them.,IO,Util
4346,2.x: sync javadoc of observable (copy&adjust flowable s),this pr adds javadoc to  observable  by mainly copying and adjusting  flowable  s documentation.  in addition  the method set was synced as well and placeholders added for unported 1.x operators.  the drill is the same as before: after ci  i merge this and reviewers can post prs with necessary fixes.,Test,i18n,Util,IO
4352,2.x: sync single javadoc with 1.x,this pr adds javadoc to the  single  methods  fixes a few api differences.,IO,Util,i18n,Test
4355,auto trim url field,,Util,i18n,Test,IO
4357,2.x: switch to throwing action  switchmapdelayerror  other cleanup,notable changes: - replace the use of  runnable  in the base reactive types to  action  whose  run  method can throw a checked exception. - fix javadoc referencing 1.x types no longer available. - the  switchmap  operator has been enhanced to support delaying errors. - update  concat(iterable)  to use  concatmapdelayerror  because iterable can t throw just anytime but on the boundary  reducing the per-element overhead. -  flowableemitter  has been enhanced with a  serialize()  method that serializes calls to  onxxx  methods. - factored out  flowableemitter.cancellable  into  io.reactivex.functions  as it will be used by the other base reactive types with their  xemitter  implementations. - added  atomicthrowable  with convenience methods that use  exceptionhelper  s terminal atomics with  throwable s.,IO,i18n,Test,Util
4360,2.x: factor out inner classes from the base reactive types,this pr factors out the anonymous inner classes from the base reactive types and introduces the appropriate classes and methods in  *helper  enums.,Util,IO
4361,2.x: test sync  fix retrywhen/redowhen/publish(function),notable changes: - implement the  onbackpressurebuffer  with overflow strategy  change the strategy to plain enum. - additional unit tests from 1.x - implement  publish(function)  properly to support latecommers. - split  flowableredo  into  flowableretrywhen  and  flowablerepeatwhen . - make sure  take(0)  still triggers upstream subscription that is immediately cancelled.,Util,IO
4364,2.x collect - handle post terminal events,just looking at moving some recent 1.x bug fixes and tests over to 2.x.  this is my first pr in 2.x so before i proceed adding more tests from 1.x (to this pr) i want to get some feedback on my approach. in particular in the test  testcollectorfailuredoesnotresultintwoerroremissions  is the  flowable  creation method ok?,Util,Test,IO
4368,2.x: add withlatestfrom many  cleanups and other enhancements,notable changes: - implemented  withlatestfrom  with multiple other sources (both  flowable  and  observable ) - added missing  exceptions.throwiffatal()  after catching throwables - added  sequentialdisposable  and replaced internal use of  serialdisposable  with it - added  package-info.java  to public packages - added javadoc to some interfaces and methods - removed  @experimental  tags and set those methods to  @since 2.0  - added  halfserializer  to deal with single onnext and multiple onerror/oncomplete callers,i18n,IO,Test,Interpreter,Util
4370,2.x: remove try+optional  introduce notification,this pr removes the  try  and  optional  classes and (re)introduces  notification<t> .  there are several ways to implement it. this pr uses the abstract class + private subclasses approach that saves on instance size.  related discussion: #4365.,Test,IO,i18n,Util
4371,2.x: move blocking operators into the base classes,this pr removes the  blockingflowable  and  blockingobservable  classes and moves the blocking operators into the respective reactive classes and names prefixed with  blocking .  in addition  many of the mentions of  flowable  has been replaced with  observable  in  observable .  related: #4366.,IO,Interpreter,Test,Util,i18n
4375,2.x: added missing ops  cleanup 8/19-1,notable changes: - renamed and added safe  create  support to  observable    single  and  completable  - added some javadoc - added  test()  method to  single  and  completable  - factored out  errormode  into  internal.util  (used by various  concat  operators),IO,Util,Test
4379,change latex command handling only for xml chars,refs #3838,IO
4380,2.x: remove test scheduler factory.,this method is misleading in that it s a factory next to a bunch of accessor methods to shared resources. the testscheduler constructor is public and can be used directly.,Util,Test,i18n,IO
4383,2.x: remove double dash on rxthreadfactory thread names.,also optimize name creation to avoid  stringbuilder  having to expand its underlying  char .,i18n,Test,Util,IO
4390,fix entrytype dialog not closed after generate button,when generating an entry from an doi or similar  the entry was inserted  but the dialog not closed.,IO
4391,2.x: remove explicit stackoverflow check as its a virtualmachineerror.,looks like [the linked comment]( was misinterpreted (but not in a way that affected the implementation) as scala considered stackoverflowerror as non-fatal but rxjava always considered it fatal. as such  its explicit check was redundant.,IO
4394,convert exporter customization dialog to javafx,this is my work so far.  i am just beginning the dialog conversion and wanted to share my reasoning so far.  what i am doing is listed in the comments in class  exportcustomizationdialogviewmodel .,IO,Util
4398,2.x: avoid potential npe when onerror throws.,t2 was only initialized if canceling threw an exception. in the happy path it would have never been initialized so when onerror threw the call to suppress() would npe.,IO
4403,2.x: add missing ops  cleanup  fusion fixes,notable changes: - implement  concateager  and its variants - implement  onterminatedetach  - implement  distinctuntilchanged(bipredicate)  - replace  emptydisposable.instance  with  disposables.empty()  due to clash with fusion (sending an instance tells a fusion-enabled source to not expect onnext values yet the test still send those - this was a problem with emptysubscription.instance a while back too). also added javadoc warning about its use - add  observablescalarxmap  optimization to  observable.xmap(function)  and their operator s  subscribeactual  - make  observablejust   scalarcallable  and sync-fuseable with  scalardisposable  (similar to  flowable.just() ) - make  observable.buffersize()  public for convenience. - fix  flatmap  fused  callable  handling - renamed  objects  to  objecthelper  to avoid accidental bad imports of  java.util.objects  of java 8.,Util,i18n,IO
4410,2.x: cleanup  enhancements 8/23-1,notable changes: - introduce  emitter<t>  as a base interface for  flowableemitter  and  observableemitter   use it for the  generate()  operators to be the push surface. - hide fusion-related methods in  testsubscriber  and  testobserver   remove  test()  method overload from the base reactive classes  introduce  subscriberfusion  and  observerfusion  helper in the test source set - enable fusion on  observable.range() . - move  observer -related tests into the  observers  test package.,Test,i18n,IO,Util
4413,fix group hit counter when adding entries,3537 by replacing the eventbus subscription by a javafx listener.,Util,i18n,Test,IO
4417,2.x: add assembly tracking  minor fixes and cleanup,notable changes: - renamed  amb(sources)  to  ambarray(sources)  to be consistent with the naming of other operators with varargs input - renamed some other varargs operators ot  xarray  to be consistent - added  rxjavaplugins.onassembly()  to operators  note that no other infrastructure (such as  enableassemblytracking  was added  companion libraries may later utilize these hooks to inject the necessary wrapper classes. - extended  rxjavaplugins.onassembly()  to support  connectablex  operators - renamed  flowprocessor  into  flowableprocessor  to avoid future confusion with jdk 9 s  flow.processor  - removed common value extraction methods from  subject  and  flowableprocessor  and left them in the implementations - made common terminal state checking methods of  subject  and  flowableprocessor  as abstract since all subtypes can implement them reasonably - fixed copy-paste errors in javadocs  such as wrong class named  referencing non-existent backpressure,IO,Test,Util
4418,1.x: sync dooneach java doc,the other  dooneach  function has the right java doc. terminal events such as  oncompleted  /  onerror  are also included in  dooneach .,Util,IO
4421,2.x: fixes  cleanups  renames,changes: - fix spelling mistakes - more consistent parameter naming scheme based on #1353 (but incomplete  rc2) - fix bugs due to wrong variable naming - compact logic expressions - fix  completable.doafterterminate  not called the right time -  onerrorreturnvalue  renamed to  onerrorreturnitem   @davidmgross once this pr has been merged  it would be great you submitted one that has  //todo  markers on those lines that need attention. the naming scheme you suggested doesn t come intuitively to me so i may skip many of them without the markers.,Util,IO
4422,2.x: add subscribewith to get back the subscriber/observer fluently,this pr adds the  subscribewith  methods to the base reactive types to mainly help with the 1.x to 2.x changeover as 2.x  subscribe(subscriber)  return void instead of the resource/cancellation/unsubscription type  disposable . see the javadocs and the unit test for example use.  related: #4400,Test,Util,IO
4423,1.x: add to() conversion function to all stream types.,this deprecates extend() on observable  which is a less powerful version of these functions.,Test,Util,IO
4425,1.x: remove  completable  prefix from nested interfaces  move its subscription to top-level.,this is only the  completable  part of #4420. it does not make  completablesubscriber  an abstract class nor create  single.operator .,Util,Test,IO
4428,fixed radiobuttons in preference menu (#4409),previously multiple radiobuttons in preference menu belonging to the same group were selectable simultaneously. this issue is now fixed on multiple occasions  allowing only one option per group to be selected at the same time. issue: 4409](4409),Util,Test,IO
4430,2.x improve coverage  fix bugs,the new tests revealed some bugs (nothing major).,i18n,IO,Network,Util,Test
4431,add citation styles as git submodule,this pr is prepares #3421 by removing the dependency on  org.citationstyles:styles:1.0.1-snapshot  and instead embedding it as git submodule. this builds the citation styles directly into the jabref jar.,Test,Util,IO,Network,i18n
4434,2.x: cleanup  bugfixes  coverage 8/27-2,- remove unused code - improve coverage of  single    completable  and  observable  - fix minor bugs in operators,Util,i18n,IO,Test
4435,2.x: cleanup  behavior clarifications  fixes  coverage 8/28-1,- add tests - fix mistakes in  testobserver  - combine  disposablehelper  and its inner  disposed  enum - compact  notificationlite  and its inner  complete  enum - fix npe in  listcompositedisposable  constructor - fix  deferredscalarobserver  fusion and state management - turned a few empty enums into classes with private constructor: coverage can t cover them 100% otherwise. these empty enums have a constructor in their bytecode which never gets called and thus there s always 10 instructions / 2 method calls missing. - removed  testobserver.awaitdone()   one should always await with timeout,i18n,Util,Test,IO,Network
4436,2.x: maybe for lazy optional,in #4321 i hit on the problem of needing a lazy object that could either be zero or one value. in that issue the idea of switching the return value of  reduce(r  func2<r t r>)  from  observable<r>  to  single<r>  because that operator can only ever produce an observable that emits exactly one value. the problem was that  reduce(func2<t t t>)  could not be changed to  single<t>  because the source observable could be empty and therefore not produce one and only one value.  to solve this problem i mentioned we could create a lazy type that represents either 1 or no value could fill the gap between  completable  and  single<t> .  this pr is for the introduction of the  maybe<t>  type.,Util,IO
4437,2.x: subject/processor improvements & small cleanup,- open up  verifypositive  as protected for validation convenience in subclasses - improve size and state handling of  deferredscalarsubscription  - enable async-fusion on  asyncsubject  and  asyncprocessor   compact the classes - **behavior change**  asyncx.hasvalue()  returns false until the terminal state has been reached - compact the classes  publishsubject    publishprocessor    behaviorsubject    behaviorprocessor    replaysubject  and  replayprocessor  - enable async-fusion on  unicastsubject   compact the class - rename  basexqueuedisposable  to  basicxqueuedisposable  to match  basicxqueuesubscription  - introduce  deferredscalardisposable   refactor  deferredscalarobserver  - adjust tests that asserted on the former parameter names - subjects and processors can now be created with newing up their constructor:  new publishsubject<>()   there is no mandatory shared state between the  observer  part and the  observable  part because both are now stateless on their own.,IO,Util,i18n,Test
4441,fix flowableonbackpressurebufferstrategy,fix buffered objects not propagated downstream in flowableonbackpressurebufferstrategy fix drop strategy logic in flowableonbackpressurebufferstrategy add unit test for flowableonbackpressurebufferstrategy  copied from flowableonbackpressurebuffertest  there is still some work needed to have a better coverage,Test,Util,IO
4442,1.x: cleanup  javadoc  completable.fromemitter,- add javadoc to  asyncemitter.backpressuremode  (#4199) - deprecate  observable.fromasync   add  observable.fromemitter  instead (#4255) - add  completable.fromemitter()  (#4356) - add missing placeholder  @since  tags - fix some generics error  rxjavahooks  - add race helper to  testutil  - fix javadoc warnings,Test,i18n,Util,IO
4450,2.x: fixes  cleanup  coverage 8/31-1,- improve coverage of internal classes - turn more empty enums into classes with private constructors - fix  single.subscribeon  and  completable.subscribeon  disposable management. - create a compact  futuresubscriber  and  futureobserver  classes  drop their former enums - deprecate  disposables.from  methods  add  disposables.fromx  methods where x = argument type - fix error management in  completable.mergex  operators. - remove unused methods from internal classes,i18n,IO,Util,Test
4452,added extra stats to be sent with mrdlib recommendations,* added the following stats to hopefully improve quality of recommendations:,IO,Util
4453,fix error in l10n file: toogle -> toggle,,Test,Util,IO
4454,2.x: start reimplementing maybe with up-to-date javadoc  tests and algo,this pr reimplements the  maybe  with more up-to-date algorithms (the original was a copy-paste of some older single and completable code it seems) and adds javadoc and tests along the way. not all operators have been rewritten yet (and no placeholders). early adopters should refer to the  tox  methods on the base reactive types. the pr also adds the  rxjavaplugins  hooks to support  maybe .  in addition  i ve fixed javadoc mistakes in the other base reactive types (referring to the wrong types).,Test,IO,Util,Network,Interpreter,i18n
4458,2.x: rename observable and single #dooncancel to #doondispose,#4456  completable already used .doondispose() however i renamed the arguments to match observable and single,Util,IO
4460,1.x: completable add dooneach,first part of #4457   is it okay that i reused notification like that?  also are there any java 6 generics missing? it would be nice if this project was set up to target java sdk 6  as my default seems to be java 8 and i don t get any errors shown in the ide.,Util,Test,IO
4461,1.x: single add dooneach,really not that happy with  onnotification.call(notification.<t>createonnext(t))   do you guys have any other way of doing this? there s no way of creating a notification that has the  oncompleted  plus a value. a new one could be introduced there though. also the  dooneachsuccess  test feels clunky.  also why does single when using the  do  methods does the job by using an observable? and later converting it back to a single again. is it due to the way single was implemented in 1.x? with completable there is no converting of back and forth needed.  javadoc will follow once we sorted out the few nits here.  4457,IO,Util
4466,1.x: deprecate notification.createoncompleted,4462   it might just as well shine some light into which method should be used and explain why there are 2,Util,IO
4467,2.x: add more maybe operators  fix a few javadoc mistakes,- move  verifypositive  into  objecthelper  - fix javadoc of  flowable.subscribe()  and  observable.subscribe()  mentioning  subscription  from 1.x -  maybe : add  amb    concat    concatarray    merge    mergearray    concatmap    subscribe    subscribewith    doonevent,IO,Network,Test,i18n,Util
4468,respect preference state,address issue [4427]( where the saved state of the update timestamp checkbox is not restored.,IO,Test,i18n,Interpreter,Util
4469,2.x: coverage and fixes 9/03-2,- enable fusion with  observable.map  - remove impossible branches in some classes - add more tests to cover tool classes - fix  observable.range()  entering regular emission if fusion-drain is interrupted - fix  fullarbiter  and  observablefullarbiter  not cancelling/disposing the incoming subscription/disposable in some cases,i18n,Network,Util,Test,IO
4484,4467 - fix save button,: #4467,IO,Util
4488,2.x: add new methods to maybe  observable and single from 4481,this pr adds just the new methods from #4481 to allow a much cleaner change of return types later on.,IO,Util
4490,2.x: rename emitters #iscancelled to #isdisposed,renames observable/single/completableemitter#iscancelled to #isdisposed.  this now causes a bit of a weird situation where most (not all) emitter classes implement  disposable  as well  so both interfaces expose the same  #isdisposed  method. before the  #iscancelled  methods were basically just calling  #isdisposed  or had the same implementation.   suggestions on how to improve this?,Util,IO
4491,2.x: reduce blockingx overhead  move internal observers to common pkg,this pr compacts the  blockingx  operators by extending  countdownlatch  and implementing  singleobserver    completableobserver  and  maybeobserver  with the necessary blocking await mechanics.  benchmark comparison (i7 4770  windows 7 x64  java 8u102):  (  in addition  the internal package  subscribers.single  and  subscribers.completable  has been removed and the classes moved into  io.reactivex.internal.observers  package. the old blocking enum helpers were removed as well.  the  blockingsinglesubscriber  and  blockingsingleobserver  abstract classes have been renamed to  blockingbasex  to avoid name confusion (they have nothing to do with the  single  type).,IO,Interpreter,Util,Test
4493,2.x: more maybe operators  minor cleanups 9/07-1,- minor javadoc corrections - note: some maybe operators shifted within the file - add to  maybe :  concatarraydelayerror    concatarrayeager    concateager    concatdelayerror    mergearraydelayerror    mergedelayerror    sequenceequal    timer    using    zip    ziparray  - improve coverage of  observable    single  and  maybe . - move tests from  observabletests  into  observabletest  drop the former.,Test,IO,i18n,Util
4496,2.x: remove trailing whitespace,removed them like this:   find . -type f -name  *.java  | xargs sed -i    -e s/[ \t]*$//   $1    i think it s best to review this locally or by appending  ?w=1  to this url to let github ignore white space changes.,Util,i18n,Interpreter,IO
4500,1.x: remove trailing whitespace,dunno whether this is wanted or not in 1.x. if not just close this pr.,IO,Util,Interpreter,i18n
4502,2.x: replace  finallydo  references with  doafterterminate,this should be less confusing.,i18n,IO,Util,Test
4503,2.x: add system properties to adjust thread priorities of schedulers,this pr adds the ability to specify the default thread priorities of  computation()    io()    newthread()  and  single()  schedulers via system properties. i ve added the property names to the  schedulers  javadoc.  related: #4389.,Util,IO
4504,2.x: add disposable observer for maybe  completable & single,also any reason the dispoable is called  s ? is it still from the subscription time?  4501,IO,Util
4506,2.x: fix operator refcount  disable findbugs (due to travis oom),this pr fixes the operators  refcount  (ensure proper call order to onxxx)  disables findbugs due to out-of-memory kills on travis and increases the half-time sleep of a flaky unit-test.,Test,IO,Util
4507,bump java-diff-utils from 2.2.0 to 4.0,bumps [java-diff-utils]( from 2.2.0 to 4.0. <details> <summary>commits</summary>  - see full diff in [compare view]( </details> <br />  [![dependabot compatibility score](  dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot ignore this [patch|minor|major] version  will close this pr and stop dependabot creating any more for this minor/major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself) -  @dependabot use these labels  will set the current labels as the default for future prs for this repo and language -  @dependabot use these reviewers  will set the current reviewers as the default for future prs for this repo and language -  @dependabot use these assignees  will set the current assignees as the default for future prs for this repo and language -  @dependabot use this milestone  will set the current milestone as the default for future prs for this repo and language -  @dependabot badge me  will comment on this pr with code to add a  dependabot enabled  badge to your readme  additionally  you can set the following in your dependabot [dashboard]( - update frequency (including time of day and day of week) - automerge options (never/patch/minor  and dev/runtime dependencies) - pull request limits (per update run and/or open at any time) - out-of-range updates (receive only lockfile updates  if desired) - security updates (receive only security updates  if desired)  finally  you can contact us by mentioning @dependabot.  </details>,Util,Test,IO
4513,2.x: fix switchmap bad cancellation,both  switchmap  implementations didn t properly cancel the current inner consumer (but instead cancelled the outer  connection  only).  reported in #4512.,Test,Util,IO
4516,2.x: fix single.using  add unit tests and coverage,i ve forgotten to create a branch so the first part of todays coverage work [landed in 2.x direct]( - removed unused methods from various classes - compacted  spscarrayqueue  - added null checks to  spsclinkedarrayqueue.offer()  and  mpsclinkedqueue.offer()  - fixed  resourceobserver  not calling  onstart  - added direct notificationlite-emission methods to  appendonlylinkedarraylist   updated  serializedobserver  and  serializedsubscriber  to use it directly instead of the former indirection -  testobserver.isdisposed  now reports true if terminal events were received (#4514) -  resourcesubscriber  to use  subscriptionhelper  s deferred subscription/requesting management - added unit tests to cover  disposablexobserver s -  serializedobserver  and  serializedsubscriber  now have proper unit tests each  this current pr fixes  single.using  not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements.,IO,Util,Test
4518,2.x: add missing resource observer for maybe  completable & single and adjust some javadoc,4517,Test,Util,IO
4519,fixed 4365 put html in clipboard,4365 .,IO,i18n,Test,Util,Network
4522,observable/flowable/completable/single.delay should always call onerror on the provided scheduler,4521,Util,Test,IO
4525,2.x: fix generics t in zip & combinelatest,4524  test for combinelatest fill follow,IO,Util
4528,2.x: add maybe operators  add annotation and source code checker tests,- add  maybe  operators:  delay    hide    isempty    onerrorcomplete    onerrorresumenext    onexceptionresumenext  - add more fusion interfaces and mark  maybe.just  and  maybe.empty  as  scalarcallable . - added unit test to verify base reactive classes have proper scheduler and backpressure annotations (wherever appropriate) - added unit test to verify the javadoc of the main reactive types have the **backpressure:** and **scheduler:** sections in them (via scanning the source files if it can find it possible  works for me) - added unit test to verify that when **scheduler:** section mentions a method name  it actually matches the method the javadoc is there for (lots of copy-paste errors were found this way) - fix the annotations and documentation errors detected above - the backpressure javadoc section checker for 3 types are currently disabled as i m out of time for tonight.,Network,Util,IO,Test,i18n
4529,2.x: fix maybetimber by using scheduler and unit,also one question why does  completabletimer  check  if (!sd.isdisposed()) {  before replacing but singletimer does not? i adjusted maybetimber to singletimer so i didn t add the check there either.  however i feel like this should be consistent  can you elaborate which one is wanted?,IO,Util
4530,2.x: cleanup 9/12-1  more maybe operators  more source code checking,- more  maybe  operators:  onterminatedetach    repeat    retry  - fixed missing  backpressure:  entries of the javadoc where the base type uses flowable/publisher - new base type source parser and check for javadoc mistakes: wrong type mentions  a/an use - fixes of those javadoc mistakes,Test,Util,i18n,IO
4533,add preselect last used export format in export to clipboard dialog,add feature to store last selected export file type  and preselect that type the next time the dialog to export to clipboard is fired.,Test,IO,Util
4537,2.x: last maybe operators,this pr adds the last couple of  maybe  operators  timeout  and  unsubscribeon .  @abersnaze let me know if i missed an operator or you want some overload.  in the subsequent prs  i ll change the return types of some classical operators to better indicate the cardinality they have ( single    completable ).,Test,Util,IO
4538,2.x: add most relevant ~100 operators  reactive-streams tck tests,this pr adds about ~100 reactive-streams test compatibility kit (tck) tests of rxjava s most relevant operators and operation modes.  the pr also contains a behavior fix for  unsubscribeon  that now stops propagating events if the cancelled because it may take arbitrary time for the scheduled cancellation to reach the upstream which generally keeps emitting in the meantime.,IO,Util,Test
4540,2.x: add create test with cancelable for all types and add more maybecreatetest cases,setcancellable  was not tested before.,Util,Test,IO
4541,2.x: small cleanup and tck fix,- change the  callable<publisher<t>>  parameter of  timeout  to plain  publisher<t>  to simplify the api surface  use  defer(callable<publisher<t>>)  as input instead - change the parameter order of  timeout  from  (long  timeunit  publisher  scheduler)  to  (long  timeunit  scheduler  publisher)  to better match the general pattern of time-unit-scheduler. -  observable.timeout  has been updated similarly - add  flowableawaitonsubscribetck  to workaround the case when calling  onnext  (indirectly) from  onsubscribe  may be unexpected (plus randomly fails the observeon tck test).,IO,i18n,Test,Util
4542,2.x: cleanup of some javadoc errors and mentions of  nbp,- fix some javadoc typos - replace javadoc mentioning of  unsubscribe  with either  cancel  or  dispose  - some minor algorithm reorganizations based on intellij analysis - remove the mention of  nbp  from the code and documentation (it refers to an earlier naming scheme for observables and observers),Test,i18n,IO,Util,Network
4549,fixes that renaming a group did not change the group name in the interface,3189.,IO,i18n,Interpreter,Util
4554,refactor bibentry deprecated method,refactored bibentry deprecated constructor,Util,Test,i18n,IO
4555,automatically created groups with field to group by as entrytype (#4539),,Test,Util,IO
4560,delete the deprecated bibentry constructor,this is the followup for   which removed the usage of this constructor. this pr also deleted this code.,IO,Util
4567,add extra maybe iterable amb tests for overlapped emissions,- asserting that downstream will get the results of the first source that began emission  even if multiple sources have overlapped emissions - testing success and error paths,Test,IO,Util,i18n
4570,2.x: last() to return single,this pr changes the return type of  last()  to  single<t>  and updates the relevant locations.  originally  it was implemented as  takelast(1).single()  so to reduce impact  all other original uses now have this inlined.,Util,Test,IO
4573,2.x: make any() and all() return single  patch up tests,this pr changes the return type of  any()  and  all()  to  single .  i ve also did a small change to  testobserver  by having it implement the other  xobserver  types. this resulted in one extra method  onsuccess  to be added but now you can subscribe  testobserver  to  single    maybe  and  completable  without conversion yet still  test()  them with the same convenient api.      java flowable.range(1  10).any(v -> true).test().assertresult(true),Test,i18n,IO,Util
4574,2.x: collect  tolist  tosortedlist  tomap  tomultimap to return single,this pr makes the following operators return  single : -  collect  -  collectinto  -  tolist  -  tosortedlist  -  tomap  -  tomultimap   and changes the documentation to mention  single  instead as well. (there are some whitespace removals i forgot previously).,Interpreter,IO,i18n,Util,Test
4576,2.x: count  elementat  ingoreelements  last  single  reduce  reducewith to return non-flowable,this pr updates many  flowable  operators to return  single    maybe  or  completable : -  count()  ->  single  -  elementat()  ->  maybe  -  elementat(t)  ->  single  -  first(t)  ->  single  -  firstelement()  ->  maybe  -  ignoreelements()  ->  completable  -  reduce(callable  bifunction)  ->  single  -  reducewith(u  bifunction)  ->  single  -  single(t)  ->  single  -  singleelement()  ->  maybe   and deletes  flowable.tosingle    flowable.tomaybe  and  flowable.tocompletable .   flowble.reduce(bifunction)  was not yet changed from  single  to  maybe  (to allow empty sources to be reduced to empty maybe).  related: #4321,Test,Util,IO,i18n,Network
4579,2.x: convert the observable operators to return single/maybe,this pr updates many  observable  operators to return  single    maybe  or  completable : - count() -> single - elementat() -> maybe - elementat(t) -> single - first(t) -> single - firstelement() -> maybe - ignoreelements() -> completable - lastelement() -> maybe - reduce(bifunction) -> maybe - reduce(callable  bifunction) -> single - reducewith(u  bifunction) -> single - single(t) -> single - singleelement() -> maybe  and deletes observable.tosingle  observable.tomaybe and observable.tocompletable.  in addition   flowable.reduce(bifunction)  now returns  maybe<t> .  related: #4321,Util,Test,Interpreter,IO,i18n
4580,rename asyncemitter to emitter,as per discussion in #4577  renaming  asyncemitter  to  emitter  via deprecation.  there is a catch though.  completableemitter  is correctly named now and depends on  asyncemitter  via the method:      java  void setcancellation(asyncemitter.cancellable c)       when can we break the api of that class?,IO,Util
4581,2.x: remove some dead code,also what about intfunction it s right now in the public api however not used. so the question is does rx want to expose that interface?,Util,IO
4582,2.x: add missing maybe tests for concatwith & onerrorresumenext,they had no tests previously,Util,IO,i18n,Test
4583,2.x fix flowable.create() not reporting null values properly  unify,exception msg across  reported on [stackoverflow](  there was no proper null check in the various emitters. i ve also unified the message pattern across all  create()  emitters.,Test,IO,Util
4585,2.x: evaluate schedule initialization via callable,this implements the solution proposed in #4572 - to initialize the schedulers via a callable  rather than directly via a value.,i18n,Test,Util,IO
4586,2.x: add error assertion with predicate to testsubscriber and testobserver,added support for error assertions with to testsubscriber requested in #4498 to support custom error evaluation. removes the need to implement equals and hashcode in exceptions.,Test,Util,IO
4589,2.x: add singleorerror  firstorerror  lastorerror & elementatorerror to observable and flowable,closes #4588,Util,IO
4590,2.x: report errors from onerror to plugin when done,for the first one that i found i even wrote a test. then i started noticing more missing spots. if wanted i could port that one test to every operator that i touched. though i didn t really find tests testing that errors are propagated through the plugin api.,Util,Test,IO
4593,2.x: enhance npe messages,now all npe thrown internally are having this standard message,Util,i18n,IO
4601,convert duplicateresolverdialog to javafx,4598,Test,Util,IO
4602,convert new version dialog to javafx,,Interpreter,Util,IO
4604,enable default cursor for new entry,4600.,Util,Test,IO
4607,convert  from aux file  dialog to javafx,,Util,IO
4609,2.x: factor out typical testobserver/testsubscriber methods,this pr introduces a new abstract internal class  basetestconsumer  which now hosts the  assertx  methods of  testsubscriber  and  testobserver  which were duplicates before.,Util,IO
4612,2.x: improve performance of observable.flatmapiterable,this pr improves the performance of  flatmapiterable  by inlining the consumption of the generated  iterable . the performance improvement comes from direct iteration and emission plus removing the overhead of the regular  flatmap  as such source mappings are inherently synchronous. ### benchmark  i7 4790  windows 7 x64  java 8u102  jmh 1.13  ops/s - bigger is better  (  10x overhead reduction in flattening a single element  iterable .  (  half the overhead compared to (an already optimized)  flowable.flatmapiterable .  ![image](  nice improvement on the cross-range benchmark (stream 1 million element split into n outer and m inner elements where n \* m = 1 million):  ![image](  also quite better than  flowable.flatmapiterable .,Test,Util,Interpreter,IO
4614,2.x: add maybe.flatmapsingle,gave that implementation a try. feedback is welcome i think there are improvements that can be done.,Util,Test,IO
4617,convert libraryproperties to javafx,converted the library properties dialog to javafx,Util,IO,Test
4619,2.x: make compositeexcpetion thread-safe like 1.x and also fix some issues,right now compositeexcpetion has several issues: -  compositeexception(throwable exceptions)  doesn t deduplicate exceptions and flatten compositeexceptions like  compositeexception(iterable<? extends throwable> errors)  - if using  compositeexception(iterable<? extends throwable> errors)  to create compositeexception   suppress  cannot be used. -  suppress  doesn t update  cause . -  suppress  doesn t deduplicate exceptions and flatten compositeexceptions. -  suppress  and  throwable.addsuppressed  are pretty confusing for java 7+ users. without looking at the implementation  it s hard to figure out the differences.  this pr made the following changes: - remove  compositeexception.suppress  so that it s easy to make compositeexception thread-safe.   - this may cause some performance lost in some path rarely happening  e.g.  an excpetion is thrown from  onerror   but that s not a big deal.   - since  suppress  is removed  it doesn t make sense to create an empty compositeexception  so  isempty  is removed and defense codes are added. - defense codes for bad exceptions. - deduplicate excepctions and flatten compositeexceptions for  compositeexception(throwable exceptions) .,Test,IO,Util
4621,1.x: notificationlite - reduce allocations,a lot of commonly used operators allocated an instance of  notificationlite  as a field in a subscriber but for no great type-safety benefit. i ve cut these fields by converting all instance methods of  notificationlite  to static methods and removing the  notificationlite.instance()  method.  the changes are trivial till you get to the  subjects  that would pass instances of  notificationlite  in methods of the  subjectsubscriptionmanager . still simple changes but reviewing these is a good idea.  rxjava2 goes a bit further in the internals of  notificationlite . i d like to leave changes to the internals beyond making methods static for another pr if appropriate.,Test,IO,Util
4622,2.x: enable operator fusion in onbackpressurebuffer,this pr enables operator fusion in  onbackpressurebuffer . the main benefit is that given a non-backpressured source  using  observeon  now reuses  onbackpressurebuffer  s (un)bounded queue seamlessly.,Test,IO,Util
4625,2.x: replace  resource  observers with plain  disposable  observers in tests.,this makes the resource observers unused internally and i m curious as to whether they deserve to stick around in the public api. any thoughts?,Util,IO,Test
4627,2.x: use predicates in basetestconsumer asserterror(class/throwable) to remove duplicate code  tests tweaks to remove few ide warnings,messages and error checking was duplicates between all three asserterror overloads.,Test,Util,IO
4629,2.x: add completable.fromrunnable(),addresses #4628  > there s  maybe.fromrunnable  but  completable  is missing this method.,Util,Test,IO
4636,update mockito to 2.1.0-rc.2,equivalent of #4634   but now for the 2.x branch.,Test,Util,Network,i18n,IO
4639,2.x: fix mockito 2.1 changes using deprecated api of its own,anylistof()  is deprecated in mockito 2.1.0-rc.2 and the github diff can t show such uses.  (in addition  there was a missing  serialversionuid  in another pr.),Test,IO,Util
4641,1.x: safesubscriber not to call rxjavahooks before delivering the original error.,before the introduction of  rxjavahooks   the  safesubscriber._onerror  called the original error handler with the exception it received which was by default an empty handler. the default  rxjavahooks.onerror  behavior  however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properly.  this pr restores the  safesubscriber._onerror  to skip the  rxjavahooks  and call the original handler directy so old tracking code should still get all safe error while newer hooking doesn t get called.  related: #4332.,IO
4645,2.x signal npe observableamb flowableamb,this pr addresses #4640,IO,Test,Util,i18n
4647,2.x: merge ambarray and ambiterable into amb for single  maybe and completable types,this pr addresses #4633 - merge singleambarray and singleambiterable operators into singleamb - merge maybeambarray and maybeambiterable operators into maybeamb - merge completableambarray and completableambiterable operators into completableamb,IO,Util,Test,i18n
4648,1.x: rework single internals to reduce overhead and stack depth,this pr makes the  single.onsubscribe  as the primary means to execute the subscribe action in  single  and former couple of reused  observable  operators are now recreated with  single.onsubscribe .  because  single  is now marked final  we can t remove the former  observable.operator  and  observable.onsubscribe  entry points (but may be deprecated in a separate pr).,IO,Util
4651,switch maybe and single to use their transformers in compose(),4650,Test,IO,i18n,Util
4654,upcast concurrenthashmap to map to avoid compatibility issue,resovles #4653  see http://stackoverflow.com/a/32955708/61158,Util,IO
4658,fix for #4628 - cant save new content selectors,4628,Util,IO,Test
4661,2.x: cleanup and coverage 10/03,- remove unused methods and classes - make sure  maybe.toflowable  and  maybe.toobservable  allows macro-fusion back to the original type - improve coverage of various components,Test,Network,IO,i18n,Util
4663,2.x: cleanup and fixes 10/03-2,- more coverage - fix some composite exception ordering - fix a few bugs,IO,Test,Network,Util,i18n
4666,2.x: coverage and cleanup 10/04-1,- improve coverage - remove unused  unnecessary or impossible code paths - fix order of inner exceptions in the reported  compositeexception  in various operators -  maybe.ignoreelement()  now returns  completable,i18n,Test,Util,IO,Network
4667,2.x: flatmap{completable  maybe  single} operators,this pr adds  observable.flatmapcompletable(function<t  completablesource>)  and  flowable.flatmapcompletable(function<t  completablesource>)   both resulting in  completable  (+ support for fusing back to the original type).  **edit**  added  flatmapmaybe  and  flatmapsingle  variants to both  flowable  and  observable .,Util,IO
4669,2.x: fix javadoc for single.flatmapobservable,- wrong return type was described - some git merging information was added,IO,Util
4672,2.x remove function from transformer interfaces to allow a single obj…,this pull request removes function from the super type of the various transformer interfaces. while these are technically functions  the problem is that if they all extend function then you cannot have a single object instance that can implement multiple transformer interfaces. the goal is to be able to call a function that returns an object that can be passed to observable.compose or single.compose and so on.  this was an issue with rxlifecycle project. see this for more info: https://github.com/trello/rxlifecycle/issues/39,IO
4674,2.x: add javadoc and unit test to the recently changed xtransformers,this pr adds the javadoc and crash-testing for each xtransformer interface changed by #4672.,IO
4678,2.x: fix flatmapx calling spsclinkedarrayqueue.offer concurrently,i forgot to synchronize the offer part of the new flatmapx operators (since of course  spsc is for single producer only but here there could be concurrent non fast-path queueing of values).   (there is an mpsclinkedarrayqueue in jctools but i m not confident in it and don t want to use mpsclinkedqueue due to the node allocation.),Util,IO
4681,2.x: fix flowable + single elementat and elementatorerror operators on empty sources,this will 4680 - elementatorerror(1) on an empty source just leaves the new single hanging without signalling onerror() - elementat(1) on an empty source just leaves the maybe hanging without signalling oncomplete() - i also noticed that elementat() with a default value on an empty source did not work either.,IO,Test,Util
4685,2.x: test static from methods and add maybe.fromsingle & fromcompletable,- add maybe.fromsingle by reusing maybefromsingle - add maybe.fromcompletable by resuing maybefromcompletable - remove anonymous classes in various operators - add tests for   - completable.fromaction()   - completable.fromcallable()   - completable.fromobservable()   - completable.frompublisher()   - completable.fromrunnable()   - completable.fromsingle()   - maybe.fromaction()   - maybe.fromcallable()   - maybe.fromcompletable()   - maybe.fromrunnable()   - maybe.fromsingle()   - single.fromcallable(),IO,Util,Test
4686,2.: fix flatmapx over-cancellation in case of an inner error,a non-delayed error set the cancellation flag and thus any subsequent drain would just quit instead of delivering the error.  (and while i m at it  i ll try to figure out a way to not get killed by oomkiller).  reported in #4684.,Test,IO,Util
4687,2.x: add observable.rangelong & flowable.rangelong,will 4683 - adds observable.rangelong() - adds flowable.rangelong()  both implementations are copied same for the unit tests.  what should we do about the range overflow check? we could use bigdecimal to check that.,IO,Test,Util
4689,2.x: coverage and cleanup 10/11-1,this pr enhances the coverage of  maybe  operators (run out of time for this batch  5 remaining) and fixes an npe bug in  maybe.doonevent  due to not saving the  disposable . some inner receivers no longer implement  disposable  as  isdisposed  is unreachable and not really necessary.  in addition  maybe.tocompletable  was removed in favor of  maybe.ignoreelement() .,Network,i18n,Util,IO,Test
4690,2.x: basetestconsumer add assertvalueat(index  predicate<t>),4688 - adds assertvalueat(index  predicate) to basetestconsumer,Test,Util,IO
4692,rework import inspection dialog in javafx,,IO,Network,Util,i18n,Test
4693,rework external changes dialog in javafx,,IO,Util
4694,remove global search feature,,IO,Util
4695,2.x: compositeexception fix order of exceptions,after looking at #4692 i found a few more exceptions which were passed in the wrong order to compositeexception.,Test,Util,IO
4696,remove resolve duplicate keys dialog,,Test,Util,IO
4699,2.x: clean up null usages by using objecthelper.requirenonnull,instead of using an if statement to check for  null    objecthelper.requirenonnull  will be used now. this reduces a lot of duplicated code. also i found a few places (mostly zip operators) where the wrong throwable was being onerror d.  in addition for one of the completable operators the compositeexception call has been fixed. in addition i found another one that was wrong.,IO,Util
4701,convert manage keywords dialog to javafx,,Test,i18n,IO,Util
4705,2.x: coverage  cleanup fixes 10/14-1,- improve coverage of  observable  operators - remove impossible or unused code paths - fix  observable.flatmap  s dispose behavior and error accumulation,Network,i18n,Util,IO,Test
4706,2.x: cleanup  coverage  fixes 10/14-2,- more  observable  operator coverage - enable fusion with  filter  and  fromcallable  - change order of size parameter in timed  buffer  and  window  operators - fix minor mistakes in operators,IO,Test,Util
4707,group and reorder the main menu (tabs & icons),group and reorder the main menu (file  edit  library  quality  tools  and view tabs & icons). now it looks like on the @martinkarim s prototypes.,IO,Test,Util
4708,disable rank column by default,closes 4585.,IO,Util
4710,2.x: remove checked exceptions from transformer interfaces.,these functions are for transforming the stream shape  not doing work. any operation that would throw a checked exception should happen inside the stream  not when shaping it.  closes #4709.,i18n,Util,IO,Test
4711,convert  manage external file types  dialog to javafx,,IO
4712,2.x: coverage  cleanup  fixes 10/15-2,- more  observable  coverage - make  observable.sequenceequal  return  single<boolean>  - reimplement  observable.distinct()  - fix  observable.combinelatest  error management - remove or compact unused code paths - fix  observable.flatmap  maxconcurrency behavior with scalars  use of unbounded queue - fix  observable.timeinterval  not saving the  disposable,IO,Test,Util
4714,2.x: test sync from observable to flowable 10/16-1,- copy the recent unit tests from  observable  to  flowable  - fix the same bugs - perform the same cleanups - compact the same operators - factor out fusion method and constants to  queuefuseable  - have  flowable.tolist(callable)  return  single,IO,Network,Util,Test,i18n
4716,temporarily remove  customize entry types,,Util,Test,IO
4717,remove  plain text import  feature,,Test,Util,IO
4718,2.x: distinct operator - delegate null collection down to onerror,- returning null as a collection in the callable didn t go to onerror - adopted flowable & observable,Test,Util,IO
4720,4703: newline format couldn t be changed,4703.,Util,IO
4723,2.x: coverage  fixes  enhancements  cleanup 10/18-1,- improve coverage of more  observable  operators - reduce allocation of  connectableobservable.connect(consumer)  and  connectableflowable.connect(consumer)  - enable fusion on  observable.observeon  - fix fusion of  observable.just  - remove  flatmapiterable(function  int)  overload and have  flatmapiterable(function)  use the flatten operator. - fix  observable.replay()  potential emission before  onsubscribe  call,IO,Util,Test,i18n
4725,1.x: remove asyncemitter deprecations,discussed in #4580,IO,Util
4729,saving changes and exiting application,4728,IO,Util,Test
4730,improve toolbar icons and their layout,group and reorder the toolbar icons and add  generate bibtex keys  button. now it looks like on the @martinkarim s prototypes. <br>,Test,Util,IO,Network,i18n
4731,fix default import format pattern,remove display array,IO,Test,Util
4732,4494] add key bindings,4494,Network,IO,i18n,Test,Util
4736,2.x: cleanup  fixes  coverage 10/20-1,- finished covering  observable  operators to a reasonable level (the remaining are either impossible or only reachable by probabilistic race) - synced operator coverage between  observable  and  flowable  - started covering  flowable  operators - cleaning up a few  flowable  operators (cache  concatmap) - fix  onbackpressurebuffer(long  action  bufferoverflowstrategy)  return type - fix  concatmapdelayerror  wrong barrier mode selected,i18n,Test,Util,Network,IO
4738,adding support for input methods,4474,IO,Util
4742,revert  revert  fix: bibkey generated does not handle diacritics,reverts jabref/jabref#4741,Util,i18n,IO,Test
4747,2.x: distinctuntilchanged to store the selected key instead of the value,fix  distinctuntilchanged  to store the selected key instead of the input value.  reported in #4743,IO,Test,Util,i18n
4749,new 2.x marble diagrams,adds some new marble diagrams and adjusts some for operators that now return single/maybe/completable where they used to return observable in 1.x.,Util,IO
4751,2.x: fix flowable.concatmapeager hang due to bad request management,flowable.concatmapeager  s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting. the fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the loop.  related: #4620  in addition  testhelper.asserterror  has been changed to attach the whole unexpected exception to the  assertionerror .,i18n,Network,Test,IO,Util
4754,2.x: remove some unused fields,remove some unused fields that are either - present in their parent class - not set,Util,IO
4755,2.x: fix window-timed test leaking an mbe that affects unrelated tests,the  flowablewindowwithtimetest.restarttimermany  did not wait for its source to receive the cancellation and subsequent tests could delay this cancel.  related: #4750,Util,IO,Test
4757,1.x: add cache() to single,#4702  uses the same test as the observable one.,Util,IO
4760,improve remote messaging,4023 (multiple instances possible) and should 4481 by reducing the timeout (thus jabref does no longer waits seconds if a proxy prevents us from connecting to localhast). surpasses #4460.,Test,IO,Util
4761,enable import button only if entry selected,,Util,IO,Test
4763,2.x: cleanup & coverage 10/24-2,- better coverage of  flowable  operators - cleanup of operator internals - better coverage of standard schedulers. - rewrite of  takeuntil  to avoid  onsubscribe()  races.,Util,IO,i18n,Test
4766,2.x: cleanup  fixes and coverage 10/25,this is the last part of my dedicated coverage improvement run. - update code paths and remove unnecessary and unused parts. - fix  skipuntil  lifecycle and concurrency properties. - fix  concatmapeager  error management. -  flowable.scan(t  bifunction)  now emits the initial value only when the upstream signals an event. this has the effect that even if there is a downstream request  the initial value won t get emitted. this change reduces the overhead of the operator greatly.,Util,IO,Test
4767,2.x: rename backpressurestrategy.none to missing,as discussed in #4643.,Test,Util,IO
4770,2.x: allow subscribeon to work with blocking create,when running a blocking emission in  flowable.create  with  subscribeon   the default behavior of  subscribeon  is to schedule downstream requests onto the same thread. unfortunately  the blocking emission prevents the backing threadpool the  create  from accumulating that request amount leading to either buffer bloat or dropped emissions till the very end of the sequence.  this pr introduces a  nonscheduledrequests  parameter to  subscribeon  that simply calls the upstream s  request()  from the caller s thread without scheduling it. the parameter is not exposed to the surface api but the  subscribeon  operator does an  instanceof  check to see if the upstream type is  flowablecreate .  note that this requires a direct upstream  create  and any intermediate operator re-enables the default behavior. it is possible to traverse the upstream graph to locate a  flowablecreate  but it has relatively high cost and thus penalizing all  subscribeon  usages.  related: #4735,Util,Test,IO
4777,1.x: support observable.test(),the new method chaining  testsubscriber  in 2.x is too good not to have in 1.x as well (while i wait for 2.x to mature and to make my existing unit tests less verbose).      java observable   .just(1)   .test()   .assertvalue(1)   .assertcompleted()        observable.test()  returns a  testsubscriber2  that wraps a  testsubscriber  and enables method chaining where it can.  i ve added tests to get to 100% test coverage though i ve been pretty slap-dash about testing some of the details (for example i haven t tested that  awaitxxx  really does wait for stuff).  i ve noted it as  @since 1.2.3  but can update to 1.2.2 if you are happy to squeak it into the release.,Util,IO
4783,2.x: fix observable.repeatwhen & retrywhen not disposing the inner,the  observer  that is subscribing to the  observable  returned by the handler function was not properly linked to the disposing of the end observer. this pr fixes it by making that  observer  do async  disposable  management and make sure the end  observer  receives a disposable list with both the main and the handler  disposable s.  the  flowable  versions worked properly but added unit tests to them regardless.  reported in #4782.,IO,Util,Test
4793,2.x: fix exceptions in javadoc,i ve corrected some javadocs for methods that check arguments using  objecthelper.requirenonnull(arg   message ) . it throws  nullpointerexception  instead of  illegalargumentexception   but as we know copy-pasting is an insidious thing.  ),Util,IO
4803,improved and added documentation,while looking at the code  i observed obsolete documentation patterns which did not confine to the documentation guidelines.,IO
4810,subtle change in completable s documentation for retrywhen.,small change as discussed in #4809,Util,IO
4815,enhanced message log,worked on  4805]( .,Util,IO
4819,2.x: observable.repeatwhen fix for onerror,observable.repeatwhen  was not properly signalling an upstream  onerror  case. the  flowable.repeatwhen  works as expected.,Util,IO,Test
4824,1.x: update assertablesubscriber api and add javadoc,this pr adds 3 convenience methods -  assertresult    assertfailure  and  assertfailureandmessage  from 2.x  makes the  assertvaluecount  fluent to allow chaining a subsequent  requestmore  call and adds the missing javadoc to the  assertablesubscriber  interface.,Util,IO
4826,schedule when bug fix,in using this in production we found a bug where some actions were dropped.  i ve tracked it down to the premature oncompleted and unsubscription of the completable that represents the scheduled action causes the future to get canceled before it is started.,Util,IO,Test
4827,porting the scheduler.when operator from 1.x to 2.x,in fixing the scheduler.when in 1.x i noticed that it hadn t been ported to 2.x. this pr tries to fix that translating observable to flowable and subscription to disposable. this also includes the fix from 1.x,Test,Util,IO
4828,changing inner classes to package-private.,to  in #4826,Util,IO
4830,1.x: completable.doafterterminate to run after onerror as well,doafterterminate was intended to call the callback after either oncompleted or onerror but somehow missed that behavior in 1.x.,Util,Test,IO
4831,2.x: add dofinally for handling post-terminal or cancel cleanup,this pr adds the  flowable.dofinally  method that executes an action when the upstream terminates or the downstream cancels (but only once per subscriber). formerly  one could use  doafterterminate  +  dooncancel  together but no support for making sure only one executed the cleanup action.,IO,Test,Util
4832,2.x: add dofinally to the rest of the reactive base classes,this pr adds the  dofinally  operator to the rest of the base reactive classes.,Util,IO,Test
4833,2.x: add  flowable.doafternext  operator + 3 dox tcks,this pr adds the  flowable.doafternext  operator which calls a  consumer  after the call to  downstream.onnext()  with the same value.,Util,IO
4835,all buttons in custom dialogs react on enter,all buttons in custom dialogs react now also on <kbd>enter</kbd>. (the default behavior <kbd>space</kbd> in javafx is not affected by this change.),Test,Util,IO
4838,adds a delay to the group expansion,adds a delay to the group expansion action. the delay is currently 1 second and only expands the group.,Util,Test,IO
4839,fix parser exception when loading tex-groups with non-existing file,4735.,IO,Util
4846,1.x: remove objectpool  code style cleanups,this pr removes the  objectpool  and  synchronizedqueue   as their utility now seems surpassed.,i18n,Test,Interpreter,IO,Util
4849,1.x: fix completable.concat & merge hanging in async situations,this pr fixes the hang in  completable.concat(observable)  and  completable.merge(observable)  mainly due to using  subscribe  instead of  unsafesubscribe . the underlying problem was that  safesubscriber  unsubscribed the dowstream consumer which cancelled the outstanding elements of  range .,IO,Test,Util
4851,1.x: add single.fromemitter,this pr adds the  single.fromemitter  operator  driving a  singleemitter  instance similar to  observable.fromemitter  and  completable.fromemitter .,Util,IO
4852,1.x: single::takeuntil cancellationexception message enh.,this pr modifies the  cancellationexception  message to include the operator name and source type.,Test,Util,IO
4858,2.x: add maybe.flatmapsingleelement returning maybe,this pr adds the  maybe.flatmapsingleelement()  operator that returns a  maybe  and completes if the source completes unlike  flatmapsingle  where the returned  single  signals  nosuchelementexception .,Test,Util,IO
4873,2.x: testobserver shouldn t clear the upstream disposable on terminated,testobserver  replaced the upstream s  disposable  with the disposed-sentinel when it got a terminal event (unlike  testsubscriber ) and there seems to be a need for triggering  dispose  in some upstream even after that. this pr changes this behavior and also updates unit tests that expect  isdisposed()  true without actually calling  dispose() .,IO,Test,Util
4877,2.x: apply missing rxjavaplugins.onassembly on ops,this pr adds the missing calls to  rxjavaplugins.onassembly  on a few operators.,Util,IO
4881,add checkreturnvalue annotation,first draft on this.,i18n,Test,IO
4882,2.x: common test classes for processors.,caused by https://github.com/jakewharton/rxrelay/pull/20#discussion_r89308736,i18n,IO,Util,Test
4884,improve snackbar dialogs for copy to clipboard menu,-  removed an unnecessary message when copying to clipboard (see  citationstyletoclipboardworker.copycitationstyletoclipboard() ),Util,IO,Test
4885,convert externalfiletypeentryeditor to javafx,last but one swing dialog. the other is pushtoapplication.,IO,Util
4893,2.x: fix compilation errors when using java 8,this pr fixes a few compilation errors that happen when the project is compiled with java 8 target (eclipse is even slower then).,IO,Test,Util
4899,2.x: flowablescanseed - prevent multiple terminal events,this pr,IO,Util
4900,2.x: fix typo in disposablehelper,fixed a typo in disposablehelper.  curren  ->  current,IO,Util
4901,2.x: flowablescan - prevent multiple terminal emissions,for scan without seed this pr,Util,IO
4903,2.x: doafternext - prevent post-error calls to consumer,this pr,Test,Util,IO
4904,fix some codacy code convention issues,not much to say about this,Test,Util,IO
4907,use t instead of value to allow for ide naming,naming the value  t  instead of  value  allows the intellij to intelligently name the variable based on the type when autocompleting.,IO,Util,Interpreter
4908,use t instead of value to allow for ide naming 1.x,same as  but for 1.x. most places already named the variable  t   there were just a few missing.,IO
4911,2.x: fix & update observable.repeatwhen and retrywhen (again),this pr fixes the  observable.repeatwhen  not completing properly if the handler completes. in addition  the  observableredo  has been split to  observableretrywhen  and  observablerepeatwhen  just like their  flowable  counterpart and are now they use a less convoluted algorithm.,Util,Test,IO
4921,2.x: fix testsubscriber/observer message texts,fix the wrong messages in  testsubscriber  and  testobserver .,IO,Util
4924,2.x: change completable to completablesource,changing  completable  to  completablesource . also found one other wrong spot that i fixed within this pr.,Util,IO
4927,2.x: fix timer() ise due to bad resource mgmt,both  observable.timer()  and  flowable.timer()  could report  illegalstateexception  because if the delayed task completed before the task s  disposable  was set  the  setonce  found a non-null  non-terminal reference already set.,IO,Test,Util
4930,2.x: add completable.cache(),this pr adds the operator  cache()  to  completable  to cache the terminal event of a  completable  sequence.,Util,IO,Test
4932,2.x: add safeguards to generate(),flowable.generate()  and  observable.generate()  lacked the safeguards that were present in 1.x. this adds those and adds extra state cleanup.,Util,Test,IO
4943,fix threading issue with opening from recent libraries,4940,Test,Util,IO
4945,2.x: fix timeout with fallback not cancelling the main source,this pr fixes the lack of dispose/cancel call towards the upstream in the timed+fallback  timeout  operator version.,Test,Util,IO
4946,2.x: a simple javadoc typo fix.,fixed javadoc for singletoobservable  maybetoobservable  completabletoobservable,IO
4949,1.x: header and whitespace cleanup,- add missing header to 3 files,Util,IO,Test
4951,fix javadoc for behaviorsubject,-fix examples for creating behaviorsubject with or without initial value.,Util,IO
4955,2.x: add sample() overload that can emit the very last buffered item,the  sample()  operator in 1.x has been changed to always emit the very last buffered item before completion for [1.1.3]( [discussion](  [pr](https://github.com/reactivex/rxjava/pull/3757).,Test,IO,Util
4957,2.x: fix lambdaobserver calling dispose when terminating,this pr changes the  lambdaobserver  to not dispose the upstream when it receives a terminal event. the  lambdasubscriber  has been previoulsy updated but apparently not synced.,IO,Test,Util
4962,2.x: fix single.takeuntil() other triggering twice,this pr fixes the double termination of  single.takeuntil(publisher)  when the  other  fires an item and then completes while ignoring the cancellation in between  trying to signal a  cancellationexception  again which is routed to the  rxjavaplugins.onerror  and crashing on android.,IO,Util,Test
4963,1.x: add missing marbles  fix image sizes,- add  create(synconsubscribe)  marble and update image dimensions,IO,Util
4966,2.x: add strict() operator for strong rs conformance,this pr adds a new instance operator  strict() :,IO,Util
4967,2.x: add subjects for single  maybe and completable,this pr adds 3 new subject types:  singlesubject    maybesubject  and  completablesubject . their purpose is to provide an imperative way to multicast 0-1-error events as well as cache these events for later observers. they are thread-safe by design and there is no need for a serialized wrapper unlike the other  subject s.,IO,Test,Util
4970,bump jsoup to 1.12.1 and switch jsoup s stringutil for jabref s stringutil,here is a correction for #4968: it bumps jsoup from 1.11.3 to 1.12.1 and  also  it switchs jsoup s stringutil for jabref s stringutil in all files that used it.,Util,IO,Test
4971,2.x: add @checkreturnvalue to create methods of subjects + processors,- adds the @checkreturnvalue annotation to subjects + processors since single/completable and maybesubject got them recently too,Util,i18n,IO
4972,improve compose() generics,4950,Test,Util,IO
4973,2.x: add completable.hide(),- adds completable.hide() operator so that completablesubject as well as other custom completable implementations can be hidden,Network,Test,IO,Util,i18n
4974,2.x: add flowable.parallel() and parallel operators,this pr adds the  parallel()  method to  flowable  which opens up a sub-dsl with parallel operations. (note that only a few operators make sense in a parallel settings.),Util,IO,Interpreter
4979,fix command line help text,now in the cli help text  arguments and descriptions have been rewritten for fixing  simplifying  and detailing them better.,i18n,IO,Util,Interpreter,Test
4980,resize different fonts changing entry type,now jabref uses the same typography for the two menus to change entry type (and for the tooltip).,Interpreter,IO,i18n,Util
4982,2.x: fix observable.concatmapeager bad logic for immediate scalars,the operator  observable.concatmapeager  had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it wasn t that particular source s turn for it.,Util,i18n,Test,IO
4984,2.x: fix cross-boundary invalid fusion with observeon  flatmap & zip,when  flatmap  and  zip  fuses its sources  it was possible one of the async source polls on another source which executed boundary-sensitive operators ( map    filter ) on the wrong thread.,Test,Util,i18n,IO
4987,2.x: make obs.combinelatest consistent with flowable + doc cornercase,this pr fixes  observable.combinelatest  to be consistent with  flowable.combinelatest  by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source (that completes or errors). in addition  such early termination didn t properly cancel the other sources when  delayerrors == true .,Test,IO,i18n,Util
4989,2.x: fix observable.singleelement doc,fixes a subtle documentation bug.  observable.singleelement  returns  maybe<t>   not  observable<t> .,Util,IO
4990,2.x: update marble diagrams for sample overloads,this pr updates the referenced marble diagrams to reflect the actual behavior and options with  sample .,IO,Util
4992,2.x: a.flatmapb to eagerly check for cancellations before subscribing,the  flatmap  implementations always subscribed to the generated inner source even if there was an asynchronous cancel while the function was running. with typical functions  there is only a really tiny window inside function but some users tend to block/sleep in the function and when that returns  the  flatmap  operator is already cancelled.,Util,Test,IO
4994,2.x: assertnever(t value) / assertnever(predicate<t> valuepredicate),this pull request adds to any class extending    baseconsumertest    the ability to assert that a given value was not emitted by the observable it was subscribed to  either with    assertnever(t value)   or    assertnever(predicate<t> valuepredicate),IO,Util
5000,add which are the other stardard methods of create,i was using  observable.create(onsubscribe) . i knew about the warning:,IO,Util
5002,2.x: add scheduler creation factories,4993,Util,Interpreter,Test,i18n,IO
5005,2.x: executorscheduler.scheduledirect to report isdisposed on complete,this pr makes the  disposable  returned by the  executorscheduler.scheduledirect()  report  isdisposed   true  if the task has actually finished  which should now be consistent with the  worker  behavior of other schedulers.,Util,Test,i18n,IO
5006,2.x: improve the parallel() mode test coverage  improve its code,this pr adds additional unit tests for the  parallel()  operators  plus:,IO,Test,Util
5007,bibentrysource contextmenu,i was missing a context-menu in the source-editor. so i made one.  -),Util,IO
5020,2.x: option to fail for using blockingx on the computation scheduler,this pr adds an  rxjavaplugins  option  failonnonblockingscheduler  that triggers an  illegalstateexception  when the user tries to run a blocking method while the execution is on the  computation()  or  single()   scheduler :,i18n,Test,IO,Util
5023,add nullability annotations to io.reactivex.annotations interfaces.,(addresses https://github.com/reactivex/rxjava/issues/4876),Util,Interpreter,IO,i18n
5027,2.x: dedicated single.zip implementation  no dispose on all-success,this adds a dedicated implementation for zipping  single s (adapted from  maybezipx ).,i18n,IO,Test,Util
5036,2.x: reintroduce onerrornotimplementedexception for 0-1 argument subscribe(),this pr reintroduces the  onerrornotimplementedexception  wrapper from 1.x and applies it to the  subscribe()  methods that don t define an  onerror  handler.,i18n,Test,Util,IO
5043,2.x: add parallel hooks to rxjavaplugins  add missing params validation,this pr adds an  onassembly  hook for  parallelflowable  operators and adds the missing parameter validation to some parallel operators.,i18n,Util,Test,IO
5047,2.x: document and test amb subscription ordering.,refs #5044.,Util,IO,Test,i18n
5048,preserve encoding while copy and pasting in maintable,5043.,IO,Util
5049,use bounded wildcards for errorhandler (5045),adding bound wildcards for error handler - 5045,IO,Util,i18n,Test
5051,feature/#4876 nonnull annotations,issue: #4876,i18n
5054,shutdown unirest workers,just realized that our shutdown problems might also be caused by the unirest library:,IO,Util,Test
5055,2.x: feature/#4876 more null checks,i have added some more null checks to help the static code analysis.,Test,IO,Util
5056,fix order of other fields,5028,IO
5058,fix automaticalls set file links task not runinng,executing the created task would have been helpful 🤦‍♂,i18n,Util,IO,Test
5064,2.x: fix replay() cancel/dispose npe,this pr fixes both  flowable.replay()  and  observable.replay()  throwing a  nullpointerexception  if the connection is disconnect before the upstream calls  onsubscribe  on the connection being established.,Test,Util,IO,i18n
5069,2.x: compatibility fixes (jdk 9 & intellij 2017.1 eap),1. when the project is checked out into a directory that is not exactly  */rxjava/  (i.e.   /rxjavasomething/ ) the source-code locator in the unit tests failed with a  nullpointerexception . the locator is now relaxed to expect  /rxjava  prefix.,IO,Util,Test
5075,2.x: cancel upstream first  dispose worker last,this pr makes sure the  scheduler.worker  is disposed only after,Test,Util,IO,i18n
5076,2x: removed documentation leftover,that wrongly states that the error will be swallowed.,Util,IO
5080,2.x: wrap undeliverable errors,this pr adds the  undeliverableexception  and  protocolviolationexception . the former wraps exceptions that happen beyond the lifecycle of a flow and the latter is added to distinguish validation bugs.,IO,Test,i18n,Util
5086,bugfix/5045 : modified the existing logic to comply crossref resolution with biblatex specification,5045,IO,Interpreter,Test,Util
5087,2.x: correct marble diagram dimensions,this fixes part of #4535  as requested in #5067.,IO,Util,i18n
5088,2.x: fix ci load sensitive blockingnexttests  xflatmaptest,this pr updates  testnobufferingorblockingofsequence  with,IO,Util,Test
5090,2.x: fix scan(seed  f) to emit accumulated values asap,for performance reasons  the  scan  delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently.,Test,Util,IO
5091,1.x: create+subscribeon avoid same-pool deadlock,this pr allows to fix the same-pool deadlock that may happen with  create()  (formerly  fromemitter ) and  subscribeon  as  subscribeon  by default schedules the requests behind a running emitter and thus the internal request amount may not get updated  leading to unnecessary dataloss.,Util,IO
5092,1.x: add single.merge(obs)  obs.flatmapsingle & flatmapcompletable,this pr adds specialized operators for merging  single  and  completable  sources:,Test,Util,IO
5093,2.x: add doafterterminate callback to the single type.,as mentioned in [this stackoverflow question](  doafterterminate() is currently missing in rxjava2. there s no strong reason for that  so this pr adds support for it.,IO,Util
5101,fixes ris  data field,,Util,Test,IO,i18n
5102,2.x: added missing @nonnull attribute to function7.,this pull request adds the missing @nonnull attribute to function7. on pull request #5023  function7 was missing from the updates.,IO
5103,add user interface for the tex parser tool,the goal has been to connect the back-end of the parser with the user interface:,Test,Util,IO
5106,2.x: fix window(time  size) not completing windows on timeout,this pr fixes the operators  flowable.window(time  size)  and  observable.window(time  size)  to complete the current window if the time elapses before the size limit is reached.,Util,Test,IO
5112,2.x: flowable as a publisher to be fully rs compliant,this pr performs the changes suggested in #5110.,IO,Test,Util,Interpreter,i18n,Network
5114,2.x: fix observable.combinelatest to dispose eagerly,this pr fixes  observable.combinelatest  to dispose the sources outside the serialization loop  just like  flowable.combinelatest  does. this allows cancellation even if the serialization loop is busy/blocking inside an  onnext  emission.,i18n,Util,IO,Test
5115,add polish language,,Util,Interpreter,IO
5117,2.x: add parallelflowable.sequentialdelayerror,this pr adds the  sequentialdelayerror  operator to  parallelflowable  that allows awaiting all  rails  in a parallel flow to terminate normally or with the (composite) exception of the failed rail(s).,Test,Util,i18n,IO
5119,2.x: improve coverage  remove unused code,this pr adds coverage to some low-coverage classes and removes unused code.,Util,i18n,IO,Test
5121,add option to allow for integers in field  edition  when running database in bibtex mode,,Test,IO,Util
5127,2.x: update javadoc of flatmap() overloads,this pr rewords the javadoc of  flowable.flatmap()  overloads to correctly express their behavior regarding backpressure towards their upstream. in 2.x  only  merge()  operators are unbounded-in by default   flatmap s are by default bounded by  buffersize()  or the  maxconcurrency  parameter.,IO,Util
5133,2.x: fix flatmap not cancelling the upstream eagerly,this pr fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source fails.,Test,IO,Util
5136,2.x: fix repeatwhen and retrywhen signatures,adjust the  repeatwhen  and  retrywhen  signatures to accept  publisher<?>  on  single  and  completable   matching  flowable  s signature.,IO,Util
5137,add latex citations tab to the entry editor,here is an update for the latex integration project. it adds a new tab to the entry editor (can be disabled in preferences)  and also update  entryeditor.java  to start using preferencesservice.,Util,Test,IO
5140,2.x: fix timed replay-like components replaying outdated items,the timed versions of  flowable.replay()    replayprocessor    observable.replay()  and  replaysubject  all replay outdated items to new subscribers and through the  getvalues()  and  size()  state-peeking methods  similar to issue #3917 resolved via #4023.,IO,Test,Util,i18n
5141,conversion of preferencesdialog/advancedtab  networktab and groupstab to mvvm,follow-up to #5033,i18n,Test,Util,IO
5146,1.x: add unsubscribeon to single type (#5138),5138,Util,Test,IO
5153,2.x: java 9 compatibility fixes (march 3),java 9 has changed its overload resolution algorithm and things that resolved unambiguously in java 8 no longer resolve:,Network,Util,Test,IO,i18n
5155,2.x: improve basetestconsumer with awaitcount & timeout,this pr enhances the timeout detection and reporting of the  testsubscriber / testobserver  base class  basetestconsumer :,Util,Test,IO
5156,add @nonnull to the methods of emitter,this pr is a part of #4876,IO
5161,2.x: add observable.switchmapsingle and switchmapsingledelayerror,this is a new operator discussed in #4853. the issue refers to a goodly number of new operators which i ll do bit by bit as my time allows and to ensure review is not too daunting.,IO,Test,Util
5163,2.x: single.subscribe() to report isdisposed() true on success/error,the  consumersingleobserver  didn t report  isdisposed  consistently with its state.,Test,IO,Util
5170,add latest changes to latexintegration branch,- change citationviewmodel to citationsdisplay.,Test,Util,IO
5174,2.x: wip removes anonymous inner classes.,this is a wip. since the changes are big  an incremental review and pr was recommended by @akarnokd,IO,Util
5176,2.x: fix private field access  few generics problems,this pr fixes some private field accessor problems introduced by #5174 as well as a couple of generics warnings.,Util,IO
5177,removes all anonymous inner classes,this is a what left to complete [this one]( :,Util,IO
5182,2.x: fix replay().refcount() leaking items between connections,this pr updates  observable.replay()  and  flowable.replay()  **for 2.x** to not leak items between reconnections when run with  .refcount() . the  replay()  operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data. only a new  connect()  clears this data which may or may not happen. since  refcount  ensures that there won t be any latecommers to an already completed connection (because it also drops its current subscribers on termination or when reaching zero)  the  replay()  can be reset to an empty state.,i18n,Test,IO,Util
5183,2.x: test to disallow anonymous inner classes,this pr adds an unit test that scans the compiled .class files for anonymous inner classes naming (i.e.  dollar sign followed by a number). since all the main  test and perf classes end up in the same place  the test has exceptions for file names containing  perf  or  test .,i18n,Network,Util,Interpreter,Test,IO
5187,2.x: reflection-based parameter validator & fixes,this pr adds a reflection-based parameter validator to check the base reactive classes for proper parameter validation: null checks and argument ranges. the problems detected are fixed as well.,Util,IO,Test,i18n
5188,fix tooltips in citationsdisplay,this patch solves the issue detected by @calixtus in 5002#issuecomment-519985132,IO,Test,Util
5189,2.x: fix concatmapeager should accept 0 for prefetch,fixes a bug that  flowable.concatmapeager(mapper   maxconcurrency   prefetch) and observable.concatmapeager(mapper   maxconcurrency   prefetch) operators will not accept 0 and negative numbers.,Util,Test,IO,i18n
5191,5152  tooltip and icon added to group cell,5152,Util,IO
5195,add citation commands to texparser,we added a few more citation commands:  autocite    autocite    blockcquote   and  textcquote .,IO,Util
5196,implement ottobib fetcher,fetcher does not return bibtex data in plain text  instead it s part of an html text area,Util,IO,Interpreter
5197,with missing year value in year column,5163,IO,Util
5199,2.x: increase timeout on parallel & completable tests,this pr increases the timeout on  completabletest  test methods and on  parallelflowabletest.parallelismandprefetchasync .,Test,Util,IO
5202,2.x: add resilient versions of parallel map()  filter() & doonnext(),this pr adds 2 new overloads to  parallelflowable  operators  map    filter  and  doonnext  to enable per item error handling in case the main function fails with some exception.,Test,IO,Network,i18n,Util
5207,2.x: prevent tasks to self interrupt on the standard schedulers,task wrappers of the various schedulers and modes (direct & worker) were able to get cancelled via interruption from the same thread they were running.,Util,i18n,IO,Test
5208,2.x: fix images of firstelement  flattenasx  flatmapiterable,this pr links in the new images from #5130 for previously misleading marble diagrams of the operators.,IO,Util
5209,fix lookup entry types in enums,make master work again!!!,Util,IO
5210,fix double paste on different os,4845,IO,Util
5213,use utf-8 as default encoding for files,if we create journal abbrev files via the jabref  they are saved in utf-8.,Test,IO,Util
5217,switch from tika-parsers to tika-core,this fixes 3421#issuecomment-524532832,IO,Util
5222,2.x: cleanup based on intellij 2017.1 inspections,this pr is the result of running intellij inspections on the code:,IO,Util
5223,2.x: improve the documentation of schedulers utility class.,this pr improves the javadoc of the  io.reactivex.schedulers.schedulers  utility class plus adds a missing  schedulersupport  constant for the  single()  scheduler.,Util,i18n,IO
5225,1.x: fix completable.onerrorresumenext unsubscribe not propagated,the  completable.onerrorresumenext  did not properly propagate the downstream  unsubscribe()  call to upstream.,Test,Util,IO
5226,2.x unicastprocessor fail-fast support,this pr adds support for fail-fast behavior to  unicastprocessor  with methods  unicastprocessor<t> create(boolean delayerror)    unicastprocessor<t> create(int capacityhint  runnable onterminated  boolean delayerror) . relates to #5165  #5217,Util,IO
5230,treat unknown fields as multi-line fields,5021. unknown fields are now treated as multi-line fields. in the future  we should provide an ui interface to specify or change properties of fields.,Test,IO,Util,i18n
5231,add timeunit null check test case in timed,1. it s about timed.java test case that is null check timeunit parameter.,IO,Test,Util
5240,2.x: fix callbackcompletableobserver calling onerror  resourcex wording,this pr contains the fix for incorrect call of the  onerror  handler within  callbackcompletableobserver.oncomplete()  reported in [5099]( as well as wording fixes to the  resourcex  javadoc.,Util,IO,Test
5247,2.x: fix flowable.tolist() onnext/cancel race,this pr fixes the  nullpointerexception  that can happen because  cancel  nulls out the value and  onnext  simply dereferences that value in  flowabletolist .,IO,Test,Util
5250,defer creation of the timeoutexception when using the single.timeout() operator,use a defer instead of simply  other = single.error(new timeoutexception())  since instantiating an exception will cause the current stack trace to be inspected and that overhead should only be incurred when a timeout actually happens.,IO,Util
5251,more nullability annotations,added nullability annotations to:,IO,Util
5255,add nullpointerexception comments and objecthelper test code.,:),Test,IO
5256,moe sync 2020-10-01,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> fully remove gwt-rpc support externally.  really  really closes   possible future work: - be consistent about whether we put @gwtcompatible on the remaining internal customfieldserializer classes. (for those files  it probably acts only as documentation (of something that is pretty obvious :)). our open-source build used to take action when it saw  @gwtcompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) i believe that our internal build requires @gwtcompatible on most files in our gwt target  but i think there s an exception for gwt-target-only sources.) - remove some of the gwtserializationdependencies classes. however  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. keeping them is harmless: it doesn t actually make the classes gwt-serializable. - remove the usages of serializable=true on @gwtcompatible  at least externally but maybe just entirely.  relnotes=[guava types can no longer be sent over gwt-rpc.]( even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> mark bigdecimalmathtest as fully @gwtincompatible.  currently it has every member annotated as @gwtincompatible. this works fine internally  but the external gwt tests (which we run only at release time) complain about the resulting empty bigdecimalmathtest_gwt:   0f9ee58d8caa8a12ac77fe01e097e39386157d2c,Test,IO,Util
5257,remove @nonnull annotations in biconsumer method parameter,this pr is part of https://github.com/reactivex/rxjava/issues/5216,IO,Util
5258,moe sync 2020-10-02,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> begin tweaking guava sources to satisfy copybara.  - change from  to  (and from github.io links to guava.dev/truth.dev while i m at it). - remove go/ links. - add whitespace around moe directives. - put moe stripping directives alone in comments  moving other comment text to a separate comment. - one particular case of that: put moe intracomment stripping into html comments even when it happens in non-javadoc comments (i.e.  /* */). it seems that copybara wants for intracomment directives to stand alone in *some* kind of comment? - add @googleinternal to some files that are currently omitted from guava simply by not being in moe filegroup targets.  this is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e,Util,IO,Test
5268,moe sync 2020-10-09,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> clarify  hashmultimap  docs about concurrency.  closes #5266. 3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> removed all references to now useless workaround  3679 fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71,Util,IO
5271,2.x: enable link to external jdk  fix schedulers style,this pr enables the generated javadoc to  {@link }  to jdk classes properly (current 2.0.8 doc [shows them]( as plain text). i m linking to the v7 docs because v6 is ugly.,IO,Util
5277,moe sync 2020-10-13,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> don t call tostring() on the results of successful futures.  relnotes=abstractfuture.tostring() no longer includes the tostring() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> fix example in documentation for  iteratortester   i made a mistake and accidentally included an example that does not compile. specifically  importing  knownorder  as-is does not compile  instead one needs to import  iteratortester.knownorder . see #5254 for more information.  i also changed the example to use  collections#unmodifiablelist  rather than  arraylist  because  arraylist#iterator  does not satisfy all the requirements of  iteratorfeature#modifiable .  5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0,IO,Test,Util
5281,2.x: behaviorprocessor & subject terminate-subscribe race,this pr fixes the race condition in  behaviorprocessor  and  behaviorsubject  when  oncomplete()  or  onerror()  is called concurrently with  subscribe  and the consumer throws a  nullpointerexception  instead of relaying the terminal event.,Test,Util,IO
5286,moe sync 2020-10-16,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> remove deprecated 1-arg servicemanager.addlistener.    relnotes= util.concurrent : removed the deprecated 1-arg  servicemanager.addlistener(listener) . use the 2-arg  addlistener(listener  executor)  overload  setting the executor to  directexecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> update iteratortester example with a greater  steps  value  this allows iteratortester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasnext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf,Util,Test,IO
5287,2.x: fix flowable.flatmapmaybe/single maxconcurrency not requesting more,this pr fixes  flowable.flatmapmaybe  and  flowable.flatmapsingle  not replenishing from the upstream when they complete/error per inner source.,IO,Test,Util
5288,add checkstyle for javadoc and fix related issues,,IO,Util
5296,improve doondispose javadoc,sorry for the earlier pr #5295 :/,IO,Util
5297,fix javadoc image for single#flatmapobservable,[ single.flatmapobservable.png ]( should be used for  single#flatmapobservable  instead of [ single.flatmap.png ](https://raw.github.com/wiki/reactivex/rxjava/images/rx-operators/single.flatmap.png).,Util,IO
5301,2.x: more detailed no-multi-subscribe with std consumers error message,this pr changes the  disposable already set!  and  subscription already set!  messages on the standard consumer classes ( disposablesubscriber    disposableobserver   etc.) to something more meaningful:,Test,Util,IO
5302,2.x: add single.unsubscribeon(),this pr adds the  single.unsubscribeon()  operator.,IO,Util
5304,correct documented return type of single#flatmapobservable function argument,the argument of  single#flatmapobservable  clearly states that it is expecting a  function  which returns an  observablesource  but the documentation contradicts that.,Util,IO
5306,2.x: change observablesource.defer to observable.defer in observable.scan() documentation.,- changes  observablesource.defer  to  observable.defer(),Util,IO
5307,moe sync 2020-11-10,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> refactor classpath: replace scanner with location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> fix documentation for hashcode.tostring() that incorrectly claimed it returned in big-endian order.  the implementation of tostring() goes through the bytes in the same order that asbytes() returns  so if the order of the underlying bytes is little-endian (as is the case for longhashcode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> optimize hashing.crc32c() by eliminating two xors for every byte of input.  benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> add constant for origin isolation header  spec:   relnotes=adds constant for the origin-isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> add additional test for  crc32chashfunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> verify maximumweight before setting  the maximumweight builder method is the only method that does the argument verification before the assignment. it looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> rollback  *** original change description ***  do 16-byte strides in crc32c in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 gb/s.  this is probably as good as it gets until java 11  when we ll have access to the intrinsics that use crc hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> backport  combine  to java7 for  immutablelist  &  immutableset .  this is so that java8 code relying on the java7 branch of guava can still efficiently collect guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> fix  loadingcache  minor documentation typo.  5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> added submitasync to closingfuture.  relnotes= added  submitasync(asyncclosingcallable)  to  closingfuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> add  x-request-id  to   .  fixes #5306.  relnotes=add  x-request-id  to   .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> fix android test failure in classpathtest.  reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a,IO,i18n,Util
5309,2.x: fix javadoc of flowable.toobservable,the  flowable.toobservable()  javadoc was referring to  publisher  instead of  observable .,Util,IO
5310,2.x: improve coverage of some classes (no functional changes),improve the coverage of some classes  plus re-add the unit test that validates the  strictsubscriber .,i18n,Util,Test,IO
5318,1.x: apply api promotions for 1.3,this pr applies the api promotions of #5201.,Util,IO
5324,mark volatilesizearraylist as randomaccess list,this is needed for generic functions to select appropriate algorithm when searching etc.,IO,Util
5343,moe sync 2020-12-03,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> explain when standardsystemproperty.value() can return a null value  and deprecate java_ext_dirs.  value() s return type has been @nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but i had forgotten the details about why  despite past cls to update the test for specific missing keys.  i assume that we ll never actually *remove* java_ext_dirs.  (just slightly relevant to   relnotes= base : deprecated  standardsystemproperty.java_ext_dirs . we do not plan to remove the api  but in recent versions of java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** reason for rollback ***  causing sheets ios crash  *** original change description ***  fix memory leaks and potential crashes in hashbimap  which occur in transpiled objc code. add ios specific unit tests in xplat  because guava is missing infrastructure for ios tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3,IO,Util
5344,2.x: add tryonerror to create/xemitter api,this pr adds the  tryonerror  method to the various  emitter  types used in the  create  operators that allows the developer to avoid the  undeliverableexception  in case a cancellation is racing with the emission of an error. the return value indicates a success of the delivery  in case of  false   the developer can decide to log/drop the specific error if that makes sense for him/her.,IO,Util
5347,moe sync 2020-12-04,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> system.getproperties().getproperty => system.getproperty.  my motivation was that it s slightly easier for a nullness checker to determine that system.getproperty(standardproperty) is (generally speaking) non-null. but it turns out that java.runtime.name is not a standard property!  still  this is a slight simplification  so i guess i m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> fix a bug in hashbimap which was causing crashes in sheets on ios.  the crash was caused by the fact  that linked-list of bientry instances inside a bucket were using @weak references  and only the first entry in the list was strongly referenced. the remaining ones were deallocated.  with this change  sheets ios is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a,IO
5351,fix exception when closing jabref,5348 by using javafx windows instead of awt windows.,Util,IO
5354,moe sync 2020-12-11,this code has been reviewed and submitted internally. feel free to discuss on the pr  and we can submit follow-up changes as necessary.  commits: ===== <p> correct a typo and some odd phrasing in the first paragraph of the javadoc for smoothratelimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> log a warning if running under a java 7 vm.  more precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. if someone wants to use retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. and our support for android is unchanged: the android toolchain rewrites lambdas and removes type annotations.  this is a step toward removing java 7 support entirely:   relnotes=introduced a warning log message when running under java 7. this warning is not _guaranteed_ to be logged when running under java 7  so please don t rely on it as your only warning about future problems. if the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.moreobjects$tostringhelper  (which is used _only_ for this warning). this warning prepares for [removing support for java 7 in 2021]( please report any problems.  0357006a920c9cf84d47901471a525da85deba34,IO,Util
5367,2.x: make sure interval+trampoline can be stopped,this pr fixes the case where a  trampoline  scheduler is used with the  interval  or  intervalrange  operator  the periodic emissions can t be cancelled properly. the synchronous and blocking nature of the periodic schedule is that the  disposable  is never connected with the downstream and the  interval  stays in a drain-sleep loop per emission indefinitely.,Util,IO,Test
5378,2.x: make singlemap not allow map function return null,found code like below can works,Test,Util,IO
5379,2.x: add missing null checks on values returned by user functions,this pr adds null checks to places where it was missing.,i18n,Util,Test,IO
5383,fixed javadoc for singleflatmapiterableobservable.,fixed javadoc for  singleflatmapiterableobservable .,IO,Util
5386,2.x: add subscribeon overload to avoid same-pool deadlock with create,this pr adds an overload to  subscribeon  that exposes the existing feature to optionally request on the same scheduler where the subscription happened. this is necessary to avoid same-pool deadlock when the upstream contains  create  logic that blocks the emission thread  preventing any scheduled request to get through and leading to excess buffering or dropping data excessively. by not scheduling the request  it can directly update the emitter s request tracking and let the emitter continue.,Util,Test,IO
5391,changed minimum value of rx2.buffer-size to 1,before the minimum value you could set with the system variable  rx2.buffer-size  was 16. with this commit  that is changed to 1.,Util,IO
5403,2.x: fix documentation of single.doafterterminate.,fix the copy-paste error in the javadoc of  single.doafterteminate  mentioning  doaftersuccess .,Util,IO
5405,defaultobserver javadoc example fix,the example in the javadoc of  defaultobserver  is not compiling   defaultobserver  is not a  disposable .,IO
5406,fix javadoc for observable.reduce() and observable.reducewith(),the sample code given in the javadoc for  observable.reduce()  isn t compiling  since the function returns a  single .,IO,Util
5407,defaultsubscriber javadoc sample fix,the example in the javadoc of  defaultsubscriber  is not compiling   defaultsubscriber  is not a  disposable .,IO
5409,#5382 corrected single.delay documentation,corrected single.delay documentation that says that success or error signals will be delayed by the specified amount  but in fact errors are not delayed  only successes.,Util,IO
5413,2.x: add empty source clauses to javadocs of combinelatest operators …,…accepting unspecified number of sources. this commit 5412,IO,Util
5415,remove redundant  else  blocks.,remove redundant  else  blocks.  3974.  relnotes=n/a,Util,IO
5419,2.x: fix periodic scheduling with negative period causing iae,this pr adds unit tests to verify the  scheduler.scheduleperiodicallydirect  and  scheduler.worker.scheduleperiodically  works with non-positive period as required by the javadoc.,Util,IO,Test
5421,add change listener to main table to scroll to imported entry,add change listener to main table to scroll to imported entry #5383,Util,Test,IO
5422,2.x: more eager cancellation in flatmapx,the flatmapx tests kept failing because there was a race between the cancellation and the disposing of their inner set: the cancel may have interrupted the test wait and ended up in the inner subscribe before  set.isdisposed()  would become true in the  dispose()  call of the operator that run on the main thread. the change adds/uses a boolean field that gets set first and is checked before the inner are subscribed.,IO,Util
5427,2.x: fix buffer(time  maxsize) duplicating buffers on time-size race,the pr fixes both the time+maxsize bound  buffer  operators of  flowable  and  observable . the logic didn t properly mutually exclude the timer action and the  onnext  action  resulting in probabilistic emission of the same buffer twice.,Util,Test,IO
5432,fix cursor jump,5084. the entry editor was very aggressive and stole the focus from the search bar or from the main table. this lead to problems like #5084 where users overwrite the contents of the entry while doing a search. moreover  it made it impossible to navigate between entries using the arrow keys in the main table. both of these issues are fixed now.,IO,Util
5434,2.x: fix time bounded replaysubject getvalue() inconsistency with getvalues() on old items,see https://github.com/reactivex/rxjava/issues/5433.,IO,Util,Test,i18n
5437,1.x: testsubscriber::assertvaluesandclear should reset valuecount,during the time between calling  assertvaluesandclear  and providing the next  onnext  event  the  valuecount  is inconsistent with the size of the internal  values  list.,Util,IO,Test
5440,2.x: concat to report isdisposed consistently with termination,this pr makes sure the  disposable  of a  concat  operator reports  true  when the sequence terminates.,Test,IO,Util
5441,2.x: fix periodic scheduler purging config not honored,the  schedulerpoolfactory  did not act properly on the system properties setup.,Util,IO
5444,2x: fix wording in async and publish processors javadoc.,seams that these are some leftovers from the 1.x -> 2.x refactoring.,IO,Util
5447,remove @nonnull annotation in consumer method parameter,this 5442,Util,Interpreter,IO
5449,remove the @nonnull annotation from function,as per per the discussion in #5447,IO,Util
5454,fix highlight issues for lists,5277 and 5035. the problem was in both cases that the list view reuses nodes when scrolling (instead of creating new ones).,IO,Util,Test,i18n
5457,2.x: see if sudo required results in consistent & faster build times,i asked the travis support about the slow build times of lately and they suggested i try  sudo:required  to have an isolated build vm instead of the shared container-based one. i ll rerun this pr a couple of times to see the effects.,i18n,IO,Test,Util
5460,2.x: fix javadoc mistakes and some style,this pr fixes most javadoc errors discovered from rxjava 3 preview s javadoc generator (doclint enabled).,IO,Test,Util
5462,refactoring singleschedulertest,hi,Util,Test,IO
5465,2.x: fix wording of tolist  fix a/an in subscribeon,this pr,IO,Util
5466,2.x: flowabletimeouttimed - replace atomicreference with mutable field,as per discussion in #5461. the timer fields in the subscriber classes in [flowabletimeouttimed]( are  atomicreference s but this is not required as the fields are accessed synchronously.,IO,Util
5467,2.x: removing commented code from tests,hi,i18n,Util,Test,IO
5471,mark oostyle as invalid if no defaultstyle,in addtion  dsplay correct layout for article and book,Test,IO
5486,annotate converter for nullness.,annotate converter for nullness.  relnotes=n/a,Util,Test,IO
5493,2.x: fix replayprocessor backpressure and notificationlite emission bug,this pr upgrades the replaying algorithms of the  replayprocessor  to the standard queue-drain and as an added effect  fixes a request-emission race where the internal  notificationlite.complete  could be emitted to the consumers.,i18n,IO,Util,Test
5494,flowablewithlatestfrom forgets request,the following scenario did not work with flowablewithlatestfrom:,Test,IO,Util
5495,fix deprecated crossref rest api parameter,5485,Test,Util,IO
5507,2.x: fix spsclaq nepotism  flowablerefcounttest.testrefcountasync flaky,this pr fixes the so-called gc nepotism (see #3794) in  spsclinkedarrayqueue  by not nulling out the previous buffer s next pointer upon switching buffers in the  peek() / poll()  methods.,Test,IO,i18n,Util
5511,fix javadoc typos,fix javadoc typos  relnotes=n/a,Util,IO
5517,2.x: add missing null check to fused observable.fromcallable,there was a missing null check on the fusion path in  observablefromcallable  which meant the consumer considered the source to be empty. (the  flowablefromcallable  was okay.),Test,IO,Util
5524,2.x: add/update observable marbles (07/30),this pr updates the marbles of the following  observable  operators:,Util,IO
5541,update to gradle 6.0 (and therefore disable build scan),enables  gradlew run  at jdk13.,Util,IO,Test
5552,[typo] update schedulers.java,just a typo i came across while reading the javadocs.,Util,IO
5560,fix 5555 status popups,as discussed in #5555 this pr removes some obsolete notifications and additionally removes notifications during autosave.,Util,IO
5568,2.x: add assertvaluesonly to basetestconsumer.,adds  assertvaluesonly  that asserts that the testobserver/testsubscriber received only the specified values in the specified order without terminating.,Test,IO,Util
5578,unify month field formatting in test bib files,this finishes 5283.,Util,IO
5582,fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.,fix typo noted by @ben-manes in   relnotes=n/a,Util,IO
5586,2.x: fix single.timeout unnecessary dispose calls,this pr fixes the unnecessary  dispose  call towards the main source when the source terminates and reworks the internals to use less allocation and indirection.,Test,IO,Util
5590,implement lambdaconsumerintrospection,5569  and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one.,Util,IO,Test
5594,2.x: fix assertvaluesequence reversed error message,the error message/variable names in  testbaseconsumer.assertvaluesequence  was reversed: if more items were expected  it said  fewer  and vice versa.,Test,IO,Util
5600,updating javadoc with correct return types,a small pr with updated javadoc  mentioned in the issue #5595 (thanks to @roblewis for reporting it).,Util,IO
5602,1.x: workaround for chm.keyset bad type with java 8 compiler,this pr fixes the problem that  concurrenthashmap::keyset   when compiled on jdk 8  adds the  keysetview  type in the bytecode which is not available in jdk 7 and before. the change forces the offending place to use the the standard  map::keyset  which returns a standard  set .,IO,Util
5609,2.x: fix observable.concatmapeager queueing of source items,this pr fixes the wrong queue type in  observable.concatmapeager  to be the  spsclinkedarrayqueue  instead of the  spscarrayqueue  (the latter basically ignored items from the main source when it got full - a remnant from its bounded  flowable  cousin). unit tests added that ensure both  flowable  and  observable  variants work properly.,Util,Test,IO,i18n
5615,2.x: add missing license headers,fixlicenseheaders  is currently failing when run locally (it s skipped on ci).,IO,Test
5616,2.x: add single.delay overload that delays errors,much like #5382  i discovered when trying to fake a slow/flaky backend that  single.delay  doesn t delay errors.,i18n,IO,Test,Util
5617,2.x: fix observable.delay & flowable.delay javadoc,error notifications can be delayed when using the overloads with a  delayerror  parameter.,IO,Util
5623,2.x: fix incorrect error message at subscriptionhelper.setonce,i found an incorrect error message at  subscriptionhelper.setonce .,Util,IO
5624,2.x: add onterminatedetach to single and completable,this pr adds the  onterminatedetach  operator to  single  and  completable . it was available on  flowable    observable  and  maybe  already.,IO,Test,i18n
5633,upgrade to gradle 4.2.1  remove nebula plugin dependency,this pr upgrades the gradle runtime to 4.2 (which supports java 9) and gets rid of the  rxjava-nebula  plugin. its two features  publishing a snapshot and publishing a release has been manually implemented in  build.gradle  based on some [online examples] and [rxandroid s]( variant.,Util,IO,Interpreter
5637,2.x: fixing javadoc warnings,minor fixes for warnings reported by  javadoc  tool  mentioned in #5634,i18n,Util,IO
5640,add tests for  changed  flag,**update** do not change any functionality  but add tests.,IO,Util
5647,2.x: fix subscribewith documentation examples,this pr improves a documentation of  subscribewith  functions in  single    maybe    completable  by making sure examples are compilable (by using classes which implement  disposable ).,IO,Util
5649,2.x add concatmapcompletable() to observable,add  concatmapcompletable()  to  observable  as discussed in #4853,IO,Util
5651,2.x: update obs.just(2..10) & switchonnextdelayerror marbles,this pr updates the marble diagrams of the 2..10 argument  observable.just()  and two overloads of  observable.switchonnextdelayerror .,Util,IO
5652,2.x: inline disposability in obs.concatmap(completable),the inner  observer  type and the  sequentialdisposable  of the  concatmap  and  concatmapcompletable  can be combined into a single instance  saving on indirection and allocation.,IO,Util
5660,1.x: fix timeout (timed  selector) unsubscribe bug,this pr fixes an unsubscribe bug somewhere in the timed  timeout  operator reported in #5657 by implementing it in a algorithmically fresh manner.,Util,IO
5661,2.x: improve flowable.timeout(),this pr improves the internal overhead of the  flowable.timeout  operator (its 2 timed and 2 selector-based versions) to use the adapted [indexed atomic state transition approach](http://akarnokd.blogspot.hu/2017/09/java-9-flow-api-timing-out-events.html).,IO,Util
5668,fix a misleading documentation of observable.singleelement(),this pr improves the documentation of  observable.singleelement()   as mentioned in  https://github.com/reactivex/rxjava/issues/5317.,Util,IO
5669,2.x: fix publishprocessor cancel/emission overflow bug,this pr should fix the bug that caused the test failure in #5545.,Test,IO,Util
5673,2.x: coverage  add singletoflowabletest,add  singletoflowabletest  to cover toflowable with test.,i18n,Util,Test,IO,Network
5675,2.x: add publishprocessor jmh perf comparison,this pr adds a perf class to measure the overhead of request management inside  publishprocessor  and a comparison with  publishsubject .,IO,Util,Interpreter
5677,2.x: make parallel() a fusion-async-boundary,the  parallel()  supports front-fusion but since the operator is almost always followed by the separate  runon  operator  the parallel version of the  observeon  operator  such front-fusion should be considered a  boundary -type fusion just like with  observeon .,IO,Util,Test
5680,add throttle to autosaveuimanager,as discussed in #5679 there are a lot of save actions performed when autosave is turned on. this pr adds a timer which limits the save actions to one in 200ms which is especially handy when automated tasks like find and replace are performed.,Util,IO
5683,2.x: add tck test for limit(),this pr adds a reactive-streams tck test for  limit()  .,Test,IO
5695,2.x: fix completable.concat to use replace (don t dispose old),completable.andthen    concat(iterable)  and  concatarray()  disposed the previous  disposable  when receiving the new  disposable  from the next source which could lead to interruption.  concat(publisher)  already uses  replace  instead of  update .,Test,IO,Util
5696,1.x: fix completable.concat to use replace (don t dispose old),fixes the same bug as with the 2.x  completable.andthen  and  completable.concat .,IO,Util,Test
5705,last minute changes 5.0-beta,let s see,Util,Test,IO
5706,remove mentions of main thread from schedulers.single() javadoc.,to avoid confusion.,IO,Util
5709,2.x: improve javadocs of flatmapsingle and flatmapmaybe,clarify that  flatmapsingle  and  flatmapmaybe  merge in no particular order and fix the copy-paste error from  flatmapcompletable  as they have values to merge  not just waiting.,Util,IO
5713,2.x: basetestconsumer values() and errors() thread-safety clarifications,this pr adds clarifications to the  basetestconsumer.values()  and  basetestconsumer.errors()  method in regard to accessing elements while the upstream is still actively emitting events.,IO,Util
5715,fix springer fetcher tests,<!--,i18n,IO,Util,Test
5717,fix import into currently open library,remove unnecessary parallel execution of  addtab   which 5537.,IO,Util
5718,2.x: add a sentence to documentation of take() operator.,#5716,IO,Util
5719,1.x: add a sentence to documentation of take() operator,#5716,Util,IO
5721,2.x : rename variable name  subject  to  processor  for exact expression,rename variable name  subject  to  processor  in processor pacakage,i18n,Test,IO,Util
5723,remove duplicate nullity check line from observable.tomap(),small cleanup to remove duplicate nullity check line from  observable#tomap,Util,IO
5729,2.x: implement as(),this implement  as()  support as discussed in #5654,Util,Test,IO
5734,2.x: rxjavaplugins unwraprunnable,hi,IO,Util,i18n,Test
5738,bugfix for multiscreen,made following changes to solve multiscreen issue 5037:,IO,Util
5740,2.x: marbles for observable all  frompublisher  ziparray,this pr adds a marble diagram to  frompublisher  and updates the marbles of  all  and  ziparray  inside  observable .,IO,Util
5741,2.x: internal api to get distinct workers from some schedulers,this pr adds an internal interface  schedulermultiworkersupport  that allows retrieving multiple workers from a  scheduler  that implements this interface.,Test,IO,Util
5743,2.x: check isdisposed before emitting in singlefromcallable,previously singlefromcallable did not check if the subscriber was,Test,Util,IO
5745,2.x: add/update observable marbles 11/28,this pr adds or updates mable diagrams of  observable :,Util,IO
5746,2.x: improve wording and links in package-infos + remove unused imports,this pr is to improve the wording of a few  package-info.java  javadocs and removes two unused imports.,IO,Util,Test
5747,2.x: fix trampolinescheduler not calling rxjavaplugins.onschedule()  add tests for all schedulers.,noticed during figuring out how #5734 works.,IO,Util,Test
5748,2.x: check runnable == null in *scheduler.schedule*().,to enforce  @notnull  guarantee for the pr #5734  see  https://github.com/reactivex/rxjava/pull/5734/files#r153951238,IO,Util,Test
5753,2.x: add retry(times  predicate) to single & completable and verify behavior across them and maybe.,- add retry(times  predicate) to single & completable (maybe had it already) which just forwards to flowable for now,Util,Test,IO
5755,2.x: add marbles for observable (12/06),this pr adds some missing marbles to  observable :,Util,IO
5756,2.x: improve autoconnect() javadoc + add its marble,this pr improves the javadoc of  connectableobservable.autoconnect()  and  connectableflowable.autoconnect()  operators and adds the respective marble diagrams:,Util,IO
5758,2.x: add a couple of @see to completable,this pr adds a couple of  @see  cross references to  completable  javadoc.,IO,Test,Util
5759,2.x: marble additions and updates (12/11),this pr adds or updates mable diagrams of  observable :,IO,Util
5760,2.x: subject npe fixes  add unicastprocessor tck,this pr adds the  subject.refcount()  and  flowableprocessor.refcount()  that capture the upstream s  disposable / subscription  and disposes/cancels them if the number of  observer s/ subscriber s decreases to zero. the reactive-streams tck and thus other implementations may expect such behavior from a  processor  implementation and this wrapper is required to pass the tck tests.,IO,Util,i18n,Test
5761,2.x: fix timed exact buffer calling cancel unnecessarily,this pr removes the unnnecessary  cancel / dispose  call from the exact-boundary timed  buffer()  operators in  observable  and  flowable  when the upstream completes normally.,IO,Test,Util
5766,rename interface parameters,#5762,IO
5773,fix springer fetcher tests,follow-up to 5715/files.,Util,IO
5778,2.x: improve behaviorprocessor javadoc,a [stackoverflow]( question prompted me to look at  behaviorprocessor  to find it quite lacking of a detailed javadoc. this pr adds sentences and examples (i could think of) to it that explain the available features and behavior of this  processor  implementation.,IO,Util
5780,2.x: improve behaviorsubject javadoc + related clarifications,this pr adds detailed behavior and feature description to the  behaviorsubject  javadoc.,IO,i18n,Util
5781,fix gui tests,5602  refs #2768.,Util,IO
5783,2.x: fix javadoc wording of onterminatedetach,a missing  nulls  word from  flowable.onterminatedetach  and  observable.onterminatedetach  javadoc. the other types have this word already.,Util,IO
5785,2.x: update maybe doon{success error complete} javadoc,this pr updates the javadoc of the  maybe.doonsuccess    maybe.doonerror  and  maybe.dooncomplete  marble diagrams and adds an explicit sentence about mutually exclusive events.,IO,Util
5786,fix  &  on previews,<!--,Util,IO
5790,2.x: improve request accounting overhead in retry/repeat,this pr improves the request accounting overhead in the  retry  and  repeat  operators.,Util,Test,IO
5792,2.x: fix flatmap inner fused poll crash not cancelling the upstream,this pr fixes the lack of upstream  cancel()  call when an inner  fused source s  queue.poll()  crashes in a non-delayed error mode.,IO,Test,Util
5795,2.x: more marbles 01/08-a,this pr adds 5 marble diagrams to  observable :,IO,Util
5797,2.x: observable marble fixes 01/08-b,this pr adds and updates marbles of the following  observable  operators:,Util,IO
5798,2.x: observable.replay(function  ) marble fixes,this pr updates the marble diagrams of the 8  observable.replay()  overload that take a  function  and various other parameters:,Util,IO
5799,reimplement custom entry types dialog,4719,IO,Util
5802,2.x: improved xsubject javadocs,this pr adds more detailed javadoc descriptions to the various  xsubject  types.,IO,Util,i18n
5804,2.x: more observable marbles  01/10-a,more marbles for  observable :,Util,IO
5805,disable acm fetcher,see  for details,Util,IO
5811,2.x: fix buffer(open  close) not disposing indicators properly,the pr fixes the resource management in the  buffer  operator that uses other reactive sources to indicate when a buffer starts and ends. both  flowable  and  observable  implementations had to be fixed.,Test,Util,IO
5816,2.x: add subject and processor marbles,this pr adds the missing marble diagrams to the various  subject  and  processor  implementations:,Util,IO,i18n
5820,1.x: plugin lookup workaround for system.properties access restrictions,the pr adds a  try-catch  around the system property lookup inside the  rxjavaplugins  in case a security manager prevents reading arbitrary property entries.,i18n,Test,IO,Util
5824,improve change detection,<!--,IO,Util
5826,conversion of group dialog to mvvm-pattern,a first approach to convert the add/edit group dialog to the mvvm-pattern and a step forwards to implement the changes @martinkarim supposed in #4684 .,IO,Util
5828,2.x: document replay(n) emission retention caveat,adds javadocs indicating a caveat regarding size-bounded replay operators  subjects  and processors. see #5827 for details.,IO,i18n,Util
5830,2.x: reword the just() operator and reference other typical alternatives,this pr updates the  flowable.just  and  observable.just  javadocs to clarify its behavior  namely it re-emits a constant reference and does not compute it. in addition  links to the other typical source operators are added. the redundant sentence about  just  were removed as well.,IO,Util
5833,2.x: fix observable.switchmap main onerror not disposing the current inner source,the  observable.switchmap  had bad logic in its main  onerror  handler which didn t dispose the current inner  observable .,Util,Test,IO
5834,2.x: fix copy-paste errors in singlesubject javadoc,the  singlesubject  javadoc was derived from the  maybesubject  javadoc and thus some mentions of  oncomplete  remained in there. this pr fixes copy-paste errors.,Util,IO
5837,2.x: detail distinct() & distinctuntilchanged() in javadoc,the pr clarifies the comparison and retention behavior of the  distinct  and  distinctuntilchanged  operators (in both  flowable  and  observable ).,Util,IO
5838,improve serialization to 4877,<!--,IO,Util,i18n
5841,fix missing file extension for downloaded files.,5816 by falling back to pdf as default file type.,Interpreter,Util,IO
5843,improve performance by throttling database change events,<!--,IO,Util
5844,2.x: explain the properties of the xemitter interfaces in detail,this pr explains the properties of the 5 specifc  emitter  types in more details:,IO
5845,2.x: add efficient concatwith(single|maybe|completable) overloads,this pr adds specialized overloads to the  concatwith  operator in  flowable  and  observable .,IO,Util
5847,2.x: add efficient mergewith(single|maybe|completable) overloads.,this pr adds specialized overloads to the  mergewith  operator in  flowable  and  observable .,IO,Test,Util,i18n
5848,2.x: improve the wording of the maybe.fromcallable javadoc,this pr improves the wording and details of the  maybe.fromcallable  operator s javadoc.,IO,Util
5856,2.x: add finite requirement to various collector operators javadoc,add notes to the following operators to state their sources has to be finite. it has been already done to  tolist  in #5465.,IO,Util
5857,2.x: unify race test loop counts and invocations,this pr replaces the individual race-test loop counts with global constants and removes the unnecessary custom  scheduler  value from the invocations of  testhelper.race() .,i18n,Test,IO,Util,Network
5860,2.x: flowable.groupby add overload with evicting map factory,as per discussion in #5763  this pr adds an overload for  flowable.groupby  that specifies an  evictingmapfactory .,Test,IO,Util
5861,2.x: fix javadoc warnings  links to the jdk types,the definition of multiple external links was wrong in  build.gradle  where the  options.links()  is actually defined as  string  and multiple calls are not additional. this made the generated javadoc not have links to the jdk types. the fix now properly uses the varargs of the method. in addition  somehow the plain    still wouldn t generate the proper links probably because they are redirected to    for which the javadoc tool is not prepared.,IO,Interpreter,Util
5863,2.x: expand the documentation of the flowable.lift() operator,this pr expands the documentation of the  flowable.lift()  operator used for inserting custom operators into flows in a functional and fluent fashion.,Util,IO
5865,duplicate query parameter removed,calling the springer web search always throws an exception:,Util,IO
5867,2.x: enhance test for groupby with evicting map factory,enhance  flowablegroupbytest.singlethreadevictinghashmap  so that it actually evicts and be a bit defensive by supporting  putall  and  clear  properly. no change to  src/main/java .,Util,IO,Test
5870,2.x: add flowable.switchmapcompletable{delayerror} operator,this pr adds the  flowable.switchmapcompletable  and  flowable.switchmapcompletabledelayerror  operators as requested by #4853.,Test,IO,Util
5871,2.x: add flowable.concatmapcompletable{delayerror} operator,this pr adds the  flowable.concatmapcompletable  and  flowable.concatmapcompletabledelayerror  operators as requested by #4853.,Util,IO,Test
5872,2.x: add flowable.concatmap{maybe single}{delayerror} operators,this pr adds operators that allow concatenating a mapped sequence of  maybe s or  single s  with or without delaying their errors:,IO,Util
5873,2.x: add flowable.switchmap{maybe single}{delayerror} operators,this pr adds  flowable  operators that allow switching between a mapped sequence of  maybe s or  single s  with or without delaying their errors:,Util,IO,Test
5875,2.x: add observable switchmapx and concatmapx operators,this pr ports the various  switchmapx  and  concatmapx  operators from #5870  #5871  #5872 and #5873 to  observable :,IO,Util,Test
5883,2.x: improve coverage and fix small mistakes/untaken paths in operators,this pr improves the coverage of rxjava while adjusting some code paths and fixing other types of smaller bugs.,IO,Test,Util,i18n
5886,2.x: upgrade the algorithm of observable.timeout(time|selector) operators,this pr improves the algorithms of the  observable.timeout(time)  and  observable.timeout(selector)  operators to match their  flowable  counterparts implemented in #5661.,Util,Test,IO
5887,2.x: fix window(observable|callable) upstream handling,this pr fixes the upstream handling in  observable.window(observablesource)  and  observable.window(callable<observablesource>)  operators to make sure if both the main output and the inner windows have been disposed  the upstream is also disposed.,Test,Util,IO
5888,2.x: fix flowable.window(publisher|callable) upstream handling,this pr fixes the upstream handling in  flowable.window(publisher)  and  flowable.window(callable<publisher>)  operators to make sure if both the main output and the inner windows have been cancelled  the upstream is also cancelled.,Test,Util,IO
5889,2.x: cleanup  coverage and related component fixes,this pr improves the coverage of various components and contains the following additional fixes:,Test,Util,IO
5890,added nullable annotations to subjects,adding nullable annotations to subjects. the  throwable  and  getvalue  methods are annotated with nullable.,Util,IO,i18n
5891,2.x: improve coverage & related cleanup 03/05,improve the coverage of various components  fix impossible paths and other fixes. see the comments attached to the code changes.,i18n,IO,Util,Test
5892,2.x: fix the extra retention problem in replaysubject,in the bounded buffers of  replaysubject   the head reference may retain one extra item when the trimming happens. nulling out this reference is not possible at this point because old consumers may be still walking through the underlying linked list of nodes. however  replacing a head with the same next pointer (which is always not null if value is not null) but no value will eventually let the value get gcd. this cleanup doesn t happen on every  onnext  because it doubles the node allocation and thus the overhead.,IO,Test,Util,i18n
5893,2.x: fix flowable.publish(-|function) subscriber swap possible data loss,this pr fixes an avoidable dataloss in the following subscriber-swap scenario with the  publish()  and  publish(function<flowable  publisher>) .,IO,Test,Util
5895,fix buffer() documentation to correctly describe onerror behaviour,5894. i just copied the sentence from the fixed docs in 1.x and updated to use observablesource/publisher naming.,IO,Util
5897,2.x: clarify dematerialize() and terminal items/signals,specify in both  flowable  and  observable  that a terminal notification item or a regular terminal signal ends the flow.,IO,Util
5898,2.x: fix excess item retention in the other replay components,this is a follow-up pr to #5892 in order to avoid item retention in the head node. for the  replayprocessor   the cleanup can be triggered with  cleanupbuffer . for the  replay()  operators  such trigger is not possible. however  the terminal events will perform the cleanup internally at least.,Util,i18n,IO,Test
5900,2.x: fix observable.flatmap scalar maxconcurrency overflow,since  observable  is not backpressured  the  flatmap  of it has to manage the buffering of inner sources so that only a limited number of them are active at the same time. however  when most outstanding inner sources were scalar ( just()  is such a source) but the drain loop was busy  the operator overflow its bounded scalar queue (as it is supposed to be holding at most maxconcurrency scalar items)  causing an  illegalstateexception .,IO,Test,Util
5902,2.x: perf measure of flowable flatmap & flatmapcompletable,this pr adds two benchmarks that measure the synchronous and asynchronous behavior of  flowable.flatmap  and  flowable.flatmapcompletable  when both are run with a  completable  source.,Test,Util,IO,Interpreter
5904,2.x: fix flowable.singleorerror().toflowable() not signalling nosuchelementexception,when a  singleorerror  is followed by  toflowable()   the assembly process switches the  flowable->single  operator into a  flowable->flowable  operator implementing the  singleorerror  behavior (saving the back-and-forth type conversion). the backing implementation was shared with  singleelement  and as such  did not properly handle the  orerror  case for an empty source. the pr fixes the lack of  nosuchelementexception  in this case.,IO,Test,Util
5905,2.x: coverage improvements  logical fixes and cleanups 03/08,this pr fixes a couple of logical errors and cleans up some other components as well as improves the coverage of some classes. see the change comments below about the relevant details.,i18n,Util,IO,Test
5906,2.x: add public constructor for testscheduler that takes the time.,- adds a time constructor to testscheduler,IO,Util
5907,2.x: cleanup test local variable names,add an unit test that scans the unit test files for common local variable misnaming due to copy-pasting between the types  such as:,Test,IO,Util
5910,2.x: improve coverage  fix operator logic 03/12,improve coverage of rxjava internal components. see the change explanation as comments below.,i18n,Test,Util,IO
5914,2.x: benchmark x-map-z operators,this pr adds jmh benchmarks to measure operators mapping onto other types  such as  flatmapcompletable    concatmapsingle   etc. in addition  two new benchmarks were added to measure the  flatmapiterable  performance in additional situations.,Interpreter,Util,i18n,IO
5915,2.x: optimize observableconcatmapcompletable,this pr reduces the overhead in the  observable.concatmapcompletable  operator by:,i18n,Network,IO,Util,Test
5918,2.x: improve the scalar source performance of observable.(concat|switch)mapx,this pr adds scalar source optimizations to  observable  operators:,Test,IO,Util
5919,2.x: add fusion support to observableswitchmap inner source,this pr improves the performance of the  observable.switchmap  operator by adding fusion support as well as upgrading the  completable  and  single  conversion to  observable  to be fuseable. the pr also fixes an error in the  deferredscalardisposable  implementation as the protocol requires calling with  null .,IO,Test,Util,Interpreter
5923,disable search when no library is opened,and fix exception when getsearchresultsize returned null,IO,Util
5924,2.x: update single.flatmappublisher marble,renamed the operator in the box. for #5788.,Util,IO
5925,fix maintable not updated when changing entry type,5906,Util,i18n,IO
5928,2.x: fix concatmapsingle & concatmapmaybe dispose-cleanup crash,this pr fixes the accidental logical mistake in the  cancel / dispose  logic of the new  concatmapsingle  and  concatmapmaybe  operators of both  flowable  and  observable  where the internal queue cleanup should happen in a serialized fashion only  which is the state when the work-in-progress counter changes from 0 to 1 ensured by a  ==  check.,Util,Test,IO
5930,add @nonnull annotations to create methods of subjects and processors,i am annotating *subject s and *processor s create methods with @nonnull annotations to remove compiler s nullability warnings when calling the methods from kotlin language.,i18n,IO,Util
5936,2.x: fix completable.tomaybe() @return javadoc.,current javadoc:,Util,IO
5940,5939 by creating a mutable list in opendatabaseaction,this pr fixes the problem when opening a library from the recent libraries menu. 5939,IO,i18n
5942,removed terminated check in onnext,terminated  is an empty array  so iterating over it would be harmless. the cost of the check is probably minuscule  but it was imposed on the common case where the subject is not terminated. in essence  it was optimizing for misuse of the api.,IO,Util
5947,2.x: fix groupby cancellation with evicting map factory,5933.,Test,IO,Util
5948,fixfetcher,added another possible option for checking fulltexts,Util,IO
5951,2.x: blockingx javadoc to mention wrapping of checked exceptions,this pr adds an **error handling** section to various  blockingx  operators to specify checked exceptions from their source will be wrapped into  runtimeexception s.,IO,Util
5952,appendonlylinkedarraylist#foreachwhile is not breaking iteration properly,appendonlylinkedarraylist#foreachwhile(nonthrowingpredicate)  was  break -ing from inner loop instead of  return -ing when predicate returned  true .,Util,IO,Test
5957,2.x: add single.ignoreelement  deprecate tocompletable,rename-deprecate  single.tocompletable  to  ignoreelement  to be in line with the same operator in the other classes and also indicate more clearly in the method name that it ignores the element.,IO,Util
5959,2.x: fix some grammar mistakes,this pr fixes a bunch of typos (in many files) and grammar mistakes in  flowable  (based on grammarly checks).,Test,Util,IO
5966,2.x: workaround for objects.requirenonnull inserted by javac,for some reason  when compiling rxjava with java 9 or 10 and target 8  there is an implicit  objects.requirenonnull  added by the compiler to  us.new x  which makes animalsniffer detect a non-java 6 api usage. interestingly  this does not happen with:,IO,Util,Test
5975,dividers,(https://user-images.ent.com/2141507/74989401-85f09c80-5440-11ea-9216-789b82884492.png),Util,IO
5976,help menu,previous:,IO,Util
5977,move journal abbreviations to library,previously:,Util,Test,IO
5978,2.x: fix flowable.take to route post-cancel errors to rxjavaplugins.onerror,this pr makes sure errors emitted by the upstream just after the  flowable.take  has received the specified amount of items get routed to  rxjavaplugins.onerror .,Test,IO,Util
5979,rework tools menu,formerly:,i18n,Util,IO,Test
5981,2.x: improve javadocs of the subscribeactual methods,the pr improves the wording of the abstract  subscribeactual  method across the base reactive types.,IO,Util
5982,2.x: deprecate getvalues() in subjects/processors,this pr deprecates the  getvalues()  and  getvalues(t)  methods in  asyncsubject    behaviorsubject    asyncprocessor  and  behaviorprocessor .,Test,IO,Util
5984,2.x: add blockingsubscribe javadoc clarifications,this pr adds some clarifications to the  blockingsubscribe  methods on  flowable  and  observable .,IO,Util
5985,2.x: small cleanups in the scheduler class,- remove  @nonnull  from a primitive type,Util,IO
5986,2.x: add refcount with count & disconnect timeout,this pr exposes the additional  refcount  operation modes from #5975:,IO,Util,i18n,Test
5987,move generate bibtex keys to edit menu,previously:,IO,Util
5991,2.x: fix switchmap to indicate boundary fusion,fix  flowable.switchmap  and  observable.switchmap  to request for boundary fusion in order to prevent a thread-confined but otherwise fusion-capable sub-sequence from running on the unintended thread.,Util,Network,Test,i18n,IO
5992,cleanup build file,several cleanups  see separate commit messages.,Util,IO
5995,implement  tostring  method for some emitters,when use  .create  method it s unclear why  emitter  is null (if call  tostring  or observe object via debugger).,IO,Util,Test
6002,2.x: add multicastprocessor,this pr adds the  multicastprocessor  from the [extensions project]( to be a standard processor option.,Util,IO,Test
6010,2.x: add assertvaluesetonly and assertvaluesequenceonly to testobserver + testsubscriber,this basically copies the behavior of  assertvaluesonly  to the  assertvalueset  and  assertvaluesequence  equivalent methods.,Util,IO
6014,2.x: fix & prevent null checks on primitives,this pr removes the accidental null checks on primitives in two  observable  methods and adds a trap method to  objecthelper  to both highlight and fail the tests in case the null checks are still attempted. the method is marked as deprecated so it will also show up in (eclipse s) problems window.,Util,IO,Test
6017,2.x: benchmark (0..1).flatmap  andthen & flattenas performance,this pr adds jmh benchmarks to measure the overhead of  {single|maybe}.flatmap{publisher|observable}    {single|maybe}.flattenas{flowable|observable}  and  completable.andthen({publisher|observable}) .,Interpreter,IO,Util
6019,code: tex --> latex (in the context of parselatex),follow up to  (as discussed at 5978#discussion_r382426774).,IO,Test,Util
6021,2.x: single.flatmappublisher full implementation,see discussion in #6015.,Util,Test,IO
6023,2.x: more time to behaviorprocessor & interval tck tests,this pr increases the timeout of the reactive streams tck tests targeting  behaviorprocessor  and  interval()  from 25ms to 50ms to have some slack on travis-ci.,IO,Test,Util
6024,2.x: dedicated {single|maybe}.flatmap{publisher|observable} & andthen(observable|publisher) implementations,this pr implements the following operators directly instead of conversions between base types:,IO,Util
6026,fix flowable.blockingsubscribe is unbounded and can lead to oome,create and bound new  blockingsubscribe  overloads to  buffersize .,Interpreter,Test,Util,IO
6028,2.x: improve observable.takeuntil,this pr upgrades the  observable.takeuntil  to a newer algorithm (the  flowable  version is up-to-date).,Util,IO,Test
6029,2.x: upgrade to gradle 4.3.1  add takeuntilperf,the jmh plugin 0.4.4 has some shortcomings that prevent the execution of unit tests on windows 10 (and on some very restricted linuxes). version 0.4.5 has been fixed in this regard but it also requires gradle 4.3.x. unfortunately  there are no newer versions to the jmh plugin so this is likely as far as we can go with versions.,Util,IO,Interpreter
6030,2.x: fix multicastprocessor javadoc warnings,add two missing  &gt   tags to avoid the javadoc tool warnings.,Util,IO
6031,translation for specialfield names in preferences,names of special fields were not translated in preferences.,IO,Util
6036,2.x: fix disposed lambdaobserver onerror to route to global error handler,fix the behaviour of lambdaobserver when disposed to route to the global error handler,Test,IO,Util
6042,fix multicastprocessor javadoc comment,fix wrong javadoc comment of multicastprocessor.,IO,Util
6045,fix check that would always be false,checking  blockingsubscriber.terminated  ( new object() ) against  o  would always be false since  o  is a publisher. since  v  comes from the queue this is presumably the variable that should be checked.,Util,IO
6049,make it explicit that throttlewithtimout is an alias of debounce,the documentation implies that these two methods are somewhat different. fixing that confusion  as discussed in #6043:,Util,IO
6052,#5980 made subscribeactual protected,### proposal,IO,Util
6053,2.x: add maybe marble diagrams 06/21/a,resolved the following diagrams of #5806:,IO,Util
6054,fix warning display issue for entering a title made of two words,<!--,i18n,IO,Util
6057,2.x: use different wording on blockingforeach() javadocs,change the wording on the  blockingforeach()  method to clarify it runs the  consumer  on the current thread. since there is no onerror callback  the extra sentence about the error behavior was removed. there is an error handling section already that explains it properly.,Util,IO
6060,2.x: fix concatmap{single|maybe} null emission on dispose race,this pr fixes a bug in all 4 specialized  concatmap  implementation that allows  null  to be emitted when the success signal of the inner source races with the dispose signal of the sequence.,Test,Util,IO
6066,fix links for single class,* change observable.html to single.html,IO,Util
6074,add marble diagram to the single.never method,first of all  i m extremely grateful to open my first pr for rxjava. i hope that i ll be able to tick more of the marbles from #5788 but for now this should tick off the  never  operator.,Util,IO
6075,add marble diagram to the single.filter method,hopefully this should tick off the  filter  operator in #5788,IO,Util
6076,add marble diagrams to the single.delay method,here are marbles for  delay  operator in #5788,Util,IO
6077,add marble diagram for single.hide operator,this should complete  hide  operator in #5788,IO,Util
6078,2.x: add maybe.hide() marble diagram,add marble to  maybe.hide() :,IO,Util
6079,2.x: add completable.takeuntil(completable) operator,this pr adds the missing dedicated  takeuntil  operator to  completable .,Test,IO,Util
6080,2.x: improve class javadoc of single  maybe and completable,this pr expands the javadocs of  single    maybe  and  completable  where the latter also receives an explanation marble:,Util,IO
6081,add marble diagrams for single.repeat operators,here are marbles for  repeat    repeat(times)  and  repeatwhen  operator in #5788,Util,IO
6083,2.x: add completable marble diagrams (07/17a),this pr adds the following marble diagrams to  completable  operators (#5789):,Util,IO
6084,add marble diagram for single.repeatuntil operator,here is marble for  repeatuntil  operator in #5788,IO,Util
6085,2.x: more completable marbles (+18)  add completable.frommaybe,this pr adds marble diagrams (#5789) to the following operators as well as adds the missing  completable.frommaybe  operator ( fromx  of other types were already there  uses existing  maybe.ignoreelement  s underlying implementation).,Test,Util,IO
6086,single error operators marbles,here are marbles for #5788,IO,Util
6087,add marbles for single.from operators,here are marbles for  fromcallable    frompublisher  and  fromobservable  operators from #5788,Util,IO
6090,2.x: add missing completable marbles (+17  07/18a),this pr adds marble diagrams to various  completable  operators:,IO,Util
6091,add marbles for single.amb operators,here are operators for  amb  and  ambarray  from #5788,IO,Util
6095,add marbles for single.timer  single.defer and single.toxxx operators,here are marbles for  defer    timer(delay  unit)    timer(delay  unit  scheduler)    toflowable    tomaybe    tofuture  operators in #5788,Util,IO
6096,2.x: improve completable.delay operator internals,this pr improves the  completable.delay()  operator internals  reducing allocation and indirection.,Test,IO,Util
6097,2.x: add missing completable marbles (+19  07/19a),this pr add even more missing marbles to  completable  (tracked by #5789):,IO,Util
6098,2.x: several more completable marbles (7/19b),this pr adds a couple of more marble diagrams to  completable  (#5789):,IO,Util
6099,update testhelper.java: trivial typo fix,thank you for contributing to rxjava. before pressing the  create pull request  button  please consider the following points:,i18n,Network,Test,IO,Util
6101,2.x: final set of missing completable marbles (+26),this pr contains the final set of missing  completable  marbles (#5789):,IO,Util
6103,remove gui globals,<!--,IO,Util
6104,fixing javadoc s code example of observable#lift.,code example in javadoc for observable#lift seems not compilable in 2.x.,IO,Util
6105,2.2: promote all experimental/beta api to standard,this pr promotes all  @experimental / @beta  apis to standard with version number **2.2**.,Util,IO,i18n
6119,2.x: test cleanup,this pr cleans up the tests:,IO,Test,Util
6121,icons from material design icons not recognized,6078,IO,i18n,Test,Util
6123,fulltext file deleted when being renamed to the name differing just b…,…y letter case,IO,Util
6129,fix setting of title (and simplify basepanel to librarytab),fixes 394,IO
6137,move  manage field names & content  to  edit,background: <blockquote class= twitter-tweet ><p lang= en  dir= ltr >oh bummer  did the new jabref remove the &quot clear field&quot  feature?</p>&mdash  liantze lim (@liantze) <a href=  >march 16  2020</a></blockquote>,IO,Util
6141,add marble diagrams for various single operators,here are marble diagrams for various single operators that will close some of the #5788,Util,IO
6143,add aps fetcher (refactored),818  part of #2581.,Util,IO
6145,update to jdk 14,<!--,IO,Util,Test
6150,2.x: cleanup newline separation  some field namings,this pr cleans up some source code style inconsistencies:,i18n,Interpreter,IO,Util,Test
6152,allow reordering of custom entry types fields,additionally  restore the old multiline property and make it configurable.,IO,Util
6155,2.x: fix marble of maybe.flatmap events to maybesource,fix the marble diagram of the event-mapping [ maybe.flatmap ]( operator:,Util,IO
6158,2.x: make flowable.fromcallable consistent with the other fromcallables,flowable.fromcallable  is one of [the oldest]( 2.x operators and was overlooked when the handling of beyond-cancellation error delivery  aka the undeliverable exception handling was implemented across rxjava. this pr resolves this shortcoming by making it consistent with its sibling implementations.,Test,Util,IO
6167,2.x: make observeon not let worker.dispose() called prematurely,some operators may call  dispose() / cancel  from  onerror / oncomplete  which could trigger a permature call to  worker.dispose()  that was about to happen anyway. this pr prevents this by moving the operator into its disposed/cancelled state before signaling the terminal event  thus a downstream  cancel() / dispose()  call won t trigger this premature cleanup.,IO,Test,Util
6171,2.x: add explanation text to undeliverable & onerrornotimplemented exs,this pr adds detailed error message to the  undeliverableexception  and  onerrornotimplementedexception  as they are the most common exception-related questions around.,IO
6175,2.x: explain null observer/subscriber error reports in detail from rxjavaplugins,this pr is related to issue 6172](https://github.com/reactivex/rxjava/issues/6172).,IO,Util,Test
6182,2.x: cleanup multiple empty lines in sources,remove 2+ empty lines from the sources.,i18n,Test,Interpreter,IO,Util
6187,2.x: fix refcount termination-reconnect race,this pr modifies the  refcount  operator (in both  flowable  and  observable  types) to avoid certain termination-reconnection races.,Util,IO
6193,add  error handling  java docs section to from callable & co,6179,IO,Util
6197,#6195 fix flowable.reduce(bifunction) javadoc,empty source does not signal nosuchelementexception.,IO,Util
6199,fix terminology of cancel/dispose in the javadocs,6196,IO,Util
6200,remove redundant regexp character replace,found by intellij: https://www.jetbrains.com/help/phpstorm/regexp-redundant-character-escape.html,IO,Util
6205,2.x: assert instead of print undeliverable in some tests,set plugin error tracking in some tests to avoid printing out  undeliverableexceptions  (sometimes repeatedly in race tests) and assert the specific exception(s) instead.,Util,IO,Test
6220,2.x javadocs: remove unnecessary  s  from connectableobservable,remove the unnecessary  s  from the javadocs of  connectableobservable.autoconnect .,Util,IO
6232,allow basic markup syntax custom previews,add markdownformatter using  to format markdown.,Util,Test,IO
6234,add timeout and unit to timeoutexception message,this is a small enhancement to help with crash/log debugging.,IO,Test,Util
6236,add paging support,by @johahu. let s discuss how to go on here.,IO
6242,fix storing of custom jstyles,6170,IO,Util,Test
6252,2.x: expand and fix completable.delaysubscription tests,expand  fix and move the tests of #6242 into a dedicated test file.,Test,Util,IO
6254,2.x: fix flaky sample() backpressure test  improve coverage,use processors to trigger the  missingbackpressureexception  case instead of the timer  which could fire prematurely and stop the sequence before the first item was sent by the  behaviorprocessor .,Test,IO,Util
6255,2.x: cleanup code style  commas  spaces  docs,- add missing spaces after commas and semicolons,IO,Test,Util,i18n,Interpreter
6257,2.x: add completable.delaysubscription marble  fix some javadoc,- add marbles to the new  completable.delaysubscription  operator.,IO,Util
6258,fix inspire fetcher,use application/x-bibtex header,IO,Test,Util,i18n
6262,use junit s assert format for assert messages to enable better suppor…,this changes the message format of  assert  to match that of junit. this way ides like intellij idea are able to parse it and offer functionality like  compare values .,Util,Test,IO
6263,inline subscriptionhelper.iscancelled(),addresses https://github.com/reactivex/rxjava/pull/6258#discussion_r228725602,IO,Util
6269,fix import into current library issuing wrong message,this change 6266 in which an erroneous message  import canceled  is displayed when importing into the current library. this fix was accomplished by modifying the parameter of the extends clause of the importentriesdialog class to have a return type of boolean rather than void and making setresultconverter return false rather than null.,IO,Util,i18n,Test
6275,2.x: improve the observable/flowable cache() operators,this pr rewrites the  observable.cache  and  flowable.cache  operators to allocate less and be more up-to-date algorithmically.,Util,IO,Test
6278,2.x: add materialize() and dematerialize(),this pr adds the  materialize  operator to  maybe    single  and  completable  to turn their signals into the corresponding  notification  object. this operator has been available for  observable s (and  flowable s) from the beginning of the rx api. the methods return  single<notification<t>> .,Util,Test,IO
6281,2.x: add dematerialize(selector)  deprecate old,this pr adds the  dematerialize(function<t  notification<r>> selector)  overload to allow type-safe dematerialization of  notification  signals. the pre-existing  dematerialize()  forced the return type and assumed the items of the source are  notification  objects  which could not be enforced via the type system. this selector variant establishes the type link from  t  to  notification<r>  to  r  (where r == t is allowed).,IO,Util,Test
6283,refine checkstyle rules,i was a bit annoyed that i had to comment on code style at code reviews. bots should take care of this.,Util,Test,IO
6287,ui consistency - bibtexstringeditordialog rework,follow up to #5737 . took me only about four and a half months to figure that out. thanks @tobiasdiez 😜 : node.lookup did not work  as the textfield node was not present at the time a edit cell was created.,IO,Util
6297,2.x: fix refcount eager disconnect not resetting the connection,this pr fixes the case when an observer/subscriber disposes/cancels immediately upon subscribing to a  refcount  operator before it establishes the connection and ends up with a disposed but non-reset connection  preventing further interactions with the connectable source.,Test,IO,Util,i18n
6301,add missing onsubscribe null-checks to npe docs on flowable/observable subscribe,happened to notice these today,Util,IO
6303,javadoc: fix incorrect image placement,add  <p>  before image elements in javadoc.,Util,IO
6305,javadoc : explain explicitly about using emitter interface methods synchronously,add note in javadoc explicitly explaining about using emitter interface methods synchronously.,Util,IO
6308,javadoc updates for rxjava issue 6289,updates to io.reactivex.flowable javadocs as per #6289.,Util,IO
6311,javadoc: explain that distinctuntilchanged requires non-mutating data to work as expected,- add note in javadoc for all  distinctuntilchanged()  methods in  flowable  and  observable  class explaining about unexpected results to expect when using mutable data sources like **mutable charsequence** or **lists**.,Test,Util,IO
6313,adding nonnull annotations to observable & single,adding nonnull annotations in factory methods for improved code compilation,IO,Util
6314,change javadoc explanation for mutable list,as per [this]( discussion  change javadoc for  distinctuntilchanged()  method for mutable list.,IO,Util
6321,fix flowable#toobservable backpressure support,6320,IO,Util
6335,replace indexed loop with for-each java5 syntax,thank you for contributing to rxjava. before pressing the  create pull request  button  please consider the following points:,Util,IO
6344,javadoc: incorrect  return types in javadoc comments,this pr fixes some mistakes in javadoc comments of some methods inside  flowable.java  and  observable.java  where the actual return type differs from what is described in the documentation.,IO,Util
6346,javadoc: fix examples using markdown instead of @code,in javadoc  backtick has no meaning and caused javadoc compilation errors:,Util,IO
6359,2.x: fix the error/race in observable.repeatwhen due to flooding repeat signal,this pr fixes a race condition in the  observablerepeatwhen  operator for the case when the repeat signal is not 1-for-1 and a new subscription may race with the clearing of the previous disposable because  active  is set to  false  too early. the fix is to swap the two operations.,IO,Test,Util
6364,2.x: fix publish not requesting upon client change,due to a bug in the  flowable.publish  operator  it is not requesting more if there was a change in the subscriber array during an emission run in the non-fused operation mode.,Test,Util,IO
6365,bump java-diff-utils from 4.5 to 4.7,bumps [java-diff-utils]( from 4.5 to 4.7. <details> <summary>changelog</summary> <p><em>sourced from <a href=  >java-diff-utils s changelog</a>.</em></p> <blockquote> <h2>[4.7]</h2> <h3>changed</h3> <ul> <li>minor bug fixes</li> <li>optional include equal parts of original and revised data</li> <li><strong>api</strong> change: removed diffexception completely</li> <li>added possibility to <strong>process diffs</strong> to for instance show whitespace characters</li> </ul> <h2>[4.4] – 2019-11-06</h2> <h3>changed</h3> <ul> <li>java-diff-utils is now a multi module project. the main project java-diff-utils now comes without any dependencies.</li> <li>started reimplementation of unified diff tools</li> <li>exchange <code>0 += 1</code> for <code>0 = 1</code> in unifieddiffutils</li> <li>preview of new unified diff reader / writer. this is not yet feature complete but passes the tests of the old version. <ul> <li>feel free to issue some change requests for the api.</li> </ul> </li> <li>introduces linenormalizer extension point to e.g. change html code encoding. (issue <a href=  >#41</a>)</li> </ul> <h2>[4.0] – 2019-01-09</h2> <h3>changed</h3> <ul> <li>moved to organisation <strong>java-diff-utils</strong></li> <li>changed groupid to <strong>io.github.java-diff-utils</strong> and artifact id to <strong>java-diff-utils</strong></li> </ul> <h2>[3.0] – 2018-10-18</h2> <h3>added</h3> <ul> <li>introduced a process listener to diff algorithms. for long running diffs one could implement some progress information.</li> <li>automatic module name for jdk 9 and higher usage</li> </ul> <h3>changed</h3> <ul> <li>changed generation of inline diffes  if there are different linefeeds within one diff  then these are excluded from the diff block.</li> </ul> <h3>removed</h3> <ul> <li>due to licensing issues delta.java and diffalgorithm.java were removed.</li> </ul> <h2>[2.2] – 2017-11-09</h2> <h3>added</h3> <ul> <li>released at maven central</li> <li>included checkstyle source code conventions</li> <li>allow configurable splitting of lines to define the blocks to compare (words  characters  phrases).</li> </ul> </tr></table>  (truncated) </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>ba4bd7f</code></a> [maven-release-plugin] prepare release java-diff-utils-parent-4.7</li> <li><a href=  ><code>ea8d442</code></a> fixes <a href=  >#75</a></li> <li><a href=  ><code>fbb51d2</code></a></li> <li><a href=  ><code>5781cc5</code></a></li> <li><a href=  ><code>37310e1</code></a> working on issue <a href=  >#75</a></li> <li><a href=  ><code>ccfc402</code></a> update changelog.md</li> <li><a href=  ><code>1e7d96e</code></a> merge origin/master</li> <li><a href=  ><code>f0fc883</code></a> first try of implementing issue <a href=  >#42</a></li> <li><a href=  ><code>3bc40a1</code></a> merge pull request <a href=  >#76</a> from sullis/junit-5.6.2</li> <li><a href=  ><code>29de84c</code></a> junit 5.6.2</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   [![dependabot compatibility score](  dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) if all status checks pass dependabot will automatically merge this pull request.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself) -  @dependabot badge me  will comment on this pr with code to add a  dependabot enabled  badge to your readme  additionally  you can set the following in the  .dependabot/config.yml  file in this repo: - update frequency - automerge options (never/patch/minor  and dev/runtime dependencies) - out-of-range updates (receive only lockfile updates  if desired) - security updates (receive only security updates  if desired)    </details>,IO,Util
6370,2.x: add interruptible mode to schedulers.from,by default  the  schedulers.from  uses a trampoline to ensure worker tasks are executed fifo and non-overlappingly on any potentially multi-threaded  executor . this old setup didn t allow task interruption due to this disconnect between the trampoline task and the operator task. (in contrast  the standard schedulers use single threaded executors and their  future  is linked and interruptible when the operator task is cancelled).,IO,Test,Util
6371,disable the generate button if the id field is empty,6370,Test,Util,IO,i18n
6375,2.x: don t dispose the winner of {single|maybe|completable}.amb(),this pr fixes the  single.amb    maybe.amb  and  completable.amb  operators to not dispose the winner source  causing potential interruptions as a side-effect on the current thread.,Util,Test,IO
6377,6357: file directory,bug was introduced in  sorry @calixtus for suspecting you 👼.,IO,Util
6380,fix bug in compositeexception.getrootcause,i found what i believe is a bug in  compositeexception.getrootcause .,Test,IO,Util
6386,fix jstyle was invalid with default section at the start,6303,IO,Test,Util
6398,2.x: fix window() with start/end selector not disposing/cancelling properly,this pr fixes the start-end selector variant of  observable.window  and  flowable.window  to properly,Test,Util,IO
6405,2.x: fix concateager to dispose sources & clean up properly.,this pr fixes the  concatmapeager  operator (which drives the static variants as well) to properly dispose and clean up the state of the operator upon cancelling/disposing the sequence.,IO,Test,i18n,Util
6408,improving javadoc of flattenasflowable and flattenasobservable method,improving the javadoc of the  flattenasflowable  and  flattenasobservable  methods of  single  and  maybe  classes.,IO,Util
6432,2.x composite disposable docs,on compositedisposable add and addall methods  if the param is null  currently the npe error message (produced by objecthelper) is  d is null  which is not very helpful.,Util,IO
6433,make error messages of parameter checks consistent,this pr updates error messages of parameter checks. most of the changes are due to the renaming of a parameter without changing the error message used when the parameter check fails.,IO,Util
6442,undeliverable error handling logic for completable operators,completable.fromaction  and  completable.fromrunnable  operators were missing  rxjavaplugins  calls to handle undeliverable errors. this behaviour is fixed in this pr.,IO,Util
6452,enforce leftcurly rule,this is a follow-up to 6283.,IO,Util
6453,fixed typos for comments,i was looking at the docs and found that some details does not match the given code.,Util,IO
6458,update the javadoc of the  retry  operator,specify that the  times  function parameter describes  the number of times,Test,IO,i18n,Util
6461,change error message in observablefromarray,changed the error message when an element at position i is null to what was suggested in #6460 .,Util,IO
6469,fix bracket collisions,<!--,Test,i18n,Util,IO
6470,remove unused import in flowable.java,remove unused import in flowable.java,Util,IO
6483,correction for maybe.count doc typo,6481,IO,Util
6485,remove unused else from the observable,remove unused else from the observable class.,IO,Util
6488,2.x: fix zip not stopping the subscription upon eager error,the  observable.zip  did not stop subscribing to the next sources if the previous one failed with an  onerror .  flowable.zip  works as intended.,IO,Util,i18n,Test
6498,3.x: merge in changes from 2.x since the initial branching,### version 2.2.9,Util,IO,Test,i18n
6499,null check for bufferexactboundedobserver,- [*] please give a description about what and why you are contributing  even if it s trivial:,Util,IO,Test
6504,enable users to simultaneously search all searchbasedfetchers,this pr enables users can send queries to all e-libraries simultaneously through the  websearchpane .,Util,Test,IO
6506,2.x: expand the javadoc of flowable,- add links to reactive streams,Util,IO
6507,3.x: sync up with 2.2.10 snapshot,the changes.md always comes up conflicting. i ll leave it as it is for now.,IO,Util
6510,2.x: correct reactive-streams to reactive streams in documentation,* changes  reactive-streams  to  reactive streams  in line with the rest of the documentation.,Util,IO
6511,return true in action helper if file is online link,otherwise it will be interpreted as path which obiously fails,Util,Test,IO,i18n
6514,3.x: merge as() into to(),in 2.x  the  to()  operator used the generic  function  to allow assembly-time conversion of flows into arbitrary types. the drawback of this approach was that each base reactive type had the same  function  interface in their method signature  thus it was impossible to implement multiple converters for different reactive types within the same class. to work around this issue  the  as  operator and  xconverter  interfaces have been introduced in 2.x  which interfaces are distinct and can be implemented on the same class. changing the signature of  to  in 2.x was not possible due to the pledged binary compatibility of the library.,IO,Util
6516,add some javadoc and fix the preview update issue,<!--,IO,Util,Test
6517,3.x: various small api changes and removals,-  maybe.defaultifempty()  returns  single .,i18n,Util,Interpreter,Test,IO
6519,catch inaccessibleobjectexception,catch inaccessibleobjectexception otherwise jabref becomes unusable in some occasions.,Test,IO,i18n,Util
6522,2.x: fix concatmapdelayerror not continuing on fused inner source crash,the  callable  fused path didn t consider the error-delay settings and cut the sequence short.,IO,Test,Util
6523,3.x: fix concatmapdelayerror not continuing on fused inner source crash,the  supplier  fused path didn t consider the error-delay settings and cut the sequence short.,Util,Test,IO
6525,3.x: remove  test  from  testxxx  method names  create a validator,6518.,IO,Test,Util
6526,3.x: remove methods from test consumers  make internal versions,remove methods from the standard test consumers based on feedback in [6153 comment](https://github.com/reactivex/rxjava/issues/6153#issuecomment-463184785).,IO,i18n,Util,Test
6529,3.x: add x.fromsupplier(),this pr adds the  fromsupplier  operator to support the new  supplier  interface.,Util,IO,Test
6530,3.x: disambiguate startwith+1 to startwithitem & startwithiterable,startwith(t)  and  startwith(iterable)  was causing some trouble with  startwith(publisher) . this pr will rename the former two.,IO,i18n,Util,Test
6531,allow entrytype as sorting criterion,fixes https://discourse.jabref.org/t/export-sort-by-entry-type/2122/1,IO,Util
6532,3.x: add eager truncation to bounded replay() to avoid item retention,this pr adds the  eagertruncate  option to the  replay  operator so that the  head  node will lose the item reference it holds upon truncation.,i18n,Test,Util,IO
6534,3.x: make using() resource disposal order consistent with eager-mode,make the resource disposal order in all  using  implementations are consistent with the eagerness of the operator:,Test,IO,Util
6535,3.x: javadocs: clarify create emitters are per consumer,this pr adds this documentation part to the various  create  javadocs (adapted):,Util,IO
6537,3.x: promote beta/experimental to standard,promote the following experimental operators to standard:,Util,Test,IO
6538,3.x: add concatmap with scheduler guaranteeing where the mapper runs,this pr adds an overload to  concatmap  and  concatmapdelayerror  in both  flowable  and  observable  which makes sure the  mapper  function is always executed on a dedicated scheduler.,i18n,IO,Util,Test
6539,3.x: remove no-arg dematerialize()  remove replay(scheduler) variants,this pr removes some obsolete api.,i18n,Util,IO,Test
6544,fixing version tag on schedulers.from(executor  boolean),6543,IO,Util
6545,rename bibtexkey,as discussed in the devcall  bibtexkey should now be renamed to citationkey,i18n,Util,Test,IO
6546,2.x: simplify junit tests with more appropriate assert methods,simplify unit tests by using the more appropriate junit assert methods.,IO,Test,i18n,Util
6549,3.x: simplify junit tests with more appropriate assert methods,simplify junit tests with more appropriate assert methods.,Test,i18n,IO,Util
6550,3.x: remove unnecessary static imports from unit tests,remove unnecessary static imports from unit tests.,IO,i18n,Util,Test
6556,3.x rename on error resume next methods to disambiguate when calling from kotlin (#6551),6551,i18n,Util,Test,IO
6559,3.x fix npe when debouncing empty source,**background** related issue #6558,IO,Util,Test
6560,2.x fix npe when debouncing empty source,**background** related issue #6558,IO,Util,Test
6564,3.x: remove buffer/window with supplier & onexceptionresumenext,this pr removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years.,Util,IO,Test,i18n
6565,fix javadocs of single.doonterminate refer to oncomplete notification,as mentioned in javadocs of this class that single does not have  oncomplete  notification.,IO,Util
6566,3.x: fix wording in single javadocs,some wording fixes in  single   includes #6565.,Util,IO
6570,3.x: code verification fixes for javac s generated switchmap classes,java 13+ compilers generate a synthetic class for switch statements over enumerables now  so  observable.class  (and a few others) now receive an  observable$1.class  companion  which trips the no anonymous inner classes heuristic verification. this pr changes the respective unit test to filter out such classes in a heuristic manner too.,Test,Network,Util,IO
6572,3.x: fix switchmaps inconsistency swallowing errors when cancelled,the various  switchmap  operators did not report any accumulated exceptions to the global error handler when the sequence was cancelled (and thus the errors would never be delivered through the regular channels).,Test,IO,Util
6577,#6576 - observableblockingsubscribe compares blockingobserver.terminated with wrong object,6576   compare with  v  instead of  o .,IO,Util
6579,3.x: widen throws on the xonsubscribe interfaces,this pr widens the  throws exception  to  throws throwable  on the callback interfaces of the  create  methods:  {flowable|observable|maybe|single|completable}onsubscribe .,IO
6581,3.x: add more time for gc in refcounttest.publishnoleak,few of the recent merges failed the  publishnoleak  test because the gc apparently didn t finish in time. this pr increases the gc time to 250 milliseconds in those tests.,Test,IO,i18n,Util
6582,3.x: fix truncation bugs in replay() and replaysubject/processor,this pr fixes several truncation bugs with the time and size-bound replay() operators and their hot class versions:,Util,IO,i18n
6589,create a base test class and have all unit tests extend it,this commit creates the  rxjavatest  class defining a default,Util,IO,Test
6594,have unit tests extends  rxjavatest  - 2,this commit updates the unit tests of the following operators:,Util,Test,i18n,IO
6595,have unit tests extends  rxjavatest  - 3,this commit updates the unit tests of the following operators:,Util,i18n,IO,Test
6598,3.x: fix mergewith not cancelling the other source if the main errors,the  mergewith  implementations   onerror  (called by the main source) cancelled the main source instead of cancelling the other source. this mistake affects all 2 x 3 overloads of the operator.,Util,IO,Test
6600,3.x: have  internal.operator.flowable  unit tests extends  rxjavatest  - 4,this commit updates the unit tests for  internal.operator.flowable,i18n,Util,IO,Test
6601,2.x: observableblockingsubscribe compares with wrong object,it should compare the terminated instance with the value received from the blocking queue.,IO,Util
6602,2.x: fix truncation bugs in replay() and replaysubject/processor,this pr fixes several truncation bugs with the time and size-bound replay() operators and their hot class versions:,Test,Util,IO,i18n
6604,3.x: have unit tests extends  rxjavatest  - 5,this commit updates the unit tests of the following operators:,Util,Test,IO,i18n
6607,3.x: have  internal.operator.observable  unit tests extends  rxjavatest  - 6,this commit updates the unit tests for  internal.operator.observable,i18n,Test,IO,Util
6609,3.x: fix refcount not resetting when termination triggers cross-cancel,this pr fixes both  refcount  implementation to properly reset the source when the source terminates multiple consumers.,Util,Test,IO,i18n
6612,3.x: fix many operators swallowing undeliverable exceptions,fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (i.e.  becoming undeliverable excptions).,IO,Test,Util
6616,3.x: fix switchmap incorrect sync-fusion & error management,this pr fixes the incorrect request call inside  switchmap  when working with sync-fused sources.,IO,Test,Util
6618,2.x: fix switchmap incorrect sync-fusion & error management,this pr fixes the incorrect request call inside  switchmap  when working with sync-fused sources.,IO,Util,Test
6620,3.x: elementat  first - constrain upstream requests,as discussed in #6569 this pr constrains upstream requests for the  elementat  and  first  overloads. other operators will be covered in other prs.,Util,IO
6621,3.x: refactor to io.reactivex.rxjava3.**,this pr refactors the package structure to match the group id:  io.reactivex.rxjava3 . in addition  the base classes and interfaces now live in  io.reactivex.rxjava3.core .,Util,i18n,Test,IO
6626,3.x: fix blockingiterable not unblocking when force-disposed,when the iterator was cast to  disposable  and disposed  the subsequent  hasnext  would block indefinitely. that interface is not intended to be part of the public api and  iterator  in general does not support any form of official cancellation (unlike stream). this pr makes sure that if that dispose is called  it unblocks the iterator.,Util,IO
6627,2.x: fix blockingiterable hang when force-disposed,when the iterator was cast to  disposable  and disposed  the subsequent  hasnext  would block indefinitely. that interface is not intended to be part of the public api and  iterator  in general does not support any form of official cancellation (unlike stream). this pr makes sure that if that dispose is called  it unblocks the iterator.,IO,Test,Util
6628,3.x: better leak detection via gc/sleep loop,the  publishnoleak  and  replaynoleak  tests tend to fail because the gc/sleep time is not enough sometimes to cleanup memory. this pr adds a main test helper that loops at most a number of times and quits when the gc has apparently done its job.,Util,IO,i18n,Test
6629,2.x: fix refcount() not resetting when cross-canceled,this pr fixes the issue with  refcount  not resetting the connection when the termination triggers cross-cancellation over it.,Test,Util,IO,i18n
6632,3.x: upgrade gradle & dependency versions,this pr upgrades to:,Interpreter,Util,IO
6635,change  duplicates  window to recall size/position,the  possible duplicate entries  window now remembers its size and position throughout a session (6582]( this was done by adding a dialogwindowstate class to the gui utils. this class stores the size and position of the dialog window. the statemanager class was modified to store this object. it is retrieved whenever a new duplicateresolverdialog object is created to get the previous size and position and is updated whenever the user proceeds through the dialog options. the dialogwindowstate class can be re-used if this feature is needed for other dialog windows.,Util,i18n,Test,IO
6637,fixes issue where unix crashes when inotify is full,previously  the program was crashing for unix users when inotify had reached its max file limit. since the only way to fix this seems to be to close applications or to edit privileged system files  the proposed solution is to notify the user of the issue and give them the option of continuing usage of the application. 6073,IO,Util,Test
6638,3.x: rename zipiterable  remove zip(o(o))  adjust concatmapx arg order,- rename  zipiterable  to  zip,Test,IO,i18n,Util
6639,3.x: cleanup addthrowable   2.x  and null-value error messages,this pr renames the internal  addthrowable  to  tryaddthrowable  and introduces the  tryaddthrowableorreport  to perform the common reporting to the global error handler. usage places have been re-evaluated and fixed if necessary.,i18n,IO,Util,Test
6640,3.x: rename combinelatest methods that take an array to combinelatestarray,renames the methods as suggested,i18n,Test,Util,IO
6648,3.x: fix takelast(time) last events time window calculation.,the logic inside the  observable.takelast(time)  was not using a fixed timestamp to compare against but one that could change between calls  resulting in items wrongly skipped from the accumulated buffer. the pr makes this timestamp limit fixed outside the drain loop.,IO,Test,Util
6650,3.x: constrain upstream requests from take  remove limit operator,as per discussion in #6569  this pr constrains upstream requests from the  take  operator and removes the  limit  operator.,i18n,Test,Util,IO
6652,3.x: fix size+time bound window not creating windows properly,there was a logic error in the size+time bound  window  operator for when to close a window if timers are not restarted when the size-bound is hit.,Util,IO,Test
6653,2.x: fix takelast(time) last events time window calculation.,the logic inside the  observable.takelast(time)  was not using a fixed timestamp to compare against but one that could change between calls  resulting in items wrongly skipped from the accumulated buffer. the pr makes this timestamp limit fixed outside the drain loop.,Util,IO,Test
6657,2.x: fix size+time bound window not creating windows properly,there was a logic error in the size+time bound  window  operator for when to close a window if timers are not restarted when the size-bound is hit.,IO,Util,Test
6662,3.x: multiple empty line detection to ignore whitespace,update the empty newline detection to ignore whitespace in otherwise empty subsequent lines.,Util,IO,Test
6664,add collection of comp sci bibliographies fetcher,6638,Test,Util,IO
6668,3.x: add missing marble diagams to single,add (hopefully) all remaining missing marble diagrams to  single .,IO,Util
6674,3.x: fix window(time) possible interrupts while terminating,fix the case in  window(time)  variants where the timer thread is busy with window emission and the upstream terminates on some other thread  the window emission is interrupted.,Util,IO
6676,3.x: fix concurrent clear() calls when fused chains are canceled,when a fuseable source backed by an spsclinkedarrayqueue is cancelled and cleared concurrently (i.e.  one thread clears while the other cancels the chain)  the  clear()  method could run concurrently and either crash with npe or end up in an infinite loop due to corrupted queue state.,IO,Util,Test
6677,2.x: fix concurrent clear() calls when fused chains are canceled,## backport of #6676,IO,Test,Util
6681,backport marble diagrams for single from 3.x,this pr is to backport the marble images of single class from 3.x. the method  onerrorresumewith  does not exist in 2.x and hence i have left that out.,Util,IO
6682,rework search bar,![picturemessage_3ata4qts chg](https://user-images.ent.com/50491877/87246991-42c7b200-c451-11ea-9a4d-2f5e11be92e8.png),Test,IO,Util
6684,2.x: fix window(time) possible interrupts while terminating,fix the case in  window(time)  variants where the timer thread is busy with window emission and the upstream terminates on some other thread  the window emission is interrupted.,IO,Test,Util
6700,3.x: update javadoc for observeon to mention its eagerness,update javadoc to reflect the eagerness property of  observeon  in  flowable  and  observable  classes.,IO,Util
6708,3.x: fix concurrent clear in observeon while output-fused,there was another cancel-clear race leading to npe or infinite loop inside both  observeon  implementations.,IO,Util,Test
6709,3.x: cleanup of some javadoc parts,enabled some javadoc validation and found a few mistakes. as far as i can tell  there is no  testunhandlederrorisdeliveredtothreadhandler  method or similar to reference there.,Test,Util,IO
6710,2.x: fix concurrent clear in observeon while output-fused,backport of #6708,Test,IO,Util
6714,3.x: fix multicastprocessor not requesting more after limit is reached,after reaching the prefetch limit  the updated  consumed  counter was not written back so the processor stopped requesting more (consumed > limit).,Util,Test,IO
6715,2.x: fix multicastprocessor not requesting more after limit is reached,after reaching the prefetch limit  the updated  consumed  counter was not written back so the processor stopped requesting more (consumed > limit).,IO,Util,Test
6719,3.x: fix parallel() on grouped flowable not replenishing properly,fix a case when the  groupedflowable  is consumed by a  parallel()  in fusion mode causing the source to stop replenishing items from the upstream  hanging the whole sequence.,IO,Util
6720,2.x: fix parallel() on grouped flowable not replenishing properly,## backport of #6719,Test,Util,IO
6722,2.x: update javadoc for observeon to mention its eagerness,## backport of #6700,IO,Util
6723,delete link after download,6588.,Util,IO
6729,enable springerfetchertest running on ci using a dedicated key,i created another key for springer. the key is separate to our main key to avoid hitting request limits for this key. this pr enables testing springernature using our github workflows.,IO,Util
6730,3.x: add maybe marble diagrams (14 cases),related #5806,IO,Util
6732,3.x: update single.zip marble diagrams (4 cases),related #5788,IO,Util
6739,3.x: mockito fix deprecated api use after bump to 3.2.0,use the suggested  verifynointeractions  instead of  verifyzerointeractions .,IO,Util,Test
6740,fix copy pasting and delete via menu or key,add hack for osx.,IO,Test,Util
6744,3.x: add fair mode overload to schedulers.from(executor),the default  schedulers.from  implementation uses an eager approach to execute tasks on the underlying  executor  which can lead to excessive thread occupation on its own  even if operators use buffering/prefetch of 1.,IO,Util,Test,i18n
6745,3.x: make disposablecontainer public api,make the internal interface  disposablecontainer  public as it can be one safely.,IO,Util
6746,fix entry gets deleted after aux import,set changed flag on clone also for misc entry type  because otherwise it equals the default entry type and no change is triggered which results in the entry not beeing written to the database on save,Util,IO
6748,3.x: change how the cause of compositeexception is generated,this pr changes how  compositeexception.getcause  creates a cause exception on demand. in 1.x and 2.x  the code tried to link up the various inner exceptions via their  initcause   which was in on itself fishy as well as could lead to excessive memory usage.,Util,Test,IO
6750,fix order of fields in bib file,the fields are no longer serialized in alphabetic order. this was introduced in 6152.,Util,IO
6754,2.x: zip  combinelatest  and amb operators throw when supplied with observablesource implementation that doesn t subclass observable,6753,IO,Test,Util
6756,3.x: fix observable amb  combinelatest & zip arraystoreexception,when using iterable of sources  the initial array is the wrong type and causes  arraystoreexception .,IO,Test,Util,i18n
6758,3.x: fix flowable.window (size  time) cancellation and abandonment,this pr fixes the  flowable.window  operator (with size and time boundaries) so that,IO,Test,Util
6760,fix html chars formatter for percent sign,6753,Util,IO
6761,remember last choice of download files in import dialog,<!--,IO,Test,Util
6762,3.x: fix window (boundary  start/end) cancel and abandonment,this pr fixes the  window  operator (with boundary and start-end sources) so that,Util,IO,Test
6765,3.x: [java 8] upgrade to java 8  add flowable.fromx operators,this pr upgrades rxjava to use and compile with java 8.,Util,IO
6771,shared database synchronized by focuschangedevent,this pr is related to #6663 and partly #4461.,IO,i18n,Util
6773,add functionalinterface annotations.,6768,IO,Interpreter,Util
6778,3.x: javadocs package-info made nicer  update readme regarding java 8,- update  readme.md  and indicate java 8 requirement.,i18n
6779,refactor file preferences,this pr is going to refactor some parts of the code in relationship with the filepreferences. it s going to be rather big again  since filepreferences and other preferences objects are not clearly distinguishable and this will take probably some time for me to contemplate how to resort them.,IO,Network,Test,i18n,Util
6780,fix biblatex software test,fixed small issue about forgotten biblatex test.,IO,Util
6781,fix aps and sciencedirect fetcher,this pr fixes two fetchers (refs 6369):,Network,i18n,Test,Util,IO
6783,3.x: [java 8] add fromopt/stage  mapoptional  tocompletionstage to m/s/c,add the following java 8 operators to various reactive base classes:,i18n,Test,Util,IO
6785,3.x: cleanup and prettify javadocs  widen xoperator throws,this pr clears up some javadocs and widens the  throws  on the various  operator  interfaces:,IO,Util,i18n
6786,diamond operators in unit tests  observable package,hello  in this pull request i ve changed all ide marked explicit types with diamond operator. affected package is internal/operators/observable. there is one test fail in completabletest.repeatnormal   but diamond is not the cause  there is last stack entry:,Util,i18n,Test,IO
6787,diamond operators in unit tests  flowable package,hello  in this pull request i ve changed all ide marked explicit types with diamond operator. affected package is internal/operators/flowable.,Util,IO,Test,i18n
6788,fix cleanup field formatters not working when enabled,6787,Test,IO,i18n,Util
6789,diamond operators in tests  small packages,hello  in this pull request i ve changed all ide marked explicit types with diamond operator. affected packages is in tests root.,IO,Test,Util,i18n,Network
6790,fix more fetchers,this pr fixes fetchers (refs #6369):,Test,Util,i18n,Interpreter,IO
6791,3.x: add nonnull & safevarargs annotations + validator,this pr cleans up the main classes:,Test,IO,i18n,Util
6795,fix cleanup formatters to avoid race conditions,follow up ref 6788#pullrequestreview-475866233,IO,i18n,Util,Test
6797,3.x: [java 8] add observable operators + cleanup,add the following java 8 operators to  observable :,Test,IO,i18n,Util
6798,new doi added by arxiv,this refs 6369,Util,Network,Test,i18n,IO
6799,feature/enable lucene query parsing,this pr enables the conversion of user queries  formulated in a simplified lucene syntax (see adr 0014)  into complex search queries for fetchers. refs 456.,Test,IO,Util
6800,3.x: add blockingforeach(consumer  int) overload,the underlying  blockingiterable  already supported the custom prefetch overload and this pr exposes it as a new  blockingforeach  overload.,Util,IO
6801,3.x: add missing throwiffatal calls,- add missing  exceptions.throwiffatal  calls in  catch (throwable   blocks.,Util,Test,IO
6804,3.x: fix diamonds  spelling  unnecessary code,- use diamond where possible,IO,Interpreter,Util,i18n
6805,feature/add ui for query parsing,this pr is a follow-up of 6799 ]( and adds the related changes to the ui code.,Test,Util,IO
6806,3.x: prettify flowable javadoc + validator,this pr unifies the javadoc style of the  flowable  type:,Util,Test,IO
6809,6705   added icon for multiple identifiers,added icon for multiple identifiers,IO,Test,Util
6812,3.x: improve javadocs of single,- use  {@link} s and  {@code}  tags,Util,Test,IO
6813,3.x: fix junit 4.13 deprecated api use,junit 4.13 deprecated the use of  expectedexception  in favor of  assertthrows .,IO,Test,Util
6814,3.x: remove fromfuture(  scheduler) overloads,those overloads were only applying  subscribeon  with no other benefits.,Util,IO,Test,i18n
6815,3.x: improve javadocs of maybe,improve the javadocs by:,Util,IO
6817,deleted functions.naturalorder,removes a duplication of the natural order comparator.,IO,Util
6826,3.x: fix flowable.flatmap not canceling the inner sources on outer error,the outer  onerror  did not cancel the inner sources. the  observable  variant works correctly but both received an unit test to verify the behavior.,Test,IO,Util
6827,2.x: fix flowable.flatmap not canceling the inner sources on outer error,the outer  onerror  did not cancel the inner sources. the  observable  variant works correctly but both received an unit test to verify the behavior.,IO,Util,Test
6831,3.x: improve javadocs of observable and fix similar issues elsewhere,improve the javadoc of  observable :,i18n,Util,Test,IO
6835,fix file update monitor shutdown,follow up from #6118,IO,Test,Util
6837,3.x: remove a pointless observable.concatmapiterable overload,remove the  concatmapiterable(function  int)  overload as there is no buffering involved with the operator.,IO,Test,Util
6838,3.x: rename to combinelatestarraydelayerror,the operator missed a rename with 2.x to match the  combinelatestarray  variant.,i18n,Test,IO,Util
6839,3.x: enable javac parameter saving in class files,related #6832,Test
6840,3.x: add nullability annotations to type arguments,annotate type argument use with  @nonnull .,Util,Interpreter,Test,IO,i18n
6843,3.x: improve wording of operators,- reword sentences with  modifies  and  instructs .,Test,Util,IO
6844,3.x: remove maybe.onexceptionresumenext,it was always very peculiar to let only checked exceptions resumed.,Util,Test,IO
6847,feature/use unkown fields as default fields,this pr adds the unknown fielded terms as default phrases.,Test,IO,Util
6853,sort-in root classes into packages (architecture),follw-up to 6825.,IO,Util,Test
6856,rename single.equals to single.sequenceequal,renamed single.equals to single.sequenceequal and renamed argument names for consistent naming.,IO,Util
6857,3.x: [wiki] improve operator-matrix with links and notes,update the  operatormatrixgenerator  to add anchors and links to notes about why operators are not present in one or another class.,IO,i18n,Util
6858,fix icon issue,6834,Util,IO
6860,3.x: add last missing throws tag to javadocs,added the last missing  @throws  tag to methods and one missing  @nonnull  annotation.,Test,Util,IO
6862,3.x: add maybe/single/completable blockingsubscribe,add the missing  blockingsubscribe  methods to  maybe    single  and  completable  for symmetry with  flowable  and  observable .,Util,IO
6864,adding delayerror to maybe.delay,6863,IO,Util,Test,i18n
6866,3.x: fix many marbles in maybe,add many missing and replace incorrect marble diagrams in  maybe .,Util,IO
6867,3.x: add onerrorcomplete to flowable  observable and single,add the  onerrorcomplete()  and  onerrorcomplete(predicate)  operators to the remaining base classes.,Util,IO
6868,3.x: add completable.onerrorresumewith,this pr adds the missing  completable.onerrorresumewith  present in the rest of the base classes.,IO,Test,Util
6869,3.x: add single/completable retryuntil + marbles,retryuntil  was missing from  single  and  completable .,IO,Util,Test
6870,3.x: add maybe/single/completable switchonnext & switchonnextdelayerror,add the missing  switchonnext  and  switchonnextdelayerror  operators  which are essentially delegated to the respective  flowable::switchmapx  operators with identity mapping.,IO,Util
6871,fixed  copy key and link,copy key and link  from right-click menu creates a string that is not a url. it includes the url  but it also includes the key.,IO,Test,Util
6873,3.x: add many fromx operators + marbles,add a cross section of  from  operators (![present]( [ fromaction ]( ..  fromsingle ) :,Util,i18n,IO,Test
6874,3.x: add timeinterval & timestamp to m/s,add  timeinterval  and  timestamp  operators  (4 overloads each). to  maybe  and  single .,Util,IO
6875,complete rebranding of  bibtexkey  as  citationkey,<!--,IO,Util
6876,3.x: add single.oftype,add  oftype  to  single  already available to the other non-empty base types.,Test,i18n,Util,IO,Network
6877,3.x: add doonlifecycle to maybe  single & completable,add the  doonlifecycle  operator to the remaining classes.,IO,Test,Util
6879,fix pasting in codearea under mac,codearea does not implement textinputcontrol,Util,IO,i18n,Test
6881,3.x: add various concatxdelayerror operators,add the following concat kind of operators:,Test,i18n,Util,IO
6882,3.x: add single.mergearray & mergearraydelayerror,single  was missing the  mergearray  and  mergearraydelayerror  operators already present in the other classes.,Util,IO
6884,3.x: add completable.sequenceequal,the operator was available in all other classes.,Util,Test,IO
6885,3.x: add missing startwith overloads,add missing ( ![add]( )  startwith  overloads,Util,IO
6886,3.x: add completable.onerrorreturn[item],the operators were already available elsewhere.,Util,Test,IO
6887,3.x: add safesubscribe to maybe  single & completable,add the final missing method   safesubscribe  to  maybe    single  &  completable .,Util,IO,Test,i18n
6888,3.x: use more appropriate operators when delegating to flowable ops,many  single  and  maybe  operators delegate to  flowable  operators. this pr makes sure they use the most appropriate ones since there are  single - and  maybe -specific operators on  flowable  for some time now.,Util,IO,Test
6890,3.x: fix marble dimensions  add program that checks them,6872,UI,Network,Interpreter,IO,Util
6891,3.x: swap maybe.flatmapsingle and maybe.flatmapsingleelement,6878,IO,Util,Test
6893,fixes bugs in the  regex  cite key pattern modifier,<!--,IO,Test,Util
6894,2.x: fix groupby not requesting more if a group is cancelled with buffered items,if a group is cancelled with unconsumed item in its buffer  the operator stopped requesting more thus hanging other groups.,IO,Test,Util
6895,3.x: fix groupby not requesting more if a group is cancelled w/ items,if a group is cancelled with unconsumed item in its buffer  the operator stopped requesting more thus hanging other groups. in 3.x the operator was somewhat strenghtened for this case except one case when the cancellation happens outside the drain loop.,IO,Test,Util
6897,doi matching in duplicate check,6707,Util,IO
6899,3.x: add concateagerdelayerror across,flowable    observable    maybe  and  single  now have a  concateagerdelayerror   delegating to the appropriate  concatmapeagerdelayerror  operator.,Util,IO
6901,3.x: add missing coverage  fix unused/inconsistent ops,cleanup and coverage improvements.,i18n,Util,Test,IO
6903,3.x: add  error handling  section to observable.blockingfirst javadocs,add missing javadocs section.,IO,Util
6917,3.x: fix flowable.switchmap not canceling properly during onnext-cancel races,there was an unnecessary  active.lazyset(null)  which prevented cancellation of the inner source under some circumstances.,Test,IO,Util
6921,3.x: fix replay() not resetting when the connection is disposed,disposing a  replay() -based connectable should reset the operator to its fresh state. this was supposed to happen but the relevant code changes were not enabled. the pr fixes this for both  flowable  and  observable -based implementations.,Test,i18n,IO,Util
6934,add see annotation for range operators,- added @see annotation for range operators  reorder annotation to common code style.,IO,Util
6943,docs: quick javadoc fixes.,added @code tag wherever < or > were used  also removed a few,Util,Test,IO
6944,update image urls to non-transparent version.,updated image urls to use non-transparent ones as per #6883,IO,Util
6946,3.x: fix observable.flatmap with maxconcurrency hangs,queued up scalar values were not counted as completed  thus the subsequent sources where not subscribed to to fill up the allowed concurrency level.,IO,Util,Test
6953,3.x: workaround flakyness of multithreadedwithnpe* tests,these tests tend to fail more often with jdk 9 target 9 builds (but all the others are fine).,Test,IO,Util
6956,3.x: fix scheduled tasks  fatal exception behavior,fatal exceptions may be lost with scheduled direct & scheduled periodic direct tasks because  futuretask  simply treats them as exceptional outcomes. for regular tasks  [scheduledrunnable]( already avoids rethrowing fatal errors as it would go nowhere.,Test,i18n,IO,Util
6960,corrected shortcut,6867,Test,Util,IO
6969,mark medra test as fetcher test,i noticed that the unit tests were failing and that medra was not categorized as fetcher,Util,IO,Test,i18n
6975,fix inspire fetcher and short doi fetcher tests,arxiv test is failing with the search phrase  because both queries return the same result.,Test,IO,Util
6979,3.x: fix flowable.groupby cancellation/cleanup/eviction race hangs,this pr fixes three additional race conditions from https://github.com/reactivex/rxjava/issues/6974#issuecomment-626319431,Util,Test,IO
6983,3.x: disable fusion on the groups of flowable.groupby,this pr disables the async fusion capability of the groups emitted by  flowable.groupby  as it appears to lead to hangs due to cancellation and/or lack of requests in certain async scenarios.,Util,Test,IO
6988,3.x: fix flowable.groupby eviction-completion-replenishment problems,this pr fixes the two cases from https://github.com/reactivex/rxjava/issues/6982#issuecomment-630290658,Util,IO,Test
6990,fix doi fetcher and add documentation on fetcher trust levels,~~follow-up to~~ this reverts  ~~in order to add documentation on our decisions taken in 2018.~~. that pr added a workaround to thing introduced in https://github.com/jabref/jabref/commit/15c7981b23d46b06da9b7b468d42fc179e01d3ec.,Test,IO,i18n,Util
6992,jstor fetcher,added fetcher for jstor.org,Util,IO
6994,3.x: fix recent groupby tests sometimes failing with mbe,these tests can fail with  missingbackpressureexception  because groups may not complete fast enough so  flatmap  can request more groups in time. this doesn t happen consistently but could fail the test on ci. the workaround is to allow any termination  not just normal completion. the reasoning is that the aim of the tests were to verify the operator doesn t hang.,IO,Util,Test
6996,add reviewdog as checkstyle,motivation: many new contributors seem to ignore or don t see the failing github checks,IO,Util,i18n,Test
7006,updating suppressundeliverablerule to have a named inner class instead of an anonymous inner class,based on the discussion in https://github.com/reactivex/rxjava/issues/7005,Test,IO
7028,3.x: allow mbe in flowablegroupbytest.issue6974runpart2noevict,issue #7001,Test,Util,IO
7033,{flowable observable}.collect(collector) contravariant on t,added  ? super  twice. would 7032.,Util,IO
7040,fix shared database tests,fix fieldchangeevent delta computation,Util,Test,IO
7049,3.x: fix observable.window (size  skip  overlap) dispose behavior,disposing the main output of the  observable.window  operator did not properly propagate the dispose call under certain circumstances  such as no current active window or the window(s) were abandoned immediately.,Test,IO,Util
7051,3.x: update marbles of onerrorresume(next|with) + cleanup,-  onerrorresumenext  marble now indicates the error and function-callback nature:,Test,IO,Util
7071,3.x: fromrunnable/fromaction javadoc improvements,- fix the wording across the base types.,Util,IO
7080,change a method name to make consistent with pr#6801,thank you for contributing to rxjava. before pressing the  create pull request  button  please consider the following points:,Util,IO
7083,3.x: fix toflowable(error) not cancelling on mbe,there was a missing  upstream.cancel()  for when the overflow happens.,Test,Util,IO
7084,2.x: fix toflowable(error) not cancelling upon mbe,there was a missing upstream.cancel() for when the overflow happens.,Util,IO,Test
7089,3.x: fix flowable.concatmap backpressure w/ scalars,in  concatmap   there is a shortcut for when the mapped  flowable  turns out to be a scalar value and thus the full subscription process can be skipped. this used a so-called weak subscription that expected non-concurrent requesting to emits its single value.,IO,Test,i18n,Util
7091,2.x: fix flowable.concatmap backpressure w/ scalars,in  concatmap   there is a shortcut for when the mapped  flowable  turns out to be a scalar value and thus the full subscription process can be skipped. this used a so-called weak subscription that expected non-concurrent requesting to emits its single value.,IO,Util,Test
7093,refine default preview,this applies the quick fix proposed at  to implement the full functionality a longer thought on previews is requried.,IO,Util
7110,3.x: flowable scan/scanwith backpressure documentation update,documented flowable initial value scan variants upstream consumption pattern as it is different from the variant with no initial value.,Util,IO
7113,3.x: fix source locator code to support github actions folder layout,github action  actions/checkout@v2  downloads the files to a directory that doesn t appear to include the   rxjava  name anymore and makes the source code tests unable to read the files.,IO,Network,Util,Test,i18n
7121,extraction of globals.prefs.put and .get,this pr aims to extract the calls to globals.prefs.put and .get out of the jabref codebase in preparation for some architectural healing,Util,IO
7124,enable automated cross library search using a cross library query lan…,this pr adds the capabilities to perform certain aspects of literature studies.,Util,IO
7126,change format for study definition to yaml,this pr replaces the previous use of a  .bib  file for the study definition file with a  .yml  (yaml) file.,Util,IO,Test
7127,3.x: improve javadocs of connectable sources,improve the styling and wording of  connectableobservable  and  connectableflowable .,Util,Test,IO
7129,3.x: add onbackpressurereduce operator,added one more overloaded version of onbackpressurereduce operator,IO,Util
7144,3.x: update marbles of amb()  ambarray() and ambwith(),update the marble diagrams in  flowable  and  observable   indicating cancellation of the non-winners.,IO,Util
7145,add idbasedsearchfetcher to jstor,as discussed in 6627#issuecomment-733514445,Util,IO
7150,update to libre office 7.0.3,remove custom lib merging,Util,IO
7151,3.x: onreducebackpressure internals cleanup,- simplify empty/non-empty cases.,Test,Util,IO
7160,io scheduler  scheduled worker release.,ioscheduler  releases the workers back to the pool to be reused optimistically to reduce the number of threads being created. this could lead to deadlocks in some situations like this one:,IO,Test,Util
7162,io scheduler  scheduled worker release (v2.x),this is the same change as  but targeting the 2.x branch,Test,IO,Util
7163,3.x: testscheduler option to use onschedule hook,the  testscheduler  is a bit inconsistent regarding the use of  rxjavaplugins.onschedule . it extends  scheduler  so the  scheduledirect  methods do invoke the hook whereas the worker s  schedule  methods don t.,Util,Test,IO
7164,updating documentation for scheduleactual method,remove unnecessary sentence from  newthreadworker.scheduleactual .,Util,IO
7165,3.x: add fusion support to concatmap{maybe|single|completable},this pr adds front fusion support to,Test,Util,Network,i18n,IO
7168,3.x: improve javadocs style of schedulers,add the proper links and code blocks to improve style to  io.reactivex.rxjava3.schedulers.schedulers .,IO,Util,Test
7169,3.x: introduce property rx3.scheduler.use-nanotime,7154,Test,Util,i18n,IO
7170,fixed setting of tab title in wrong thread,not on fx thread with shared database,Util,IO,i18n,Test
7173,updates to colored group indicator for cited entries,<!--,i18n,IO,Util,Test
7178,fix newly added entry not synced to db,7176,IO,Util
7196,3.x: allow single.zip and maybe.zip result to be garbage collected,7195,IO,Util
7203,3.x: fix schedulers.from to honor interruptibleworker across methods,the direct scheduling methods of the  executorscheduler  created via  schedulers.from(executor  boolean)  did not fully honor the  interruptibleworker  settings.,Util,Test,IO
7205,standardize java source headers,convert license headers to block comments instead of dangling javadoc comments. use checkstyle to validate java source files have licenses attached. updated checkstyle to most recent version. updated checkstyle configuration to remove mostly commented out code and update to correct dtd.,Util,IO,Test
7206,3.x: fix wrong reference in single.flattenstreamasobservable javadoc,fix the copy-paste error of pointing to  flattenasflowable  instead of  flattenasobservable .,IO,Util
7210,updates to institution citation keys,<!--,Util,IO,Test
7212,3.x: compositeexception.printstacktrace to write directly into printstream/printwriter,i don t remember why the stacktrace it wasn t printed directly via the printstream/printwriter  no reason to aggregate the entire string output.,Util,IO
7213,fix intermittently failing unit tests,fix several unit tests that are intermittently failing on slower clients due to timeouts. all fixes,Test,Util,i18n,IO
7272,3.x: fix copy-paste error in completable javadoc,it was incorrectly referencing  singleobserver  in one of the sentences.,Util,IO
7274,3.x: javadoc: fix wording of *onsubscribe interfaces,bad wording:  an instance of a(n) x instance .,IO
