2,pull request: load default plugins dynamically,to be able to include mockito source in the android open source project  i d like to be able to build a subset of mockito which doesn t rely on cglib. this removes the compile-time dependency on the default mockmaker implementation  which naturally includes references to cglib.,Test
3,pull request: remove class mockable test from classimposterizer,to be able to include mockito source in the android open source project  we need to be able to build a subset of mockito which doesn t rely on cglib. this second part rearranges the code related to checking whether a class can be mocked. i ve moved the logic to mockutil  where it could later be moved to the mockmaker where it really belongs.  my apologies - i can t see how to get github to make a pull request just with my second change  so this seems to include both of my changes.,Test,IO,Util
5,mock serialization/deserialization across classloader/jvm,this pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  at the moment it s enabled automatically when using  withsettings().serializable() .  it still require to have mockito on the classpath of the jvm classloader where it is deserialized.,Network,Test,IO,Util
7,i have implemented 2 features requested in ticket #841.,the user can now specify an arbitrary number of file-link columns in te  entry table columns  preferences tab  to be added to the main table. the user can any file types specified in the list of external file types. the extra columns work exactly like the original file-link column.  for each file-link column whenever there are multiple files  the letter  m  is displayed at the bottom right corner of the icon.       committer: noravanq   on branch master  changes to be committed:    (use  git reset head <file>  to unstage)      modified:   src/main/java/net/sf/jabref/guiglobals.java modified:   src/main/java/net/sf/jabref/jabrefpreferences.java modified:   src/main/java/net/sf/jabref/tablecolumnstab.java modified:   src/main/java/net/sf/jabref/gui/maintableformat.java modified:   src/main/java/net/sf/jabref/gui/maintableselectionlistener.java modified:   src/main/java/net/sf/jabref/gui/preventdraggingjtableheader.java,IO,Test
10,try to fix some obvious bugs about  groups,hi all  i just upgraded to 2.10 and i found some bugs immediately. 1. in the right-click-menu there is no  move-to-group  but 2  remove from group  instead. 2. i like the new add/remove/move panel  but the scrolling is not working  which is a big problem. because i have lots of groups which cannot even fit into the full screen height after expansion. 3. no way to expand or collapse all nodes  i tried the dev version  all problems still exist. here is my fixation.  cheers   w.l.,Test,Util
14,deprecated timeout().never()  in line with timeout().atmost(),timeout().atmost() is deprecated due to issue 235:   these exact same arguments apply to never()  both verification modes are extremely likely to create assertions that immediately pass  and do not test what they re intended to test. this patch therefore deprecates never() similarly.  fairly shortly i m also planning on implementing verify(mock  during(x).)  as a counterpart to timeout which always waits the full time  as discussed in issue 347:  this should allow for the kind of assertion behaviour that timeout().never() implies.  (also some minor whitespace tidy up and spelling corrections),i18n,Test,Util
15,make (un)abbreviating journal titles also work on the journaltitle field,i ve (i) added the toggle button to the  journaltitle  field editor and (ii) made the abbreviate/unabbreviate actions change both the  journal  and  journaltitle  fields. the latter might be a bit simple-minded --  should the field to consider depend on whether biblatex mode is actually turned on?,Util,Test
21,improved behavior of equalswithdelta with regards to null handling,added check to the equalswithdelta matcher   if the actual and expected objects are the same.,IO,Test
22,extended the  unknown entry type  error message,i had problems locating which entry had this unknown entry type and hence extended the error message to also include the bibtex key.,IO,Test
24,extend biblatex: support for alias fields,- added support for aliased fields. for example  the content in the  journaltitle  field is also shown in the  journal  table. - added cleanup option to convert to the new biblatex format - modified the required/optional fields for biblatex entries to reflect the above changes (the  year  field is no longer required),Logic,i18n,Util,Test,Network,IO
29,fixed bug #1240. 1-char strings working correctly.,fixed bug #1240  about an error thrown when trying to add a string with length of one character.,Test,i18n,Util
30,deep stub style mocks can be serialized,see https://code.google.com/p/mockito/issues/detail?id=399,Test,IO
32,fixed the behavior of compareto method of the mock objects,see   fix compareto behaviour the same objects,Util,Test
37,refactoring: avoid static keyword in inner interface definition,inner interfaces are implicitly static,Network,i18n,Util,Test
38,new  then  method for bdd-style interaction testing,new feature in bddmockito for bdd then part of the test which allows mock behavior verification by using  mockito#verify(object) . for example we have classes person and bike:      java bike bike = new bike()  person person = mock(person.class)       and the following interaction      java person.ride(bike)  person.ride(bike)       current (non bdd) behavior verification would go like:      java verify(person  times(2)).ride(bike)       this feature introduces the following way of verification:      java then(person).should(times(2)).ride(bike),Util,Test
39,allow calling real implementation of jdk8 extension methods,see also the google code ticket:   enable calling real implementation on extensions method from jdk8 additionally change add validation checking whether callrealmethod is invoked on abstract methods. in fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someinteface.abstractmethod()).thancallrealmethod()  2: someinteface.abstractmethod() exception will be throwned on second line informing that there were attempt to invoke abstract method,IO,Test,Util,i18n
41,new  getargumentat  method for convenient implementation of custom answers,the problem is when i need to use answers  i quite often need to cast these arguments. i propose two methods in invocationonmock  so we can get two arguments of method typesafely  so this piece of code       java @suppresswarnings( unchecked )   doanswer(new answer() {       public object answer(invocationonmock invocation) {           object args = invocation.getarguments()            int count  = (int)args[1]           //do something       }})   .when(mock).somemethod()       will be better:      java   doanswer(new answer() {       public object answer(invocationonmock invocation) {            int count  = invocation.getargumentat(1  int.class)           //do something       }})   .when(mock).somemethod(),Test,IO,i18n
44,add entry under the  view  menu to hide the toolbar,in addition  i would suggest to hide the toolbar by default.,Test,Util
47,added the ability to reorder the panels in the side pane.,side pane panels now feature an up arrow button and a down arrow button immediately to the left of the close button. these buttons allow panes to be swapped with the pane above or below them  respectively.  whenever the panes are reordered  the current position of each visible pane is recorded in the application preferences  so the user s custom ordering can be preserved when jabref is next run.,i18n
56,fix double-click opening of files on mac,moving the registration of apple events ensures that double-clicking on a file to open it works even if jabref is not yet running.,Util,Test
63,improve nointeractionswanted report to include the name of the mock,this is useful feedback when using multiple mocks in verifynomoreinteractions().,Util,Test,i18n
65,replace usages of preferences by string through constants,i checked all the usage of strings for getting or setting preferences and replaced them by a the usage of a constant  if one existed. this gives some more static checking and consistency throughout the project. changes are limited to  src/main/java .   again this changes nothing functionwise  but only improves code quality.,Util,i18n,IO,Test
68,added custom failure message to mockito.verify. issue 482,issue 482: passing custom failure message to mockito.verify,Test,Util
87,fixed delegatingmethod.equals() so that it s easier to extend mockito by custom verification modes,currently if you create a delegatingmethod and compare it to itself using .equals() it will show as not equal because the .equals() method expects a java.lang.reflect.method (without explicitly stating such).  this has a knock on effect on the evaluation of invocationimpl.equals() which at runtime may be using a delegatingmethod in its .equals().  i have changed .equals() and .hashcode() in delegatingmethod to a more appropriate implementation  which can handle both the case where the input object is a delegatingmethod and where it is a java.lang.reflect.method.  i ran up against this issue when creating a custom verificationmode which used invocationimpl.equals() to check that the appropriate invocation was made.  my comparison failed even though i was comparing two references to the same invocationimpl instance.,Test,i18n
103,fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks,see issue #99   what it does is propagating the serializing mode of the parent  upon each mock creation when deep stubbing.  before each mock created where made serializable by default. which is not an issue when the types have a default no arg constructor  but may become problematic when the type didn t have one  mockito would report an error explaining that it couldn t mock this type.,IO,Test
113,improved exception handling of additionalanswers#delegatesto,when using the additionalanswers#delegatesto method  exceptions thrown by the delegate are wrapped in invocationtargetexception due to invocation via method. instead  the original exception from the delegate should be propagated to the caller.,i18n,IO,Test
144,enum answers implements now answer<object>,the enum type answers implements now the answer interface. this allows us to use the enum values in  mockito.mock(class answer) . this is handy when you have to test legacy code with powermockito and want to use both  @mock  and  mockito.mock(..) .      java @mock(answers=returns_deep_stubs)  classa a  classb b   public void setup(){   b= mock(classb mockito.returns_deep_stubs)   //<< static import is not possible here  but with this pull request we can use returns_deep_stubs we used in @mock. },i18n,Util,Test
176,make propertyandsetterinjection field sorting consistent,#155 is caused by calling  collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  for example  with fields of type  [iterable  integer  number]   it gives  iterable == integer  and  iterable == number   but also an inconsistent  integer < number .  i m not sure it s possible to sort consistently with a stateless  comparator   so this change switches to a  sortsupertypeslast  method that first sorts by name and then shuffles any subclasses to after their superclasses. it s slower  but should be deterministic. the existing tests are preserved by leaving behind a dummy  comparator  that uses the new sort method. new tests make sure that the sorted ordering doesn t depend on the original order.  155.,Util,Test,i18n
201,200 : argumentcaptor.forclass is more friendly with generic types,we modify the signature of  argumentcaptor.fromclass(class<t>)  to better express the type relationship between the argument and the return type.  there is no change to the behavior of the method.  this change is to allow expressions such as:      java argumentcaptor<consumer<string>> captor = argumentcaptor.fromclass(consumer.class)      to type check  which is desirable as a convenience to users of  argumentcaptor .  we also add two tests to document this extension to the api  both of which fail to compile without this change to  argumentcaptor.fromclass .  these tests are unusual in that they make no assertions  this is justified because the change which they test is a change to the formal  or compile-time  properties of  argumentcaptor   not its behavior.,Util,Test
202,better protection against incompatible returned value of default answer  and get safely mock name,fixes issue #187  the value returned by the default answer is now validated to make sure there won t be a  classcastexception  if the default value is incompatible with return type.  reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. this avoid a  classcastexception  when reporting a verification issue.,Test,IO,i18n,Util
207,197 : blocks ability to use negative value for timeout() and after() method.,it should  #197.   if user uses mockito.after() or mockito.timeout() with negative values  then friendly reminder exception with details will be thrown.,Test
211,argumentcaptor no longer working for varargs,188 . these commits should  with capturing varargs.,IO,Test,Util,i18n
215,adding an advanced data structure for title/word in the casechangers …,…implementation.  @koppor this is what i ment. what do you think?,i18n,Util,Test
221,212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions,follow-up to #212,Test,Util
222,203 : introduce bdd inorder verification,follow-up to #203.,Util,Test
223,206]  related to windows path,problem was caused by file separator. replacing hardcoded char  /  by file.seperatorchar solves issue. in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case  /  is only acceptable separator.,Util,Network,i18n,IO,Test,Logic
229,trying to extend the scheduler interface according to the comments at,i ve tried to extend the  scheduler  interface according to the discussion at issue #19. if i understand this correctly  most of it can be done via the  abstractscheduler .  i hope this helps. please have a look.,Test,Util,i18n
234,cannot instantiate type with public method of a public parent class having a non public types in signature,this should 233  (awaiting delivery of bytebuddy fix   thanks @raphw,Test
235,schedulers interface (merging and adding to pull request 229),merging and adding to pull request  from @jmhofer which adds functionality discussed in the scheduler issue   work done in  added the following methods to  scheduler : -  subscription schedule(t state  func2<scheduler  t  subscription> action  long delaytime  timeunit unit)  -  subscription schedule(t state  func2<scheduler  t  subscription> action)   these are in fact the primary methods from rxnet ( and the others are just helper overloads.  it seems beneficial to use these 2 methods for actual implementation logic while all other methods are just decorating and forwarding from abstractscheduler to these methods.  i propose these changes on top of pull request  to achieve this.  i also added unit tests that @mairbek created (  all unit tests are passing … but we don t yet have enough unit test coverage so i won t be surprised if bugs are found.,Util,IO,i18n,Network,Test
238,moves responsibility of istypemockable to mockmaker,mock makers may have different capabilities. historically cglib and mockito were deeply related  later mockmaker was created to allow android developers to use dexmaker to create mocks. but logic that decided if a type could be mocked still reside in the mockito base  while it should be the responsibility of the mockmaker.  also for example one could create his own mockmaker that forbid to mock type if some annotation is present.,Util,Test
239,remove edit preamble and edit strings from toolbar. it is still avail…,…able under the bibtex menu.,Test
240,fixes coverage reports,test coverage reports have been broken with gradle without satisfying explanation  for quite some time. this pull request hopes to fix things,Network,Test,Util,IO,i18n,Logic
252,251] migrate fest assert code to assertj,251,i18n,Test,Util,interpreter,Network,Logic,IO
261,260: typo in documentation,very minor typo in documentation:   there s an extra  at  (@) in the documentation.  before it reads:  annotating the junit test class with a @runwith(@mockitojunitrunner.class)   after it reads:  annotating the junit test class with a @runwith(mockitojunitrunner.class)   (https://cloud.ent.com/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749.png),Test,Util
270,issue #268: added support for generic arrays as return types.,solves  by explicitly checking for return types that represent a generic array and by resolving for the array s component type.,i18n,Test,Util
286,fixed a number of warnings,got rid of a number of warnings: - <> - static methods - commented empty blocks - general clean up,Test,IO,Util
287,doaj search,search for directory of open access journals. quite functional  but the remaining things should (probably) be done -  ~~help page~~ -  decide on where the bibjsonconverter class should be positioned (input?) -  more fields? ~~issn?~~ -  ~~better/more error checking~~ -  ~~handle search results with more than 100 entries properly~~ -  ~~fill empty methods in doajfetcher~~ -  ~~update status bar~~ -  add test for bibjsonconverter -  ~~enable stopping search~~  implements what is discussed in #208,Test
288,add optional answer to support mocked builders,when googling the mocking of builders  a lot of people said it was not possible with mockito to support them in a clean way.  returns_deeps_stubs  does allow cascading  but can become quite fast very cumbersome. the added  returns_self  will try to return itself by looking at the method  returntype  and compare this with the class of the mock.,IO,i18n,Test,Util
293,remove validateserializable(),245:  remove serializable validation.,Test,Network,Util,IO
294,removed deprecated returnvalues and all it s occurrences,these changes should  deal with  issue #273,Util,Test,IO,i18n
301,fixed a number of false positive translation strings,cleaned up the code (basically move localization.lang to the  correct  places) for a number of files to reduce the amount of false positives when it comes to possibly obsolete keys. this also resulted in some other related clean-ups  such as removing translation requests for database names (try to translate  inspire ).,Test,Util,i18n
306,eliminate direct dependency on objenesisinstantiator,updated instantiatorprovider to be a plug-in  to eliminate direct dependency on objenesisinstantiator. this allows mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on ios.,Network,Test,Util,i18n,IO
309,remove translation string  an error occurred while fetching from inspire source (%0):,i assume that the user knows in which context he his  therefore we can reuse the generic exception message to have less strings opened for translation.,Test,Util
314,add shouldhavenomoreinteractions() to bddmockito,replicates  verifynomoreinteractions  on the bdd api.  ---  **edit by mockito team** : 311,Util,Test
317,modify stacktracefilter to not exclude  good  stack trace elements,currently stacktracefilter filters in this way (example from javadoc): [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  g+]  this patch makes it work: [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  d+  e+  g+]  not sure why it was implemented first time in this strange manner.  ---  **edit by mockito team** : 316,IO,i18n,Util,Test
344,show correct location of unwanted interaction with mock when using mockitojunitrule,this pull request by @indy5858 and me changes the stacktrace filtering so that when using  mockitojunitrule  the correct location of an unwanted interaction with a mock.  before this commit the location on an unwanted interaction was not reported properly. instead of      no interactions wanted here: -> at <package>.<testclass>.<testmethod>(<testclass.java>:<linenumber>)      the assertion message said:      no interactions wanted here: -> at org.junit.runners.parentrunner.runleaf(parentrunner.java:325)      the issue with the current behaviour in master is that all stacktrace elements above an element containing  org.mockito.  are removed. as  org.mockito.internal.junit.junitrule  fullfills this condition and comes below the  payload  (i.e. test code and code under test) stack elements the interesting part of the stack is filtered. in case the pull request #317 (which we only found after hacking on this) is merged this pull becomes obsolete except for the two tests that are added: - checking that the  payload  stack elements aren t removed from the stack and - a test for removal of the byte buddy stack elements.,Test
349,issue #345 : removes previously verified invocations when capturing argument is combined with after and atmost verifiers,solves #345 by removing already verified invocations before redundant capture of their arguments in atmost class.,Util,Test
373,extracted logic out of filehistory,separated filehistory into filehistorymenu which contains the menu functions and filehistory which contains the logic for the file history.,IO,Util,Test,i18n
376,fix typo in example in javadoc.,this is a trivial javadoc-only change  just fixing a typo.,i18n,Test
381,change default preferences: remote server is started,i think  the new default makes sense as jabref sometimes opens twice which is a bit annoying for me.  before resetting the preference every now and then  i had the remote server activated for a few months and it worked fine.,Test
382,correct package declaration of verificationwithdescriptiontest,allows project to compile without errors in eclipse  check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_,Test,Util
386,remove deprecated code,fixes for #374 - more left though.,Test,Util
389,lazily verify without calling collector.verify(),as originally requested in #287: lazily verify all  mockito.verify()  calls inside junit test cases.,Util,Test
419,bddmockito: rename willnothing to willdonothing,.. and keep the original signature as deprecated,Test
424,inorder timeouts,*fixes issue    *updated code provided by  in pr #20  closes #20,Test,Util
427,refactored class reporter to a static utillity,426 for class reporter   this pr changes the way errors are created and thrown. all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly. this improves the readability and eliminates the use of hacks to satisfiy the compiler.  here is a sample:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             reporter().noargumentvaluewascaptured()              return null          } else {             return arguments.getlast()          } }      the above code snipped can be rewritten to this:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             throw noargumentvaluewascaptured()          }          return arguments.getlast()  },IO,Util,Test,i18n
429,fix similar bug as #420 for the database properties dialog,a similar bug as #420 happened when the encoding was changed in the database properties dialog. this is now fixed in this pr.   sorry for introducing these bugs in the first place.,IO,Util,i18n,Test
431,426 dropped class handyreturnvalues,#426  while refactoring the class handyreturnvalues  towards a static utility class i notices that it is not required at all. therefore i decided to remove the type  handyreturnvalues .,Util,Test,IO
434,very tiny typo.,missing word in error message.,Util,Test
436,clean up issues reported by intellij,some general issues reported by intellij. mostly concerning modifiers and unused imports.,Test,Util,Network,Logic,IO,i18n
441,cleanups  warning removals  move and test.,some cleanups and warning removals. should get rid of six high impact coverity issues (i hope).,Test,Util
442,enable some ignored tests of bridgemethodshitagaintest and detectingf…,…inalmethodstest  this worked locally  so let s see if this also works on the ci server.  304,Test,IO
444,add parameter elementtype to @mock,todo: add a regression test to also show how this functionality can be used. cc @smoyer64  438,i18n,IO,Test
446,make tests which test for timeouts with thread#sleep more lenient.,i took a look at the recently builds on travis ci and noticed a lot of failed builds. these failures where mostly unrelated to the actual changes  but caused by these strict timeout tests.  this pull request will not completely fix these random failures  but it should reduce their occurrences.   the ideal solution would be to completely remove usage of  thread#sleep  from the test  but i have no idea how to do this.,Util,Test
451,refactored timeout and after concurrent test,refactored concurrent test in order to 433. the implementation now uses  an  executor to perform async calls instead of extending  thread  and doesn t extend testbase anymore.   i also added a stopwatch which can be used for further time dependent testing. in the future i want to use this class to write more tests for after/timeout.,i18n,Util,Test
452,optimizers api,do not work on this before  has been applied. this sits on top of that pull request.,Util,Test
454,modified javadoc for argumentmatcher,to 453 - this is the amendment to the  argumentmatcher  javadoc.,Test
455,activate verificationwithtimeouttest#shouldallowtimeoutverificationin…,…order  this test work since  but was deactivated by mistake with https://github.com/mockito/mockito/pull/451,Util,Test
456,default time stamps follows iso-8601,default time stamps follows iso-8601. reason:   i am not aware of side effects at the currentdate formatter.,Util,Test
459,use default directory when adding files to an entry,see #458. - the current implementation is hard to understand. i don t get how these three existing folder preferences are used.  - also  the method itself should be simplified and return a list,i18n,IO,Util,Network,Test,Logic
464,refactor code from cleanup action to separate classes,i removed all the functionality from  cleanupaction  to separate classes. the next step would be to add tests.next pr :),Util,Test,i18n,Network
468,improved duplicate checker,i changed the core function of the duplicate checker from correlation to approximate string matching. this enables the test to work (which earlier failed as  bob  and  joyce  was deemed as close enough to indicate a duplicate). probably some of the constants used for comparison needs to be tuned. also  as the approximate string matching is based on edit distance (the number of edits required to turn one string into the other)  it might be that one may operate the complete comparison on the full string rather than the word by word style as currently is used.  i think this is good to go (in the sense that it probably performs better than the previous)  but please check it with a few different databases to make sure that the false positives or missing hits are to frequent.,Test,IO,i18n,Util
470,refactored mock cache to be non-blocking.,the previous cache used a lock to unify concurrency and weak references. instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. this avoids blocking.,IO,Test,Util,Network,i18n
475,fix that the cleanup process aborts if linked file does not exists,the cleanup process sometimes wasn t successful and reported a  null  reference. the reason was that a registered file wasn t available. this is fixed in this pr.  moreover  if an exception is thrown in actions then a more detailed error message is displayed including the stack trace.,Test,Util
476,refactored threadsafemockingprogress to a singleton,the actual implementation of [threadsafemockingprogress]( disguise that it is effectively a singleton cause the threadlocal member is static. this makes it hard to see that different instances  share the same state.  this pr - refactores  threadsafemockingprogress to provider of mockingprogress instances - uses the standard way of instantiating the initial  threadlocal value this also avoids possible race conditions,Test,Util,IO
490,atleast to static,- unified  atleastxnumberofinvocationschecker  and    atleastxnumberofinvocationsinorderchecker  into a static utility class - unified  missinginvocationchecker  and  missinginvocationinorderchecker  in   a static utility class,Test,Util
491,add close all/others/ in database tab menu,see #314,Test,i18n
492,revert  remove deprecated method,simple git revert for an accidental removal of a deprecated api since 2.0 instead of 1.x.  482.,Test,Util,i18n
495,moves reporter friendly exception factory to internal package,the  reporter  friendly exception factory class lies in  org.mockito.exceptions.reporter   however it s api is subject to change without really impacting user experience.  thus  i propose to move  org.mockito.exceptions.reporter  to  org.mockito.internal.exceptions.reporter .  i didn t provided a dummy class for two reasons : 1. i would like to schedule this for mockito 2 a major version 2. this class shouldn t be used outside framework development,Test,Util,i18n,IO
496,renames matchers to argumentmatchers to avoid name clash with hamcrest matchers class,renames  matchers  to  argumentmatchers  to avoid name clash with hamcrest  org.hamcrest.matchers  class.  this plagued usage of mockito and hamcrest together since the introduction of matchers. the work in mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the hamcrest matcher factory  mockitohamcrest . yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both api.  this change helps in that regard  as it renames the import class. not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (that is why i didn t updated tests yest  they could be upgraded in a late pr  a good timing would probably be when  matchers  is removed)   matchers  class can be removed in the next version of mockito  likely 3.0.,Test,Util
499,401 - makes the junit runner detect unused stubs,401  this is a breaking change because junit runner will now fail the test class if there is an unused stubbing.  feedback is welcome. sorry for working on it for a long time and big number of commits.,Test,Util
503,refactored nongreedynumberofinvocationsinorderchecker to a static uti…,…lity class (#426),Util,Test
507,gui testing,adds the ability to do gui tests automatically.   with just 80 lines of testing code  i was able to raise the code coverage by 15%. and i detected two nullpointerexceptions (still to be fixed) plus three places where swing classes were interacted with outside of the edt.   this change allows to model bug reports as test cases on a gui level.   what has been done -  tests fail when an uncaught exception occurs on the edt -  raise test coverageby 15% -  gui tests run on circleci -  fix language to english for all (gui) tests -  somehow only run the tests on circleci? -  maybe use headless mode @matthiasgeiger - not possible with the used api -  make it work with gradle sync in intellij so that one can edit the tests and run them from within the ide -  make tests work on travis-ci -  enable tests on circle-ci as well,i18n,Test,Util
515,bibteximporter test,added tests for bibteximporter  depends on pr #514 (missing gradle test encoding  special char  ß ),Test,Util
516,replace testbase#assertnotcontains(string sub  string string) with as…,…sertj #doesnotcontain(charsequence sequence),Test,IO,Util
519,fixed all fields set to null,as entry.setfield() does not accept a null argument anymore  the method entry.clearfield() is used instead.,Test,i18n,Network,Util,IO
523,made some timeouts in verificationafterdelaytest and verificationwith…,…timeouttest more lenient to prevent frequent build failures on travis ci,Test,Util
525,add regression test for #508,as mentioned in the bug report for #508   adds a test which would catch this issue if it happened to regress in the future.,Test
528,missing generics info on collection matchers,follow up on #510 (issue #194) following this comment   basically it tweaks the collection matchers with generic support. it should have bee in abf9851.,Test,Util
532,fix typo in javadocs,-  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_  also improve sentence structure of surrounding sentences.,Util,Test
535,refactored supertypeslastsorter to a static utility class,refactored supertypeslastsorter to a static utility class  relates to #426,i18n,Test,Util
547,medlineimportertest,new pr started because the old one was on a wrong branch.  medlineimportest + testfile added  couldn t cover two exceptions in importentries.,i18n,Test,IO,Util
549,fully register a class ancestry for genericmetadatasupport,the old implemention would take a class x and consider all of its superclasses and the interfaces implemented by x and the interfaces implemented by all of its superclasses.  the new implementation also considers the superinterfaces of the interfaces implemented by x and the superinterfaces of the interfaces implemented by its superclasses.  497,i18n,Util,Test,IO
550,fixed #538 changed error message in case initialization for mock injection fails.,fixed #538  if a filed is annotated with @injectmocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ mock injection failed on field  fieldname  cause the type  abstractcollection  is an abstract class._,Util,Test,i18n
555,junit rules report unused stubs - 384,- makes junit rules detect unused stubs - introduces mockitolistener api - see the use case in issue #384  - recreated pr #527 with squashed commits,IO,Test,Util,i18n
556,move mockito internal classes to internal package,551,Util,Test
557,replace or remove code.google.com links in documentation,most links are replaced by their github equivalent. some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods i decided to remove them.  533,Test,IO,Util
560,write all field keys in lower case,write all field keys in lower case. no more camel casing of field names. e.g.   title  is written instead of  title    howpublished  instead of  howpublished   and  doi  instead of  doi . the configuration option  use camel case for field names (e.g.   howpublished  instead of  howpublished )  is gone.  refs #116,Util,i18n,Test
568,fixed #564: cite command changes are immediately reflected in the pus…,…h-to-application actions  and not only after restart,Util,Test
569,better constrain buffer memory usage,add soft limit to exchange client buffer add soft limit to output sink buffer (sharedbuffer) size buffers in pagebuilder based on the size of previous page produced add more testing to exchange client,Util,Test
571,pretty print primitive and wrappers types in maps,check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  <issue number>  _if relevant_  in following case  user can t understand the difference between expected and actual.  code:      @test public void foo() {     foo m = mock(foo.class)      m.foo(new hashmap<string  object>(){{         put( hoge   4)      }})      verify(m).foo(new hashmap<string  object>(){{         put( hoge   4l)      }})  }  public static class foo {     void foo(map<string  object> map) {     } }      output:      argument(s) are different! wanted: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      if mockito outputs the  l  suffix for long values  user can understand the difference easily.  after this commit  the output will be following:      argument(s) are different! wanted: foo.foo({ hoge =4l})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      this will 570,Test,i18n,Util
572,refactor cleanup code,this pr (again) refactors the cleanup department. the motivation was to extract as much logic as possible from the cleanup action to make it easier to use cleanup operations also at different points (like on save).  biggest changes: - move preferences controlling the cleanup process to own data class  cleanuppreset  and the execution of the cleanup process to  cleanupworker . thus starting a cleanup process is reduced to setting up a proper preset and passing it to the worker. - move code displaying and changing a preset to a separate class. hence it is now easy to show and change a preset at a different place (like in the preferences).  - move preferences code to  jabrefpreferences . well  this is the place where it belongs. - add tests for the  cleanupworker . more detailed tests of the different cleanup processes are still missing.  todo s/breaking changes: these are all related to the fact that there is no nice interface to get/set the file field of an entry (all the code is in the gui class filelisttablemodel). - the counting of unsuccessful renames does not work anymore (i vote for removing this completely) - remove cleanuputil and incorperate the code in the respective cleanup classes. currently this code relies on gui code (filelisttablemodel) and thus cannot easily be moved to logic. - test the file related cleanups.,Util,Test,IO
578,made some timeouts in verificationafterdelaytest and verificationwith…,…timeouttest more lenient to reduce build failures on travis ci,Test,Util
587,make verificationwithtimeouttest#shouldallowmixingonlywithtimeout mor…,…e lenient to reduce build failures on travis ci  the two recent build failures where both caused by this test:  https://travis-ci.org/mockito/mockito/jobs/154506554,Util,Test
590,removed package org.mockito.internal.listeners,- deleted unused and empty interface  mockingprogresslistener  - moved  notifiedmethodinvocationreport  to  org.mockito.internal.handler,Util,IO,Test
600,suppressed compiler warning and unchecked collections cast,- suppressed compile time warning - refactor raw collection cast,Test,Util
615,497 : returns_deep_stubs may try to mock final classes,497  with deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. this could cause  returns_deep_stubs  to try mocking final classes which would result in a  classcastexception .  apparently my other pr (#549) wasn t quite enough to fully fix this problem.  ---  **edited by mockito team**,i18n,Util,Network,IO,interpreter,Test
617,moves arity interfaces of java8 helper answers to public api,the java 8 helper interfaces have been introduced in #338. however the public  additionalanswers.answer  family leak the functional interfaces.  these _parameter arity_ interfaces can be public  hence they are moved next to  answer  in the  org.mockito.stubbing  package.  i m however in favor of adding the  @incubating  annotation on those apis and related objects. thoughts ?  614,Util,Test
619,548 from now on verification happens always call in other thre…,should fix problems with #548 and #601,Test,Util
623,updated the javadocs,polishing the javadocs  starting with this small pr:  issue #596 - updated @since to 2.1.0 (instead 2.0.0) - added more docs around the verification collector,Test
626,ensured javadocs are correct,based on feedback from brice.,IO,i18n,Test
628,fixed javadoc documentation in the main class,checks out line item in #596,Test,Util
646,640 warns user to upgrade if java 8 version is to low,640 warns user to upgrade if java 8 version is to low.  also took the opportunity to log other platform details if mock class cannot be created.,IO,i18n,Network,Util,Test
647,a small fix on mockito javadocs. adding some styling and an anchor to section 12.,better now  right @timvdlippe?,Test,Util
648,partly implemented #647,added the possibility to copy the preview panel text. not exactly what is requested in #647  but probably quite useful.  note that the key binding is not working (nor is the print preview key working) so i ll open an issue for that.,Util,Test
654,renamed failuredetecter to failure detector.,also renamed misspelled issussessful() to issuccessful().  fixes: #653.,Test
673,removed duplicate test,hello again :p   i originally requested this test to be added in #525 after the underlying problem had been resolved. while browsing the code now  i discovered that it had already been added (as  this probably doesn t need to be tested twice  so i ve removed the duplicate test.,Test
683,remove url sanitizer as it is malfunctioning and unclear where needed…,also see #667.  @jabref/developers if someone knows a use case where this is needed and why we can try to reimplement it properly. but this way it really makes no sense imho.,Util,Test
693,cleanup in logic.mods and logic.msbib,additional change: added method  hasfield  to  bibentry .,Util,i18n,Test
698,new api: mockingdetails.printinvocations() for debugging mock behavior,for motivation  see issue #543,Test
704,delayedexecution uses now a more precise approach to call a mock async.,new approach to fix flickering async tests.  detail description  coming soon,Util,Test
705,fixes exception typo,this is a simple correction in an error message that can be thrown by mockito.,Test,i18n
711,remove global sorting functionality,refs #520   global file sorting options are removed. sort functionality is still available but no localized to every file and the file sorting options are stored in the file.,Test
719,verification listeners,i had the need to be notified when ever a verification happens  this pr implements this.  to do anything useful with this notification the following data is important: - the mock that we are verifying on. - the verification mode we are using. - and what method we wish to verify.  the one place where this data is collectable is in mockawareverificationmode.  what remains is to get the listeners there so we are able to notify them.  the tests i added try to follow those of the invocation listeners  however there might be more cases that are important that i m unaware of.,Test,i18n
724,added new release workflow for release automation,the purpose of this rb is to give you heads-up about the improvements to the release automation that i work on. the algorithm is implemented and will not change much. documentation  edge case unit tests and fixing runnability from gradle are pending (travis ci will fail on this pr).  the goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseworkflow {     step releaseneeded     onlyif { releaseneeded.needed }     step bintrayupload     step pullcommits     step configuregenericgituser  cleanup: restoregituser     step commitreleasenotes  rollback: resetreleasenotes     step tagnewversion  rollback: removenewtag     step bumpversion  rollback: unbumpversion     step pushchanges }      more over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -pdryrun ./gradlew pullcommits -psinglestep,IO,i18n,Security,Logic,Test,Util,Network
734,new nullable(class<t>) matcher for convenient matching of nullable arguments,after using mockito  i have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. however i have found that i miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  stream.of(<mixed values>).map(o -> mapper.map(c))   the current options are :,Util,Test
747,cleanup,more cleanups and logging.,Test
748,added method getbasepanellist() and used it,seemed like a convenient method considering how often it was used.,Test,IO,Util,i18n
754,improved documentation regarding unused stubbing detection,improved documentation regarding unused stubbing detection  609,Test,Util,i18n
759,updated the verification documentation to correctly use argthat with java8 lambdas,the example for custom argument matchers using a lambda in the main mockito documentation is missing a call to argthat.,Test,Util
771,731 implements retry rule for flaky tests,previous attempts at fixing the time related tests failed. indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_.,Test,Util
775,removed private ismockitomock(..) in mockutil,small internal refactoring.,Util,Test
776,invocationmatcher internal improvements,invocationmatcher internal improvements,Test,Util,i18n,IO
777,replaced objectbox with atomicreference,removed objectbox in favor of atomicreference.,Util,Test
778,valueprinter small improvements,* added private construtor,i18n,Util
779,removed argument from mockingprogress.stubbingcompleted(..),removed unneccessary argument from internal mockingprogress.stubbingcompleted(..),IO,Test,Util
782,introduce default answers for primitive optionals/streams,i introduced  #invokenullaryfactorymethod  to remove some of the existing code duplication  but am unhappy about the _new_ duplication  especially in the test code. what s your view on introducing deduplicating logic in test code? also  the singleton fields in  javaeightutil  could be replaced with a  concurrentmap<string  object>  (i.e. a map from fqcns to singletons). if you agree  i d love to reduce the size of this pr.,Test,i18n,Util,IO
783,simplify  returnsemptyvaluestest,as [discussed]( in the comments under #782. longer term this approach could be replaced with a proper test parametrization framework  but then at least the foundation has been laid.,Util,Test
795,deep stubs no longer cause unnecessary stubbing exception with junit runner,756,Test
803,adds a warning for ibm j9 vms if mock generation fails,related to #801  this pr simply adds a warning for ibm j9 vms if the mock maker fails.,Test,i18n,Util
805,never throw mockito exceptions from a plugin type s constructor,throwing a  mockitoexception  from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugin s creation.,Util,Test
807,new opt-in stubbing strictness implemented in junit rules,new api (for rationale  see #769  for code review history see #770):,Util,Test
811,enable annotation engine as plugin,currently  annotationengine  can be overrriden with the _deprecated_  mockitoconfiguration   in order to be more consistent with the new way  i propose to get the  annotationengine  from the  pluginregistry .,i18n,Logic,Test,IO,Network,Util
819,fixes bug were previously verified invocations could not capture argu…,since mockito 2 / #380 captured arguments is not anymore done for already verified interactions.,Util,Test
821,820 returnsargat to handle returning vararg as arrays,attempt at fixing #820,i18n,Test,IO,Util
823,only resolve instrumented method after validating that an instance is…,this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a  method  instance which requires using a  hashmap  which causes an infitite loop upon mocking the hash map type. 818.,IO,i18n,Util,Network,Test
826,introduce validable answers for early validation of stubbing,## overview,IO,Test,i18n
827,added test for auxsubgenerator,added a basic test for the auxsubgenerator.,i18n,Test
830,added ordinal formatter,motivated by http://tex.stackexchange.com/questions/292491/numerals-to-ordinals-in-jabref-jstyle-layout-file,IO,Test
831,test clean up according to discussions for rememberinglisteners,according to issue @719 we wanted to clean up the tests for rememberinglisteners.,Util,i18n,Test
839,838 : adds a matches(pattern),following discussion in #838 it is sensible to add a mockito matcher that can take a  pattern  as an argument.,Test,Util,IO
842,fixed #492: all text is copied if nothing is marked and preview of pa…,fixed #492  when nothing is selected the whole field is copied. if the field is empty  the right click copy item is disabled.  preview of text to be pasted in tool tip. now maximum 20 characters. should it be longer?,i18n,Test
843,junit rule strictness can be tweaked per test method,see the design and rationale at #840,Test
858,tab for remaining fields,see #454.,Util,Test,i18n
861,backport  release/2.x  changes to master (20161231) + fix for #860,backport  release/2.x  changes to master + the fix for #860.,Test
864,add dialog to show all preferences in their raw form plus some filtering,relates to #859. - adds a dialog which shows all preferences in a table by their type  key  value and default value.  - table can be sorted - table can be filtered to show only the preferences which deviate from their default value. this is the most helpful one - and it revealed various bugs when having a closer look. :) - count is shown as well - reachable through options -> preferences -> show preferences (button is below import/export preferences) - converts default values of null to empty string -  ? -   -  ?  -  ?,Security,i18n,Network,Test,IO,Util
865,deleted code related to the pdf and ps fields,dropping the support for ps and pdf fields (which seems dropped already as hardcoding a pdf-field in a .bib-file doesn t even show up in the entry editor) seemed to remove quite a bit of code.,Util,Test
868,refactored menus and small components,moved menu classes and small utility components to gui.menus and gui.util.component  respectively.  moved special copy command to  copy special  submenu of right-click menu (to make it shorter).,Test,Util,Logic,IO,Network,i18n
872,prepare android library for publication and bump version to 2.6.0,references first step of #848,IO,Test,Network,Util
875,fix bug in parsing custom entry types,fix unreported bug which prevented the parsing of custom entry types. also move the custom entry type parsing logic to the parser. -  ? - no  the bug was not present in 3.2. -   -  ? -  ?,Test,Network,IO
880,879: argumentmatchers javadoc grammar improvement,fixed grammar issue in  argumentmatchers :,Test,Util
885,spy annotation reports better error message if instance creation is impossible,this simple piece of code prevents the  spyannotationengine  to try create a spy instance for a some inner private class with different set of modifiers.,i18n,Test
893,add detection for android environments and give warnings if used incorrectly. corrected documentation.,the documentation gave an incorrect configuration example. also  warnings were added for using android on a non-android environment.,Test,Util
896,clarify documentation for consecutive stubbing,895,Util,Test
897,cleansempty value returns empty arrays,876 and do a bit more cleanup,i18n,Test,IO
902,fix typecache dead lock,i could trace the problem to more eager resolution of types in java u31 upon loading where concurrent mock creation with locking on the class level causes a dead lock. this can happen in other vm implementations but can be solved with a more granular lock on our type cache.,Network,i18n,Util,Test
907,more tests for oobibstyle,testing of a few more methods in oobibstyle.,Test,Util
908,simplified the creation of argumentsaredifferent-exceptions.,relates to #426,Test,i18n,Util
914,refactored removefirstline to a static utility class.,relates to #426,IO,Network,i18n,Util,Test
920,added subproject for configuration-free inline mock making.,added a preconfiguration for using the inline mock maker as a convenience artifact that can be included instead of creating the plugin file. this is very helpful when creating multi-module projects where the mock maker file has to repeated many times.,Test,Util
923,smartprintertest tostirng() calls,calling  tostirng()  on a string just returns the same instance  making,Test
926,key bindings are now working in preview panel,649. until now the toolbar within the preview panel held the key bindings which weren t active when the toolbar wasn t created. now the preview panel itself carries the key bindings. -  ? -   -  ? -  ?,Test,Util
928,fix whitespace issues throughout the code,this patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:,IO,interpreter,Test,Network,i18n,Util
933,test for encrypted pdf does not throw an exception,i don t know if this sufficies the requirements  but for me it does not throw the strange exception.,i18n,Test,Util,Network,IO
935,new feature - enable mocking using constructor arguments,## motivation and design - see #685,Util,i18n,IO,Test
942,allow spying on interfaces so that it is convenient to work with java 8 default methods,680,Util,Test
953,fix javadocs on mockitorule.java to correct an error on its usage.,fixing the javadoc to reflect the api for mockitojunitrule,Test
959,fix broken build,commit da4e42 introduced a static import from the non-existent,Util,Test
972,verifies #688: acceptance test to prevent future regression,added an acceptance test to verify #688,Test
979,refactored singlebibtexfield,based on the initial ideas in #978 the class singlebibtexfield is extracted and two enumsets are used for implementing the existing functionality.,i18n,Test,Network,Util,IO
980,replaced bitset with enumset in ooutil,clearly enumset is superior.,Util,i18n,Test
983,some random cleanups (and probably a bug-fix),- removed unused imports - some code style fixes - most likely fixed a potential npe in savedatabaseaction (chosenfile will never be null here  but f might be and is later dereferenced),Util,IO,Test,i18n,Network
985,981: update javadoc about the  mockito-inline  artifact,this pr 981.,Test,Util
986,replaced replaceall with replace,replace is faster  so if no regular expression is needed it is better to use that.  there are a few more places where it can be replaced  but i got confused when it came to escaping,Test,Util,IO
994,fix the broken link on 1357 line in mockito.java,the link  mockitojunitrunner.strictstubs  in the 40th section in javadoc [mockito]( interface is broken. i fixed it by changing,Util,Test
995,verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions,989,Test,Util
1007,fixed problem with whitespaces in file paths for tests,after i relocated my workspace  i notice some problems with white spaces in file paths. the whitespaces got encoded as %20 and failed on windows. problem was url.tofile()  paths.get(url.touri()).tofile()  is now the correct way to handle files from urls. see   -   -  ? -  ?,Util,Test
1008,used positionwindow for preambleeditor dialog size,now the preamble editor opens with the same size and position as last time. (plus that some unused preferences and guiglobals variables were removed.),Util,Test
1009,added enums,used enums instead of explicit ints for the mode of basepanel  how to render cells in maintable  and mode and result for duplicateresolverdialog.,Security,IO,Logic,Util,Test,Network,i18n
1012,do not suppress instrumentation exceptions,rather propagate them to mock maker that attempts instrumentation. addresses #1005.,Network,Util,Security,Test,i18n
1018,enabled continuous delivery via robust mockito-release-tools project,- continuous delivery pipeline 2.0 (#911) almost implemented!,Test,Util
1022,added highlighting of differences in merge entries dialogs and made s…,based on an issue i cannot find at the moment. - show all information in the merge entries fields - show the difference between fields  may not be the worlds most advanced formatting and diff algorithm but it works (it seems).  ![clipboard01]( -  ? -   -  ?,Test,Util
1023,fix broken link in mockito javadoc,commit  6a82c030756a30932406d6b807e7ca34f20631e3 (included in mockito 2.7.14) changed,Test,Util
1025,added ieee pdf fetcher,pdfs can now be automatically downloaded from ieee xplore  given that you have ip-based access (if not  nothing should happen). -  ? -   -  ? -  ?,Test
1027,cleanups,fixed a number of issues pointed out in eclipse  codacy  and coverity. -   -  ?,Test,Util,i18n
1035,fix nullpointerexception in junit test runner when test fails early in initialization,on case of   mockitoannotations.initmocks(target)   throw any exception  this.target  still null.,Test
1041,write database type in lower case into the bib file,this finally 963. a quick fix has been introduced in 661eea007e555  but that does not cover the lower case writing of the type.      @comment{jabref-meta: database_type:bibtex }      finally gets      @comment{jabref-meta: databasetype:bibtex }     -   -> this has been introduced in the development versions after the last release  thus no entry required -   -> tests have been adapted to match this new implementation,IO,Util,Test,i18n
1058,test code refactoring - updated assertj test dependency from 1.x to 2.6.0,make use of assertj 2.6.0 since java 7 is used now for building mockito and assertj 1.x is no longer under development.,Test,Util
1075,fixed a few more things + more strings,fewer strings to translate. more swedish strings translated.,Test
1076,fixed validation in returnargumentat(int) in case of type erasure on the parameter,1071,IO,i18n,Test
1079,improded readability of some bibtex test strings,fixed encoding problem in test when running gradle check follow up from #1014   @tobiasdiez,i18n,Test,Util
1090,1083: interfaces only declare tostring implicitly and should t…,…herefore override it explicitly from the inline mock maker.,i18n,Test,Security,Util,Network
1091,1088 : updating documentation of verify feature to correct a s…,updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut  pasted  and run verbatim.,Test,Util
1096,inorderimpl constructor signature,replace  list<? extends object>  in the constructor s argument list with a simpler  list<?> .,Util,Test
1118,some performance improvements,motivated by the nice blog post from @mlep  i tried to further improve the performance.  starting point  benchmark                         score      error  units benchmarks.parse                 30        ± 2.7  ops/s benchmarks.search                230.359 ±   27.399  ops/s benchmarks.write                 53.323 ±    5.528  ops/s  now with this pr benchmark                         score     error  units benchmarks.parse                 46.965 ±   0.608  ops/s benchmarks.search                304.795 ±   5.905  ops/s benchmarks.write                 85.171 ±   1.301  ops/s  for further improvements on should have a closer look at the formatter: - removelatexcommands for search (70% of time is spent there) - fieldcontentparser and latexfieldformatter for write (also >50%)  (also fixed a bug in the parse benchmarkthis is why the numbers are so different than in my previous post) ##  -   -   -   (),Test,Util
1119,made it possible to delay the return of a mock or spy.  (#1117),this is a useful aid in debugging race conditions and other synchronicity problems.,IO,Util,Test
1121,improve and develop apis required for framework integrators,### problem,Test,Util,Network,i18n,IO
1122,made it possible to delay the return of a mock or spy (#1117),a cherry-picked version of #1119 for the 2.x branch.,Test,Util,IO
1128,improve detection on non-mockable types - byte buddy 1.6.14->1.7.0,stronger assertions on class loader origin when choosing what methods are mockable.,Test,IO,Util,Network,i18n
1136,1135: properly resolve visibility bridges.,resolve the method hierarchy by byte buddy s method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect.,Network,Test,i18n,IO,Util
1137,don t use raw rypes in unusedstubbingstest,use generic specification instead of casting to the raw list type in order to make it a bit stricter.,Test,Util
1146,replaced map.get()  with containskey() where appropriate,based on a disussion in #1142  pointed out by @siedlerchr   checking if a  map  containts a key is better done using  map.containskey()  than checking if  map.get()  returns null. (i have checked that null is not stored in the  map  as well.),Test,Util,i18n
1157,add tests to verify and show that @spy can be used to allow stubbing/verification of list parameters using varargs.,hi  i thought about sending an email first but then figured that i d probably put in the test code as the example anyway  which is what this pr is all about.,Test,Util
1162,fix for #1155 thenthrow(class),fix for #1155,Test,IO,Util
1181,#1179: fix performance regression caused by use of method graph compiler.,in order to properly discover visibility bridges  we have to run a full analysis of the method graph. the compilation of this method graph is rather expensive and we require to cache a computed graph. the caching is however non-trivial as it references classes which might be unloaded. in order to avoid a leak  we cache classes using non-strong references.,IO,i18n,Test,Util,Network
1186,compare method of graph to defined form of method.,1180: compare against non-generic method when deciding if a method should be stubbed.,Util,IO,i18n,Network,Test
1192,added new public api for spring-boot use case,not intended for merging yet  submitted for visibility.,Test,Util,IO
1199,fixes 977: javadoc on verifyzerointeractions,make the javadoc of  mockito#verifyzerointeractions  to make it more,Util,Test
1201,added method to generate string with n spaces or n characters,used in a number of places so makes sense to have a method.,Util,i18n,Test
1202,replaced some guava usage with standard java.*,while looking for the use of guava i found these calls which can be replaced with standard java-classes.  regarding the original quest: - most uses are for checking null or empty strings or similarly return an empty string if the input string is null  it may not be worth importing the library just for these two and better to create these two trivial methods in stringutil (and use them to a larger extent) - there is also  charmatcher.whitespace  which may be slightly less trivial to replace,Test,Util
1203,fixed documentation issue  added unit tests,- while working on new verification started listeners (#1191) i found an instance of incorrect documentation. i added unit tests and simplified the documentation.,Test,Util
1209,clean up junit imports,fix junit imports throughout the project to use the standard  org.junit.assert  assertions instead of the obsolete  junit.framework.testcase  assertions which just delegate to  assert  s methods.,Util,Test,Network,i18n,IO,interpreter
1213,standardize junit imports,this pr standardizes importing assertion methods  making the code base cleaner and easier to maintian.,i18n,Util,Test
1214,1211: improve @deprecated javadoc,this pull request 1211 by improving the  @deprecated  javadoc of  mockito.debug()    mockitodebugger  and  mockitodebugger.printinvocations(object  mocks)  by adding the additional information on how to retrieve an actual instance of the  mockitodebugger  interface.,Test,Util
1216,refactored cli code,moved code related to the cli to the cli package  including half of jabref.java.,Test,Util,i18n,Network,IO,Logic
1217,added integrity checker for odd number of #,will sometimes help for #1212 and #1188,IO,i18n,Test,Network,Util
1219,refactored some dialogs,extracted some code to methods.,Test,Util
1221,mockitoextension for junit5,445,i18n,Util,Test
1228,add @checkreturnvalue to stubbing/verification methods,introduce a new annotation  @checkreturnvalue  and add this to methods like  when  and  verify  such that static analysis can verify the value is actually used ( this makes sure developers can get warnings on build-time instead of run-time (with our internal  validatestate ),i18n
1231,invocationsprinter string concatination,replace string concatination inside an append call with a chained  append  calls to make the code a tad easier to read  so the reader isn t left wondering why some of the concatinations  with  append s and some with the  +  operator.,Util,Test
1238,added integrity checker to detect html encoded characters in fields,based on discussions in #1188,Test,Util
1247,remove several container classes and inline code,remove several classes that were containers for code that is easier to be inlined. they were only referenced once  or never at all. this makes it easier to reason about the code  while also maintaining less code and classes.,Util,Test,i18n
1257,1254 and #1256: improved check for self-invocation.,better checks for recursive calls and guards internally used jdk types.,IO,Test,Util,Network,i18n
1258,prevent class loading race condition,allow singleton locking in context with class loading races.,i18n,Test,Network,Util
1268,1262: update doc for answers.calls_real_methods,update the documentation for the answers.calls_real_methods according to #1262 and also included a note with recommendation not to use when().thenreturn() for partial mock.,Util,Test
1270,cleaner code for mockito users by better integration with static code checkers  more @checkreturnvalue,builds on #1130  #1228.,i18n,Util,Test
1272,strictness configurable per mock / stubbing,792,Test,Util
1280,update strict_stubs documentation for verifynomoreinteractions,1086,Test
1282,1271: authors with compound first names are parsed properly,-   -   -   (),i18n,Test,Util
1301,extend mockitosession(builder) api to enable usage by testing frameworks,the first commit in this pr 1232. in the additional commits  i ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:,Test,i18n,Util,IO
1307,update public api of invocationfactory needed for android static mocking,1306,Test,Util
1310,1295 npe when sorting tabs,- selected tab might be null when sorting tabs - the logic is really strange in general  so this fixes the problem but we need to rework the actions enabling in general imho.,Test
1319,1314 : include all the invocation in mock verification error message,have changes the verify error message to include all the invocation instead of including just one undesired invocation.,Test,Util
1320,avoid bytebuddy import issue to enable repackaging without bytebuddy,this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.,i18n,Util,IO,Test,Network
1324,improved stubbing internals and test coverage,some improvements in exception-stubbing code:,Test
1327,1326 : reduce the allocation rate for the typical use of locat…,…ionimpl,IO,Test
1339,enable errorprone build,- fix up issues found,Test
1349,1347 open urls does not work with query strings,this should work with query strings like    and normal urls.  however  the question is: does this impact the opening of any other file path or anything? we need to be careful as this is a generic open method. maybe that s also the problem because it needs to handle any kind of uri.  @siedlerchr @tobiasdiez please take a look.,Util,i18n,Test
1350,fix npe on selecting invalid jstyle,follow up from #1294   npe was raised in comparator because name was initialized with null instead of empty string only store preferences if style is valid  @oscargus  the fix has the side effect that a file where the name can not be parsed correctly is displayed as  empty style . i attached the problematic style file which was provided in #1294  however: valid still returns true.  as you have worked recently with the styles things  do you know what is required for a jstyle? @koppor  maybe you know this? then we could improved the validity check   [campus_format.english.txt]( ![emptyjstyle](https://cloud.ent.com/assets/320228/14995084/4d8c3a3e-1173-11e6-8eb6-e8f5490ffa5e.png),Util,i18n,IO,Test
1355,update preview panel on generate bibtexkey,fix for #1353 fixed some missing unlocks some formatting -,Network,IO,i18n,Util,Test
1368,removed possibility to automatically add braces via option - preferen…,…ces - file - store the following fields with braces around capital letters. please use save actions instead for adding braces automatically.  refs #1351,Network,Test,i18n
1369,1313: remove ui as the checkbox is no longer backed by a config …,…option  see #1313,Security,Util,Test,Network,i18n
1377,merge master into javafx branch,<describe the changes you have made here:   > -   -   -   (),Util,i18n,Security,IO,Test,Network
1378,avoid circularity: avoid endless loop during mock creation,if certain types a type for the first time during instrumentation while our mocking engine relies on the same types  this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop. (described in comment.) 1240.,Security,i18n,Network,Util,Test
1387,1386: adding atmostonce()  rename threadverifiescontinuoslyinteractingmocktest and one todo,hi,Test,Util
1391,make mockitoextension constructor public,it is possible to register an extension for automatic use using java s  serviceloader  mechanism.,Util,Test
1404,fix wrong artifact name in javadoc  and link to proper javadoc page,## motivation,Util,Test
1407,removing redundent sentence,there was a redundant sentence in the documentation (it was repeated 2 lines below it).,Test,Util
1425,updated documentation of timeout() and after(),while working on @christianschwarz s pr  i found the current documentation confusing.,Test,Util
1426,mockito on java 11-ea+21,1419,Util,i18n,Test,Security,Network
1429,updated test coverage for async verification,updated tests with after() verification mode,Test,Util
1430,allow mockito-logger to be configurable as mockito extension,hi,Util,i18n,Test
1433,fixed travis build,we don t need private constructor on an  internal  class. internal classes can be changed at any time based on our compatibility policy.,Test,IO
1434,javadoc: update broken code example,it updates a broken code example in javadoc.,Test,Util
1436,javadoc: update code example (ignorestubs),it updates the code example of  ignorestubs  in javadoc.,Util,Test
1439,javadoc: #1438 update ignorestubs to include strictness,it updates  ignorestubs()  docs to include  strictness  information. (#1438),Util,Test
1440,1420 auto downloader should respect file pattern and propose correct filename,(https://cloud.ent.com/assets/2141507/15472274/898030a4-20fa-11e6-9a77-8cfac10688d5.png),Test,Util
1452,comprehensive test coverage for timeout() and after(),new coverage enables us to test @christianschwarz s  within . i want to see all those tests working when we replace the internal implementation with  within .,Test,Util
1458,add stubbinglookupevent and notifier (a part of #793),this pr adds  stubbinglookupevent  and  stubbinglookupnotifier  as a part of the issue #793.,Util,Test
1463,prevent stubonly() from being verified (#1460),this pr adds assertion to verification methods to prevent stub-only mock from being verified (#1460),Test
1474,1434: static groups are now longer displayed as dynamic ones,reason for this bug: explictegroup now derives from keywordgroup and thus was sometimes displayed as a keyword group. -   -   -   (),Test,Util
1475,mockitosession api does not clean up listener when initmocks fails,when initmocks() fails we did not clean up the session listener. this led to a confusing error message on the next attempt to create a session (next test method run). i stumbled upon this problem when attempting to configure testng to use strict stubbing (https://github.com/mockito/mockito-testng/issues/1).,Util,Test
1484,fix some typos,don t -> doesn t,Test,Util
1521,minor improvements in the javadoc of mockito.java,this pr fixes a type and adds a reference to the junit5 extension.,Util,Test
1523,added  lenient  annotation toggle,this way we can conveniently configure an existing  lenient  setting via an annotation. see the unit test that describes the feature.,i18n,IO,Test
1526,typo fix in unfinishedstubbingexception,a very simple typo fix.,Util,Test,i18n
1536,allow delegating to non-public methods for additionalanswers#delegatesto,fixes an issue where doing  delegatesto(new anonymousclass() {})  would cause an illegalaccessexception  and other access-related issues.,Util,Test
1539,improved sensitivity of potential stubbing problem,this change improves the developer experience with strict stubbing. it is now possible to stub the same method with different argument multiple times in the test. previously  we threw potentialstubbingproblem exception in this scenario:,Test
1543,exposed new api - stubbinglookuplistener,exposed new public api based on an internal api - stubbinglookuplistener - #793.,IO,Util,Test
1544,1541: prevent premature garbage collection of mock objects,1541.,Test,Util
1549,searchbar across all bib files instead each having its own,implemented #825. the searchbar is now in the top toolbar instead of each tab having its own (always at the right). on tab change the tab gets updated. the autocomplete is bound to the current tab (maybe extend this one in another pr?). the old global search (opening all findings in a new window) is gone  do we really need it?  ![jabref_globalsearch]( -   -   -   (),Test,Util
1552,performance improvements for groups,the bibentry now stores a list of words which are contained in the field. in this way the keywordgroup.ismatch method just has to compare two arrays instead of analyzing strings over and over again. for a big file (> 7000 entries  > 100 groups) the load time decreased by 1 sec from 4.8 seconds to 3.7. half of the time needed for showing the groups tree is spent in calculating the number of hits. moreover  subsequent rerendings of the groups tree (for example after changing an entry) are also quicker.  note that the match algorithm changed slightly. for example  previously looking for  test  in  some$test  resulted in a match  this is no longer the case. however  normal word separators (like whitespace  comma and semicolon are recognized properly)  i.e. searching for  test  in  some test  returns true.  also fixed a npe. -   -   -   (),Test
1554,fixed verifyerror when junit 3 is in the classpath,mockito will throw verifyerror during its junit detection when junit 3,Test
1565,added information in the tool tip for undo and redo and disabled when…,a tool tip text is shown describing the undo/redo action. also  the undo/redo buttons are enabled/disabled when there are things to undo/redo.  <img width= 167  alt= capture3 2  src=  >  current problem is that it doesn t work on startup (both undo and redo is enabled as before)  but as soon as one edit is done it works just fine. -   -   ()  … no undo/redo is available,i18n,Test,interpreter,IO,Util,Network
1567,fix 1530: integrity checker should ignore unescaped hashes in url field,addresses #1530  -   -,Util,Test
1576,fixed undo when update time stamp on edit is enabled,fixed a bug where the field change compound was not ended  leading to that field changes could not be undone when  automatically update time stamp on edit  was enabled. -,IO,Test
1582,extend the openconsolefeature,extend the openconsolefeature by offering a selection between default terminal emulator and configurable command execution.  @koppor  s wish (see  was to have a selection between own terminal emulators. this feature extension provides that. - add:   - radio selection to the externaltab   - program execution to jabrefdesktop   - new jabrefpreference entries   - ui outputs   - localization keys  screenshots: ![oc_sc3]( -   -   (),Util,Test,IO
1583,fixed #1527 and some refactoring/cleanups,fixed #1527 and did some refactoring and cleanups. -,Util,i18n,IO
1585,1584 where multipleparentclassloader lacks of classloaders of superclasses,the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy.,Test,i18n,Network,Util,IO
1586,added isbn integrity checker,isbn integrity checker -   -,Test,Util
1588,added filter to not show selected integrity checks,added the possibility to dynamically filter out some classes of integrity check messages. <img width= 356  alt= capture5  src=  > -   -   (),Util,i18n,Test
1596,cleanup findfile and asssociated tests,cleaned up the findfiles method reworked tests  added some new tests tests should now work in linux  too  -,Test
1612,return null instead of causing a cce,this solves a large number of edge-cases where  null  will actually,IO,Test,Util
1617,added more fields and fixed some issues,i guess   publishers   in  xmputil  was a typo?,Test,IO,Util
1619,added dateformatter to layoutentry so that it actually works,nowadays it is not just enough to add a class (maybe).,Test,interpreter,i18n,IO,Util,Network
1620,protected terms management dialog,the idea is that the lists with protected terms should be user configurable. this pr adds the mechanism for this as well as a dialog to manage the lists.  eventually the internal lists should be managed as resources to simplify adding more. -   -   -   (),Test,Util,IO
1624,handle terminal type var with bounds,this pr aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.,Test,IO,i18n,Util
1635,more tests,a few more tests of cookie  stringutil.intvalueofwithnull  and reenabling some tests for layout.,i18n,IO,Test
1639,removes inaccessible links from javadocs in mockito.java,the monkeyisland.pl domain is no longer available.,Test,Util
1641,fix returns mocks for final classes,the guard for final mocking was incorrect. it should have passed it on,IO,Test,i18n
1644,resolve crossrefs and strings in main table,based on a discussion in the forum  this is a quick hack to show the possibilities. can be downloaded and tested from    it would be especially interesting for people with large databases with many strings to test it for performance. a better implementation can be done if this will make it to the released version. at least removing the commented out lines. -   -  manually tested changed features in running jabref,Test
1646,add back getargument(int  class) to circumvent compilation issues,also add  @notextensible  to several of our interfaces to document they,Util,Test,IO,Network,i18n,interpreter
1648,refactoring of importer,moved classes to gui and logic and created a bit more structure.  (eclipse just hang and i have other things to do at the moment  but there are mainly some code cleanups: - getting rid of a gui-dependency in arxiv by moving correctlinebreaks - import grouping in a few files   ),i18n,Test
1665,new public api: invocation.getargumentsasmatchers(),- new public api: invocation.getargumentsasmatchers()  useful for advanced integrations  such as mockito-scala,Test,Util,IO,i18n
1667,improved ide experience for junit5 - visual comparison failure,when junit5+mockito is used in modern ide (idea  eclipse) we now show  visual  comparison failure pop-up for certain mockito exceptions (such as argumentsaredifferent).,i18n,Logic,Test,Network,Util
1670,add support for answer6 and voidanswer6,regretfully  i ran into a case where i needed to mock a six-argument method. one can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and i think that some pragmatism is useful in tools like mockito  so here is my attempt at adding support for it.,Test,Util,IO
1672,got rid of unused preferences,and marked some which can not be changed from within jabref. -   -  manually tested changed features in running jabref,Test
1680,fix handling of generic void type for donothing(),when the return type bound to a generic type resolved to void,Test,i18n
1690,add errorprone mockitointernalusage checker,this checker will warn on any usage of a mockito internal symbol. since,Logic,Util
1693,removed (false) npe issue reported by findbugs,findbugs reported a potential npe here  which never occurred since it would only happen if  model.getsearchstate() == maintabledatamodel.displayoption.disabled . as this is checked for in the first part of the if-clause  i removed the second check.  so this shouldn t affect any perfomance since  matches  will only be triggered under the same conditions as before.  nothing in changelog since the npe couldn t actually happen. -  manually tested changed features in running jabref,Logic,Util
1695,injected layoutformatterpreferences in exportformat,and removed the need for the static variable  customexportnameformatters  in  jabrefpreferences .  ~~still  savepreferences  to inject and remove the reference for resource loading to~~ completely get rid of  globals .,i18n,Test,IO
1698,fix clonesarguments for null and arrays,the clonesarguments class works for many cases  but fails when trying to clone an argument that is an array  or is null. this pr fixes those edge cases. this does not directly resolve any open issue  but it is related to #1153  #1469,Test,Util
1701,show multiple invocations on argumentsaredifferent,this is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .,i18n,Test,Util
1706,get rid of npe on travis,travis uses jdk 1.8.0_101  whereas circleci uses 1.8.0_40.  current state: there are no protected terms loaded any more. i don t know  why.,Util,Test
1708,1623 : rename toolittleactualinvocations,rename the exception toolittleactualinvocations to,Util,Test,i18n
1714,1713: fix typo in mockito.java javadoc,i was confused and tried to look for  verifynomoreinvocations  when i came across this javadocs.,Test,Util
1715,298: replaces objenesis references from stubbing classes with plugin equivalents.,this enables the ios mockito plugin,Util,Test
1718,1717 : configure the methodvisitor for java 11 compatibility,i m looking into adding a unit test  if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11.,Util,Test,i18n,Network,Security
1720,used field properties for some operations,used the  journal_name  field property instead of hard coding the field names. as a consequence  journaltitle  is included in the integrity check and if we want to add  journalsubtitle    issuetitle  etc later it is just to change in a single position for checks  abbreviation and so on.,Test
1723,change implementation of exceptionfactory to explicitly test for dependent classes,the original implementation of conditional opentest4j support (#1667) relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time. it seems that this behaviour is not always exactly replicated in all environments - for example  in #1716  where mockito was being used in an instrumentation test that was being run on an android emulator.,Test
1733,fixed concurrentmodificationexception when removing a field in the so…,1724. really simple it turned out  no changelog since i m not sure if it was in 3.5. -  -   ( ()?),IO,Util,Test,i18n
1739,consistent punctuation in hints list for unfinishedstubbingexception,previously the numbered list had two periods and a colon after the three numbers.,Test,i18n,Util
1745,1743: clarify default answer in 3.0.0,api changes postponed to 4.0.0. default answer has not been changed in 3.0.0.,Test,Util
1760,minor bug fixes,1747: removed typo,Util,Test
1762,1758: method generictypeextractor#findgenericinterface always …,…returns first interface,IO,Test,Util,i18n
1773,added updatefieldpreferences,less dependency on jabrefpreferences in a small part of logic,Test
1781,moved some logic preference instantiation to jabrefpreferences,less passing of jabrefpreferences for better long term architecture.,Util,Test
1783,fix npe when closing the last tab,the (new?) focus feature lead to an npe when closing the last tab since there was no table to focus -   - introduced in dev version -  manually tested changed features in running jabref,Util,Test
1787,removed entry preview toolbar,has been disabled since long so might as well remove the code.  also cleaned up the preferences a bit. -,Test,Util
1788,upgraded junit jupiter 5.1.1 -> 5.4.2,we need higher version of junit jupiter to reproduce and 1630,Test
1789,replace all file dialogs with new filedialog,and set default filefilter or aggregate filefilter for all supported types. -  database from aux -  remove browseaction,i18n,Test,Util
1792,fix grammar,past tense of  to nest  is  nested . also fix plenking.,i18n,Test
1795,typos and upcoming warnings,fixed some typos which where found by a spell checker.,i18n,IO,Util,Test
1798,fix typo in the wiki link,1791,Test,Util
1799,fixes placeholder  3.x.x  version in javadoc with correct  3.0.1,this is a small javadoc fix,Util,Test
1806,fixed junit5 concurrency bug,fixed junit jupiter mockitoextension so that it behaves correctly in a parallel execution with nested tests. i found this issue recently when working on the extension. threadlocal here is ok but i m happy to use a different solution if someone has a better idea.,i18n,Util,Test
1807,add default implementation for verificationmode#description,this method was added in mockito 2 ([1]) and was implemented in all,Test,Util
1809,update javadoc.io link from /page/ to /doc/  which gives an extra nav…,… bar on the top so that users can easily navigate to old versions,Util,Test
1810,revert  1587 : remove unnecessary loop from injectingannotationengine,reverts mockito/mockito#1588,Test
1811,preview panel height is now saved immediately,the preview panel height is not stored when changed (only when jabref is closed) ### steps - selecting an entry (thus opening the preview panel) - changing the preview panel height - closing the preview panel - selecting an entry (thus opening the preview panel) - the preview panel has the old height  not the new one we just changed,Logic,Security,i18n,Network,Util,Test,IO
1813,1771: upgrade byte-buddy to 1.10.2 (from 1.9.10),release notes:,Util,i18n,Test,Logic,IO,Network
1816,when inserting a duplicate the right entry will be selected,when you insert a duplicate in your database the editor has the wrong entry linked. ### steps to reproduce - select an entry - copy and paste it ( ctrl+c  &  ctrl+v   leave the old entry selected) - now the entry editor is open  edit any value and you ll see that the lower duplicate has changed although the upper one is selected,Test,Util
1818,add check for obsolete database structure. add help popup.,issue:  -  -   ( (  ~~tests for  may fail while  is not merged.~~  _screenshots:_ ![osd3](  ![migrate-pre-3 6-db](https://cloud.ent.com/assets/15609468/17874551/a81a5da4-68cc-11e6-9fd3-977a8642cb6b.png),Util,Test
1820,indent with spaces using spotless,discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentwithspaces(4)  does just that and it actually found other formatting issues.,i18n,Util,Test
1821,guard against multiple evaluations of before statement,some rules evaluate the base statement multiple times  e.g. to execute,Test
1823,fixed #1804: url field is not removed by integrity check,better to disable the check than remove the field from the entry.  -)  1804  -   -   (one may think of adding a test that no fields are removed from the entry in the integrity check  but i haven t done that here  ideally the entry should have every possible field included) -  -   ( ()?),Test,i18n
1832,add matchers for incompatible type matchers,we discovered that users run into issues with using the wrong mockito,Logic,Util,Test,interpreter
1845,fix localization entry.,replace determinated with terminated in  en .,Util,Test,i18n
1847,fixed undetected unused stubbing when matching previous stubbed call,1846,Util,Test,i18n
1849,performance optimization by using method.getparametercount() where possible,hi,i18n,Util,Test,IO
1850,522 : basic test suite for osgi framework,this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment. for example  reverting the fix for #678 is caught with the following exception:,Logic,IO,Util,Test
1854,1853: allow @mockitosettings to be inherited,-  read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/contributing.md),Util,Test,i18n
1858,add testrule to mockitojunit,junit has two types of test rules: methodrule and testrule. the existing,Util,Test
1859,add notextensible to ongoingstubbing,this interface is not intended to be subclassed and should therefore be,Test
1862,revert  performance optimization by using method.getparametercount() where possible,reverts mockito/mockito#1849,Test,IO,Util,i18n
1868,moved one method from external and fixed some minor things,move regexpfilesearch  two preference constants and removed an ignored test that wasn t close to passing (there is no trace of any nameformatter/layout in regexpfilesearch).,Util,i18n,Test
1878,revert  fixed undetected unused stubbing when matching previous stubbed call,reverts mockito/mockito#1847,Util,i18n,IO,Test
1881,fix unnecessarystubbingexception javadoc,1880,Test
1890,fix mocks throwing same instance with throwable class,fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with  dothrow(class)  or  thenthrow(class) .,Test,Util,IO
1893,fix invalid bibtexkey freeze,1882. reference: #1863. -   -  manually tested changed features in running jabref,Test,Util
1895,1894 checkstyle error on windows,windows has some issues with relative paths in checkstyle config files  additionally it failed with an euro sign in code.,Test,Util
1896,more tests and some cleanups of bibtexkeypatternutil,removed some unused/unnecessary code and added a number of tests. -,IO,i18n,Test,Util
1906,check integrity year check added,#1897 added last four nonpunctuation characters should be numerals in check integrity year -   -   -  manually tested changed features in running jabref,Test,Util,i18n,IO
1907,fileutil: copy files using files methods,jabref now copies files by using java.nio package instead of java.io  see: 23,i18n,IO,Util,Test
1911,1910: update description of argumentmatcher javadoc,for any()  the doc says that,Test,Util
1914,check integrity edition check implemented,#1912 implemented a check for the field edition. the check differentiates between bibtex and biblatex mode of the database. -   -   -  manually tested changed features in running jabref,Test,Util,IO
1928,support citationstyles,implements #119.  the user can choose multiple citationstyles which he can cycle threw in the preview panel (forward with <kbd>f9</kbd>  backwards <kbd>shift</kbd> + <kbd>f9</kbd>  both are in the context menu and the menu bar) . as discussed i removed the 2nd preview. ### preview before:  ![preview_before]( ### preview after:  ![preview_after]( ### preferences before:  ![preferences_before]( ### preferences after:  ![preferences_after](  i didn t include the localization (other the english) on purpose because they create unnecessary conflicts when rebasing quite often (i push them when everything else is fine).  the help page has to be updated too. i do that as soon as this pr is merged. -   -   -   () -  -   ( (  warning: currently i read the available citationstyles at runtime. i had problems reading them from the gradle dependency thus currently they are only found when jabref is started from the jar.,Test,Util
1931,export number field as number if not patent or issue in office 07 xml,add : export key field (not to be confused with bibtexkey field)   add test for custom entry type and key field  refs #1851   documentation has to be updated.     --> -   -   -   () -  -   ( ()?),Test,Util,i18n
1934,removed external dependency in logic,an alternative to #1924 : hard coded  ps  and  pdf  as file type names.  still some methods that can be removed in  externalfiletype  (the original thing done in #1924 .  i created three  gui  packages: -  externalfiletypes  for things related to  externalfiletype  -  externalfiles  for things (primarily) related to the actual files -  filelist  for things related to  filelist  -,Test,Util
1938,update javadoc - remove deprecated class,the javadoc is misleading - pointing to the deprecated class returnselementsof that should later be internal or moved,Test,Util
1942,mods importer,regarding: #1920   adds an importer for the mods (xml) format. the importer is written with a jaxb parser. details on the format and the newest xml schema can be found [here]( i ve used the newest schema (version 3.6). -   -   -  manually tested changed features in running jabref,interpreter,Network,Test,IO,Util
1945,[travis] replace jdk 9/10 with 14,9/10 are eol since september 2018. 14 is the currently supported,Test,IO,Util,i18n
1951,adjusted key bindings according to master branch,recently the keybindings at the master branch have been changed with #1525 . this pr will change the keybindings in the javafx branch accordingly. -   -   -   () -  -   ( ()?),Test,Util,i18n,IO
1953,add key shortcuts to search result frame and main table,- <kbd>pos1</kbd> / <kbd>home</kbd> now select the first/last entry in the main table and the search result frame. - <kbd>up</kbd> / <kbd>down</kbd> / <kbd>tab</kbd> / <kbd>shift+tab</kbd> in the search result frame have now the same functionality as in the main  table.,Security,Logic,i18n,IO,Network,Test,Util
1955,merged master into javafx branch,updating javafx branch to include all the latest changes from the master branch. -   -   -   () -  -   ( ()?),i18n,Util,Test
1961,fix when editing a bibentry field the searchbar would be focused,fix for #1549 ### steps to reproduce: - select a bibentry - edit a field - save the change (eg. click outside the field) - the searchbar would be focused,Test,Util
1968,refactored remotepreferences,as logic should not reference  jabrefpreferences .,Test,Util,i18n
1971,add support for creating constructors without using objenesis (and unsafe api),this pr adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of objenesis obsolete. this is desired since objenesis relies on unsafe api which is deprecated and will be removed in a future release.,Test,i18n,Network,IO,Util,Security
1974,1855 and #939: improve error message when the inline mock maker cannot be used.,improves the error message and does not create a hard dependency on the compiler module. it also points out that byte buddy can now emulate the attachment api using jna if it s added to the class path.,i18n,Util,Test
1978,fix javadoc invalid syntax,escape @ character to html entity.,Test,Util
1984,fix typo,this pr fixes a typo.,Test,Util
1989,rewrite mods exporter and add test for it,regarding: #1920  rewrite the mods exporter with a jaxb parser.  details on the format and the newest xml schema can be found [here]( i ve used the newest schema (version 3.6). this pr uses the same gradle script and schema as in #1942 .  -  internal qs -   -  manually tested changed features in running jabref,Util,i18n,Test
1991,some minor code cleanups,not thrown exceptions etc.,Util,Test
1994,fix typo in contributing.md and spyoninjectedfieldshandler,fix typo in contributing.md and spyoninjectedfieldshandler.java,Test,i18n,Util
1996,add invoker api to allow for alternative invocation modes to better support the module system.,adds a  memberaccessor  abstraction for accessing fields  methods and constructors where the default implementation  reflectionmemberaccessor  implements the current behavior of using reflection and  setaccessible .,Test,Logic,IO,Util,i18n,Network
2003,pre release 3.5.0,merged several pull requests into a branch prior to release.,Network,Logic,IO,Util,Test,i18n
2004,remove help suffix at help pages,implements  in jabref.,i18n,Logic,Test,IO,Util,Network
2006,introduce animal sniffer,introduces animal sniffer with exclusion of inline-mock-maker classes which would never be present on android. avoids calling invoke/invokeexact methods of handles directly but rather puts the invocations into generated code to avoid breaking android builds.,Test,i18n,Network,Util
2013,[ci maven-central-release] constructor dispatch,use constructor instantiation if explicitly specified.,Util,Test
2017,only enable mocking of types right before instantiation to avoid circular interception of constructor creation.,2015.,Test,Network,Util,i18n
2018,only enable mocking of types right before instantiation to avoid circular interception of constructor creation.,2015.,Util,i18n,Test,Network
2020,constructor dispatch,adds error message to class loader setups that do not work with the inline mock maker.,i18n,Util
2021,constructor dispatch,fixes recursive constructor invocation.,Util,Test,i18n,Network
2023,revert deprecation,following the discussion at #1913  that pr should be reverted.  this pr reverts the  @deprecations   but tries to keep the other improvements.  i m not sure whether  bibentry.getresolvedfield  should be kept.,i18n,Test,Util,Network,Security
2034,fix bad web search error messages,1542  i rewrote the error messages when the fetchers fail (or added them).,Util,Test,Network,i18n,IO
2042,mock resolver plugin,adds a plugin to allow for adding one or multiple mock resolvers. this way  instances that are provided to mockito s dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as spring.,Util,Test,Network,i18n,IO
2046,do not exclude synthetic constructors from instrumentation. 2040.,byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (e.g. bridge methods). for constructor instrumentation  it is however crucial that no code is called during mock creation and that fields are copied during spy creation.,Test,IO,Security,i18n,Util,Network
2051,create sensible default settings for  enable save actions  and  cleanup  dialogs,sensible default settings for  enable save actions  field of database properties dialog and  run field formatter  field of cleanup eintries dialog are now identical 🐨 please take a look for merge. thx 🐰  - change the default setting - by click on  reset  button:  ![2016-10-15_23h31_31](  ![2016-10-15_23h31_45]( - change the default setting - by click on  recommend for bibtex  button:  ![2016-10-15_23h35_28](  ![2016-10-15_23h36_12]( - change the default setting - by click on  recommend for biblatex  button:  ![2016-10-15_23h38_27](  ![2016-10-15_23h38_40](  for further information have a look at:  😄  -   -   () -  -  internal qs,IO,Util,Test
2071,tooltips now working in the main table,fixes:   tool tips in the main table now work as expected.  if the content of the cell is too big to be rendered in the cell itself it will be shown as a tool tip. what is more important  the original tool tip or the content?,i18n,Test,Util
2098,improve error message if initializer fails.,non-initializable classes can never be mocked  an error message should help guide on these issues.,Network,Security,Test,Util,i18n
2135,add void static method mocking example,signed-off-by: gábor lipták <gliptak@gmail.com>,Util,Test
2140,endorsed mockitotestnglistener in the documentation,after the latest changes in mockitotestnglistener i sure that can be used without worry.,Test,i18n,Util
2145,change download url to downloads.jabref.org,we want to get back control of the download site we offer. thus  we created  ( with a redirection to fosshub.  refs #1670,Test,Util
2158,add field type in @mock example,javadoc-only change,i18n,Test,IO
2175,fix memory leak in entry editor,this is to 2166.  list of changes - - updated microba to latest version - unregister entryeditor as a listener to entry  - implement searchqueryhighlightobservable using entrybus - make entryeditor unregister all fields that are listening on the global search bar.,Util,Test
2176,bump versions.errorprone from 2.4.0 to 2.5.1,bumps  versions.errorprone  from 2.4.0 to 2.5.1. updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p> (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p> (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>,Network,Test,interpreter,IO,Util,i18n,Logic
2179,clear bibtexkey exception,2177. nullpointerexception caused by clearing bibtexkey field in entry editor. -   -   -   () -  -   ( ( -  if you changed the localization: did you run  gradle ate ?,Test
2180,fix typo in javadocs of mockedconstruction,hi 🖐,Util,Test
2193,google scholar: add better error message for reached traffic limit,title already explains the purpose.  as proposed by @tobiasdiez in  a more specific error is now shown if the fetching is failing due to a redirect. - ~~ ~~ - ~~ ~~ - ~~  ()~~ -  -   ( ( - updated text directly in the  gh-pages  branch:  -  if you changed the localization: did you run  gradle ate ?,Test
2194,improve autosave and backup feature,applies the remaining feedback from  and fixes  -  -   ( ( -  if you changed the localization: did you run  gradle ate ?,Test,Security,IO,i18n,Network,Util
2227,add missing deprecated annotation,discovered while trying to sync mockito internally at google.,Test
2236,biblatex mode: add month and year field to deprecated tab,issue #2233: in biblatex the  date  field is recommended. for backward compatibility the bibtex fields  month  and  year  are also accepted. i ve added both fields to the deprecated fields tab  although the year field is present in the required fields tab too.,Test,Util
2241,2238: do not omit stack frames of causing class,this pr will fix this problems described in #2238.,i18n,Test,Util,IO,Network
2248,moved return out of for-loop,i found some time to look into the code. it seems  only the last conditional statement was accidentally placed inside the for loop.,Test,Util,IO
2250,bump versions.errorprone from 2.5.1 to 2.6.0,bumps  versions.errorprone  from 2.5.1 to 2.6.0. updates  error_prone_core  from 2.5.1 to 2.6.0 <details> <summary>commits</summary> <ul> <li><a href=  ><code>86f8e23</code></a> add <code>timeunit</code> apis to <code>returnvalueignored</code>.</li> <li><a href=  ><code>c5e1687</code></a> disable <code>banserializableread</code> by default</li> <li><a href=  ><code>3d64250</code></a> improve <code>constantpatterncompile</code> fixes</li> <li><a href=  ><code>553603f</code></a> add a missing <code>@nullable</code> annotation.</li> <li><a href=  ><code>3e14f54</code></a> generalize <code>constantpatterncompile</code></li> <li><a href=  ><code>456dcf0</code></a> rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li> <li><a href=  ><code>ed55201</code></a> inet4address and inet6address are immutable</li> <li><a href=  ><code>91951e3</code></a> remove deprecated attributes from <code>@restrictedapi</code></li> <li><a href=  ><code>2b10575</code></a> rethrow reflectiveoperationexception as linkageerror instead of assertionerror.</li> <li><a href=  ><code>fc7cca8</code></a> expand immutablemembercollection to convert <code>private final</code> member collection</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.5.1 to 2.6.0 <details> <summary>commits</summary> <ul> <li><a href=  ><code>86f8e23</code></a> add <code>timeunit</code> apis to <code>returnvalueignored</code>.</li> <li><a href=  ><code>c5e1687</code></a> disable <code>banserializableread</code> by default</li> <li><a href=  ><code>3d64250</code></a> improve <code>constantpatterncompile</code> fixes</li> <li><a href=  ><code>553603f</code></a> add a missing <code>@nullable</code> annotation.</li> <li><a href=  ><code>3e14f54</code></a> generalize <code>constantpatterncompile</code></li> <li><a href=  ><code>456dcf0</code></a> rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li> <li><a href=  ><code>ed55201</code></a> inet4address and inet6address are immutable</li> <li><a href=  ><code>91951e3</code></a> remove deprecated attributes from <code>@restrictedapi</code></li> <li><a href=  ><code>2b10575</code></a> rethrow reflectiveoperationexception as linkageerror instead of assertionerror.</li> <li><a href=  ><code>fc7cca8</code></a> expand immutablemembercollection to convert <code>private final</code> member collection</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>,Network,Test,IO,Logic,Util
2259,but invoked here  lists the invocation parameters,supersedes and closes #2188,Test,Util,i18n
2263,2242 : make exceptions for inorder.verify more standard / spec…,…ific,Test
2267,include cause when fieldreader fails to access field,2266,i18n,Test,Util,Network,IO
2274,2273 : add missing parenthesis to javadoc example,adds the missing parenthesis to the argumentmatcher javadoc example,Test
2277,apply automated errorprone fixes,this is the result of running errorprone on the codebase. most notably,Util,IO,Test,Logic,Network,i18n
2279,remove asm dependency,mockito depends on byte-buddy to make most of its bytecode fiddling but asm is still needed for the tests. we can remove this dependency by relying on the already shaded version included on asm  that we we won t get unaligned between both dependencies and we will remove the need for the explicit asm library.,Network
2280,support mocking of function with kotlin inline classes,despite functions with inline class parameters being already supported,Util,i18n,Test
2283,implement #1359: collect telemetry,in this pr  [microsoft azure application insights]( is used to record the following information about how jabref is used:,Logic,Network,Test,IO,Util,i18n
2292,fix stackoverflow in argumentsaredifferent reporting,when using mockito without opentest4j  reporting an,Test
2298,bump versions.errorprone from 2.6.0 to 2.7.1,bumps  versions.errorprone  from 2.6.0 to 2.7.1. updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) dependabot will merge this pr once ci passes on it  as requested by @timvdlippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>,Util,Test,i18n
2306,adapt csl tests to crlf and lf,the discussion at  revealed that  \r  does not appear as line separator alone. thus  our tests should be adapted accordingly.,Test,Util,IO,i18n,Network
2312,undo parent for multipleparentsclassloader,66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. use of an explicit parent with  multipleparentsclassloader  appears to be discouraged in the documentation also.,i18n,IO,Test
2318,check package-privacy of method params,this patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce abstractmethoderror  since its methods do not actually override the methods of the interfaces.,i18n,Test,Network,IO,Util
