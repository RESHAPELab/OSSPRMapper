pr;DB;Interpreter;Logging;Thread;Data Structure;DevOps;i18n;Logic;Microservices;ML;Test;Search;IO;UI;Parser;Security;Cloud;Big Data;App;GIS;Util;NLP;APM;Network;Title;Body;prIssue;issue;issueTitle;issueBody;issueComments;issueTitleLink;issueBodyLink;issueCommentsLink;isPR;isTrain;commitMessage;Comments
2;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;pull request: load default plugins dynamically;to be able to include mockito source in the android open source project  i d like to be able to build a subset of mockito which doesn t rely on cglib. this removes the compile-time dependency on the default mockmaker implementation  which naturally includes references to cglib.;;0;pull request: load default plugins dynamically;to be able to include mockito source in the android open source project id like to be able to build a subset of mockito which doesnt rely on cglib this removes the compile-time dependency on the default mockmaker implementation which naturally includes references to cglib;hey ianthe pull request makes sense for me - i will merge itcan you tell me a little bit what does it mean when mockito is included in the android open source project? is it a classic fork of the sources and afterwards android guys would maintain the sources in android osp whereas our team would keep maintaining sources at github?cheers and thanks a lot for the pull request! ||;;;;1;1;load default plugins dynamically;
3;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;pull request: remove class mockable test from classimposterizer;to be able to include mockito source in the android open source project  we need to be able to build a subset of mockito which doesn t rely on cglib. this second part rearranges the code related to checking whether a class can be mocked. i ve moved the logic to mockutil  where it could later be moved to the mockmaker where it really belongs.  my apologies - i can t see how to get github to make a pull request just with my second change  so this seems to include both of my changes.;;0;pull request: remove class mockable test from classimposterizer;to be able to include mockito source in the android open source project we need to be able to build a subset of mockito which doesnt rely on cglib this second part rearranges the code related to checking whether a class can be mocked ive moved the logic to mockutil where it could later be moved to the mockmaker where it really belongsmy apologies - i cant see how to get github to make a pull request just with my second change so this seems to include both of my changes;this change is fine too it only applies to the internal design may i know whats the motivation? is it because you want to easily exclude the classimposterizer when forking sources to aop?cheers & thanks again for the pull request! ||;;;;1;1;remove class mockable test from classimposterizerclassimposterizer is not otherwise used when a custom mockmaker is used thischange avoids calling to classimposterizer from the api portions of mockitowhich are used with any mockmaker;
5;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;mock serialization/deserialization across classloader/jvm;this pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  at the moment it s enabled automatically when using  withsettings().serializable() .  it still require to have mockito on the classpath of the jvm classloader where it is deserialized.;;0;mock serialization/deserialization across classloader/jvm;this pull request will enable mocks to be serialized in a certain way that will allow them to be serialized and especially deserialized outside the classloader the mock was createdat the moment its enabled automatically when using `withsettings()serializable()`it still require to have mockito on the classpath of the jvm classloader where it is deserialized;;;;;1;1;fixing the message of the exceptions;
7;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;refactoring: remove unused import;hi   classimposterizer is no longer used in returnsmocks  this patch allows us in the android open source project to build returnsmocks without building classimposterizer (which ultimately depends on cglib-and-asm  which we can t use.)  thanks  ian;;0;refactoring: remove unused import;hiclassimposterizer is no longer used in returnsmocks this patch allows us in the android open source project to build returnsmocks without building classimposterizer (which ultimately depends on cglib-and-asm which we cant use)thanksian;;;;;1;1;remove unused import;
10;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new  mockingdetails.getinvocations  method for inspecting what happened with the mock;a simple implementation for [issue 178](  modified the mockingdetails api to expose a getinvocations() method. this uses the invocation container from the mockutil object to return a collection of invocations (which is in the org.mockito.invocation package). this enables users to debug and see invocations on a given mock and use the debugger (or code) to see arguments passed  the target method  etc.;;0;"new ""mockingdetailsgetinvocations"" method for inspecting what happened with the mock";a simple implementation for [issue 178]( the mockingdetails api to expose a getinvocations() method this uses the invocation container from the mockutil object to return a collection of invocations (which is in the orgmockitoinvocation package) this enables users to debug and see invocations on a given mock and use the debugger (or code) to see arguments passed the target method etc;looks good thanks for the pull request || happy to help ill look for something else to fix next :)on wed nov 13 2013 at 2:52 am brice dutheil notifications@githubcomwrote:> looks good thanks for the pull request> > —> reply to this email directly or view it on github  || heyim just reviewing closed pr before the release im thinking that it might be better to return invocationonmock type instead of invocation by the getinvocations() the main reason is that invocation interface is more for devs who extend mockito and this api contains some methods that change the state of the mock and his behavior so the users may potentially hurt themselves by using those methodsmy question is do you need the getinvocations() to return invocation objects or invocationonmock should be enough? || im in a project and we wanted to use the `invocation` to see if the mock was already stubbed and if it was matching another `invocationonmock` still im not sure if well pursue that way for other reasonsanyway i believe you are right it feels like it is kind of internal stuff maybe we could create a public api to expose some of these details maybe even the real mocked type (avoiding to check ourselves if its a superclass or interfaces) ? || if theres a use case for using invocation (and apparently it is) letsuse it perhaps we could elevate some of the methods to theinvocationonmock type (eg all the sensible getters avoid exposing thesetters) maybe maybe we should just give the invocation to the world andsee what happensthanks for the feedbackon mon jan 20 2014 at 6:38 pm brice dutheil notifications@githubcomwrote:> im in a project and we wanted to use the invocation to see if the mock> was already stubbed and if it was matching another invocationonmock> still im not sure if well pursue that way for other reasons> > anyway i believe you are right it feels like it is kind of internal> stuff maybe we could create a public api to expose some of these details> maybe event the real mocked type (avoiding to check ourselves if its a> superclass or interfaces) ?> > —> reply to this email directly or view it on github ## szczepan faberprincipal engineer@gradle founder@mockito ||;;;;1;1;changes for issue 178 change to defaultmockingdetail and a simple test;
14;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;deprecated timeout().never()  in line with timeout().atmost();timeout().atmost() is deprecated due to issue 235:   these exact same arguments apply to never()  both verification modes are extremely likely to create assertions that immediately pass  and do not test what they re intended to test. this patch therefore deprecates never() similarly.  fairly shortly i m also planning on implementing verify(mock  during(x).[])  as a counterpart to timeout which always waits the full time  as discussed in issue 347:  this should allow for the kind of assertion behaviour that timeout().never() implies.  (also some minor whitespace tidy up and spelling corrections);;0;deprecated timeout()never() in line with timeout()atmost();timeout()atmost() is deprecated due to issue 235:  exact same arguments apply to never() both verification modes are extremely likely to create assertions that immediately pass and do not test what theyre intended to test this patch therefore deprecates never() similarlyfairly shortly im also planning on implementing verify(mock during(x)) as a counterpart to timeout which always waits the full time as discussed in issue 347:  this should allow for the kind of assertion behaviour that timeout()never() implies(also some minor whitespace tidy up and spelling corrections);updated to rename the reporter method ill rebase the other 2 onto this in a sec ||;;;;1;1;changed most() + timeout() warning reporter name to include never() toopreviously it was used by never() but the actual method name didnt match up;
15;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;verification with timout measures time more more accurately;the previous timeout implementation doesn t measure time correctly: it only counts time spent intentionally sleeping  thus losing time on anything that happens when not sleeping (both the actual verification time  and time spent in other threads during verification)  and gaining time if any interruptedexceptions occur.  typically this means that timeout()s actually run for a longer than they re intended to. the fixed test demonstrates this well  previous the timeout was set to exactly the minimum possible time the sleeps in the code alone could ve taken  ignoring all processing time  and this test consistently passed. after the changes it now fails (as it probably should).  this patch fixes that by just measuring the time directly. i ve also fixed some variables names that were slightly annoying  and that now-failing test has a 500ms buffer before it times out.;;0;verification with timout measures time more more accurately;the previous timeout implementation doesnt measure time correctly: it only counts time spent intentionally sleeping thus losing time on anything that happens when not sleeping (both the actual verification time and time spent in other threads during verification) and gaining time if any interruptedexceptions occurtypically this means that timeout()s actually run for a longer than theyre intended to the  test demonstrates this well previous the timeout was set to exactly the minimum possible time the sleeps in the code alone couldve taken ignoring all processing time and this test consistently passed after the changes it now fails (as it probably should)this patch fixes that by just measuring the time directly ive also fixed some variables names that were slightly annoying and that now-failing test has a 500ms buffer before it times out;ive updated this and rebased its now got some more javadoc and some timeout test improvements (dropping the magic number and more explicitly handling potential test overhead to eliminate timeout test races and some other similar test improvements i noticed along the way) as you mentioned at  ||;;;;1;1;minor tidyup & improvement of timeout() tests;
21;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;improved behavior of equalswithdelta with regards to null handling;added check to the equalswithdelta matcher   if the actual and expected objects are the same.;;0;improved behavior of equalswithdelta with regards to null handling;added check to the equalswithdelta matcher  if the actual and expected objects are the same;   if for some reasons you do not want this commit just say and ill improve or close it (its ok) || sorry i didnt have the time to review it the pr is ok thanks for the interest ||;;;;1;1;added check to the equalswithdelta matcher  if the actual and expected objects are the same;
22;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;improved the javadoc example of custom answer implementation;so a developer can just copy and paste code from javadocs  snippet to have the expected result.;;0;improved the javadoc example of custom answer implementation;so a developer can just copy and paste code from javadocs snippet to have the expected result;  ;;;;1;1;answer javadocs correctionso a developer can just copy and paste code from javadocs snippet to have the expected result;
24;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;avoided classloader issue when testing in eclipse plugins environment;;;0;avoided classloader issue when testing in eclipse plugins environment;;;;;;1;1;issue 453 : introduced a simple classloader builder for loading some classes in isolation also explained why we need different classpaths for this testthis last part could be abbreviate if we can load our test classes in memory;
29;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;smarter constructor injection by choosing  biggest  constructor instead of the default one;see   added additional condition to sorting of constructors by checking amount of mockable constructor arguments;;0;"smarter constructor injection by choosing ""biggest"" constructor instead of the default one";see  additional condition to sorting of constructors by checking amount of mockable constructor arguments;  ;;;;1;1;issue 421: added additional condition to sorting of constructors by checking mockable arguments;
30;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;deep stub style mocks can be serialized;see https://code.google.com/p/mockito/issues/detail?id=399;;0;deep stub style mocks can be serialized;see https://codegooglecom/p/mockito/issues/detail?id399;"   thread safety added - i was thinking about some atomicreferences but that wasnt an option since the types of those references wouldnt be serializable so i went just for simple method synchronization as for the generics part - thanks for the usecases it seems clearer now as for the purpose of the fix || reviewed by brice still need to work on generic support serialization || hey marcin ive worked on the serialization of deep stubs with generic support and i decided this was too much for now i believe this could be added later on so for the moment i choose that deep stubs answer will now fallback to the previous mechanism when serializing you can grep the commits with `issue 399` for more details thanks for helping me on this one anyway :) || sure no problem :) || ";;;;1;1;added synchronization on instantiation of transient fields to guard thread safety;
32;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed the behavior of compareto method of the mock objects;see   fix compareto behaviour the same objects;;0; the behavior of compareto method of the mock objects;see  compareto behaviour the same objects;   thanks merged ) ||;;;;1;1;467] rename testsintroduce snake case instead of camel case for tests names in shouldmockscomparetobeconsistentwithequalstest class;
36;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactoring: inner implementations of filter and comparator should be static;;;0;refactoring: inner implementations of filter and comparator should be static;;  ;;;;1;1;make verifiableinvocationsfinderremoveignoredforverification private;
37;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;refactoring: avoid static keyword in inner interface definition;inner interfaces are implicitly static;;0;refactoring: avoid static keyword in inner interface definition;inner interfaces are implicitly static;  ;;;;1;1;remove redundant static keywordinner interfaces are implicitly static;
38;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new  then  method for bdd-style interaction testing;new feature in bddmockito for bdd then part of the test which allows mock behavior verification by using  mockito#verify(object) . for example we have classes person and bike:      java bike bike = new bike()  person person = mock(person.class)       and the following interaction      java person.ride(bike)  person.ride(bike)       current (non bdd) behavior verification would go like:      java verify(person  times(2)).ride(bike)       this feature introduces the following way of verification:      java then(person).should(times(2)).ride(bike);;0;"new ""then"" method for bdd-style interaction testing";new feature in bddmockito for bdd then part of the test which allows mock behavior verification by using `mockito#verify(object)`for example we have classes person and bike:``` javabike bike  new bike()person person  mock(personclass)```and the following interaction``` javapersonride(bike)personride(bike)```current (non bdd) behavior verification would go like:``` javaverify(person times(2))ride(bike)```this feature introduces the following way of verification:``` javathen(person)should(times(2))ride(bike)```;"   when is the next release? :)on tue mar 18 2014 at 8:17 pm brice dutheil notifications@githubcomwrote:> merged #38  > ## > > reply to this email directly or view it on github  || some work is still needed regarding jdk8 but it may be easier than expected unless the community has missed somethingalso release scripts need to be enhanced and extended to the test-ng supportplus many stuff i may have forgotby the way could you give your feedback on this pr #9 im not yet sure how to integrate this feature tia || hey ive been playing around a bit with your feature i agree with you `then(person)verify(times(2))ride(bike)` doesnt read wellim no more inclined to add the verify alias but if you want to keep it what do you think of writing it this way with a no-op `then()` for exemple : ``` javathen()verify(person times(2))ride(bike)``` || > by the way could you give your feedback on this pr #9 im not yet sure how to integrate this feature tiaive just seen it is related to an accepted issue on the projects site on google code ill take a look into it when i get some time> im no more inclined to add the verify alias but if you want to keep it what do you think of writing it this way with a no-op then() for exemple : im also in favor of removing it || the thing is the jsr 305 is now part of the jdk8 that could be interesting to bring at some point support for that || sorry i didnt have any time to look at the pr ill try to take a look at it next week || > by the way could you give your feedback on this pr #9 im not yet sure how to integrate this feature tiaive looked at the pull request and im not sure i understand what the problem is is the main issue backwards compatibility and redesign of invocation or integration process itself?ps it seems this issue should be discussed somewhere maybe best on the mockito google group? || the comment on the pr is for that please share your opinion or question there too :)thx for taking the time to take a look at it by the way :) || when you get some free time please take a look at  im trying to gather some feedback from junit guys but none were given  hey can you share the link on the mailing list so people can discuss there :)also i will post the link on twitteranyway from just looking at the readme page i find the api quite elegant || i will thanks for feedback! :) || hey guysdid you consider this:then(person times(2))ride(bike)then(person)ride(bike) || i find the original case more readable so i must say im against it is there any concrete case where it doesnt read well? || i agree with lovro i find the original idea more readable || for example: then(task)should()completed()then(mock)method() is more consistent with the original apii really like your idea though i think it reads very nicely || yes that could work with aliases like``` javashouldbe()validated()has()performed()has(times(2))performed()``` || > i really like your idea though i think it reads very nicelythanksthere is one more problematic case: timeout()maybe more aliases should be introduced? || hey guysi thought about this and im tempted to remove this new method from the api i really like how it looks but on the other hand i dont want mockito api to grow in tactical aliases that solve mini use cases there is a room for this kind of aliases but id rather mockito api to be simple and opinionated perhaps there should be a separate library called mockito-bdd? also its pretty easy to add such aliases to any codebase simpler api like ""then(task)completed()"" would be ok for me because its truly an alias - it has exactly the same signature but the method name is different hence it does not complicate the api however it seems that you prefer more fluency - this could be different library that depends on mockito-core and has bunch of bdd aliaseslovro i really like your coding and id love to get more contributions from you! || btw thoughts? i can always be convinced :) || > lovro i really like your coding and id love to get more contributions from you!thanks!i must say that i still stand by my original pull request and its design> for example: then(task)should()completed()i think that only listener methods can be problematic (oncompletion) with current implementation normal methods usually dont go in past tense || but abandoning the should part and leaving only then wouldnt be bad for me either i just hope this gets released some time soon :) || i will release really soon i wanted to close down this api change actually before the release :)i totally respect your pov regarding should() methodoptions we have (ive conveniently removed options that dont work for me ):1 back out the feature from master possibly include more bdd aliases somewhere else2 change the feature to then(task)dostuff() if we do that we will reserve the then word/method and the original option wont be possible any more (even in a separate library)id say we do 1) but i will concede to your votes lovro/brice?thanks again for your input! || heyi thought about this and lets release it in the original shape eg as it is now in the codebase :)do you mind improving the impl a little bit?1 can you add info about this new feature from the mockito main class?2 it would be better if then was an interface and the implementing class not-public (protected or package-protected is fine)ill probably hide this feature from the codebase for the next release however once you get above items done submit pr well merge it and it should get _automatically_ released it will be nice test for the continuous deployment implementation :) || ah nevermind lets just have it in the coming release do you mind doing the 1-2 items in a different pr? :)thanks! || hey sorry for responding this late> do you mind doing the 1-2 items in a different pr? sure what needs to be done? :) || id love a pr with:1 new feature highlighted on the main mockito class (add an item to the   bottom of the list for example: ""(new) fluent bdd alias for verification"")2 deprecate then class introduce then interface (you can create a new   package orgmockitobdd) that the then class can implement for now3 extra credit: also deprecate other concrete classes that leak from the   top level bddmockito4 javadoc for deprecate class includes a deprecation reason5 ensure new api that you have introduced contains @since informationabove is pretty tactical but i hope it gives you a picture about do weapproach api design and evolution this can be very useful for you becauseyoure planning more prs right? :dthanks again for your contribution!on wednesday october 1 2014 lovro pandžić notifications@githubcomwrote:> hey sorry for responding this late> > do you mind doing the 1-2 items in a different pr?> > sure what needs to be done? :)> > —> reply to this email directly or view it on github>  szczepan fabercore dev@gradle founder@mockito || ok i have a few comments:2 deprecation is not really needed if i introduce an interface for then in bddmockito (and move/rename implementation) no client would be affected because the current then class is a final class with all fields non visible hence all imports/usages would be valid after this change but the more important question to me: what is the goal of this interface? is it expected of clients to provide more implementations because that seems highly unlikely to me and just increases complexity unnecessary?general direction is to deprecate the bddmockito class? || heythanks for following up!the general direction is not let concrete public classes leak to the apieg use interfaces for the api where possible bddmockito is cool letsnot deprecate it )possibly the deprecation is not needed i guess users do not instantiatethis class by hand in their tests :) i was playing safe here - for regularuse the deprecation is not needed however sometimes users find verycreative ways of using the api (which is good!) and the deprecation wouldensure backwards compatibilityif you want me to make the call i say deprecate it (its a good trainingfor evolving the api in backwards compatible way too) if you believe thedeprecation is not needed and you are happy to make that call just changeit without deprecationcheers!on fri oct 3 2014 at 11:59 pm lovro pandžić notifications@githubcomwrote:> ok i have a few comments:> 2 deprecation is not really needed if i introduce an interface for then> in bddmockito (and move/rename implementation) no client would be affected> because the current then class is a final class with all fields non visible> hence all imports/usages would be valid after this change but the more> important question to me: what is the goal of this interface? is it> expected of clients to provide more implementations because that seems> highly unlikely to me and just increases complexity unnecessary?> > general direction is to deprecate the bddmockito class?> > —> reply to this email directly or view it on github>  szczepan fabercore dev@gradle founder@mockito || i thought it had a private constructor but i see it has a public one my mistake so the deprecation is in order ill make a pr as soon as i get some free time on my hands :) || cool no rush ) || ";;;;1;1;- added documentation to mockito;
39;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;allow calling real implementation of jdk8 extension methods;see also the google code ticket:   enable calling real implementation on extensions method from jdk8 additionally change add validation checking whether callrealmethod is invoked on abstract methods. in fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someinteface.abstractmethod()).thancallrealmethod()  2: someinteface.abstractmethod() exception will be throwned on second line informing that there were attempt to invoke abstract method;;0;allow calling real implementation of jdk8 extension methods;see also the google code ticket:  calling real implementation on extensions method from jdk8additionally change add validation checking whether callrealmethod is invoked on abstract methodsin fact resolving issue could be achieved by removing this validation because when someone do next thing  when(someintefaceabstractmethod())thancallrealmethod()2: someintefaceabstractmethod()exception will be throwned on second line informing that there were attempt to invoke abstract method;"   i think we need different project in mockito with different java version where we can test mockito features against different jdki dont know if its possible in travis to have different jdks at the same time || form what ive checked it looks good let me some more time to see if theres some weird thing as well )thanks for this work it muck simpler than to rewrite an `isdefault` checkfor readers reference :  || by the way for the reader hers an interesting paper on defender methods :  || another interesting pdf one could read too its from the jvm langage summit 2013 :  ||  is possilbe to test project on multiple jdks (  but in order to test special features of jdk8 i advice to create seperate branch which will hold tests for that features ie: branch jdk8 will hold tests checking whether jdk8 features work correctly and it will be tested only on jdk8 (extension methods will not compile on jdk7) on the other hand master branch will be tested against jdk7 and jdk8 and difference in code will be only on tests level thanks to it we will not have 2 main lines of development but we will tests compatibility on 2 different jdks what do you think about it? it is just suggestion maybe you have better idea? || yeah i know about that feature which is nice really but it doesnt fit the goal i would like which would be to compile mockito and make sure its still compatible with jdk5 for example and the binaries would be tested in different test environment for that i fear i would need separate projectsstill your approach is interesting but im a bit concerned about the _branch synchronization_ im thinking about something else i need to ask gradle expert though  would it be possible to toggle a subproject on jdk version? || i do not know how it looks like from travis perspective but on github seperate branch is sufficient do you agree? in seperate branch you can configure gradle properties travis build definition as well as other things what is more it will be easier to merge prs into two branches in the same project(project as github definition) || yeah we could still try that || fyi im working on the jdk8 branch || if you need any help just let me know || hi what is the status of this feature? the release note 1100 (2014-09-25 22:25 utc) says ""allow calling real implementation of jdk8 extension methods"" but actually it is not possible see for instance:  my own tests it is indeed not possible to call real implementation of default methods  || ";;;;1;1;456] enable calling real method at extensions from jdk8;
41;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;new  getargumentat  method for convenient implementation of custom answers;the problem is when i need to use answers  i quite often need to cast these arguments. i propose two methods in invocationonmock  so we can get two arguments of method typesafely  so this piece of code       java @suppresswarnings( unchecked )   doanswer(new answer() {       public object answer(invocationonmock invocation) {           object args = invocation.getarguments()            int count  = (int)args[1]           //do something       }})   .when(mock).somemethod()       will be better:      java   doanswer(new answer() {       public object answer(invocationonmock invocation) {            int count  = invocation.getargumentat(1  int.class)           //do something       }})   .when(mock).somemethod();;0;"new ""getargumentat"" method for convenient implementation of custom answers";"the problem is when i need to use answers i quite often need to cast these argumentsi propose two methods in invocationonmock so we can get two arguments of method typesafely so this piece of code``` java@suppresswarnings(""unchecked"")  doanswer(new answer() {      public object answer(invocationonmock invocation) {          object args  invocationgetarguments()          int count   (int)args[1]         //do something      }})  when(mock)somemethod()```will be better:``` java  doanswer(new answer() {      public object answer(invocationonmock invocation) {           int count   invocationgetargumentat(1 intclass)         //do something      }})  when(mock)somemethod()```";im basically ok but i dont want the `getfirstargument` in `invocationonmock` otherwise the contract will grow too much without real benefit  || i had removed getfirstargument from pull request || great thx :) ||;;;;1;1;add casted generic methods for getting arguments from invocationonmock;
44;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactoring: removed then-verify;removed verify alias in bddmockito.;;0;refactoring: removed then-verify;removed verify alias in bddmockito;perfect thx ||;;;;1;1;- removed then-verify;
47;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;issue484 fix;this fixes the issue when comparing 2 identical objects which throw an exception in their equals method.;;0;issue484 fix;this fixes the issue when comparing 2 identical objects which throw an exception in their equals method;  ;;;;1;1; issue 484by adding an additonal clause to the areequal methodto take care of the trivial case;
56;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed wrong javadoc for additionalanswers;fixed wrong javadoc for additionalanswers;;0; wrong javadoc for additionalanswers; wrong javadoc for additionalanswers;;;;;1;1; javadoc for additionalanswers;
59;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactoring: added casts to supress varargs warnings;;;0;refactoring: added casts to supress varargs warnings;;  ;;;;1;1;added casts to supress varargs warnings;
63;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improve nointeractionswanted report to include the name of the mock;this is useful feedback when using multiple mocks in verifynomoreinteractions().;;0;improve nointeractionswanted report to include the name of the mock;this is useful feedback when using multiple mocks in verifynomoreinteractions();hey thanks for the pr could you add a unit test ? theres probably already something that test the location you can place it there ||    thanks for the pr can you describe a use case where it is useful? i thought that we write the mock name when invocations are printed || sure it helps where you provide several mocks to verifynomoreinteractions:``` javapublic class mockitotest {    @mock    private runnable a b    @before    public void setup() {        initmocks(this)    }    @test    public void test() {        brun()        verifynomoreinteractions(a b)    }}```without the patch:```failed tests:   mockitotesttest:23 no interactions wanted here:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:23)but found this interaction:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:22)actually above is the only interaction with this mock```with the patch:```failed tests:   mockitotesttest:23 no interactions wanted here:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:23)but found this interaction:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:22)for mockbactually above is the only interaction with this mock``` || reading the message i think it would read better this way : ```failed tests:   mockitotesttest:23 no interactions wanted here:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:23)but found this interaction on mock b:-> at compushtechnologydiffusionqueuesconflationmockitotesttest(mockitotestjava:22)actually above is the only interaction with this mock```also could you squash those commits in a single one so both production and test are in single commit ) || i agree - the message is better your way ||;;;;1;1;improve nointeractionswanted report to include the name of the mock;
65;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactoring: cleanup ignores and fix 1.5 compatibility;this branch contains a few cleanups i had to do after importing mockito: - there are a few more ignores required for eclipse.  - as mockito is configured for 1.5 source compatibility it should adhere to it. therefore i removed the @override annotation where it would cause compile errors on 1.5;;0;refactoring: cleanup ignores and fix 15 compatibility;this branch contains a few cleanups i had to do after importing mockito:- there are a few more ignores required for eclipse - as mockito is configured for 15 source compatibility it should adhere to it therefore i removed the @override annotation where it would cause compile errors on 15;im ok for this pr however generally speaking for mockito i wonder if we should forget java 5 / 6 (maybe even 7) compatibility and just move over for the next mockito version ||;;;;1;1;remove @override annotation for implementing interface methodsmockito is configured with 15 source/target compatibility (according tobuildgradle) in java 5 its illegal to specify the @overrideannotation on method implementations based on interface this changeremoves those in order to have the mockito compile on 15 withoutcompilation errorssigned-off-by: gunnar wagenknecht <gunnar@wagenknechtorg>;
68;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;added custom failure message to mockito.verify. issue 482;issue 482: passing custom failure message to mockito.verify;;0;added custom failure message to mockitoverify issue 482;issue 482: passing custom failure message to mockitoverify;"   @bric3 any chance that this will make it into the next build? || also it may be worth to reflect this addition to `bddmockito`before merging could you squash commits ? || ok thanks for the updates :)api may be tweaked in final 200 also  note that a `descriptable` interface may be extracted from this work itll help when we refactor hamcrest away from mockito || oh and thanks for the pr as well || thanks on jun 12 2015 1:42 pm ""brice dutheil"" notifications@githubcom wrote:> oh and thanks for the pr as well> > —> reply to this email directly or view it on github>  || ";;;;1;1;482: added custom failure message to mockitoverify;
87;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fixed delegatingmethod.equals() so that it s easier to extend mockito by custom verification modes;currently if you create a delegatingmethod and compare it to itself using .equals() it will show as not equal because the .equals() method expects a java.lang.reflect.method (without explicitly stating such).  this has a knock on effect on the evaluation of invocationimpl.equals() which at runtime may be using a delegatingmethod in its .equals().  i have changed .equals() and .hashcode() in delegatingmethod to a more appropriate implementation  which can handle both the case where the input object is a delegatingmethod and where it is a java.lang.reflect.method.  i ran up against this issue when creating a custom verificationmode which used invocationimpl.equals() to check that the appropriate invocation was made.  my comparison failed even though i was comparing two references to the same invocationimpl instance.;;0; delegatingmethodequals() so that its easier to extend mockito by custom verification modes;currently if you create a delegatingmethod and compare it to itself using equals() it will show as not equal because the equals() method expects a javalangreflectmethod (without explicitly stating such)  this has a knock on effect on the evaluation of invocationimplequals() which at runtime may be using a delegatingmethod in its equals()i have changed equals() and hashcode() in delegatingmethod to a more appropriate implementation which can handle both the case where the input object is a delegatingmethod and where it is a javalangreflectmethodi ran up against this issue when creating a custom verificationmode which used invocationimplequals() to check that the appropriate invocation was made  my comparison failed even though i was comparing two references to the same invocationimpl instance;"hi szczepanthanks for the reply ill simplify the methods now - do i open a new pull request or somehow edit this one?  sorry - im new to github and git!i havent used a custom verificationmode in anger yet im actually writing a tutorial on mockito and wanted to show one as an example  the one i wrote would verify that an invocation was the first invocation on a mock and i had a lot of hair pulling when the equals() of my chunk and all invocations didnt evaluate to true even though it was the same object!regardshugh || verificationmode is not a public api devs are welcome to use it and tell us about the use cases :)it does have strict backwards-compatibility constraints other words we can change it without notice however we do plan to publicize this api if only there were more days in a week :)update this pr or create a new one whatever is simpler for youthanks again! || not sure why this failed to build - the tests are passing locallythanks for the info about verificationmode - ill stick a health warning in the tutorial for that section! || the build failed due to a flaky test dont worry about it || updated again i was a bit trigger happy with the commit! hopefully thats it! :) || oh right im merging it lets see if continuous deployment actually works :) || fyi: your change is already released:  || thats pretty cool! thanks for letting me know!on 26 sep 2014 17:41 ""szczepan faber"" notifications@githubcom wrote:> fyi: your change is already released:>  > —> reply to this email directly or view it on github>  || ";;;;1;1;removing redundant null check from delegatingmethodequals();
103;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks;see issue #99   what it does is propagating the serializing mode of the parent  upon each mock creation when deep stubbing.  before each mock created where made serializable by default. which is not an issue when the types have a default no arg constructor  but may become problematic when the type didn t have one  mockito would report an error explaining that it couldn t mock this type.;;99.0;fixes issue #99 : returns_deep_stubs automatically tries to create serializable mocks;see issue #99 what it does is propagating the serializing mode of the parent upon each mock creation when deep stubbingbefore each mock created where made serializable by default which is not an issue when the types have a default no arg constructor but may become problematic when the type didnt have one mockito would report an error explaining that it couldnt mock this type;awesome :)thanks brice for fixing the problem new version is already out   btw the release notes automation is based on the titles of the tickets in github: the better the title the better the release notes:  || ok ah yeah it makes sense i may be able to update it on the phone ||;returns_deep_stubs automatically tries to create serializable mocks;"i am just migrating from mockito 195 to 1105the following code runs fine with version 195 but breaks now:``` java  @test  public void test() {    tobemocked mock  mock(tobemockedclass returns_deep_stubs)    assertthat(mockgetsomething())isnotnull()  }  public static class tobemocked {    notserializablereturnvalue field1    public tobemocked(notserializablereturnvalue field1) {      thisfield1  field1    }    public notserializablereturnvalue getsomething() {      return field1    }  }  public static class notserializablereturnvalue {    string field1  """"    public notserializablereturnvalue(string field1) {      thisfield1  field1    }    public string getsomething2() {      return field1    }  }```orgmockitoexceptionsbasemockitoexception: you are using the setting withsettings()serializable() however the type you are trying to mock notserializablereturnvaluedo not implement serializable and do not have a no-arg constructor";heyperhaps mockito is too aggressive with this validation the thing is that this code could break if you stub some of those methods @bric3 thoughts?thanks for reporting! can you update your code and add serializable / default constructor? || i just experienced the same issue when i wanted to test our custom dsl api on my current project i believe there was some issue sometime ago before we moved to github about serialization it may relate to deep stubs ||  right?i dont really understand this validation - if i have no interest in my code being serializable nor serializing a mock/stub why do i have to make it so (and add default constructors allowing partially constructed objects) just to use deep stubs? shouldnt i have to opt-in if i need/want my deep stubs to be serializable or am i missing something? || @szczepiq hi for one occurence i was able to implement a default constructor for another occurence it did not feel sensible to add a default constructor i changed this and mocked all used method calls manually for me its ok now btw: thank you very much for sharing and caring for mockito! || for some reason the deep stub code was enabling _children_ stubs to be always serializable which doesnt make sense in the plane i crafted a fix ~~ill push it asap~~ || it should be  in 1108 || excellent thanks @bric3 ! let me take this chance to add that mockito is an excellent piece of software and a near-perfect mocking library imo - all of your efforts are highly appreciated :) i was at a workshop with michael feathers recently and was asking him whether he planned to update his book working effectively with legacy code to reflect the invent of modern (non-strict!) mocking frameworks such as mockito as in my opinion they have revolutionized dependency-breaking and bringing legacy code under test no luck but maybe someone should write a new updated such book :) || hey1108 was released to bintray/jcenter for some reason maven central syncdidnt work :(what do you think needs to be fixed so that mockito is perfect? :)on fri oct 10 2014 at 5:33 am chad notifications@githubcom wrote:> excellent thanks @bric3  ! let me take this> chance to add that mockito is an excellent piece of software and a> near-perfect mocking library imo - all of your efforts are highly> appreciated :) i was at a workshop with michael feathers recently and was> asking him whether he planned to update his book working effectively with> legacy code to reflect the invent of modern (non-strict!) mocking> frameworks such as mockito as in my opinion they have revolutionized> dependency-breaking and bringing legacy code under test no luck but maybe> someone should write a new updated such book :)> > ## > > reply to this email directly or view it on github>  szczepan fabercore dev@gradle founder@mockito ||;1;0;fixes issue #99 deep stubs where automatically marked as serializablewith this commit children mocks will use the serialization mode their parent;
113;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;improved exception handling of additionalanswers#delegatesto;when using the additionalanswers#delegatesto method  exceptions thrown by the delegate are wrapped in invocationtargetexception due to invocation via method. instead  the original exception from the delegate should be propagated to the caller.;;0;improved exception handling of additionalanswers#delegatesto;when using the additionalanswers#delegatesto method exceptions thrown by the delegate are wrapped in invocationtargetexception due to invocation via methodinstead the original exception from the delegate should be propagated to the caller;i have updated the commit message (hopefully this is correct?) || yeah the commit message is good just putting # of the ticket links it to the issue )btw its released:  ||;;;;1;1;propagate exceptions from additionalanswers#delegatestoissue #113;
142;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;128 : deep stubbing with generic responses in the call chain is not working;;;128.0;128 : deep stubbing with generic responses in the call chain is not working;;"also i kind of like the original unit test in #128 i propose you include it in this pr it could be name like : `orgmockitousagebugsdeepstubsdeepstubfailingwhengenricnestedasrawtypetest` if you can amend the change ill merge the pr || done - not sure its exactly what you were asking for but i dont see other option at the moment || the final diff looks good to me !could you squash the 6 commits in a single one (in the same branch / pr) ? better for the history ) || btw you should be able to do that this way : ``` bashgit reset --soft head~6git commit --message""fixes issue #128 for deep stubs with mixed raw generics type" || i was off for few days - i see szczepan did the job so theres noting left for me :)btw happy new year!cheers || ";deep stubbing with generic responses in the call chain is not working;"deep stubbing will throw an exception if multiple generics occur in the call chain for instance consider having a mock `mymock1` that provides a function that returns a generic `t` if `t` also has a function that returns a generic an exception with the message ""raw extraction not supported for : null"" will be thrownas an example the following test will throw an exception:``` javapublic class mockitogenericsdeepstubtest {    @test    public void discoverdeepmockingofgenerics() {        myclass1 mymock1  mock(myclass1class returns_deep_stubs)        when(mymock1getnested()getnested()returnsomething())thenreturn(""hello world"")    }    public static interface myclass1 <mc2 extends myclass2> {        public mc2 getnested()    }    public static interface myclass2<mc3 extends myclass3> {        public mc3 getnested()    }    public static interface myclass3 {        public string returnsomething()    }}```you can make this test run if you step into the class `returnsdeepstubs` and change the method `withsettingsusing` to return `mocksettings` with `returnsdeepstubs` instead of `returnsdeepstubsserializationfallback` as default answer:``` javaprivate mocksettings withsettingsusing(genericmetadatasupport returntypegenericmetadata mockcreationsettings parentmocksettings) {    mocksettings mocksettings  returntypegenericmetadatahasrawextrainterfaces() ?            withsettings()extrainterfaces(returntypegenericmetadatarawextrainterfaces())            : withsettings()    return propagateserializationsettings(mocksettings parentmocksettings)            defaultanswer(this)}```however this breaks other tests and featuresi think the issue is that further generics are not possible to be mocked  returnsdeepstubsserializationfallback` since the `genericmetadatasupport` is ""closed"" at this pointthanks and kind regardstobias";;1;0;removed unnecessary imports;
144;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;enum answers implements now answer<object>;the enum type answers implements now the answer interface. this allows us to use the enum values in  mockito.mock(class answer) . this is handy when you have to test legacy code with powermockito and want to use both  @mock  and  mockito.mock(..) .      java @mock(answers=returns_deep_stubs)  classa a  classb b   public void setup(){   b= mock(classb mockito.returns_deep_stubs)   //<< static import is not possible here  but with this pull request we can use returns_deep_stubs we used in @mock. };;0;enum answers implements now answer<object>;the enum type answers implements now the answer interface this allows us to use the enum values in `mockitomock(classanswer)` this is handy when you have to test legacy code with powermockito and want to use both `@mock` and `mockitomock()```` java@mock(answersreturns_deep_stubs) classa aclassb bpublic void setup(){  b mock(classbmockitoreturns_deep_stubs)   //<< static import is not possible here but with this pull request we can use returns_deep_stubs we used in @mock}```;good idea i like italso the ide changed too much whitespaces to see the relevant change || [![coverage status]( decreased (-002%) when pulling   thanks for the change ||;;;;1;1;add a javadoc note to indicate that this method will be removed in afuture release;
176;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;make propertyandsetterinjection field sorting consistent;#155 is caused by calling  collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  for example  with fields of type  [iterable  integer  number]   it gives  iterable == integer  and  iterable == number   but also an inconsistent  integer < number .  i m not sure it s possible to sort consistently with a stateless  comparator   so this change switches to a  sortsupertypeslast  method that first sorts by name and then shuffles any subclasses to after their superclasses. it s slower  but should be deterministic. the existing tests are preserved by leaving behind a dummy  comparator  that uses the new sort method. new tests make sure that the sorted ordering doesn t depend on the original order.  155.;;155.0;make propertyandsetterinjection field sorting consistent;#155 is caused by calling `collectionssort` with a comparator that isnt always transitive as in the case where sorting by name and sorting by type hierarchy imply different ordersfor example with fields of type `[iterable integer number]` it gives `iterable  integer` and `iterable  number` but also an inconsistent `integer < number`im not sure its possible to sort consistently with a stateless `comparator` so this change switches to a `sortsupertypeslast` method that first sorts by name and then shuffles any subclasses to after their superclasses its slower but should be deterministic the existing tests are preserved by leaving behind a dummy `comparator` that uses the new sort method new tests make sure that the sorted ordering doesnt depend on the original order155;"wow nice pr thanks for diving in the problem !so i agree on the idea but ive mixed feelings on having a custom sort therealso i agree speed is not the real issue here anyway id prefer the algorithm to be deterministic || finally i like the comment in the commit messages though it would be better if the last 2 commit were amended properly :) || overall its really nice work   i you think its possible to rewrite with a comparator and rewrite a clean history ill merge _asap_ :) || thanks ive rebased to clean up historyusing `comparator` is trickier id really prefer to do that and i spent some time thinking about what state could be calculated to allow pairwise comparison however this is essentially a topological sort and i cant think of a way to do this short of using a custom sort and then preparing a `comparator` that checks indexes in that versionactually checking now thats exactly the fallback suggested in [this stackoverflow answer]( the only way i see that it would be possible to do using a comparator would be to first do a topological sort and then using the indexes of the objects in this sorting as keys when implementing the comparatorid be happy to add any more tests or change the style to increase confidence that its a safe implementation || mmmmh ok it would definitely be better to have the comparator but that seems a bit complex as you said so i propose 2 things then :1 without comparator it would be better to externalize the sorting in some class instead of a method could be used like       ``` java   sorted  new orgmockitointernalutilreflectiontopologysorter()sort()   ```2 thanks for the amend i propose that the proper commits starts `155` like you did in one of the previous commits github can track identify the keyword and the issue referencesorry to be nitpicky but as soon as the pr is merged there will be an automated release :)also tests are finethanks for the feedback and the interesting links :) ||   thanks for the modifications @josephw perfect pr :) || by the way do you have any remarks on the contributing guide (missing info style guideline git stuff etc) || its great that youve got a contribution guide i think a couple of the things i missed are mentioned by it but i might over-emphasise:>  at least one commit message in the pr contains ""fixes #id""and suggest a template commit message> clean commit historyyou could make the history rewriting explicit here something like we prefer a clean commit history rebased and squashed if necessary so that each commit clearly changes one things and there are no extraneous fix-ups?thanks for the feedback -- everything else seemed specific enough that a review was the only way to pick it up || @josephw ok thanks for the feedback too || ";internal comparator violates its general contract;log from my test run  comparison method violates its general contract!    at javautiltimsortmergehi(timsortjava:868)    at javautiltimsortmergeat(timsortjava:485)    at javautiltimsortmergeforcecollapse(timsortjava:426)    at javautiltimsortsort(timsortjava:223)    at javautiltimsortsort(timsortjava:173)    at javautilarrayssort(arraysjava:659)    at javautilcollectionssort(collectionsjava:217)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionorderedinstancefieldsfrom(propertyandsetterinjectionjava:125)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectioninjectmockcandidates(propertyandsetterinjectionjava:100)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionprocessinjection(propertyandsetterinjectionjava:77)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:68)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjection$ongoingmockinjectionapply(mockinjectionjava:92)    at orgmockitointernalconfigurationdefaultinjectionengineinjectmocksonfields(defaultinjectionenginejava:20)    at orgmockitointernalconfigurationinjectingannotationengineinjectmocks(injectingannotationenginejava:100)    at orgmockitointernalconfigurationinjectingannotationengineprocessinjectmocks(injectingannotationenginejava:62)    at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:56)    at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:108);it occures when bean under test has many fields (declaredfieldssize  44) ||;1;0;move the sorting into its own separate utility classcreate supertypeslastsortertest to hold the sorting implementation adjustthe tests accordingly and use it in propertyandsetterinjection;
201;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;200 : argumentcaptor.forclass is more friendly with generic types;we modify the signature of  argumentcaptor.fromclass(class<t>)  to better express the type relationship between the argument and the return type.  there is no change to the behavior of the method.  this change is to allow expressions such as:      java argumentcaptor<consumer<string>> captor = argumentcaptor.fromclass(consumer.class)      to type check  which is desirable as a convenience to users of  argumentcaptor .  we also add two tests to document this extension to the api  both of which fail to compile without this change to  argumentcaptor.fromclass .  these tests are unusual in that they make no assertions  this is justified because the change which they test is a change to the formal  or compile-time  properties of  argumentcaptor   not its behavior.;;200.0;200 : argumentcaptorforclass is more friendly with generic types;we modify the signature of `argumentcaptorfromclass(class<t>)` to better express the type relationship between the argument and the return type  there is no change to the behavior of the method  this change is to allow expressions such as:``` javaargumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```to type check which is desirable as a convenience to users of `argumentcaptor`we also add two tests to document this extension to the api both of which fail to compile without this change to `argumentcaptorfromclass`  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of `argumentcaptor` not its behavior;almost perfect pr :)maybe the contributing guide is missing something here but the exemple `#id` should have been expended to the real gh issue number actually the commit message should be something like :```200 : tweak generic signature of argumentcaptorfromclass```ill merge it asap :)thanks for the pr by the way ! || i updated the contributing guide with an exemple :)if youre unsure how to rename the commit :``` bashgit commit --amendgit push --force``` || the travis build is broken in some way your code is fine thanks for the change :) ||;argumentcaptorfromclasss return type should match a parameterized type;`argumentcaptorfromclass`s return type should match a parameterized type  ie the expression `argumentcaptorfromclass(class<s>)` should be of type `argumentcaptor<u>` where `s` is a subtype of `u`   for example:```argumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)```does not type check (ie it is a compile time error) it should type check the reasons that it is desirable for `argumentcaptorfromclass` to allow expressions such as the example above to type check are:1) `argumentcaptorfromclass` is intended to be a convenience method to allow the user to construct an argumentcaptor without casting the returned valuecurrently the user can devise a workaround such as: ```argumentcaptor<? extends consumer<string>> captor  argumentcaptorfromclass(consumerclass)```this workaround is inconvenient and so contrary to `argumentcaptorfromclass` being a convenience method2) it is inconsistent with `@captor` which can be applied to a field with a paramterized type  ie```@captor argumentcaptor<consumer<string>> captor ```type checks;pr #201 ||;1;0;200 : tweak generic signature of argumentcaptorfromclasswe modify the signature of argumentcaptorfromclass(class<t>) to better express the type relationship between the argument and the return type  there is no change to the behaviour of the method  this change is to allow expressions such as:argumentcaptor<consumer<string>> captor  argumentcaptorfromclass(consumerclass)to type check which is desirable as a convenience to users of argumentcaptorwe also add two tests to document this extension to the api both of which fail to compile without this change to argumentcaptorfromclass  these tests are unusual in that they make no assertions this is justified because the change which they test is a change to the formal or compile-time properties of argumentcaptor not its behaviour;
202;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;better protection against incompatible returned value of default answer  and get safely mock name;fixes issue #187  the value returned by the default answer is now validated to make sure there won t be a  classcastexception  if the default value is incompatible with return type.  reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. this avoid a  classcastexception  when reporting a verification issue.;;187.0;better protection against incompatible returned value of default answer and get safely mock name;fixes issue #187the value returned by the default answer is now validated to make sure there wont be a `classcastexception` if the default value is incompatible with return typereporter now fetch in safer way the mock name in case the default answer is incorrectly implemented this avoid a `classcastexception` when reporting a verification issue;build is ok but fail on travis ||;javalangclasscastexception: javalangclass cannot be cast to javalangstring;exception throws on verifyzerointeractions when using mock with default answerchecked on versions 1105-205all ok on 195;"hido you have a junit test so that we could reproducealso please see the [contributing guide]( || ``` javapublic class mockitotest extends mockito {    public interface testmock {        public boolean m1()    }    @test    public void test() {        testmock test  mock(testmockclass new answer() {            @override public object answer(invocationonmock invocation) throws throwable {                return false            }        })        testm1()        verifyzerointeractions(test)    }}``` || hi sorry for the late replythanks for the testcase indeed we missed something therefor reference the stacktrace is :```javalangclasscastexception: javalangboolean cannot be cast to javalangstring    at orgmockitousagebugsclasscastexonverifyzerointeractionstest$testmock$$enhancerbymockitowithcglib$$91d883c5tostring(<generated>)    at javalangstringvalueof(stringjava:2847)    at javalangstringbuilderappend(stringbuilderjava:128)    at orgmockitoexceptionsreporternomoreinteractionswanted(reporterjava:420)    at orgmockitointernalverificationnomoreinteractionsverify(nomoreinteractionsjava:24)    at orgmockitointernalmockitocoreverifynomoreinteractions(mockitocorejava:113)    at orgmockitomockitoverifyzerointeractions(mockitojava:1674)    at orgmockitousagebugsclasscastexonverifyzerointeractionstesttest(classcastexonverifyzerointeractionstestjava:23)``` || actually the usage report was improved to include the mock name however in this usage the default answer always returns `false` so when the string message is generated theres a cce because the default answer returns a `boolean`on your side the workaround is to return valid values for these `object` inherited methodson mockito side there should be two possible thing to do:- get the name safely without invoking `tostring`- validate more aggressively answers result || hello ive one doubt can we do casting for mocking objects? when i tried to do that i got ""javalangclasscastexception"" || ";1;0;ensure the default answer actually returns a compatible result related to #187;
207;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;197 : blocks ability to use negative value for timeout() and after() method.;it should  #197.   if user uses mockito.after() or mockito.timeout() with negative values  then friendly reminder exception with details will be thrown.;;197.0;197 : blocks ability to use negative value for timeout() and after() method;it should  #197 if user uses mockitoafter() or mockitotimeout() with negative values then friendly reminder exception with details will be thrown;first commit fixes the issue second one is a little bit of refactoring: (mostly reducing visibility and increasing encapsulation)197 : refactoring: - removed unused field from verificationovertimeimpl and also from constructors signature- improved encapsulation by removing 3 getters from verificationovertimeimpl- reduced visibility of few constructors in timeout and after classes   || nice pull request thank you !if comments are addressed ill merge right away ! || about timeouttest please look at it the whole point of this test is to pass timer object and do mocking/verifications on it if i use public constructor for this test i will not to able to pass timer objectthis is why constructor with this signature timeout(long pollingperiodmillis verificationmode delegate timer timer) was introduced by author in first place should i really touch it?btw there in so such thing like aftertest || oh yeah i see fair point just ignore what i said on thatignore the `aftertest` too i was a bit off this morning thanks for the feedback :) ||;mockitoafter() method accepts negative timeperiods and subsequent verifications always pass;eg```runnable runnable  mockitomock(runnableclass)mockitoverify(runnable mockitonever())run() // passes as expectedmockitoverify(runnable mockitoafter(1000)never())run() // passes as expectedmockitoverify(runnable mockitoafter(-1000)atleastonce())run() // passes incorrectly```;well spotted thx || i can try to fix that but need to know what exactly is the issue here:should negative values in after method be forbidden and trigger exception to be thrown? or maybe negatives are allowed here (negative value means - immediately pretty much it should behave like after(0) )? || i would vote for an illegalargumentexception being thrown || the same is happening for _timeout_ method:eg ```       someclazz mock  mockitomock(someclazzclass)       mockitoverify(mock timeout(-100))somemethod() //passes which is incorrect```if method was invoked then it passes but this negative timeout is at least confusing:```        someclazz mock  mockitomock(someclazzclass)        mocksomemethod()        mockitoverify(mock timeout(-100))somemethod() //passes``` ||;1;0;197 : timeout class constructors grouped together;
211;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;argumentcaptor no longer working for varargs;188 . these commits should  with capturing varargs.;;188.0;argumentcaptor no longer working for varargs;188  these commits should  with capturing varargs;hi thanks for the pri will take a look at it soon and probably merge it in the mean time git history is fine except the merge commit can you get rid of it ?otherwise ill have to cherry-pick relevant commits || i will try to do rebase and then do force push hope it will work take a lookhm i see merge conflicts probably due your activity today :) || commit looks good but indeed theres some conflict to narrow down ill take a look later thanks for the rebase ) || now it should work || thanks ) ||;argumentcaptor no longer working for varargs;i ran into the issue described here: http://stackoverflowcom/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor;hi sorry for the late replyi reproduced the issue not sure when i will be able to fix though ||  by #211  ||;1;0;188 :  typo in capturesargumentsfrominvocation refactor of invocationmatcher;
215;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improves injectmocks behavior when injectee has multiple fields of the same type;fix to @injectmocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. this makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.;;0;improves injectmocks behavior when injectee has multiple fields of the same type;fix to @injectmocks which injected incorrectly when multiple fieldsof the same type could be injected into but only supplying 1 mockthis makes sure that whenever there are multiple type candidatesit will hold off injecting if it finds a different field which has the correct matching name;will  described in #205 ||;;;;1;1;205fix to @injectmocks which injected incorrectly when multiple fieldsof the same type could be injected into but only supplying 1 mockthis makes sure that whenever there are multiple type candidatesit will hold off injecting if it finds a different field which has the correct matching name;
221;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions;follow-up to #212;;212.0;212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions;follow-up to #212;thanks @mkordas  ||;add bdd version of verifyzerointeractions();"right now my tests look like:``` javathen(file)should()moveto(directory)then(log)should()warn(""moved file""))verifyzerointeractions(otherfile)```would be great to have bdd replacement for `verifyzerointeractions()` then the test would be even nicer:``` javathen(file)should()moveto(directory)then(log)should()warn(""moved file""))then(otherfile)shouldhavezerointeractions()```";ok are you ready for a pr ? || @bric3 please see #221 ||;1;0;212 : add shouldhavezerointeractions as bdd version of verifyzerointeractions;
222;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;203 : introduce bdd inorder verification;follow-up to #203.;;203.0;203 : introduce bdd inorder verification;follow-up to #203;;introduce bdd inorder verification;"follow-up to the [discussion]( is great but right now it doesnt support inorder verification here is my proposition:##### initialization and invocations:``` javalist firstmock  mock(listclass)list secondmock  mock(listclass)firstmockadd(""was called first"")secondmockadd(""was called second"")secondmockadd(""was called second"")inorder inorder  inorder(firstmock secondmock)```##### current non-bdd solution:``` javainorderverify(firstmock)add(""was called first"")inorderverify(secondmock)add(""was called second"")```##### proposition 1:``` javainorderthen(firstmock)should()add(""was called first"")inorderthen(secondmock)should(times(2))add(""was called second"")```##### proposition 2:``` javathen(firstmock)should(inorder)add(""was called first"")then(secondmock)should(inorder times(2))add(""was called second"")```im open to other propositions what do you think? i can proceed with pr as soon as we will agree on api";it seems like a nice idea lets introduce ordered bdd id favor proposition 2 it reads better imhosince we are in a beta phase we can try and see if the api works with this proposition also it should probably be easier to implement || also sorry for this late reply || @bric3 ive implemented the second proposition i also like it more and implementation was really easy - please see #222 ||;1;0;203 : introduce bdd inorder verification;
223;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;206]  related to windows path;problem was caused by file separator. replacing hardcoded char  /  by file.seperatorchar solves issue. in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case  /  is only acceptable separator.;;206.0;206]  related to windows path;problem was caused by file separator replacing hardcoded char / by fileseperatorchar solves issue in the same file there is second occurence of this character but it is used with getresource(path) method -  in such case / is only acceptable separator;do i need to do something special in order to build with java 8? it looks like problem with default method - i create branch from master || dont worry about that error ill push the fix at some point todaythanks for fixing the windows test issue :) ||;nojunitdependenciestest is failing on windows machine;i found nojunitdependenciestest unit test is the only unit test that fails when you run the build on windows machine (i have also ubuntu and it is fine for some reason on unix platform)root cause: caused by: javalangnoclassdeffounderror: org\mockito\internal\invocation\invocationmarker (wrong name: org/mockito/internal/invocation/invocationmarker)full stacktrace  org\mockito\internal\invocation\invocationmarker has some dependency to junit    at orgmockitointegrationnojunitdependenciestestcheckdependency(nojunitdependenciestestjava:36)    at orgmockitointegrationnojunitdependenciestestpure_mockito_should_not_depend_junit(nojunitdependenciestestjava:28)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:57)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:45)    at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:15)    at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:42)    at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:20)    at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:263)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:68)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:47)    at orgjunitrunnersparentrunner$3run(parentrunnerjava:231)    at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:60)    at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:229)    at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:50)    at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:222)    at orgjunitrunnersparentrunnerrun(parentrunnerjava:300)    at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:86)    at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:49)    at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:69)    at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:48)    at sunreflectgeneratedmethodaccessor37invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    at orggradlemessagingdispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)    at orggradlemessagingdispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)    at comsunproxy$proxy2processtestclass(unknown source)    at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:105)    at sunreflectgeneratedmethodaccessor36invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    at orggradlemessagingremoteinternalhubmessagehub$handlerrun(messagehubjava:360)    at orggradleinternalconcurrentdefaultexecutorfactory$stoppableexecutorimpl$1run(defaultexecutorfactoryjava:64)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:722)caused by: javalangnoclassdeffounderror: org\mockito\internal\invocation\invocationmarker (wrong name: org/mockito/internal/invocation/invocationmarker)    at javalangclassloaderdefineclass1(native method)    at javalangclassloaderdefineclass(classloaderjava:791)    at javasecuritysecureclassloaderdefineclass(secureclassloaderjava:142)    at javaneturlclassloaderdefineclass(urlclassloaderjava:449)    at javaneturlclassloaderaccess$100(urlclassloaderjava:71)    at javaneturlclassloader$1run(urlclassloaderjava:361)    at javaneturlclassloader$1run(urlclassloaderjava:355)    at javasecurityaccesscontrollerdoprivileged(native method)    at javaneturlclassloaderfindclass(urlclassloaderjava:354)    at orgmockitoutilclassloaders$localexcludingurlclassloaderfindclass(classloadersjava:156)    at javalangclassloaderloadclass(classloaderjava:423)    at javalangclassloaderloadclass(classloaderjava:356)    at javalangclassforname0(native method)    at javalangclassforname(classjava:266)    at orgmockitointegrationnojunitdependenciestestcheckdependency(nojunitdependenciestestjava:34)     41 more;hithanks for reporting i dont own a windows box so i dont know if i will fix this one asapthis has probably something to do with the path thats the only thing that come to me at that time || i reproduced problem and found solution - in a sec i will create pr ||;1;0;206]  related to windows path;
229;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;228: fixed a verify() call example in @captor javadoc;;;228.0;228:  a verify() call example in @captor javadoc;;thanks for the fix :) ||;@captor javadoc contains a wrong call example;in the javadoc of `@captor`:```verify(mockdostuff(captorcapture()))```which is incorrect;cool thanks :) ||;1;0;228:  a verify() call example in @captor javadoc;
234;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;cannot instantiate type with public method of a public parent class having a non public types in signature;this should 233  (awaiting delivery of bytebuddy fix   thanks @raphw;;233.0;cannot instantiate type with public method of a public parent class having a non public types in signature;this should 233(awaiting delivery of bytebuddy fix  @raphw;actually  in bytebuddy 0610 in commit  ||;mockito 2014 fails to mock jetty httpclient;this fails:<pre>     import orgeclipsejettyclient       mock( 9210v20150310)with mockito 202-beta i can mock that class without a problem stacktrace:<pre>javalangillegalaccesserror: tried to access class orgeclipsejettyutilcomponentcontainerlifecycle$managed from class orgeclipsejettyclient    at orgeclipsejettyclient source)    at sunreflectgeneratedserializationconstructoraccessor2newinstance(unknown source)    at javalangreflectconstructornewinstance(constructorjava:408)    at orgobjenesisinstantiatorsunsunreflectionfactoryinstantiatornewinstance(sunreflectionfactoryinstantiatorjava:45)    at orgobjenesisobjenesisbasenewinstance(objenesisbasejava:73)    at orgmockitointernalcreationinstanceobjenesisinstantiatornewinstance(objenesisinstantiatorjava:14)    at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:27)    at orgmockitointernalutilmockutilcreatemock(mockutiljava:33)    at orgmockitointernalmockitocoremock(mockitocorejava:59)    at orgmockitomockitomock(mockitojava:1392)    at orgmockitomockitomock(mockitojava:1270)</pre>;is this an osgi package ? || also a general principle when mocking is _to not mock types you dont own_ theres several reasons for that see that [wiki page]( the issue is probably true but i cannot reproduce locally do you have additional informations like jetty version jvm version (openjdk hotspot j9 ) ? || yeah i know about that rule this is from a really tiny method and i just want to check that it invokes the start method oracle jdk8_11 jetty 9210 || the `managed` inner class is package-private:  class should never be accessible from `orgeclipsejettyclient or any mock which both live in another package i assume that you have a version clash on your class path creating a mock can trigger lazy class path resolutions that are not even triggered in your production code via the class introspection that is required to create the mock  || ok but the  class can be instantiated just fine by calling its constructorclient  new  || also the managed enum is only used inside containerlifecycle  || i now see what the problem is byte buddy overrides the public method `containerlifecycle::addbean(object o managed managed)` in order to allow mocking the method call for this the mock references the `managed` class which is however package-privatewhile this is a rather poorly designed api as the method should itself be package-private as it cannot be used outside of the package byte buddy should be smart enough to figure this out it is a small fix i have it ready some time this week thanks for reporting! || thanks i agree that the package structure and api design of jetty is a bit strange || @raphw thanks for the investigation || @christophsturm thanks for the feddback too note mockito 200 is still in beta phase || sure! we will just continue to use 202-beta for now which works great || you can use a more recent beta `208-beta` the last version before switching to bytebuddy || byte buddy 069 is released which should fix the issue sorry for the hick-up (in jcenter currently synchronizing to maven central) || no problem you were blazingly fast ! ||;1;0;233 : cannot instantiate type with public method of a public parent class having a non public types in signaturereformated a bit the generator for improved readability;
235;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;220 constructor invoking methods raise npe;in some recent version of mockito  @spy  annotation will use the constructor rather than objenesis  that mean that constructor carry actual work. but since the interceptor set after instantiation  this raised an npe with bytebuddy. it wasn t an issue with cglib but it probably didn t event intercept such calls (unconfirmed at this point).  this pr aims to fix that by calling real code  if interceptor is not set  which can only happen if  constructorinstanciator  is used  thanks to @raphw for his tip on this regard as well : https://github.com/raphw/byte-buddy/issues/32#issuecomment-113269844;;220.0;220 constructor invoking methods raise npe;in some recent version of mockito `@spy` annotation will use the constructor rather than objenesis that mean that constructor carry actual work but since the interceptor set after instantiation this raised an npe with bytebuddy it wasnt an issue with cglib but it probably didnt event intercept such calls (unconfirmed at this point)this pr aims to fix that by calling real code if interceptor is not set which can only happen if `constructorinstanciator` is usedthanks to @raphw for his tip on this regard as well : https://githubcom/raphw/byte-buddy/issues/32#issuecomment-113269844;i just saw that you chose to invoke the real method instead of returning a default value that might cause problems when the invoked method expects some state then again if the constructor is called the constructor might always receive correct input values?i added another interceptor to make the field receival a bit more convenient and runtime efficient and if you wanted to aupress the calls from the constructor (might be unsuitable for spies) i think i also found a better alternative for thati just send you a pull request on monday || yes for constructors that made sense (when spy is instantiated with constructor) though i agree with you other than this scenario it shouldnt be authorized i didnt yet wrap entirely my head around this yetim not yet sure how to ensure a bit more safety there ||;208-beta -> 209-beta unable to initialize @spy annotated field;no test failures when using 208-beta but when incrementing to 209-beta the following error occurs:```orgmockitoexceptionsbasemockitoexception: unable to initialize @spy annotated field monitortaskschedulerunable to create mock instance of type monitortaskscheduler    at netprojectdashmonitormonitortaskscheduler$mockitomock$1184625981getexecutorservice(unknown source)    at netprojectdashmonitormonitortaskscheduler<init>(monitortaskschedulerjava:39)    at netprojectdashmonitormonitortaskscheduler$mockitomock$1184625981<init>(unknown source)    at sunreflectnativeconstructoraccessorimplnewinstance0(native method)    at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:62)    at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)    at javalangreflectconstructornewinstance(constructorjava:422)    at orgmockitointernalcreationinstanceconstructorinstantiatorinvokeconstructor(constructorinstantiatorjava:42)    at orgmockitointernalcreationinstanceconstructorinstantiatornoargconstructor(constructorinstantiatorjava:66)    at orgmockitointernalcreationinstanceconstructorinstantiatornewinstance(constructorinstantiatorjava:17)    at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:27)    at orgmockitointernalutilmockutilcreatemock(mockutiljava:33)    at orgmockitointernalmockitocoremock(mockitocorejava:59)    at orgmockitomockitomock(mockitojava:1284)    at orgmockitointernalconfigurationspyannotationenginenewspyinstance(spyannotationenginejava:117)    at orgmockitointernalconfigurationspyannotationengineprocess(spyannotationenginejava:67)    at orgmockitointernalconfigurationinjectingannotationengineprocessindependentannotations(injectingannotationenginejava:73)    at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:55)    at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:108)    at netprojectdashmonitormonitortaskschedulertestsetup(monitortaskschedulertestjava:38)```relevant code (monitortaskschedulertestjava)``` java@spymonitortaskscheduler monitortaskscheduler@beforepublic void setup(){    mockitoannotationsinitmocks(this)}```relevant code (monitortaskschedulerjava)``` javapublic class monitortaskscheduler{    public monitortaskscheduler()    {        thisfuturetotaskmap  new concurrenthashmap<>()    }}```;"can you try with 2011-beta ? || same problem with 2011-beta (in fact i started with that version and then decremented one by one till the problem was gone) || if i had to make a (somewhat) educated guess i would say it is most likely related to 3b445aa057ada4e64b096634b011eab399f03f56 || its not really that commit it probably have to do with the change from cglib to bytebuddy i cannot reproduce locally can you craft a reproducible test ? || monitortaskschedulerjava: ``` javapublic class monitortaskscheduler{    private final map<scheduledfuture<?> monitortask> futuretotaskmap    private final scheduledexecutorservice executor    public monitortaskscheduler()    {        futuretotaskmap  new concurrenthashmap<>()        executor  (scheduledexecutorservice) getexecutorservice()    }    @visiblefortesting    executorservice getexecutorservice()    {        return new monitortaskexecutor(this)    }}```monitortaskschedulertestjava:``` java@spymonitortaskscheduler monitortaskscheduler@beforepublic void setup(){    mockitoannotationsinitmocks(this)    doreturn(new synchronousexecutor())when(monitortaskscheduler)getexecutorservice()}@testpublic void test(){    monitortaskschedulerschedule(() -> { systemoutprintln(""task"") })}public class synchronousexecutor extends abstractexecutorservice{    private volatile boolean shutdown    public void shutdown()    {        shutdown  true    }    public list<runnable> shutdownnow()    {        return null    }    public boolean isshutdown()    {        return shutdown    }    public boolean isterminated()    {        return shutdown    }    public boolean awaittermination(long time timeunit unit) throws interruptedexception    {        return true    }    public void execute(runnable runnable)    {        runnablerun()    }}``` || ive identified an issue but the given code is incomplete and i dont get the same stacktrace so it may be another issueheres mine : ``` javapublic class construcotrinvokingmethodshouldworktest {    @spy hasconstructorinvokingmethod hasconstructorinvokingmethod    @test    public void should_be_able_to_create_spy() throws exception {        mockitoannotationsinitmocks(this)    }    private static class hasconstructorinvokingmethod {        public hasconstructorinvokingmethod() {            somemethod()        }        void somemethod() { }    }}```in the meantime two workaround sticks to an older version or modify the code so it doesnt call methods in the constructor which may indicate the design is wrong in oop (builders or factory to the rescue) || actually there maybe a better workaround using the `mockitospy()` factory method``` javaclass monitortaskschedulertest {// @spymonitortaskscheduler monitortaskscheduler  spy(new minitortaskscheduler())```this even works with `@injectmocks` || sorry for not providing a complete examplewas trying to copy and paste stuff from difference sources for simplification purposes glad you were at least able to identify an issue out of it i will take your suggestions and do what i can  youre welcome thanks for testing betas ) || 2d036ec  my original issue indeed! thanks so much great work || ";1;0;220 : invokes real method when using constructor instanciator;
238;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moves responsibility of istypemockable to mockmaker;mock makers may have different capabilities. historically cglib and mockito were deeply related  later mockmaker was created to allow android developers to use dexmaker to create mocks. but logic that decided if a type could be mocked still reside in the mockito base  while it should be the responsibility of the mockmaker.  also for example one could create his own mockmaker that forbid to mock type if some annotation is present.;;0;moves responsibility of istypemockable to mockmaker;mock makers may have different capabilities historically cglib and mockito were deeply related later mockmaker was created to allow android developers to use dexmaker to create mocks but logic that decided if a type could be mocked still reside in the mockito base while it should be the responsibility of the mockmakeralso for example one could create his own mockmaker that forbid to mock type if some annotation is present;perfect thanks!ive added the incompatibility label so that we can generate migration guide automatically || ok im still polishing this one a bit ||;;;;1;1;improves this test behavior when run inside idea;
239;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;rework stubbing api with consecutive vararg to avoid jdk7+ warnings;the motivation behind this rework  is that developers using jdk7+ see compiler warnings on some varargs methods.  while these warning are false alarms  users may not feel the same way. these compiler warnings cannot be entirely avoided   annotations like  @safevarargs  don t work on interfaces  and  @suppresswarning({ unchecked    varargs })  have a limited impact on user code.  **as these annotations have limited impact  and most people use a single argument anyway  i propose to to introduce api that takes a single argument. while an overload can takes more arguments**  if we don t do that i.e. if we keep the same api with compiler warnings it may encourages users to add  @suppresswarning({ unchecked    varargs })  in their test code  thus potentially hiding bugs in their code base.;;0;rework stubbing api with consecutive vararg to avoid jdk7+ warnings;"the motivation behind this rework is that developers using jdk7+ see compiler warnings on some varargs methodswhile these warning are false alarms users may not feel the same way these compiler warnings cannot be entirely avoided  annotations like `@safevarargs` dont work on interfaces and `@suppresswarning({""unchecked"" ""varargs""})` have a limited impact on user code**as these annotations have limited impact and most people use a single argument anyway i propose to to introduce api that takes a single argument while an overload can takes more arguments**if we dont do that ie if we keep the same api with compiler warnings it may encourages users to add `@suppresswarning({""unchecked"" ""varargs""})` in their test code thus potentially hiding bugs in their code base";  ;;;;1;1;adds more bdd will(answer);
240;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fixes coverage reports;test coverage reports have been broken with gradle without satisfying explanation  for quite some time. this pull request hopes to fix things;;0;fixes coverage reports;test coverage reports have been broken with gradle without satisfying explanation for quite some time this pull request hopes to fix things;this can close #164 as well ||;;;;1;1;fixes coverage reports;
252;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;251] migrate fest assert code to assertj;251;;251.0;251] migrate fest assert code to assertj;251;  ;unit tests improvements: migrate from legacy fest assert code to assertj;triggered by #250;;1;0;251] migrate fest assert code to assertj251;
261;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;260: typo in documentation;very minor typo in documentation:   there s an extra  at  (@) in the documentation.  before it reads:  annotating the junit test class with a @runwith(@mockitojunitrunner.class)   after it reads:  annotating the junit test class with a @runwith(mockitojunitrunner.class)   (https://cloud.ent.com/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749.png);;260.0;260: typo in documentation;"very minor typo in documentation:  an extra ""at"" (@) in the documentationbefore it reads:""annotating the junit test class with a @runwith(@mockitojunitrunnerclass)""after it reads:""annotating the junit test class with a @runwith(mockitojunitrunnerclass)""(https://cloudentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png)";   merging **#261**   cool thanks for the fix :) ||;typo in documentation;"very minor thing theres an extra ""at"" (@) in the documentationif you go to http://sitemockitoorg/mockito/docs/current/org/mockito/mockitohtml#33(https://cloudentcom/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749png)";;1;0;"260: typo in documentationtheres an extra ""at"" (@) in the documentationbefore it reads:""annotating the junit test class with a @runwith(@mockitojunitrunnerclass)""after it reads:""annotating the junit test class with a @runwith(mockitojunitrunnerclass)""";
264;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo in docs  missing breaklines.;  elements 32 and 33 show inline because they are missing a breakline.  (https://cloud.ent.com/assets/338917/8639441/43dba808-28a8-11e5-8e9e-5bfc9dcc92bb.png);;0;fix typo in docs missing breaklines; 32 and 33 show inline because they are missing a breakline(https://cloudentcom/assets/338917/8639441/43dba808-28a8-11e5-8e9e-5bfc9dcc92bbpng);  ;;;;1;1;fix typo in docs missing breaklines;
270;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;issue #268: added support for generic arrays as return types.;solves  by explicitly checking for return types that represent a generic array and by resolving for the array s component type.;;268.0;issue #268: added support for generic arrays as return types;solves  by explicitly checking for return types that represent a generic array and by resolving for the arrays component type;  ;return_deep_stubs and toarray(t) stops working with versions > 195;with version 195 the following test works without a problem:```  @test  public void toarraytypeddoesnotwork() throws exception {    container container  mock(containerclass returns_deep_stubs)    containergetinnercontainer()gettheproblem()toarray(new string{})  }  class container {    private innercontainer innercontainer    public innercontainer getinnercontainer() {      return innercontainer    }  }  class innercontainer {    private set<string> theproblem    public set<string> gettheproblem() {      return theproblem    }  }```with version 1100 and beyond (including 2026-beta) the following exception gets thrown```orgmockitoexceptionsbasemockitoexception: ouch it shouldnt happen type sunreflectgenericsreflectiveobjectsgenericarraytypeimpl on method : public abstract <t> t javautilsettoarray(t) is not supported : t    at eulindenbaumtoarrayproblemtesttoarraytypeddoesnotwork(bookingwebservicetestjava:102)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)    at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)    at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)    at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)    at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:26)    at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)    at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)    at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)    at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)    at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)    at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)    at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)    at orgjunitrunnerjunitcorerun(junitcorejava:137)    at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:78)    at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:212)    at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:68)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at comintellijrtexecutionapplicationappmainmain(appmainjava:140)```using```    container container  mock(containerclass returns_mocks)```instead of```    container container  mock(containerclass returns_deep_stubs)```works;i looked at the code and it seems like there is no specific handler for generic arrays the strange thing is that there never was onedid you maybe run with a different java version in the process? until java 7 non-generic arrays were also represented by instances of `genericarraytype` when returned from the generic reflection methods since java 7 generic arrays with a non-generic component type are properly resolved as `class` instancesnevertheless this needs a fix in mockito as i understand it i just sent a pull request || the test code is executed using oracle java 8 (18040-b25) on osxi updated mockito from 195 to 1100 in the process of updating from java7 to java8 || you are right the change came with java 8  with my pull request || @raphw nice catch and thanks for the patch :)@scameronde thanks for reporting :) || by the way @raphw as you may be one of the only person around mockito that can give thorough feedback on the generic support class in mockito do you see how to improve it ? || well as i am currently dealing with generic types a lot i can only tell that it is quite complex to beginn with but i am deep in the matter these days i will look at the implementation some time and see if i can improve it for now it looks save apart from the fact that you were missing generic type arrays || yes it was developed on java 7 and missed that anyway thanks again || you got to love the open source community thank you a lot for the fast response and the fix ||;1;0;issue #268: added support for generic arrays as return types;
280;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;reintroduce null check on mockutil.ismock();will 243 - null check on mockutil.ismock() was incorrectly removed after successive refactoring  this pr reintroduces null check;;243.0;reintroduce null check on mockutilismock();will 243 - null check on mockutilismock() was incorrectly removed after successive refactoring this pr reintroduces null check;  ;mockutilismock() no longer checks null;in version 195 mockutilismock() is defined as:```return instance ! null && ismockitomock(instance)```in v11019 and head the `instance ! null` check is gonethis method is called by mockscanner when injecting mock instances on fields where field values can be nullis this a bug? or its up to mockmakergethandler() to check for null?if its a bug i can fix it but then well need to wait for v20 before upgrading mockito for the companys code base if its up to the mock maker then i guess we need to fix googles dexmakermockmaker to add a line of `if (mock  null) return null`;"thanks for reporting this one ! || bytebuddymockmakergethandler(object mock) method checks for null using instanceof operator`if (!(mock instanceof mockaccess)) {    return null}`i presume it is not a bug  || > i presume it is not a bugnope || how about we document the change in the behavior javadoc ok?on sun jul 19 2015 at 11:28 pm brice dutheil notifications@githubcomwrote:> i presume it is not a bug> > nope> > —> reply to this email directly or view it on github>  szczepan faberfounder mockitoorg core dev gradleorgtweets as @szczepiq blogs at blogmockitoorg || `mockutil` is an internal class i dont think we have to document that one but i believe we should fix the code there || the public api (or spi) is mockmakergethandler(object mock)the current javadoc doesnt mention whether null could be passed in although in v195 it was guaranteed that nulls wont be passed inif v11019 drops that guarantee androids [dexmakermockmaker]( is broken because it doesnt make the effort to check for nulli personally think its pointless for mockito to ever call mockmakergethandler(null) because nothing but null would seem reasonable to be returned anyway so why risk the npe?but if this change in the implicit contract needs to happen the document change is at mockmakergethandler() something like ""null could be passed in and implementations should return null in that case"" would be clear enough || yes agreed with @fluentfuture  || while working on #277 i  the null-check in the mockscanner (as tests were failing if you would remove this check) the check can be [found here]( || ";1;0;#243 reintroduce null check on mockutilismock();
286;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;add new api method to reset invocations of a mock  while maintaining all existing stubbing;add new api method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **edit by mockito team** : 183;;0;add new api method to reset invocations of a mock while maintaining all existing stubbing;add new api method to reset invocations of a mock while maintaining all existing stubbing---**edit by mockito team** : 183;  ;;;;1;1;add new api method to clear invocations of a mock while maintaining all existing stubbing;
287;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;implement verificationcollector which can collect multiple verifications.;it will report in the end the result of multiple statements. 124;;124.0;implement verificationcollector which can collect multiple verifications;it will report in the end the result of multiple statements 124;  ;concise way to collect multiple verify failures ideally with junitcollector or  derivative;if you are using more than one verify statement as test post-conditions it would be nice to be able to collect each failure and continue with the remaining verify statements or asserts that follow  junit provides the errorcollector @rule to facilitate this kid of thing but the current [errorcollector api]( requires either- a matcher<t> and a value to compare- or a callable<object>the mockito verify statements only return void however since they depend on throwing exceptions  i have not thought of an ideal non-disruptive way to use junits errorcollector to aggregate multiple mockito verify failure;as a possible example of the way to handle it maybe it could be modeled after the same way that assertj added deferred composite assertion handling through [their own junit @rule]( ||;1;0;implement verificationcollector which can collect multiple verificationsit will report in the end the result of multiple statements 124;
288;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;add optional answer to support mocked builders;when googling the mocking of builders  a lot of people said it was not possible with mockito to support them in a clean way.  returns_deeps_stubs  does allow cascading  but can become quite fast very cumbersome. the added  returns_self  will try to return itself by looking at the method  returntype  and compare this with the class of the mock.;;0;add optional answer to support mocked builders;when googling the mocking of builders a lot of people said it was not possible with mockito to support them in a clean way `returns_deeps_stubs` does allow cascading but can become quite fast very cumbersomethe added `returns_self` will try to return itself by looking at the method `returntype` and compare this with the class of the mock;  ;;;;1;1;add optional answer to support mocked builders;
293;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;remove validateserializable();245:  remove serializable validation.;;245.0;remove validateserializable();245:remove serializable validation;  ;serializable check is too harsh;"hi apologies if this has been discussedwhile upgrading my companys mockito to 11019 i ran into a lot of this error:```orgmockitoexceptionsbasemockitoexception: you are using the setting withsettings()serializable() however the type you are trying to mock opportunityclientdo not implement serializable and do not have a no-arg constructorthis combination is requested otherwise you will get an javaioinvalidclassexception when the mock will be serialized```in summary there are two cases triggering this error1 the subjectundertest accepts an object foo and requires it to be serializable and yet foo doesnt implement serializable nor has a default constructor2 foo itself is serializable but the test calls `when(foocreatebar())thenreturn(bar)` which behind the scene puts the `bar` mock onto the state of foo which requires bar itself to be serializable in production bar isnt required to be serializablei feel case 1 is possibly reasonable (although its still kind of harsh ill get to it in a bit)case 2 should not require bar to be serializable as it does today in version 195 our tests worked around it by using `mock(barclass withsettings()serilizable()` but in version 11019 this workaround breaks if bar has no default constructorpossibly the [serializable proxy pattern]( could be used to solve this nicely by stashing the ""mock specifications"" into a proxy object that can later on deserialize itself back into a mock bar with the same number of when()thenreturn()now let me try to explain why i think even case 1 is too harshphilosophically i feel that its not mockitos job to ensure the mocked object works in real life its a mock object after all it isnt expected to meet all required specification of the real objectwhen in a test i say `@mock(serializabletrue) foo foo` im explicitly asking mockito to ""please pretend my object be serializable i dont want to worry about the real object in this test"" would the real object be serializable when i pass it into subjectundertest? well:1 there is nothing guaranteeing that production code passes foo to subjectundertest it could likely pass a cousin class realfoo2 that implements serializable just fine (or not but the test doesnt help me with that) it needs to be tested but imho not against a mock foo especially when mockitos when()thenreturn() syntax adds non-existent serializable requirement to the mock object2 given the proxy pattern that foo doesnt _look like_ a serializable class isnt a guarantee that it cant be so by throwing this error mockito enforces stricter constraint than whats technically necessaryi agree that checking basic serializable requirement in mockito can catch some bugs if case 2 can be  its likely that case 1 would not have triggered so many false positivesbut with all our workarounds already added because of case 2 and the fair number of our tests triggering this error the amount of work to fix all of them before we can upgrade mockito looks dauntingso i guess my question is: **can we do away with mockcreationvalidatorvalidateserializable() or make it an opt-in?**sorry for the long message";heres a real example the subject under test looks like this:```class subjectundertest implements serializable {  private final foofactory factory  subjectundertest(foofactory factory) {    thisfactory factory  }    foo foo  factorycreatefoo()  }```the testing framework actually tries to serialize subjectundertest so foofactory needs to be serializable toothe test using mockito looks like this:```foo foo  mock(fooclass)foofactory mockfactory  mock(foofactoryclass withsettings()serializable())when(mockfactorycreatefoo())thenreturn(foo)subjectundertest subject  new subjectundertest(mockfactory)```but when the framework serializes `subject` we get an exception because the line of `when(mockfactorycreatefoo())thenreturn(foo)` implicitly adds foo as part of `mockfactory` stateto work around the problem our tests had to make foo serializable too:```foo foo  mock(fooclass withsettings()serializable())```again production code doesnt need foo to be serializable and it may not have a default constructorthats status quonow with v11019 the above work-around breaks because foo doesnt implement serializable nor has a default constructorback to square one if i had the choice i would strongly discourage the code that mocks either foofactory or foo instead it should just be a plain old foofactory subclass that returns foo with java 8 the syntax would actually become more concise than the mockito syntax but i cant go back and fix so many teams code as it stands today this is the biggest issue blocking the upgradehopefully ive made a clear case || thanks for reportingim ok with removing the check or making it smarter it seems to be a legituse case brice?cheers!on fri jul 3 2015 at 2:50 pm ben yu notifications@githubcom wrote:> heres a real example the subject under test looks like this:> > class subjectundertest implements serializable {>   private final foofactory factory> >   subjectundertest(foofactory factory) {>     thisfactory factory>   }> >   >   foo foo  factorycreatefoo()>   > }> > the testing framework actually tries to serialize subjectundertest so> foofactory needs to be serializable too> > the test using mockito looks like this:> > foo foo  mock(fooclass)> foofactory mockfactory  mock(foofactoryclass withsettings()serializable())> when(mockfactorycreatefoo())thenreturn(foo)> subjectundertest subject  new subjectundertest(mockfactory)> > but when the framework serializes subject we get an exception because> the line of when(mockfactorycreatefoo())thenreturn(foo) implicitly adds> foo as part of mockfactory state> > to work around the problem our tests had to make foo serializable too:> > foo foo  mock(fooclass withsettings()serializable())> > > again production code doesnt need foo to be serializable and it may not> have a default constructor> > thats status quo> > now with v11019 the above work-around breaks because foo doesnt> implement serializable nor has a default constructor> > back to square one if i had the choice i would strongly discourage the> code that mocks either foofactory or foo instead it should just be a> plain old foofactory subclass that returns foo with java 8 the syntax> would actually become more concise than the mockito syntax> > but i cant go back and fix so many teams code as it stands today this> is the biggest issue blocking the upgrade> > hopefully ive made a clear case> > —> reply to this email directly or view it on github>  szczepan faberfounder mockitoorg core dev gradleorgtweets as @szczepiq blogs at blogmockitoorg || hi is this reasonable? i can send a pr to remove this check if its okay with you guys || lets remove the check unless brice objects )on fri sep 18 2015 at 9:08 pm ben yu notifications@githubcom wrote:> hi is this reasonable? i can send a pr to remove this check if its okay> with you guys> > —> reply to this email directly or view it on github>  szczepan faberfounder mockitoorg core dev gradleorgtweets as @szczepiq blogs at blogmockitoorg || @szczepiq @fluentfuture is this fix available in any of the mockito releases? || @vikkyrk since 2031-beta || thanks  ||;1;0;remove validateserializable();
294;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;removed deprecated returnvalues and all it s occurrences;these changes should  deal with  issue #273;;0;removed deprecated returnvalues and all its occurrences;these changes should deal with issue #273;commits has been squashed ||   ;;;;1;1;issue #273: removed deprecated method from mockito class api removed deprecated method from imockitoconfiguration and its implementations and returnvalues itself;
301;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactor some utilities and todo done;hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a todo but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   answers.java : private is not required  classpathloader.java: removed unnecessary imports scenarioprinter.java: changed the string concat into another append mockhandlerfactory.java: return statement changed to be inline valueprinter.java: todo done  null check added  edit  releasenotesextension : made authtoken a final string  edit 2:  some improvements to the threadtests :);;0;refactor some utilities and todo done;hey guys awesome framework +1 ive been looking at the code and i did some improvements also i did a todo but im not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq answersjava : private is not required classpathloaderjava: removed unnecessary importsscenarioprinterjava: changed the string concat into another appendmockhandlerfactoryjava: return statement changed to be inlinevalueprinterjava: todo done null check addededit releasenotesextension : made authtoken a final stringedit 2: some improvements to the threadtests :);  ;;;;1;1;refactor some utilities and todo donerefactor some utilities and todo donerefactor some utilities and todo donerefactor for boolean condition and null check improvedrefactor some utilities and todo donerefactor some utilities and todo donerefactor some utilities and todo donerefactor for boolean condition and null check improvednull check improveddefault value changed;
306;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;eliminate direct dependency on objenesisinstantiator;updated instantiatorprovider to be a plug-in  to eliminate direct dependency on objenesisinstantiator. this allows mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on ios.;;0;eliminate direct dependency on objenesisinstantiator;updated instantiatorprovider to be a plug-in to eliminate direct dependency on objenesisinstantiator this allows mockito to be used by runtimes that dont execute bytecode such as j2objc-translated code on ios;  ;;;;1;1;updated instantiatorprovider to be a plug-in to eliminate direct dependency to objenesisinstantiator;
309;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;tweaks to the main mockito javadocs to aid readability;@szczepiq as discussed  please review.;;0;tweaks to the main mockito javadocs to aid readability;@szczepiq as discussed please review;  ;;;;1;1;tweaks to the main mockito javadocs to aid readability;
314;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add shouldhavenomoreinteractions() to bddmockito;replicates  verifynomoreinteractions  on the bdd api.  ---  **edit by mockito team** : 311;;0;add shouldhavenomoreinteractions() to bddmockito;replicates `verifynomoreinteractions` on the bdd api---**edit by mockito team** : 311;  ;;;;1;1;311: add shouldhavenomoreinteractions() to bddmockito;
317;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;modify stacktracefilter to not exclude  good  stack trace elements;currently stacktracefilter filters in this way (example from javadoc): [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  g+]  this patch makes it work: [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  d+  e+  g+]  not sure why it was implemented first time in this strange manner.  ---  **edit by mockito team** : 316;;0;"modify stacktracefilter to not exclude ""good"" stack trace elements";currently stacktracefilter filters in this way (example from javadoc):[a+ b+ c- d+ e+ f- g+] -> [a+ b+ g+]this patch makes it work:[a+ b+ c- d+ e+ f- g+] -> [a+ b+ d+ e+ g+]not sure why it was implemented first time in this strange manner---**edit by mockito team** : 316;"  ;;;;1;1;modify stacktracefilter to not exclude useful stack trace elements between filtered out elements;
344;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;show correct location of unwanted interaction with mock when using mockitojunitrule;this pull request by @indy5858 and me changes the stacktrace filtering so that when using  mockitojunitrule  the correct location of an unwanted interaction with a mock.  before this commit the location on an unwanted interaction was not reported properly. instead of      no interactions wanted here: -> at <package>.<testclass>.<testmethod>(<testclass.java>:<linenumber>)      the assertion message said:      no interactions wanted here: -> at org.junit.runners.parentrunner.runleaf(parentrunner.java:325)      the issue with the current behaviour in master is that all stacktrace elements above an element containing  org.mockito.  are removed. as  org.mockito.internal.junit.junitrule  fullfills this condition and comes below the  payload  (i.e. test code and code under test) stack elements the interesting part of the stack is filtered. in case the pull request #317 (which we only found after hacking on this) is merged this pull becomes obsolete except for the two tests that are added: - checking that the  payload  stack elements aren t removed from the stack and - a test for removal of the byte buddy stack elements.;;0;show correct location of unwanted interaction with mock when using mockitojunitrule;"this pull request by @indy5858 and me changes the stacktrace filtering so that when using `mockitojunitrule` the correct location of an unwanted interaction with a mockbefore this commit the location on an unwanted interaction was notreported properly instead of```no interactions wanted here:-> at <package><testclass><testmethod>(<testclassjava>:<linenumber>)```the assertion message said:```no interactions wanted here:-> at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)```the issue with the current behaviour in master is that all stacktrace elements above an element containing ""orgmockito"" are removed as `orgmockitointernaljunitjunitrule` fullfills this condition and comes below the ""payload"" (ie test code and code under test) stack elements the interesting part of the stack is filteredin case the pull request #317 (which we only found after hacking on this) is merged this pull becomes obsolete except for the two tests that are added:- checking that the ""payload"" stack elements arent removed from the stack and- a test for removal of the byte buddy stack elements";  ;;;;1;1;add test for removal of bytebuddy stacktrace elements;
349;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;issue #345 : removes previously verified invocations when capturing argument is combined with after and atmost verifiers;solves #345 by removing already verified invocations before redundant capture of their arguments in atmost class.;;0;issue #345 : removes previously verified invocations when capturing argument is combined with after and atmost verifiers;solves #345 by removing already verified invocations before redundant capture of their arguments in atmost class;could you send me details of the failure? im not able to reproduce the problem || > process gradle test executor 1 finished with non-zero exit value 137its not your fault the gradle process was killed there could be a few reasons (like to large memory usage) the build should be rerun - @tarnowskijan you can force it by pushing (with  ;;;;1;1;#345 : fixes the issue by removing previously verified invocations before redundant capture of their arguments;
373;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;365 simplify the invocationonmock-api to get a casted argument;this pull request 365 by introducing  t getargument(int)  and deprecating  t getargumentat(int class<t>)  in type  invocationonmock . this improves the readabilty of custom answers.   this  string text = invocation.getargumentat(1 string.class)   can be replaced by...   string text = invocation.getargument(1);;365.0;365 simplify the invocationonmock-api to get a casted argument;this pull request 365 by introducing `t getargument(int)` and deprecating `t getargumentat(intclass<t>)` in type `invocationonmock` this improves the readabilty of custom answers this`string text  invocationgetargumentat(1stringclass)` can be replaced  string text  invocationgetargument(1)`;  ;simplify the invocationonmock-api to get a casted argument;"the 2nd argument of  `invocationonmockgetargumentat(intclass<t>)` can be removed cause it is not neccessaryintuitively on would write this to get a ""auto casted"" argument:`string text  invocationgetargumentat(1stringclass)`the type can be ommited without side effects (the implementation of invocationonmock discards it anyway)`string text  invocationgetargumentat(1null)`therefore mockito 20 should consider to simplify the api and ommit the `class`-argument here maybe it is also a good chance to simplify the method name too what about  `getargument(int index)` ?this is how the new api could look like:`string text  invocationgetargument(1)`";"i would like to mention that sometimes class argument can be usefulin my case i would like to catch object passed to mock and write to mongo databasethe code i would like to have is:```// test setupdoanswer(invocation -> mongotemplateinsert(invocationgetargument(0 personclass)))  when(mock)  mymethod(any())// test execution mockmymethod(new person(""joe"" ""doe""))```the reason of problem is that `mongotemplate` has 2 similar methods:```public <t> executableinsert<t> insert(class<t> domaintype) {) //(1)public void insert(object objecttosave) {) //(2)```afaiu when i setup `doanswer(invocation -> mongotemplateinsert(invocationgetargument(0))` type inference will choose method (1) and finally i get class cast exception `person` -> `class`unfortunately code `doanswer(invocation -> mongotemplateinsert((person)invocationgetargument(0))` does not compileto implement my test i have to define anonymous class `answer` so my code is long-winded - one-liner looks much better || ";1;0;365 introduced t getargument(int) and deprecated  t getargumentat(intclass<t>) in type invocationonmock;
376;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix typo in example in javadoc.;this is a trivial javadoc-only change  just fixing a typo.;;0;fix typo in example in javadoc;this is a trivial javadoc-only change just fixing a typo;  ;;;;1;1;fix typo in example in javadoc;
377;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;remove duplication.;simple documentation-only change.;;0;remove duplication;simple documentation-only change;  ;;;;1;1;remove duplicationremove duplicate description of automatic @spy field initialization;
381;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;312.  added documentation in ongoingstubbing.thenthrow().;this 312.  added documentation in ongoingstubbing.thenthrow where new throwsexceptionclass() is used to create a new throwable using objenesis.;;312.0;312  added documentation in ongoingstubbingthenthrow();this 312  added documentation in ongoingstubbingthenthrow where new throwsexceptionclass() is used to create a new throwable using objenesis;  ;throwsexceptionclass is urealiable - exception doesnt containt stack trace;"the `throwsexceptionclass` is using `objenesishelpernewinstance` which happens to have different strategy of creating objects depending on the jvm used im using java hotspot vm on this machine created `throwable` is initalized with all nullsas a result calling `throwablefillinstacktrace()` has no effect and there is no chance the stack trace is ever filled you can easily observe this behaviour by this sample code:``` javathrowable t  (throwable) objenesishelpernewinstance(throwableclass)tfillinstacktrace()tprintstacktrace()```after a bit of struggling i ended up using `throwsexception` instead of `throwsexceptionclass`objenesis strategy to create instances is dependent on vm name (returned  systemgetproperty(""javavmname"")`) so there is no 100% guarantee that this behaviour is reproduced on your machine";ok thanks for the report can you make a pull request to document that behaviour for `throwsexceptionclass` || thanks @zbigniewtomczak for doing the research on this  i just added the documentation  its in pr #381 ||;1;0;312  added documentation in ongoingstubbingthenthrow() for issue;
382;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;correct package declaration of verificationwithdescriptiontest;allows project to compile without errors in eclipse  check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  fixes #<issue number>  _if relevant_;;0;correct package declaration of verificationwithdescriptiontest;allows project to compile without errors in eclipsecheck list-  pr should be motivated ie what does it fix why and if relevant how-  if possible / relevant include an example in the description that could help all readers     including project members to get a better picture of the change-  avoid other runtime dependencies-  meaningful commit history  intention is important please rebase your commit history so that each     commit is meaningful and help the people that will explore a change in 2 years-  read the [contributing guide](  mention `<issue number>` in the description _if relevant_-  at least one commit should mention `fixes #<issue number>` _if relevant_;  ;;;;1;1;correct package declaration of verificationwithdescriptiontest;
386;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;remove deprecated code;fixes for #374 - more left though.;;374.0;remove deprecated code;fixes for #374 - more left though;  ;remove deprecated api from mockito 2;# this is a reminder to remove all deprecated apis from the upcoming mockito 2this issue blocks #123 [release mockito 20](123)relates to -  #273 [get rid of returnvalues](273);;1;0;delete class that was moved to internal;
389;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;lazily verify without calling collector.verify();as originally requested in #287: lazily verify all  mockito.verify()  calls inside junit test cases.;;0;lazily verify without calling collectorverify();as originally requested in #287: lazily verify all `mockitoverify()` calls inside junit test cases;i have to say that the code based on java 8 would be so much cleaner this could deter all verbose wrapping and setters with using  ;;;;1;1;lazily verify without calling collectorverify();
404;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;374 removed deprecated classes and methods;374 removed deprecated classes and methods;;374.0;374 removed deprecated classes and methods;374 removed deprecated classes and methods;"thanks for this pr and for fixing the formatting could you also squash all commits to a single one for better versioning?  @raphw i  the line ending issue is it okay to squash the commits once the review of all commits is fine? the removal of some deprecated classes and methods was more than simply removing it eg mockitojunitrule if my implementation is not okay it can easily be reverted  || @raphw do you know why the check ""codecov/changes"" fail? || @christianschwarz fixing issue and will report back shortly || @christianschwarz can you submit an empty commit for another rebuild i believe this issue was fixed within the last 6 days thank you || i do not currently have good internet access (vacation) please repush (forced) and see if it worksthanksfor the effort this will be merged eventually  || @raphw and @stevepeak thanks for your support ||   @raphw @szczepiq  @bric3 sorry for stressing you the people want mockito 2 & 3 (lambda) please comment and/or merge this pr its a little step in the right direction || ping || lgtm thanks for doing the chore work! || ";remove deprecated api from mockito 2;# this is a reminder to remove all deprecated apis from the upcoming mockito 2this issue blocks #123 [release mockito 20](123)relates to -  #273 [get rid of returnvalues](273);;1;0;374 removed deprecated types and methodsremoved deprecated deprecatedongoingstubbing and iongoingstubbingremoved deprecated method mockitostubvoid()removed deprecated annotation mockitoannotationsmockremoved @deprecated annotations of inner classes of bddmockito and madethem privateremoved deprecated methods verificationwithtimeoutnever() andverificationwithtimeoutatmost()removed deprecated class mockitojunitruleremoved deprecated enum answersremoved deprecated method invocationonmockgetargumentat(intclass)removed deprecated class returnselementsof compile error in extramatcherscorrected wrong package declaration in verificationwithdescriptiontest;
412;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fixed #407 vararg method call on mock object fails;;;407.0; #407 vararg method call on mock object fails;;@andreyrmg can you add your test too? || oh yes of course! im sorry but only tomorrow ||   added test || +1 for adding unit tests!can you also add your `defaultanswerdemo` test case to the usage tests (package orgmockitousagestubbing)? name proposal: stubbingwithdelegatevarargstest || sorry for delay i added usage test case and squash commits into oneand there is need to extend from `testbase` for calling help method `orgmockitoutiltestbase#invocationof(javalangclass<?> javalangstring javalangobject)` || lgtm thanks for figuring this one out and adding an extensive test suite luckily an easy fix ||;vararg method call on mock object fails when used orgmockitoadditionalanswers#delegatesto;"i try to mock interface with varargs method and default implementation in final class and get this error:```javalangillegalargumentexception: wrong number of arguments    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:498)    at orgmockitointernalstubbingdefaultanswersforwardsinvocationsanswer(forwardsinvocationsjava:31)    at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:93)    at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:29)    at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:38)    at orgmockitointernalcreationmethodinterceptorfilterintercept(methodinterceptorfilterjava:51)```i run the following code:``` javapublic class defaultanswerdemo {    public interface foo {        void bar(string baz object args)    }    public static final class fooimpl implements foo {        @override        public void bar(string baz object args) {            systemoutprintln(""bar"")        }    }    @test    public void defaultanswertest() {        foo fooimpl  new fooimpl()        foo foo  mock(fooclass withsettings()                defaultanswer(delegatesto(fooimpl)))        foobar(""baz"" 12 ""45"" 678)    }}```this is happens because orgmockitointernalinvocationinvocationimpl by default expands varargs arguments to flat list and i have no idea how correctly fix this";"this is a bug in [forwardsinvocations]( as you already investigated the expanded varargs are passed to the delegatethe current implementation does this:```result  delegatemethodinvoke(delegatedobject arguments)```mockito look for method with the signature `stringintstringdouble` for the given arguments (""baz""12""45""678) but such a method doesnt existsto fix the issue the raw/unexpanded arguments must be used```object rawarguments  ((invocation)invocation)getrawarguments() result  delegatemethodinvoke(delegatedobject rawarguments)```now mockito looks for method signature `stringobject` which is the var args method you want note: it is safe to cast to `invocation` here cause answers always get a invocation-instance passed from `mockhandlerimpl` if i find some time i will send a pr with a fix or you or some one else start to fix it  || here is pr i thought about cast but may be better pull up method [orgmockitoinvocationinvocation#getrawarguments]( to interface [orgmockitoinvocationinvocationonmock]( || @andreyrmg pulling `getrawarguments()` up to `invocationonmock` would help in this narrow use case on the other side it bloat the public api and migth confuse clients that implement custom answers which method to choose `getarguments()` or `getrawarguments()`  wdyt? || yes i agree with you but i think this is already a bit confusing that method `getargument()` returns expanded varargs maybe we need two methods `getarguments()` and `getexpandedarguments()`? || adding new api or changing existing behaviour need to be discussed with the core-membersi agree with you `getarguments()` should return unaltered/not expanded arguments the current `getarguments()` implementation has also the problem that is cant distinguish an null-vararg argument / `varargmethod(new type{null})` from an null-varag array / `varargmethod((type)null)` || ";1;0; #407 vararg method call on mock object fails;
413;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed method name to verifynomoreinteractions;;;0; method name to verifynomoreinteractions;;  lgtm ;;;;1;1; method name to verifynomoreinteractions;
419;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;bddmockito: rename willnothing to willdonothing;.. and keep the original signature as deprecated;;0;bddmockito: rename willnothing to willdonothing;and keep the original signature as deprecated;it linguistically sounds better to mei wonder if we need regression tests to stay in place if original method will be removed one daybtw @alb-i986 travis failed but it looks like a flaky test could you trigger it once again (eg with `git commit --amend`) || > i wonder if we need regression tests to stay in place if original method will be removed one daylooks like there are no tests in place for `willnothing` probably because it is not doing much but just forwarding to `mockito#donothing` || whats the story with this?maybe you want me to first open an issue as per contributing guidelines?cheers || @alb-i986 thanks for the ping i think this is fine so lgtm the deprecated method can be removed in mockito 30 ||;;;;1;1;bddmockito: rename willnothing to willdonothingand keep the original signature as deprecated;
424;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;inorder timeouts;*fixes issue    *updated code provided by  in pr #20  closes #20;;20.0;inorder timeouts;*fixes issue   *updated code provided by  in pr #20closes #20;could you please add tests to make sure the code is correctly behaving?also you have some unrelated changes mostly imports reordering please remove those as well || i should have some time to work on the code changes this weekend || @timvdlippe there was already a test there i just removed the @ignore tag ill add one for the exception throwing behavior as well i also removed the import reordering my ide was trying to be super helpful! || @jazzepi sounds great! :+1: the codecov status has to pass before this can be merged after the current feedback has been processed i will take another look but i think so far it is looking good! || @jazzepi could you rebase this pr and commit your changes? i would like to merge this sooner rather than later ||   @timvdlippe i think it should all be in working ordering now ive been doing git force pushes to my branch no idea if thats the accepted style but github seems to be figuring out what im doing i just wish it were layering patchsets on like gerrit does@christianschwarz i really puzzled over what you were looking for and could not understand how i could improve the code in the way youre describing id prefer this changeset get merged and then make whatever style changes you wanted yourself || lgtm ;implemented support for inorder evaluation of timeout verificationmode; for [issue 292]( that while the provided wrapping mechanism is generic enough to support both timeout and after usage the current implementation of verificationwithtimeouttestjava prevents correct usage with after this is because it repeatedly verifies until the timeout has elapsed thus marking all invocations that may have matched in the meantime as verified this will of course exhaust correct invocations and more often than not fail on the verification before the ager time has elapsed;hi im basically ok with the pr however i have a few remarks :- i dont like the name `verificationwrapperinorderwrapper` i would prefer something more meaningful in the same way the existing `verificationwrapper` could be renamed as well if you have some proposition ill gladly hear them- also it might be interesting to refactor existing code to support `verificationinordermode` so the code dont have to check against `verificationwrapper` class || ill review it soon thanks for the pr! || this is a feature id like too whats the status of this? any plans to merge it or put it on the road map? || we want to merge it but so far there wasnt enough time sorry! || i could also use this feature!  @sirchia could you please rebase this pr on current master then i can take a look and review sorry for the extremely delayed response hopefully you are still interested in making this contribution up-to-dateif this pr is not updated within 2 weeks i will close it as stale || @timvdlippe i had actually done that for my own private usage a while back ive provided a  that rebases the original pr by @sirchia ||;1;0;inorder timeouts  *fixes issue   *updated code provided by  in pr #20;
427;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactored class reporter to a static utillity;426 for class reporter   this pr changes the way errors are created and thrown. all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly. this improves the readability and eliminates the use of hacks to satisfiy the compiler.  here is a sample:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             reporter().noargumentvaluewascaptured()              return null          } else {             return arguments.getlast()          } }      the above code snipped can be rewritten to this:      public list<t> getlastvarargs() {         if (arguments.isempty()) {             throw noargumentvaluewascaptured()          }          return arguments.getlast()  };;426.0;refactored class reporter to a static utillity;426 for class reporter this pr changes the way errors are created and thrown all methods of the reporter are now static so they can be imported statically and return an exception instead of throwing it directly this improves the readability and eliminates the use of hacks to satisfiy the compilerhere is a sample:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            reporter()noargumentvaluewascaptured()            return null        } else {            return argumentsgetlast()        }}```the above code snipped can be rewritten to this:```public list<t> getlastvarargs() {        if (argumentsisempty()) {            throw noargumentvaluewascaptured()        }         return argumentsgetlast()}```;;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored class reporter to a static utility class;
429;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;added default answer for java.util.stream.stream;i hope the description says it all. :-)  the new java 8 based code only uses reflection  so the library still compiles and runs under older java versions.;;0;added default answer for javautilstreamstream;i hope the description says it all :-)the new java 8 based code only uses reflection so the library still compiles and runs under older java versions;;;;;1;1;added a default answer for javautilstreamstream if the code is running under java 8 or higher;
431;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;426 dropped class handyreturnvalues;#426  while refactoring the class handyreturnvalues  towards a static utility class i notices that it is not required at all. therefore i decided to remove the type  handyreturnvalues .;;426.0;426 dropped class handyreturnvalues;#426while refactoring the class`handyreturnvalues` towards a static utility class i notices that it is not required at all therefore i decided to remove the type `handyreturnvalues`;  lgtm but the formatting of quite some files is still incorrect some have a space too much others are indented too much please take a close look at the diff and make sure that formatting changes are reverted functionality is fine by me || @timvdlippe > lgtm but the formatting of quite some files is still incorrecthopefully  for now and ever ||;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;removed handyreturnvalues;
432;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;426 refactored invocationmarker to a static utility class;#426  refactored  invocationmarker to a static utility class;;426.0;426 refactored invocationmarker to a static utility class;#426refactored `invocationmarker`to a static utility class;  there are some imports remaining on the `invocationmarker` which i think can be removed other than that  how to trigger a build without the commiting squashing forced push cycle? that failing tests suck! || not much faster but the fastest way i know of to trigger building of pull request is```git commit --amendgit push -f``` || lgtm ||;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;426 refactored invocationmarker to a static utility class;
434;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;very tiny typo.;missing word in error message.;;0;very tiny typo;missing word in error message;lgtm thanks for spotting! ||;;;;1;1;very tiny typo;
436;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;clean up issues reported by intellij;some general issues reported by intellij. mostly concerning modifiers and unused imports.;;0;clean up issues reported by intellij;some general issues reported by intellij mostly concerning modifiers and unused imports;  did you upgrade to java 7? we are still compiling to java 5 even though byte buddy requires java 6 anyways || no i did not upgrade to java 7 why? || try with ressources and diamond operators are java 7 features  || oh i thought they were java 5 features why is travis not failing on that? :owill revert these changes then :( || i assume travis runs java 8 but compiles back to java 5 || the travis build uses java 7:  || sorry this is painful to ask for but could you rebase this? || will rebase this weekend when i have time || once mockito 2 is released i think we can focus on a pure java 8 release || @raphw rebased    ||;;;;1;1;clean up issues reported by intellij;
441;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;delete ignored cglib related tests;;;0;delete ignored cglib related tests;;as far as i can tell cglib was completely replaced by byte-buddy ||   lgtm thanks for spotting! ||;;;;1;1;delete ignored cglib related tests;
442;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;enable some ignored tests of bridgemethodshitagaintest and detectingf…;…inalmethodstest  this worked locally  so let s see if this also works on the ci server.  304;;304.0;enable some ignored tests of bridgemethodshitagaintest and detectingf…;…inalmethodstestthis worked locally so lets see if this also works on the ci server304;  thanks this has  issue #304 ! ||;problem verifying bridge methods;"hello i think there might be a bug in mockito when verifying bridge methodsthe bug is present both in version 2031-beta and in version 11019``` javaimport javaioserializableimport orgjunittestimport static orgmockitomockitomockimport static orgmockitomockitoverifypublic class mockitobridgetest {    @test    public void test() {        extended ext  mock(extendedclass)        exttest(""123"")        verify(ext)test(""123"") // passes        ((base<string>)ext)test(""456"")        verify(ext)test(""456"") // fails    }    public interface base<t extends serializable> {        int test(t value)    }    public interface extended extends base<string> {        @override        int test(string value)    }}```";"the problem here is the following: byte buddy does not intercept bridge methods but assumes that these methods should be dispatched _as they are_ therefore the actual method is still invoked which is then intercepted as a result the `method` instance that is bound to this interception is the actual method ie `test(string)` and not `test(serializable)` which was identified as the bridge the behavior of cglib is similarmockito on the other hand picks up the invoked method from the call site which is `test(serializable)` fpr the secod example therefore mockito claims that another method is invoked instead mockito would need to resolve the method to its actual target in order to validate that this method is a bridge for `test(string)`i am going to look into how this can be added to mockito this requires resolving parameterized tyes along the hierarchy in order to find out to what method the bridge is actually pointing to || since somebody else has this issue i found a workaround to make the test pass:``` java        ((base<string>)ext)test(""456"")        verify(ext)test(""456"") // fails        ((base<string>)verify(ext))test(""456"") // passes (workaround)``` || @bric3 would it be a feasible solution if i relied on byte buddy apis to resolve this? i implemented a rather elaborate algorithm that i have tried to port to mockito however its not as easy as i thought since the algorithm and related data structure are quite bound into the byte buddy apis i would of course add an interface that does not rely on byte buddy for querying this information but asking the library to do it would be the most straight-forward solution || @raphw that is possible maybe in the form of a _`plugin`_ that bytebuddy mockmaker implement maybe we would need a default implementation ie that does nothing || ";1;0;enable some ignored tests of bridgemethodshitagaintest and detectingfinalmethodstest;
444;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;add parameter elementtype to @mock;todo: add a regression test to also show how this functionality can be used. cc @smoyer64  438;;438.0;add parameter elementtype to @mock;todo: add a regression test to also show how this functionality can be used cc @smoyer64438; ;add elementtypeparameter to @mock;parameterized tests are becoming more common - junit 5 explicitly allows parameters and the sample [mockitoextension]( currently includes an @injectmock to trigger the creation of a mock parameter  it would be so much cleaner to use @mock in both placesthis shouldnt be an issue for most legacy test systems since they dont allow test parameters (by default);"@smoyer64 i think that is a reasonable addition do you maybe have a sample junit test case that i can add to our test suite as regression test? || @timvdlippewill this change be going into mockito 1x or 2x (or both)? || @sbrannen mockito 20 we might be able to port back to mockito 1x but i would prefer not to is there an explicit requirement for this change to be included in 1x? || regarding a regression test this should do the job!``` javaimport static orgjunitassertasserttrueimport javalangreflectfieldimport javalangreflectmethodimport orgjunittestimport orgmockitomock/** * its actually sufficient if this class compiles the test methods * are therefore a bit superfluous * * @author sam brannen */public class mockannotationdeclarationtests {    @mock    string foo    void bar(@mock string baz) {    }    @test    public void mockannotationcanbedeclaredonfield() throws exception {        field field  getclass()getdeclaredfield(""foo"")        asserttrue(fieldisannotationpresent(mockclass))    }    @test    public void mockannotationcanbedeclaredonparameter() throws exception {        method method  getclass()getdeclaredmethod(""bar"" stringclass)        asserttrue(methodgetparameters()[0]isannotationpresent(mockclass))    }}```so feel free to use thatcheerssam || @timvdlippei dont suppose there is an explicit _requirement_ per se to have this support in 1x however i feel it could well benefit 1x users who also wish to use junit 5 furthermore i cannot foresee any possible negative side effects for 1x users: its 100% backwards compatible || i do not think we really have an infrastructure to still publish mockito 1 artifacts we did however not change much in 2 and 99% of all mockito code should run as expected after updating mainly we removed deprecated code that people had years to upgradei think adding this should be okay even though there is no scenario where mockito itself would process the annotation would adding an annotation to the junit plugin not be another altivertive? i wonder if that was a cleaner solution || > would adding an annotation to the junit plugin not be another altivertive? i wonder if that was a cleaner solutionintroducing a new annotation in mockitos official junit 5 support is of course technically possible -- thats what our proof-of-concept `mockitoextension` does today (ie we created an `@injectmock` annotation)but i dont think i would call that a _cleaner solution_ imho a single annotation from mockito would be the cleanest solution since it would result in the **element of least surprise** for users of mockitofwiw we have already hashed out the [exact same discussion for the spring framework]( with regard to springs `@autowired` annotation previously it was not allowed to be declared on a constructor or method parameter but we changed this for spring 43 || ok considering that junit and mockito is such a common combination lets just make it as easy as possible || sounds good!  wow  a lot of work got done while i was out celebrating fathers day  from a users perspective this all looks perfect  how often do you get everything you ask for?  i guess i have one final  question which since this issue is closed is more academic - where should an official production ready mockitoextension for junit 5 be hosted?  mockitojunit is obviously part of the mockito project and the mokitoextension will always rely on both mockito and junit 5maintaining the status quo would be fine but it might also make sense to create a junit5-extensions project for ""common combinations"" (using the wording above) where a combination of project maintainers could collaborate on code that is essentially the intersection of their projects?  external extensions and testengines are going to be documented in the junit 5 wiki per issue  and given the collaboration demonstrated by this thread maybe the whole question is mootin any case thanks for all the hard work thats gone into both projects! || @smoyer64 you got lucky we are working hard on releasing mockito 20   i am not sure what the stance is of the junit team regarding such extensions could you open an issue on junit5 to discuss where such extensions should be placed? || @timvdlippe the question has been posed to the junit 5 team in issue   @sbrannen is a member of that team so im guessing hes already seen the question )  and im just one of those pesky users (trying to help identify use cases and stress-test the new code)! || thanks a lot looking forward to their response || ";1;0;add parameter elementtype to @mock;
446;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;make tests which test for timeouts with thread#sleep more lenient.;i took a look at the recently builds on travis ci and noticed a lot of failed builds. these failures where mostly unrelated to the actual changes  but caused by these strict timeout tests.  this pull request will not completely fix these random failures  but it should reduce their occurrences.   the ideal solution would be to completely remove usage of  thread#sleep  from the test  but i have no idea how to do this.;;0;make tests which test for timeouts with thread#sleep more lenient;i took a look at the recently builds on travis ci and noticed a lot of failed builds these failures where mostly unrelated to the actual changes but caused by these strict timeout teststhis pull request will not completely fix these random failures but it should reduce their occurrences the ideal solution would be to completely remove usage of `thread#sleep` from the test but i have no idea how to do this;  relates to  issue #433 and pr #451 ||;;;;1;1;make tests which test for timeouts with thread#sleep more lenientthe actual sleep time depends on the scheduler and these tests cause a lot of false negatives on the ci server;
451;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactored timeout and after concurrent test;refactored concurrent test in order to 433. the implementation now uses  an  executor to perform async calls instead of extending  thread  and doesn t extend testbase anymore.   i also added a stopwatch which can be used for further time dependent testing. in the future i want to use this class to write more tests for after/timeout.;;433.0;refactored timeout and after concurrent test;refactored concurrent test in order to 433 the implementation now uses  an `executor`to perform async calls instead of extending `thread` and doesnt extend testbase anymore i also added a stopwatch which can be used for further time dependent testing in the future i want to use this class to write more tests for after/timeout;can you rebase this to the latest removal of deprecated api?  seems like something went wrong with my rebase i will look tomorrow into it ||   @christianschwarz i think its preferable to rebase (eg `pull --rebase upstream master`) a pull request instead of merging that hides unrelated commits and makes reviewing easier thanks!edit: just saw your comment above so please ignore this || this lgtm but one small comment thank you again for your work! || okay i  the formatting issues || lgtm! || i guess it would have been better to use more lenient timeouts:  || it really sucks that we only experience this flakiness on master and now when we are reviewing such pull requests i cant seem to recreate these timing issues locally either || i can replicate the issues if i decrease the timeouts and run a timeout test in an endless looptravis builds have very limited cpu resources: so  so failures of multi-threaded tests are more likely ||;fix swinging concurrent tests;the following concurrent tests fail currently with a >50% chance this should be !here is a build with multiple failed test that are related to concurrent issues #763  verificationwithtimeouttestshouldallowmixingonlywithtimeoutandfailverificationwithtimeouttestshouldallowmixingothermodeswithtimeoutverificationwithtimeouttestshouldallowmixingonlywithtimeout verificationwithtimeouttestshouldallowmixingothermodeswithtimeoutandfail```;those are time-out-dependant test those are generally a bit hard to test but i have never seen them fail maybe it depends on how busy travis is at the moment || i have restarted lets see if they keep on failing if they are passing now i would file it under flakiness and disregard the failures || oh right the original pr was closed so travis could not pull the branch  looking at our build history it seems to be happening very rarely so if it happens again we should restart the build if it then fails again a manual inspection should be done ||;1;0;refactored timeout and after concurrent test;
452;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;javadoc: improve grammar of some sentences;;;0;javadoc: improve grammar of some sentences;;  ;;;;1;1;javadoc: improve grammar of some sentences;
454;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;modified javadoc for argumentmatcher;to 453 - this is the amendment to the  argumentmatcher  javadoc.;;453.0;modified javadoc for argumentmatcher;to 453 - this is the amendment to the `argumentmatcher` javadoc;  ;either revert recent functional interfaces change or change javadoc;ive been reading the javadoc regarding `argumentmatcher` and i noticed a couple of things relating back to the changes of #338 - the example of how to override it is still based around `object` rather than `t`- someone has very deliberately decided not to make it use `t` in the past and now weve changed that> the argument is not using the generic type in order to force explicit casting in the implementation this way it is easier to debug when incompatible arguments are passed to the matchers you have to trust us on this one if we used parametrized type then classcastexception would be thrown in certain scenariosmy view at the time was that changing it to `t` would remove the class casting and that this would be a good thing it was kind of necessary to have it as `t` so that the lambda expressions in java 8 could infer the right typesthe rationale about a class cast exception giving weird results kind of makes sense but does that really really happen? it seems its either solve one problem or the otherwhat do folks think? ill happily amend the code either way;i cant imagine a scenario where the parameterized type cause problems and why it aids debuging if no type parameter is used@all do we have examples that illustrate the described problem? if not the javadoc should be removed! || #454 is one way we could wrap this up sorry for not noticing it sooner! || if we receive such a report we should catch such an exception and log an appropriate error why this is happening for now i cant see this breaking but i am happy to be proven wrong ||;1;0;modified javadoc for argumentmatcher;
455;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;activate verificationwithtimeouttest#shouldallowtimeoutverificationin…;…order  this test work since  but was deactivated by mistake with https://github.com/mockito/mockito/pull/451;;0;activate verificationwithtimeouttest#shouldallowtimeoutverificationin…;…orderthis test work since  but was deactivated by mistake with https://githubcom/mockito/mockito/pull/451;note to myself when reviewing prs: be more precise yes i missed this case too and it should not happen thank you for correcting me! ||  ;;;;1;1;activate verificationwithtimeouttest#shouldallowtimeoutverificationinorderthis test work since  but was deactivated by mistake with https://githubcom/mockito/mockito/pull/451;
456;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix some rawtype warnings;;;0;fix some rawtype warnings;; ;;;;1;1;fix some rawtype warnings;
458;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;remove dead code in classcacheversusclassreloadingtest;;;0;remove dead code in classcacheversusclassreloadingtest;; ;;;;1;1;remove dead code in classcacheversusclassreloadingtest;
459;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix some rawtype warnings in tests;;;0;fix some rawtype warnings in tests;; ;;;;1;1;fix some rawtype warnings in tests;
460;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;delete disabled test for removed objenesis missing reporting feature;;;0;delete disabled test for removed objenesis missing reporting feature;;  assigning to @raphw as he spend more time with objenesis than me ||;;;;1;1;delete disabled test for removed objenesis missing reporting feature;
464;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;fix some rawtype warnings in tests;;;0;fix some rawtype warnings in tests;; ;;;;1;1;fix some rawtype warnings in tests;
467;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix some rawtype warnings in tests;;;0;fix some rawtype warnings in tests;;  lgtm thanks for doing the chore work! ||;;;;1;1;fix some rawtype warnings in tests;
468;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;add missing since javadoc tags for recently added methods and classes…;;;0;add missing since javadoc tags for recently added methods and classes…;;  ;;;;1;1;add missing since javadoc tags for recently added methods and classes (420);
469;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix some rawtype warnings in tests;;;0;fix some rawtype warnings in tests;;  ;;;;1;1;fix some rawtype warnings in tests;
470;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;refactored mock cache to be non-blocking.;the previous cache used a lock to unify concurrency and weak references. instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. this avoids blocking.;;0;refactored mock cache to be non-blocking;the previous cache used a lock to unify concurrency and weak references instead keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map the entries are polled upon accessing the cache this avoids blocking;  looks good codewisei wonder if coverage can be increased however || ;;;;1;1;refactored mock cache to be non-blocking;
475;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;typo fix;> hey   >  > thanks for the contribution  this is awesome. > as you may have read  project members have somehow an opinionated view on what and how should be > mockito  e.g. we don t want mockito to be a feature bloat. > there may be a thorough review  with feedback -> code change loop. >  > _this block can be removed_ > _something wrong in the template fix it here  .github/pull_request_template.md   check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  fixes #<issue number>  _if relevant_;;0;typo fix;thanks for the contribution this is awesome> as you may have read project members have somehow an opinionated view on what and how should be> mockito eg we dont want mockito to be a feature bloat> there may be a thorough review with feedback -> code change loop> > _this block can be removed_> _something wrong in the template fix it here `github/pull_request_templatemd`check list-  pr should be motivated ie what does it fix why and if relevant how-  if possible / relevant include an example in the description that could help all readers     including project members to get a better picture of the change-  avoid other runtime dependencies-  meaningful commit history  intention is important please rebase your commit history so that each     commit is meaningful and help the people that will explore a change in 2 years-  read the [contributing guide](  mention `<issue number>` in the description _if relevant_-  at least one commit should mention `fixes #<issue number>` _if relevant_; ;;;;1;1;typo fix;
476;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactored threadsafemockingprogress to a singleton;the actual implementation of [threadsafemockingprogress]( disguise that it is effectively a singleton cause the threadlocal member is static. this makes it hard to see that different instances  share the same state.  this pr - refactores  threadsafemockingprogress to provider of mockingprogress instances - uses the standard way of instantiating the initial  threadlocal value this also avoids possible race conditions;;0;refactored threadsafemockingprogress to a singleton;the actual implementation of [threadsafemockingprogress]( disguise that it is effectively a singleton cause the threadlocal member is static this makes it hard to see that different instances  share the same statethis pr- refactores `threadsafemockingprogress`to provider of mockingprogress instances- uses the standard way of instantiating the initial `threadlocal`value this also avoids possible race conditions;  @timvdlippe that was ticky but i found a solution the only restriction is not to cache the mockingprogress in an instance or static field other wise thread safety get lost || i am fine with these changes but would like to have a second opinion of either @bric3 or @raphw  || @bric3  the review issues || ok  thank you @christianschwarz for this work this is much appreciated ||;;;;1;1;refactored threadsafemockingprogress to a singleton;
479;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix grammar of sentence in mockito javadoc;;;0;fix grammar of sentence in mockito javadoc;;;;;;1;1;fix grammar of sentence in mockito javadoc;
486;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;cleanup: removed dead/unnecessary classes;removed dead/unnecessary classes: - varargcapturingmatcher and test - anyvararg removed in favor of any  any can now used as varargs matcher too       removed test [shouldnotallowanyobjectmatchentirevararg()]( cause it was not clear why any should not be allowed as varargs matcher;;0;cleanup: removed dead/unnecessary classes;removed dead/unnecessary classes:- varargcapturingmatcher and test- anyvararg removed in favor of any any can now used as varargs matcher too     removed test [shouldnotallowanyobjectmatchentirevararg()]( cause it was not clear why any should not be allowed as varargs matcher;  1 small documentation update other than that  @timvdlippe  ||;;;;1;1;removed anyvararg in favor of any;
490;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;atleast to static;- unified  atleastxnumberofinvocationschecker  and    atleastxnumberofinvocationsinorderchecker  into a static utility class - unified  missinginvocationchecker  and  missinginvocationinorderchecker  in   a static utility class;;0;atleast to static;- unified `atleastxnumberofinvocationschecker` and  `atleastxnumberofinvocationsinorderchecker` into a static utility class- unified `missinginvocationchecker` and `missinginvocationinorderchecker` in  a static utility class;  failing codecov checks are due to private constructors || rebased to head ||;;;;1;1;unified atleastxnumberofinvocationscheckers andmissinginvocationcheckers ina static utility classes;
491;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;deprecate whitebox and corresponding verboserunner and junitfailureha…;a quick google showed that there are almost zero usages of this runner. moreover it was relying on a very hackish implementation. i think we can do a better job by creating a new runner with junit 5 as part of #390. therefore the intent is to deprecate these classes and remove them in mockito 3.0.  489;;390.0;deprecate whitebox and corresponding verboserunner and junitfailureha…;a quick google showed that there are almost zero usages of this runner moreover it was relying on a very hackish implementation i think we can do a better job by creating a new runner with junit 5 as part of #390 therefore the intent is to deprecate these classes and remove them in mockito 30489;  491 by private methods || rebased and updated pull request with feedback ptal    || indeed the timeout test is picky especially with openjdk 6 i restarted the job 2 times || verbose runner and console spamming runner are now both deprecated lets kill them in 30 :) ||;support for junit 5 (junit lambda);i think we should support junit 5 with mockito 2 currently we maintain an optional dependency on junit four but the junit 5 api is completely incompatible to the old one i already explored the extension mechanism a bit and for our use case it is quite trivialthere are some caveats with junit 5 for example the possibility to reuse a test instance what would require us to extend the rule for reseting mocks between runs but it is more than doable actually i suggest making `@mock` a meta annotation this way we can completely drop the mockitojunitrunner runner and the mockitojunit rule and make the setup even easierthe junit 5 api is still in alpha how do we do this?;junit 5 seems to support only java 8 is its api java 7 compatible? or maybe you meant mockito 3 (incoming just after mockito 2 but with official java 8 support :) )? || that is why i would suggest to put it into a side-project junit 5 is compiled to java 8 byte code but we could deliver the integration in java 6 nevertheless  || junit 5 looks very promising extensions replacing [runner rule & classrule]( surprise surprise    here is a sample -> the [mockitoextension]( || while i do think it is worth exploring in my eyes pushing this to mockito 30 with java 8 seems more safe this also gives time for the junit team to tinker everything and push to beta to reduce the compatibility burden for jumping on the train too soon || merging this into #445  ||;1;0;remove whitebox and deprecate corresponding verboserunner and junitfailurehacker;
492;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;revert  remove deprecated method;simple git revert for an accidental removal of a deprecated api since 2.0 instead of 1.x.  482.;;482.0;"revert ""remove deprecated method""";simple git revert for an accidental removal of a deprecated api since 20 instead of 1x482; ;restore depecated answersget() method;commit da5e750957b494e7fa0548bf1286d67b8b0386d5 removed the deprecated `answersget()` method however the method was only deprecated in the 20 beta line and never made it into a ga release it would be helpful if the method could remain in the deprecated form in 20 to give people an opportunity to move away from it(originally raise by a spring boot user [here](https://githubcom/spring-projects/spring-boot/pull/6323));"on a related note adding a ""as of"" to the deprecated description would also be useful:``` java/** * @deprecated as of 20 in favor of using the enum-constant directly this method will be removed in a future release<br>  * eg instead of <code>answerscalls_real_methodsget()</code> use <code>answerscalls_real_methods</code>  */``` || i would agree with @philwebb that this method had been made deprecated in 20 (-beta2) not in 110x (in fact at first it was [removed]( completely and one month later [restored]( as deprecated) but what is more important `answers` started implementing `answer` then because of that when i was fixing that issue in spring boot it was hard to keep code compatible with both versions at runtime (for 1x casting using it as answer does not work for never 2x `get()` is not available) in the end i had to [do]( ugly casting through `object` to fool the compiler with that spring boot should work fine (at least with changes related to `answers` :) ) but there could be other tools (powermock?) that after removing this method cannot be easily compatible with both mockito 1x and 2x imho it would be good to keep this method in 2x and remove in 3x || yes that seems like a good idea mind want to open a pull request? || ";1;0;"revert ""remove deprecated method""this reverts commit da5e750957b494e7fa0548bf1286d67b8b0386d5";
495;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;moves reporter friendly exception factory to internal package;the  reporter  friendly exception factory class lies in  org.mockito.exceptions.reporter   however it s api is subject to change without really impacting user experience.  thus  i propose to move  org.mockito.exceptions.reporter  to  org.mockito.internal.exceptions.reporter .  i didn t provided a dummy class for two reasons : 1. i would like to schedule this for mockito 2 a major version 2. this class shouldn t be used outside framework development;;0;moves reporter friendly exception factory to internal package;the `reporter` friendly exception factory class lies in `orgmockitoexceptionsreporter` however its api is subject to change without really impacting user experiencethus i propose to move `orgmockitoexceptionsreporter` to `orgmockitointernalexceptionsreporter`i didnt provided a dummy class for two reasons :1 i would like to schedule this for mockito 2 a major version2 this class shouldnt be used outside framework development;  lgtm but also requires a rebase ||;;;;1;1;moves reporter friendly exception factory to internal package;
496;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;renames matchers to argumentmatchers to avoid name clash with hamcrest matchers class;renames  matchers  to  argumentmatchers  to avoid name clash with hamcrest  org.hamcrest.matchers  class.  this plagued usage of mockito and hamcrest together since the introduction of matchers. the work in mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the hamcrest matcher factory  mockitohamcrest . yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both api.  this change helps in that regard  as it renames the import class. not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (that is why i didn t updated tests yest  they could be upgraded in a late pr  a good timing would probably be when  matchers  is removed)   matchers  class can be removed in the next version of mockito  likely 3.0.;;0;renames matchers to argumentmatchers to avoid name clash with hamcrest matchers class;renames `matchers` to `argumentmatchers` to avoid name clash with hamcrest `orghamcrestmatchers` classthis plagued usage of mockito and hamcrest together since the introduction of matchers the work in mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the hamcrest matcher factory `mockitohamcrest` yet this is not enough as using both mockito matchers and hamcrest matchers in the same class made the developer life not comfortable when using both apithis change helps in that regard as it renames the import class not this change tweaks only the class hierarchy so current code still compiles thanks to the javac compiler that can lookup static method in parent classes (that is why i didnt updated tests yest they could be upgraded in a late pr a good timing would probably be when `matchers` is removed)`matchers` class can be removed in the next version of mockito likely 30;  note im open on the name of `argumentmatchers` || lgtm! || ah but it requires a rebase   ||;;;;1;1;renames `matchers` to `argumentmatchers` to avoid name clash with hamcrest `orghamcrestmatchers` classtis plagued usage of mockito and hamcrest together since the introduction of matchers the work in mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the hamcrest matcher factory `mockitohamcrest` yet this is not enough as using both mockito matchers and hamcrest matchers in the same class made the developer life not comfortable when using both apithis change helps in that regard as it renames the import class not this change tweaks only the class hierarchy so current code still compiles thanks to the javac compiler that can lookup static method in parent classes (that is why i didnt updated tests yest they could be upgraded in a late pr a good timing would probably be when `matchers` is removed)`matchers` class can be removed in the next version of mockito likely 30;
498;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;remove unused imports;;;0;remove unused imports;;"does it build locally after your changes?```:compiletestjava/home/travis/build/mockito/mockito/src/test/java/org/mockitousage/matchers/matcherstestjava  cannot find symbolsymbol  : method eq(doubledouble)location: class orgmockitousagematchersmatcherstest        when(mockonearg(eq(10d 01d)))thenreturn(""1"")``` || locally it worked but that does not matter i will add back the import ||    ";;;;1;1;remove unused imports;
499;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;401 - makes the junit runner detect unused stubs;401  this is a breaking change because junit runner will now fail the test class if there is an unused stubbing.  feedback is welcome. sorry for working on it for a long time and big number of commits.;;401.0;401 - makes the junit runner detect unused stubs;401this is a breaking change because junit runner will now fail the test class if there is an unused stubbingfeedback is welcome sorry for working on it for a long time and big number of commits;investigating the failure on travis works for me locally! :d || i would rather not default to strict right away this will break a lot of user test suites which significantly increasing the upgrade process to mockito 20if we let developers know our intention is to makr the strict version default later they can slowly make the changes for each of their runners then we can change the default in mockito 30 so developers had some time to adopt ||   it this weekend || late in the review game but nice feature ||;junit runner detects unused stubs;it is useful to know that stubbing in the test was not used perhaps the stubbing is not needed? removal of unnecessary code from the test is important for code claritymore details:- we detect unused stubs only for passing tests (adding different failure to an existing failure could be confusing)- need to have something similar for junit rules (will create separate ticket)- stubbing in @before or class constructor should be used in at least one test- stubbing in test needs to be used in that test;the current impl is not thread safe reopening ||;1;0;avoided unnecessary object creation- great feedback from tim- the code is cleaner too;
501;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;refactored testmethodsfinder to a static utility class (#426);;;426.0;refactored testmethodsfinder to a static utility class (#426);; ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored testmethodsfinder to a static utility class (#426);
502;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactored argumentscomparator to a static utility class (#426);;;426.0;refactored argumentscomparator to a static utility class (#426);; ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored argumentscomparator to a static utility class (#426);
503;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactored nongreedynumberofinvocationsinorderchecker to a static uti…;…lity class (#426);;426.0;refactored nongreedynumberofinvocationsinorderchecker to a static uti…;…lity class (#426); ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored nongreedynumberofinvocationsinorderchecker to a static utility class (#426);
504;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fixed some rawtype warnings;;;0; some rawtype warnings;; ;;;;1;1; some rawtype warnings;
507;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improved exception message - fixes issue 506;506;;506.0;improved exception message - fixes issue 506;506; ;improved exception message for wanted but not invoked;currently mockito prints following message when specific verification fails:```wanted but not invoked:mocksimplemethod()-> at however there were other interactions with this mock:mockothermethod()-> at mockbooleanreturningmethod()-> at ```it would be useful to print the number of invocations:```wanted but not invoked:mocksimplemethod()-> at however there were exactly 2 interactions with this mock:mockothermethod()-> at mockbooleanreturningmethod()-> at ```;;1;0;improved exception message506;
510;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;194 tweaks any matchers;details is #194   i took the opportunity to  - replace  testbase.assertthat  by more powerful assertj equivalent. there s still some work to be done in this class. - add iterable matchers  before merging -  i ponder to make  anyobject()  not to accept  null   currently  any()  is an alias of  anyobject()  => keeping the  anyobjet  behaviour and deprecate the method -  i need to update  anyint  family description.;;194.0;194 tweaks any matchers;details is #194 i took the opportunity to - replace `testbaseassertthat` by more powerful assertj equivalent theres still some work to be done in this class- add iterable matchersbefore merging-  i ponder to make `anyobject()` not to accept `null` currently `any()` is an alias of `anyobject()` > keeping the `anyobjet` behaviour and deprecate the method-  i need to update `anyint` family description;"  ";tweaks matchersany family matchers behavior;this issue is a follow up of the work started in #141 by @pimterry also heres an extract of a message on [this thread]( of the mailing list :---the origin of these methods is they come from `anything` ie anything matches later for shortness and cast avoidance the aliases grew but the api naming thus became inconsistent with what a human would expect so this behavior is being changed in mockito 2 beta to be precise heres the status on these api in the version 205-beta :- `any` `anyobject` `any(class)` wont check anything (at first they were just aliases for _anything_ and for cast avoidance) `null` is a valid value- `anyx` like `anystring` will check the arg is not `null` and that has the correct type- `anylist` will check the argument is not null and a `list` instance- `anylistof` (and the likes) at the moment are just aliases to their non generic counter part like `anylist`note this is work in progress (started here in 141]( these new behavior can / will change in the beta phase im especially wondering if the `any` family should allow `null` and if not do a type check for example with these matchers : - `any` `anyobject` stay the same they currently allow `null` and dont have to do type check anyway- `any(class)` currently allows `null` and doesnt do type check > allows `null` and if not checks for the given type- `any<collection>of` currently doesnt allow `null` and does a type check of the collection not elements > allows `null` if not checks collection type if not empty checks element typemaybe extend/create a _symmetric_  `isa` family api that wont allow any `null` arguments---;"`any` family is currently _(at his time up to 205-beta)_ inconsistent on the way they allow or not `null`s type checking is ok but `null` check behavior consistency is also important || anyx gramtaically tends to imply to return false for null because anyobject is not null i agree completely the api should be consistenton sun apr 5 2015 11:54 brice dutheil notifications@githubcom wrote:> any family is currently _(at his time up to 205-beta)_ inconsistent on> the way they allow or not nulls type checking is ok but null check> behavior consistency is also important> > ## > > reply to this email directly or view it on github>  || > anyx gramtaically tends to imply to return false for null because any object is not nullim not anymore of sure of that anyway the changes introduced in this api make it inconsistentthats why i propose any validates `null` and if not `null` then validates the typealso on the mentioned thread _francisco olarte_ was proposing a `anynotnull` family this could clarify the behavior on `null` of these apis || agreed any should return false for null and false for wrong type (instanceof) otherwise i think it would violate the principle of least surpriseon sun apr 5 2015 12:57 brice dutheil notifications@githubcom wrote:> anyx gramtaically tends to imply to return false for null because any> object is not null> > im not anymore of sure of that anyway the changes introduced in this api> make it inconsistent> thats why i propose any validates null and if not null then validates> the type> > also on the mentioned thread _francisco olarte_ was proposing a anynotnull> family this could clarify the behavior on null of these apis> > ## > > reply to this email directly or view it on github>  || i see anystring() ( and friends ) checking for null and anyobject() not doing it as an inconsistency potentially leading to user surprise object is as much of a class as string ( or other )other thing is i fail to see is the difference ( if there is any ) between isa(klazz) and notnull(klazz) ( or isnotnull but i see that one is a forwarder ) to me they seem they do the same given the docs but the code is different and im not familiar enough with it to assert they do the same thing when doing dsl helper libraries ive found ( the hard way ) having slightly different names for the same thing seems a good idea initially but leads to problem along the way so i would vote for just having one of notnull/isnotnull ( and isa if it is functionally equivalent ) || i think there might be confusion here: @szczepiq i dont think the two of you are agreeing @bric3 seems to be saying that `any` should match nulls and anynotnull should exist (and presumably not match null) while youre saying that `any` should not match nulli think the problem here is that theres two use cases that currently arent clearly separated both of which we need to support1 i dont care what the value im matching is _at all_ i want a very simple intuitive wildcard matcher that will match absolutely anything and will compile with no extra effort (so no casts)2 i care about the type of the value that im matching but no details beyond that i want a matcher that will not match values with the wrong typei think both of these are major common use cases if we make any of the `anyx()` methods reject nulls they no longer support the first case and if we leave it as-is then they currently appear to support the 2nd case but arent really doing so which is where all this came from originallyi do think any api that supports use case 2 should reject nulls by default: if youre asserting specifically on the type of the value we should push people to be clear about whether or not null is valid in the given case i think an api for use case 1 should not reject nulls because you want to match _everything_these are two quite different apis though and to get any kind of api consistency were going to need them to be separate sets of methods i suggest:- `any()` - matches absolutely anything including nulls as a generic method returning t (as now)- `anyasx()` and `anyas(xclass)` - matches absolutely anything including nulls as a generic method returning x  - this is as in 19 but with the names changed to make it clear that this is purely a type casting concern not type checking and intentionally being a bit more verbose to discourage unnecessary use  - note that as of java 8 target type inference considers method arguments so you should be able to use `any()` in every case except choosing between overloaded methods (pretty rare?) in addition note that java 7s final update is this month and then its unsupported  - wed also obviously document that users should prefer isa etc if they want to check the type but i think its much more obvious that `anyasstring()` isnt actually checking the values a string (unlike `anystring()` which did suggest that)- `isa/isan(xclass)` and `isanx()` - matches on type rejecting nulls- `isnulloran(xclass)` and `isnulloranx()` - matches on type accepting nullsi think this makes for a relatively small change so gives fairly easy migration but makes it clear that the `any()` methods are all just generic wildcards (for use case 1) and provides a clear set of other methods to support actual type checking and pushing users to be clear about nullability along the way (for use case 2)the only other option i can see we might want to do is stop supporting use case 1 entirely make everybody be much more specific about what they want and reject nulls everywhere i think use case one is likely to be the most common case for use argument matchers anywhere though far more than anything else and we definitely definitely need to support it as an intuitive easy first-class citizenthoughts? do people agree both use cases are common and important? does anybody have a better solution to help us get both while keeping a sensible consistent api? || on tue apr 7 2015 at 5:12 pm tim perry notifications@githubcom wrote:> these are two quite different apis though and to get any kind of api> consistency were going to need them to be separate sets of methods i> suggest:> - any() - matches absolutely anything including nulls as a generic>   method returning t (as now)> - anyasx() and anyas(xclass) - matches absolutely anything including>   nulls as a generic method returning x>   - this is as in 19 but with the names changed to make it clear>     that this is purely a type casting concern not type checking and>     intentionally being a bit more verbose to discourage unnecessary use>   - note that as of java 8 target type inference considers method>     arguments so you should be able to use any() in every case except>     choosing between overloaded methods (pretty rare?) in addition note that>     java 7s final update is this month and then its unsupported>   - wed also obviously document that users should prefer isa etc if>     they want to check the type but i think its much more obvious that>     anyasstring() isnt actually checking the values a string (unlike>     anystring() which did suggest that)>     - isa/isan(xclass) and isanx() - matches on type rejecting nulls> - isnullor(xclass) and isnullorx() - matches on type accepting nulls> > i think this makes for a relatively small change so gives fairly easy> migration but makes it clear that the any() methods are all just generic> wildcards (for use case 1) and provides a clear set of other methods to> support actual type checking and pushing users to be clear about> nullability along the way (for use case 2)> > the only other option i can see we might want to do is stop supporting use> case 1 entirely make everybody be much more specific about what they want> and reject nulls everywhere i think use case one is likely to be the most> common case for use argument matchers anywhere though far more than> anything else and we definitely definitely need to support it as an> intuitive easy first-class citizen> > thoughts? do people agree both use cases are common and important? does> anybody have a better solution to help us get both while keeping a sensible> consistent api?​i agree all are used and importantsim still struggling with the difference between `isnullor(xclass)` and `anyas(xclass)` the only difference i see is if i have a class `a` with a subclass `suba` and a class `b` with a subclass `subb` and a couple of methods `m(a)` and `m(b)` is that `m(anyas(subbclass))` will select `m(b)` and match on a `b` but `m(isnullor(subbclass)` will select it and match only on a `subb` so i could have a broader matcher for `m(isnullor(bclass))`even if this is the case i would just suppress the `anyas(xclass)` as my contrived example could be better written as `anyas(bclass)` in which case i would rename isnullor to any and isa to anynotnull in the naming side i find `any()` ​natural `anyas` forced as i consistently read `any(xclass)`as _any thing which can be assigned to a variable of type x_so i would end up with only two method names any and `anynotnull` with a parameterless plus a class parameter variant ( discounting typeing helpers like `anynotnullstring`) which would work:1 `anynotnull` in any variant does not accept nulls any does2 a parameterless `any()`/`anynotnull()` is equivalent to the same method with the declared parameter class note if you can use `any[notnull]()` in the methods there are no overloads and the language guarantees i cannot use an incorrect typeso if i have a method `m(list l)` `m(any(arraylistclass))` would match anything which can be stored in an `arraylist` var subclasses and `null` included and `anynotnull(arraylistclass)` will need a not null one `m(any())` would exactly as `m(any(listclass))` mockito cannot check it but i cannot write code to call `m` with a non-list argument java is type checked same goes for `anynotnull`otoh if i have `m(set s)` too i must use `m(any(setclass))` or `m(any(listclass))` just to resolve the overload although in this case the matcher type checking is superfluousi do not see the point on `any(xclass)` not checking the type and having `isa(xclass)` which does it seems confusing to me so my proposal is basically zapping any of the variants i mean from the description in the overloaded method `m(any(arraylistclass))` will select the list variant butmatch a call with any `list` subtype while `isnullor(arraylistclass)` will only match `arraylist`s ? i do not see this has any real use ( the parameter type must be accessible in the test if you want any list use `isnullor(listclass)`)maybe im missing something but i see `any(xclass)` redundant better served  isnullor` the rest is just naming disagreement​francisco olarte​ || the issue with getting rid of `anyas(xclass)` is that we want two things:- a way to match an argument without checking anything about its value (any)- a way to match an argument and check its type (isa)i think your solution is to just use `any()` with no parameter everywhere to cover the first case and specify the type when you want the 2nd case that wont work because target type inference doesnt work for method arguments in java < 8 so its impossible to use any() without an argument (unless the parameter is just `object` typed)specifically in java 7 the below wont compile:``` javaclass x {   public bool method(list l) {  }}x x  mock(xclass)// error: method(javacollectionslist) cannot be applied to (javalangobject)when (xmethod(any())thenreturn(true)```anybody on java < 8 has to specify the type every time they match anything or its impossible to make it compile they can never really use `any()` they always have to use `any(xclass)` (or equivalent) we need a way in java 7 that you can say match absolutely anything please that compiles and i think `any(xclass)` or equivalent is the only optionif you make that `any(xclass)` matcher check the type (as you suggest) then it no longer matches everything any more and it becomes impossible to wildcard match everything in java < 8 (without casting but that would be pretty nasty)therefore if you want to be able to both match specific types and wildcard match everything in java < 8 you have to have two separate apis to do so the names of those apis need to clearly tell the user which of those two things theyre doing (match anything but cast the matcher to make it compile vs match only this type)i dont think thats avoidable im very happy to take better suggestions for `anyas(xclass)` that make it clearer its just a convenient casting method (without making it so nasty that it stops being convenient) but that method does still need to exist i thinkin addition to all that: wed rather the match a specific type matcher didnt accept nulls by default (as your `any(listclass)` does) we need to make people opt in to matching nulls because its good practice and because theres some potentially confusing behaviour there as nulls are kind of outside the type system we also cant have the wildcard matcher reject nulls or its not matching everything any more thus again they need to be two different methods || hi tim:on tue apr 7 2015 at 7:37 pm tim perry notifications@githubcom wrote:> the issue with getting rid of anyas(xclass) is that we want two things:> > a way to match an argument without checking anything about its value (any)> a way to match an argument and check its type (isa)> > i think your solution is to just use any() with no parameter everywhere to cover the first case and specify the type when you want the 2nd case that wont work because target type inference doesnt work for method arguments in java < 8 so its impossible to use any() without an argument (unless the parameter is just object typed)i dont think youve understood my solution from the previouslypropossed one ( any() + anyas(class) + isa(class) + isnullora(class) (- notnull() which is in another place ) i propose to remove anyas  given it does not check type rename isa(class) to anynotnull(class)  rename isnullora(class) to any(class) and rename ( or forward )  notnull() to anynotnull()> specifically in java 7 the below wont compile:> > class x {>    public bool method(list l) {  }> }> > x x  mock(xclass)> > // error: method(javacollectionslist) cannot be applied to (javalangobject)> when (xmethod(any())thenreturn(true)perfect in this case you use the propossed isnullora(class) which iproposed to rename as any(class)also just grepped and got this from one of my test files:```    ac1  mock(autocallerclass)    when(ac1makecall((accallrequest) any()))thenreturn(resp1)```in case you wonder autocaller is an interface with a method""makecallresponse makecall(accallrequest)"" not overloadedi think this is clearly superior in java 7 ( im unable to use java 8on those projects due to problems with the app server ) the any()conveys the i do not care just make this compile and the castclearly says this is due to one of those java 7 shortcomings to me> anybody on java < 8 has to specify the type every time they match anything or its impossible to make it compile they can never really use any() they always have to use any(xclass) (or equivalent) we need a way in java 7 that you can say match absolutely anything please that compiles and i think any(xclass) or equivalent is the only optionwhich is what i proposed you have isnullora(class) which coversthis correct me if wrong> if you make that any(xclass) matcher check the type (as you suggest) then it no longer matches everything any more and it becomes impossible to wildcard match everything in java < 8 (without casting but that would be pretty nasty)it is the method has a declared argument type of list which meansthe compiler will check that when you use the mock inxmethod(whatever) whatever implements list so isnullora(listclass)or any(listclass) will allways match whatever with an extraredundant type check> therefore if you want to be able to both match specific types and wildcard match everything in java < 8 you have to have two separate apis to do so the names of those apis need to clearly tell the user which of those two things theyre doing (match anything but cast the matcher to make it compile vs match only this type)as i said im not knowdledgeable enough and havent got timepresently to dig through the sources if any(listclass) matches wheni pass an arraylist to the mock i can always wildcard by using thedeclared argument type> i dont think thats avoidable im very happy to take better suggestions for anyas(xclass) that make it clearer its just a convenient casting method (without making it so nasty that it stops being convenient) but that method does still need to exist i thinkforget about my proposed renaming with the any/anyas/isa/isnulloraproposal is there any case in which you must use anyas() which cannotbe solved by using isnullora(xclass)? i think they are synonims theproblem i see with anyas as stated is that in the previous example (without overloads ) i could code a matcher aswhen(xmethod(anyas(arraylistclass))) and it shoud fire ( as it doesnot check type ) when i do xmethod(new linkedlist()) i think this isconfusing and asking for problem and by making it check the type icould make when(xmethod(anyass(arraylistclass))) to catch onespecific thing and after that add when(xmethod(anyas(listclass)) fora catch all in java<8 or just plain any() in >8my proposal of getting rid of anyas can be read the other way makeanyas() check type and get rid of isnullorarepeating my self i proposed to get rid of anyas(class) as a i feelit seems to match something which it does not and it cannot doanything which cannot be done with isnullor(class) name it whateveris the functionality with worries me> in addition to all that: wed rather the match a specific type matcher didnt accept nulls by default (as your any(listclass) does) we need to make people opt in to matching nulls because its good practice and because theres some potentially confusing behaviour there as nulls are kind of outside the type system we also cant have the wildcard matcher reject nulls or its not matching everything any more thus again they need to be two different methodsthats another thing what i propose is to simplify so i have twonames ( anyincludingnull anynotnull ) which indicate wether null isaccepted plus two overrides no parameters and a class parameter thenull accepting behaviour is functionaly equivalent to haven just aname plus a boolean parameter ( notreallyany(boolean acceptnull) +notreallyany(boolean acceptnull class klass) )what makes me feel uncorfortable with the proposal is :- too many names i think two suffice- different names for similar methods similar names for different  null accepting behaviourgiven this i think:- anyincludingnul() anyincludingnul(class) anynotnull()  anynotnul(class) cover all cases for jdk <8 & 8 ( although  parameterless ones are not too useful in <8 ) ( your example would be  served by when(xmethod(anyincludingnull(listclass)) )- names should be kept paired you state opting in for nulls is good  practice ill accept that without discussion you say people should  opt in to use them i accept thas as a precondition writing  anyincludingnull is for me opting inbut then we want any() its nice sounds good it is short readsgood (any() in 8 i do not care just need this to compileany(listclass) in 7 i do not care but well then writing any( isopting in to use nulls so the class version should begin with any(too i have no problem with having the null accepting versionsnondefaultacceptingnullsanymatcher and the other one any orisa ides are really good at completing and i can easily manage acouple of names but having any anyas isa isnullora and notnullhorrifies mewell thats all for today i hope it clarifies my positionregards    francisco olarte || ok i think that mostly makes sense although im not clear exactly what the full api youre proposing is that fits the requirements here your last paragraph seems to contradict the four methods youve suggested just abovei think youre still suggesting an `any()` method with actively different behaviour to an `any(xclass)` method though inconsistencies between those two are how we ended up here because one does active type matching and the other doesnt and you need different null matching behaviour too in addition you definitely need `any()` or itll be confusing so i dont think theres any way you can have an `any(xclass)` method that does actual matchingsounds like there is a route through though: what happens if we accept that java 7 is on the way out stick only to casts and stop making the api confusing just to support now unsupported java versions? that would give an api of:- `any()` - matches anything- `isa(xclass)` - matches things with x type not nulls- `isnullora(xclass)` - matches things with x type or nullsif youre using java 8 all is good simple and clear if youre using java 7 you have to cast `any()` but `(myclass) any()` is clearer about what its doing than anything else we have here actually shorter than `any(myclassclass)` anyway and good ides will automatically suggest the cast for you too so pretty easy to find for newbies null behaviour is also clear here and were pushing people to be explicit about whether they match nulls in all arguments they care abouthow does that sound to everybody? || hi tim:on wed apr 8 2015 at 8:38 pm tim perry notifications@githubcom wrote:> ok i think that mostly makes sense although im not clear exactly what the full api youre proposing is that fits the requirements here your last paragraph seems to contradict the four methods youve suggested just aboveany of my paragraphs may seem contradictory but i do not know how toconvey the info and do not know what the exact requirements are butanyway lets go on> i think youre still suggesting an any() method with actively different behaviour to an any(xclass) method thoughin my full sugestion not exactly i suggested any to be the same asany(objectclass) ( declared parameter class really but it could beimplemented this way ) it checks the passed thing is null or asubclass of object ( second check redundant stated for completitude)> inconsistencies between those two are how we ended up here because one does active type matching and the other doesnt and you need different null matching behaviour too in addition you definitely need any() or itll be confusing so i dont think theres any way you can have an any(xclass) method that does actual matching> > sounds like there is a route through though: what happens if we accept that java 7 is on the way out stick only to casts and stop making the api confusing just to support now unsupported java versions? that would give an api of:> any() - matches anything> isa(xclass) - matches things with x type not nulls> isnullora(xclass) - matches things with x type or nullsim definitely in favour of sticking to casts as they are a standardlanguage feature and should be clearnow on your three proposed methods you are forgetting one which ison another part of the current api notnull() ( or its cousingnotnull(class) i do not know whic notnull is not declared genericlike any though i think it should be for java 8 )you have 2 choices 1- accept nulls 2-check class for 1 you needeither a boolean argument or different names for 2 you need a classargument to check against so in your proposal you would have:- accept nulls do not check class:  any() used as is in java 8  casted in 7 ( or for overload resolution in 8 )- accept nulls check class: isnullora(class)- reject nulls do not check class: notnull() ( same comments as any )- reject nulls check class: isa(class)which is fine dandy for me ( the naming stuff is trivial to achieveusing a franciscoolarteadditionalmatchers helper class )basically you can have a makematcher(boolean acceptnulls class klass) and then any()makematcher(true objectclass)isnullora(klass)makematcher(true klass)notnull()makematcher(false objectclass)isa(klass)makematcher(false klass)> if youre using java 8 all is good simple and clear if youre using java 7 you have to cast any() but (myclass) any() is clearer about what its doing than anything else we have here actually shorter than any(myclassclass) anyway and good ides will automatically suggest the cast for you too so pretty easy to find for newbies null behaviour is also clear here and were pushing people to be explicit about whether they match nulls in all arguments they care abouti think the null / check behaviour is clearer if you group themtogether somehow ( like ive done above ) as this gets rid of theconfusing (current) anyas(class) also i think notnull(class) must goas what is does is served by isa(class)> how does that sound to everybody?fine for me---------------not a proposal----------------now ill explain what i proposed ( for naming along with somemotivations ) i think this discussion seems to prove it is not easilyunderstood this is only for referencenote there are no functional changes with the proposal above justname reorganizations as i think current names are confusing ( and iknow they are for me but this is my problem and i can solve it )0- get rid of anyas and notnull(class) ( served by isa and isnullora )1- any() - keep as it is2- isnullora(class): rename to any(class) as functionality is verysimilar (any()isnullora(declaredparameterclassclass))3- isa() - rename to anynotnull ( it appears next to any() in methodslist and makes the behavioural differences easy to spot also if youhave a method any() and anynotnull ( both being offered byautocomplete ) is natural to assume that anyanyincludingnull whichis correct )4- notnull() - rename to anynotnull() ( to complete the matrix )note: in my naming proposal naked anyacceptnulls it could easily bereversed ( any>anyornull anynotnull>any it just sounds bad to methat way ( maybe because im used to x(object) and x(@nonnull object)and/or explicitly documenting when nulls are not allowed)extra things:- anyobject() - seems to do the same thing as any if so get rid of it  if to avoid confusion if not do the same as with anystring below- isnull(class) - given it can be done with (class)isnull() get rid  of it no need for a class checking version on this- anystring: confusing name with current behaviour given any() accept  nulls rename it to isastring and then per rule 3 above to  anynotnullstring then i would add an anystring equal to  isnullora(stringclass) or any(stringclass) per rule 2 also  consider deleting it (note below)- anyint/anychar/: as with anystring in nearly all aspects- anymap/anymapof ( and its friends anylist anycollection ): similar  to anystring rename to anynotnullmap and then use the now free  anymap to build one accepting nullsfor anystring/anyint/ i would consider having a basic matchersclass with any/anynotnull etc and a matchers derived class ( a laadditionalmatchers ) and relegate all aliases to that one so thejavadoc for the basic matchers class concentrates on basicfunctionality and the one for the aliases/forwarders just states theequivalence ) in fact i would better put a class for just the basicany\* matchers ( including just any() any(class) anynotnull()anynotnull(class) and isnull(class)) another one foreq/startswith/ another one for the anystring and friends staticimports make them easy to use in modern java and the documentationwould be much easier to read (for me at least)## hope this explains my visionregards   francisco olarte || i apologize i havent read the entire thread im still setting up myfamily in ca and trying to manage priorioritiesi think we have following use cases:1 i dont care about the parameter2 i care that it is not null3 i care about the type (implies (2))solutions:1) any() perhaps kill anyobject() needs explicit casting2) no special api kill isnotnull()/notnull() or just leave theisnotnull()/notnull() needs explicit casting3) any(stringclass) alias to isa(stringclass) (or kill isa())i think it is ok if only use case 3) offers api that avoids casting egif the user wants to avoid casting he needs to specify the matcher better(which i dont think is a problem)cheers!on thu apr 9 2015 at 2:39 am francisco olarte notifications@githubcomwrote:> hi tim:> > on wed apr 8 2015 at 8:38 pm tim perry notifications@githubcom> wrote:> > > ok i think that mostly makes sense although im not clear exactly what> > the full api youre proposing is that fits the requirements here your last> > paragraph seems to contradict the four methods youve suggested just above> > any of my paragraphs may seem contradictory but i do not know how to> convey the info and do not know what the exact requirements are but> anyway lets go on> > > i think youre still suggesting an any() method with actively different> > behaviour to an any(xclass) method though> > in my full sugestion not exactly i suggested any to be the same as> any(objectclass) ( declared parameter class really but it could be> implemented this way ) it checks the passed thing is null or a> subclass of object ( second check redundant stated for completitude> )> > > inconsistencies between those two are how we ended up here because one> > does active type matching and the other doesnt and you need different> > null matching behaviour too in addition you definitely need any() or> > itll be confusing so i dont think theres any way you can have an> > any(xclass) method that does actual matching> > > > sounds like there is a route through though: what happens if we accept> > that java 7 is on the way out stick only to casts and stop making the api> > confusing just to support now unsupported java versions? that would give an> > api of:> > any() - matches anything> > isa(xclass) - matches things with x type not nulls> > isnullora(xclass) - matches things with x type or nulls> > im definitely in favour of sticking to casts as they are a standard> language feature and should be clear> > now on your three proposed methods you are forgetting one which is> on another part of the current api notnull() ( or its cousing> notnull(class) i do not know whic notnull is not declared generic> like any though i think it should be for java 8 )> > you have 2 choices 1- accept nulls 2-check class for 1 you need> either a boolean argument or different names for 2 you need a class> argument to check against so in your proposal you would have:> - accept nulls do not check class: any() used as is in java 8>   casted in 7 ( or for overload resolution in 8 )> - accept nulls check class: isnullora(class)> - reject nulls do not check class: notnull() ( same comments as any )> - reject nulls check class: isa(class)> > which is fine dandy for me ( the naming stuff is trivial to achieve> using a franciscoolarteadditionalmatchers helper class )> > basically you can have a makematcher(boolean acceptnulls class klass> ) and then any()makematcher(true objectclass)> isnullora(klass)makematcher(true klass)> notnull()makematcher(false objectclass)> isa(klass)makematcher(false klass)> > > if youre using java 8 all is good simple and clear if youre using> > java 7 you have to cast any() but (myclass) any() is clearer about what> > its doing than anything else we have here actually shorter than> > any(myclassclass) anyway and good ides will automatically suggest the> > cast for you too so pretty easy to find for newbies null behaviour is> > also clear here and were pushing people to be explicit about whether they> > match nulls in all arguments they care about> > i think the null / check behaviour is clearer if you group them> together somehow ( like ive done above ) as this gets rid of the> confusing (current) anyas(class) also i think notnull(class) must go> as what is does is served by isa(class)> > > how does that sound to everybody?> > fine for me> > ---------------not a proposal----------------> now ill explain what i proposed ( for naming along with some> motivations ) i think this discussion seems to prove it is not easily> understood this is only for reference> > note there are no functional changes with the proposal above just> name reorganizations as i think current names are confusing ( and i> know they are for me but this is my problem and i can solve it )> > 0- get rid of anyas and notnull(class) ( served by isa and isnullora )> > 1- any() - keep as it is> 2- isnullora(class): rename to any(class) as functionality is very> similar (any()isnullora(declaredparameterclassclass))> 3- isa() - rename to anynotnull ( it appears next to any() in methods> list and makes the behavioural differences easy to spot also if you> have a method any() and anynotnull ( both being offered by> autocomplete ) is natural to assume that anyanyincludingnull which> is correct )> 4- notnull() - rename to anynotnull() ( to complete the matrix )> > note: in my naming proposal naked anyacceptnulls it could easily be> reversed ( any>anyornull anynotnull>any it just sounds bad to me> that way ( maybe because im used to x(object) and x(@nonnull object)> and/or explicitly documenting when nulls are not allowed)> > extra things:> - anyobject() - seems to do the same thing as any if so get rid of it>   if to avoid confusion if not do the same as with anystring below> - isnull(class) - given it can be done with (class)isnull() get rid>   of it no need for a class checking version on this> - anystring: confusing name with current behaviour given any() accept>   nulls rename it to isastring and then per rule 3 above to>   anynotnullstring then i would add an anystring equal to>   isnullora(stringclass) or any(stringclass) per rule 2 also>   consider deleting it (note below)> - anyint/anychar/: as with anystring in nearly all aspects> - anymap/anymapof ( and its friends anylist anycollection ): similar>   to anystring rename to anynotnullmap and then use the now free>   anymap to build one accepting nulls> > for anystring/anyint/ i would consider having a basic matchers> class with any/anynotnull etc and a matchers derived class ( a la> additionalmatchers ) and relegate all aliases to that one so the> javadoc for the basic matchers class concentrates on basic> functionality and the one for the aliases/forwarders just states the> equivalence ) in fact i would better put a class for just the basic> any\* matchers ( including just any() any(class) anynotnull()> anynotnull(class) and isnull(class)) another one for> eq/startswith/ another one for the anystring and friends static> imports make them easy to use in modern java and the documentation> would be much easier to read (for me at least)> > ## hope this explains my vision> > regards> francisco olarte> > ## > > reply to this email directly or view it on github>  szczepan faberfounder mockitoorg core dev gradleorgtweets as @szczepiq blogs at blogmockitoorg || hi szczepan:mmmm delicious top posting anyway:on thu apr 9 2015 at 3:59 pm szczepan faber notifications@githubcom wrote:> i think we have following use cases:> 1 i dont care about the parameter> 2 i care that it is not null> 3 i care about the type (implies (2))i think you lack at least one ( 4- i care it is null but it isalready served by isnull() ( or a casted null iirc ) not discussed )> solutions:> 1) any() perhaps kill anyobject() needs explicit casting> 2) no special api kill isnotnull()/notnull() or just leave the> isnotnull()/notnull() needs explicit casting> 3) any(stringclass) alias to isa(stringclass) (or kill isa())> > i think it is ok if only use case 3) offers api that avoids casting eg> if the user wants to avoid casting he needs to specify the matcher better> (which i dont think is a problem)i dont think casting specially in such a specialized case asmockiing in tests is an issue and j8 will avoid most of it what idislike of this is having mockm((string)any()) accept nulls andmockm(any(stringclass)) reject nulls isa sounds/reads fine to me iprefer anynotnull as name for 2 and 3 as it reads better highlightsthe relation with any ( they are the family of matchers which justchecks type not value ) but ive reached a point where i think theonly form to expose a proposal is to implement it to expose how itlooks which will have to wait in my casealso thinking about the previous stuff im beginnging to thinkisnullora(class) although it has a clear definition ( i have amockm(list) i want to match anything assignable to an arraylistwhich are null or arraylist subclasses so mockm(any(arraylist)) )im not too sure about its usefulness ( as i can do it with twomatchers and isnull plus an isa with the same target or useadditionalmatchersor )francisco olarte || i agree with francisco if were going for casts i dont think we can have `any(stringclass)` still exist because we cant make it usefully be consistent with `any()` i think just `isa` works fine for that case though and i find it quite readable and cleari do marginally prefer `notnull()` to `anynotnull()` just because its shorter and simpler i think `when(omethod(notnull() notnull()))` reads easier than `when(omethod(anynotnull() anynotnull()))` and while anynotnull makes sense in relation to any its less clear what it does when you see it standalone notnull however is very clear indeed it also doesnt feel quite so much like `any` and `notnull` are the same family as much as `isa/isnullora` are just because `any` is kind of a special case (any + specific values are all people will probably use 1/2 the time i expect)i also do think `isnullora(xclass)` does need to exist explicitly too just because its a common case and having to write `or(isnull() isa(stringclass))` (or `or((string) isnull() isa(stringclass))` for java 7) everywhere is quite substantially messier and harder to parse internally just being an alias to that is fine thoughdefinitely feels like were getting pretty close now! one more api update then:- `any()` - matches anything including nulls- `notnull()` matches anything except nulls- `isa(xclass)` matches things of x type except nulls- `isnullora(xclass)` matches things of x type including nulls- we get rid of every other variant (`anystring()` `isnotnull()` etc)i think there are some other extra variants we will still need for things like generic list type checks and varargs but those should follow on fairly cleanly from these thoughts? || hi time:on thu apr 9 2015 at 6:34 pm tim perry notifications@githubcom wrote:> i agree with francisco if were going for casts i dont think we can have any(stringclass) still exist because we cant make it usefully be consistent with any() i think just isa works fine for that case though and i find it quite readable and clearok> i do marginally prefer notnull() to anynotnull() just because its shorter and simpler i think when(omethod(notnull() notnull())) reads easier than when(omethod(anynotnull() anynotnull())) and while anynotnull makes sense in relation to any its less clear what it does when you see it standalone notnull however is very clear indeedok i donot agree with the arguments but i feel voting for notnull nowis much better than following the thread i retract all my proposalsfor anynotnull--- aside---> it also doesnt feel quite so much like any and notnull are the same family as much as isa/isnullora are just because any is kind of a special case (any + specific values are all people will probably use 1/2 the time i expect)> i think if you place them in a square it does isa is nw isnullora> is ne any is se ¿ which one goes into sw ? ( reminds me of the test> i did in school )also any() is like isnullora(objectclass) notnull() is likeisa(objectclass)not a proposal/discussion on the main issue just put here as anexplanation of my abandoned views--- /aside ---> i also do think isnullora(xclass) does need to exist explicitly too just because its a common case and having to write or(isnull() isa(stringclass)) (or or((string) isnull() isa(stringclass)) for java 7) everywhere is quite substantially messier and harder to parse internally just being an alias to that is fine thoughok with it> definitely feels like were getting pretty close now! one more api update then:> > any() - matches anything including nulls> notnull() matches anything except nulls> isa(xclass) matches things of x type except nulls> isnullora(xclass) matches things of x type including nulls> we get rid of every other variant (anystring() isnotnull() etc)> > i think there are some other extra variants we will still need for things like generic list type checks and varargs but those should follow on fairly cleanly from these thoughts?ok my main problem is i find current naming extremely confussingonce anyas is gone and replaced with ( more correct imo )  isnullorait nearly vanishes but if variants are recovered/kept ( i would do itin a separate class which could be very easily documented at the topand methods otherwise they clutter the main matchers docs classedare cheap specially in test code ) keep their name coherent to theimplementation ie givien anystring() can (should?) be implementedas isa(stringclass) to achieve current behaviour name it isastring()(same goes if behaviour is simillar to isnullora) ( or zap it iprefer just a longer way to do a thing than a confusing alternative )( i used to try to put short names to things but since about 20 yearsago ive been progresively going to longer and clearer typing iseasier than thinking ymmv )francisco olarte || cool i think were in agreement then im very happy to zap lots of the extra methods like `anystring()` where java 8 means theyre not going to be useful and theres a simple easy to find alternative to them (like just casting `any()` which most ides will even suggest and do for you)@bric3 @szczepiq are you two happy if i open a pr extending my previous changes to implement this api as in my message above? || hi @pimterry @folarte thanks for the discussion i was also away staffed at devoxx fr for the past week i think theres some agreement here im basically ok for these changes : - `<t> t any()` - matches anything including nulls- `<t> t notnull()` matches anything except nulls- `<t> t isa(class<t> clazz)` matches things of `t` type but `null`  > naming could be tweaked without the `is` thus becoming `a(xclass)` i understand this one is kinda bold- `<t> t isnullora(class<t> clazz)` matches things of `t` type including `null`  > naming could be tweaked without the `is` thus becoming `nullora(xclass)`- we get rid of every other variant (`anystring()` `isnotnull(class)` etc)  > theres still need for primitive matchers : `anyint` should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should not@szczepiq another related task would be to deprecate apis in the 1x line || happy to drop the `is` prefix seems shorter and clearer this might be one place where we do want an alias for `a(stringclass)` and `an(elementclass)` as otherwise i think its quite difficult to read> - we get rid of every other variant (anystring() isnotnull(class) etc)> > > theres still need for primitive matchers : anyint should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should notdo mean `anyint()` or `anint()`? i think the conclusion of the above discussion is that we cant have an `anyint()` method without breaking the api: either `anyint()` actively matches the type and rejects null (confusingly inconsistent with `any()`) or it doesnt and its confusing and people use it wrong (the current state of affairs)for java 8 `any()` should work everywhere i think and for java 7 you can use `(int) any()` i cant easily test this right now is there something about primitives generics and our implementation that means this doesnt work? thats going to be a difficult problem to solve if sofor `anint()` on the other hand it doesnt actually make the api inconsistent if we do add that as another method so thats very doable not clear why we need it in this case either thoughdo you have an example that doesnt work with this as given? || hi brice:on sun apr 12 2015 at 7:55 pm brice dutheil notifications@githubcom wrote:> thanks for the discussion i was also away staffed at devoxx fr for the past week i think theres some agreement here im basically ok for these changes :> > <t> t any() - matches anything including nulls> <t> t notnull() matches anything except nulls> > <t> t isa(class<t> clazz) matches things of t type but null> > naming could be tweaked without the is thus becoming a(xclass) i understand this one is kinda boldi strongly disagree with naming it a or ( sorry tim ) an i feel theyare too short and error prone ( and this is not cobol a pl/dsl is notenglish )> <t> t isnullora(class<t> clazz) matches things of t type including null> > naming could be tweaked without the is thus becoming nullora(xclass)i stil think my any/anynotnull overrrides where superior names but asthis is functionally equivalent ill just wrap it ok so far> we get rid of every other variant (anystring() isnotnull(class) etc)> > theres still need for primitive matchers : anyint should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should noti think the point of allowing nulls for primitives is a no point if ihave a method mockmethod(int) which i match withwhen(mockmethod(anyint())) it doesnt matter that the matcherreceives an integer due to boxing/reflection stuff it will never benull becuase if i do ""integer integer  null  mockmethod(integer)""autounboxing will raise npe before matchers get anything to say andif there was another override mockmethod(integer) well first thisshould have been matched by an appropiately casted any/is\* and secondits so perverse that user deserves whatever happens therefrancisco olarte || soon its next in my queue :) thank you guys for patience || great discussion thanks everybody for chipping in lets get this sorted out> what i> dislike of this is having mockm((string)any()) accept nulls and> mockm(any(stringclass)) reject nullsi agree there is a gotcha: given that any(sometypeclass) is most used matcher method it will be a pain to users to upgrade to mockito 20however if we tell users that any(stringclass) checks type but (string) any() does not it is rather awkward message and it might confusing down the roadby now most users are probably used to the behavior of mockito matchers and the pitfall is well documented ) so there is an option to leave things as they areremoving any(t) pretty much means that we need to remove all matcher methods like anystring() anylist() etc this increases the impact on the userill think about this a bit more and get back by the end of today || btw what do you guys think about #246? || i think were down to following options please vote or suggest other options:1 shoot down any(t) and anyt() in favor of isa() this thread seems to be converging on this approach consistent and clean high impact potential churn2 change any(t) and anyt() methods to reject nulls suggested by the community originally potentially confusing down the road due to inconsistence with any() this inconsistence becomes less of a problem with java83 do (2) but also shoot down any() replacing it with anyobject() or anything() or _ (ala spock ) not sure i like killing any() because it is neatly compact4 leave things as they are for now perhaps revisit for java8 support || hi​ ​szczepan:> btw what do you guys think about #246>  > ​i think it may have some problems and be an overload abuse​ if done this> way i would vote for having long named methods with is() being just a> forwarder and i think there may be some ambiguities if overloaded is() is> used to test overloaded method ( ie when you mock m(is(stringclass))> are you mocking m(class c) ( as m(eq(stringclass))  )  or m(string s) with> any string? ( its a contrived overload but ive seem some of these where> the string version takes a class name i think osgi has some of them )> having a long method (anyistanceof equalto evenm specially isnull()> which i personally prefer to is(null) ( which overload is it going to pick> the object one with a null param ) ) lets people key a little more in the> difficult cases and does not at too many complexity or a signigicant run> time for test code ( is() is just a one line forwarder and its javedoc> can be left as such which just an @link to the unoverloaded method )regarding readability im not sure compact overloaded names are morereadable they may be easier to read aloud but you need to invoke higherlevel brain functions to parse it and distinguish the overload being usedbut maybe im just becoming slower​francisco olarte​ || yep i prefer option 1#246 sounds like a good idea to me but we should definitely market it very clearly as a convenience method (as francisco mentions) and obviously keep the explicit methods so people are aware they can opt in to explicitly choosing the relevant option if they need to or theyre not sure what the overloading doesthe overload im most suspicious of is `is(t)` just because its most likely to be ambiguous in practice and when trying to just think about what a line is doing `is(null)` seems clear `is(stringstartingwithhello)` is fine but if i saw`when(is(100) is(stringclass))` i think my default would be to assume that the argument needed to literally be the class object not totally sure about that though happy to go with it if others are happy || any progress on this? are people happy for me to put together a potential pr for option 1 which it sounds like weve settled on as something concrete to discuss? || my preference is to have the following matchers (option 1?):-  `<t> t any()`  that accepts anything including `null`  i associate _""any""_ to the _""anything""_ in my world that includes null-values and instances it is compact and suitable for the most common cases- `<t> t anyobject()` or `<t> t notnull()` reject `null` values opposite to any() the name should indicate that null is rejected to avoid confusion about its behaviour- `<t> t isa(class<? extends t>)` reject `null` values and all values that are not a subtype of `t` like instanceof- all `any*()` and `any(t)` should be dropped cause they have different behaviour (as described before) || > 1 shoot down any(t) and anyt() in favor of isa() this thread seems to be converging on this approach consistent and clean high impact potential churn> 2 change any(t) and anyt() methods to reject nulls suggested by the community originally potentially confusing down the road due to inconsistence with any() this inconsistence becomes less of a problem with java8> 3 do (2) but also shoot down any() replacing it with anyobject() or anything() or _ (ala spock ) not sure i like killing any() because it is neatly compact> 4 leave things as they are for now perhaps revisit for java8 supportlets try to be decisive :)tim & christian vote for option 1) i very much appreciate those votes and option 1 does have a lot of charm :)myself i vote for 2) because:- any(t) reads better (seems more fluent) is more intuitive to write than isa() it looks good in tests- it is consistent gramatically with any() it makes the api a bit more consistent- java8 is very popular people use any() for matching anything and can use any(t) for matching specific type (not null)- removing any(t) (options 1 and 3) seems like a churn and big impact on users without strong enough justification it seems arbitrary that we remove the any(t) methods eg myself as a user i would not be convinced that migrating to mockito 20 is a good idea because i need to fix hundreds of compilation errors due to removal fundamental api method (anyt/any(t)) even if i make that search&replace im not convinced that tests look better now the change also hurts muscle memory and users would be finding themselves using any(t) methods finding the code not compile then realizing that aha! this method was removed however if we update the behavior of any() (option 2) we will provide very nice signal to users during the migration to 20 we could potentially expose bugs most users expect nulls to be rejected by any(t) - mockito 20 will make expose tests that fail that assumptionwe dont have to agree however it would really cool if we were on the same page :) it would be so nice if everyone of us could stand behind decisions we make as a teamwe definitely need to make the decision!!! (if left undecided were effectively deciding on option 4) || i would like to suggest introducing the isa api alongside any the latter would accept nulls while the former would rejecet themnulls are pretty common as values so we ahould not make this more difficult than necessary also tgis makes migration easier || i already started the work on this a few days ago and i chose to kinda follow option 2 as well heres the plan :- `<t> t any()` that accepts anything including `null` i am pondering the addition of `anything` as it is the original meaning of `any`- `* any*()` / `<t> any(t)` will be aliases of `<t> isa(t)` **this is the expected behaviour by users** doing this will introduce the rejection of `null` with java 8 i saw young developer to switching to `any()` when `null` values where used instead of `anyint`since we want to do a release candidate i suggest that we ship the _null safe_ `any*` and remove the `null` check if too much people complaincc @timvdlippe @marcingrzejszczak @raphw @szpak  || thanks for feedback!+1 to your plan-1 to anything it feels that it does not add sufficient value its alonger alias - not sure why would someone want to use iton mon jul 25 2016 at 10:10 am brice dutheil notifications@githubcomwrote:> i already started the work on this a few days ago and i chose to kinda> follow option 2 as well heres the plan :> - <t> t any() that accepts anything including null i am pondering the>   addition of anything as it is the original meaning of any> - \* any_() / <t> any(t) will be aliases of <t> isa(t) *this is the>   expected behaviour by users_ doing this will introduce the rejection>   of null with java 8 i saw young developer to switching to any() when>   null values where used instead of anyint> > since we want to do a release candidate i suggest that we ship the _null> safe_ any* and remove the null check if too much people complain> > cc @timvdlippe  @marcingrzejszczak>  @raphw  @szpak  > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || +1 i agree lets try this for the rc || ";1;0;adds deprecation for generic method to avoid casting as it is not anymore necessary in java 8;
511;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix some warnings;fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.;;0;fix some warnings; various warnings mostly unused imports but also a couple of unnecessary semicolons and interface modifiers`/gradlew build` built successfully; ;;;;1;1;remove redundant interface modifiers;
512;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix some raw type warnings in tests;;;0;fix some raw type warnings in tests;; ;;;;1;1;fix some raw type warnings in tests;
513;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;replace testbase#assertcontainsignoringcase(string sub  string string…;…) with assertj #containsignoringcase  other methods of testbase could be replaced in a similar way.;;0;replace testbase#assertcontainsignoringcase(string sub string string…;…) with assertj #containsignoringcaseother methods of testbase could be replaced in a similar way;     ;;;;1;1;replace testbase#assertcontainsignoringcase(string sub string string) with assertj #containsignoringcase;
514;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactored mockutil to a static utility class (#426);;;426.0;refactored mockutil to a static utility class (#426);;  514  ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored mockutil to a static utility class (#426);
515;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactored allinvocationsfinder and verifiableinvocationsfinder to st…;…atic utility classes (#426);;426.0;refactored allinvocationsfinder and verifiableinvocationsfinder to st…;…atic utility classes (#426);  515   @pascalschumacher these 2 classes have only one public method they can be merged into:- `verificationfinder::findverified()` /  `::findall()`what do you think? || @christianschwarz sure ||;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored allinvocationsfinder and verifiableinvocationsfinder to static utility classes (#426);
516;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;replace testbase#assertnotcontains(string sub  string string) with as…;…sertj #doesnotcontain(charsequence sequence);;0;replace testbase#assertnotcontains(string sub string string) with as…;…sertj #doesnotcontain(charsequence sequence);    ;;;;1;1;replace testbase#assertnotcontains(string sub string string) with assertj #doesnotcontain(charsequence sequence);
519;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;replace testbase#assertcontains(string sub  string string) with asser…;…tj #contains and #hasmessagecontaining;;0;replace testbase#assertcontains(string sub string string) with asser…;…tj #contains and #hasmessagecontaining;  519   lgtmit was a very ungrateful work thanks pascal! ||;;;;1;1;replace testbase#assertcontains(string sub string string) with assertj #contains and #hasmessagecontaining;
523;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;made some timeouts in verificationafterdelaytest and verificationwith…;…timeouttest more lenient to prevent frequent build failures on travis ci;;0;made some timeouts in verificationafterdelaytest and verificationwith…;…timeouttest more lenient to prevent frequent build failures on travis ci;  523  **< ;;;;1;1;made some timeouts in verificationafterdelaytest and verificationwithtimeouttest more lenient to prevent frequent build failures on travis ci;
525;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;add regression test for #508;as mentioned in the bug report for #508   adds a test which would catch this issue if it happened to regress in the future.;;508.0;add regression test for #508;as mentioned in the bug report for #508  adds a test which would catch this issue if it happened to regress in the future; ;mockitowhen() fails when method could originate from superclass or interface;i was testing/rebuilding a project with the latest mockito 20-beta when i noticed a couple of tests had started failing looked into why and was able to reduce the issue to [a reproducible test case]( it looks like the problem is somehow caused by the method signature for `getfoo()` the subclass gets this method from two places the superclass with generic return type and from the interface with a concrete one and this seems to be confusing mockito the test works with 11019 but fails with 2090-beta (/latest head)ps feel free to replace the title with something more descriptive;"i think this is an issue with bytebuddy wdyt @raphw? || ~~@hansjoachim have you tried other mockito 2 beta versions ?~~ not needed i did a `git bisect` || byte buddy overrides the method as follows:``` javapublic string getfoo() {  return (string) mockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptsupercallable(    this    mockitointerceptor     cachedmethod     new object[0]    new foo$sub$mockitomock$58829931$auxiliary$ey71zqfr(this)  )}```this is the expected value does not look like a byte buddy related problem to me || after a `git bisect` the problem appeared with this commit 7fabd84fdfb2f80f8c135fe3865263c684c0d4e7```~/opensource/mockito ± ❯ git bisect bad~/opensource/mockito ± ❯ git bisect good v2026-betagit bisect run /gradlew :test --tests ""orgmockitousagebugsconfusedsignaturetest""[7fabd84fdfb2f80f8c135fe3865263c684c0d4e7] updated to byte buddy 07: adds support for preserving generic type information at runtimerunning /gradlew :test --tests orgmockitousagebugsconfusedsignaturetestparallel execution is an incubating feature compilejava up-to-date compilegroovy up-to-date processresources up-to-date classes up-to-date jar up-to-date assemble up-to-date compiletestjava up-to-date compiletestgroovy up-to-date processtestresources up-to-date testclasses up-to-date test up-to-date check up-to-date build up-to-dateversion: 2031-beta  some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details:processresources up-to-date compiletestjavanote: some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details:processtestresources up-to-date testobjc[46062]: class javalaunchhelper is implemented in both /library/java/javavirtualmachines/jdk180_77jdk/contents/home/bin/java and /library/java/javavirtualmachines/jdk180_77jdk/contents/home/jre/lib/libinstrumentdylib one of the two will be used which one is undefinedorgmockitousagebugsconfusedsignaturetest > should_work failed    orgmockitoexceptionsmisusingmissingmethodinvocationexception:    when() requires an argument which has to be a method call on a mock    for example:        when(mockgetarticles())thenreturn(articles)    also this error might show up because:    1 you stub either of: final/private/equals()/hashcode() methods       those methods *cannot* be stubbed/verified       mocking methods declared on non-public parent classes is not supported    2 inside when() you dont call method on mock but on some other object        at orgmockitoexceptionsreportermissingmethodinvocation(reporterjava:102)        at orgmockitointernalmockitocorestub(mockitocorejava:64)        at orgmockitointernalmockitocorewhen(mockitocorejava:76)        at orgmockitomockitowhen(mockitojava:1615)        at orgmockitousagebugsconfusedsignaturetestshould_work(confusedsignaturetestjava:16)30 tests completed 1 failed 29 skipped:test failedfailure: build failed with an exception* what went wrong:execution failed for task :test> there were failing tests see the report at: file:///users/brice/opensource/mockito/build/reports/tests/indexhtml* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log outputbuild failedtotal time: 5939 secs7fabd84fdfb2f80f8c135fe3865263c684c0d4e7 is the first bad commitcommit 7fabd84fdfb2f80f8c135fe3865263c684c0d4e7author: rafael winterhalter <rafaelwth@webde>date:   thu nov 12 11 07 2015 +0100    updated to byte buddy 07: adds support for preserving generic type information at runtime    for users of mockito this version brings the following advantages:    1 a mocked method contains its generic type: a mocked method of type list<string> will not be erased to list many frameworks / libraries extract this information and would then react differently when encountering an instance of the mock class compared to the original class    2 bridge methods can only be resolved appropriately when the generic type information is processed this allows for a reliable recovery of ""visibility bridges"" which are no true bridges and are now reliably mocked:100644 100644 d27873a17388f63c683339dfaa640d35f0ac27ed 72f5bb3fbdf07ea04900c195c46ab3990f91135b m  buildgradle:040000 040000 20affcb117604ba6251e1195c1820ffb09664cec aa31f07848d605ab4564587afa2c5b63daf5fca7 m  srcbisect run success``` || strangely enough when setting a breakpoint the interceptor method does not seem to be invoked i will look into it probably a problem with resolving bridge methods || yes it is weird the issue seems to have been introduced by bytebuddy 07 || things that matter im using java 17```~/opensource/mockito ± ❯ java -versionjava version ""170_80""java(tm) se runtime environment (build 170_80-b15)java hotspot(tm) 64-bit server vm (build 2480-b11 mixed mode)``` || @raphw yup the test fails with `missingmethodinvocationexception` || i found the problem the bridge method is no longer identified for some reason it seems like byte buddy struggles to determine the bridge methods target i am going to fix this asap || i  it still cleaning up for a new byte buddy release should be fixed by tomorrow or latest friday || thanks @raphw ! || thank you ive tested again and its working now :)i didnt see any tests added alongside the fix and since it seems this bug was introduced a while back i wonder if there should be one to catch regressions if youd like to i can submit the test i made above in a pr i wasnt really sure where to place the test so if you have any suggestions for this or general style guidelines just let me know || the regression test was added to bytebuddy which is the dependency with the fixed bug however adding a regression test in mockito seems fair too i would add the test in the bugs package inside mockitousage iirc || ";1;0;slightly more descriptive test name;
528;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;missing generics info on collection matchers;follow up on #510 (issue #194) following this comment   basically it tweaks the collection matchers with generic support. it should have bee in abf9851.;;194.0;missing generics info on collection matchers;follow up on #510 (issue #194) following this comment  it tweaks the collection matchers with generic support it should have bee in abf9851;;tweaks matchersany family matchers behavior;this issue is a follow up of the work started in #141 by @pimterry also heres an extract of a message on [this thread]( of the mailing list :---the origin of these methods is they come from `anything` ie anything matches later for shortness and cast avoidance the aliases grew but the api naming thus became inconsistent with what a human would expect so this behavior is being changed in mockito 2 beta to be precise heres the status on these api in the version 205-beta :- `any` `anyobject` `any(class)` wont check anything (at first they were just aliases for _anything_ and for cast avoidance) `null` is a valid value- `anyx` like `anystring` will check the arg is not `null` and that has the correct type- `anylist` will check the argument is not null and a `list` instance- `anylistof` (and the likes) at the moment are just aliases to their non generic counter part like `anylist`note this is work in progress (started here in 141]( these new behavior can / will change in the beta phase im especially wondering if the `any` family should allow `null` and if not do a type check for example with these matchers : - `any` `anyobject` stay the same they currently allow `null` and dont have to do type check anyway- `any(class)` currently allows `null` and doesnt do type check > allows `null` and if not checks for the given type- `any<collection>of` currently doesnt allow `null` and does a type check of the collection not elements > allows `null` if not checks collection type if not empty checks element typemaybe extend/create a _symmetric_  `isa` family api that wont allow any `null` arguments---;"`any` family is currently _(at his time up to 205-beta)_ inconsistent on the way they allow or not `null`s type checking is ok but `null` check behavior consistency is also important || anyx gramtaically tends to imply to return false for null because anyobject is not null i agree completely the api should be consistenton sun apr 5 2015 11:54 brice dutheil notifications@githubcom wrote:> any family is currently _(at his time up to 205-beta)_ inconsistent on> the way they allow or not nulls type checking is ok but null check> behavior consistency is also important> > ## > > reply to this email directly or view it on github>  || > anyx gramtaically tends to imply to return false for null because any object is not nullim not anymore of sure of that anyway the changes introduced in this api make it inconsistentthats why i propose any validates `null` and if not `null` then validates the typealso on the mentioned thread _francisco olarte_ was proposing a `anynotnull` family this could clarify the behavior on `null` of these apis || agreed any should return false for null and false for wrong type (instanceof) otherwise i think it would violate the principle of least surpriseon sun apr 5 2015 12:57 brice dutheil notifications@githubcom wrote:> anyx gramtaically tends to imply to return false for null because any> object is not null> > im not anymore of sure of that anyway the changes introduced in this api> make it inconsistent> thats why i propose any validates null and if not null then validates> the type> > also on the mentioned thread _francisco olarte_ was proposing a anynotnull> family this could clarify the behavior on null of these apis> > ## > > reply to this email directly or view it on github>  || i see anystring() ( and friends ) checking for null and anyobject() not doing it as an inconsistency potentially leading to user surprise object is as much of a class as string ( or other )other thing is i fail to see is the difference ( if there is any ) between isa(klazz) and notnull(klazz) ( or isnotnull but i see that one is a forwarder ) to me they seem they do the same given the docs but the code is different and im not familiar enough with it to assert they do the same thing when doing dsl helper libraries ive found ( the hard way ) having slightly different names for the same thing seems a good idea initially but leads to problem along the way so i would vote for just having one of notnull/isnotnull ( and isa if it is functionally equivalent ) || i think there might be confusion here: @szczepiq i dont think the two of you are agreeing @bric3 seems to be saying that `any` should match nulls and anynotnull should exist (and presumably not match null) while youre saying that `any` should not match nulli think the problem here is that theres two use cases that currently arent clearly separated both of which we need to support1 i dont care what the value im matching is _at all_ i want a very simple intuitive wildcard matcher that will match absolutely anything and will compile with no extra effort (so no casts)2 i care about the type of the value that im matching but no details beyond that i want a matcher that will not match values with the wrong typei think both of these are major common use cases if we make any of the `anyx()` methods reject nulls they no longer support the first case and if we leave it as-is then they currently appear to support the 2nd case but arent really doing so which is where all this came from originallyi do think any api that supports use case 2 should reject nulls by default: if youre asserting specifically on the type of the value we should push people to be clear about whether or not null is valid in the given case i think an api for use case 1 should not reject nulls because you want to match _everything_these are two quite different apis though and to get any kind of api consistency were going to need them to be separate sets of methods i suggest:- `any()` - matches absolutely anything including nulls as a generic method returning t (as now)- `anyasx()` and `anyas(xclass)` - matches absolutely anything including nulls as a generic method returning x  - this is as in 19 but with the names changed to make it clear that this is purely a type casting concern not type checking and intentionally being a bit more verbose to discourage unnecessary use  - note that as of java 8 target type inference considers method arguments so you should be able to use `any()` in every case except choosing between overloaded methods (pretty rare?) in addition note that java 7s final update is this month and then its unsupported  - wed also obviously document that users should prefer isa etc if they want to check the type but i think its much more obvious that `anyasstring()` isnt actually checking the values a string (unlike `anystring()` which did suggest that)- `isa/isan(xclass)` and `isanx()` - matches on type rejecting nulls- `isnulloran(xclass)` and `isnulloranx()` - matches on type accepting nullsi think this makes for a relatively small change so gives fairly easy migration but makes it clear that the `any()` methods are all just generic wildcards (for use case 1) and provides a clear set of other methods to support actual type checking and pushing users to be clear about nullability along the way (for use case 2)the only other option i can see we might want to do is stop supporting use case 1 entirely make everybody be much more specific about what they want and reject nulls everywhere i think use case one is likely to be the most common case for use argument matchers anywhere though far more than anything else and we definitely definitely need to support it as an intuitive easy first-class citizenthoughts? do people agree both use cases are common and important? does anybody have a better solution to help us get both while keeping a sensible consistent api? || on tue apr 7 2015 at 5:12 pm tim perry notifications@githubcom wrote:> these are two quite different apis though and to get any kind of api> consistency were going to need them to be separate sets of methods i> suggest:> - any() - matches absolutely anything including nulls as a generic>   method returning t (as now)> - anyasx() and anyas(xclass) - matches absolutely anything including>   nulls as a generic method returning x>   - this is as in 19 but with the names changed to make it clear>     that this is purely a type casting concern not type checking and>     intentionally being a bit more verbose to discourage unnecessary use>   - note that as of java 8 target type inference considers method>     arguments so you should be able to use any() in every case except>     choosing between overloaded methods (pretty rare?) in addition note that>     java 7s final update is this month and then its unsupported>   - wed also obviously document that users should prefer isa etc if>     they want to check the type but i think its much more obvious that>     anyasstring() isnt actually checking the values a string (unlike>     anystring() which did suggest that)>     - isa/isan(xclass) and isanx() - matches on type rejecting nulls> - isnullor(xclass) and isnullorx() - matches on type accepting nulls> > i think this makes for a relatively small change so gives fairly easy> migration but makes it clear that the any() methods are all just generic> wildcards (for use case 1) and provides a clear set of other methods to> support actual type checking and pushing users to be clear about> nullability along the way (for use case 2)> > the only other option i can see we might want to do is stop supporting use> case 1 entirely make everybody be much more specific about what they want> and reject nulls everywhere i think use case one is likely to be the most> common case for use argument matchers anywhere though far more than> anything else and we definitely definitely need to support it as an> intuitive easy first-class citizen> > thoughts? do people agree both use cases are common and important? does> anybody have a better solution to help us get both while keeping a sensible> consistent api?​i agree all are used and importantsim still struggling with the difference between `isnullor(xclass)` and `anyas(xclass)` the only difference i see is if i have a class `a` with a subclass `suba` and a class `b` with a subclass `subb` and a couple of methods `m(a)` and `m(b)` is that `m(anyas(subbclass))` will select `m(b)` and match on a `b` but `m(isnullor(subbclass)` will select it and match only on a `subb` so i could have a broader matcher for `m(isnullor(bclass))`even if this is the case i would just suppress the `anyas(xclass)` as my contrived example could be better written as `anyas(bclass)` in which case i would rename isnullor to any and isa to anynotnull in the naming side i find `any()` ​natural `anyas` forced as i consistently read `any(xclass)`as _any thing which can be assigned to a variable of type x_so i would end up with only two method names any and `anynotnull` with a parameterless plus a class parameter variant ( discounting typeing helpers like `anynotnullstring`) which would work:1 `anynotnull` in any variant does not accept nulls any does2 a parameterless `any()`/`anynotnull()` is equivalent to the same method with the declared parameter class note if you can use `any[notnull]()` in the methods there are no overloads and the language guarantees i cannot use an incorrect typeso if i have a method `m(list l)` `m(any(arraylistclass))` would match anything which can be stored in an `arraylist` var subclasses and `null` included and `anynotnull(arraylistclass)` will need a not null one `m(any())` would exactly as `m(any(listclass))` mockito cannot check it but i cannot write code to call `m` with a non-list argument java is type checked same goes for `anynotnull`otoh if i have `m(set s)` too i must use `m(any(setclass))` or `m(any(listclass))` just to resolve the overload although in this case the matcher type checking is superfluousi do not see the point on `any(xclass)` not checking the type and having `isa(xclass)` which does it seems confusing to me so my proposal is basically zapping any of the variants i mean from the description in the overloaded method `m(any(arraylistclass))` will select the list variant butmatch a call with any `list` subtype while `isnullor(arraylistclass)` will only match `arraylist`s ? i do not see this has any real use ( the parameter type must be accessible in the test if you want any list use `isnullor(listclass)`)maybe im missing something but i see `any(xclass)` redundant better served  isnullor` the rest is just naming disagreement​francisco olarte​ || the issue with getting rid of `anyas(xclass)` is that we want two things:- a way to match an argument without checking anything about its value (any)- a way to match an argument and check its type (isa)i think your solution is to just use `any()` with no parameter everywhere to cover the first case and specify the type when you want the 2nd case that wont work because target type inference doesnt work for method arguments in java < 8 so its impossible to use any() without an argument (unless the parameter is just `object` typed)specifically in java 7 the below wont compile:``` javaclass x {   public bool method(list l) {  }}x x  mock(xclass)// error: method(javacollectionslist) cannot be applied to (javalangobject)when (xmethod(any())thenreturn(true)```anybody on java < 8 has to specify the type every time they match anything or its impossible to make it compile they can never really use `any()` they always have to use `any(xclass)` (or equivalent) we need a way in java 7 that you can say match absolutely anything please that compiles and i think `any(xclass)` or equivalent is the only optionif you make that `any(xclass)` matcher check the type (as you suggest) then it no longer matches everything any more and it becomes impossible to wildcard match everything in java < 8 (without casting but that would be pretty nasty)therefore if you want to be able to both match specific types and wildcard match everything in java < 8 you have to have two separate apis to do so the names of those apis need to clearly tell the user which of those two things theyre doing (match anything but cast the matcher to make it compile vs match only this type)i dont think thats avoidable im very happy to take better suggestions for `anyas(xclass)` that make it clearer its just a convenient casting method (without making it so nasty that it stops being convenient) but that method does still need to exist i thinkin addition to all that: wed rather the match a specific type matcher didnt accept nulls by default (as your `any(listclass)` does) we need to make people opt in to matching nulls because its good practice and because theres some potentially confusing behaviour there as nulls are kind of outside the type system we also cant have the wildcard matcher reject nulls or its not matching everything any more thus again they need to be two different methods || hi tim:on tue apr 7 2015 at 7:37 pm tim perry notifications@githubcom wrote:> the issue with getting rid of anyas(xclass) is that we want two things:> > a way to match an argument without checking anything about its value (any)> a way to match an argument and check its type (isa)> > i think your solution is to just use any() with no parameter everywhere to cover the first case and specify the type when you want the 2nd case that wont work because target type inference doesnt work for method arguments in java < 8 so its impossible to use any() without an argument (unless the parameter is just object typed)i dont think youve understood my solution from the previouslypropossed one ( any() + anyas(class) + isa(class) + isnullora(class) (- notnull() which is in another place ) i propose to remove anyas  given it does not check type rename isa(class) to anynotnull(class)  rename isnullora(class) to any(class) and rename ( or forward )  notnull() to anynotnull()> specifically in java 7 the below wont compile:> > class x {>    public bool method(list l) {  }> }> > x x  mock(xclass)> > // error: method(javacollectionslist) cannot be applied to (javalangobject)> when (xmethod(any())thenreturn(true)perfect in this case you use the propossed isnullora(class) which iproposed to rename as any(class)also just grepped and got this from one of my test files:```    ac1  mock(autocallerclass)    when(ac1makecall((accallrequest) any()))thenreturn(resp1)```in case you wonder autocaller is an interface with a method""makecallresponse makecall(accallrequest)"" not overloadedi think this is clearly superior in java 7 ( im unable to use java 8on those projects due to problems with the app server ) the any()conveys the i do not care just make this compile and the castclearly says this is due to one of those java 7 shortcomings to me> anybody on java < 8 has to specify the type every time they match anything or its impossible to make it compile they can never really use any() they always have to use any(xclass) (or equivalent) we need a way in java 7 that you can say match absolutely anything please that compiles and i think any(xclass) or equivalent is the only optionwhich is what i proposed you have isnullora(class) which coversthis correct me if wrong> if you make that any(xclass) matcher check the type (as you suggest) then it no longer matches everything any more and it becomes impossible to wildcard match everything in java < 8 (without casting but that would be pretty nasty)it is the method has a declared argument type of list which meansthe compiler will check that when you use the mock inxmethod(whatever) whatever implements list so isnullora(listclass)or any(listclass) will allways match whatever with an extraredundant type check> therefore if you want to be able to both match specific types and wildcard match everything in java < 8 you have to have two separate apis to do so the names of those apis need to clearly tell the user which of those two things theyre doing (match anything but cast the matcher to make it compile vs match only this type)as i said im not knowdledgeable enough and havent got timepresently to dig through the sources if any(listclass) matches wheni pass an arraylist to the mock i can always wildcard by using thedeclared argument type> i dont think thats avoidable im very happy to take better suggestions for anyas(xclass) that make it clearer its just a convenient casting method (without making it so nasty that it stops being convenient) but that method does still need to exist i thinkforget about my proposed renaming with the any/anyas/isa/isnulloraproposal is there any case in which you must use anyas() which cannotbe solved by using isnullora(xclass)? i think they are synonims theproblem i see with anyas as stated is that in the previous example (without overloads ) i could code a matcher aswhen(xmethod(anyas(arraylistclass))) and it shoud fire ( as it doesnot check type ) when i do xmethod(new linkedlist()) i think this isconfusing and asking for problem and by making it check the type icould make when(xmethod(anyass(arraylistclass))) to catch onespecific thing and after that add when(xmethod(anyas(listclass)) fora catch all in java<8 or just plain any() in >8my proposal of getting rid of anyas can be read the other way makeanyas() check type and get rid of isnullorarepeating my self i proposed to get rid of anyas(class) as a i feelit seems to match something which it does not and it cannot doanything which cannot be done with isnullor(class) name it whateveris the functionality with worries me> in addition to all that: wed rather the match a specific type matcher didnt accept nulls by default (as your any(listclass) does) we need to make people opt in to matching nulls because its good practice and because theres some potentially confusing behaviour there as nulls are kind of outside the type system we also cant have the wildcard matcher reject nulls or its not matching everything any more thus again they need to be two different methodsthats another thing what i propose is to simplify so i have twonames ( anyincludingnull anynotnull ) which indicate wether null isaccepted plus two overrides no parameters and a class parameter thenull accepting behaviour is functionaly equivalent to haven just aname plus a boolean parameter ( notreallyany(boolean acceptnull) +notreallyany(boolean acceptnull class klass) )what makes me feel uncorfortable with the proposal is :- too many names i think two suffice- different names for similar methods similar names for different  null accepting behaviourgiven this i think:- anyincludingnul() anyincludingnul(class) anynotnull()  anynotnul(class) cover all cases for jdk <8 & 8 ( although  parameterless ones are not too useful in <8 ) ( your example would be  served by when(xmethod(anyincludingnull(listclass)) )- names should be kept paired you state opting in for nulls is good  practice ill accept that without discussion you say people should  opt in to use them i accept thas as a precondition writing  anyincludingnull is for me opting inbut then we want any() its nice sounds good it is short readsgood (any() in 8 i do not care just need this to compileany(listclass) in 7 i do not care but well then writing any( isopting in to use nulls so the class version should begin with any(too i have no problem with having the null accepting versionsnondefaultacceptingnullsanymatcher and the other one any orisa ides are really good at completing and i can easily manage acouple of names but having any anyas isa isnullora and notnullhorrifies mewell thats all for today i hope it clarifies my positionregards    francisco olarte || ok i think that mostly makes sense although im not clear exactly what the full api youre proposing is that fits the requirements here your last paragraph seems to contradict the four methods youve suggested just abovei think youre still suggesting an `any()` method with actively different behaviour to an `any(xclass)` method though inconsistencies between those two are how we ended up here because one does active type matching and the other doesnt and you need different null matching behaviour too in addition you definitely need `any()` or itll be confusing so i dont think theres any way you can have an `any(xclass)` method that does actual matchingsounds like there is a route through though: what happens if we accept that java 7 is on the way out stick only to casts and stop making the api confusing just to support now unsupported java versions? that would give an api of:- `any()` - matches anything- `isa(xclass)` - matches things with x type not nulls- `isnullora(xclass)` - matches things with x type or nullsif youre using java 8 all is good simple and clear if youre using java 7 you have to cast `any()` but `(myclass) any()` is clearer about what its doing than anything else we have here actually shorter than `any(myclassclass)` anyway and good ides will automatically suggest the cast for you too so pretty easy to find for newbies null behaviour is also clear here and were pushing people to be explicit about whether they match nulls in all arguments they care abouthow does that sound to everybody? || hi tim:on wed apr 8 2015 at 8:38 pm tim perry notifications@githubcom wrote:> ok i think that mostly makes sense although im not clear exactly what the full api youre proposing is that fits the requirements here your last paragraph seems to contradict the four methods youve suggested just aboveany of my paragraphs may seem contradictory but i do not know how toconvey the info and do not know what the exact requirements are butanyway lets go on> i think youre still suggesting an any() method with actively different behaviour to an any(xclass) method thoughin my full sugestion not exactly i suggested any to be the same asany(objectclass) ( declared parameter class really but it could beimplemented this way ) it checks the passed thing is null or asubclass of object ( second check redundant stated for completitude)> inconsistencies between those two are how we ended up here because one does active type matching and the other doesnt and you need different null matching behaviour too in addition you definitely need any() or itll be confusing so i dont think theres any way you can have an any(xclass) method that does actual matching> > sounds like there is a route through though: what happens if we accept that java 7 is on the way out stick only to casts and stop making the api confusing just to support now unsupported java versions? that would give an api of:> any() - matches anything> isa(xclass) - matches things with x type not nulls> isnullora(xclass) - matches things with x type or nullsim definitely in favour of sticking to casts as they are a standardlanguage feature and should be clearnow on your three proposed methods you are forgetting one which ison another part of the current api notnull() ( or its cousingnotnull(class) i do not know whic notnull is not declared genericlike any though i think it should be for java 8 )you have 2 choices 1- accept nulls 2-check class for 1 you needeither a boolean argument or different names for 2 you need a classargument to check against so in your proposal you would have:- accept nulls do not check class:  any() used as is in java 8  casted in 7 ( or for overload resolution in 8 )- accept nulls check class: isnullora(class)- reject nulls do not check class: notnull() ( same comments as any )- reject nulls check class: isa(class)which is fine dandy for me ( the naming stuff is trivial to achieveusing a franciscoolarteadditionalmatchers helper class )basically you can have a makematcher(boolean acceptnulls class klass) and then any()makematcher(true objectclass)isnullora(klass)makematcher(true klass)notnull()makematcher(false objectclass)isa(klass)makematcher(false klass)> if youre using java 8 all is good simple and clear if youre using java 7 you have to cast any() but (myclass) any() is clearer about what its doing than anything else we have here actually shorter than any(myclassclass) anyway and good ides will automatically suggest the cast for you too so pretty easy to find for newbies null behaviour is also clear here and were pushing people to be explicit about whether they match nulls in all arguments they care abouti think the null / check behaviour is clearer if you group themtogether somehow ( like ive done above ) as this gets rid of theconfusing (current) anyas(class) also i think notnull(class) must goas what is does is served by isa(class)> how does that sound to everybody?fine for me---------------not a proposal----------------now ill explain what i proposed ( for naming along with somemotivations ) i think this discussion seems to prove it is not easilyunderstood this is only for referencenote there are no functional changes with the proposal above justname reorganizations as i think current names are confusing ( and iknow they are for me but this is my problem and i can solve it )0- get rid of anyas and notnull(class) ( served by isa and isnullora )1- any() - keep as it is2- isnullora(class): rename to any(class) as functionality is verysimilar (any()isnullora(declaredparameterclassclass))3- isa() - rename to anynotnull ( it appears next to any() in methodslist and makes the behavioural differences easy to spot also if youhave a method any() and anynotnull ( both being offered byautocomplete ) is natural to assume that anyanyincludingnull whichis correct )4- notnull() - rename to anynotnull() ( to complete the matrix )note: in my naming proposal naked anyacceptnulls it could easily bereversed ( any>anyornull anynotnull>any it just sounds bad to methat way ( maybe because im used to x(object) and x(@nonnull object)and/or explicitly documenting when nulls are not allowed)extra things:- anyobject() - seems to do the same thing as any if so get rid of it  if to avoid confusion if not do the same as with anystring below- isnull(class) - given it can be done with (class)isnull() get rid  of it no need for a class checking version on this- anystring: confusing name with current behaviour given any() accept  nulls rename it to isastring and then per rule 3 above to  anynotnullstring then i would add an anystring equal to  isnullora(stringclass) or any(stringclass) per rule 2 also  consider deleting it (note below)- anyint/anychar/: as with anystring in nearly all aspects- anymap/anymapof ( and its friends anylist anycollection ): similar  to anystring rename to anynotnullmap and then use the now free  anymap to build one accepting nullsfor anystring/anyint/ i would consider having a basic matchersclass with any/anynotnull etc and a matchers derived class ( a laadditionalmatchers ) and relegate all aliases to that one so thejavadoc for the basic matchers class concentrates on basicfunctionality and the one for the aliases/forwarders just states theequivalence ) in fact i would better put a class for just the basicany\* matchers ( including just any() any(class) anynotnull()anynotnull(class) and isnull(class)) another one foreq/startswith/ another one for the anystring and friends staticimports make them easy to use in modern java and the documentationwould be much easier to read (for me at least)## hope this explains my visionregards   francisco olarte || i apologize i havent read the entire thread im still setting up myfamily in ca and trying to manage priorioritiesi think we have following use cases:1 i dont care about the parameter2 i care that it is not null3 i care about the type (implies (2))solutions:1) any() perhaps kill anyobject() needs explicit casting2) no special api kill isnotnull()/notnull() or just leave theisnotnull()/notnull() needs explicit casting3) any(stringclass) alias to isa(stringclass) (or kill isa())i think it is ok if only use case 3) offers api that avoids casting egif the user wants to avoid casting he needs to specify the matcher better(which i dont think is a problem)cheers!on thu apr 9 2015 at 2:39 am francisco olarte notifications@githubcomwrote:> hi tim:> > on wed apr 8 2015 at 8:38 pm tim perry notifications@githubcom> wrote:> > > ok i think that mostly makes sense although im not clear exactly what> > the full api youre proposing is that fits the requirements here your last> > paragraph seems to contradict the four methods youve suggested just above> > any of my paragraphs may seem contradictory but i do not know how to> convey the info and do not know what the exact requirements are but> anyway lets go on> > > i think youre still suggesting an any() method with actively different> > behaviour to an any(xclass) method though> > in my full sugestion not exactly i suggested any to be the same as> any(objectclass) ( declared parameter class really but it could be> implemented this way ) it checks the passed thing is null or a> subclass of object ( second check redundant stated for completitude> )> > > inconsistencies between those two are how we ended up here because one> > does active type matching and the other doesnt and you need different> > null matching behaviour too in addition you definitely need any() or> > itll be confusing so i dont think theres any way you can have an> > any(xclass) method that does actual matching> > > > sounds like there is a route through though: what happens if we accept> > that java 7 is on the way out stick only to casts and stop making the api> > confusing just to support now unsupported java versions? that would give an> > api of:> > any() - matches anything> > isa(xclass) - matches things with x type not nulls> > isnullora(xclass) - matches things with x type or nulls> > im definitely in favour of sticking to casts as they are a standard> language feature and should be clear> > now on your three proposed methods you are forgetting one which is> on another part of the current api notnull() ( or its cousing> notnull(class) i do not know whic notnull is not declared generic> like any though i think it should be for java 8 )> > you have 2 choices 1- accept nulls 2-check class for 1 you need> either a boolean argument or different names for 2 you need a class> argument to check against so in your proposal you would have:> - accept nulls do not check class: any() used as is in java 8>   casted in 7 ( or for overload resolution in 8 )> - accept nulls check class: isnullora(class)> - reject nulls do not check class: notnull() ( same comments as any )> - reject nulls check class: isa(class)> > which is fine dandy for me ( the naming stuff is trivial to achieve> using a franciscoolarteadditionalmatchers helper class )> > basically you can have a makematcher(boolean acceptnulls class klass> ) and then any()makematcher(true objectclass)> isnullora(klass)makematcher(true klass)> notnull()makematcher(false objectclass)> isa(klass)makematcher(false klass)> > > if youre using java 8 all is good simple and clear if youre using> > java 7 you have to cast any() but (myclass) any() is clearer about what> > its doing than anything else we have here actually shorter than> > any(myclassclass) anyway and good ides will automatically suggest the> > cast for you too so pretty easy to find for newbies null behaviour is> > also clear here and were pushing people to be explicit about whether they> > match nulls in all arguments they care about> > i think the null / check behaviour is clearer if you group them> together somehow ( like ive done above ) as this gets rid of the> confusing (current) anyas(class) also i think notnull(class) must go> as what is does is served by isa(class)> > > how does that sound to everybody?> > fine for me> > ---------------not a proposal----------------> now ill explain what i proposed ( for naming along with some> motivations ) i think this discussion seems to prove it is not easily> understood this is only for reference> > note there are no functional changes with the proposal above just> name reorganizations as i think current names are confusing ( and i> know they are for me but this is my problem and i can solve it )> > 0- get rid of anyas and notnull(class) ( served by isa and isnullora )> > 1- any() - keep as it is> 2- isnullora(class): rename to any(class) as functionality is very> similar (any()isnullora(declaredparameterclassclass))> 3- isa() - rename to anynotnull ( it appears next to any() in methods> list and makes the behavioural differences easy to spot also if you> have a method any() and anynotnull ( both being offered by> autocomplete ) is natural to assume that anyanyincludingnull which> is correct )> 4- notnull() - rename to anynotnull() ( to complete the matrix )> > note: in my naming proposal naked anyacceptnulls it could easily be> reversed ( any>anyornull anynotnull>any it just sounds bad to me> that way ( maybe because im used to x(object) and x(@nonnull object)> and/or explicitly documenting when nulls are not allowed)> > extra things:> - anyobject() - seems to do the same thing as any if so get rid of it>   if to avoid confusion if not do the same as with anystring below> - isnull(class) - given it can be done with (class)isnull() get rid>   of it no need for a class checking version on this> - anystring: confusing name with current behaviour given any() accept>   nulls rename it to isastring and then per rule 3 above to>   anynotnullstring then i would add an anystring equal to>   isnullora(stringclass) or any(stringclass) per rule 2 also>   consider deleting it (note below)> - anyint/anychar/: as with anystring in nearly all aspects> - anymap/anymapof ( and its friends anylist anycollection ): similar>   to anystring rename to anynotnullmap and then use the now free>   anymap to build one accepting nulls> > for anystring/anyint/ i would consider having a basic matchers> class with any/anynotnull etc and a matchers derived class ( a la> additionalmatchers ) and relegate all aliases to that one so the> javadoc for the basic matchers class concentrates on basic> functionality and the one for the aliases/forwarders just states the> equivalence ) in fact i would better put a class for just the basic> any\* matchers ( including just any() any(class) anynotnull()> anynotnull(class) and isnull(class)) another one for> eq/startswith/ another one for the anystring and friends static> imports make them easy to use in modern java and the documentation> would be much easier to read (for me at least)> > ## hope this explains my vision> > regards> francisco olarte> > ## > > reply to this email directly or view it on github>  szczepan faberfounder mockitoorg core dev gradleorgtweets as @szczepiq blogs at blogmockitoorg || hi szczepan:mmmm delicious top posting anyway:on thu apr 9 2015 at 3:59 pm szczepan faber notifications@githubcom wrote:> i think we have following use cases:> 1 i dont care about the parameter> 2 i care that it is not null> 3 i care about the type (implies (2))i think you lack at least one ( 4- i care it is null but it isalready served by isnull() ( or a casted null iirc ) not discussed )> solutions:> 1) any() perhaps kill anyobject() needs explicit casting> 2) no special api kill isnotnull()/notnull() or just leave the> isnotnull()/notnull() needs explicit casting> 3) any(stringclass) alias to isa(stringclass) (or kill isa())> > i think it is ok if only use case 3) offers api that avoids casting eg> if the user wants to avoid casting he needs to specify the matcher better> (which i dont think is a problem)i dont think casting specially in such a specialized case asmockiing in tests is an issue and j8 will avoid most of it what idislike of this is having mockm((string)any()) accept nulls andmockm(any(stringclass)) reject nulls isa sounds/reads fine to me iprefer anynotnull as name for 2 and 3 as it reads better highlightsthe relation with any ( they are the family of matchers which justchecks type not value ) but ive reached a point where i think theonly form to expose a proposal is to implement it to expose how itlooks which will have to wait in my casealso thinking about the previous stuff im beginnging to thinkisnullora(class) although it has a clear definition ( i have amockm(list) i want to match anything assignable to an arraylistwhich are null or arraylist subclasses so mockm(any(arraylist)) )im not too sure about its usefulness ( as i can do it with twomatchers and isnull plus an isa with the same target or useadditionalmatchersor )francisco olarte || i agree with francisco if were going for casts i dont think we can have `any(stringclass)` still exist because we cant make it usefully be consistent with `any()` i think just `isa` works fine for that case though and i find it quite readable and cleari do marginally prefer `notnull()` to `anynotnull()` just because its shorter and simpler i think `when(omethod(notnull() notnull()))` reads easier than `when(omethod(anynotnull() anynotnull()))` and while anynotnull makes sense in relation to any its less clear what it does when you see it standalone notnull however is very clear indeed it also doesnt feel quite so much like `any` and `notnull` are the same family as much as `isa/isnullora` are just because `any` is kind of a special case (any + specific values are all people will probably use 1/2 the time i expect)i also do think `isnullora(xclass)` does need to exist explicitly too just because its a common case and having to write `or(isnull() isa(stringclass))` (or `or((string) isnull() isa(stringclass))` for java 7) everywhere is quite substantially messier and harder to parse internally just being an alias to that is fine thoughdefinitely feels like were getting pretty close now! one more api update then:- `any()` - matches anything including nulls- `notnull()` matches anything except nulls- `isa(xclass)` matches things of x type except nulls- `isnullora(xclass)` matches things of x type including nulls- we get rid of every other variant (`anystring()` `isnotnull()` etc)i think there are some other extra variants we will still need for things like generic list type checks and varargs but those should follow on fairly cleanly from these thoughts? || hi time:on thu apr 9 2015 at 6:34 pm tim perry notifications@githubcom wrote:> i agree with francisco if were going for casts i dont think we can have any(stringclass) still exist because we cant make it usefully be consistent with any() i think just isa works fine for that case though and i find it quite readable and clearok> i do marginally prefer notnull() to anynotnull() just because its shorter and simpler i think when(omethod(notnull() notnull())) reads easier than when(omethod(anynotnull() anynotnull())) and while anynotnull makes sense in relation to any its less clear what it does when you see it standalone notnull however is very clear indeedok i donot agree with the arguments but i feel voting for notnull nowis much better than following the thread i retract all my proposalsfor anynotnull--- aside---> it also doesnt feel quite so much like any and notnull are the same family as much as isa/isnullora are just because any is kind of a special case (any + specific values are all people will probably use 1/2 the time i expect)> i think if you place them in a square it does isa is nw isnullora> is ne any is se ¿ which one goes into sw ? ( reminds me of the test> i did in school )also any() is like isnullora(objectclass) notnull() is likeisa(objectclass)not a proposal/discussion on the main issue just put here as anexplanation of my abandoned views--- /aside ---> i also do think isnullora(xclass) does need to exist explicitly too just because its a common case and having to write or(isnull() isa(stringclass)) (or or((string) isnull() isa(stringclass)) for java 7) everywhere is quite substantially messier and harder to parse internally just being an alias to that is fine thoughok with it> definitely feels like were getting pretty close now! one more api update then:> > any() - matches anything including nulls> notnull() matches anything except nulls> isa(xclass) matches things of x type except nulls> isnullora(xclass) matches things of x type including nulls> we get rid of every other variant (anystring() isnotnull() etc)> > i think there are some other extra variants we will still need for things like generic list type checks and varargs but those should follow on fairly cleanly from these thoughts?ok my main problem is i find current naming extremely confussingonce anyas is gone and replaced with ( more correct imo )  isnullorait nearly vanishes but if variants are recovered/kept ( i would do itin a separate class which could be very easily documented at the topand methods otherwise they clutter the main matchers docs classedare cheap specially in test code ) keep their name coherent to theimplementation ie givien anystring() can (should?) be implementedas isa(stringclass) to achieve current behaviour name it isastring()(same goes if behaviour is simillar to isnullora) ( or zap it iprefer just a longer way to do a thing than a confusing alternative )( i used to try to put short names to things but since about 20 yearsago ive been progresively going to longer and clearer typing iseasier than thinking ymmv )francisco olarte || cool i think were in agreement then im very happy to zap lots of the extra methods like `anystring()` where java 8 means theyre not going to be useful and theres a simple easy to find alternative to them (like just casting `any()` which most ides will even suggest and do for you)@bric3 @szczepiq are you two happy if i open a pr extending my previous changes to implement this api as in my message above? || hi @pimterry @folarte thanks for the discussion i was also away staffed at devoxx fr for the past week i think theres some agreement here im basically ok for these changes : - `<t> t any()` - matches anything including nulls- `<t> t notnull()` matches anything except nulls- `<t> t isa(class<t> clazz)` matches things of `t` type but `null`  > naming could be tweaked without the `is` thus becoming `a(xclass)` i understand this one is kinda bold- `<t> t isnullora(class<t> clazz)` matches things of `t` type including `null`  > naming could be tweaked without the `is` thus becoming `nullora(xclass)`- we get rid of every other variant (`anystring()` `isnotnull(class)` etc)  > theres still need for primitive matchers : `anyint` should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should not@szczepiq another related task would be to deprecate apis in the 1x line || happy to drop the `is` prefix seems shorter and clearer this might be one place where we do want an alias for `a(stringclass)` and `an(elementclass)` as otherwise i think its quite difficult to read> - we get rid of every other variant (anystring() isnotnull(class) etc)> > > theres still need for primitive matchers : anyint should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should notdo mean `anyint()` or `anint()`? i think the conclusion of the above discussion is that we cant have an `anyint()` method without breaking the api: either `anyint()` actively matches the type and rejects null (confusingly inconsistent with `any()`) or it doesnt and its confusing and people use it wrong (the current state of affairs)for java 8 `any()` should work everywhere i think and for java 7 you can use `(int) any()` i cant easily test this right now is there something about primitives generics and our implementation that means this doesnt work? thats going to be a difficult problem to solve if sofor `anint()` on the other hand it doesnt actually make the api inconsistent if we do add that as another method so thats very doable not clear why we need it in this case either thoughdo you have an example that doesnt work with this as given? || hi brice:on sun apr 12 2015 at 7:55 pm brice dutheil notifications@githubcom wrote:> thanks for the discussion i was also away staffed at devoxx fr for the past week i think theres some agreement here im basically ok for these changes :> > <t> t any() - matches anything including nulls> <t> t notnull() matches anything except nulls> > <t> t isa(class<t> clazz) matches things of t type but null> > naming could be tweaked without the is thus becoming a(xclass) i understand this one is kinda boldi strongly disagree with naming it a or ( sorry tim ) an i feel theyare too short and error prone ( and this is not cobol a pl/dsl is notenglish )> <t> t isnullora(class<t> clazz) matches things of t type including null> > naming could be tweaked without the is thus becoming nullora(xclass)i stil think my any/anynotnull overrrides where superior names but asthis is functionally equivalent ill just wrap it ok so far> we get rid of every other variant (anystring() isnotnull(class) etc)> > theres still need for primitive matchers : anyint should stay in my opinion but this raises another issue with primitive wrappers should they allow null in my opinion they should noti think the point of allowing nulls for primitives is a no point if ihave a method mockmethod(int) which i match withwhen(mockmethod(anyint())) it doesnt matter that the matcherreceives an integer due to boxing/reflection stuff it will never benull becuase if i do ""integer integer  null  mockmethod(integer)""autounboxing will raise npe before matchers get anything to say andif there was another override mockmethod(integer) well first thisshould have been matched by an appropiately casted any/is\* and secondits so perverse that user deserves whatever happens therefrancisco olarte || soon its next in my queue :) thank you guys for patience || great discussion thanks everybody for chipping in lets get this sorted out> what i> dislike of this is having mockm((string)any()) accept nulls and> mockm(any(stringclass)) reject nullsi agree there is a gotcha: given that any(sometypeclass) is most used matcher method it will be a pain to users to upgrade to mockito 20however if we tell users that any(stringclass) checks type but (string) any() does not it is rather awkward message and it might confusing down the roadby now most users are probably used to the behavior of mockito matchers and the pitfall is well documented ) so there is an option to leave things as they areremoving any(t) pretty much means that we need to remove all matcher methods like anystring() anylist() etc this increases the impact on the userill think about this a bit more and get back by the end of today || btw what do you guys think about #246? || i think were down to following options please vote or suggest other options:1 shoot down any(t) and anyt() in favor of isa() this thread seems to be converging on this approach consistent and clean high impact potential churn2 change any(t) and anyt() methods to reject nulls suggested by the community originally potentially confusing down the road due to inconsistence with any() this inconsistence becomes less of a problem with java83 do (2) but also shoot down any() replacing it with anyobject() or anything() or _ (ala spock ) not sure i like killing any() because it is neatly compact4 leave things as they are for now perhaps revisit for java8 support || hi​ ​szczepan:> btw what do you guys think about #246>  > ​i think it may have some problems and be an overload abuse​ if done this> way i would vote for having long named methods with is() being just a> forwarder and i think there may be some ambiguities if overloaded is() is> used to test overloaded method ( ie when you mock m(is(stringclass))> are you mocking m(class c) ( as m(eq(stringclass))  )  or m(string s) with> any string? ( its a contrived overload but ive seem some of these where> the string version takes a class name i think osgi has some of them )> having a long method (anyistanceof equalto evenm specially isnull()> which i personally prefer to is(null) ( which overload is it going to pick> the object one with a null param ) ) lets people key a little more in the> difficult cases and does not at too many complexity or a signigicant run> time for test code ( is() is just a one line forwarder and its javedoc> can be left as such which just an @link to the unoverloaded method )regarding readability im not sure compact overloaded names are morereadable they may be easier to read aloud but you need to invoke higherlevel brain functions to parse it and distinguish the overload being usedbut maybe im just becoming slower​francisco olarte​ || yep i prefer option 1#246 sounds like a good idea to me but we should definitely market it very clearly as a convenience method (as francisco mentions) and obviously keep the explicit methods so people are aware they can opt in to explicitly choosing the relevant option if they need to or theyre not sure what the overloading doesthe overload im most suspicious of is `is(t)` just because its most likely to be ambiguous in practice and when trying to just think about what a line is doing `is(null)` seems clear `is(stringstartingwithhello)` is fine but if i saw`when(is(100) is(stringclass))` i think my default would be to assume that the argument needed to literally be the class object not totally sure about that though happy to go with it if others are happy || any progress on this? are people happy for me to put together a potential pr for option 1 which it sounds like weve settled on as something concrete to discuss? || my preference is to have the following matchers (option 1?):-  `<t> t any()`  that accepts anything including `null`  i associate _""any""_ to the _""anything""_ in my world that includes null-values and instances it is compact and suitable for the most common cases- `<t> t anyobject()` or `<t> t notnull()` reject `null` values opposite to any() the name should indicate that null is rejected to avoid confusion about its behaviour- `<t> t isa(class<? extends t>)` reject `null` values and all values that are not a subtype of `t` like instanceof- all `any*()` and `any(t)` should be dropped cause they have different behaviour (as described before) || > 1 shoot down any(t) and anyt() in favor of isa() this thread seems to be converging on this approach consistent and clean high impact potential churn> 2 change any(t) and anyt() methods to reject nulls suggested by the community originally potentially confusing down the road due to inconsistence with any() this inconsistence becomes less of a problem with java8> 3 do (2) but also shoot down any() replacing it with anyobject() or anything() or _ (ala spock ) not sure i like killing any() because it is neatly compact> 4 leave things as they are for now perhaps revisit for java8 supportlets try to be decisive :)tim & christian vote for option 1) i very much appreciate those votes and option 1 does have a lot of charm :)myself i vote for 2) because:- any(t) reads better (seems more fluent) is more intuitive to write than isa() it looks good in tests- it is consistent gramatically with any() it makes the api a bit more consistent- java8 is very popular people use any() for matching anything and can use any(t) for matching specific type (not null)- removing any(t) (options 1 and 3) seems like a churn and big impact on users without strong enough justification it seems arbitrary that we remove the any(t) methods eg myself as a user i would not be convinced that migrating to mockito 20 is a good idea because i need to fix hundreds of compilation errors due to removal fundamental api method (anyt/any(t)) even if i make that search&replace im not convinced that tests look better now the change also hurts muscle memory and users would be finding themselves using any(t) methods finding the code not compile then realizing that aha! this method was removed however if we update the behavior of any() (option 2) we will provide very nice signal to users during the migration to 20 we could potentially expose bugs most users expect nulls to be rejected by any(t) - mockito 20 will make expose tests that fail that assumptionwe dont have to agree however it would really cool if we were on the same page :) it would be so nice if everyone of us could stand behind decisions we make as a teamwe definitely need to make the decision!!! (if left undecided were effectively deciding on option 4) || i would like to suggest introducing the isa api alongside any the latter would accept nulls while the former would rejecet themnulls are pretty common as values so we ahould not make this more difficult than necessary also tgis makes migration easier || i already started the work on this a few days ago and i chose to kinda follow option 2 as well heres the plan :- `<t> t any()` that accepts anything including `null` i am pondering the addition of `anything` as it is the original meaning of `any`- `* any*()` / `<t> any(t)` will be aliases of `<t> isa(t)` **this is the expected behaviour by users** doing this will introduce the rejection of `null` with java 8 i saw young developer to switching to `any()` when `null` values where used instead of `anyint`since we want to do a release candidate i suggest that we ship the _null safe_ `any*` and remove the `null` check if too much people complaincc @timvdlippe @marcingrzejszczak @raphw @szpak  || thanks for feedback!+1 to your plan-1 to anything it feels that it does not add sufficient value its alonger alias - not sure why would someone want to use iton mon jul 25 2016 at 10:10 am brice dutheil notifications@githubcomwrote:> i already started the work on this a few days ago and i chose to kinda> follow option 2 as well heres the plan :> - <t> t any() that accepts anything including null i am pondering the>   addition of anything as it is the original meaning of any> - \* any_() / <t> any(t) will be aliases of <t> isa(t) *this is the>   expected behaviour by users_ doing this will introduce the rejection>   of null with java 8 i saw young developer to switching to any() when>   null values where used instead of anyint> > since we want to do a release candidate i suggest that we ship the _null> safe_ any* and remove the null check if too much people complain> > cc @timvdlippe  @marcingrzejszczak>  @raphw  @szpak  > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || +1 i agree lets try this for the rc || ";1;0;adds missing generics info on collection matchers follow-up to #510 #194 abf9851;
532;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo in javadocs;-  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  fixes #<issue number>  _if relevant_  also improve sentence structure of surrounding sentences.;;0;fix typo in javadocs;-  pr should be motivated ie what does it fix why and if relevant how-  if possible / relevant include an example in the description that could help all readers     including project members to get a better picture of the change-  avoid other runtime dependencies-  meaningful commit history  intention is important please rebase your commit history so that each     commit is meaningful and help the people that will explore a change in 2 years-  read the [contributing guide](  mention `<issue number>` in the description _if relevant_-  at least one commit should mention `fixes #<issue number>` _if relevant_also improve sentence structure of surrounding sentences;@raphw @bric3  ||  ;;;;1;1;fix typo in javadocsalso improve sentence structure of surrounding sentences;
535;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactored supertypeslastsorter to a static utility class;refactored supertypeslastsorter to a static utility class  relates to #426;;426.0;refactored supertypeslastsorter to a static utility class;refactored supertypeslastsorter to a static utility classrelates to #426; ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored supertypeslastsorter to a static utility class;
540;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;inlined arrayutils.isempty() in argumentsprocessor;inlined arrayutils.isempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessor. also isempty(..) was renamed to isnullorempty(..) for clarity.  relates to #426;;426.0;inlined arrayutilsisempty() in argumentsprocessor;inlined arrayutilsisempty() in argumentsprocessor and removed arrayutils cause it was only used in argumentprocessoralso isempty() was renamed to isnullorempty() for clarityrelates to #426;  540   ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;inlined arrayutilsisempty() in argumentsprocessor;
547;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;refactored objectmethodsguru to a static utility class;- refactored  objectmethodsguru  to a static utility class - removed unused methods and associated tests:   -  istostring(mockitomethod method)    -  isequalsmethod(method method)    -  ishashcodemethod(method method)  - renamed  istostring(..)  to  istostringmethod(..)   relates to #426;;426.0;refactored objectmethodsguru to a static utility class;- refactored `objectmethodsguru` to a static utility class- removed unused methods and associated tests:  - `istostring(mockitomethod method)`  - `isequalsmethod(method method)`  - `ishashcodemethod(method method)`- renamed `istostring()` to `istostringmethod()`relates to #426;  547   ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;refactored objectmethodsguru to a static utility class;
549;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fully register a class ancestry for genericmetadatasupport;the old implemention would take a class x and consider all of its superclasses and the interfaces implemented by x and the interfaces implemented by all of its superclasses.  the new implementation also considers the superinterfaces of the interfaces implemented by x and the superinterfaces of the interfaces implemented by its superclasses.  497;;0;fully register a class ancestry for genericmetadatasupport;the old implemention would take a class x and consider all of its superclassesand the interfaces implemented by x and the interfaces implemented by all ofits superclassesthe new implementation also considers the superinterfaces of the interfacesimplemented by x and the superinterfaces of the interfaces implemented by itssuperclasses497;  549  **< ;;;;1;1;fully register a class ancestry for genericmetadatasupportthe old implemention would take a class x and consider all of its superclassesand the interfaces implemented by x and the interfaces implemented by all ofits superclassesthe new implementation also considers the superinterfaces of the interfacesimplemented by x and the superinterfaces of the interfaces implemented by itssuperclasses497;
550;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed #538 changed error message in case initialization for mock injection fails.;fixed #538  if a filed is annotated with @injectmocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ mock injection failed on field  fieldname  cause the type  abstractcollection  is an abstract class._;;538.0; #538 changed error message in case initialization for mock injection fails;" #538if a filed is annotated with @injectmocks and the type of a field is an enum inner class interface or local class the error message is now: _""mock injection failed on field fieldname cause the type abstractcollection is an abstract class_""";"openjdk6 build failed the others gone clearwow! the native world exploded``` test*** buffer overflow detected ***: /usr/lib/jvm/java-6-openjdk-amd64/bin/java terminated backtrace: /lib/x86_64-linux-gnu/libcso6(__fortify_fail+0x37)[0x7fa189635e37]/lib/x86_64-linux-gnu/libcso6(+0x108d30)[0x7fa189634d30]/usr/lib/jvm/java-6-openjdk-amd64/jre/lib/amd64/libnetso(java_java_net_inet4addressimpl_getlocalhostname+0x1a0)[0x7fa1843c0d80][0x7fa17d0136b0]``` || this seem to be an issue with travis itself :  || from their thread the workaround in the [travisyml]( doesnt work anymorecc @raphw  || ha theres been a change a few days ago :  should use the hosts addon : ``` ymladdons:  hosts:    - myshorthost  hostname: myshorthost``` || aside from the help removal that i dont want removed the code  @christianschwarz you can rebase on master i may have pushed a working fix for the buffer overflow issue in #553 || @bric3 > aside from the help removal that i dont want removed the code looks goodthanks for reviewing! if you dont mind i would like to have a short discussion on the error message inorder to help devs to fix the issue---full error message:```cannot instantiate @injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because: the type configurationmanager is an interfaceexamples of correct usage of @injectmocks:   @injectmocks service service  new service()   @injectmocks service service   //also dont forget about mockitoannotationsinitmocks()   //and dont forget about some @mocks for injection :)```**line 1**: `""cannot instantiate @injectmocks field named "" + fieldname + """"`okay that line was replaced with something like: `""@injectmocks failed on field f cause the type innerclass is an inner non static class""` so far so good**line 2**:  `""you havent provided the instance at field declaration so i tried to construct the instance""`i would like to remove that line the dev added @injectmocks in order to construct  an instance do  we really need to tell him what he did?  **line 3**: `""however i failed because: "" + detailsgetmessage()`can be removed it is now included in the first line**line 4**: `""examples of correct usage of @injectmocks:""`hmmm i have no idea how a dev can learn from the provided examples the field declaration is not wrong in this case but the provided filed type that is hard (impossible) to express in an example if you have an idea i will add it**line 5**: `""   @injectmocks service service  new service()""`ouch that hurts! i didnt know that it works! what do users expect to happen in this case big question? imho mockito should fail here indicating that either @injectmocks should be removed cause it have no effect or indicating that the field must be initialised with `null`/ leaved blank or is it over written after mockito set the field?**line 6**: `""   @injectmocks service service""`same as for line 4**line 7**: `""   //also dont forget about mockitoannotationsinitmocks()""`this line can be removed the user (or rule/runner) didnt forget to call initmocks() other wise he wont see this error message**line 8**:  `""   //and dont forget about some @mocks for injection :)""`that is confusing we dont need mocked fields if the class has an no arg  constructor` ||   550  **<  ";improve error message when @injectmocks is uses on an interface or enum field;by accident a tests delares a field of an interface type instead of the implementing class  ```@injectmockspublic interfacetype unitundertest```injection is not possible on interfaces or enums the error message should make this clear the currenta message that doesnt help much:```orgmockitoexceptionsbasemockitoexception: cannot instantiate @injectmocks field named configurationmanageryou havent provided the instance at field declaration so i tried to construct the instancehowever i failed because: the type configurationmanager is an interfaceexamples of correct usage of @injectmocks:   @injectmocks service service  new service()   @injectmocks service service   //also dont forget about mockitoannotationsinitmocks()   //and dont forget about some @mocks for injection :)```the error message should be someting like:`the field unitundertest can not be annotated with @injectmocks cause the type interfacetype  not a class!`;;1;0; #538 changed error message in case initialization for mockinjection fails;
555;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;junit rules report unused stubs - 384;- makes junit rules detect unused stubs - introduces mockitolistener api - see the use case in issue #384  - recreated pr #527 with squashed commits;;384.0;junit rules report unused stubs - 384;- makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits;lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  ;junit rule logs warnings about unsued / misused stubs;"### whywhen test fails the failure might be caused by misused stubs hence it might be worth to log out debugging information to the system out (eg misused stubs unused stubs) for more details see documentation for [mockitohint]( plan-  document 2x change-  tweak the warning message-  add behavior to the runner-  add silent runner-  add silent setting to the rule (or warnings level for all / exception only / none)-  deprecate/remove console spamming runner### implthe junit rule or the runner will potentially include following info in the output (somehow):  wondering if ""mockitovalidatemockitousage()"" should automatically print warnings we could provide boolean parameter to control printing of the warnings";"on it || i like the feature! what do you think about a `rule()strict()` that doesnt emit logs but fails asap?a note to the api:- how do we prevent misuse like -> `rule()strict()strict()` ? what about `rule(log_warnings)` aka `rule()` `rule(silent)` `rule(fail_fast)` || christian very cool ideas!!! im not sure ill have time for it before 20 however i want the new default behavior in rule / runner in 20 so that users see what it is doing then we can grow and add strict mode || @szczepiq: i like this feature very much also that the `mockitojunitrunner` fails by default is good i think a note in the javadoc of `unnecessarystubbingexception` to use `mockitojunitrunnersilent` would be helpfulwe often have quite complex test fixtures and its cumbersome to switch absolutely each and every stub on or off some methods simply have to be there its also not necessary to verify if theyve been invoked so it would be great to be able to disable it for some stubs but leave it on for others || @t1 that seems like a reasonable idea want to make a pr for that? || good feedback i think that mockitohint class should also mention that it is possible to silence the new mechanism || #609 || the [mockitohint]( documentation seems to indicate that this will give you warnings about mismatched arguments when using the mockitojunitrunner  however from my experience this doesnt seem to work with mockito 21heres the source im trying:``` javafoo foo  mock(fooclass)when(foobar(""baz""))thenreturn(""bar"")foobar(""baz"")foobar(""test"") // expected to get a warning here```is there something else i need to do to enable this functionality? || thank you for feedback!> is there something else i need to do to enable this functionality?this is how they were implemented runner should also report mismatches because it helps with debugging the reason it does not do it today is because i wanted to limit the noisewe will fix this issue also we will consider always printing warning when stub args mismatch even if one does not use runner / ruledo you want to open a separate ticket to track this improvement?thanks for reporting! || ive opened #725 to track this || came across this after running into this in my test :```[mockitohint] mytestchecksomething (see javadoc for mockitohint):[mockitohint] 1 unused -> at mytesttest1(mytestjava:584)```it is complaining about this (line 584):```   when(mockobjectgetpeerhost())thenreturn(""peer-host-from-mock"")```now my issue is this: this particular method `getpeerhost()` is indeed not called when the code works as expected eg something like this:```   if (newmethod()) {             string peerhost  mockobjectgetpeerhost()       // use peerhost in further processing         }````newmethod()` is the new code being added and should correctly return `false` however if there is a bug in `newmethod()` and it returns `true` then i want `getpeerhost()` to return some value which will cause a failure that i can detect so this requires me to mock a method even if it is not called in normal processing and there is no bug in the code i think that should not generate a warning has this been addressed? || do i need to open a new issue as i cannot reopen this? || > do i need to open a new issue as i cannot reopen this?yes please> has this been addressed?yes for example you can use ```lenient()when()``` stubbing to avoid reporting an unused stubbing however in your test case i would simply write ```verify(mockobject never())getpeerhost()```hope that helps! || > yes for example you can use `lenient()when()` stubbing to avoid reporting an unused stubbing thanks for the `lenient` tip - that helps> however in your test case i would simply write `verify(mockobject never())getpeerhost()`> thats more work and more white box testing than i want lets say this is for testing the ssl logic where peerhost (of a connection) is matched (or not matched) against ""subject-name"" in a cert under various conditions but i have common setup/initialization where i ""mock"" the peerhost of the connection in one of the conditions the host-name match is suppressed (ie `newmathod()` returns `false`) but because of the common setup code i get the unused warning from `mockitohint` for that test || my recommendation is to use lenient() + strict stubbing for this use caseif you feel we should still discuss the use case ``verify(never())`` vs ``when()thenthrow()`` then please open a separate tickethope that helps and thank you for feedback! || ";1;0;junit rules report unused stubs- this commit squashes 50+ commits- introduces new mockitolistener api issue #384;
555;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;junit rules report unused stubs - 384;- makes junit rules detect unused stubs - introduces mockitolistener api - see the use case in issue #384  - recreated pr #527 with squashed commits;;527.0;junit rules report unused stubs - 384;- makes junit rules detect unused stubs- introduces mockitolistener api- see the use case in issue #384 - recreated pr #527 with squashed commits;lets merge this today this pr is a squash of #527 plus some code changes per code review feedback (i addressed code feedback subjectively and selectively :) ||   555  ;384 - junit rule provides stubbing hint to help debugging tests;recreated the branch / recreated the pr this is ready i want to improve the docs (mockitohint) before mergingsee the use case in issue #384 im growing the stubbinglistener and getting junit rule take advantage of it to report hints to the user that hopefully help debugging tests;"if there is no feedback ill merge in the next 48 hours ||   very soon || im done currently the listeners need to be per thread and its documented in the javadoc i dont know if it is the best idea but given trade-offs i chose this implementation || @szczepiq the threading problem should be avoided before release i looked into it worked on a fix proposal that you can find here -> [gist]( idea is to store the listeners is in `threadsafemockingprogress` that is used as global access instead of the `mockingprogressimpl` that is used only for the calling threadwdyt? || @szczepiq more more thing that i noticed the listener methods should be pre with ""on"" like `onmockcreated()` and the notifing method should be prefixed with ""fire"" like `firemockcreated()` currently both methods (the notifying and listener method) cant be distinguished cause both have the name `mockcreated()` || @szczepiq `stubbinglistener` should implement `mockitolistener` this way it can be registered using  `mockingprogressaddlistener()` after that set-/ removestubbinglistener() can be removed || @christianschwarz great feedback thanks!+1 to the rename on the listeners-1 stubbinglistener changes - im getting rid of stubbinglistener i reopened #401 stubbinglistener does not work in multi-threaded environment where shared mock is interacted with from multiple threads stubbing used event can be triggered from multiple threads i would have to make stubbinglistener completely static to handle this scenario (which would introduce set of complexities) || feedback incorporated :) any final feedback?ill recreate pr with squashed commits tomorrow & merge next step for me: 401  || massive change (52 files) give us a bit more time ! || > massive change (52 files) give us a bit more time !@bric3 absolutely in return can you commit to review eta? (reopened issue #401 needs this pr merged) || @szczepiq doing it right now ) || ok reviewed nice work ! || recreated with squash at #555 addressed code feedback selectively making subjective judgements :) || you can push force on the same branch github will figure out the difference and will close comments that have been fixed  || @szczepiq did you see the comments were i not referenced your name? most of the them are uncommented || ";1;0;junit rules report unused stubs- this commit squashes 50+ commits- introduces new mockitolistener api issue #384;
556;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;move mockito internal classes to internal package;551;;0;move mockito internal classes to internal package;551;;;;;1;1;move mockito internal classes to internal package;
557;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;replace or remove code.google.com links in documentation;most links are replaced by their github equivalent. some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods i decided to remove them.  533;;0;replace or remove codegooglecom links in documentation;most links are replaced by their github equivalent some links were pointing to issues on codegooglecom but given the large amount of documentation on these methods i decided to remove them533;;;;;1;1;replace or remove codegooglecom links in documentation;
560;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;554 : checks.checknotnull now throws iae instead of npe;changes npe to iae  see #554;;554.0;554 : checkschecknotnull now throws iae instead of npe;changes npe to iae see #554;lgtm you can merge when travis passes ||;checkschecknotnull should emit illegalargumentexception instead of npe;checkschecknotnull emits npe i think it is better to emit iae because:- iae is more specific whereas npe is more generic specific exception is easier to test- specific exception gives better experience for users npe is often assumed to be developer errorthis change is not backwards compatible@bric3 thoughts?;definitely! personally i hate throwing npes npe can be thrown because youve forgotten to inject sth and your test (if you test for an npe exception to be thrown) will pass || agreed  ||;1;0;554 : checkschecknotnull now throws iae instead of npe;
568;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;ensured that mockitojunitrunner is thread safe wrt unused stubs detection;this pr concludes #401 yay!!!!  highlights: - fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs - removed stubbinglistener api (it could not work to the thread safety levels we support in mockito  see also #545)  closes #332 401;;332.0;ensured that mockitojunitrunner is thread safe wrt unused stubs detection;this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401;  if no other feedback if youre happy with change merge yourself :) ||;finalize mockito runners;currently we have a couple of mockito runners that are a part of public api but they are largely unknown:- consolespammingmockitojunitrunner- verbosemockitojunitrunnerthey attempt to improve the testing / tdd experience by adding warnings for following scenarios:     - a) unused stubbing     - b) stubbed method called with different args (and a special variant of a)example of a warning:--- **\* stubbing warnings from mockito: ***stubbed with those args here   -> at orgmockitousagejunitrunnermodellingverbbut called with different args -> at orgmockitousagejunitrunnermodellingverbosemockitotestshouldlogunusedsthis stubbing was never used   -> at orgmockitousagejunitrunnermodellingverbosemockitotestshouldlogunusedstubbingwarningthis stubbing was never used   -> at orgmockitousagejunitrunnermodellingverbosemockitotestshouldlogunusedstubbingwarningwh---the rationale is explained in the javadoc of the above runners in 20 let’s include stubbing warnings in the default behavior of junit rule and the default runnerchallenges that need thinking through:- feature parity with junit rule- clean api so that the warning system can be integrated with other runners- some api to get hold of those warnings programmatically- feature toggle  - disable completely  - disable by test / test class / stubbing?- how can this be tested?;> how can this be tested?using `junitcore` theres already a few tests that uses it> - feature toggle>   - disable completely>   - disable by test / test class / stubbing?using the plugin switch functionality ?note theres some idea in the pull request to toggle stuff per test / test class however i dont feel this is mature enough to be integrated in mockito yetin my opinion the `rule` is the the right place to configure mockito per test ||;1;0;added javadocalthough those classes are internal javadoc is useful here because this part could be hard to grasp;
568;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;ensured that mockitojunitrunner is thread safe wrt unused stubs detection;this pr concludes #401 yay!!!!  highlights: - fixed the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs - removed stubbinglistener api (it could not work to the thread safety levels we support in mockito  see also #545)  closes #332 401;;401.0;ensured that mockitojunitrunner is thread safe wrt unused stubs detection;this pr concludes #401 yay!!!!highlights:-  the thread safety problem by leveraging the same api that junit rules used for hinting at unused stubs- removed stubbinglistener api (it could not work to the thread safety levels we support in mockito see also #545)closes #332401;  if no other feedback if youre happy with change merge yourself :) ||;junit runner detects unused stubs;it is useful to know that stubbing in the test was not used perhaps the stubbing is not needed? removal of unnecessary code from the test is important for code claritymore details:- we detect unused stubs only for passing tests (adding different failure to an existing failure could be confusing)- need to have something similar for junit rules (will create separate ticket)- stubbing in @before or class constructor should be used in at least one test- stubbing in test needs to be used in that test;the current impl is not thread safe reopening ||;1;0;added javadocalthough those classes are internal javadoc is useful here because this part could be hard to grasp;
569;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improved the public api of mockingdetails;541  highlights: - started exposing full mock creation information instead of just type to mock and extra interfaces - changed public api but only for methods that were introduced in 2.x. so it is _not_ backwards incompatible change as far as 1.10 is concerned.;;541.0;improved the public api of mockingdetails;541 highlights:- started exposing full mock creation information instead of just type to mock and extra interfaces- changed public api but only for methods that were introduced in 2x so it is _not_ backwards incompatible change as far as 110 is concerned;  if no other feedback if youre happy with change merge yourself :) || i needed to merge because it was blocking me i can address @bric3 comment later if such is the decision || @szczepiq nope your feedback works for me as well ) ||;improve mockitomockingdetails api;in order to make the api cleaner & expose useful information:1 mockingdetailsgetinvocations() throws meaningful exception when passed object is not a mock and documents this behavior2 getmockedtype() and getextrainterfaces() are replaced with getmockcreationsettings() that returns mockcreationsettings instance;ok but lets deprecate them instead of removing them (possibly in mockito 3) || given that getmockedtype() and getextrainterfaces() are unreleased yet (eg 20) do you still opt for deprecation? || good point lets remove them then ! ||;1;0;improved the public mockingdetails api- started exposing full mock creation information instead of just type to mock and extra interfaces- this also better leverages the existing api541;
571;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;pretty print primitive and wrappers types in maps;check list -  pr should be motivated  i.e. what does it fix  why  and if relevant how -  if possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years -  read the [contributing guide]( -  mention  <issue number>  in the description _if relevant_ -  at least one commit should mention  fixes #<issue number>  _if relevant_  in following case  user can t understand the difference between expected and actual.  code:      @test public void foo() {     foo m = mock(foo.class)      m.foo(new hashmap<string  object>(){{         put( hoge   4)      }})      verify(m).foo(new hashmap<string  object>(){{         put( hoge   4l)      }})  }  public static class foo {     void foo(map<string  object> map) {     } }      output:      argument(s) are different! wanted: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      if mockito outputs the  l  suffix for long values  user can understand the difference easily.  after this commit  the output will be following:      argument(s) are different! wanted: foo.foo({ hoge =4l})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method) actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.nativemethodaccessorimpl.invoke0(native method)      this will 570;;0;pretty print primitive and wrappers types in maps;"check list-  pr should be motivated ie what does it fix why and if relevant how-  if possible / relevant include an example in the description that could help all readers     including project members to get a better picture of the change-  avoid other runtime dependencies-  meaningful commit history  intention is important please rebase your commit history so that each     commit is meaningful and help the people that will explore a change in 2 years-  read the [contributing guide](  mention `<issue number>` in the description _if relevant_-  at least one commit should mention `fixes #<issue number>` _if relevant_in following case user cant understand the difference between expected and actualcode:```@testpublic void foo() {    foo m  mock(fooclass)    mfoo(new hashmap<string object>(){{        put(""hoge"" 4)    }})    verify(m)foo(new hashmap<string object>(){{        put(""hoge"" 4l)    }})}public static class foo {    void foo(map<string object> map) {    }}```output:```argument(s) are different! wanted:foofoo(() {hoge4})-> at sunreflectnativemethodaccessorimplinvoke0(native method)actual invocation has different arguments:foofoo(() {hoge4})-> at sunreflectnativemethodaccessorimplinvoke0(native method)```if mockito outputs the ""l"" suffix for long values user can understand the difference easilyafter this commit the output will be following:```argument(s) are different! wanted:foofoo({""hoge""4l})-> at sunreflectnativemethodaccessorimplinvoke0(native method)actual invocation has different arguments:foofoo({""hoge""4})-> at sunreflectnativemethodaccessorimplinvoke0(native method)```this will 570";"@tokuhirom for this change to work some existing test have to be updated see  for details || oops i forget to fix these test cases  commit squash it and force pushed ||   571 defined in the java spec for all types:| type signature | java type || --- | --- || z | boolean || b | byte || c | char || s | short || i | int || j | long || f | float || d | double |the type signature can be used to distingish primitive types maybe this is useful in the future when ppl are confused by hex values ( remember 0xe2 is an `int` not `byte`) or cant distinguish ints from shorts || @christianschwarz see #693  || ";;;;1;1;format byte too;
572;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;replace testbase#assertcontainstype(final collection<?> list  final c…;…lass<?> clazz) with assertj assertion;;0;replace testbase#assertcontainstype(final collection<?> list final c…;…lass<?> clazz) with assertj assertion;     ah but it requires a rebase :( || rebased || thanks @pascalschumacher ! once we can work on mockito 3 we will have java 8 and we can update assertj to version 3x as well and have a richer assertion api in our tests || > thanks @pascalschumacher ! you are welcome thanks for letting me contribute to a great project like mockito :) ||;;;;1;1;replace testbase#assertcontainstype(final collection<?> list final class<?> clazz) with assertj assertion;
573;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;replace testbase#assertnotequals with assertj #isnotequalto;;;0;replace testbase#assertnotequals with assertj #isnotequalto;;    ;;;;1;1;replace testbase#assertnotequals with assertj #isnotequalto;
574;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix some rawtype warnings;;;0;fix some rawtype warnings;;    ;;;;1;1;fix some rawtype warnings;
578;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;made some timeouts in verificationafterdelaytest and verificationwith…;…timeouttest more lenient to reduce build failures on travis ci;;0;made some timeouts in verificationafterdelaytest and verificationwith…;…timeouttest more lenient to reduce build failures on travis ci;  578   thank you @pascalschumacher  ! ||;;;;1;1;made some timeouts in verificationafterdelaytest and verificationwithtimeouttest more lenient to reduce build failures on travis ci;
579;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix some rawtype warnings;;;0;fix some rawtype warnings;;  579   ;;;;1;1;fix some rawtype warnings;
587;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;make verificationwithtimeouttest#shouldallowmixingonlywithtimeout mor…;…e lenient to reduce build failures on travis ci  the two recent build failures where both caused by this test:  https://travis-ci.org/mockito/mockito/jobs/154506554;;0;make verificationwithtimeouttest#shouldallowmixingonlywithtimeout mor…;…e lenient to reduce build failures on travis cithe two recent build failures where both caused by this test //travis-ciorg/mockito/mockito/jobs/154189781https://travis-ciorg/mockito/mockito/jobs/154506554;     thanks again! ||;;;;1;1;make verificationwithtimeouttest#shouldallowmixingonlywithtimeout more lenient to reduce build failures on travis ci;
590;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;removed package org.mockito.internal.listeners;- deleted unused and empty interface  mockingprogresslistener  - moved  notifiedmethodinvocationreport  to  org.mockito.internal.handler;;0;removed package orgmockitointernallisteners;- deleted unused and empty interface `mockingprogresslistener`- moved `notifiedmethodinvocationreport` to `orgmockitointernalhandler`;    ;;;;1;1;removed package orgmockitointernallisteners - deleted dead interface mockingprogresslistener - moved notifiedmethodinvocationreport to orgmockitointernalhandler;
591;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;refactored argumentmatchingtool to a static utillity class;relates to #426;;0;refactored argumentmatchingtool to a static utillity class;relates to #426; ;;;;1;1;refactored argumentmatchingtool to a static utillity class;
592;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;stylesheet-tweaks-for-openjdk6;#589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the sun jdk6 will render javadoc the same way as openjdk6.  unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  this pr aims to fix that and thus 552   bonus i changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers;;552.0;stylesheet-tweaks-for-openjdk6;#589 aimed to fix the javadoc rendering but the assumption was that the javadoc tool of the sun jdk6 will render javadoc the same way as openjdk6unfortunately this is not the same the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements this making the stylesheet incompatiblethis pr aims to fix that and thus 552 bonus i changed the `2*` and `20`  200` in the javadoc this way we have aligned version numbers;;fix again javadoc stylesheet;"previously we had a nice javadoc stylesheet that worked well with jdk6then we used travis that was only allowing oraclejdk7 that came with a better javadoc stylesheet so we dropped oursnow since the release of mockito 2x is using openjdk6 we should reintroduce a better stylesheetcurrent state ❌  width""712"" alt""screen shot 2016-08-13 at 19 41 59"" src"" ✅  width""877"" alt""screen shot 2016-08-13 at 19 45 32"" src""https://cloudentcom/assets/803621/17644722/d71bcd08-618e-11e6-831a-a01c47e8cc61png"">";"is this as simple as turning back on this line?  || probably but i need to check before the file may have been removed and the javadoc tool is _picky_ especially in old version of the jdk || actually we should revert this commit 3a057b3eff2be528a1fed41852a990cff87a72c1 when jdk7 was the only option on travis || it seems the javadoc tool of openjdk6 generates a different html than sun jdk 6 thus the stylesheet is not working properly<img width""748"" alt""screen shot 2016-08-24 at 11 56 56"" src"" again an issue with openjdk6 || ";1;0;replaces 20 / 2x by 200 in javadoc;
600;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;suppressed compiler warning and unchecked collections cast;- suppressed compile time warning - refactor raw collection cast;;0;suppressed compiler warning and unchecked collections cast;- suppressed compile time warning- refactor raw collection cast;    ;;;;1;1;removed compiler warnings;
615;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;497 : returns_deep_stubs may try to mock final classes;497  with deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. this could cause  returns_deep_stubs  to try mocking final classes which would result in a  classcastexception .  apparently my other pr (#549) wasn t quite enough to fully fix this problem.  ---  **edited by mockito team**;;497.0;497 : returns_deep_stubs may try to mock final classes;497with deep stubs it was possible for generic metadata to be lost/unusedthrough nested invocations on non generic types this could cause `returns_deep_stubs` to try mocking final classes which would result in a `classcastexception`apparently my other pr (#549) wasnt quite enough to fully fix this problem---**edited by mockito team**;  615  **< ;deep_stubs tries to mock final class;    <dependency>        <groupid>orgmockito</groupid>        <artifactid>mockito-core</artifactid>        <version>11019</version>        <scope>test</scope>    </dependency>``````$ java -versionjava version ""180_91""java(tm) se runtime environment (build 180_91-b14)java hotspot(tm) 64-bit server vm (build 2591-b14 mixed mode)``````import static orgjunitassertassertnullimport static orgmockitomockitoreturns_deep_stubsimport static orgmockitomockitomockimport orgjunittestpublic class mockitobug {  public interface supplier<t> {    public t get()  }  public interface stringsupplier extends supplier<string> {}  public interface inheritedsupplier extends stringsupplier {}  @test  public void deepstubs() {    stringsupplier mock  mock(stringsupplierclass returns_deep_stubs)    string s  mockget()    assertnull(s)  }  @test  public void inheriteddeepstubs() {    inheritedsupplier mock  mock(inheritedsupplierclass returns_deep_stubs)    string s  mockget()  // classcastexception    assertnull(s)  }}``````javalangclasscastexception: orgmockitointernalcreationcglibclassimposterizer$classwithsuperclasstoworkaroundcglibbug$$enhancerbymockitowithcglib$$322ebf6e cannot be cast to javalangstring    at mockitobuginheriteddeepstubs(mockitobugjava:26)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:498)    at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)    at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)    at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)    at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)    at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)    at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)    at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)    at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)    at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)    at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)    at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)    at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)    at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)    at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:459)    at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:678)    at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:382)    at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:192)```i expect the behavior for `stringsupplier` and `inheritedsupplier` to be the same: return `null` for `get` however `inheritedsupplier` tries to return a mock `object` for `get`";"i have a hacky workaround using guavas `typetoken`:```  private static final mockutil mockutil  new mockutil()  @suppresswarnings(""unchecked"")  private static <t> t createsmartdeepmock(typetoken<t> mocktype) {    return (t) mock(mocktypegetrawtype() createsmartdeepmockanswer(mocktype))  }  private static answer<?> createsmartdeepmockanswer(typetoken<?> mocktype) {    map<method object> mocks  new linkedhashmap<>()    return invocation -> {      method method  invocationgetmethod()      if (mockscontainskey(method)) {        return mocksget(method)      }      type returntype  methodgetgenericreturntype()      typetoken<?> resolvedreturntype  mocktyperesolvetype(returntype)      class<?> returnclass  resolvedreturntypegetrawtype()      if (!mockutilistypemockable(returnclass)) {        return mockitoreturns_defaultsanswer(invocation)      } else {        object mock  createsmartdeepmock(resolvedreturntype)        mocksput(method mock)        return mock      }    }  }``` || ";1;0;fix returns_deep_stubs which might mock final classes497with deep stubs it was possible for generic metadata to be lost/unusedthrough nested invocations this could cause returns_deep_stubs to mock finalclasses which would result in a classcastexception;
617;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;moves arity interfaces of java8 helper answers to public api;the java 8 helper interfaces have been introduced in #338. however the public  additionalanswers.answer  family leak the functional interfaces.  these _parameter arity_ interfaces can be public  hence they are moved next to  answer  in the  org.mockito.stubbing  package.  i m however in favor of adding the  @incubating  annotation on those apis and related objects. thoughts ?  614;;338.0;moves arity interfaces of java8 helper answers to public api;the java 8 helper interfaces have been introduced in #338 however the public `additionalanswersanswer` family leak the functional interfacesthese _parameter arity_ interfaces can be public hence they are moved next to `answer` in the `orgmockitostubbing` packageim however in favor of adding the `@incubating` annotation on those apis and related objects thoughts ?614;  617   some very small doc comments lgtm also with the `@incubating` ;functional interfaces for java 8 support in mockito 2;relating to issue #337 - these are some changes that would allow more usability from java 8 users id really appreciate feedback on thisit would make some of my callback use cases easier and would provide a richer way of expressing assertions for arguments via argthatone risk introduced by this change is increased use of the type parameter in argumentmatcher - this should be a good thing yet i was left thinking it would surely have been done by someone else if it were easy;  i like this change - how about you guys @bric3 @timvdlippe ? || yes i like it it does require a rebase though to make sure we have enough coverage thanks @ashleyfrieze for spending time on improving java 8 usability! || @ashleyfrieze are you available to update this pr with the feedback or should we take it over from here? thanks for your contribution! || i should be able to do these code review comments - or at the least have a crack at them - in the next 24 hours or so sorry to drop out the loop blame a combination of github notifications and googles inbox for filtering them || @ashleyfrieze no problem whenever you have time :) || mockito2 is intended for version of java pre-java 8 right?it would be great to have a module that has some java 8 examples of the usage of this expressed as unit tests - as per the feedback earlier on - is there a home for that? || @ashleyfrieze yes it compiles with java 5 @raphw are you aware of a method to run unit tests on a separate jdk version? || we could create a module in the build which requires java 8 arguably we could even make it somehow optional for those people still compiling in java 5 depends on how well the build tool will let us do that or i could create a demo project in java 8 that demonstrates these features and we could put it outside the main build? || one potentially larger impact change within this pull request is to the matcher interface making it completely generic typed - this has raised a question (above) about the removing of an instanceof test (which ill double check) it may also have an effect on migration/compatibility is everyone cool with this part of the change?```public boolean matches(object actual)```is now```public boolean matches(t actual)```which makes java8 happier but is also better than the weird thing that hamcrest was allowingwe may be able to relax it to allow subclasses of t if thats preferred? || im going to have to rebase this against master for it to work on merge one issue is that the removal of `invocationonmock::<t> t getargumentat(int index class<t> clazz)` could cause some issues ill try it out its going to be a few days before i get there || are the stacktrace related changes required for this pull request? i would like to reduce the number of side-effect changes in this pull-request as it is already growing quite rapidly i have no problem with a separate pull request to discuss these changes just want to minimize the risk of merging in incorrect changes in an otherwise correct pr || they were stopping me from building the codei know what you meani could pull them into a separate pull request and then rebase this change over that? || lets leave them in for now but i would like to see the comments of @bric3 on these change are you fine with changing the `stacktracefilter` functionality? || just pushed some unit tests for some matchers - mainly to remove the complaint by the coverage report - but also to verify that my change to the interface has worked || @timvdlippe - please note its a refactor rather than a change in outcome the code of the test has been changed the runtime code should have exactly the same behaviour it ever did though i cant see how that test ever passed its possible that in some configurations that test is not run or that it has no impact on some jvms im building on a jdk8 || ah okay if it is backwards compatible then that is fine by me i thought we were making breaking changes here then lets leave the changes here    || @timvdlippe thanks my fear as with any noob contributing to an os project is that any change could surprisingly be a breaking one :) || ive one thing left to deal with - the javadoc for `doanswer` with the new functional interfaces for composing answers i can refine that or i can go a step further and add to `mockito` things like```public static stubber doanswer(answer1 returninganswerwith1parameter) {}public static stubber doanswer(voidanswer1 voidanswerwith1parameter) {}```which has been suggested and would make it a lot easier to usecan people give me thumbs up or down for whether this is a good thing to do or not ive made a lot of line changes in the sacred `mockito` class dare i go further :) || one last comment on the `doanswer` other than that i think this pr lgtm thank you for your continued effort @ashleyfrieze ! || this looks really good let us please merge this soonas for writing tests: in byte buddy i added some precompiled class files to the `resource` folder of the project such that they are not compiled during build for each test i then add a regular test that first checks if the current jvm supports java 8 or higher and if so i explicitly run the test using `class:forname` and then triggering a `runnable::run` that the java 8-specific test implements || landed this pull request in  thank you for your continued effort @ashleyfrieze (and also fixing that nasty test as reported in #435!) ||;1;0;614 : makes functional interfaces incubating;
619;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;548 from now on verification happens always call in other thre…;should fix problems with #548 and #601;;548.0;548 from now on verification happens always call in other thre…;should fix problems with #548 and #601;    i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||;verificationwithtimeouttest is unstable;see build failure:  stack trace:```orgmockitousageverificationverificationwithtimeouttest > shouldallowtimeoutverificationinorder failed    orgmockitoexceptionsverificationverificationinorderfailure:     verification in order failure    wanted but not invoked:    mockonearg(1)    -> at orgmockitousageverificationverificationwithtimeouttestshouldallowtimeoutverificationinorder(verificationwithtimeouttestjava:161)    wanted anywhere after following interaction:    mockonearg(x)    -> at orgmockitousageverificationverificationwithtimeouttestshouldallowtimeoutverificationinorder(verificationwithtimeouttestjava:155)```;refs #433 #446 and #451 || we may want to look at `verificationafterdelaytest` tooalso see #601i have some ideas ill try them when i have some time ||;1;0;548 changed order of assertions in canignoreinvocationswithjunit test method;
619;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;548 from now on verification happens always call in other thre…;should fix problems with #548 and #601;;601.0;548 from now on verification happens always call in other thre…;should fix problems with #548 and #601;    i am going to restart this build a couple of times to test the robustness || it could take a  while hopefully we have loopsin the meantime try this gist :  || got a failed travis job the culprit seems to be `orgmockitousageverificationverificationafterdelaytest > shouldverifynormallywithspecifictimes` || i have not touched `verificationafterdelaytest` in this pr || yes i know was merely stating that the travis failure we experienced was a different test nonetheless i think it is best if we aggregrate all test fixes in a pr to study the robustness would you be willing to do so? || yup another commit with `verificationafterdelaytest` changes take a look || great thanks will be restarting these changes a couple of times too really nice to have deterministic results now!    || im ok with the change even if the fact that the proposed test implementation is not completely deterministic its definitely an nifty improvement plus the test code is elegant! || @lukasz-szewc also after adding the `timeunit` parameter to `delayedexection` ? could rebase your commits (`added one missing line` is not really the most expressive message) ) || i like the idea of starting the threads and await there readiness this might solve the timing issues an other option is to write an simplified scheduledexecutorservice with the same behavior as the delayedexecution of this pr this way the test can remain untouched and we have still the possibiliy run tasks with individual delay as required by one test  || 1 added `timeunit` to constructor2 reworked one of test in `verificationwithtimeouttest` mentioned above3 rebased and pushed with forcetake a look ||;one test fails probably undeterministically;heycheck console output for this build:  seems that one test from time to time for no apparent reason```orgmockitousageverificationverificationwithtimeouttest > canignoreinvocationswithjunit failed    wanted but not invoked:    mockonearg(1)    -> at orgmockitousageverificationverificationwithtimeouttestcanignoreinvocationswithjunit(verificationwithtimeouttestjava:147)    actually there were zero interactions with this mock        at orgmockitointernalexceptionsreporterwantedbutnotinvoked(reporterjava:329)        at orgmockitointernalverificationcheckersmissinginvocationcheckercheckmissinginvocation(missinginvocationcheckerjava:37)        at orgmockitointernalverificationtimesverify(timesjava:37)        at orgmockitointernalverificationverificationovertimeimplverify(verificationovertimeimpljava:78)        at orgmockitointernalverificationverificationwrapperverify(verificationwrapperjava:15)        at orgmockitointernalverificationmockawareverificationmodeverify(mockawareverificationmodejava:21)        at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:73)        at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:32)        at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:36)        at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:36)        at orgmockitointernalcreationbytebuddymockmethodinterceptoraccess$000(mockmethodinterceptorjava:17)        at orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptabstract(mockmethodinterceptorjava:113)        at orgmockitousageimethods$mockitomock$1357077317onearg(unknown source)        at orgmockitousageverificationverificationwithtimeouttestcanignoreinvocationswithjunit(verificationwithtimeouttestjava:147)```;well i looked closely to this test and it fails for a very good reasonthere is absolutely no guarantee that executor will start and finish method execution on mock in given time duration (delay value used in test)thats why from time to time this test will fail because verification will be quicker than executor  || yes this is a time related test the only thing we have done now is to augment the timeouttheres ways to make the test deterministic though via some thread synchronisation im thinking about `countdownlatch` especially || yet another undeterministic result```orgmockitousageverificationverificationafterdelaytest > shouldreturnlistofargumentswithsamesizeasgiveninatmostverification failed    orgmockitoexceptionsbasemockitoassertionerror: expected that more than 200ms elapsed! but was: 199ms        at orgmockitoutilstopwatchfail(stopwatchjava:63)        at orgmockitoutilstopwatchassertelapsedtimeismorethan(stopwatchjava:45)        at orgmockitousageverificationverificationafterdelaytestshouldreturnlistofargumentswithsamesizeasgiveninatmostverification(verificationafterdelaytestjava:135)``` || duplicates #548related issues / pr are #433 #446 and #451 ||;1;0;548 changed order of assertions in canignoreinvocationswithjunit test method;
623;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;updated the javadocs;polishing the javadocs  starting with this small pr:  issue #596 - updated @since to 2.1.0 (instead 2.0.0) - added more docs around the verification collector;;596.0;updated the javadocs;polishing the javadocs starting with this small pr:issue #596- updated @since to 210 (instead 200)- added more docs around the verification collector;    ;review and update documentation for 210;"-  update the migration guide (should be easy there are not many breaking changes if we miss out we can update in following rc)-  add information about bytebuddy in the migration guide-  mention noteworthy 200 features (should be easy there are not many plus they are already documented :)-  fix odd todo #593-  review/update @since tags so that they say 210final steps i plan doing (by the eod wednesday tomorrow) in order:-  test release from release/test (in progress see travis ci)-  merge/cherry-pick changes from ""release/test"" to master-  move announcement / motivation text ( to top of ""whats new in mockito 2""-  final pass over ""whats new in mockito 2"" make the information exciting and compelling emphasize use cases add missing links-  update the 210 information in main mockito class to link to ""whats new in mockito 2"" see ""todo 596"" in code- [x] review continuous delivery [wiki page]( [x] update the announcement text ( so that instead of tons of text it just links to ""whats new in mockito 2""- [x] review release checklist (mostly done) - #620- [x] optional - add some info in the whats new in mockito 2 about the next steps for engs (eg ask to use the new version and give feedback)";"there were separate issues for these points for example the last point was already  by @brice3 in a recent pr || this list nicely summarizes the incompatible changes:  || @bric3 has started the migration guide:  || migration guide has been updated and i did a small spell check that  thanks @timvdlippe@raphw @szpak @marcingrzejszczak @szczepiq if you want to add other stuff to this migration guide ? || sorry i wont find time for anything before javazone next week is over afterwards i will have a look! || given long weekend coming i can commit to finalize my review / amendments by the end of wed next week (9/7) apologies it is not as fast as the crew would like!keep in mind that you dont need me to pull the trigger!!!guys were so close now! its exciting :))))) || @raphw no problem enjoy javazone also do some advertisement for mockito 2 ) || ive checked out the migration guide and i found it really good i was missing an example of a default method but i think @timvdlippe added thati havent done much (to say the least) with regards to this release so i dont have much to write from myself like i told @szczepiq and @bric3 im overwhelmed with other projects but ill try to be more active in the upcoming months (dont promise anything though :/ )definitely i can take over testing questions and support if there are some! :) || i just remembered this have to add tomorrow: lazy verification || lazy verification mention added:  || cool this morning i tidied up a bit the wiki mostly these two : added side page improved a lot the home page || really like these changes looks a lot nicer!op wo 31 aug 2016 om 14:30 schreef brice dutheil <notifications@githubcom> :> > cool this morning i tidied up a bit the wiki mostly these two : added> side page improved a lot the home page> > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || guys the ""whats new in mockito 2"" is fantastic!!! thanks a lot! || i like the ""whats new in mockito 2"" im reviewing mockito main javadoc i might have some edits to the ""whats new"" wiki will see :) || yep sure ) || @szczepiq i think we can close this issue since you reviewed mockito class :p || i have some edits hold on :) ill finish by tomorrow! || ok we ll monitor the check boxes ) || @szczepiq be sure to check out this wiki page as well  fix or correct issues i think this could be a starting point if you want to extract the _cdd_ || > move announcement / motivation text ( to top of ""whats new in mockito 2""i would rather not do this since it clutters the content that wikipage should be only about ""whats new in mockito 2"" not what is upcoming in mockito 3> final pass over ""whats new in mockito 2"" make the information exciting and compelling emphasize use cases add missing linksnot sure what you mean with ""exciting and compelling"" but i would rather not change the current text of the features lets keep it formal and clear || @timvdlippe migration guide does not mention two bdd enhancements ive developed: #212 and #311 i think its worth sharing it with the world :) || @mkordas yes definitely i have added them! || @timvdlippe thank you! || > i would rather not do this since it clutters the content that wikipage should be only about ""whats new in mockito 2"" not what is upcoming in mockito 3good feedback ill think how to do it best> not sure what you mean with ""exciting and compelling"" but i would rather not change the current text of the features lets keep it formal and clearby compelling i mean ensuring that every feature describes the why well enough (eg ""why should i care about the feature"") perhaps this requirement is already met if thats the case i dont need to make changes :) || ah i didnt finish all i wanted :( im pretty happy though if someone else wants to pick up the work go for it and pull the trigger :) otherwise i can pick up the work tomorrow@timvdlippe i considered your feedback about the whats new page eventually i went ahead and added introduction section i hope its ok ) i added table of contents for people to quickly jump to improvements or incompatibilities i didnt change much of the original text after all its well written @bric3  @timvdlippe great work!!!! you contributed not only great code but also great docs too many times i see that docs are not emphasized enough in software projects docs are part of the product and must be as high quality as code thanks for honoring this principle in mockitodamn im proud of this release and you guys!!!!!!!!!! :))))))))))))))))))))))))))))))))) || the introduction looks good! glad the wording of the changes remainedfairly the same :)on thu 8 sep 2016 06:55 szczepan faber notifications@githubcom wrote:> ah i didnt finish all i wanted :( im pretty happy though if someone> else wants to pick up the work go for it and pull the trigger :)> otherwise i can pick up the work tomorrow> > @timvdlippe  i considered your feedback> about the whats new page eventually i went ahead and added> introduction section i hope its ok ) i added table of contents for> people to quickly jump to improvements or incompatibilities i didnt> change much of the original text after all its well written @bric3>   @timvdlippe  great work!!!! you contributed not only great code but also great docs too> many times i see that docs are not emphasized enough in software projects> docs are part of the product and must be as high quality as code thanks> for honoring this principle in mockito> > damn im proud of this release and you guys!!!!!!!!!!> :)))))))))))))))))))))))))))))))))> > —> you are receiving this because you were mentioned> reply to this email directly view it on github>  or mute the thread>   || made more progress i didnt finish on time my new eta is weekend :) however you dont need me to do the release :) || il just wait for #628 to be merged then ill make this branch `release/2x` || woah im done!t_h_a_n_k_s for patience and for pushing me & all of us to make progress on the release || ";1;0;updated the documentation in verificationcollectoradded more info about scenarios / use cases asked for feedback;
626;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;ensured javadocs are correct;based on feedback from brice.;;0;ensured javadocs are correct;based on feedback from brice;   ;;;;1;1;ensured javadocs are correct625;
628;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed javadoc documentation in the main class;checks out line item in #596;;0; javadoc documentation in the main class;checks out line item in #596;  628   looks good other wise ||;;;;1;1; wrong href in javadocbased on code review feedback well spotted!;
635;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;unified logic of argument matching and capturing;the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher. this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a  matcherapplicationstrategy . this strategy can apply an action to an pair of argumentmatcher and argument. one action is used to perform the argumentmatcher.matches(arg) call and an other is used to perfrom the capturing. - 439 argumentcaptor and argumentmatcher s can now be mixed in varargs - fixes #583 no more npe when null is passed to an varargs  - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently)  - reduced logic duplication;;439.0;unified logic of argument matching and capturing;the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication;  the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||;argumentcaptor and argumentmatcher cant be mixed in varargs;in the given test below the argumentcaptor should captor only the char c:```    @captor    private argumentcaptor<character> argumentcaptor    @test    public void capturesvararg() throws exception {        mockvarargs(42 c)        verify(mock)varargs(eq(42) argumentcaptorcapture())       assertthat(argumentcaptorgetallvalues())containsexactly(c)    }```the test fails with this message:```actual and expected should have same size but actual size was:  <2>while expected size was:  <1>actual was:  <[42 c]>expected was:  <[c]>```note that we see here 2 bugs:- a wrong argument index was captored- an `int`was captored by an  `argumentcaptor<character>` -> #565;yes `argumentcaptor` was not designed to be type aware though i like api with the least surprises it should be thanks for reporting || note to my self: here is the solution [gist ]( || this improvement makes mockito easier to use and more intuitive thats exactly the direction we should take mockito thanks!!! ||;1;0; failing test with vararg-aware matcher;
635;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;unified logic of argument matching and capturing;the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher. this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a  matcherapplicationstrategy . this strategy can apply an action to an pair of argumentmatcher and argument. one action is used to perform the argumentmatcher.matches(arg) call and an other is used to perfrom the capturing. - 439 argumentcaptor and argumentmatcher s can now be mixed in varargs - fixes #583 no more npe when null is passed to an varargs  - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently)  - reduced logic duplication;;583.0;unified logic of argument matching and capturing;the logic of argument matching and capturing is the same but can be found in argumentscomparator and invocationmatcher this pr unifies the decision logic how matchers are applied to argument+varargs by introducing a `matcherapplicationstrategy` this strategy can apply an action to an pair of argumentmatcher and argument one action is used to perform the argumentmatchermatches(arg) call and an other is used to perfrom the capturing- 439 argumentcaptor and argumentmatchers can now be mixed in varargs- fixes #583 no more npe when null is passed to an varargs - added 25 regression tests in varargstest (5 are ignored cause they belong to other issues and fail currently) - reduced logic duplication;  the pr! || @bric3 > some adjustments can be made eg getargumenttype can be simplified to read the type arg on the class rather than looking at the method the mechanic remained unchanged in this rp i introduced it with #463 at first i tried to retrieve the type-argument from the class but this turned out to be more complex eg when the type-argument is bound in an upper class or interface or additional type-arguments were introduced on a matcher classanyway if you have an idea how to improve or simplify it let me now!> other improvements can be made later sounds good can you open a new ticket so i can take look || @mockito-core#606 can be closed now || > > other improvements can be made later> > sounds good can you open a new ticket so i can take lookat the moment this works quite well! so no hurry especially given your above remark on mockito 3 (on master atm) we could change the interface to allow reporting the type handled by the matcher and maybe use default method for that || @christianschwarz i have seen an interesting problem with `varargstest` fail on master which is jdk 8 only while the same test passes on release/2x which is compiled and run against 3 jdk 6/7/8 im not sure why at the moment this behavior is different  plus my dev laptop is being  for a few days so im limited in my debug right nowthis happened after a merge of release/2x to master (52df10af105b7e9cd45bf214141c5096db3ecafe)i noticed that `verify(mock)varargs(isnull())` is compiled to invoke `imethodsvarargs(string  string)` im not sure other jdks behave/compile differently though one of the failing test can be fixed by adding the cast statement```    @test    public void shouldmatchvarargs_nullarrayarg() {        object argarray  null        mockvarargs(argarray)        verify(mock)varargs((object) isnull()) // otherwise it is linked against string    }```could it be that something went wrong with the merge regarding this pr ? || @christianschwarz actually the investigation continue see  ||;argumentcaptor: npe when an null array is passed to a varargs method;a nullpointerexception is thrown if an null array is passed to a varargs method```@testpublic void shouldcapturevarargs_nullarrayarg() {        string argarray  null        mockvarargs(argarray)        verify(mock)varargs(captorcapture()) //<- kaboom npe}```since an vararg is simply an array the argumentcaptor should reject it silently this relates to #565```javalangnullpointerexception    at javalangreflectarraygetlength(native method)    at orgmockitointernalinvocationinvocationmatchercapturevarargspart(invocationmatcherjava:142)    at orgmockitointernalinvocationinvocationmatchercaptureargumentsfrom(invocationmatcherjava:122)    at orgmockitointernalinvocationinvocationmarkermarkverified(invocationmarkerjava:24)    at orgmockitointernalinvocationinvocationmarkermarkverified(invocationmarkerjava:18)    at orgmockitointernalverificationcheckersnumberofinvocationscheckercheck(numberofinvocationscheckerjava:43)    at orgmockitointernalverificationtimesverify(timesjava:40)    at orgmockitointernalverificationmockawareverificationmodeverify(mockawareverificationmodejava:21)    at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:73)    at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:32)    at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:37)    at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:36)    at orgmockitointernalcreationbytebuddymockmethodinterceptoraccess$0(mockmethodinterceptorjava:32)    at orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptabstract(mockmethodinterceptorjava:113)    at orgmockitousageimethods$mockitomock$81506210varargs(unknown source)    at orgmockitousagematchersvarargstestshouldcapturevarargs_nullarrayarg(varargstestjava:182)```;probably related to #567 ||;1;0; failing test with vararg-aware matcher;
639;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;update travis configuration to also build on oraclejdk9;let s see if this actually works. testing for #520;;520.0;update travis configuration to also build on oraclejdk9;lets see if this actually works testing for #520;"  639 theres a new build || > also shall we update jacoco snapshot theres a new buildi would rather wait for the official 078 release and upgrade to that || ok fair enough ) || shalli merge this one? || yes || ";provide java 9 compatibility;once having mockito 20 out the door it would be good to explore java 9 compatibilitybasic todo list:-  - migration to gradle 30 (2x doesnt support java 9)-  - travis build with java 9-  - successful mockito project build with java 9-  - fix all disabled tests when the new asm version is available - #863open java 9 related [issues](https://githubcom/mockito/mockito/issues?qis%3aissue+is%3aopen+label%3ajava-9);i agree with that however note that mockito 21 should still be java 5 compatible (we still build java 5 binaries with java 6)before that we need to branch mockito 2x to support old jdks and make mockito 3 java 8 min || > we still build java 5 binaries with java 6im afraid we are [not](  16targetcompatibility  16```if java 5 is in fact a target of mockito 20 i could add animal sniffer verification that we dont use java 6 api in the codewe would probably need to decide if 21 is just for things that were able to finish before 20-final (and important bugfixes) or there are plans to keep a serious development of 2x line after 21 (with backporting non java 8 specific changes from 3x branch) || damn i didnt see this change im on my phonehowever thats fine for me || maybe something to mention in the migration guide though || otherwise for  21 i think we will only include few api refactoring like `argumentcaptor` and bugfixes otherwise it will delay serious work on mockito 3also i dont want to backport java 8 code to mockito 2my idea is to have a `2x` branch we can adjust the build script to release on this branch too || just for information the parts mockito uses of byte buddy are already fully java 9 compatible i do not see any problems on migration || i think this is ready now? || asm 6 is still in alpha:  || really dont focus too much on java 9 its still months away  || for your information logback uses mockito version 11019 which is apparently not java 9 compatible it follows that logback build fails under java 9  || mockito 2 is java 9 compatible || great thank you || running on version 195 with jigsaw b162 with --permit-illegal-accessim seeing the following warning  warning: illegal access by orgmockitocglibcorereflectutils$2 (file:gradle_cache/caches/modules-2/files-21/orgmockito/mockito-all/195/79a8984096fc6591c1e3690e07d41be506356fa5/mockito-all-195jar) to method javalangclassloaderdefineclass(javalangstringbyteintintjavasecurityprotectiondomain) maybe related  illegal access by netsfcglibcorereflectutils$1 (file:gradle_cache/caches/modules-2/files-21/cglib/cglib-nodep/324/42c972dee25a436b32c6027e848287ff47ed6750/cglib-nodep-324jar) to method javalangclassloaderdefineclass(javalangstringbyteintintjavasecurityprotectiondomain) is this  in 2x?  or is there handling if this call fails? || it might be fixed with mockito 2 yes as we are not using cglib anymore no promises though 😉  || i confirmed that the orgmockitocglibcorereflectutils is gone in 2x and mockito no longer depends on netsfcglibcore || byte buddy 172 now supports java 9 class files || >byte buddy 172 now supports java 9 class filesshould we just bump bytebuddy to the latest version? cheers! || closing as at last #863 has been fixed as well java 9 woohoo 🎉  ||;1;0;disable test not working on jdk9;
646;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;640 warns user to upgrade if java 8 version is to low;640 warns user to upgrade if java 8 version is to low.  also took the opportunity to log other platform details if mock class cannot be created.;;640.0;640 warns user to upgrade if java 8 version is to low;640 warns user to upgrade if java 8 version is to lowalso took the opportunity to log other platform details if mock class cannot be created;"before merging not that automatic release system will release a 210rc2 ||   646   some test for platform would be nice especially too see if the version number extraction works with all known formats eg : - feature -> 180-b24- maintainance -> 141_05-ea-b01- update -> 140_03-b04  140_03-ea-b01 does it work for other jvms like jrockit j9 or excelsior jet? || ok thanks for feedback ill update the code accordingly || beautiful!!! we can push and generate new rc or use the magic incantation in the commit message to prevent release and stack this change to next rc (if there is need for yet another rc) || @christianschwarz we dont care about those as we dont have report on those only oracle / openjdk although i dont know about their version scheme- bea (now oracle) jrockit > discontinued last version is java 6 and oracle migrated features in oracle jdk- ibm j9- excelsior jet - azul zing > ?- azul zulu > based on openjdk || @bric3 what i wanted to say was: the update version mechanism should be aware of version schemes other than the expected  the current implementation throws an indexoutofboundsexception if the jvm_version is eg  ""180b5_u44"" or an numberformatexception if the jvm_version is ""140_03-ea-b01""  || @christianschwarz fantastic review  @christianschwarz yes no problem that was a valuable input i didnt want these exceptions to be thrown !i updated the test case and i did some research as well for future cases like this || wow really nice tests!!   this  ";improve exception message to hint at upgrading java minor version to latest;driven by #636;can be closed ||;1;0;640 warns user to upgrade if java 8 version is below update 45;
647;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;a small fix on mockito javadocs. adding some styling and an anchor to section 12.;better now  right @timvdlippe?;;0;a small fix on mockito javadocs adding some styling and an anchor to section 12;better now right @timvdlippe?;    yes thanks a lot! || merge to master? || @szczepiq we will merge `release/2x` to `master` from time to time ||;;;;1;1;a small fix on mockito javadocs adding some styling and an anchor to section 12;
648;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;added inlinebytebuddymockmaker which uses the instrumentation api for redefining classes and inlining the mocking logic.;inline mocks allow for creating mocks of final types and final methods within any type. the inline mock engine also makes the mocking type invisible such that  mock(foo.class).getclass() == foo.class . exceptions need to be made for abstract types and for types with serialization requirements where final methods are still instrumented but where a subclass needs to be created nevertheless. there are however few limitations of the inline mock engine that do not apply for the subclass mock engine: 1. it is no longer possible to mock  native  methods which do not provide any byte code that can be manipulated. 2. synchronized methods remain synchronized as the instrumentation api does not allow the changing of modifiers.  the final mock engine is activated just like any other custom mock engine by placing an indicator file into the root folder. to make this more convenient  an alias mechanism was added where the mock type name can be referenced by _inline_.;;0;added inlinebytebuddymockmaker which uses the instrumentation api for redefining classes and inlining the mocking logic;inline mocks allow for creating mocks of final types and final methods within any type the inline mock engine also makes the mocking type invisible such that `mock(fooclass)getclass()  fooclass` exceptions need to be made for abstract types and for types with serialization requirements where final methods are still instrumented but where a subclass needs to be created nevertheless there are however few limitations of the inline mock engine that do not apply for the subclass mock engine:1 it is no longer possible to mock `native` methods which do not provide any byte code that can be manipulated2 synchronized methods remain synchronized as the instrumentation api does not allow the changing of modifiersthe final mock engine is activated just like any other custom mock engine by placing an indicator file into the root folder to make this more convenient an alias mechanism was added where the mock type name can be referenced by _inline_;"  ([i wrote here why]( looks like the saga will have a happy end after all :)before it gets merged id like to:-  review the pr-  update the docs a bit and push to the branch  eta next 12 hourspsadding new dependency is a breaking change || i want to write some more tests later today to increase coverage and better understand the feature eta this afternoon || good catch @timvdlippe i built this as a feature something along the lines of ""great if we can also mock super method calls"" but this is not a great default as you cannot call an overridden method outside of a class we should still consider it once we add this to the mockito dsl something like: `withfinals()` or `withsupercalls()` now i think you meant to assert the value being `""foo""` not `""bar""` || great work!!!questions:1 given that were using instrumentation does it open possibilities to mock the unmockable (like static methods)?2 what is the direction of this change? do we want to make it a default behavior or an opt-in / per mock / per project configuration?feedback:1 i didnt get to the review yet will do later today2 i would like to document better what is the direction of this change and what we expect from the users later today :)3 i think its ok to wait few more days and complete reviews tweaks etc || updated steps to get 210 final out at #642 || hi @szczepiq yes i absolutely think about mocking static methods at some point however i would like to avoid mocking them globally instead i would rather mock static calls from within a mock (i think this is the general use case)my plan is to enable something like the following construct at some point:``` javaclass foo {  string foo() { return ""foo"" + barvalue() }}class bar {  static string value() { return ""bar"" }}foo foo  spy(new foo())doreturn(""qux"")when(foo)callsstatic(barclass)value()assertthat(foofoo() is(""fooqux""))```similarly i would like to add support for mocking constructors which are however more difficult to integrate with the dslwhat i would like to do is to refine `foo` to replace all static callsites within the class with `invokedynamic` instructions such that calls that  by this particular mock instance are treated as stubs what i want to avoid is some form of _global_ stubbing of `bar::value` but only instrument calls from within the mock instanceas for the direction i think we should make this feature either the default once we collected sufficient feedback or to make it the default for final and non-visible types which could not be mocked otherwise also we might want to add a dsl feature such as:``` javafoo foo  mock(fooclass withsettings()mocktype(mocktypeinline))```the big drawback of inline mocks is that this approach does not allow to instrument native methods and it is not possible to strip synchronized keywords from methods so there is still a reason to use subclass-type mocks || fyi: i do not think the coverage reports are rerun upon updating the pr locally the coverage is much higher now || @raphw it actually updates since my new commits did trigger a new coverage report however codecov is currently down it seems || code coverage is pretty decent now and i think this feature is fairly stable therefore  lgtm however imho it would be good to have another rc before releasing the final version (more feedback could be useful) in general very nice feature @raphwregarding being a breaking change i agree with @szczepiq that adding a new dependency (**in general**) can **in some very specific circumstances** behave like a breaking change lets assume that a client application uses foolib 100 directly (in addition to mockito 560) after upgrading mockito  to 561 or 570 providing foolib 200 (as a transitive dependency) the foolib version used by gradle will be 200 the client application can have compilation issues or even worse work incorrectly due to incompatible changes between foolib 100 and 200 usually it will not happen but there is a potential risk || @szpak this pr does not change the versionproperties so it will trigger another rc absolutely new rc is needed || i didnt get to this today either i will do it tomorrow and if not dont wait for me and ship this baby! (eg new rc :d) || @szczepiq you raced me to javadoc i was gonna commit a lighter version ill inlcude your change then  ) || @bric3 my pleasure :) || fyi: for extra dependencies theres also a ""runtime check"" approach code checks the presence of required dependency at runtime and informs the user that he needs to add extra dependencies onto the classpath not pushing for this only mentioning for completeness || classes of the additional dependency are only attempted to be loaded if the new optional mock maker is used there is no scenario where an application has worked with rc1 but would fail with these changes as the additional dependency is part of byte buddy and since byte buddy agent has never introduced binary incompatible changes there is no risk in implicit upgrades eitheris this good to merge by this? || > is this good to merge by this?yesthanks so much!!!the final mocks journey does not end here there are many interesting features we can built on top of it :) also we want to implement #657 || great let us merge this then and get out another rc once we collected feedback we make the mock maker available via the mockito api || after my lecture has finished i can push out a new one :) || merge it @raphw ) || hurray! || hi after adding the file src/test/resources/mockito-extensions/orgmockitopluginsmockmaker with text: mock-maker-inline the tests stop runnings from command line (""/gradlew testdebugunittest” and “/gradlew connecteddebugandroidtest"" any suggestions? || the inline mock maker does not work on android || can we print a proper warning in this case? || its already part of the stack trace but probably barried one or two ticks down in the stack || > the inline mock maker does not work on androidany update on this? || there are some efforts by alternative byte code providers to offer such functionaltity:  || ";;;;1;1; test case that assumed specific error message;
654;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;renamed failuredetecter to failure detector.;also renamed misspelled issussessful() to issuccessful().  fixes: #653.;;653.0;renamed failuredetecter to failure detector;also renamed misspelled issussessful() to issuccessful()fixes: #653;    thanks oliver! ||;typos in failuredetecter;`failuredetecter` should be `failuredetector` its method `issussessful()` should probably be `issuccessful()`;pr? :) || check see #654 ||;1;0;renamed failuredetecter to failure detectoralso renamed misspelled issussessful() to issuccessful() added missing new line at the end of failuredetectorfixes: #653;
673;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;removed duplicate test;hello again :p   i originally requested this test to be added in #525 after the underlying problem had been resolved. while browsing the code now  i discovered that it had already been added (as  this probably doesn t need to be tested twice  so i ve removed the duplicate test.;;0;removed duplicate test;hello again :p i originally requested this test to be added in #525 after the underlying problem had been resolved while browsing the code now i discovered that it had already been added (as  this probably doesnt need to be tested twice so ive removed the duplicate test;  673   lgtm travis failure is unrelated to this removal ||;;;;1;1;removed redundant test turns out this is covered by diamondinheritanceisconfusingmockitotest which had been added already;
683;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;updated release process so that mockito can continuously deliver high quality features;when merged  this will produce new version 2.2.0 and set release/2.x to continuously publish 2.2.1  2.2.2   as new high quality features and enhancements are merged. hurray!  highlights: - set next version to 2.2.0 (arbitrary number) - reworked the conditional complexity to avoid accidental releases - removed custom release version logic because it does not work (not opposed to this feature  just cleaned up the code. this feature should be implemented in version.gradle file)   - for the time being  custom version can be achieved by using gradle env variable: org_gradle_project_version=2.3.0 (it looks like magic but it is a real feature from the gradle book  ) - added basic docs around testing the release process (it s way too hard now);;0;updated release process so that mockito can continuously deliver high quality features;when merged this will produce new version 220 and set release/2x to continuously publish 221 222  as new high quality features and enhancements are merged hurray!highlights:- set next version to 220 (arbitrary number)- reworked the conditional complexity to avoid accidental releases- removed custom release version logic because it does not work (not opposed to this feature just cleaned up the code this feature should be implemented in versiongradle file)  - for the time being custom version can be achieved by using gradle env variable: org_gradle_project_version230 (it looks like magic but it is a real feature from the gradle book )- added basic docs around testing the release process (its way too hard now);"  so i understand why szczepan did it (taking into account that he felt this change as ""needed"")maybe we should clarify the workflow when pr can be merged (eg how long to stay in a case more ""controversial "" changes) but i propose to do it offline || hm i thought i was pretty clear in the corresponding issues what my opinion was nonetheless i will discuss with the others to come to a conclusion and to resolve the disagreement we are currently having || @szczepiq dont forget to delete the topic branch once merged ) || > @szczepiq dont forget to delete the topic branch once merged )thanks for reminder and deleting it! is this a standard practice? || yes it isand anyway git / github allows to revive the branch if this is really neededin `git` a branch is not a really branch its rather a reference that points to a commit since this has been merged theres no reason to keep the _branch reference_ || ";;;;1;1;changed javadoc to trigger different publicationsworkaround to issue #684;
693;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improved the format of arguments in verification failures when describing short and byte values;currently the code can print some arguments without necessary casts  see   before the exception message contained :       imethods.forbyte(0x19)      which is actually not valid java. so the exception message now prints       imethods.forbyte((byte) 0x19)      this pr intends to fix it  this especially affects short and byte values.;;0;improved the format of arguments in verification failures when describing short and byte values;currently the code can print some arguments without necessary casts see  the exception message contained : ```imethodsforbyte(0x19)```which is actually not valid java so the exception message now prints ```imethodsforbyte((byte) 0x19)```this pr intends to fix it this especially affects short and byte values;  693  **< ;;;;1;1;prints necessary casts when decribing verification failure relates to #571;
698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;new api: mockingdetails.printinvocations() for debugging mock behavior;for motivation  see issue #543;;0;new api: mockingdetailsprintinvocations() for debugging mock behavior;for motivation see issue #543; ;;;;1;1;used assertjupdated to use assertj following really good feedback from brice;
704;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;delayedexecution uses now a more precise approach to call a mock async.;new approach to fix flickering async tests.  detail description  coming soon;;0;delayedexecution uses now a more precise approach to call a mock async;new approach to fix flickering async testsdetail description coming soon;"we probably need to restart the builds a couple of times to get again a level of certainty ||   ";;;;1;1;delayedexecution uses now a more precise approach to call a mock async;
705;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fixes exception typo;this is a simple correction in an error message that can be thrown by mockito.;;0;fixes exception typo;this is a simple correction in an error message that can be thrown by mockito;@mgaetan89  can you rename the message commit `minor test fix` does not help when looking at the historysomething like `fixes exception message typo in mockmaker` would do it ||  ;;;;1;1;fixes exception message typo in mockmaker;
711;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;707  adds throwable to arity answers  also improved javadoc;all in the title. this should 707;;707.0;707 adds throwable to arity answers also improved javadoc;all in the title this should 707;lgtm restarted the build that was failing on an unrelated test ||  ;improve usability of arity answers with regards to checked exceptions;recently introduced answer1 style answers dont declare throwable they should! otherwise the user is forced to add boilerplate code to answerx implementations whenever they use methods that declare checked exceptions plus answerx should behave exactly as good old answer interface!reported via the [mailing-list](https://groupsgooglecom/d/msgid/mockito/82d08ba9-5536-495e-90db-78c1062b6400%40googlegroupscom);given how answer is supposed to be used it is a safe change to do plus it is marked as @incubating :) ||;1;0;707 adds throwable to arity answers also improved javadoc;
719;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;verification listeners;i had the need to be notified when ever a verification happens  this pr implements this.  to do anything useful with this notification the following data is important: - the mock that we are verifying on. - the verification mode we are using. - and what method we wish to verify.  the one place where this data is collectable is in mockawareverificationmode.  what remains is to get the listeners there so we are able to notify them.  the tests i added try to follow those of the invocation listeners  however there might be more cases that are important that i m unaware of.;;0;verification listeners;i had the need to be notified when ever a verification happens this pr implements thisto do anything useful with this notification the following data is important:- the mock that we are verifying on- the verification mode we are using- and what method we wish to verifythe one place where this data is collectable is in mockawareverificationmodewhat remains is to get the listeners there so we are able to notify themthe tests i added try to follow those of the invocation listeners however there might be more cases that are important that im unaware of;"  this pr even though the build has failed (per above comment) thanks a lot @liamclark for your time and effort into this pr! || ";;;;1;1;custom condition in verification listener test;
724;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;added new release workflow for release automation;the purpose of this rb is to give you heads-up about the improvements to the release automation that i work on. the algorithm is implemented and will not change much. documentation  edge case unit tests and fixing runnability from gradle are pending (travis ci will fail on this pr).  the goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseworkflow {     step releaseneeded     onlyif { releaseneeded.needed }     step bintrayupload     step pullcommits     step configuregenericgituser  cleanup: restoregituser     step commitreleasenotes  rollback: resetreleasenotes     step tagnewversion  rollback: removenewtag     step bumpversion  rollback: unbumpversion     step pushchanges }      more over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -pdryrun ./gradlew pullcommits -psinglestep;;0;added new release workflow for release automation;the purpose of this rb is to give you heads-up about the improvements to the release automation that i work on the algorithm is implemented and will not change much documentation edge case unit tests and fixing runnability from gradle are pending (travis ci will fail on this pr)the goal of the new release-workflow plugin is to able to express the release automation in the buildgradle file like that:``` groovyreleaseworkflow {    step releaseneeded    onlyif { releaseneededneeded }    step bintrayupload    step pullcommits    step configuregenericgituser cleanup: restoregituser    step commitreleasenotes rollback: resetreleasenotes    step tagnewversion rollback: removenewtag    step bumpversion rollback: unbumpversion    step pushchanges}```more over it will be very easy to test out the release locally or even individual release steps:```/gradlew release -pdryrun/gradlew pullcommits -psinglestep```;  release/2x in the branch this keep history a bit cleaner in branches || thanks for the tip @bric3! i assumed that rebase would be tricky given that i have already pushed the branch to github (eg changing history of already-pushed code)next time i will do the rebase || @szczepiq already pushing does not limit you from rebasing it results in a lot cleaner prs || yep github handles flawlessly push forced comment on a branch ||;;;;1;1;merge branch release/2x into release-workflow;
734;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new nullable(class<t>) matcher for convenient matching of nullable arguments;after using mockito  i have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. however i have found that i miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  stream.of(<mixed values>).map(o -> mapper.map(c))   the current options are :;;0;new nullable(class<t>) matcher for convenient matching of nullable arguments;after using mockito i have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code however i have found that i miss an easy way to express a matcher for `nullable` argument when the production code may produce either `null` or value types typically `streamof(<mixed values>)map(o -> mappermap(c))` the current options are :* `<t> t any()` is nice but dont check the type* theres always `additionalmatchersor()` but this feel more heavy to useim proposing the introduction of the argument matcher `<t> nullable(class<t>)` which is a combination of `isa` and `isnull` im not adding `<t> t nullable()` because this would have the same meaning as `<t> t any()`;  734  **< ;;;;1;1;introduces argumentmatchersnullable(t);
735;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;exposed existing verification api so that it no longer leaks internal api;see motivation and plan in #730;;0;exposed existing verification api so that it no longer leaks internal api;see motivation and plan in #730;friendly ping || why not reopening #728  what is the difference here it seems to be the same branch ||  ;;;;1;1;cosmetics based on feedback;
746;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;add missing copyright headers;-  727;;727.0;add missing copyright headers;-  727 -  add missing copyrights using [license-gradle-plugin](  updated only source files test files were skipped existing copyright headers were not modified;unfortunately the plug-in is not compiled for java 6i really would like to avoid as much as possible maintaining 2x too long || however i suppose we can change the jdk that gradle use if this is a separate task in traviswhy a separate task because if gradle runs the under the code under another jdk we may miss specific jdk 6 runtime behavior || per  we can use version 0110 and make it work on jdk6 || good point lets do that instead @dmitriyzaitsev could you amend b27af329e91743e945e5971a3e5b7a4f839d0f03 with the working version? thanks in advance || @dmitriyzaitsev by id like to say you have done a proper pull request thats very nice! ||  ;copyright notice missing on files;lets add automation that will make consistent copyright notice on all source files;if nobodys working on it i can send you a pr || @dmitriyzaitsev looking forward to it 😄  ||;1;0;add missing header copyrights to source files727;
747;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;allow fluent usage of mockito.framework() listeners methods;currently  addlistener  and  removelistener  returns  void  which makes it repetitive to add or remove these :     java mockito.framework().addlistener()  mockito.framework().addlistener(...)  mockito.framework().addlistener(...)       the main change of this pr is to return  mockitoframework  instead  thus allowing to chain invocations :     java mockito.framework().addlistener(...)                    .addlistener(...)                    .addlistener(...)       this improvements is a breaking change  however the api is still **incubating** and should be expected to break  source wise there s no problem since nothing could be done before due to the  void  return.;;0;allow fluent usage of mockitoframework() listeners methods;currently `addlistener` and `removelistener` returns `void` which makes it repetitive to add or remove these :```javamockitoframework()addlistener()mockitoframework()addlistener()mockitoframework()addlistener()```the main change of this pr is to return `mockitoframework` instead thus allowing to chain invocations :```javamockitoframework()addlistener()                   addlistener()                   addlistener()```this improvements is a breaking change however the api is still **incubating** and should be expected to break source wise theres no problem since nothing could be done before due to the `void` return; ;;;;1;1;removes duplicated codesigned-off-by: brice dutheil <bricedutheil@gmailcom>;
748;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;regroup junit classes in junit packages;this pr proposes to regroup all junit related classes in corrct packages. there s two changes :;;0;regroup junit classes in junit packages;this pr proposes to regroup all junit related classes in corrct packages theres two changes :* public : deprecates `orgmockitorunnersmockitojunitrunner` and moves logic over `orgmockitojunitrunnersmockitojunitrunner`  questions :    * should the runner be moved in the subpackage `junitrunner` or regroup the runner along with the rule in the `junit` package? (junit 5 will have neither of those)    * should i do the same for already deprecated runners (console spamming and verbose runner)* private : moves junithackertool to `orgmockitointernaljunitutil`;lower coverable due to the _redirect_ classes (deprecated classes no extends the moved classes) ||  ;;;;1;1;moves mockitojunitrunner to the public junit packagethis change has been made in a way that is not breaking existing codesigned-off-by: brice dutheil <bricedutheil@gmailcom>;
754;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;improved documentation regarding unused stubbing detection;improved documentation regarding unused stubbing detection  609;;0;improved documentation regarding unused stubbing detection;improved documentation regarding unused stubbing detection 609;  754  ;;;;1;1;improved the docs re detecting unused stubbingsbased on great feedback from the community!;
759;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;updated the verification documentation to correctly use argthat with java8 lambdas;the example for custom argument matchers using a lambda in the main mockito documentation is missing a call to argthat.;;0;updated the verification documentation to correctly use argthat with java8 lambdas;the example for custom argument matchers using a lambda in the main mockito documentation is missing a call to argthatthis pr fixes the docs to correctly use argthat;sgtm? cant test it right now but almost certain it is the correct fix ||   @timvdlippe youll have a chance to test the javadoc changes in real ||;;;;1;1;fix the verification documentation to correctly use argthat for lambda matchers;
771;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;731 implements retry rule for flaky tests;previous attempts at fixing the time related tests failed. indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_.;;731.0;731 implements retry rule for flaky tests;previous attempts at fixing the time related tests failed indeed the previous attempts are not bullet proof when the ci can run schedule some threads slower than _expected_a proper harness should be implemented but in the meantime i implemented the retry rule as proposed in #731 to gain back stability on the build; ;consider rerunning failed tests;consider rerunning failed tests to avoid  options: - rerun test gradle task - rerun test rule http://stackoverflowcom/questions/8295100/how-to-re-run-failed-junit-tests-immediately;"-1 for rerunning the test should be  see #704 || agreed with @christianschwarz we should fix the test instead this test has a behavior difficult to test both locally and in a container previous approach with `countdownlatch` in #619 worked but was imperfect and still broke under the constrained travis environment @christianschwarz approach is different but proved to be working more consistentlyfor reference the original issue is #548  || its classic craftsmanship vs pragmatismi hate re-running builds and tests however i am pragmatic and i hate wasting time even more :) || @szczepiq #704 has landed this ticked can be closed> its classic craftsmanship vs pragmatism vs ""recklessness""   image there is a rare race condition in the code under test possibly the race condition will not appear in a future run who to detect the bug this way?   || closing per #704 || thank you guys for attempting to fix the verification with timeout test! it still seem to fail:  (i merged from release/2x so it contained @christianschwarz fix)> image there is a rare race condition in the code under test possibly the race condition will not appear in a future run who to detect the bug this way?rerun does not have to be dumb it can only allow to rerun tests that we know that are flaky (and need fixing or accepting their imperfection) ||  || agreed theres still not so rare build failures i had to restart the job 177057772 manually ive been seeng this just as often since #704 merge<details><summary>job logs</summary>```worker informationhostname: travis-worker-gce-org-prod2-4:4d952407-384a-4d90-a194-6a04d5b5e251version: v250  testing-gce-e550a994-d659-4a46-bccf-eed57dafea15:travis-ci-jvm-precise-1471814223startup: 2162330554sbuild system informationbuild language: javabuild group: stablebuild dist: precisebuild id: 177057771job id: 177057772travis-build version: 0d606872abuild image provisioning date and timesun aug 21 21 22 utc 2016operating system detailsdistributor id: ubuntudescription:    ubuntu 12045 ltsrelease:    1204codename:   preciselinux version3130-92-genericcookbooks versionf77e708  versiongit version 1856bash versiongnu bash version 4225(1)-release (x86_64-pc-linux-gnu)copyright (c) 2011 free software foundation inclicense gplv3+: gnu gpl version 3 or later < is free software you are free to change and redistribute itthere is no warranty to the extent permitted by lawgcc versiongcc (ubuntu/linaro 463-1ubuntu5) 463copyright (c) 2011 free software foundation incthis is free software see the source for copying conditions  there is nowarranty not even for merchantability or fitness for a particular purposellvm versionclang version 34 (tags/release_34/final)target: x86_64-unknown-linux-gnuthread model: posixpre-installed ruby versionsruby-225pre-installed nodejs versionsv01036pre-installed go versions142mysql --versionmysql  ver 1414 distrib 5550 for debian-linux-gnu (x86_64) using readline 62pre-installed postgresql versions912392189314949redis versionredis-server 306riak version202memcached version1413mongodb versionmongodb 2414couchdb versioncouchdb 161neo4j version194cassandra version209elasticsearch version140installed sphinx versions2010219226default sphinx version226installed firefox versionfirefox 3840esrphantomjs version198ant -versionapache ant(tm) version 182 compiled on december 3 2011mvn -versionapache maven 325 (12a6b3acb947671f09b81f49094c53f426d8cea1 2014-12-14t17 23+00:00)maven home: /usr/local/mavenjava version: 170_80 vendor: oracle corporationjava home: /usr/lib/jvm/java-7-oracle/jredefault locale: en platform encoding: utf-8os name: ""linux"" version: ""3130-92-generic"" arch: ""amd64"" family: ""unix""gradle -version------------------------------------------------------------gradle 221------------------------------------------------------------build time:   2014-11-24 09 35 utcbuild number: nonerevision:     6fcb59c06f43a4e6b1bcb401f7686a8601a1fb4agroovy:       236ant:          apache ant(tm) version 193 compiled on december 23 2013jvm:          170_80 (oracle corporation 2480-b11)os:           linux 3130-92-generic amd64lein1 versionwarning: youre currently running as root probably by accidentpress control-c to abort or enter to continue as rootset lein_root to disable this warningwarning: youre currently running as root probably by accidentpress control-c to abort or enter to continue as rootset lein_root to disable this warningdownloading leiningen nowusing jline for console i/o install rlwrap for optimum experienceleiningen 171 on java 170_80 java hotspot(tm) 64-bit server vmlein2 versionwarning: youre currently running as root probably by accidentpress control-c to abort or enter to continue as rootset lein_root to disable this warningdownloading leiningen to /home/travis/lein/self-installs/home/travis/lein/leiningen-251-standalonejar nowleiningen 251 on java 170_80 java hotspot(tm) 64-bit server vmlein versionwarning: youre currently running as root probably by accidentpress control-c to abort or enter to continue as rootset lein_root to disable this warningdownloading leiningen to /home/travis/lein/self-installs/home/travis/lein/leiningen-251-standalonejar nowleiningen 251 on java 170_80 java hotspot(tm) 64-bit server vm$ export debian_frontendnoninteractivereading package listsbuilding dependency treereading state informationlibc6 is already the newest version0 upgraded 0 newly installed 0 to remove and 102 not upgraded$ git clone --depth50 --branchremove-internal-javadoc-links  mockito/mockitocloning into mockito/mockitoremote: counting objects: 3100 doneremote: compressing objects: 100% (1762/1762) doneremote: total 3100 (delta 1276) reused 2086 (delta 919) pack-reused 0receiving objects: 100% (3100/3100) 117 mib | 0 bytes/s doneresolving deltas: 100% (1276/1276) donechecking connectivity done$ cd mockito/mockito$ git checkout -qf 7a4bee38654b052361153cadc1dda5ede068d0ffset hostname to mockito-cd$ sudo hostname mockito-cd## managed by chef on packer-57ba1a4f-8735-ef55-49ff-0a97bf85bb9dceco-emissary-99515internal  ## cookbook:: travis_build_environment##     file:: templates/default/etc/cloud/templates/hoststmplerb127011 testing-gce-e550a994-d659-4a46-bccf-eed57dafea15 testing-gce-e550a994-d659-4a46-bccf-eed57dafea15 ip4-loopback precise64sudo: unable to resolve host mockito-cd## managed by chef on packer-57ba1a4f-8735-ef55-49ff-0a97bf85bb9dceco-emissary-99515internal  ## cookbook:: travis_build_environment##     file:: templates/default/etc/cloud/templates/hoststmplerb127011 testing-gce-e550a994-d659-4a46-bccf-eed57dafea15 testing-gce-e550a994-d659-4a46-bccf-eed57dafea15 ip4-loopback precise64setting environment variables from repository settings$ export nexus_token_user[secure]$ export nexus_token_pwd[secure]$ export gh_token[secure]$ export mockito_bintray_api_key[secure]$ export test_env_var[secure]setting environment variables from travisyml$ export termdumb$ export gradle_opts""-xx:+usecompressedoops -djavaawtheadlesstrue""$ jdk_switcher use openjdk6switching to openjdk6 (java-160-openjdk-amd64) java_home will be set to /usr/lib/jvm/java-6-openjdk-amd64$ export termdumbsetting up build cache$ export casher_dir$home/casher$ installing caching utilitiesattempting to download cache archivefetching remove-internal-javadoc-links/cache-linux-precise-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855--jdk-openjdk6tgzfound cacheadding /home/travis/gradle/caches to cacheadding /home/travis/gradle/wrapper to cache$ java -xmx32m -versionjava version ""160_39""openjdk runtime environment (icedtea6 11311) (6b39-11311-0ubuntu012041)openjdk 64-bit server vm (build 2325-b01 mixed mode)$ javac -j-xmx32m -versionjavac 160_39$ export travis_commit_message$(git log --format%b -n 1 $travis_commit)$ echo ""$travis_commit_message""disables the testng javadoc taskthis task is not configured and shows errors and warningalso the test-ng project is not released yet$ true$ /gradlew cibuild release -dscanstarting a new gradle daemon for this build (subsequent builds will be faster)support for running gradle using java 6 has been deprecated and will be removed in gradle 30parallel execution is an incubating feature clean up-to-date compilejava up-to-date compilegroovy up-to-date processresources up-to-date classes up-to-date jar assemble compiletestjava up-to-date compiletestgroovy up-to-date processtestresources up-to-date testclasses up-to-date test up-to-date check up-to-date buildversion: 2220 exttest:compilejava up-to-date processresources up-to-date classes up-to-date jar assemble processtestresources processresources up-to-date processtestresourcesnote: some input files use or override a deprecated apinote: recompile with -xlint:deprecation for details:processresources up-to-date jar testng testng testng testng testng testng testng testng testng testng:buildinstalling sw-precache globally sourcesjar licensemainunknown file extension: src/main/java/org/mockito/internal/util/concurrent/licenseunknown file extension: src/main/java/org/mockito/internal/util/concurrent/readmemd:licensemain up-to-date:licensetestmissing header in: src/test/java/org/mockitousage/compilationwarningstestjavamissing header in: src/test/java/org/mockitousage/serialization/deepstubsserializabletestjavamissing header in: src/test/java/org/mockitousage/junitrunner/silentrunnertestjavamissing header in: src/test/java/org/mockitousage/junitrunner/unusedstubsexceptionmessagetestjavamissing header in: src/test/java/org/mockitousage/junitrunner/strictrunnertestjavamissing header in: src/test/java/org/mockitousage/verification/delayedexecutionjavamissing header in: src/test/java/org/mockitousage/junitrule/stubbingwarningsmultithreadingtestjavamissing header in: src/test/java/org/mockitousage/junitrule/stubbingwarningsjunitruletestjavamissing header in: src/test/java/org/mockitousage/junitrule/silentjunitruletestjavamissing header in: src/test/java/org/mockitousage/junitrule/ruletestwithparameterconstructortestjavamissing header in: src/test/java/org/mockitousage/junitrule/verificationcollectorimpltestjavamissing header in: src/test/java/org/mockitousage/junitrule/ruletestwithfactorymethodtestjavamissing header in: src/test/java/org/mockitousage/junitrule/mockitojunitruletestjavamissing header in: src/test/java/org/mockitousage/debugging/invocationsprintertestjavamissing header in: src/test/java/org/mockitousage/junitrule/invalidtargetmockitojunitruletestjavamissing header in: src/test/java/org/mockitousage/internal/junit/unusedstubbingsfindertestjavamissing header in: src/test/java/org/mockitousage/bugs/diamondinheritanceisconfusingmockitotestjavamissing header in: src/test/java/org/mockitousage/bugs/classcastexonverifyzerointeractionstestjavamissing header in: src/test/java/org/mockitousage/constructor/creatingmockswithconstructortestjavamissing header in: src/test/java/org/mockitousage/bugs/confusedsignaturetestjavamissing header in: src/test/java/org/mockitousage/bugs/equalswithdeltatestjavamissing header in: src/test/java/org/mockitousage/bugs/creation/publicmethodinparentwithnonpublictypeinsignaturetestjavamissing header in: src/test/java/org/mockitousage/bugs/comparematchertestjavamissing header in: src/test/java/org/mockitousage/bugs/creation/otherpackage/publicparentclassjavamissing header in: src/test/java/org/mockitousage/bugs/injection/issue353injectionmightnothappenincertainconfigurationtestjavamissing header in: src/test/java/org/mockitousage/bugs/creation/constructorinvokingmethodshouldnotraiseexceptiontestjavamissing header in: src/test/java/org/mockitousage/bugs/deepstubs/deepstubswronglyreportsserializationproblemstestjavamissing header in: src/test/java/org/mockitousage/bugs/creation/api/publicclassjavamissing header in: src/test/java/org/mockitousage/performance/stubonlyavoidmemoryconsumptiontestjavamissing header in: src/test/java/org/mockitousage/basicapi/resetinvocationstestjavamissing header in: src/test/java/org/mockitousage/bugs/deepstubs/deepstubfailingwhengenericnestedasrawtypetestjavamissing header in: src/test/java/org/mockitousage/matchers/varargstestjavamissing header in: src/test/java/org/mockitousage/stubbing/stubbingwithdelegatevarargstestjavamissing header in: src/test/java/org/mockitousage/stubbing/stubbingreturnsselftestjavamissing header in: src/test/java/org/mockitointegration/nojunitdependenciestestjavamissing header in: src/test/java/org/mockitoutil/classloaderstestjavamissing header in: src/test/java/org/mockitoutil/simpleperrealmreloadingclassloaderjavamissing header in: src/test/java/org/mockitoutil/classloadersjavamissing header in: src/test/java/org/mockitoutil/testbasetestjavamissing header in: src/test/java/org/mockitoutil/vmargassumptionsjavamissing header in: src/test/java/org/mockitoutil/simpleclassgeneratorjavamissing header in: src/test/java/org/mockitoutil/stopwatchjavamissing header in: src/test/java/org/mockitoutil/junitresultassertjavamissing header in: src/test/java/org/mockitoutil/simpleserializationutiljavamissing header in: src/test/java/org/mockito/verification/negativedurationtestjavamissing header in: src/test/java/org/mockito/annotationsarecopiedfrommockedtypetestjavamissing header in: src/test/java/org/mockito/internal/util/timertestjavamissing header in: src/test/java/org/mockito/internal/util/platformtestjavamissing header in: src/test/java/org/mockito/internal/util/defaultmockingdetailstestjavamissing header in: src/test/java/org/mockito/internal/util/reflection/genericarrayreturntypetestjavamissing header in: src/test/java/org/mockito/internal/util/reflection/supertypeslastsortertestjavamissing header in: src/test/java/org/mockito/internal/util/reflection/generictypeextractortestjavamissing header in: src/test/java/org/mockito/internal/verification/descriptiontestjavamissing header in: src/test/java/org/mockito/internal/util/io/ioutiltestjavamissing header in: src/test/java/org/mockito/internal/verification/verificationovertimeimpltestjavamissing header in: src/test/java/org/mockito/internal/invocation/typesafematchingtestjavamissing header in: src/test/java/org/mockito/internal/verification/verificationwithdescriptiontestjavamissing header in: src/test/java/org/mockito/internal/junit/junitruletestjavamissing header in: src/test/java/org/mockito/internal/junit/stubbingargmismatchestestjavamissing header in: src/test/java/org/mockito/internal/junit/unusedstubbingstestjavamissing header in: src/test/java/org/mockito/internal/junit/argmismatchfindertestjavamissing header in: src/test/java/org/mockito/internal/creation/delegatingmethodtestjavamissing header in: src/test/java/org/mockito/internal/creation/instance/constructorinstantiatortestjavamissing header in: src/test/java/org/mockito/internal/creation/bytebuddy/abstractbytebuddymockmakertestjavamissing header in: src/test/java/org/mockito/internal/creation/bytebuddy/typecachingmockbytecodegeneratortestjavamissing header in: src/test/java/org/mockito/internal/creation/bytebuddy/subclassbytebuddymockmakertestjavamissing header in: src/test/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakertestjavamissing header in: src/test/java/org/mockito/internal/configuration/classpathloadertestjavamissing header in: src/test/java/org/mockito/internal/creation/bytebuddy/bytebuddymockmakertestjavamissing header in: src/test/java/org/mockito/internal/configuration/plugins/pluginfindertestjavamissing header in: src/test/java/org/mockito/internal/matchers/instanceoftestjavamissing header in: src/test/java/org/mockito/internal/framework/defaultmockitoframeworktestjavamissing header in: src/test/java/org/mockito/internal/hamcrest/matchergenerictypeextractortestjavamissing header in: src/test/java/org/mockito/internal/matchers/text/matchertostringtestjavamissing header in: src/test/java/org/mockito/internal/matchers/text/valueprintertestjavamissing header in: src/test/java/org/mockito/internal/stubbing/defaultanswers/forwardsinvocationstestjavamissing header in: src/test/java/org/mockito/internal/matchers/stringmatcherstestjavamissing header in: src/test/java/org/mockito/exceptions/stacktrace/stacktracecleanertestjava createtestresources  some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details processtestresources up-to-date test compiletestjava testclasses test check buildorgmockitousageverificationverificationwithtimeouttest > shouldallowmixingothermodeswithtimeoutandfail failed    wanted but not invoked:    mockonearg(c)    -> at orgmockitousageverificationverificationwithtimeouttestshouldallowmixingothermodeswithtimeoutandfail(verificationwithtimeouttestjava:103)    actually there were zero interactions with this mock        at orgmockitointernalexceptionsreporterwantedbutnotinvoked(reporterjava:329)        at orgmockitointernalverificationcheckersmissinginvocationcheckercheckmissinginvocation(missinginvocationcheckerjava:38)        at orgmockitointernalverificationatleastverify(atleastjava:31)        at orgmockitointernalverificationverificationovertimeimplverify(verificationovertimeimpljava:78)        at orgmockitointernalverificationverificationwrapperverify(verificationwrapperjava:19)        at orgmockitointernalverificationmockawareverificationmodeverify(mockawareverificationmodejava:21)        at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:73)        at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:32)        at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:36)        at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:41)        at orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptabstract(mockmethodinterceptorjava:120)        at orgmockitousageimethods$mockitomock$442824988onearg(unknown source)        at orgmockitousageverificationverificationwithtimeouttestshouldallowmixingothermodeswithtimeoutandfail(verificationwithtimeouttestjava:103)1666 tests completed 1 failed 48 skipped:test failedfailure: build failed with an exception* what went wrong:execution failed for task :test> there were failing tests see the report at: file:///home/travis/build/mockito/mockito/build/reports/tests/indexhtml* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log outputbuild failedtotal time: 1 mins 29851 secspublishing build information command ""/gradlew cibuild release -dscan"" exited with 1$ rm -f $home/gradle/caches/modules-2/modules-2lockstore build cachechange detected (content changed file is created or file is deleted):/home/travis/gradle/caches/2141/plugin-resolution/cachepropertieslock/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/cacheproperties/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/cachepropertieslock/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/classes/_buildscript_class/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/classes/_buildscript_$_run_closure1class/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/classes/_buildscript_$_run_closure1$_closure2class/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-1646510925884990387/classes/_buildscript_$_run_closure1$_closure2$_closure4class/home/travis/gradle/caches/2141/scripts/1q4d2xab9ze2xxke3zazxroc2/cp_dsl/cp_dsl-16changes detected packing new archiveuploading archivedone your build exited with 1```</details> ||  i see this test failing even more frequently than before the recent changes to this test? revert? :) || i dont know it may very well of the travis instances activities anyway i just wrote a retry rule since theres none coming with junitits not perfect but this wrong to restart manually the jobs || ";1;0;731 implements retry rule for flaky testsnever the less those tests should be implemented properly retry attempts are set to 4signed-off-by: brice dutheil <bricedutheil@gmailcom>;
775;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;removed private ismockitomock(..) in mockutil;small internal refactoring.;;0;removed private ismockitomock() in mockutil;small internal refactoring; ;;;;1;1;removed private ismockitomock() in mockutil;
776;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;invocationmatcher internal improvements;invocationmatcher internal improvements;;0;invocationmatcher internal improvements;invocationmatcher internal improvements * added missing @override annotations to reduce warning count * simplified parameter comparison in hassamemethod() *  compile error due to char conversion in matcherstest; ;;;;1;1;invocationmatcher internal improvements * added missing @override annotations to reduce warnong count * simplified parameter comparison in hassamemethod();
777;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;replaced objectbox with atomicreference;removed objectbox in favor of atomicreference.;;0;replaced objectbox with atomicreference;removed objectbox in favor of atomicreference;please add more description even though the change is easy and better ) ||  ;;;;1;1;replaced objectbox with atomicreference;
778;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;valueprinter small improvements;* added private construtor;;0;valueprinter small improvements;" * added private construtor * removed unneccessary else statements * added missing type arguments * replaced `new arrayiterator(new string{""""}) `with `emptyiterator()` in_printvalues()_";   build break for java 16  emptyiterator() -> since 17 ||  ;;;;1;1;valueprinter small improvements * added private construtor * removed unneccessary else statements * added missing type arguments * removed handling of a null iterator in printvalues() if null ispassed a npe is thrown now to indicate a bug;
779;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;removed argument from mockingprogress.stubbingcompleted(..);removed unneccessary argument from internal mockingprogress.stubbingcompleted(..);;0;removed argument from mockingprogressstubbingcompleted();removed unneccessary argument from internal mockingprogressstubbingcompleted(); ;;;;1;1;removed unneccessary argument from internalmockingprogressstubbingcompleted();
782;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;introduce default answers for primitive optionals/streams;i introduced  #invokenullaryfactorymethod  to remove some of the existing code duplication  but am unhappy about the _new_ duplication  especially in the test code. what s your view on introducing deduplicating logic in test code? also  the singleton fields in  javaeightutil  could be replaced with a  concurrentmap<string  object>  (i.e. a map from fqcns to singletons). if you agree  i d love to reduce the size of this pr.;;0;introduce default answers for primitive optionals/streams;i introduced `#invokenullaryfactorymethod` to remove some of the existing code duplication but am unhappy about the _new_ duplication especially in the test code whats your view on introducing deduplicating logic in test code? also the singleton fields in `javaeightutil` could be replaced with a `concurrentmap<string object>` (ie a map from fqcns to singletons) if you agree id love to reduce the size of this pr; ! :) ||;;;;1;1;781 introduce default answers for primitive optionals/streams;
783;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;simplify  returnsemptyvaluestest;as [discussed]( in the comments under #782. longer term this approach could be replaced with a proper test parametrization framework  but then at least the foundation has been laid.;;0;simplify `returnsemptyvaluestest`;as [discussed]( in the comments under #782 longer term this approach could be replaced with a proper test parametrization framework but then at least the foundation has been laid; ;;;;1;1;simplify `returnsemptyvaluestest`by factoring out duplicated logic into helper methods;
795;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;deep stubs no longer cause unnecessary stubbing exception with junit runner;756;;0;deep stubs no longer cause unnecessary stubbing exception with junit runner;756;  795  **< ;;;;1;1;made the test stricterfollowing nice code review feedback!;
803;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;adds a warning for ibm j9 vms if mock generation fails;related to #801  this pr simply adds a warning for ibm j9 vms if the mock maker fails.;;801.0;adds a warning for ibm j9 vms if mock generation fails;related to #801 this pr simply adds a warning for ibm j9 vms if the mock maker fails; ;mockito 2 fails when running on ibm j9 (sr1 fp10) vm;"mocking an interface fails when running on ibms jdk with the error attached below works well on oracle jdk 180_91attaching a small project that can be used to reproduce the issue: [mockito-ibm-jdk-testzip]( mailing list post:  from `java -version` of the failing version:```java version ""180""java(tm) se runtime environment (build pwa6480sr1fp10-20150711_01(sr1 fp10))ibm j9 vm (build 28 jre 180 windows 7 amd64-64 compressed references 20150630_255633 (jit enabled aot enabled)j9vm - r28_jvm28_20150630_1742_b255633jit  - trr14java_20150625_9508101gc   - r28_jvm28_20150630_1742_b255633_cmprssj9cl - 20150630_255633)jcl - 20150711_01 based on oracle jdk8u51-b15```error message and stack trace:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface serviceservicemockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 18jvm vendor name    : ibm corporationjvm vendor version : 28jvm name           : ibm j9 vmjvm version        : pwa6480sr1fp10-20150711_01 (sr1 fp10)jvm info           : jre 180 windows 7 amd64-64 compressed references 20150630_255633 (jit enabled aot enabled)j9vm - r28_jvm28_20150630_1742_b255633jit  - trr14java_20150625_9508101gc   - r28_jvm28_20150630_1742_b255633_cmprssj9cl - 20150630_255633os name            : windows 7os version         : 61underlying exception : javalangillegalargumentexception: object is not an instance of declaring class	at orgmockitointernalrunnerssilentjunitrunner$1withbefores(silentjunitrunnerjava:29)	at orgjunitrunnersblockjunit4classrunnermethodblock(blockjunit4classrunnerjava:276)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgmockitointernalrunnerssilentjunitrunnerrun(silentjunitrunnerjava:39)	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:39)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:103)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:459)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:678)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:382)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:192)caused by: javalangillegalargumentexception: object is not an instance of declaring class	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:95)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:55)	at javalangreflectmethodinvoke(methodjava:507)	at netbytebuddydescriptiontypetypedescription$generic$annotationreader$fortypeargumentresolve(typedescriptionjava:3843)	at netbytebuddydescriptiontypetypedescription$generic$annotationreader$delegator$chainedresolve(typedescriptionjava:3468)	at netbytebuddydescriptiontypetypedescription$generic$annotationreader$fortypeargumentresolve(typedescriptionjava:3803)	at netbytebuddydescriptiontypetypedescription$generic$annotationreader$delegatoraslist(typedescriptionjava:3439)	at netbytebuddydescriptiontypetypedescription$generic$ofnongenerictype$forloadedtypegetdeclaredannotations(typedescriptionjava:4208)	at netbytebuddyimplementationattributeannotationappender$fortypeannotationsapply(annotationappenderjava:720)	at netbytebuddyimplementationattributeannotationappender$fortypeannotationsonnongenerictype(annotationappenderjava:701)	at netbytebuddyimplementationattributeannotationappender$fortypeannotationsonnongenerictype(annotationappenderjava:415)	at netbytebuddydescriptiontypetypedescription$generic$ofnongenerictypeaccept(typedescriptionjava:4075)	at netbytebuddyimplementationattributeannotationappender$fortypeannotationsonparameterizedtype(annotationappenderjava:682)	at netbytebuddyimplementationattributeannotationappender$fortypeannotationsonparameterizedtype(annotationappenderjava:415)	at netbytebuddydescriptiontypetypedescription$generic$ofparameterizedtypeaccept(typedescriptionjava:4998)	at netbytebuddyimplementationattributemethodattributeappender$forinstrumentedmethodapply(methodattributeappenderjava:195)	at netbytebuddyimplementationattributemethodattributeappender$compoundapply(methodattributeappenderjava:490)	at netbytebuddydynamicscaffoldtypewriter$methodpool$record$fordefinedmethod$withbodyapplybody(typewriterjava:612)	at netbytebuddydynamicscaffoldtypewriter$methodpool$record$fordefinedmethodapply(typewriterjava:533)	at netbytebuddydynamicscaffoldtypewriter$default$forcreationcreate(typewriterjava:3910)	at netbytebuddydynamicscaffoldtypewriter$defaultmake(typewriterjava:1693)	at netbytebuddydynamicscaffoldsubclasssubclassdynamictypebuildermake(subclassdynamictypebuilderjava:172)	at netbytebuddydynamicscaffoldsubclasssubclassdynamictypebuildermake(subclassdynamictypebuilderjava:153)	at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:2568)	at netbytebuddydynamicdynamictype$builder$abstractbase$delegatormake(dynamictypejava:2670)	at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:84)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$cachedbytecodegeneratorgetorgeneratemockclass(typecachingbytecodegeneratorjava:91)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:38)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:68)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:39)	at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:26)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:63)	at orgmockitomockitomock(mockitojava:1637)	at orgmockitointernalconfigurationmockannotationprocessorprocess(mockannotationprocessorjava:33)	at orgmockitointernalconfigurationmockannotationprocessorprocess(mockannotationprocessorjava:16)	at orgmockitointernalconfigurationdefaultannotationenginecreatemockfor(defaultannotationenginejava:39)	at orgmockitointernalconfigurationdefaultannotationengineprocess(defaultannotationenginejava:63)	at orgmockitointernalconfigurationinjectingannotationengineprocessindependentannotations(injectingannotationenginejava:59)	at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:43)	at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:67)	 19 more```";"hi thanks for the report @grimsa i dont have access to an j9 virtual machine its probably something related to internal types of j9 that affects parts of byte-byddy (like the one show in the [stack trace]( so not sure when this bug can be  || there are some hoops to jump through to get ibms j9 vm (i assume due to some licensing issue) but it can be downloaded with no registration in a [bundle with websphere liberty]( (located in wlp/java/java)running `java -version` on it produces the following:```java version ""180""java(tm) se runtime environment (build pwa6480sr3fp10-20160720_02(sr3fp10))ibm j9 vm (build 28 jre 180 windows 7 amd64-64 compressed references 20160719_312156 (jit enabled aot enabled)j9vm - r28_java8_sr3_20160719_1144_b312156jit  - trr14java_20160629_12028401gc   - r28_java8_sr3_20160719_1144_b312156_cmprssj9cl - 20160719_312156)jcl - 20160719_01 based on oracle jdk8u101-b13```but what is important is that i ran the test on this version and mockito **worked as expected**were running on a fairly old ibm jdk (back from 2015 06) so maybe we brought it on ourselvesif you are still interested in looking into it i could figure out a way to get you that failing version of j9 || ah its possible that early java 8 vm of ibm had issues as well actually @raphw identified issues with early hotspot vm they had bugs that were fixed in 180u45 since its old and a more recent version of the vm appears to fix the issue im not sure its worth the efforteventually we can print a message that can warn j9 users warning on a specific version is possible but the version scheme is confusing to say the least im tempted to label it as _wont fix_anyway thanks for the link im using osx though its always possible to create a virtual box from scratch however it takes time || i see theres some code in `orgmockitointernalutilplatform` that checks for jdk version but i dont see an obvious and clean way to add this j9 version check especially as we dont know an exact version from which it works as expectedid agree with labeling it with _wont-fix_ although you could consider mentioning it in the wiki (eg in [whats new in mockito 2]( || > as we dont know an exact version from which it works as expectedyes exactlysure ill mention it in the wiki closing as wont fix for now || added some info regarding vm in the wiki page and i created a pr that warns the user of early ibm j9 vms || ";1;0;related to #801 : adds a warning for ibm j9 vms if mock generation failssigned-off-by: brice dutheil <bricedutheil@gmailcom>;
805;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;never throw mockito exceptions from a plugin type s constructor;throwing a  mockitoexception  from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugin s creation.;;0;never throw mockito exceptions from a plugin types constructor;throwing a `mockitoexception` from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugins creation; ;;;;1;1;never throw mockito exceptions from a plugin types constructor;
807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new opt-in stubbing strictness implemented in junit rules;new api (for rationale  see #769  for code review history see #770):;;770.0;new opt-in stubbing strictness implemented in junit rules;"new api (for rationale see #769 for code review history see #770):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what ""strict stubbing"" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests (""dont repeat yourself""): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber)";"with interactive rebase you can squash commits away or use `git reset --soft head~2` to reset the last 2 commits    ||   ";opt-in stubbing strictness implemented in junit rules;"new api (for rationale see #769):```java//existing api:@rule public mockitorule mockito  mockitojunitrule()//proposed improvements:rule()strictness(strictnesslenient)rule()strictness(strictnesswarn)       // <-- is the defaultrule()strictness(strictnessstrict_stubs)  // <-- mockito 30 default```what ""strict stubbing"" means?- improved debuggability: the test fails early when code under test invokes stubbed method with different arguments- cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared- cleaner more dry tests (""dont repeat yourself""): if you use mockitoverifynomoreinteractions() you no longer need to explicitly verify stubbed invocations they are automatically verifiedfor background and motivation check out [szczepans article on linkedin](https://wwwlinkedincom/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber)";"  ";1;0;minor version bump and refactoring- signified an important change (minor version bump)- refactoring - i didnt want to touch the public api (mockcreationsettings) with this so i removed the unused import;
811;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;enable annotation engine as plugin;currently  annotationengine  can be overrriden with the _deprecated_  mockitoconfiguration   in order to be more consistent with the new way  i propose to get the  annotationengine  from the  pluginregistry .;;0;enable annotation engine as plugin;currently `annotationengine` can be overrriden with the _deprecated_ `mockitoconfiguration` in order to be more consistent with the new way i propose to get the `annotationengine` from the `pluginregistry`regarding backward compatible behavior if the `mockitoconfiguration` class exists and can be seen then mockito will select the engine of this configuration instead of the `plugins` one if `mockitoconfiguration` class dont exist then mockito wil chose the `plugins` onebonus i extended the classloader util to support some tests; ;;;;1;1;skip static final copyit could be bypassed by unsafe or other tricks at this moment this is probably enoughsigned-off-by: brice dutheil <bricedutheil@gmailcom>;
819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixes bug were previously verified invocations could not capture argu…;since mockito 2 / #380 captured arguments is not anymore done for already verified interactions.;;0;fixes bug were previously verified invocations could not capture argu…;"since mockito 2 / #380 captured arguments is not anymore done for already verified interactions```javaimethods mock  mock(imethodsclass)mockonearg(""first"")argumentcaptor<string> argument  argumentcaptorforclass(stringclass)verify(mock times(1))onearg(argumentcapture())assertthat(argumentgetallvalues())isequalto(1)// additional interactionsmockonearg(""second"")argument  argumentcaptorforclass(stringclass)verify(mock times(2))onearg(argumentcapture())assertthat(argumentgetallvalues())isequalto(2) // fail with mockito 2```the current behavior (mockito 21 - 233) of `numberedinvocationchecker` clears already verified interactions before verifying the remaining interactions so the new argument captor is not populated with previous values which is akward if the times value is different that the lit size"; ;;;;1;1;fixes bug were previously verified invocations could not capture argumentsthe code that is removed here doesnt affect any previous test not even tests to prove the issue of #380 / #379signed-off-by: brice dutheil <bricedutheil@gmailcom>;
821;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;820 returnsargat to handle returning vararg as arrays;attempt at fixing #820;;820.0;820 returnsargat to handle returning vararg as arrays;attempt at fixing #820basically it makes the returnsargumentat answer a bit more smart about varargs but im not satisfied with the fix yet; ;[varargs] unexpected behaviour of returnsargat(int);i stumble about a test that failed after refactoring an array parameter to an varargsthe following test succeed:```javainterface foo{        int getodd(int input)}@testpublic void test() throws exception {    when(foogetodd(any()))then(returnsargat(0))            int odd  mockgetodd(new int{135})    assertthat(odd)contains(135)}```now lets change the parameter _input_ to an varargs```javainterface foo{        int getodd(int input)}```the test fails now with:```orgmockitoexceptionsmisusingwrongtypeofreturnvalue: the argument of type int cannot be returned because the following method should return the type int -> foogetodd()```this is not expected cause the change is source and binary(?) compatible an varargs-parameter is still an array returnsargumentat interprets the vararg array items as real parameters in other words it tries to return an element type where the array type is requiredcan the behaviour of interpreting vararg elements like parameters be changed so an vararg is treated as an array? eg in mockito 3? there are several other cases were the current vararg handling leads to unexpected behaviour;i think your second example has a typo since there are no var args in the example || thanks  || good catch!by the way the mock reference is both foo and mock || while it is source and binary compatible vararg method are different than plain old array method reflection allows to distinguish that the issue is in `returnsargumentatreturnedtypeonsignature` where theres a special handling for varargs || im working on the fix (currently adding some unit tests) || this should be fixed by #821 ||;1;0;820 returnsargat to handle returning vararg as arrayssigned-off-by: brice dutheil <bricedutheil@gmailcom>;
823;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;only resolve instrumented method after validating that an instance is…;this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a  method  instance which requires using a  hashmap  which causes an infitite loop upon mocking the hash map type. 818.;;818.0;only resolve instrumented method after validating that an instance is…;this is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a `method` instance which requires using a `hashmap` which causes an infitite loop upon mocking the hash map type 818; ;stackoverflow occurs when mocking a hashmap with mockmaker;"as investigated in #752 mocking a `hashmap` halts with a stack overflow when using `mock-maker-inline`:```mockitomock(hashmapclass)exception in thread ""reference handler"" javalangstackoverflowerror	at javalangclassprivategetdeclaredmethods(classjava:2701)	at javalangclassgetdeclaredmethod(classjava:2128)	at javautilhashmapget(hashmapjava:556)	at sunreflectreflectionfiltermethods(reflectionjava:291)	at javalangclassprivategetdeclaredmethods(classjava:2701)	at javalangclassgetdeclaredmethod(classjava:2128)	at javautilhashmapget(hashmapjava:556)	at sunreflectreflectionfiltermethods(reflectionjava:291)	at javalangclassprivategetdeclaredmethods(classjava:2701)	at javalangclassgetdeclaredmethod(classjava:2128)	at javautilhashmapget(hashmapjava:556)	at sunreflectreflectionfiltermethods(reflectionjava:291)	at javalangclassprivategetdeclaredmethods(classjava:2701)	at javalangclassgetdeclaredmethod(classjava:2128)	at javautilhashmapget(hashmapjava:556)	at sunreflectreflectionfiltermethods(reflectionjava:291)```this does not occur when mocking `map`verified against mockito 2228";;1;0;only resolve instrumented method after validating that an instance is a mock;
826;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;introduce validable answers for early validation of stubbing;## overview;;820.0;introduce validable answers for early validation of stubbing;"## overviewcustom answers are now more robust - users can add add validation logic to the answer implementation it can validate the return type early during stubbing in test rather than fail late during execution of code under test mockito team uses this api behind the hood for all custom implementations of answer interface now advanced users can leverage this new api too!```javaclass mycustomanswer implements answer validableanswer { // <-- note extra ""validableanswer"" interface  public object answer(invocationonmock invocation) {    // answer implementation  }  public void validatefor(invocationonmock invocation) {    // throw mockitoexception if answer cannot be applied to given invocation  }}``` ## implementationwhile trying to 820 / #821 i noticed that `answersvalidator` knew too much about other answers to fix the design issue i propose the following design :* introduce `validableanswer` in public api which is a single method interface that doesnt extends `answer`* each answer that wants to be validated hence implement this interfacebenefit reduced visibility of some methods in these answers each new answer that want to be validated can just by implementing the new contractvalidating returned value of a mocks default answer had to be handled differently";"  ";[varargs] unexpected behaviour of returnsargat(int);i stumble about a test that failed after refactoring an array parameter to an varargsthe following test succeed:```javainterface foo{        int getodd(int input)}@testpublic void test() throws exception {    when(foogetodd(any()))then(returnsargat(0))            int odd  mockgetodd(new int{135})    assertthat(odd)contains(135)}```now lets change the parameter _input_ to an varargs```javainterface foo{        int getodd(int input)}```the test fails now with:```orgmockitoexceptionsmisusingwrongtypeofreturnvalue: the argument of type int cannot be returned because the following method should return the type int -> foogetodd()```this is not expected cause the change is source and binary(?) compatible an varargs-parameter is still an array returnsargumentat interprets the vararg array items as real parameters in other words it tries to return an element type where the array type is requiredcan the behaviour of interpreting vararg elements like parameters be changed so an vararg is treated as an array? eg in mockito 3? there are several other cases were the current vararg handling leads to unexpected behaviour;i think your second example has a typo since there are no var args in the example || thanks  || good catch!by the way the mock reference is both foo and mock || while it is source and binary compatible vararg method are different than plain old array method reflection allows to distinguish that the issue is in `returnsargumentatreturnedtypeonsignature` where theres a special handling for varargs || im working on the fix (currently adding some unit tests) || this should be fixed by #821 ||;1;0;renames methodinfo to invocationinfo;
827;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;test for verification listeners test can introduces bogus erro in other test cases.;the following test (org.mockitousage.debugging.verificationlistenercallbacktest#should_not_call_listener_when_verify_was_called_incorrectly) was causing non wanted exception in mockito;;0;test for verification listeners test can introduces bogus erro in other test cases;"the following test (orgmockitousagedebuggingverificationlistenercallbacktest#should_not_call_listener_when_verify_was_called_incorrectly) was causing non wanted exception in mockito```orgmockitousagemisusecleaninguppotentialstubbingtest > shouldresetongoingstubbingoninorder failed    orgmockitoexceptionsmisusingcannotstubvoidmethodwithreturnvalue:     onverification is a *void method* and it *cannot* be stubbed with a *return value*!    voids are usually stubbed with throwables:        dothrow(exception)when(mock)somevoidmethod()    ***    if youre unsure why youre getting above error read on    due to the nature of the syntax above problem might occur because:    1 the method you are trying to stub is *overloaded* make sure you are calling the right overloaded version    2 somewhere in your test you are stubbing *final methods* sorry mockito does not verify/stub final methods    3 a spy is stubbed using when(spyfoo())then() syntax it is safer to stub spies -        - with doreturn|throw() family of methods more in javadocs for mockitospy() method    4 mocking methods declared on non-public parent classes is not supported        at orgmockitointernalexceptionsreportercannotstubvoidmethodwithareturnvalue(reporterjava:448)        at orgmockitointernalstubbinganswersanswersvalidatorvalidatereturnvalue(answersvalidatorjava:72)        at orgmockitointernalstubbinganswersanswersvalidatorvalidate(answersvalidatorjava:29)        at orgmockitointernalstubbinginvocationcontainerimpladdanswer(invocationcontainerimpljava:63)        at orgmockitointernalstubbinginvocationcontainerimpladdanswer(invocationcontainerimpljava:49)        at orgmockitointernalstubbingongoingstubbingimplthenanswer(ongoingstubbingimpljava:28)        at orgmockitointernalstubbingbasestubbingthenreturn(basestubbingjava:16)        at orgmockitousagemisusecleaninguppotentialstubbingtestassertongoingstubbingisreset(cleaninguppotentialstubbingtestjava:50)        at orgmockitousagemisusecleaninguppotentialstubbingtestshouldresetongoingstubbingoninorder(cleaninguppotentialstubbingtestjava:36)orgmockitousagemisusecleaninguppotentialstubbingtest > shouldresetongoingstubbingonverify failed    orgmockitoexceptionsmisusingcannotstubvoidmethodwithreturnvalue:     onverification is a *void method* and it *cannot* be stubbed with a *return value*!    voids are usually stubbed with throwables:        dothrow(exception)when(mock)somevoidmethod()    ***    if youre unsure why youre getting above error read on    due to the nature of the syntax above problem might occur because:    1 the method you are trying to stub is *overloaded* make sure you are calling the right overloaded version    2 somewhere in your test you are stubbing *final methods* sorry mockito does not verify/stub final methods    3 a spy is stubbed using when(spyfoo())then() syntax it is safer to stub spies -        - with doreturn|throw() family of methods more in javadocs for mockitospy() method    4 mocking methods declared on non-public parent classes is not supported        at orgmockitointernalexceptionsreportercannotstubvoidmethodwithareturnvalue(reporterjava:448)        at orgmockitointernalstubbinganswersanswersvalidatorvalidatereturnvalue(answersvalidatorjava:72)        at orgmockitointernalstubbinganswersanswersvalidatorvalidate(answersvalidatorjava:29)        at orgmockitointernalstubbinginvocationcontainerimpladdanswer(invocationcontainerimpljava:63)        at orgmockitointernalstubbinginvocationcontainerimpladdanswer(invocationcontainerimpljava:49)        at orgmockitointernalstubbingongoingstubbingimplthenanswer(ongoingstubbingimpljava:28)        at orgmockitointernalstubbingbasestubbingthenreturn(basestubbingjava:16)        at orgmockitousagemisusecleaninguppotentialstubbingtestassertongoingstubbingisreset(cleaninguppotentialstubbingtestjava:50)        at orgmockitousagemisusecleaninguppotentialstubbingtestshouldresetongoingstubbingonverify(cleaninguppotentialstubbingtestjava:28)```the issue is that the mentionned test used a mock to create a listener for a test but forgot to remove it so on a next interaction with a mock the listener was called as such the last interaction is `void onverification` so the answer could not be validatedthe case is easy to reproduce :```javainterface foo {    string nonvoid(string param)    void dosomething(string param)}@testpublic void should_not_call_listener_when_verify_was_called_incorrectly() {    //when    foo foo  null    verificationlistener mocklistener  mock(verificationlistenerclass)    mockitoframework()addlistener(mocklistener)    try {        verify(foo)nonvoid("""")        fail(""exception expected"")    } catch (nullinsteadofmockexception expected) {        //then        verify(mocklistener never())onverification(any(verificationeventclass))    }    // mockitoframework()removelistener(mocklistener) // fix    // done in cleaninguppotentialstubbingtest    try {        when(null)thenreturn(""anything"") // throws instead cannotstubvoidmethodwithreturnvalue        assertionsfail(""expected"")    } catch (missingmethodinvocationexception e) {} }```given the conditions to reproduce the bug id say we can keep the code that way";;;;;1;1;quick fix for the verification listeners test where the stubbing in the listener causes an invocation mismatch in the next stub;
830;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;improves exception message in case a matcher is used for a primitive parameter;this should help for cases like #822;;822.0;improves exception message in case a matcher is used for a primitive parameter;this should help for cases like #822 npe can be raised by the jvm on the callsite of a matcher returning object like `any()`the thing is that the jvm does several thing like to allows a type to match a signature like `<t> t any()` type inference with java 8 cast and unboxing however `any()` can only return `null` so the jvm raises an npe on the cast opcode of course the problem isnt new but more possible due to java 8 flexibility thats why mockito had for a long time the primitivewhen mockito is used with the junit runner or the junit rule theres a `invaliduseofmatchersexception` raised **after** the npe with a message about misplaced matchers this exception is raised because the matchers were not consumed by the mock since the npe is raised first so this exception is correct and can help the neophyte to discover the primitive variant like `anyint()`;i love this change! the description of the pr is really good i immediately was able to understand the use case mockito is great because we never stop improving the ux - the exception messages and suchbig ;bogus npe if any() is used with primitive type arguments;"mockito: 230 java 8when mocking a method invocation if any() is used instead of anyint() for exampe in the when method call a bogus npe is thrown there is quite a lot of explanations to the root cause of that but it does not contain this hinti would expect either a compilation error or a more explanatory exceptioncode:  at xxxwtftesttestcasenpe(wtftestjava:34)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgmockitointernalrunnerssilentjunitrunnerrun(silentjunitrunnerjava:39)	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:39)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:103)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:51)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:237)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)you cannot use argument matchers outside of verification or stubbingexamples of correct usage of argument matchers:    when(mockget(anyint()))thenreturn(null)    dothrow(new runtimeexception())when(mock)somevoidmethod(anyobject())    verify(mock)somemethod(contains(""foo""))also this error might show up because you use argument matchers with methods that cannot be mockedfollowing methods *cannot* be stubbed/verified: final/private/equals()/hashcode()mocking methods declared on non-public parent classes is not supported```";"there is also some weirdness that the mockfoos value is set to null between the invocation of when() and foo() on line 33 || @axos88 this behaviour cant be avoided cause java doesnt allow return type overloads like `int any()` `t any()`    therefore mockito provides `any<primitve>()` methods   || **tldr**this cannot be avoided as @christianschwarz has just wrote thats one of corner area of java itself where cant really do something **long story**with the signature of `any()` `javac` thinks * that `any()` can return an `integer` > insert cast object to integer* that the `integer` can be unboxed > invoke `intvalue`however `any`* has return type `t` whose implicit upper bound is `object` > `integer` matches for `javac`* returns `null` reference > ok for `integer`the npe is raised on the callsite by code that wasnt explicitly written and we cant really do something here note the javadoc of `any()` do say to use the primitive variants :```for primitive types use {@link #anychar()} family``` || i understand but a note about this in the output of the exception about this possibility would be welcome:```you cannot use argument matchers outside of verification or stubbingexamples of correct usage of argument matchers:    when(mockget(anyint()))thenreturn(null)    dothrow(new runtimeexception())when(mock)somevoidmethod(anyobject())    verify(mock)somemethod(contains(""foo""))also this error might show up because you use argument matchers with methods that cannot be mockedfollowing methods *cannot* be stubbed/verified: final/private/equals()/hashcode()mocking methods declared on non-public parent classes is not supported``` || im not sure this is related what fails is a nullpointerexception that is raised by the jvm on the callsite of the matcherthe mockito exception message seems related to another issue and the exception type that have this message can only be `invaliduseofmatchersexception` || it seems like the npe has an invaliduseofmatchersexception as its cause || ah i see whats happening junit runner performs an additional check after a test and then report a matcher misuse because the matchers were not _consumed_ byt the mock the npe is raised firstindeed we can mention that in the messagethanks for insisting on this ! || closing this one since theres now the pr #830  || hi @bric3  i believe this issue is appearing again please see my below junit example:```public class mockitotest {    @test    public void testdoathing() {        final testthing thing  mockitomock(testthingclass)        mockitowhen(thingdoathing(mockitoany() mockitoany()))            thenreturn(""asd"")    }    public static class testthing {        public string doathing(string foo boolean second) {            return second ? foo + ""asd"" : foo        }    }}```when running this test i get the following output:```javalangnullpointerexception	at commytestmockitotesttestdoathing(mockitotestjava:12)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:47)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:44)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:271)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:70)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:50)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:238)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:63)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:236)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:53)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:229)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:309)	at orgjunitrunnerjunitcorerun(junitcorejava:160)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)```no mention of the above error or any real indication what is happening - i ended up using trial and error to determine what was going wrong || ";1;0;boyscout test improvement;
831;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;test clean up according to discussions for rememberinglisteners;according to issue @719 we wanted to clean up the tests for rememberinglisteners.;;825.0;test clean up according to discussions for rememberinglisteners;according to issue @719 we wanted to clean up the tests for rememberinglistenersthe tests should follow the same style and conventionsset up should not contain variables used by all the testswe previously had another pr for this in #825 that build was failing for some reason not obvious and had 1 merge commit that we wanted to remove in an attempt to rebase and reset the history github lost the connection to the remote fork instead of spending time investigating i just created a new pr;    @bric3 @timvdlippe sorry for this new pr with the same code previously we were discussing #825 in an attempt to fix the pr github lost the link and i couldnt reconnect it this pr is building and has only one commit message and no merge || looks good to me thanks for the improvement ||;#719 test clean up according to discussions for rememberinglisteners;according to issue @719 we wanted to clean up the tests for `rememberinglistener`sthe tests should follow the same style and conventionsset up should not contain variables used by all the tests;"    @bric3 ive inlinded `fooclassgetdeclaredmethod(""dosomething"" stringclass)`regarding putting the method `notifiedfor` into orgmockitoutilconditionsthe method is not same between `invocationlistenercallbacktest` and `verificationlistenercallbacktest` and they both use a different implementation of `rememberinglistener`i would like to wait for more test classes wanting to do the same thing and then move it else we need to move also the class and find new suitable names for the classesunless you have another idea to improve this? || i just tried the webview to resolve conflicts its ok but limited and it creates a commit named like `merge branch release/2x into verification-listeners-cleanup` id rather have more control on this || > regarding putting the method notifiedfor into orgmockitoutilconditionsthe method is not same between invocationlistenercallbacktest and verificationlistenercallbacktest and they both use a different implementation of rememberinglisteneri would like to wait for more test classes wanting to do the same thing and then move it else we need to move also the class and find new suitable names for the classesunless you have another idea to improve this?ok fair enough :) || ";1;0;"""#719 test clean up according to discussions for rememberinglisteners""";
839;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;838 : adds a matches(pattern);following discussion in #838 it is sensible to add a mockito matcher that can take a  pattern  as an argument.;;838.0;838 : adds a matches(pattern);"following discussion in #838 it is sensible to add a mockito matcher that can take a `pattern` as an argumentthe usage is the same as `matches(string)````javawhen(mockonearg(matches(patterncompile(""[a-z]+\\d\\d""))))thenreturn()```although it allows to build more complex regex especially with regular expression flags";@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right away || >@mockito/core since the pr is fairly in scope amd fairly straightforward limited ill merge it right awayabsolutelyupdating the public api needs review from other team mates but in this case its best to move fast its an overloaded method very natural complement to the existing one thanks @bric3! || yes exactly :) ||;feature request: argumentmatchersmatches(pattern regex);you ladies and gentlemen are geniuses by the wayargumentmatchersmatch( string regex ) exists but wouldnt it be slightly better if it were match( pattern regex )? (ie catering for multi-line strings etc)also devising a regex which distinctly does not match a given string is non-trivial  and yet not atypical of a mocking use case  hence i suggest you clever people take the heavy lifting away from grunts like me by offering argumentmatchersdoesnotmatch( pattern regex )i posed this question today on stack overflow [here](  ------**edit 1** by @bric3 : removed the issue guidelines**edit 2** by @bric3 : renamed the issue title previous title was `feature request: argumentmatchersdoesnotmatch( pattern regex )`;"as the question is answered in so you can negate matchers using `additionalmatchersnot()`i think i can close this issue || ok but this question highlights the fact that the online documentation and tutorials are not optional they are essential  and they are currently inadequate  people who are willing to learn shouldnt have to pose a question for such an obvious use case on so || hii closed the issue because it is about a feature request that is not valid since the feature is already present in a different form now documentation and tutorial is another thing`additionalmatchers` is mentionned on the first line of the [argumentmatchers javadoc]( the mockito javadoc gives plenty of code examples on the public api which is already more than most javadoc in almost every project im not saying it cant improved or we wont improve it it can and we will! on the matter at hand those matchers can be promoted a bit more to enhance discoverabilityregarding tutorials i believe it is the responsibility of respective blog authorsin the mean time pull requests are welcome and the wiki can be edited by any benevolent soul || also it seems i skipped the part on the `pattern` class reopening for the `matches(pattern)` matcher || oh good  no really!  the multi-line challenge has me foxed indeed  :) || the builds should propagate within an hour (note that badges or searchmavenorg may not be up to date) || hi brice thanks for doing this so quickly  i have upgraded my gradlebuild and got hold of your new build  but i am still having problems using ""not"" with this if you have a moment maybe you might look at my new edit at [so]( || it looks like an import issue either for `not` or `matches` ive tested it yesterday when i added the api || yes youre right: its an assertj confusion: eclipse imported notfilternot() automatically  apologies || ";1;0;838 : adds a matches(pattern);
842;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;added missing javadoc and few other tidy-ups;1. no api / no behavior changes.;;0;added missing javadoc and few other tidy-ups;1 no api / no behavior changes2 publicly visible changes:  - added missing javadoc and updated an existing one for mockitoexception and mockitoassertionerror classes3 remaining changes refactoring: - rename job for consistency - removed some unnecessary code - made the tests more stable; ;;;;1;1;documented the need to avoid static linking;
843;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;junit rule strictness can be tweaked per test method;see the design and rationale at #840;;840.0;junit rule strictness can be tweaked per test method;see the design and rationale at #840please review!;  tomorrow morning unless theres feedback thanks @timvdlippe for review! ||;tweak junit rule strictness at the method level;team i would really appreciate feedback about this enhancementthere is a feature request reported - a way to exempt from unnecessary stubbing at method level (#792) the feature request makes sense to me currently if the user wants to opt-out from junit rule or junit runner strictness he needs to do it at the scope of the entire class ideally we can opt-out from strictness at finer granularity level (method or even at mock level)inspired by @bric3 [idea]( id like to get your feedback about this api enhancement for strict junit rulesexample test class:```javapublic class mytest {    //mockito stubbing is strict in the entire test class    @rule public mockitorule mockito  mockitojunitrule()strictness(strictnessstrict_stubs)    @test public void lenient_mockito() throws throwable {        //making mockito lenient only for this test method        //below api already exist but it does not have any effect inside of the test method        mockitostrictness(strictnesslenient)        //rest of the test    }}```pros: - we already have strictness method in the mockitorule api so its not adding any new api - least surprise principle - users might expect this behavior to work but currently strictness method _creates_ new instance of the rule and _not_ change the state of the rulecons: - its slightly not intuitive that strictness method actually changes state (its not a setter);instead of a call to the rule (which i would expect to cause side-effects when i see the code) i think it is clearer to use an annotation on the method something like `@mockitostrictness(lenient)` || annotations are clearer and they are a good idea we discussed it in #792 @bric3 was not in favor of annotationscall to the rule is something we would offer in the meantime before we have annotations long term i think annotations are a way forwardim waiting for more feedback and im leaning to implement this new rule behavior regardless if we decide to do annotations or not :) || yes im not in favor of annotation but im not totally against either however annotation api is to be carefully designed as there is way less flexibility override argument types etc**pros*** i believe a programtic way offers more choice for users and framework developers including mockito> * least surprise principle - users might expect this behavior to work but currently strictness method creates new instance of the rule and not change the state of the rulethats maybe the biggest issue here to bypass this the code will need to have some way to define a global state in spseudo code :```java// formockitojunitrule()strictness(strictnessstrict_stubs)public mockitorule strictness(strictness strictness) {    return new junitrule(internalruleref logger strictness)}private junitrule(atomicreference<junitrule> internalref mockitologger logger strictness strictness) {    thisinternalruleset(new junitrule(logger strictness)) // existing constructor but should be another class ideally}public statement apply(statement base frameworkmethod method object target) {    return internalruleapply(base method target)}```**cons**> * its slightly not intuitive that strictness method actually changes state (its not a setter)nowadays people understand fluent api outside javabeans setters or getters i dont think thats really an issue there especially if theres code example in the javadoc || great feedback @bric3ill take a stab at making strictness() method working for us i should be able to use a single test listener inside a rule and make this listener mutable so that it can have different behavior between test runs || a solution could be that the rule also watches for annotations and calls the corresponding method that would require a follow-up pr of #843 wdyt? || >a solution could be that the rule also watches for annotations and calls the corresponding method that would require a follow-up pr of #843 wdyt?i like this idea a lot there are 2 main reasons i like it: - annotation looks nice and clean in test code - annotation would also work with junit runner (when we make it work with runner :) for the runner we cannot change its state programmatically because it is a static instance attached to the test class via @runwith annotation with junit rule the situation is different - we have an instance of a rule during test execution || theres also another option like : ```javarule  mockitojunitrule()strictness(strictnessstrict_stubs)// in some code blockrulehandler  rulehandler() // no argument  getterrulehandlerstrictness(stritnesslenient) // takes arg  modify behavior``` || thanks @bric3 for feedback! id rather stick to strictness() method instead of introducing handler() it feels the api is simpler and more intuitive to use ||  by #843  ||;1;0;updated the javadocs;
854;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;mockito junit runner supports strict stubbing;background:;;0;mockito junit runner supports strict stubbing;"background:- mockito ""strictness"" is explained in #769 - since 23x mockito junit rules already provide opt-in ""strict stubbing"" capability [see the javadoc]( change adds new opt-in ""strict stubbing"" support for mockito junit runner this behavior is tentatively planned to be the default in mockito v3 example usage:```java//note ""strictstubs"" inner class:@runwith(mockitojunitrunnerstrictstubsclass)public class exampletest {    // }      ```the behavior added by the strictstubs runner is documented in the [javadoc]( see also javadoc improvements in code changes for this pr the general direction of mockito ""strictness"" is documented in #769"; ;;;;1;1;updated version;
858;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;safeguard for mockitolistener api;reminds user if he forgets about  removelistener()  when working with [mockitolistener api](https://static.javadoc.io/org.mockito/mockito-core/2.5.0/org/mockito/mockitoframework.html#addlistener(org.mockito.listeners.mockitolistener)).;;0;safeguard for mockitolistener api;"reminds user if he forgets about ""removelistener()"" when working with [mockitolistener api]( added a safeguard that reminds users to clean up mockitolisteners via removelistener() method the implementation is very simple checking if the type of the listener is already added i found out about this problem when working on strict stubbing support without junit runner- this change makes mockitolistener api safer its easy to leak state which we have encountered in our own test suite- if we encounter legit use cases for adding the same listener type we can remove the safeguard or updated itthe pr also contains a couple of refactorings and tidy-ups i hope its ok";what if two libraries are used which add the same listener for their respective usecase? i dont think we can make this change eventually someone will hit this ||  ;;;;1;1;updated documentation- based on feedback from tim i updated the documentation and exception message- updated @since tag;
861;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;backport  release/2.x  changes to master (20161231) + fix for #860;backport  release/2.x  changes to master + the fix for #860.;;860.0;backport release/2x changes to master (20161231) + fix for #860;backport release/2x changes to master + the fix for #860;reported also #862 for broken inlinebytebuddymockmakertest test with java 9 ||   861   its green anyone willing to approve/provide further feedback? || lgtm! ||;jacoco 078 breaks tests for the new plugin mechanism;"jacoco 078 breaks the tests for the new plugin mechanism (#811) with:```:testorgmockitoutilclassloaderstest > cannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded failed    javalangassertionerror:     expecting a throwable with cause being an instance of:     <javalangnoclassdeffounderror>    but was an instance of:     <javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$2 with modifiers ""private static transient"">        at orgmockitoutilclassloaderstestcannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded(classloaderstestjava:324)orgmockitoutilclassloaderstest > can_run_in_given_classloader failed    javalangillegalstateexception: given task could not be loaded properly in the given classloader orgmockitoutilclassloaderstest$1@46dcdf84 error javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""        caused by:        javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""            caused by:            javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""orgmockitointernalconfigurationglobalconfigurationtest > returns_mockito_annotation_engine_of_plugins_if_no_mockitoconfiguration failed    javalangillegalstateexception: given task could not be loaded properly in the given classloader orgmockitointernalconfigurationglobalconfigurationtest$1@5adb485 error javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""        caused by:        javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""            caused by:            javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""1701 tests completed 3 failed 42 skipped:test failed```the corresponding travis build: https://travis-ciorg/mockito/mockito/jobs/187043982#l431";@bric3 can you identify the minimal scenario that reproduce this issue to be able to report it to the jacoco team? ||;1;0;862] disable bb test broken with java 9due to a lack of the new asm versionthe umbrella issue to reenable disabled tests: #863;
864;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;updated to byte buddy 1.6.0;updated byte buddy  several performance and api improvements. also with much better android support.;;0;updated to byte buddy 160;updated byte buddy several performance and api improvements also with much better android support; ;;;;1;1;updated to byte buddy 160;
865;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new strict stubbing api - mockitosession;see proposed design at #857;;384.0;new strict stubbing api - mockitosession;see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking;"  ";junit rule logs warnings about unsued / misused stubs;"### whywhen test fails the failure might be caused by misused stubs hence it might be worth to log out debugging information to the system out (eg misused stubs unused stubs) for more details see documentation for [mockitohint]( plan-  document 2x change-  tweak the warning message-  add behavior to the runner-  add silent runner-  add silent setting to the rule (or warnings level for all / exception only / none)-  deprecate/remove console spamming runner### implthe junit rule or the runner will potentially include following info in the output (somehow):  wondering if ""mockitovalidatemockitousage()"" should automatically print warnings we could provide boolean parameter to control printing of the warnings";"on it || i like the feature! what do you think about a `rule()strict()` that doesnt emit logs but fails asap?a note to the api:- how do we prevent misuse like -> `rule()strict()strict()` ? what about `rule(log_warnings)` aka `rule()` `rule(silent)` `rule(fail_fast)` || christian very cool ideas!!! im not sure ill have time for it before 20 however i want the new default behavior in rule / runner in 20 so that users see what it is doing then we can grow and add strict mode || @szczepiq: i like this feature very much also that the `mockitojunitrunner` fails by default is good i think a note in the javadoc of `unnecessarystubbingexception` to use `mockitojunitrunnersilent` would be helpfulwe often have quite complex test fixtures and its cumbersome to switch absolutely each and every stub on or off some methods simply have to be there its also not necessary to verify if theyve been invoked so it would be great to be able to disable it for some stubs but leave it on for others || @t1 that seems like a reasonable idea want to make a pr for that? || good feedback i think that mockitohint class should also mention that it is possible to silence the new mechanism || #609 || the [mockitohint]( documentation seems to indicate that this will give you warnings about mismatched arguments when using the mockitojunitrunner  however from my experience this doesnt seem to work with mockito 21heres the source im trying:``` javafoo foo  mock(fooclass)when(foobar(""baz""))thenreturn(""bar"")foobar(""baz"")foobar(""test"") // expected to get a warning here```is there something else i need to do to enable this functionality? || thank you for feedback!> is there something else i need to do to enable this functionality?this is how they were implemented runner should also report mismatches because it helps with debugging the reason it does not do it today is because i wanted to limit the noisewe will fix this issue also we will consider always printing warning when stub args mismatch even if one does not use runner / ruledo you want to open a separate ticket to track this improvement?thanks for reporting! || ive opened #725 to track this || came across this after running into this in my test :```[mockitohint] mytestchecksomething (see javadoc for mockitohint):[mockitohint] 1 unused -> at mytesttest1(mytestjava:584)```it is complaining about this (line 584):```   when(mockobjectgetpeerhost())thenreturn(""peer-host-from-mock"")```now my issue is this: this particular method `getpeerhost()` is indeed not called when the code works as expected eg something like this:```   if (newmethod()) {             string peerhost  mockobjectgetpeerhost()       // use peerhost in further processing         }````newmethod()` is the new code being added and should correctly return `false` however if there is a bug in `newmethod()` and it returns `true` then i want `getpeerhost()` to return some value which will cause a failure that i can detect so this requires me to mock a method even if it is not called in normal processing and there is no bug in the code i think that should not generate a warning has this been addressed? || do i need to open a new issue as i cannot reopen this? || > do i need to open a new issue as i cannot reopen this?yes please> has this been addressed?yes for example you can use ```lenient()when()``` stubbing to avoid reporting an unused stubbing however in your test case i would simply write ```verify(mockobject never())getpeerhost()```hope that helps! || > yes for example you can use `lenient()when()` stubbing to avoid reporting an unused stubbing thanks for the `lenient` tip - that helps> however in your test case i would simply write `verify(mockobject never())getpeerhost()`> thats more work and more white box testing than i want lets say this is for testing the ssl logic where peerhost (of a connection) is matched (or not matched) against ""subject-name"" in a cert under various conditions but i have common setup/initialization where i ""mock"" the peerhost of the connection in one of the conditions the host-name match is suppressed (ie `newmathod()` returns `false`) but because of the common setup code i get the unused warning from `mockitohint` for that test || my recommendation is to use lenient() + strict stubbing for this use caseif you feel we should still discuss the use case ``verify(never())`` vs ``when()thenthrow()`` then please open a separate tickethope that helps and thank you for feedback! || ";1;0;improved assertion messagei noticed this test failed on ci i cannot reproduce it locally;
865;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new strict stubbing api - mockitosession;see proposed design at #857;;857.0;new strict stubbing api - mockitosession;see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking;"  ";new strict mocking api - mockitosession;### background- mockito strictness (improved debuggability cleaner tests) is described in [a blog post]( and in issue #769- strict stubbing is already supported with junit rules - #807- open pr for supporting strict stubbing with junit runners - #854- this ticket intends to discuss the goals and implementation of strict stubbing without junit rules / runner### initial design```javapublic class sampletest {       @mock imethods mock        //initialize mocks similar to mockitoannotationsinitmocks(this) also configures strictness    mockitosession mockito  mockitomockitosession()initmocks(this)strictness(strictnessstrict_stubs)startmocking()    @after public void after() {        //after the test has completed we detect unused stubs and validate mockito usage        mockitofinishmocking()    }    //start and finish mocking invocations can be hidden in a common test base class    //or abstracted out in unit test framework specific way (custom rule etc)    @test public void some_test() {        //    }}    ```### alternative new public api methods(no longer considered since the feature is merged)```java//1mockitomocking mockito  mockitostartmocking(this strictnessstrict_stubs)mockitofinishmocking()//2mockitosession mockito  mockitomockitosession()initmocks(this)strictness(strictnessstrict_stubs)startmocking()mockitofinishmocking()//3mockitosession mockito  mockitosessionbuildermockitosession()testclassinstance(this)strictness(strictnessstrict_stubs)start()mockitostop()```### discussion- other ideas to meet the goal (better debuggability / cleaner tests without junit)- good naming / api for the feature- consistency with existing support for strictness with runner and the rulewe would love to hear your feedback!;heres my opinion :* regarding alternative 1/2/3 i prefer the api with an actual variable using static methods requires a hidden thread local state while its ok for stubbing i think this could be bad design choice for the mockiting session also without `mockitosession` variable its hard to interact with and always requires some static method* not in favor of option 1 as it kinda dismiss the builder style api and its probably harder to evolve such api in a non breaking way* not in favor of option 3 regarding the `testclassinstance` as it does not explain what it does with the test class instance while `initmocks` suggests the behavior behind this* i dont mind having the static factory method on either `mockitosession` or `mockito` both are good a `mockito` start point would probably be more discoverable though and will get along other lifecycle mockito methods like `reset` `validateusage` etc while `mockitosession` could be an opportunity to have a more focused api || @bric3 great feedback!!!i summarized my pov in ( alternative 1/2/3 i prefer the api with an actual variableall options are using variable i removed it for clarity (but it became less clear :) i will update the ticket>i dont mind having the static factory method on either mockitosession or mockito both are good a mockito start point would probably be more discoverable though and will get along other lifecycle mockito methods like reset validateusage etc while mockitosession could be an opportunity to have a more focused apiyes both approaches have pros and cons lets go ahead with mockitomockitosession() at this time || > all options are using variable i removed it for clarity (but it became less clear :) i will update the ticketok > yes both approaches have pros and cons lets go ahead with mockitomockitosession() at this timethats fine by me :) || closed via #865 ||;1;0;improved assertion messagei noticed this test failed on ci i cannot reproduce it locally;
865;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;new strict stubbing api - mockitosession;see proposed design at #857;;898.0;new strict stubbing api - mockitosession;see proposed design at #857the code is reviewable especially new public api please give feedback! more work is pendingcurrent status:-   address @bric3 feedback  -  getter  -  javadoc-  review documentation for consistency  -  mockitosession()  -  mockitosessionbuilder  -  strictness  -  mockitohint  -  potentialstubbingproblem  -  unnecessarystubbingexception  - [x] mockitojunitrunner and subclasses  - [x] mockitosession  - [x] mockitorule- [x] add / update mentions in the main mockito class- [x] add validate mockito usage (should be very easy)- [x] try making rules/runner use the session they already reuse the code they just dont use the api directly created #898 to track this work- [x] address @timvdlippe feedback- [x] create concurrent test (multiple sessions active in different threads)- [x] (non-code change not blocking merge) github tickets linked from source code should be better documented #769 #384 alternatively create ticket for tracking;"  ";design mockitosession api improvements for unit test frameworks;"it is desired that junit rule / runner uses mockitosession api (#865) so that they dogfood our public api in order to do that we need to do more design workmockito session api (#865) is geared towards using it in setup and tear down methods of the unit test framework in tear down method the user does not have access to the exception (test failure) in junit rule we do have access to the exception and we can leverage it for better user experience we can prevent dual failure when validating mockito usage fails on top of the actual test failure dual failure could be confusing to the user when mockito session api is used we cannot really avoid dual failure dual failure is relatively minor problem the test failure is reported by junit first before any potential framework validation problemjunit runner is even more interesting unlike the rule the runner has access to extra test lifecycle events like ""before all tests"" and ""after all tests""this ticket is a placeholder for design work on growing mockitosession api so that it can be used by runner and the rule while growing mockitosession api we can potentially expose mockitotestlistener all that work has lower priority than getting the mockitosession api released i suggest we even wait for users feedback before we start growing mockitosession api";this was  in #865 ||;1;0;improved assertion messagei noticed this test failed on ci i cannot reproduce it locally;
867;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;866 should not throw npe  when custom exception fillinstacktrace returns null;866.;;866.0;866 should not throw npe when custom exception fillinstacktrace returns null;866;@wuwen5 can you rebase this commit on the latest `release/2x`also thanks for the contribution || the build is failingthe reason is `please export gh_token env variable first expression: javalangsystemenv[it] values: it  gh_token`@timvdlippe that sound familiar however i believe this was  a couple of weeks ago ||;when custom exception fillinstacktrace() returns null exception mock cannot work properly;```javapublic class customexception extends exception {    public customexception() {        super()    }    @override    public exception fillinstacktrace() {        return null    }}```testcase like this```java when(demoprocess())thenthrow(new customexception())// test code``````javalangnullpointerexception	at orgmockitointernalexceptionsstacktraceconditionalstacktracefilterfilter(conditionalstacktracefilterjava:23)	at orgmockitointernalstubbinganswersthrowsexceptionanswer(throwsexceptionjava:32)	at orgmockitointernalstubbingstubbedinvocationmatcheranswer(stubbedinvocationmatcherjava:35)	at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:95)```;this is a bug in the user code yet mockito should handle that gracefullythanks for reporting ||;1;0;866 should not throw npe when custom exception fillinstacktrace() return null;
868;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;860  jacaco synthetic fields are not anymore final in 0.7.8;860;;860.0;860 jacaco synthetic fields are not anymore final in 078;860 this internal assumed jacoco fields will always be `static final` obviously not jacoco 078 changed that the simple fix was to make the source field _accessible_ instead of skipping this fieldhence removing the test exclusion;;jacoco 078 breaks tests for the new plugin mechanism;"jacoco 078 breaks the tests for the new plugin mechanism (#811) with:```:testorgmockitoutilclassloaderstest > cannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded failed    javalangassertionerror:     expecting a throwable with cause being an instance of:     <javalangnoclassdeffounderror>    but was an instance of:     <javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$2 with modifiers ""private static transient"">        at orgmockitoutilclassloaderstestcannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded(classloaderstestjava:324)orgmockitoutilclassloaderstest > can_run_in_given_classloader failed    javalangillegalstateexception: given task could not be loaded properly in the given classloader orgmockitoutilclassloaderstest$1@46dcdf84 error javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""        caused by:        javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""            caused by:            javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitoutilclassloaderstest$1 with modifiers ""private static transient""orgmockitointernalconfigurationglobalconfigurationtest > returns_mockito_annotation_engine_of_plugins_if_no_mockitoconfiguration failed    javalangillegalstateexception: given task could not be loaded properly in the given classloader orgmockitointernalconfigurationglobalconfigurationtest$1@5adb485 error javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""        caused by:        javalangillegalstateexception: javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""            caused by:            javalangillegalaccessexception: class orgmockitoutilclassloaders$classloaderexecutor can not access a member of class orgmockitointernalconfigurationglobalconfigurationtest$1 with modifiers ""private static transient""1701 tests completed 3 failed 42 skipped:test failed```the corresponding travis build: https://travis-ciorg/mockito/mockito/jobs/187043982#l431";@bric3 can you identify the minimal scenario that reproduce this issue to be able to report it to the jacoco team? ||;1;0;860 jacaco synthetic fields are not anymore final in 078;
870;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;remove redundant defaultanswer(returns_defaults);withsettings()  invokes  defaultanswer(returns_defaults)  as follows:;;0;remove redundant defaultanswer(returns_defaults);`withsettings()` invokes `defaultanswer(returns_defaults)` as follows:```    public static mocksettings withsettings() {        return new mocksettingsimpl()defaultanswer(returns_defaults)    }```so invoking it again is redundantthis pr simply removes the redundant invocation;@izeye please verify items on the checklist ) || @bric3 i checked them all 😄  || by the way @izeye if they were not checked and the issue messaage was not removed at firstsomething is obviously wrong with the template as a lot of people just dont fill or ignore the messagewhy didnt you do it at first ? how can we improve the issue / pr template ?  || also the build is failing due to #871  your code is fine || @bric3 sorry i noticed them at first but i was thinking its okay with this trivial change without them and they looked like quite burden but after read carefully they dont much   || no problem too many people ignore the text so theres definitely something wrong in the message or burden ||;;;;1;1;remove redundant defaultanswer(returns_defaults)`withsettings()` invokes `defaultanswer(returns_defaults)` as follows:```    public static mocksettings withsettings() {        return new mocksettingsimpl()defaultanswer(returns_defaults)    }```so invoking it again is redundantthis commit simply removes the redundant invocation;
872;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;prepare android library for publication and bump version to 2.6.0;references first step of #848;;0;prepare android library for publication and bump version to 260;references first step of #848; ;;;;1;1;merge branch release/2x into android-release-notes;
875;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;1;update byte buddy and enable injecting loading strategy for android;this enables byte buddy s new injection strategy for android which loads types within a target class loader instead of creating a new one. also  this updates byte buddy with a few bug fixes.;;0;update byte buddy and enable injecting loading strategy for android;this enables byte buddys new injection strategy for android which loads types within a target class loader instead of creating a new one also this updates byte buddy with a few bug fixes; ;;;;1;1;update byte buddy and enable injecting loading strategy for android;
880;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;879: argumentmatchers javadoc grammar improvement;fixed grammar issue in  argumentmatchers :;;879.0;879: argumentmatchers javadoc grammar improvement; grammar issue in `argumentmatchers`:> this implementation is due static type safety imposed by java compilershould be:> this implementation is due to static type safety imposed by java compilerthis pr fixes issue #879;  880   ;grammar issue in argumentmatchers javadoc;[`argumentmatchers` javadoc]( states that:> this implementation is due static type safety imposed by java compiler theres a word missing there it should read:> this implementation is due **to** static type safety imposed by java compiler version info:- first noticed this on 255- confirmed it still existed in 256 257 and 261- probably also existed in previous versions;@timvdlippe should this issue be closed now that the pr is merged or should this fix be backported to the 2x branch too? || @mureinik oh right it was to the wrong branch 😭 thats my mistake i will backport it manually ||;1;0;" ##879: argumentmatchers grammar fiximproved the grammar in argumentmatchers - ""due"" should be followed by a""to"" but isnt";
881;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed #879: argumentmatchers grammar fix;cherry-pick pr #880 to the 2.x branch;;879.0; #879: argumentmatchers grammar fix;cherry-pick pr #880 to the 2x branchthis pr should  #879 on this branch too;;grammar issue in argumentmatchers javadoc;[`argumentmatchers` javadoc]( states that:> this implementation is due static type safety imposed by java compiler theres a word missing there it should read:> this implementation is due **to** static type safety imposed by java compiler version info:- first noticed this on 255- confirmed it still existed in 256 257 and 261- probably also existed in previous versions;@timvdlippe should this issue be closed now that the pr is merged or should this fix be backported to the 2x branch too? || @mureinik oh right it was to the wrong branch 😭 thats my mistake i will backport it manually ||;1;0;" ##879: argumentmatchers grammar fiximproved the grammar in argumentmatchers - ""due"" should be followed by a""to"" but isnt";
885;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;spy annotation reports better error message if instance creation is impossible;this simple piece of code prevents the  spyannotationengine  to try create a spy instance for a some inner private class with different set of modifiers.;;878.0;spy annotation reports better error message if instance creation is impossible;this simple piece of code prevents the `spyannotationengine` to try create a spy instance for a some inner private class with different set of modifierswhile preventing execution it reports slightly better error messages before some time the cause was `null`  this should 878; ;@spy dosnt report the correct error when it cant instantiate abstract class;the annotation engine doesnt inform the user correctly when the spying an inner `private static abstract class````orgmockitoexceptionsbasemockitoexception: unable to initialize @spy annotated field anull	at orgmockitointernalconfigurationspyannotationengineprocess(spyannotationenginejava:70)	at orgmockitointernalconfigurationinjectingannotationengineprocessindependentannotations(injectingannotationenginejava:59)	at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:41)```indeed when the class is private javac still generates a synthetic 1-arg constructor taking the enclosing classthat should be easy to improve as the `spyannotationengine` just needs to report an error message for this case;;1;0;spy annotation engine internal refactoringsigned-off-by: brice dutheil <bricedutheil@gmailcom>;
891;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update to byte buddy 1.6.4: fixes bridge method resolution for generic types;874.;;874.0;update to byte buddy 164: fixes bridge method resolution for generic types;874;;overridden abstract methods using generics are not longer called for partial mock (working with mockito 11019);"hiwe migrated to mockito 2x not so long ago and we came across a test that used to works back in mockito 1 (11019) and no longer works with the latest 2x version (256)here is the sscce to replicate the issue:```package comsomecompanyimport static orgjunitassert*import static orgmockitomockito*import javaioioexceptionimport javalangreflectinvocationtargetexceptionimport javaxswingjbuttonimport orgjunittestpublic class mockito2issue{	public abstract class someabstractclass<t>	{		protected abstract string getrealvalue(t value)		public string getvalue(t value)		{			return getrealvalue(value)		}	}	public class someconcreteclass<t extends javaawtcomponent> extends someabstractclass<t>	{		@override		protected string getrealvalue(t value)		{			return ""realvalue""		}	}	@test	public void testbug() throws ioexception instantiationexception illegalaccessexception invocationtargetexception	{		someconcreteclass<javaawtcomponent> testbug  spy(new someconcreteclass<javaawtcomponent>())		assertequals(""realvalue"" testbuggetvalue(new jbutton()))	}}```**before (11019):**used to works**after (256)**```javalangassertionerror: expected:<realvalue> but was:<null>	at orgjunitassertfail(assertjava:91)	at orgjunitassertfailnotequals(assertjava:645)	at orgjunitassertassertequals(assertjava:126)	at orgjunitassertassertequals(assertjava:145)	at comsomecompanymockito2issuetestbug(mockito2issuejava:43)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:44)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:15)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:41)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:20)	at orgjunitrunnersblockjunit4classrunnerrunnotignored(blockjunit4classrunnerjava:79)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:71)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:49)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:193)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:52)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:191)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:42)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:184)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:236)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:459)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:678)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:382)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:192)```we performed a few side tests and here are the results:- if we change the method `getrealvalue` in class `someabstractclass` to be non-abstract but rather throw an exception the test pass:```		protected string getrealvalue(t value)		{			throw new unsupportedoperationexception()		}```- if we no longer use generic on the method (eg using object rather than t) the test passcan you take a look at this?environment details:component | version--------- | ------os | ubuntu 1610java | oracle java(tm) se runtime environment (build 180_101-b13)eclipse | neon2junit | 482mockito | 11019 (before) 256 (after)";this is probably a regression after adopting byte-buddy @raphw did you encounter such issues with byte-buddy? || it is indeed a problem in byte buddy when processing raw types (mockito extends the generic type without implementing the type variable) in the method graph compiler i already added a test case to byte buddy and i will try to fix the problem some time next weeki do now understand the problem mockito extends `someconcreteclass` as a raw type as it does not define any type variables by this any type is considered as raw in alignment with the java specification therefore `getrealvalue(object)` and `getrealvalue(component)` are not merged in the graph and the attempt to invoke `getrealvalue(object)` results in returning `null` via the default answer as it is no longer considered a bridgethis is actually a bit tricky but i will think of something || tracked in:  || thanks @domtoupin for the sscce !thanks @raphw for the quick tracking of the issue ||;1;0;update to byte buddy 164: fixes bridge method resolution for generic types;
893;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add detection for android environments and give warnings if used incorrectly. corrected documentation.;the documentation gave an incorrect configuration example. also  warnings were added for using android on a non-android environment.;;0;add detection for android environments and give warnings if used incorrectly corrected documentation;the documentation gave an incorrect configuration example also warnings were added for using android on a non-android environment; merging 893 ;;;;1;1;add detection for android environments and give warnings if used incorrectly corrected documentation;
896;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;clarify documentation for consecutive stubbing;895;;895.0;clarify documentation for consecutive stubbing;895as of now the documentation does not clarify the difference of behaviour between chaining multiple thenreturn() statements and using multiple when/thenreturn statements when someone attempts to perform consecutive stubbingi added a warning/clarification in the documentation with a corresponding example so that its more clear (especially for new users of mockito); ;documentation missing clarification for consecutive stubbing;the [documentation]( for consecutive stubbing is missing a clarificationwhen multiple when/thenreturn statements are being used instead of chaining thenreturn() statements each stubbing overrides the existing one;i am going to submit a pull request adding an additional clarification with code example in the docs ||;1;0;rephrased documentation clarification;
897;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;cleansempty value returns empty arrays;876 and do a bit more cleanup;;0;cleansempty value returns empty arrays;876 and do a bit more cleanup* moves returning empty array from `returnsmoreemtpyvalues` to `returnsemptyvalues`* cleans up javadoc* removes reflection for java8 types (implementation and tests)best to review commit by commit;"thats weird theres a failure in this test orgmockitointernalcreationbytebuddytypecachingmockbytecodegeneratortestwhich has nothing to do with my change other jdk 8 builds are fine it looks like a race condition```$ java -xmx32m -versionjava version ""180_111""java(tm) se runtime environment (build 180_111-b14)java hotspot(tm) 64-bit server vm (build 25111-b14 mixed mode)``````orgconcurrentmockitothreadsrunalltestshalfmanualtest > shouldruninmultiplethreads failed    junitframeworkassertionfailederror: run in multiple thread failed for tests expected:<> but was:<[class orgmockitointernalcreationbytebuddytypecachingmockbytecodegeneratortest]>        at junitframeworkassertfail(assertjava:57)        at junitframeworkassertfailnotequals(assertjava:329)        at junitframeworkassertassertequals(assertjava:78)        at junitframeworktestcaseassertequals(testcasejava:244)        at orgconcurrentmockitothreadsrunalltestshalfmanualtestshouldruninmultiplethreads(threadsrunalltestshalfmanualtestjava:147)1752 tests completed 1 failed 58 skipped:test failed``` ||   897   ";;;;1;1;cleans up returnsmoreemptyvalues;
902;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;fix typecache dead lock;i could trace the problem to more eager resolution of types in java u31 upon loading where concurrent mock creation with locking on the class level causes a dead lock. this can happen in other vm implementations but can be solved with a more granular lock on our type cache.;;0;fix typecache dead lock;i could trace the problem to more eager resolution of types in java u31 upon loading where concurrent mock creation with locking on the class level causes a dead lock this can happen in other vm implementations but can be solved with a more granular lock on our type cachethis fixes https://githubcom/mockito/mockito/issues/892;@raphw could that be the issue that i saw in #897 see travis log :  || no that is a flaky test as we rely on triggering a garbage collection which is something we do not controll on a vm even though there is a good chance to we should ideally rerun this test multiple times upon a failure@timvdlippe i  the accidental pre-commit || ok agreed ||;;;;1;1;use less granular lock on class creation to avoid dead-lock on recursive types;
905;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;814 : a elements were missing the name attribute;meaningful links probably never worked as expected.;;814.0;814 : a elements were missing the name attribute;meaningful links probably never worked as expectedthe `a` elements were missing the `name` attribute so the browser couldnt find the matching part of the documentfor reference : [598 navigating to a fragment identifier]( for html documents (and the text/html mime type) the following processing model must be followed to determine what the indicated part of the document is> > 1 parse the url and let fragid be the <fragment> component of the url> 2 if fragid is the empty string then the indicated part of the document is the top of the document> 3 if there is an element in the dom that has an id exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 4 if there is an a element in the dom that has a name attribute whose value is exactly equal to fragid then the first such element in tree order is the indicated part of the document stop the algorithm here> 5 otherwise there is no indicated part of the document;i am merging this one as this is very simple || hm dont want a quick review? i try to never self-merge as it got me numerous times already || the change is damn simple (its just adding `name` attribute)  with a simple regexp ||  ;javadoc links in main mockito doc are not linkable;the links to line items in the main [mockito documentation]( are not linkable eg i cannot create a link to item no 40 in the list;i dont see what you mean i have no problem for that : *   || at first it seems to be working but the actual issue is that the first link of @bric3 does work but the second does not the problem is that the headers have the second link so they must be updated to use numbers instead ||;1;0;814 : a elements were missing the name attributesigned-off-by: brice dutheil <bricedutheil@gmailcom>;
907;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;unified all number of invocations checker in numberofinvocationschecker;426;;426.0;unified all number of invocations checker in numberofinvocationschecker;426this pr unifies the functionality of `nongreedynumberofinvocationschecker` `numberofinvocationscheckerinorder `and `numberofinvocationschecker `in static methods of the type `numberofinvocationschecker` this saves ~50 lines of code and increases readability on the call sides; ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;unified all number of invocations checker in static utilitynumberofinvocationschecker;
908;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;simplified the creation of argumentsaredifferent-exceptions.;relates to #426;;426.0;simplified the creation of argumentsaredifferent-exceptions;relates to #426 this pr simplifies the creation of argumentsaredifferent-exceptions saving 2 classes and ~40 lines of code;   no coverage uploaded for pull request base (`release/2x@1cbc7f8`) [click here to learn what that means]( ` ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;simplified the creation of argumentsaredifferent-exceptions;
914;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;refactored removefirstline to a static utility class.;relates to #426;;426.0;refactored removefirstline to a static utility class;relates to #426 refactored `removefirstline` to a static utility classi would like to unifiy `removefirstline` `decamelizer` and `stringjoiner` to a new type `stringutil` they all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes any thoughts?; ;refactor instance based utility classes to static utility classes;the internal implementation of mockito contains numerous helper classed that serve as a container for useful methods by its nature these classes dont have a state currently some them are instance based in other word you need to create the utility class to call a helper method this not only pollutes the heap but also the code cause instance methods cant be imported statically here is an example:```javahelper helper  new helper()if (helperisinputvalid(input)){   }```vs static import of helperisinputvalid```javaif (isinputvalid(input)){   }```the aim of this ticket is to identify canidates that can be refactored to static utility classes if you like to refactoring and mockito feel free to send a pr and reference this issuerefactoring canidates:-  `accessibilitychanger`-  `beanpropertysetter`-  `conditionalstacktracefilter`-  `fieldcopier`-  `fieldreader`-  `genericmaster` should be integrate into `generictyperesolver`-  `junitfailurehacker` can be removed when the deprecated `verbosemockitojunitrunner` is removed-  `lenientcopytool`-  `matcherbinder`-  `mockitocore` should better be a singleton-  `mockcreationvalidator`- [ ] `removefirstline`-  #591 `argumentmatchingtool`-  #515 `allinvocationsfinder`-  #502 `argumentscomparator`-  #540 `arrayutils`-  #490 `atleastxnumberofinvocationschecker`-  #490 `atleastxnumberofinvocationsinorderchecker`- [ ] #912 `constructors`-  #427 `fieldsetter`-  #908 `friendlyexceptionmaker`-  #431 `handyreturnvalues` - [x] #432 `invocationmarker`- [x] #462 `invocationsfinder`- [x] #908 `junitdetecter`- [x] #490 `missinginvocationchecker`- [x] #490 `missinginvocationinorderchecker`- [x] #514 `mockutil`- [x] #503 `nongreedynumberofinvocationsinorderchecker`- [x] #907 `numberofinvocationsinorderchecker`- [x] #907 `numberofinvocationschecker`- [x] #547 `objectmethodsguru`- [x] #427 `reporter`- [x] #535 `supertypeslastsorter`- [x] #501 `testmethodfinder`- [x] #515 `verifiableinvocationsfinder`;"@raphw thanks for merging the pr that fast!  would you mind reopening this ticket? there are more classes that can be refactored that way i would like to extend the list || big :+1: for me btw but please keep the pull requests managable and as small as possible preferably refactoring 1 method at a time that way it is a lot easier to review || i agree there is nothing wrong with multiple prs the quick merge is a reaction to an easy overview (and being stuck at an ukrainian airport without access to the eurocup) || there are still two unit tests failing could you have a look @christianschwarz - i just had a quick look and there are two unit tests failing which seems related to the way you refactored the previous stubbing of the `reporter`i should have checked more thoroughly before merging hopefully you can fix the problem soon alternatively i will just rollback the one commit (the first one is good) and we can reapply the patch once you  the two unit tests thank you really this was great clean-up || i fixed the one test error i push it tonightps: i also fixed a bug in the stack trace cleaner not a biggy but please do not `@ignore` tests especially in big commits it is easy to miss that single annotation || @raphw which test(s) is/are failing? i will fix it asap! too bad that some test fail on a regulare base is it possible to ignore them in the ide only? || you can see the build output here:  advise you to run the tests with `/gradlew build` this should work || @timvdlippe know what you mean! the next prs include only one refactored class at a time || i have it all fixed on local but i did not have access to wifi without 22 blocked will commit soon || @raphw can you please reopen this issue  || sorry github automatically closes issues that reference a pr || @christianschwarz if a commit contains a comment like ""426"" the mentioned issue is automatically closed by github || @pascalschumacher good to know! i will leave it out for the upcoming prs  now that we are pulling in static methods i would like to propose a new (linter) rule to make it easier to read a file i would like that all methods invoked in the current class are referenced with `this` (and `super` for that matter) therefore if we see `thisverify` we know it is in the current class and the same object whereas `verify` references a static method in this class or an imported static method do you agree @mockito/developers ? || > i would like that all methods invoked in the current class are referenced with this (and super for that matter)to me it feels like unnecessary/duplicate code cause `this` is implicit adding `this` before every instance call would create a lot more text and would imho reduce readability eg:`thisdosometing(thiswithprivatemethod())` vs `dosomething(withprivatemethod())`> therefore if we see thisverify we know it is in the current class and the same object whereas verify references a static method in this class or an imported static methodan other option avoid ambiguity is to qualify static methods via its class name  this way you can also distinguish which verify() is called ( `mockitocoreverify()` / `mocktioverify()`)  which is not an easy task when a static import is used || im not coding too much in mockito atm (hopefully now after springone conference ill have more time) but i fully agree with @christianschwarz  imo the best solution is to: - omit `this` before method calls - if necessary provide the class for static method call || respectful -1i like when the class formally declares collaborators instead of calling out to static methods this makes it easy to reason about the code i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etc another use case is when we discover missing/incorrect unit test coverage (or we do some larger refactorings) and we cannot easily write tests because code is too proceduralthe benefits for converting to static utilities have minimal significance to me yet there is a downside i care about (eg maintainability of procedural code static methods that consume static methods that consume static methods)hence i down vote this sort of changes going down this path all stateless classes in mockito would become static utilities :)you can get +1s from other maintainers and have your changes merged - im not here to block your changes but to give honest feedback i see merit in arguments for static utilities they do not outweigh the cost in my opinion || im mitigated about this as well i understand well that mockito creates garbage but they are short lived and **most probably** wont go in the old generation especially in the test phase yet the faster the tests are the more developers will run them it **may** have impacts on big projects also design wise i dont like much static methods toohowever i dont totally agree with the above points : > i dont need to read every line of code in the class to find out external couplings realized via static methods i can see the couplings via fields i can easily query how the field variable is used etccoupling appears also in the import section  static methods are visible there and modern ide usually highlight this intellij even have a warning if import section is too big just as theres warning if theres too many fields this point should not be the reason to avoid static methods> maintainability of procedural code static methods that consume static methods that consume static methodshaving instance methods does not protect again procedural code---i believe theres middle ground there : - mockito project contains a lot of small utility stateless objects that are supporting mockito features these are usually collections tools reflection tools those could are good candidate for static methods objects like `fieldsetter` `fieldcopier` `lenientcopytool` could be nice candidate for static methods- mockito features could be backed by object instances objects like `mockitocore` `mockcreationvalidator` `argumentmatchingtool` are candidate to stay objects || exactly the middle ground described by brice is my motivation for merging most of the prs this is also the reason i have not yet merged the mockitocore pr for this exact reasonif an object is not a attribute or parameter but an internal creation and immediately dismissed i value a pure function more || thought: when we switch to java 8 we can use interfaces with defaultmethods the switch from static utility to interface is very easy now (justa couple of text replaces no method reference modifications)on fri 12 aug 2016 17:23 brice dutheil notifications@githubcom wrote:> im mitigated about this as well i understand well that mockito creates> garbage but they are short lived and _most probably_ wont go in the old> generation especially in the test phase yet the faster the tests are the> more developers will run them it _may_ have impacts on big projects> also design wise i dont like much static methods too> > however i dont totally agree with the above points :> > i dont need to read every line of code in the class to find out external> couplings realized via static methods i can see the couplings via fields> i can easily query how the field variable is used etc> > coupling appears also in the import section  static methods are visible> there and modern ide usually highlight this intellij even have a warning> if import section is too big just as theres warning if theres too many> fields this point should not be the reason to avoid static methods> > maintainability of procedural code static methods that consume static> methods that consume static methods> > ## having instance methods does not protect again procedural code> > i believe theres middle ground there :> >    -> >    mockito project contains a lot of small utility stateless objects that>    are supporting mockito features these are usually collections tools>    reflection tools those could are good candidate for static methods>    objects like fieldsetter fieldcopier lenientcopytool could be nice>    candidate for static methods>    -> >    mockito features could be backed by object instances objects like>    mockitocore mockcreationvalidator argumentmatchingtool are candidate>    to stay objects> > —> you are receiving this because you modified the open/close state> reply to this email directly view it on github>  or mute the thread>   || this feels like a misuse of the default methods || i think you mean static-methods in interfaces here? default-methods require an instance to be called onanyway i dont think that it is a good idea  it would a result in an interface that is not intended to be implemented or extended and only serves as container for utility methods imho a class with private constructor is the best construct to do this || > > thought: when we switch to java 8 we can use interfaces with default> > methods> > default-methods require an instance to be called oni was thinking exactly that default methods in the interface plus instance (either as a separate file or as a singleton declared within the interface) || @christianschwarz what do you think to continue the work here with the middle ground described [here]( ? || i am attempting to refactor the matcherbinder class to a static utility class and am having trouble refactoring the following from mockhandlerimpltestjava: `handlermatchersbinder  new matchersbinder() {            public invocationmatcher bindmatchers(argumentmatcherstorage argumentmatcherstorage invocation invocation) {                throw new invaliduseofmatchersexception()            }} `how can i maintain the abstract class definition when i am not able to create an object of matcherbinder?any help is appreciated!  || lets close this ticket refactorings can be done as needed as we work with the code || ";1;0;unified decamelizer stringjoiner and removefirstline in stringutil;
920;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;added subproject for configuration-free inline mock making.;added a preconfiguration for using the inline mock maker as a convenience artifact that can be included instead of creating the plugin file. this is very helpful when creating multi-module projects where the mock maker file has to repeated many times.;;0;added subproject for configuration-free inline mock making;added a preconfiguration for using the inline mock maker as a convenience artifact that can be included instead of creating the plugin file this is very helpful when creating multi-module projects where the mock maker file has to repeated many timesonce we choose to change the mock maker to be default or enable programmatic access we can decide to drop this artifact similar to `mockito-all` from version one; merging 920 ;;;;1;1;added subproject for configuration-free inline mock making;
923;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;smartprintertest tostirng() calls;calling  tostirng()  on a string just returns the same instance  making;;0;smartprintertest tostirng() calls;calling `tostirng()` on a string just returns the same instance makingthis call quite uselessthis patch removes those calls in order to clean up the code a bit;;;;;1;1;smartprintertest tostirng() callscalling tostirng() on a string just returns the same instance makingthis call quite uselessthis patch removes those calls in order to clean up the code a bit;
926;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;remove string concatination inside an append call;concatinating strings creates a temporary stringbuilder  which is then;;0;remove string concatination inside an append call;concatinating strings creates a temporary stringbuilder which is thenconverted to a string having such an argument inside astringbuilder#append call thus pointless using a chained append callwill have the exact same outcome and would profit a slight [probablyunnoticeable in this instance] performance benefit; merging 926  - ;;;;1;1;remove string concatination inside an append callconcatinating strings creates a temporary stringbuilder which is thenconverted to a string having such an argument inside astringbuilder#append call thus pointless using a chained append callwill have the exact same outcome and would profit a slight [probablyunnoticeable in this instance] performance benefit;
928;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;fix whitespace issues throughout the code;this patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:;;0;fix whitespace issues throughout the code;this patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:- newlines were added at the end of files that didnt have them- whitespaces at the end of source lines were removedall these changes were done by running `sed` on the codebase the exact details can be found in the individual commit messages; merging 928 !could you open a new pr after this one with the checkstyle config? we can continue the discussion there regarding the rules we want to enforce and how thanks for your time and effort! || @timvdlippe agreed ill open a new pr for the checkstyle stuff after this one is merged so i can easily rebase on top of it@szczepiq sure ill take a look at #685 - looks interesting || great work! we discussed it on slack clean whitespace / checkstyle will help with git workflows for cleaner history@timvdlippe do we want this also in release/2x for easier merges? || @szczepiq i am cherry-picking it into release/2x atm ||;;;;1;1;"remove whitespaces at the end of source linesthis patch takes the de-facto standard of not having any whitespacesat the end of source lines and applies it to all the source files inthe projectbesides improving standardization another contributing considerationis the fact that many editors/ides remove such whitespaces at end oflines using such an ide will remove these whitespaces in the editedfile adding ""noise"" to the patch and confusing potential reviewersby explicitly removing all of them in a single patch this problem canbe avoidedthese changes were done automatically by applying the following shellcommand:$ find  -name ""*java"" -exec sed -i s/[ \t]*$// {} \";
933;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;support for return type  void  in doesnothinganswer;927;;927.0;support for return type void in doesnothinganswer;927 this pr allows to use `donothing()` for methods with return type `javalangvoid` like void-methods  to solve this `invocationinfoisvoid()` checks now the return type for the pseudo-type of the keyword `void` or `void`;   no coverage uploaded for pull request base  ;mockito cant unbox void;hithe following [bug]( was created for powermock:  > powermockito doesnt seem to unbox javalangvoid> i am writing a test for my code that uses google cloud storage api to delete a file google api returns void for deleting a file code works fine but when i instruct my test as powermockitodonothing()when(delete)execute() it complains that execute has a return value of voidbut powermock just delegates call to mockito in this case and mockito throws exception: ```orgmockitoexceptionsbasemockitoexception: only void methods can donothing()!example of correct use of donothing():    donothing()    dothrow(new runtimeexception())    when(mock)somevoidmethod()above means:somevoidmethod() does nothing the 1st time but throws an exception the 2nd time is called```i have doubts about expected behaviour for one side method return something but it return a `void` which always is just `void` and nothing could be changed anyway it could be  only on mockito side (without dirty hacks);;1;0;merge branch release/2x into answer_do_nothing;
935;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;new feature - enable mocking using constructor arguments;## motivation and design - see #685;;685.0;new feature - enable mocking using constructor arguments;## motivation and design - see #685to quote the requirement (see in-depth design in #685):> we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the `mocksettings#useconstrctor()` method (as suggested in the alternative api comment in the issue) and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no-arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment;wow! thank you for swift contribution! i will review once i have a bandwidth || apologies the previous push had a couple of failing tests due to a missed file ive updated it and it should work now ||  merging 935 ;support constructor parameters for spying on abstract classes;"nice self-contained enhancement that makes mockito api more robust the implementation does not require proficiency with mockito codebase### featurewe already support spying on abstract classes by allowing parameterless constructor however there is no support for constructor parameters this has been asked about long time ago mockito api is not robust enough if it supports mocking with constructor **but** not when one has any constructor parameters``` java//current api:foo spy  mock(fooclass withsettings() useconstructor()defaultanswer(calls_real_methods))//existing method (will remain):mocksettings useconstructor()//new api (change existing method):foo spy  mock(fooclass withsettings() useconstructor(""somearg"")defaultanswer(calls_real_methods))//changed method:mocksettings useconstructorargs(object  args)```### open questions- in case we find multiple matching constructors do we just use the 1st matching (option 1) or throw an exception (option 2)?id say we go for option 1 because its simpler to implement and seems more convenient (works out of the box for certain use cases) if we go for option 2 we need to inform the user what to do to resolve the problem (for example document and suggest @fluentfuture idea of creating an inner implementation)- do we add new method or add vararg to existing useconstructor() method?we decided that using existing method is simpler keeps the api small and is easy to discover### implementation notes- the main complexity is to identify and detect the right constructor to use based on types of parameters supplied by the user- we already deal with detecting constructors for the @injectmocks functionality - there should be code to reuse### test coverage- see existing tests that cover ""useconstructor"" method for- ensure decent informative exception messages  - if user supplies wrong constructor args (wrong types we cannot find matching constructor)  - if the constructor throws some exception (constructors of some types have code that can fail)  - when one uses existing parameter-less ""useconstructor"" method but the mocked class requires constructor args the exception message should tell the user about new ""useconstructorargs"" method- what if arguments supplied by the user match more than 1 constructor - either we fail gracefully with decent message or we pick one of the constructors- update documentation to describe new feature update documentation for existing parameter-less ""useconstructor"" method update documentation in main mockito class if it references “useconstructor”- other use cases?";ive thought about some variant of this feature for a while so heres some feedbackitd be nice if we have some concrete use cases to studyin my own experience i have mostly managed to avoid needing this feature by spying non-static abstract classfor example if the abstract class im spying on needs two constructor parameters i do this:```javapublic class footest {  @spy private mockabstractfoo foo  private final bar bar    private baz baz() {}  abstract class mockabstractfoo extends abstractfoo {    mockabstractfoo() {      super(bar baz())    }  }}```fwiw:1 this is static type safe and refactoring friendly so i find it preferable when it meets my needs2 the constructor can use instance fields or instance methods of the enclosing test object3 the main drawback is that you cant easily construct difference instances with different constructor parameters on the other hand i strive to keep my abstract classes stateless so i rarely need to pass constructor parameters anyway || i forgot to mention that it is possible with todays api to pass different constructor parameters through mocksettings like the following:```javaclass mockfoofactory {  private final bar bar  private final baz baz  mockfoofactory(bar bar baz baz) {}  public abstractfoo create() {    return mockitomock(mockfooclass withsettings()        useconstructor()outerinstance(this)defaultanswer(calls_read_methods))  }  abstract class mockfoo extends abstractfoo {    mockfoo() {      super(bar baz)    }  }}```then just call it with:```javanew mockfoofactory(bar baz)create()```again this is static type safe and ide friendly compared to reflection-based apithe `withsettings()` thing has a bit of discoverability problem and i suppose not many people know they can do this alternatively i would love to have a simpler api like:```javamockitospy(outerinstance mockfooclass)``` || i think that overloading `useconstructor()` is a much cleaner approach than adding a new `useconstructorargs(object)` methodit also makes the method much easier to discover as its right there and the users ide will offer the argument listive coded this approach in pr #935 feedback is more than welcome! || agreed that ```usecontructor(args)``` reads nicerpersonally im not convinced that the dynamic type support is worth the effort it seems to be a slippery slope toward defeating java static type safety which reminds me of the ancient jmock vs easymock comparison where the former relied on type-less reflection while the latter is static type safe if java doesnt allow you to call `new foo(object object)` does mockito have to open that back door (when the enclosing class trick could be used to achieve the goal albeit slightly indirectly)?that said if you do decide to add this feature there are a few implementation caveats that we need to be careful about:* overload resolution its not hard to imagine passing an arg whose static type suggests constructor overload1 to be invoked but the runtime type actually invokes overload2 in other words `new foo(a b) {}` and `useconstructor(a b)` result in different constructor being invoked* generics there is no way to verify that the passed in `list<something>` is actually a `list<string>` even at runtime risking unchecked type errors* visibility what happens if the constructor has both public constructor and package-private constructor both could have been chosen for the given args? || i happened to need to dig up the history of @spy abstractclass in #106 and i found that all my concerns against constructor-args were already stated in that thread and it was clear that @szczepiq is fine with the trade-offso while i disagree with the design decision my apologies for repeating myself over again :) || thank you very much for contribution its really nice work! ||;1;0;685: ability to mock constructors with argsto quote the requirement:we already support spying on abstract classes by allowingparameterless constructor however there is no support forconstructor parametersthis has been asked about long time ago mockito api is not robustenough if it supports mocking with constructor but not when one hasany constructor parametersthis patch enhances the mocksettings#useconstrctor() method and addsoptional ellipsis arguments that are passed to the constructorthe patch streamlines the creation of mocks via constructors to asingle flow where using a no-arg constructor or an enclosing classare just private cases of this flow and dont require their ownspecial treatment;
942;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;allow spying on interfaces so that it is convenient to work with java 8 default methods;680;;680.0;allow spying on interfaces so that it is convenient to work with java 8 default methods;680; merging 942 ;allow spying on interfaces so that it is convenient to work with java 8 default methods;"## problemwhile mockito supports and stubs by default the _default methods_ in interfaces the stubbing code can be a bit non intuitive eg``` javainterface dm {    int contract()    default int default_contract() { return contract() + 1 }}dm dm  mock(dmclass)given(dmcontract())willreturn(2)// necessary otherwise default method is stubbedgiven(dmdefault_contract())willcallrealmethod()assertthat(dmdefault_contract())isequalto(3)```this behavior is unintuitive to users who expect the default methods to trigger real implementation (callrealmethod() by default) see also user report at #940## suggested plan  contributions are welcome!-  relax validation and allow interfaces to be spied this way users can invoke spy(someinterface) or use @spy with interfaces this way we dont need to mark default methods with ""callrealmethod""-  ensure test coverage for mocking  - interfaces with and without default methods  - concrete classes that extend interface with default methods (perhaps already covered)-  document this use case on main mockito javadoc the use can search for ""default"" and find information about default methods behavior suggested by user at #940-  create a separate ticket for mockito 3 (""2* incompatible"" label) to discuss whether we should change the default behavior for defender/default methods perhaps they should automatically call real method regardless if someone uses spy() or mock() with the interface also we should consider mocking/spying on concrete classes that extend from interface with default methods## discontinued ~~original plan~~below idea was discontinued:replace `dm`  map` `default_contract()`  getordefault()` `contract()`  get()` or `containskey()` and you have a problem with designs that are used in the jdk itselfi think mockito can improve on this by configuring the mock to invoke concrete default methods rather than stubbing them this could be done the following way (_api naming in progress_) : - `mock(dmclass use_default_methods)`    the issue with that approach is that a default answer is mutually exclusive with other answers eg if one wants to use `returns_smart_nulls` and default methods this cannot work with the current design- `mock(dmclass withsettings()usedefaultmethods())`    this approach is interesting as it allows to configure the behaviour with possibly any answer however this may require some changes with our internal answers not a deal breaker though";"> mock(dmclass withsettings()usedefaultmethods())i like that spydefaultmethods?btw whats better/more intuitive default for default methods? real method invocation or empty/unstubbed value? || i think that depends on the mocked type id say :- interface > use default methods by default- concrete > im not sure id rather not make those default`spydefaultmethod` is wrong because the primary objective is not to spy them || so potentially this is mockito 3 backwards incompatible change (when changing defaults) thanks for bringing this up! || for this thing only this could be potntially backward incompatible yet for this thing only im not yet sure we should change the default between 2x and 3x whatever the introduction or not of `usedefaultmethods` in `2x` im a bit undecided at that moment i may have a better opinion when the code is actually done right now the code base of mockito 2x runs java6 so we dont have java 8 tests mockito 3 (master) is java 8 and well introduce java 8 specific tests || makes perfect sensewe already have code in 2x that detects java 8 up to you how to push that further ) || if starting from scratch i couldnt think of a use case thatd benefit from stubbing the default methods by defaultbut maybe that use case does exist or at least for backward compatibility its too late to change?either way i propose we do not need to add a default answer or anything to mock() default methods in interfaces are much like concrete methods in abstract classes `spy(anabstractclassclass)` today already _by default_ invokes concrete methods unless they are explicitly stubbed it seems natural to me that we just relax the restriction on `spy(someinterfaceclass)` to accept interface as a parameter instead of throwing illegal usage exception as it does today || @fluentfuture can you elaborate on that : > it seems natural to me that we just relax the restriction on `spy(someinterfaceclass)` to accept interface as a parameter instead of throwing illegal usage exception as it does todayyes backward compatiblity is a primary concern yet if the change makes sense and doesnt impact users in a bad way it can be discussedalso maybe we could backport behavior and api from master to release/2x || suretoday if javautilconsumer were an abstract class defined as:```javapublic abstract class consumer<t> {  public consumer<t> andthen(consumer<? super t> that) {    return v -> {accept(v) thataccept(v)}  }  public abstract void accept(t value)}```i can `@spy` it to have `andthen()` called by default:```java@spy private final consumer<string> consumer1@spy private final consumer<string> consumer2@test public void testcompose() {  consumer1andthen(consumer2)accept(""hi"")  verify(consumer1)accept(""hi"")  verify(consumer2)accept(""hi"")}```it doesnt work with consumer being interface with `andthen()` being an equivalent default method:```javapublic interface consumer<t> {  default consumer<t> andthen(consumer<? super t> that) {    return v -> {accept(v) thataccept(v)}  }  void accept(t value)}```but that is just because we are having a validation that rejects spy(consumerclass) that validation can be removed because it doesnt hurt even if you spy(aninterfaceclass) and even if that interface has no default method because it will just work the same way as mock(aninterfaceclass)heres a [commit]( in my fork that removes the validation and the above test passesby the way i retract my suggestion to make `mock(aninterfaceclass)` to call default methods because then it would break the symmetry with `mock(anequivalentabstractclassclass)` which can be surprising || ah i seeimho spying an interface `spy(interfaceclass)` is wrong even when theres default methods it doesnt feel like a a spy as spy have more meaning to spy concrete codeinstead mocking an interface `mock(interfaceclass)` to call default methods only seems ok and maybe backward compatible although i would like opt-in/out mechanismbut mocking an abstract class `mock(anequivalentabstractclassclass)` should never call concrete code || i agree that the spy() name is kinda misleading for the behavior of ""mock only abstract methods""i originally proposed fake() or other names but spy() was chosen none-the-lessi dont defend the spy() name but its what we have so there may be some value to consistency || `spy` is a specialized mock that seems to _speak_ for everyone maybe `fake` can be another compelling specilizationat this moment not sure if we will but maybe in the future || heres how i found peace with the spy() name:yes it calls the non-abstract methods which isnt spying (more like fake) but it also allows you to explicitly stub them with `when()` or to `verify()` them so in that sense it can still be called a spy || regarding ""interface"" vs ""abstract class"" i personally think we should try not to be picky about the differencesome project scoped or company scoped apis out there arent designed to be implemented/subclassed directly by users for these apis going from an abstract class to interface or vice versa is reserved as an implementation detail changethe worst that should happen with changing abstract class to interface is that a handful of direct subclasses break compilation and need to be  to use the ""implements"" keyworditd be a much bigger burden if all the sudden a lot of tests that used to spy() on the abstract class fail just because of the abstract -> interface changespecifically now with java 8 id expect some abstract classes to become interfaces with default methods because the only reason they were abstract classes in the first place was to be able to have some default methods (for fluent chaining and stuff) || interesting feedback i still have mixed feeling about relaxing spy to allow an interfaceill sleep on it and think about it as your migration use case is legitimateand anyway this address only a part of the original issue || @bric3 can you explain which part isnt addressed in the original issue assuming we put aside the mock() vs spy() naming difference? || @fluentfuture i meant regarding configurability of stubbing default method for a mock not a spyyet the use cases discussed above are defintely additional scenario to account for when we will implement the stuff || @bric3 are you okay with allowing @spy on interfaces? if so ill send a pr || @fluentfuture yes i have worked on it in #906 but i wont have a computer near me for a week still || great discussion +1 to allow spying on interfaces-1 to adding new public api method like fake - it would make the api more complicated just for the sake of a single use case+ 05 to changing the default behavior of mockito 3 to spy interface defender methods by default this way it is the most intuitive behavior users expect see  || i attempted to update the ticket description to reflect the outcome of the discussion feel free to change if needed || if i were going to add another method i would call it `stub` based on [martin fowlers article describing the 3](  like `@incubating mockitospy( class<?> clazz )` more or less does what i expect ultimately finding that behavior though required quite a bit of researchwhether or not adding `mockitostub( class<?> clazz )` method would be worth it i cant say because i dont feel like im familiar enough with the underlying implementation/behavior to know how different `mock` and `spy` are if those are just configuration differences then its probably worth it if theres more to it maybe not if `stub` could `call_real_methods` but only work for `abstract` and `interface` and not be able to do `verify` that would make it different from a `spy` imoeither way more docs seem necessary i might try to put those together for #940  || i somehow missed this ticket mockito should imho follow the idea of defender methods and allow api-evolution without  breaking client code/test i other words if a class under test evolves and calls defender methods on a mocked interface the tests should not fail or should not be rewritten by replacing `@mock` with `@spy` or setting up special mocking settings like `withsettings()usedefaultmethods()`i think it is possibe to rewrite the `mock()` implementation to generate stubbed calls to default methods  without special mock settings  ```javapublic <t> t mock(class<t> type){    t mockmockito_coremock(type)    if (!typetomockisinterface())            return mock    for (method method : typetomockgetdeclaredmethods()) {        if (methodisdefault()) {            docallrealmethod()when(mock)            callwithanymatchers(mock method)        }    }    return mock}private static void callwithanymatchers(object mock method method) {    class<?> parametertypes  methodgetparametertypes()    list<object> defaultvalues  new arraylist<object>()    for (class<?> type : parametertypes) {            defaultvaluesadd(mockitoany(type))    }        try {        methodinvoke(mock defaultvaluestoarray())    } catch (exception e) {        throw new mockitoexception(egetmessage() e)    }}```this way clients can redefine the defender stubbings like overriding it in an implementation @bric3 @szczepiq @fluentfuture what do you think? || is it any different from api-evolution of abstract classes?in template-method pattern if the sut calls an abstract method and then later evolves to call a default method that indirectly calls the abstract method the exact same problem can happen no?this kind of evolution has always been possible and its not clear to me that the user always means to only stub/verify the abstract method sometimes the user may just want to stub/verify the method directly called abstract or notit seems to me not the mocking frameworks responsibility to guess the users intention instead if the user wants to stub/verify the direct method invocation use `@mock` while if the user wants to stub/verify abstract methods use `@spy` || > is it any different from api-evolution of abstract classes?>>in template-method pattern if the sut calls an abstract method and then later evolves to call a default method that indirectly calls the abstract method the exact same problem can happen no?i agree if you see it like that they are pretty equali want to avoid that `@spy` is misused to stub in the first place the word ""spying"" implies that there is something to spy on (the sut) but for interfaces the ""spying"" make no sense we would spy on a mocked interface >it seems to me not the mocking frameworks responsibility to guess the users intention i agree here too! what about a littel helper that create stubbings that call the real default method:  `mockitodelegatedefaultmethodstoreal(mockedinterface)` || i still suggest `stub` as the method name for that per previous reasons cited || did a bit of archeology #106 has a discussion both about the api and the namingin that thread i argued against `spy`: ""all the use cases i know of for partial mocking dont need spying"" at the time ""stub"" wasnt suggested but now i think about it it seems to make sensealthough changing it may mean to introduce a new `@stub` annotation and deprecate `@spy abstractclass` if we are willing to consider the ship not sailed yet || interesting discussion! thank you for all suggestions>the tests should not fail or should not be rewritten by replacing @mock with @spy or setting up special mocking settings like withsettings()usedefaultmethods()you are right ideally the tests only fail when a bug is introducedi have a feeling the discussion is getting broader and i am not sure if still discusses the issue reported :) my immediate reaction to new `@stub` interface and potential deprecation of `@spy` is -1 because i dont see clear value however please formulate a separate ticket with the use case code samples and the team will for sure review it!coming back to the original issue: relaxing spy annotation for interfaces is useful for spying on interfaces with default methods the use case is reasonable and team is +1 to the change do we have new data / use cases that indicate that this change inappropriate? || ";1;0;javadoc;
953;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix javadocs on mockitorule.java to correct an error on its usage.;fixing the javadoc to reflect the api for mockitojunitrule;;0;fix javadocs on mockitorulejava to correct an error on its usage;fixing the javadoc to reflect the api for mockitojunitrule;   no coverage uploaded for pull request base  ;;;;1;1;update mockitorulejavafixing the javadoc to reflect the api for mockitojunitrule;
959;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix broken build;commit da4e42 introduced a static import from the non-existent;;0;fix broken build;commit da4e42 introduced a static import from the non-existent`orgmockitointernalutilstringjoiner` (it exists only in the masterbranch not the release/2x branch)this patch fixes the build by correcting the import to reference`orgmockitointernalutilstringutil`;   no coverage uploaded for pull request base  ;;;;1;1;fix broken buildcommit da4e42 introduced a static import from the non-existentorgmockitointernalutilstringjoiner (it exists only in the masterbranch not the release/2x branch)this patch fixes the build by correcting the import to referenceorgmockitointernalutilstringutil;
972;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;verifies #688: acceptance test to prevent future regression;added an acceptance test to verify #688;;688.0;verifies #688: acceptance test to prevent future regression;added an acceptance test to verify #688;this is going to fail until mockito updates to the next version of byte buddy (that re-688) that contains the following commit:  || could you rebase on `release/2x`? this test should pass now    || @timvdlippe rebased on `release/2x` and tests are passing now ||   thank you guys! nice and clean change and makes mockito safer for our users!!! ||;enabled mocking interface clone method;mocking a `clone()` method on an interface appears to no longer be working with **mockito 210** the below code works fine with **mockito 11019** but throws an `illegalaccesserror` with **mockito 210**:```public interface cloneableinterface extends cloneable {   cloneableinterface clone()}public class cloneableinterfacetest {   @test   public void test() {            cloneableinterface i  mockitomock(cloneableinterfaceclass)      mockitowhen(iclone())thenreturn(i) // throws illegalaccesserror   }}```result of running above test:```javalangillegalaccesserror: cloneableinterface$mockitomock$833899610clone()lcloneableinterface```environment: **jdk 180_102 junit 411 mockito 210 gradle 30 windows 10**edit: link to [so post](http://stackoverflowcom/questions/39967723/mocking-interface-clone-method);i see what is happening here since `object::clone` is protected and since java favors subclass inheritance over interface inheritance the subclass overrides clone as a `protected` method rather than a `public` method of course mockito should render all mock methods public currently we are not doing this but this is trivial to fixthanks for reporting this || @raphw thanks for the quick response ah your root cause analysis makes sense i suppose this is a bit of a corner case and completely understand why it would have been overlooked looking forward to the fix as this is the final item blocking us from upgrading to 210 thanks for all the great work || @jpenglert it should be  in `mockito 221` thanks a lot for reporting! || unfortunately maven sync is disabled thanks to #683  || triggered central sync @bric3 i will enable sync now i wanted to manually verify few releases || thanks @szczepiq  || this bug appears to be back after i upgraded from mockito 221 -> 2713 the original test case i posted is failing in the same manner i ran the above test case with various versions and it appears the 2712 re-introduced this bug perhaps #963 is responsible?would it be possible to add my test case to the mockito test suite to ensure this regression doesnt happen in the future? || we should add it i originally added a modified version to byte buddy but it seems to have missed an aspect feel free to send a pr || i already located and fixed the error i forgot to adjust the visibility for bridge methods || ill make a pr for the acceptance test || i just release a new byte buddy version but i did not correctly apply the fix next version! ||;1;0;verifies #688: acceptance test to prevent future regression;
979;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;974: fix to get correct stubbing location with inline mocking;- fix stacktracefilter to support inline mocking;;974.0;974: fix to get correct stubbing location with inline mocking;- fix stacktracefilter to support inline mocking- add one test to stacktracefiltertest- add stubbinglocationtest into inline subprojectthis pr 974; merging 979 ;mockitojunitrunnerstrictstubs does not detect unnecessary stubbing when inline mock maker is enabled;"- mockito-core 2713- openjdk 180_121- ubuntu 1610- enable `mock-maker-inline` (or use `mockito-inline` artifact)if running the following test unnecessary stubbing is not detected```java@runwith(mockitojunitrunnerstrictstubsclass)public class mockitotest {    @mock    arraylist<string> mock    @test    public void should_pass() {        when(mockget(0))thenreturn(""foo"")        assertequals(""foo"" mockget(0))    }    @test    public void should_detect_unnecessary_stubbing() {        when(mockget(1))thenreturn(""foo"")    }}```in the above code unnecessary stubbing is detected by changing arraylist to list```java    @mock//    arraylist<string> mock    list<string> mock```this problem does not occur with default mock maker";"this is working as intended you should not mock data classes such as `list` the new mock maker is stricter in this regard as we could not ship another breaking change for the original mock makerwe could add an explicit exception when we encounter these classes instead of silently continueing wdyt @raphw ? || i am sorry that my test case was badthe following test **passes** using inline mock makerthis test does not use data classes```java@runwith(mockitojunitrunnerstrictstubsclass)public class mockitotest {    @mock    c mock    @test    public void should_pass() {        when(mockdoit())thenreturn(""foo"")        assertequals(""foo"" mockdoit())    }    @test    public void should_detect_unnecessary_stubbing() {        when(mockdoit())thenreturn(""foo"")    }    public static class c {        public string doit() {            throw new unsupportedoperationexception()        }    }}```using default mock maker this test **fails**this is the result that i expect```orgmockitoexceptionsmisusingunnecessarystubbingexception: unnecessary stubbings detected in test class: mockitotestclean & maintainable test code requires zero unnecessary codefollowing stubbings are unnecessary (click to navigate to relevant line of code):  1 -> at comexamplemockitotestshould_detect_unnecessary_stubbing(mockitotestjava:25)please remove unnecessary stubbings or use silent option more info: javadoc for unnecessarystubbingexception class	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:49)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:161)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:117)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:42)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:262)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:84)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at comintellijrtexecutionapplicationappmainmain(appmainjava:147)```does **new mock maker** mean **inline mock maker**?according to the results of this test inline mock maker seems to be less strict than default mock makersorry if i have misunderstood || ah that is a better testcase definitely a bug! || just tested this on master and the result is the same for both mock makers where neither test detects the unneccessary stubbung i do not know this part of mockito too well but i assume there is a bug in this component || i wrote a new test for this issue```javapublic class strictstubsrunnerbymockingabstractclasstest {    private final junitcore junitcore  new junitcore()    @test    public void test_for_abstract_method_should_detect_unnecessary_stubbings() {        runtest(forabstractmethodclass)    }    @test    public void test_for_concrete_method_should_detect_unnecessary_stubbings() {        runtest(forconcretemethodclass)    }    private void runtest(class<?> testclass) {        result result  junitcorerun(testclass)        list<failure> failures  resultgetfailures()        assertthat(failuressize() equalto(1))        failure failure  failuresget(0)        assertthat(failuregetexception() instanceof(unnecessarystubbingexceptionclass))    }    static abstract class testtarget {        abstract string abstractmethod()        string concretemethod() {            throw new unsupportedoperationexception()        }    }    @runwith(mockitojunitrunnerstrictstubsclass)    public static class forabstractmethod {        @mock        testtarget mock        @test        public void correct_stubbing() {            when(mockabstractmethod())thenreturn("""")            mockabstractmethod()        }        @test        public void unused_stubbing() {            when(mockabstractmethod())thenreturn("""")        }    }    @runwith(mockitojunitrunnerstrictstubsclass)    public static class forconcretemethod {        @mock        testtarget mock        @test        public void correct_stubbing() {            when(mockconcretemethod())thenreturn("""")            mockconcretemethod()        }        @test        public void unused_stubbing() {            when(mockconcretemethod())thenreturn("""")        }    }}```to test this test on the master i put this into the following directory1 src/test/java/org/mockitousage/junitrunner (using the default mock maker)1 inline/src/test/java/org/mockitoinline (using the inline mock maker)in the first case this test passed```$ /gradlew -dorggradleparallelfalse clean :test --tests ""orgmockitousagejunitrunnerstrictstubsrunnerbymockingabstractclasstest""version: 2714 android:clean up-to-date clean up-to-date clean clean up-to-date  some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details processresources up-to-date createtestresources  some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details processtestresources up-to-date testbuild successfultotal time: 5707 secs```however in the second case it failed```$ /gradlew -dorggradleparallelfalse clean  test --tests ""orgmockitoinlinestrictstubsrunnerbymockingabstractclasstest""version: 2714 android:clean up-to-date clean up-to-date clean clean up-to-date  some input files use or override a deprecated apinote: recompile with -xlint:deprecation for detailsnote: some input files use unchecked or unsafe operationsnote: recompile with -xlint:unchecked for details processresources up-to-date jar compilejava up-to-date processresources classes compiletestjava processtestresources up-to-date testclasses testorgmockitoinlinestrictstubsrunnerbymockingabstractclasstest > test_for_concrete_method_should_detect_unnecessary_stubbings failed    javalangassertionerror:     expected: <1>         but: was <0>        at orghamcrestmatcherassertassertthat(matcherassertjava:20)        at orgjunitassertassertthat(assertjava:956)        at orgjunitassertassertthat(assertjava:923)        at orgmockitoinlinestrictstubsrunnerbymockingabstractclasstestruntest(strictstubsrunnerbymockingabstractclasstestjava:36)        at orgmockitoinlinestrictstubsrunnerbymockingabstractclasstesttest_for_concrete_method_should_detect_unnecessary_stubbings(strictstubsrunnerbymockingabstractclasstestjava:30)2 tests completed 1 failed test failedfailure: build failed with an exception* what went wrong:execution failed for task  test> there were failing tests see the report at: file:///home/tmura/ideaprojects/mockito/subprojects/inline/build/reports/tests/indexhtml* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log outputbuild failedtotal time: 3505 secs```for the abstract method unnecessary stubbing was detected correctly but it did not detected for the concrete method || i thnk i have found the cause of this problemwhen using the inline mock maker it seems that locationimpl cannot get the stubbed location of the concrete method correctly`unusedstubbingfinder` which detects unnecessary stubbing calls `locationimpl#tostring()` to get the stabbed locationthe code below is the implementation of `locationimpl#tostring()````javastacktraceelement filtered  stacktracefilterfilter(stacktraceholdergetstacktrace() false)if (filteredlength  0) {    return ""-> at <<unknown line>>""}return ""-> at "" + filtered[0]tostring()```this method filters the stack trace elements of `stacktraceholder` to get the location`stacktraceholder` is a throwable object that is created in the constructor of `locationimpl`the stack trace elements of this object are as follows:- stubbing the concrete method with the default mock maker```0  {stacktraceelement@1679} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:23)""1  {stacktraceelement@1680} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:18)""2  {stacktraceelement@1681} ""orgmockitointernalcreationbytebuddyinterceptedinvocation<init>(interceptedinvocationjava:52)""3  {stacktraceelement@1682} ""orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:41)""4  {stacktraceelement@1683} ""orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptsupercallable(mockmethodinterceptorjava:102)""5  {stacktraceelement@1684} ""comexamplemockitotest$c$mockitomock$648066763doit(unknown source)""6  {stacktraceelement@1685} ""comexamplemockitotestshould_detect_unnecessary_stubbing(mockitotestjava:25)"- stubbing the abstract method with the inline mock maker```0  {stacktraceelement@2201} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:23)""1  {stacktraceelement@2202} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:18)""2  {stacktraceelement@2203} ""orgmockitointernalcreationbytebuddyinterceptedinvocation<init>(interceptedinvocationjava:52)""3  {stacktraceelement@2204} ""orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:41)""4  {stacktraceelement@2205} ""orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptabstract(mockmethodinterceptorjava:120)""5  {stacktraceelement@2206} ""comexamplemockitotest$c$mockitomock$1683798279doit(unknown source)""6  {stacktraceelement@2207} ""comexamplemockitotestshould_detect_unnecessary_stubbing(mockitotestjava:25)""```- stubbing the concrete method with the inline mock maker```0  {stacktraceelement@1927} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:23)""1  {stacktraceelement@1928} ""orgmockitointernaldebugginglocationimpl<init>(locationimpljava:18)""2  {stacktraceelement@1929} ""orgmockitointernalcreationbytebuddyinterceptedinvocation<init>(interceptedinvocationjava:52)""3  {stacktraceelement@1930} ""orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:41)""4  {stacktraceelement@1931} ""orgmockitointernalcreationbytebuddymockmethodadvicehandle(mockmethodadvicejava:76)""5  {stacktraceelement@1932} ""comexamplemockitotest$cdoit(mockitotestjava:30)""6  {stacktraceelement@1933} ""comexamplemockitotestshould_detect_unnecessary_stubbing(mockitotestjava:25)""```the resulting location should be `#6` but in the last case it is `#5`because `stacktracefilter` does not exclude `#5` || yes this is expected the inline mock maker inlines the code and does therefore not add a stack frame this is a bug in the `unusedstubbingfinder` which should not rely on the stack shape@timvdlippe do you have time to look at this? || thank you guys for really thorough debugging!>this is a bug in the unusedstubbingfinder which should not rely on the stack shapethere is a reason why the finder relies on the string representation of line where the unused stub is declared i documented it in the [javadoc]( hopefully it is more less clear :) im not saying we should keep the current implementation im ok changing it i just wanted to give more data pointsafter reading this thread my gut feel tells me that the stack trace filter (different component than unused stubbing detection) may not be coping well with inline mocking this could also have impact on stack trace filtering in general for inline mocking the quality of exception messages etc@tmurakami you made fantastic debugging effort to nail down the problem can you investigate if stack trace filter needs adapting for inline mocking and potentially submit a pr? || with the stack trace filter i actually did change the implementation to adjust this behavior such that it works i was not aware that the stubbing finder replicated something similar || @szczepiq @raphw i can submit the pr but this problem seems to have already been  by @raphwshould i submit the pr? || please submit i only fixed the issue partially || ";1;0;974: fix to get correct stubbing location with inline mocking;
980;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;976: resolve ambiguous constructors;with the current code (introduced in mockito 2.7.14 by commit 6a82c03)  calling  mocksettings.useconstructor  with an argument list that would be applicable to more than one constructor would fail with an  org.mockito.internal.creation.instance.instantiationexception .;;976.0;976: resolve ambiguous constructors;"with the current code (introduced in mockito 2714 by commit 6a82c03) calling `mocksettingsuseconstructor` with an argument list that would be applicable to more than one constructor would fail with an `orgmockitointernalcreationinstanceinstantiationexception`this behavior however is suboptimal as described in issue #976 as it makes `useconstructor` less robust than the java compiler which is able to resolve such ambiguitieswith this patch mockito will attempt to match the constructor with the most specific parameter types a constructor x is considered more specific than a constructor y if:1 they are both applicable to the given argument list2 constructor x has at least one parameter which is a further specialization of the corresponding parameter of constructor y (ie `paramxisassignablefrom(paramy)`)3 constructor y has no parameter which is a further specialization of the corresponding parameter of constructor x as defined aboveeg consider the following class:    public class someclass {        someclass(object o) {}        someclass(string s) {}    }without this patch calling    mock(someclassclass withsettings()useconstructor(""string!""))would fail with this patch such a call would invoke the `someclass(string)` constructoras noted above this pr fixes issue #976";" merging 980  ";make mocksettingsuseconstructor able to choose the right constructor;## use casewe recently added a very nice new feature #935 - ability to mock abstract classes / use real constructor for creating mocks currently we fail fast when multiple constructors are found matching provided arguments however mockito could potentially do a better job identifying which constructor to use example scenario:```javaclass a {}class b extends a {}class c extends b {}class foo {  foo(a a) {}  foo(b b) {}}//below fails with current implementation:mock(foo withsettings()useconstructor(new a()))mock(foo withsettings()useconstructor(new b()))//however we could make above work because the constructor argument are not really ambiguous//example use case of ambiguous constructor that we can remain failing onmock(foo withsettings()useconstructor(new c()))```## implementationto get started see creatingmockswithconstructortest class unless the code changes the interesting test method is [this one](https://githubcom/mockito/mockito/blob/release/2x/src/test/java/org/mockitousage/constructor/creatingmockswithconstructortestjava#l150);@mureinik do you want to take a stab at this one? :) || @szczepiq sure ill take a crack at it but lets first decide what exactly we want to do first a note - `mock(foo withsettings()useconstructor(new a()))` most definitely works with the current implementation contrary to the comment in the above snippeti propose the following definition which is pretty much what the compiler does when facing a call like `new foo(new b())`:- an argument will be called _better matching_ parameter x over parameter y if the argument can be applied to either parameter x or parameter y and x is a more specific type than y<br/>for completeness sake: an argument will be called _worse matching_ parameter x over parameter y if it is _better matching_ parameter y over x an argument will be called _equally matching_ parameter x over parameter y if it is neither _better matching_ or _worse matching_ parameter x over parameter y- an argument list will be called _better matching_ a constructors parameters list x over y if one or more of the arguments are _better matching_ their respective parameters and the rest are _equally matching_ their respective parameters<br/>note that if the argument list is larger than one argument this is not a total order if constructor x is _better matching_ an argument list than constructor z and constructor y is _better matching_ the same argument list than constructor z nothing can be said about the relationship between x and yusing these definitions we can implement the following behavior:- if no constructor matches the argument list an exception is thrown (as it is with the current implementation)- if a single constructor matches the argument list its used (as it is with the current implementation)- if multiple constructors match the argument list and one is _better matching_ than any other constructor it is used (new behavior)- if multiple constructors match the argument list and there isnt one that is _better matching_ than all the  the other constructors an exception is thrown (similar to the current implementation although the error message may be more precise - see below)ill attempt to clarify this with an exampleconsider the following:```javaclass a {}class b extends a {}class c extends b {}class foo {  foo(a x a y) {}  foo(a x b y) {}  foo(b x a y) {}}a a  new a()b b  new b()c c  new c()// works foo(a a) is called obviouslymock(fooclass withsettings()useconstructor(a a)) // works foo(a b) is called// since b is more specific than a foo(a b) is better matching than foor(a a)mock(fooclass withsettings()useconstructor(a b)) // works foo(b a) is called following the same logic as abovemock(fooclass withsettings()useconstructor(b a)) // works foo(b a) is called following the same logic as abovemock(fooclass withsettings()useconstructor(a c)) // does not work as we cant decide between foo(a b) and foo(b a)mock(fooclass withsettings()useconstructor(b b)) ```if this approach makes sense ill cook up a patch that implements it so we have something concrete to discuss || @szczepiq feel free to assign this issue to me i dont think i have the permissions to do so myself ||;1;0;"fix freudian slip in message regarding issue 685the text should read ""a better job"" not ""a better join""";
983;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;break cyclical compile time dependency on hiderecursivecall;982.;;982.0;break cyclical compile time dependency on hiderecursivecall;982;   no coverage uploaded for pull request base (`release/2x@64a1180`) [click here to learn what that means]( ` ! thanks for your quick reviews @raphw ! ||;break cyclical compile time dependency on hiderecursivecall;i am working on upgrading the version of mockito in aosp to 2713 using byte buddy and byte buddy android rather than dexmakeras part of that i need to exclude a number of classes which will not compile on android because it does not support java agents/instrumentation the mockito code has always been very well organized and made that very simple to do but in the latest version i found a minor issuethe files i need to exclude are:- src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjava- src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytecodegeneratorjava- src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjavaunfortunately when i do that i get a compile error because mockmethodadvice is trying to use hiderecursivecall from inlinebytebuddymockmaker i looked at the code and it seems as though inlinebytebuddymockmaker depends on inlinebytecodegenerator which depends on mockmethodadvice which depends on hiderecursivecall from inlinebytebuddymockmakerthe only places that actually use hiderecursivecall are mockmethodadvice and inlinebytebuddymockmakertest that depends on inlinebytebuddymockmaker which depends on inlinebytecodegenerator which depends on mockmethodadvice which depends on hiderecursivecall from inlinebytebuddymockmakerso moving hiderecursivecall from inlinebytebuddymockmaker to mockmethodadvice breaks a dependency cycle and allows the inlinebytebuddymockmakerjava file to be excluded without problem also mockmethodadvice seems to be a better place for itif you are happy with this proposal or can suggest a better place for hiderecursivecall then i am happy to submit a fix for this;that seems like a reasonable issue looking forward to your pull request @paulduffin ! || should i make the change in release/2x?on 8 march 2017 at 12:57 tim van der lippe <notifications@githubcom>wrote:> that seems like a reasonable issue looking forward to your pull request> @paulduffin < !>> —> you are receiving this because you were mentioned> reply to this email directly view it on github> < or mute the thread> < > || yes please :) || done ||;1;0;break cyclical compile time dependency on hiderecursivecall;
985;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;981: update javadoc about the  mockito-inline  artifact;this pr 981.;;929.0;981: update javadoc about the mockito-inline artifact;this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that; ;new mockito-inline artifact does not work;mockito-inline 272buildgradle:```groovyapply plugin: javasourcecompatibility  javaversionversion_1_8targetcompatibility  javaversionversion_1_8repositories {    jcenter()}dependencies {    testcompile junit 412    testcompile orgmockito:mockito-inline:272}```test target:```javafinal class foo {}```test for foo:```javapublic class footest {    @test    public void test() {        mockitomock(fooclass)    }}```test command:```$ /gradlew clean test compilejava:processresources up-to-date compiletestjava:processtestresources up-to-date testcomexamplefootest > test failed    orgmockitoexceptionsbasemockitoexception at footestjava:101 test completed 1 failed:test failedfailure: build failed with an exception```test report:```orgmockitoexceptionsbasemockitoexception: cannot mock/spy class comexamplefoomockito cannot mock/spy because : - final class	at comexamplefootesttest(footestjava:10)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:114)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:57)	at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:66)	at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:51)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy2processtestclass(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:109)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:377)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:54)	at orggradleinternalconcurrentstoppableexecutorimpl$1run(stoppableexecutorimpljava:40)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)	at javalangthreadrun(threadjava:745)```### reason`mockito-extensions/orgmockitopluginsmockmaker` is not included in the mockito-inlinejar```$ jar tvf mockito-inline-272jar      0 sat feb 04 12 54 jst 2017 meta-inf/    25 sat feb 04 12 54 jst 2017 meta-inf/manifestmf```in [the inline subproject]( orgmockitopluginsmockmaker is in `src/resources/mockito-extensions` directoryis this correct?in [the android subproject]( the file is in src/**main**/resources/mockito-extensions;reproducible project:[mockito_issue_929zip]( || seems like our gradle build is not set up to include this file on travis it does work on my local machine though strange things thanks for reporting! ||;1;0;981: update javadoc about the mockito-inline artifact;
985;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;981: update javadoc about the  mockito-inline  artifact;this pr 981.;;981.0;981: update javadoc about the mockito-inline artifact;this pr 981in the javadoc i write that the first version of `mockito-inline` is `276`this artifact was actually offered in version `272` but `275` or earlier it did not work due to the issue #929 so i write like that; ;update documentation about mockito-inline artifact;"mockito documentation currently does not explain ""mockito-inline"" artifact that is used for inline mocking (mocking finals) the main mockito class still contains information on how to configure the inline mocking using a classpath resource";;1;0;981: update javadoc about the mockito-inline artifact;
986;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;made caturingmatcher threadsafe;in my tests i faced two problems with current capturing matcher. 1. it exposes its internal store through  #getallvalues() . 2. internal data store in capturingmatcher is not threadsafe. exposing internal store when interraction with mocked object isn t finished may produce all kind of weird exceptions in tests.;;0;made caturingmatcher threadsafe;in my tests i faced two problems with current capturing matcher1 it exposes its internal store through `#getallvalues()`2 internal data store in capturingmatcher is not threadsafe exposing internal store when interraction with mocked object isnt finished may produce all kind of weird exceptions in tests;@timvdlippe sorry about that  tests all green now ||  merging 986  ||;;;;1;1;capturingmatchergetallvalues returning new arraylist;
994;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix the broken link on 1357 line in mockito.java;the link  mockitojunitrunner.strictstubs  in the 40th section in javadoc [mockito]( interface is broken. i fixed it by changing;;0;fix the broken link on 1357 line in mockitojava;the link mockitojunitrunnerstrictstubs in the 40th section in javadoc [mockito]( interface is broken i  it by changing `{@link mockitojunitrunnerstrictstubs} ` to  `{@link mockitojunitrunnerstrictstubsclass} `; merging 994 ;;;;1;1;fix the broken link in 1357 line in mockitojava;
995;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions;989;;989.0;verifyzerointeractions guarantees zero interactions instead of just delegating to verifynomoreinteractions;989`verifyzerointeractions` no longer delegates to `verifynomoreinteractions`instead it fetches the number of invocations made to the mock and checks ifthey are zero failing otherwiseim not sure if the style of my code complies with mockito: please let me know what to change and where to look to make it more mockitoish;"you can always check if you comply with the code by running `/gradlew build` that runs the test and checks the code style :) ||  merging 995  ";misleading behavior of mockitoverifyzerointeractions();"## problemmockitoverifyzerointeractions() actually does not do what it advertises the purpose of this ticket is to discuss whether to change the behavior of this method in mockito 3## detailsbased on user feedback at #977 from @ffissore ""verifyzerointeractions"" api can be misleading when you read that method in test code you expect zero interactions with specified mocks however ""verifyzerointeractions"" is only an alias to ""verifynomoreinteractions"" and in fact it **does not** guarantee that there were zero interactions lets use examples to illustrate the problem## feedback neededplease comment / vote / state your opinion about changing the behavior of ""verifyzerointeractions"" so that it actually ensures that there were **zero** interactions with the mock (regardless if previously verified or not)## examplesbelow examples illustrate current behavior of mockito 2x in case you are puzzled what this ticket is aboutexample 1 - verifynomoreinteractions```javamockfoo()verify(mock)foo()verifynomoreinteractions(mock) //pretty clear i think```example 2 - verifyzerointeractions```javamockfoo()verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions//and we already have verified the only method invoked on the mock```example 3 - verifyzerointeractions with regular stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions```example 4 - verifyzerointeractions with new strict stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verifyzerointeractions(mock)//above passes because with strict stubbing//stubbed method are implicitly verified when they are ""used""//this is one of key features of strict stubbing (dry dont repeat yourself)```";this was  in #989 ||;1;0;removed try catch block by using ismock;
1007;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix test failing with java 9-ea+146+;stack trace in jdk part contains also module name:;;0;fix test failing with java 9-ea+146+;"stack trace in jdk part contains also module name:```javalangassertionerror: expecting: ""[mockitohint] 1 unused -> at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)""to match pattern: ""\[mockitohint\] 1\ unused \-\> at [\w\]+\reflect\nativemethodaccessorimpl\invoke0\(*native method\)"the new regexp handles both variants"; merging 1007 ;;;;1;1;fix test failing with java 9-ea+146+stack trace in jdk part contains also module name;
1008;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;sample usage of soft assertions;could be propagated by the way also in other similar places.;;0;sample usage of soft assertions;could be propagated by the way also in other similar places;" merging 1008  ";;;;1;1;sample usage of soft assertionscould be propagated by the way also in other places;
1009;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;clean up unused imports;during development work  orphaned  unused  imports sometime get left;;0;clean up unused imports;during development work orphaned unused imports sometime get leftbehind in the code at best these imports are just redundant atworst they introduce false dependencies in places there arentsupposed to be any dependenciesthis patch removes all those unused imports and adds a checkstylemodule to verify no such redundant imports will be introduced in thefuture;  nice  really nice thank you!!! ||;;;;1;1;clean up unused importsduring development work orphaned unused imports sometime get leftbehind in the code at best these imports are just redundant atworst they introduce false dependencies in places there arentsupposed to be any dependenciesthis patch removes all those unused imports and adds a checkstylemodule to verify no such redundant imports will be introduced in thefuture;
1012;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;do not suppress instrumentation exceptions;rather propagate them to mock maker that attempts instrumentation. addresses #1005.;;0;do not suppress instrumentation exceptions;rather propagate them to mock maker that attempts instrumentation addresses #1005; merging 1012 ;;;;1;1;do not suppress instrumentation exceptions but rather propagate them to mock maker that attempts instrumentation addresses #1005;
1018;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;enabled continuous delivery via robust mockito-release-tools project;- continuous delivery pipeline 2.0 (#911) almost implemented!;;911.0;enabled continuous delivery via robust mockito-release-tools project;- continuous delivery pipeline 20 (#911) almost implemented!- removed tons of release logic complexity now all that is a part of general purpose mockito release tools project- the new release automation should be much easier to test;  does this also implement the logic to only publish a release once every x weeks? || >does this also implement the logic to only publish a release once every x weeks?it will be simpler let me finish off the documentation so that everything is clear good question! || i will be merging soon readmemd contains information about the releases more documentation will be provided but it should not blocking this pr! || more documentation on [spanking new wiki page]( plan to merge today || really excited for this change thanks for the great work @szczepiq ! || just merged this puppy ill keep an eye on the release automation things might be bumpy for the next week or so until the dust after this change drops down and all fallout is cleaned up :)thank you guys for patience! more documentation and improvements i will duly provide in the meantime shoot feedback || @szczepiq does this also close #618? || >@szczepiq does this also close #618?i suggest we leave #618 open for now so that its a place for discussion || btw thank you for updating #618 thread with the status! ||;mockito continuous delivery pipeline 20;"proposed changes on easy-to-grasp diagrams are documented on [mockito blog article]( current release modelevery code change results in a new version in central repository (not snapshot a real version) more information on [continuous delivery in mockito]( high rate of new versions the community and current tooling is not comfortable in taking in new mockito versions at fast pace more feedback and the discussion in issue #618## proposed changesrelease every change but not all releases go to central push to standard repository (jcenter / maven central) only substantial releases push remaining versions to less prominent but still public space for early adoptersglossary: what are major minor patch versions? explanatory example: version 265 has major2 minor6 patch51 every merged pull request produces new version that lands in bintray ""mockito/maven"" repo2 some versions we produce are ""notable versions"" by default those are new major (300 400) and new minor versions (310 320) in contrast to regular new versions the notable versions are included in well-known central repositories: jcenter and maven centralfor more details see the wiki page paragraph on [continuous delivery]( action list-  - configure 2722 as last notable version because it was the last version published to central- release notes:  -  - detailed release notes link to notable release notes and vice versa  -  - release notes inform where the jars can be found (  -  - link to wiki documentation-  - publish next notable version-  - procedure of promoting to notable release is documented -   - the new release model is comprehensively documented -   - release notes have clean format (  - notable release (target repo) can be forced by commit message## implementation details-  https://githubcom/mockito/mockito/blob/release/2x/readmemd#how-to-release-new-version";"> every minor or major version change lands in bothi do agree for major but for minor i am not sure i think we should not immediately release a new minor version when 1 function was added most notably because we might want to add a range of functions in all separate prs (since they are separate logical units) therefore i would say to not do it automatically but presumably faster than with patch releases eg minor every week published patch every month> example: “community” repo has 281 282 283 at the end of the month 283 is promoted to productionthis means that 281 and 282 are never available on production? i do think we should push this for 1 consistency in release versions and 2 if someone finds an issue with a version in `production` he/she can bisect using the in-between patch releases to see which version contained the error> im not completely happy with repository naming ""community"" and ""production""maybe `trunk` and `production`?> new version is published under following conditionsi would like to add an override here for to be able to push a new version eg not pushing an existing version to production but publishing a new version without manually editing javadoc to artificially trigger the release mechanismoverall i agree with the proposal just some small comments glad that we are taking action in this direction  great feedback thank you!>i do agree for major but for minor i am not sure i think we should not immediately release a new minor version when 1 function was added most notably because we might want to add a range of functions in all separate prs (since they are separate logical units) ""minor"" version (eg middle number :) is not automatically bumped by the system its us (or the pr submitter) that makes a judgement call to explicitly bump minor version this decision is based on the gravity of the changes we dont bump minor version unless it has substantial changes if it does have substantial changes it probably should be released to mass audience at least this is my reasoning if we dont automatically publish minor versions we can end up with versioning scheme where ""community"" and ""prod"" repo have pretty much random versions if we publish minor versions automatically ""prod"" contains announcable significant versions that add substantial value eg 310 320 330 and occasional patch release like 331 ""community"" repo would have all changes 310 311 312 313 320 etc thoughts?>this means that 281 and 282 are never available on production? i do think we should push this for 1 consistency in release versions and 2 if someone finds an issue with a version in production he/she can bisect using the in-between patch releases to see which version contained the errorthe idea is to only include substantial versions in official repo if the user wants to bisect he needs configure ""community"" repo explicitly in pom / buildgradle in short the answer to your question is yes 281 and 282 will never be in ""production"" repo>maybe trunk and production?lets keep thinking some other ideas: all-versions/announcable-versions all-artifacts/significant-artifacts early-adopters/slow-adoptersgiven that ""minor"" version (eg middle one) is updated explicitly by the pr submitter he controls >i would like to add an override here for to be able to push a new version good idea i will add it to the designreally nice feedback thanks! we can tweak/iterate the process as we learn more too || > we dont bump minor version unless it has substantial changesmakes sense 👍 > in short the answer to your question is yes 281 and 282 will never be in ""production"" repoi think for claritys sake they should be pushed it would be weird to browse maven central and see missing versions lets see what the others think> lets keep thinkinglatest - stable? || > > in short the answer to your question is yes 281 and 282 will never be in ""production"" repo> i think for claritys sake they should be pushed it would be weird to browse maven central and see missing versions lets see what the others thinki can think of two popular projects which sometines skip versions:- [maven]( missing versions eg 332 334-338 (and upcoming 350 will skip 340)- [tomcat]( missing versions eg 8510 857 8040 || @arend-von-reinersdorff thank you for feedback and examples!@timvdlippe currently i most like following naming scheme for repositories: ""all-versions"" and ""notable-versions"" || this looks good! i agree with the model where minor versions are in release channel (notable-versions) and patch versions are in beta channel (all-versions) modulo hot fixes if patch versions are pushed to notable-versions _at the time they are released_ you defeat the purpose of the release channel your ""notable versions"" channel would churn multiple times daily againmaybe mockito can push all interleaved patch versions available only on the beta channel to the release channel when the release channel is updated? for example ```release channel – 230beta – 230 231 232```after:```release channel – 230 231 232 233 (hotfix)beta – 230 231 232 233```this may go against the principle of least surprise since someone browsing the version history of release channel will notice that suddenly not one but three new versions became visible this may be acceptable if bisecting and keeping full version history on the release channel are important for the project as i said before i dont have a strong preference for this model except to say that patch versions should not appear in the release channel _at the time of their release_ unless they are hot fixes || i have an alternative opinion from everything proposed so far i propose introducing the usage of the `classifier` attribute to differentiate between community and production releases with this proposal the current cd procedure would be left unchanged and consumers who want to subscribe to the latest releases can continue to do so with no changes for those consumers who want to limit the thrashing on taking updates they can do so by declaring a `weekly` classifier the only change to the current release process would to be to release the most recent tag with the additional classifier attached it could be weekly or monthly```xml<!-- current usage unchanged! --><dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-core</artifactid>    <version>275</version></dependency><!-- using the `weekly` classifier --><dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-core</artifactid>    <classifier>weekly</classifier>    <version>271</version></dependency>```this could also be inverted to restore the delayed release process to the majority of consumers and allow opting in to the daily/continuous releases```xml<dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-core</artifactid>    <classifier>daily</classifier>    <version>275</version></dependency><dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-core</artifactid>    <version>271</version></dependency>``` || @mattnelson that is an interesting concept i had not heard of! i am not sure though if it would be valid for our usecase but definitely worth investigating || @mattnelson interesting idea! at this point i want avoid using classifiers because they would complicate things if you get this working for some project or there is a reference project that uses this method we would like to know the experiences@tinkerware thanks for feedback! || @szczepiq i think we can close this issue as well and direct any further discussion to the shipkit repository? || closing this per rationale in #618 and our implementation available at  || ";1;0;merge branch release/2x into sf;
1022;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;matcherstest numeric literals;use numeric literals  which are more elegant  instead of casting int literals to other primitive types.;;0;matcherstest numeric literals;use numeric literals which are more elegant instead of casting int literals to other primitive types; merging 1022  < ;;;;1;1;matcherstest numeric literalsuse numeric literals which are more elegant instead of casting intliterals to other primitive types;
1023;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix broken link in mockito javadoc;commit  6a82c030756a30932406d6b807e7ca34f20631e3 (included in mockito 2.7.14) changed;;0;fix broken link in mockito javadoc;commit  6a82c030756a30932406d6b807e7ca34f20631e3 (included in mockito 2714) changed`mocksetting#useconstructor`s signature to accept an `object` argument while this change is backwards compatible (as calls can continue passing an empty argument list) it broke the javadocreference to `useconstructor()` in mockitos javadoc;thanks @mureinik ||   merging in release mode as release after #1021 was skipped due to no change in artifacts ||;;;;1;1;fix broken link in mockito javadoccommit 6a82c0 (included in mockito 2714) changedmocksetting#useconstructors signature to accept an objectargument while this change is backwards compatible (as calls cancontinue passing an empty argument list) it broke the javadocreference to useconstructor() in mockitos javadocthis patch fixes that broken link;
1025;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;smartprintertest tostring() calls;calling  tostring()  on a string object just returns the same object  making such calls useless in most cases.;;0;smartprintertest tostring() calls;calling `tostring()` on a string object just returns the same object making such calls useless in most casesthis patch removes such calls from `smartprintertest` making the code a cleaner and easier to read; ;;;;1;1;smartprintertest tostring() callscalling tostring() on a string object just returns the same objectmaking such calls useless in most casesthis patch removes such calls from smartprintertest making the codea cleaner and easier to read;
1027;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix some issues reported by sonarqube;colleague students ran sonarqube on mockito. these were some easy fixes i was able to do  no extreme value. i will open an issue regarding a different and potentially more serious issue.;;0;fix some issues reported by sonarqube;colleague students ran sonarqube on mockito these were some easy fixes i was able to do no extreme value i will open an issue regarding a different and potentially more serious issue; merging 1027  thanks for the input @christianschwarz and @szczepiq ! ||;;;;1;1;fix some issues reported by sonarqube;
1035;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix nullpointerexception in junit test runner when test fails early in initialization;on case of   mockitoannotations.initmocks(target)   throw any exception  this.target  still null.;;0;fix nullpointerexception in junit test runner when test fails early in initialization;on case of  `mockitoannotationsinitmocks(target)`  throw any exception `thistarget` still nullas impact to throw a **nullpointerexception on all next tests** on the method `defaultinternalrunnertestfinished`what append the method testfinished is never call on case of any error on the initialization phase as impact that the listener is not cleanupon next tests the method testfinished will notify the previous listener that have not been unregisteredto avoid this issue the mockitolistener must be remove if test fail and never started> javalangnullpointerexception at orgmockitointernaljunitutiltestnamegettestname(testnamejava:15)	at orgmockitointernaljunitmismatchreportingtestlistenertestfinished(mismatchreportingtestlistenerjava:33)	at orgmockitointernalrunnersdefaultinternalrunner$1$1testfinished(defaultinternalrunnerjava:60)	at orgjunitrunnernotificationsynchronizedrunlistenertestfinished(synchronizedrunlistenerjava:56)`; merging 1035 || for the storry this issue have been detected during a migration from mockito 1x / powermock to mockito 2x after  small compilation issues most of tests will failedlittle bit desperate at first time in reallity most of failures has related to this issue and only few tests requierd a fix to finalize the migrationthanks for your api ||;;;;1;1;mockitotestlistener must be remove on case test fail on the initialization;
1040;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix javadoc issues;this pr fixes several javadoc issues reported by intellij idea. two types of errors are not handled in this pr:;;0;fix javadoc issues;this pr fixes several javadoc issues reported by intellij idea two types of errors are not handled in this pr:- references which gradle is unable to resolve - these references seem to be valid javadoc links so theres either an issue with gradle itself of with the configuration this project is using and needs a deeper look- javadoc tags missing descriptions which require a deeper understanding of the methods in question in order to resolve;we have some other javadoc warnings too might want to take a stab at these too? :) ||   @timvdlippe i was trying to keep the pr minimal but sure ill give it a go and add it to the pr ||;;;;1;1;varargstest#shouldcapturevarargsasarray @throws tagremove a @throws tag for the checked exception that isnt thrown bythis method;
1041;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;backport fixes of release/2.x to master;yeah  we did this quite some time ago and this merge was hell. i hope i did not screw anything up. there are still 7 test failures  but i have to get dinner now. please review this pr very carefully  to make sure i did not introduce regressions into master :sob:;;0;backport fixes of release/2x to master;yeah we did this quite some time ago and this merge was hell i hope i did not screw anything up there are still 7 test failures but i have to get dinner now please review this pr very carefully to make sure i did not introduce regressions into master  ;@timvdlippe why there is just one commit in this pr? it makes harder to determine later on what changes/commits were already  i did it in the same manner as you did in #861 || thank you guys for working on backporting! || okay looking at the travis logs:- we need to remove animalsniffer on `master` ( there are some regressions regarding varargs matching maybe related to matching in java 8 ( possibly an issue with bytebuddy on java 9? 😓 ( cc @raphw - need to not hardcode jdk version since java 9 uses a different format ( error i do not know what is causing it ( maybe a flaky test dont see it in a different build ( || ill take another stab at this soon the longer we wait the worse the merge gets || all right the log has gotten pretty nasty even though i just did `git merge` locally   but most of the updates have been  the only test that now fails is```orgmockitointernalstubbinganswersthrowsexceptiontest > should_throw_mock_exception_without_stacktrace failed    orgjunitcomparisonfailure: [no stack trace its mock] expected:<null> but was:<>        at sunreflectnativeconstructoraccessorimplnewinstance0(native method)        at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:62)        at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)        at orgmockitointernalstubbinganswersthrowsexceptiontestshould_throw_mock_exception_without_stacktrace(throwsexceptiontestjava:35)```this might be a jdk issue but i have no clue why it is suddenly failing ||  merging 1041 ;;;;1;1;merge branch release/2x into backport-fixesalso bump build scan version for gradle 4 compatibility;
1058;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;test code refactoring - updated assertj test dependency from 1.x to 2.6.0;make use of assertj 2.6.0 since java 7 is used now for building mockito and assertj 1.x is no longer under development.;;0;test code refactoring - updated assertj test dependency from 1x to 260;make use of assertj 260 since java 7 is used now for building mockito and assertj 1x is no longer under development;  thank you for updating the version! its nice that you can help us keeping good hygiene of versions - something easy to forget during day-to-day execution of the project :) || youre welcome! ||;;;;1;1;make use of assertj 260;
1060;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fixed  typos across the codebase;;;0;  typos across the codebase;; merging 1060 `  thank you! ||;;;;1;1;fix some typos;
1075;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;streamline assertj and junit4 usage in gradle files and update assertj (v2.7.0);it looks like i missed some occurrences of assertj-core 1.7.1 in #1058.;;0;streamline assertj and junit4 usage in gradle files and update assertj (v270);it looks like i missed some occurrences of assertj-core 171 in #1058therefore i thought it might be a good idea to add a `dependenciesgradle` file which defines certain dependencies (for now assertj and junit4);  i like this idea! @epeee do you want to take a stab and configure other dependencies like that? it makes the code neatly readable and enforces consistent versioning nice!fyi: the version of dependenciesmockito-release-tools lives in gradleproperties file it probably cannot be placed in dependenciesgradle because that dependency is used in buildscript section this means it is needed when the *gradle file is compiled before any other plugin or apply from is evaluated i mentioning it in case you want to do some experiments in putting versions in gradleproperties file :)changes that help us maintain the project (consistent versions) and make the build logic easier to read are always welcome thank you! || @szczepiq thx for your feedback yes i will do so (configure other dependencies like that) ||;;;;1;1;update assertj (v270);
1076;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fixed validation in returnargumentat(int) in case of type erasure on the parameter;1071;;1071.0; validation in returnargumentat(int) in case of type erasure on the parameter;1071 the parameter type inference takes now the type of the actual instanceinto account to avoid type erasure issues in case the parameter isgenericsee also: https://githubcom/mockito/mockito/issues/1071#issuecomment-300091021; merging 1076 ;mockito additionalanswersreturnsfirstarg() doesnt work with generic first arg;_issue concerning [this stackoverflow question]( checked its not working both mockito 1x and 2x_-------------------im trying to mock the typed method `getnameelement` of interface `roomgeneralservice` to return the first arg using mockito `additionalanswersreturnsfirstarg` functionality:**interface to mock**:    interface primarykeyelement<t> {       public string getnameelement(t primarykey)    }    interface roomgeneralservice extends primarykeyelement<string> {       //     }**my test** (note the imports)    import static orgmockitoadditionalanswersreturnsfirstarg    import static orgmockitomatchersany    import static orgmockitomatchersanystring    import static orgmockitomockitowhen    import orgmockitorunnersmockitojunitrunner        @runwith(mockitojunitrunnerclass)    public class sampletest {           @mock       roomgeneralservice roomgeneralservice           @test       public void testfoo() throws exception {          when(roomgeneralservicegetnameelement(anystring()))thenanswer(returnsfirstarg())          //       }    }also ive tried with other combinations but without success so far:    when(roomgeneralservicegetnameelement(matchers<string>any()))thenanswer(returnsfirstarg())    doanswer(returnsfirstarg())when(roomgeneralservicegetnameelement(anystring()))    doreturn(returnsfirstarg())when(roomgeneralservicegetnameelement(anystring()))**error received**:> the reason for this error can be :> 1 the wanted argument position is incorrect> 2 the answer is used on the wrong interaction> > position of the wanted argument is 0 and the possible argument indexes> for this method are :>     [0] object**workaround**:i know i can create my own answer and in fact its working fine if instead of use `returnfirstarg()` i do something like this:    when(roomgeneralservicegetnameelement(anystring()))thenanswer(new answer<string>() {       @override       public string answer(invocationonmock invocation) throws throwable {          return (string) invocationgetarguments()[0]       }    })but i would use `returnfirstarg()` as in the rest of my tests (tests look cleaner) as well as mocking is working fine if the method `getnameelement` would receive an `string` instead a `t` argthanks for the help;@troig mockito checks if the argument type is compatible with the return type to make a misuse ot the api as soon as posible visible  in this case the argument-type object is inferred from the generic type t due to type erasure since object is not a subtype of string mockito throws the exception you seesolution: the issue can by  by inferring the argument-type of the actual argument-instance in case the argument-type is a primitive or the arg is null mockito must fallback and use the type provided by method signature i have a solution ~~that currently doesnt work due to regressions introduced with #1032 (vararg-expansion is broken)~~ || thanks @christianschwarz for you quick answer! ||;1;0; intendation and import issues;
1079;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed #1065. add information about donothing() method to cannotstubvo…;;;1065.0; #1065 add information about donothing() method to cannotstubvo…;; ;complement error message;exception from [cannotstubvoidmethodwithareturnvalue]( does not inform about `donothing()` method but i think in many cases it is what user want to do;feel free to open a pr to fix this issue   thanks for the report ||;1;0;changed message according to pr review;
1090;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;1083: interfaces only declare tostring implicitly and should t…;…herefore override it explicitly from the inline mock maker.;;1083.0;1083: interfaces only declare tostring implicitly and should t…;…herefore override it explicitly from the inline mock maker;;mockito 2 mock-maker-inline not able to mock object methods on an interface;"hi therei recently upgraded from mockito `195` to `2722` (mockito-inline) and some tests started failed as mockito is unable to mock `objecttostring()` method on an interfaceit appears to be that the inline mock maker cannot mock object methods on an interface using a class (hashset for the below example) or mockito-core instead of mockito-inline makes it work***system:***```os:       windows 10 (version 1703)java:     jdk 18u131mockito:  orgmockito:mockito-inline:2722 //orgmockito:mockito-core:2722 works fine!junit:    junit 412```***sample example that fails:***```javaimport orgjunitassertimport orgjunittestimport orgmockitomockitoimport javautilsetpublic class testinterfacetostring {    @test    public void testinterfacetostring() {        set set  mockitomock(setclass) // change setclass to hashsetclass makes it work        mockitowhen(settostring())thenreturn(""bla"")        assertassertequals(""bla"" settostring())    }}```***output:***```bash""c:\program files\java\jdk180_131\bin\java"" -dideatestcyclicbuffersize1048576 ""-javaagent \program files\jetbrains\intellij idea 201712\lib\idea_rtjar58071 \program files\jetbrains\intellij idea 201712\bin"" -dfileencodingutf-8 -classpath ""c:\program files\jetbrains\intellij idea 201712\lib\idea_rtjarc:\program files\jetbrains\intellij idea 201712\plugins\junit\lib\junit-rtjarc:\program files\java\jdk180_131\jre\lib\charsetsjarc:\program files\java\jdk180_131\jre\lib\deployjarc:\program files\java\jdk180_131\jre\lib\javawsjarc:\program files\java\jdk180_131\jre\lib\jcejarc:\program files\java\jdk180_131\jre\lib\jfrjarc:\program files\java\jdk180_131\jre\lib\jfxswtjarc:\program files\java\jdk180_131\jre\lib\jssejarc:\program files\java\jdk180_131\jre\lib\management-agentjarc:\program files\java\jdk180_131\jre\lib\pluginjarc:\program files\java\jdk180_131\jre\lib\resourcesjarc:\program files\java\jdk180_131\jre\lib\rtjarc:\program files\java\jdk180_131\jre\lib\ext\access-bridge-64jarc:\program files\java\jdk180_131\jre\lib\ext\cldrdatajarc:\program files\java\jdk180_131\jre\lib\ext\dnsnsjarc:\program files\java\jdk180_131\jre\lib\ext\jaccessjarc:\program files\java\jdk180_131\jre\lib\ext\jfxrtjarc:\program files\java\jdk180_131\jre\lib\ext\localedatajarc:\program files\java\jdk180_131\jre\lib\ext\nashornjarc:\program files\java\jdk180_131\jre\lib\ext\sunecjarc:\program files\java\jdk180_131\jre\lib\ext\sunjce_providerjarc:\program files\java\jdk180_131\jre\lib\ext\sunmscapijarc:\program files\java\jdk180_131\jre\lib\ext\sunpkcs11jarc:\program files\java\jdk180_131\jre\lib\ext\zipfsjarc:\users\mina\documents\ideaprojects\testingmockito2\out\production\testingmockito2c:\users\mina\m2\repository\org\mockito\mockito-inline\2722\mockito-inline-2722jarc:\users\mina\m2\repository\org\mockito\mockito-core\2722\mockito-core-2722jarc:\users\mina\m2\repository\net\bytebuddy\byte-buddy\1611\byte-buddy-1611jarc:\users\mina\m2\repository\net\bytebuddy\byte-buddy-agent\1611\byte-buddy-agent-1611jarc:\users\mina\m2\repository\org\objenesis\objenesis\25\objenesis-25jarc:\users\mina\m2\repository\junit\junit\412\junit-412jarc:\users\mina\m2\repository\org\hamcrest\hamcrest-core\13\hamcrest-core-13jar"" comintellijrtexecutionjunitjunitstarter -ideversion5 testinterfacetostringorgmockitoexceptionsmisusingmissingmethodinvocationexception: when() requires an argument which has to be a method call on a mockfor example:    when(mockgetarticles())thenreturn(articles)also this error might show up because:1 you stub either of: final/private/equals()/hashcode() methods   those methods *cannot* be stubbed/verified   mocking methods declared on non-public parent classes is not supported2 inside when() you dont call method on mock but on some other object	at testinterfacetostringsetup(testinterfacetostringjava:20)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:497)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:24)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:51)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)process finished with exit code -1```cheersmina";"your jdk seems fairly outofdate could you update to a more recent version?that should probably fix the issueon mon 15 may 2017 02:56 mina asham <notifications@githubcom> wrote:> hi there>> i recently upgraded from mockito 195 to 2722 and some tests started> failed as mockito is unable to mock objecttostring() method on an> interface>> sample example that fails:>> import orgjunitbeforeimport orgjunittestimport orgmockitomockimport orgmockitomockitoannotations> import javautilset> import static orgjunitassertassertequalsimport static orgmockitomockitowhen> public class testinterfacetostring {>>     @mock>     private set set>>     @before>     public void setup() {>         mockitoannotationsinitmocks(this)>>         when(settostring())thenreturn(""bla"")>     }>>     @test>     public void testinterfacetostring() {>         assertequals(""bla"" settostring())>     }> }>> output:>> ""c:\program files\java\jdk180_45\bin\java"" -dideatestcyclicbuffersize1048576 ""-javaagent \program files\jetbrains\intellij idea 201712\lib\idea_rtjar58071 \program files\jetbrains\intellij idea 201712\bin"" -dfileencodingutf-8 -classpath ""c:\program files\jetbrains\intellij idea 201712\lib\idea_rtjarc:\program files\jetbrains\intellij idea 201712\plugins\junit\lib\junit-rtjarc:\program files\java\jdk180_45\jre\lib\charsetsjarc:\program files\java\jdk180_45\jre\lib\deployjarc:\program files\java\jdk180_45\jre\lib\javawsjarc:\program files\java\jdk180_45\jre\lib\jcejarc:\program files\java\jdk180_45\jre\lib\jfrjarc:\program files\java\jdk180_45\jre\lib\jfxswtjarc:\program files\java\jdk180_45\jre\lib\jssejarc:\program files\java\jdk180_45\jre\lib\management-agentjarc:\program files\java\jdk180_45\jre\lib\pluginjarc:\program files\java\jdk180_45\jre\lib\resourcesjarc:\program files\java\jdk180_45\jre\lib\rtjarc:\program files\java\jdk180_45\jre\lib\ext\access-bridge-64jarc:\program files\java\jdk180_45\jre\lib\ext\cldrdatajarc:\program files\java\jdk180_45\jre\lib\ext\dnsnsjarc:\program files\java\jdk180_45\jre\lib\ext\jaccessjarc:\program files\java\jdk180_45\jre\lib\ext\jfxrtjarc:\program files\java\jdk180_45\jre\lib\ext\localedatajarc:\program files\java\jdk180_45\jre\lib\ext\nashornjarc:\program files\java\jdk180_45\jre\lib\ext\sunecjarc:\program files\java\jdk180_45\jre\lib\ext\sunjce_providerjarc:\program files\java\jdk180_45\jre\lib\ext\sunmscapijarc:\program files\java\jdk180_45\jre\lib\ext\sunpkcs11jarc:\program files\java\jdk180_45\jre\lib\ext\zipfsjarc:\users\mina\documents\ideaprojects\testingmockito2\out\production\testingmockito2c:\users\mina\m2\repository\org\mockito\mockito-inline\2722\mockito-inline-2722jarc:\users\mina\m2\repository\org\mockito\mockito-core\2722\mockito-core-2722jarc:\users\mina\m2\repository\net\bytebuddy\byte-buddy\1611\byte-buddy-1611jarc:\users\mina\m2\repository\net\bytebuddy\byte-buddy-agent\1611\byte-buddy-agent-1611jarc:\users\mina\m2\repository\org\objenesis\objenesis\25\objenesis-25jarc:\users\mina\m2\repository\junit\junit\412\junit-412jarc:\users\mina\m2\repository\org\hamcrest\hamcrest-core\13\hamcrest-core-13jar"" comintellijrtexecutionjunitjunitstarter -ideversion5 testinterfacetostring>> orgmockitoexceptionsmisusingmissingmethodinvocationexception: when() requires an argument which has to be a method call on a mock> for example:>     when(mockgetarticles())thenreturn(articles)>> also this error might show up because:> 1 you stub either of: final/private/equals()/hashcode() methods>    those methods *cannot* be stubbed/verified>    mocking methods declared on non-public parent classes is not supported> 2 inside when() you dont call method on mock but on some other object	at testinterfacetostringsetup(testinterfacetostringjava:20)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:497)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:24)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:51)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)process finished with exit code -1>> using the class hashset instead of the interface set would make the class> work but this feels like a bug to me i havent seen anything in the> release notes about it am i missing something or is this a new bug?>> cheers> mina>> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> < or mute the thread> < > || update above for clarity also added some system specs and minified the example a bit || @timvdlippe is running a recent jdk version a hard requirement for mocking `final` classes/methods via `orgmockito:mockito-inline`? if so please state the minium version needed || @johnjohndoe there is not a minium jdk version for mockito but there are a small subset of errors that are jdk related and  in more recent versions i think all versions > 1845 are good enough for this subset || this is failing on 18131 anyways so i dont think it a jdk issuethis only fails with `orgmocker:mockito-inline` but works fine on `orgmockito:mockito-core` i suspect the inline mocker is not able to extend interfaces properly? || if it is also failing with the latest jdk it probably is an issue with bytebuddy-android cc @raphw  || yes its a bug in the inline mock maker fixed in attached pr || ";1;0;1083: interfaces only declare tostring implicitly and should therefore override it explicitly from the inline mock maker;
1091;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1088 : updating documentation of verify feature to correct a s…;updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut  pasted  and run verbatim.;;1088.0;1088 : updating documentation of verify feature to correct a s…;"updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatimthe documentation presents the following example of the verify exact number of invocations feature:    //using mock    mockedlistadd(""once"")        mockedlistadd(""twice"")    mockedlistadd(""twice"")        mockedlistadd(""three times"")    mockedlistadd(""three times"")    mockedlistadd(""three times"")        //following two verifications work exactly the same - times(1) is used by default    verify(mockedlist)add(""once"")    verify(mockedlist times(1))add(""once"")        //exact number of invocations verification    verify(mockedlist times(2))add(""twice"")    verify(mockedlist times(3))add(""three times"")        //verification using never() never() is an alias to times(0)    verify(mockedlist never())add(""never happened"")        //verification using atleast()/atmost()    verify(mockedlist atleastonce())add(""three times"")    verify(mockedlist atleast(2))add(""five times"")    verify(mockedlist atmost(5))add(""three times"")the last but one line says:    verify(mockedlist atleast(2))add(""five times"")this could be confusing to someone using these examples as it would result in a toolittleactualinvocations failure being reported by mockito this is because in the example the `add()` method is never called with the string `five times` in order to have this example make sense in the way i think it should ive replaced the string `five times` with `three times` as suggested by @szczepiq cheerstim cooke"; merging 1091 ;javadoc example throws unexpected exception;" verify(mockedlist atleast(2))add(""five times"") - would throworgmockitoexceptionsverificationtoolittleactualinvocationscorrecting this would help to make sure new devs are not confused by the verify use case there<img width""678"" alt""screen shot 2017-05-17 at 8 40 03 pm"" src""https://cloudentcom/assets/10499046/26181818/2241904c-3b41-11e7-8f71-6974d46d5579png"">";"what would you consider to be the correct behaviour here? at a push i might propose a slight change in naming to ""toofewactualinvocations"" but the core behaviour is the sameyour example is confusing because your ""atleast(2)"" verification is on add(""five times"") which suggests five invocations of add() with that string but there are no invocations with that stringwhat do you expect to see here? || i think the expectation is that the code works when it is copy pasted to ide and executed why dont we fix it by changing ""five times"" to ""three times""? do you want to contribute? please do! :) || oh wait i see now its a problem with [the documentation]( sure thing i can update that no problem || thanks folks  || ";1;0;1088 : updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut pasted and run verbatim;
1092;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix link to mockito junit rule heading;;;0;fix link to mockito junit rule heading;; merging 1092 ;;;;1;1;fix link to mockito junit rule heading;
1096;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;inorderimpl constructor signature;replace  list<? extends object>  in the constructor s argument list with a simpler  list<?> .;;0;inorderimpl constructor signature;replace `list<? extends object>` in the constructors argument list with a simpler `list<?>`the `extends object` adds nothing and just serves to confuse the reader; merging 1096 ` ;;;;1;1;"inorderimpl constructor signaturereplace list<? extends object> in the constructors argument listwith a simpler list<?>the ""extends object"" adds nothing and just serves to confuse thereader";
1118;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;argsmismatchfinder#getstubbingargmismatches generics;this patch allows calling  getstubbingargmismatches  with any  iterable   not just an  iterable<object>  in order to make it more convenient to use.;;0;argsmismatchfinder#getstubbingargmismatches generics;this patch allows calling `getstubbingargmismatches` with any `iterable` not just an `iterable<object>` in order to make it more convenient to useas seen in `argmismatchfindertest` this saves having to cast potential arguments to raw types; merging 1118 ;;;;1;1;argsmismatchfinder#getstubbingargmismatches genericsthis patch allows calling getstubbingargmismatches with any iterablenot just an iterable<object> in order to make it more convenient touseas seen in argmismatchfindertest this saves having to cast potentialarguments to raw types;
1119;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;made it possible to delay the return of a mock or spy.  (#1117);this is a useful aid in debugging race conditions and other synchronicity problems.;;1117.0;made it possible to delay the return of a mock or spy  (#1117);this is a useful aid in debugging race conditions and other synchronicity problems;" merging 1119  ";answer with delay in mock or spy to improve testing of asynchronous code;"im currently using mockito for component testing of microservices  all code should be run up to the boundary at which another microservice is called  in the component test the mocks return very quickly but obviously in integration testing the real calls return much more slowly  some threading problems are revealed by the slow returns that would have been revealed in the component test if the returns could be forced to come back more slowly  since integration tests are *painfully* slow to start this would save me the developer considerable time in debugging this kind of issue once i discover it in the integration testsbecause its so easy to write ive already solved it with a class called answerwithdelay  it takes another answer as a parameter and inserts a little sleep before it returnsif desired i can turn this little helper into a pr for mockito or perhaps theres already something there that does this that ive overlookedbest regardsmyrle```@runwith(springrunnerclass)@springboottest(webenvironment  springboottestwebenvironmentdefined_port        classes  {abstractrhythmtesttestconfigurationclass}        properties  {""rhythmuserhomer"" ""rhythmbeatcheckrate500""})public class abstractrhythmtest {  //  static class answerwithdelay<t> implements answer<t> {    private final int sleepytime    private final answer<t> answer    answerwithdelay(final int sleepytime final answer<t> answer) {      thissleepytime  sleepytime      thisanswer  answer    }    @override    public t answer(final invocationonmock invocation) throws throwable {      timeunitmillisecondssleep(sleepytime)      return answeranswer(invocation)    }  }  beat createbeat(          final string applicationidentifier          final string beatidentifier          final int alignmenthour          final localdatetime expectedbeattimestamp) throws interruptedexception {    final string tenantidentifier  tenantdatastorecontextgettenantname()    final beat beat  new beat()    beatsetidentifier(beatidentifier)    beatsetalignmenthour(alignmenthour)    mockitodoanswer(new answerwithdelay<>(2_000 new returns(optionalof(permittablegroupidsforapplication(applicationidentifier)))))when(beatpublisherservicespy)requestpermissionforbeats(matcherseq(tenantidentifier) matcherseq(applicationidentifier))    mockitodoanswer(new answerwithdelay<>(2_000 new returns(true)))when(beatpublisherservicespy)publishbeat(matcherseq(beatidentifier) matcherseq(tenantidentifier) matcherseq(applicationidentifier)            additionalmatchersor(matcherseq(expectedbeattimestamp) matcherseq(getnexttimestamp(expectedbeattimestamp))))    thistestsubjectcreatebeat(applicationidentifier beat)    assertasserttrue(thiseventrecorderwait(eventconstantspost_beat new beatevent(applicationidentifier beatgetidentifier())))    mockitoverify(beatpublisherservicespy mockitotimeout(2_500)times(1))requestpermissionforbeats(tenantidentifier applicationidentifier)    return beat  }  //}```";if the implementation is clean and generic i would be in favor of it || @szpak for what version is that feature planned (or has it been already released)? ||;1;0;made it possible to delay the return of a mock or spy  (1117);
1121;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;improve and develop apis required for framework integrators;### problem;;1110.0;improve and develop apis required for framework integrators;mockito does not do static mocking at the moment powermockito does powermockito uses a lot of internal mockito apis exposing the community to issues and wasted productivity on version upgrades we want mockito apis to be easily extensible by framework integrators such us powermockito without compromising api simplicity and consistencyall proposed changes are backwards compatible in accordance to mockitos compatibility contract (in short: limited changes to orgmockito* types freedom to change orgmockitointernal*)### public api changesthe full discussion on the use cases implementation options and decisions is in #1110 ticket1 new public method for creating mock creation settings object:```javamockitowithsettings()name(“my mock”)build(fooclass)```2 framework integrators can now provide custom mockhandler via ```mockmaker#getmockhandler()``` previously it we didn’t offer this capability because we didn’t have convincing use cases that it was needed### public api considerations1 framework integrators may **not** provide custom implementation of ```invocationcontainer``` at this stage this part of api is accessible via public ```mockmaker#getmockhandler()getinvocationcontainer()``` method there are no convincing use cases that exposing this new public api is needed;" merging 1121  ";powermock and mockmaker: api change request;hi guysive taken a time for reviewing powermock code to find place where it use internal mockito api id like to discuss what could be done to avoid first think that id like to talk about its mockmaker powermock uses it custom mockmaker which it past was used only for two things: - cache a class create by cglib- return fake `internalmockhandler` for static mocks the first case is no more actual because bytebuddy uses current context classloader so `mockclassloader` is used but the second case still actual but investigation shows that returning fake `internalmockhandler` is required only for one case right now method `orgmockitointernalexceptionsreporternomoreinteractionswanted(invocation undesired list<verificationawareinvocation> invocations)` tries to `safelygetmockname(undesiredgetmock())` finally call comes to `orgmockitointernalutilmockutilismock(object mock)` it tries to get `mockhandler` for mock but it mock is static and its not a powermockmaker then `null` is returned i was surprised that having `powermockmaker` is required  only for such thing if speak honestly i dont have any idea how it can be  on mockito site maybe you have any thoughts? the second point its a way how mockito loads plugins  we had some discussion within #1006 main point provided @podarsmarty (as for me main) that if there are two files `orgmockitopluginsmockmaker`  in class path then order of loading plugins are unpredictable such undetermined behaviour could introduce some fluky bugs when for example one plugin specified in project and other in  dependency jar and for example it works but later author of dependency jar make refactoring and change package or something like this as result other plugin is loaded by mockito  and tests start failed  for powermock it is issue because is has own `mockmaker` which is required only if test runs with powermock but unfortunately if powermock in class path it will be used always  if a developer wants to use `mock-maker-inline` to be able to mock final without powermock then it was impossible until powermock 170 where i added ability to specify  `mockmaker` to which `powermockmaker` delegates calls as for me it will be good to have ability to separate custom `mockmaker` and mockito build-in `mockmaker` so custom `mockmaker` could know which build-in `mockmaker` should be used to delegate call if its required;"@thekingnothing do you live in krakow? i spent most of my adult life in krakow )thank you for reaching out to us so that we can work together thats how this should be done - we design the apis between open source components so that our users get higher quality products (eg products that dont break on version upgrade :)im also surprised that those are the only issues with using mockitos private api something tells me there is more lets keep working on this an expose all integration points>method orgmockitointernalexceptionsreporternomoreinteractionswanted(invocation undesired list<verificationawareinvocation> invocations) tries to safelygetmockname(undesiredgetmock()) finally call comes to orgmockitointernalutilmockutilismock(object mock) it tries to get mockhandler for mock but it mock is static and its not a powermockmaker then null is returnedi was surprised that having powermockmaker is required only for such thing if speak honestly i dont have any idea how it can be  on mockito site maybe you have any thoughts?multiple methods from reporter class attempt to use safelygetmockname i assume you use nomoreinteractionswanted as an example getting mock name is only used to make verification errors cleaner its not a critical feature without it the errors are still decentto get started i suggest to hack mockito code and return empty string if getting mock name throws an exception this way you can push forward and identify other contention points once we get full picture we can design public api that will solve all use cases cases for integration with powermock>the second point its a way how mockito loads plugins we had some discussion within #1006 main point provided @podarsmarty (as for me main) that if there are two files orgmockitopluginsmockmaker in class path then order of loading plugins are unpredictable such undetermined behaviour could introduce some fluky bugs when for example one plugin specified in project and other in dependency jar and for example it works but later author of dependency jar make refactoring and change package or something like this as result other plugin is loaded by mockito and tests start failedi totally agree that random order of loading plugins is undesired we dont have a clean way of solving this problem at the moment it needs more brainstorming ideas are welcome :)>for powermock it is issue because is has own mockmaker which is required only if test runs with powermock but unfortunately if powermock in class path it will be used always if a developer wants to use mock-maker-inline to be able to mock final without powermock then it was impossible until powermock 170 where i added ability to specify mockmaker to which powermockmaker delegates calls as for me it will be good to have ability to separate custom mockmaker and mockito build-in mockmaker so custom mockmaker could know which build-in mockmaker should be used to delegate call if its requiredthis is an interesting use case let me understand it: an author of custom mockmaker would like to have access to default mockito mockmaker so that she can delegate some invocations to it? in mockito we can introduce public api to expose the default mock maker (or means to obtain the default mock maker) || > @thekingnothing do you live in krakow? i spent most of my adult life in krakow )yeah im living in krakow for one year nice city except winter time i mean issue with air in winter :) > im also surprised that those are the only issues with using mockitos private api something tells me there is moreits just begin i only started (demon laughing) there a lot of issue and thing todo powermock has been being developed for 9 years in isolation and there are a lot of hacks (sometimes really dirty)  i started with easiest issue all other could take more time to explain and fix: directly creating mocks registration invocation control creating mock handler verify static and so on > multiple methods from reporter class attempt to use safelygetmockname i assume you use nomoreinteractionswanted as an example no `nomoreinteractionswanted` and `nomoreinteractionswantedinorder`  its only one case right now all other methods which use `safelygetmockname` is not called in context of static mocking powermock handle all these cases by itself as result mockito `mockmaker` always can returns handler and mock name could be obtained> i totally agree that random order of loading plugins is undesired we dont have a clean way of solving this problem at the moment it needs more brainstorming ideas are welcome :)first of all it will be nice to show warning like jvm shows on mac ) a developer will be aware about issue i clear understand that most of developers are ignoring such messages but at least some of them will know that they test are unstable > objc[48004]: class javalaunchhelper is implemented in both /library/java/javavirtualmachines/jdk180_111jdk/contents/home/bin/java (0x103ae94c0) and /library/java/javavirtualmachines/jdk180_111jdk/contents/home/jre/lib/libinstrumentdylib (0x104b544e0) one of the two will be used which one is undefined> in mockito we can introduce public api to expose the default mock maker (or means to obtain the default mock maker)yeah it will be create to have ability to obtain default mock maker (or other plugin) instead writing something like `private final mockmaker cglibmockmaker  new cglibmockmaker()`   || >no nomoreinteractionswanted and nomoreinteractionswantedinorder its only one case right now all other methods which use safelygetmockname is not called in context of static mocking ok thanks! hack mockito codebase and keep pushing forward safely getting mock name is a simple issue to fix so lets move on and identify hard problems :)>first of all it will be nice to show warning like jvm shows on mac )we can show a warning id like us to brainstorm and understand what options we have here to fix this caveat this problem should be fairly common when plugin system is based of metadata declared in the classpath>yeah it will be create to have ability to obtain default mock maker (or other plugin) instead writing something like private final mockmaker cglibmockmaker  new cglibmockmaker()does powermock still use cglibmockmaker? this class no longer exists in mockito 2x codebase || > hack mockito codebase and keep pushing forward just to make sure that were on the same page does you mean to raise a pull request with the change on reporter?  || > does powermock still use cglibmockmaker? this class no longer exists in mockito 2x codebasepowermock have used  repackaged `cglibmockmaker` until version 170 ive dropped all repackaged cglib code a few hours ago i was going to release powermock 170 on next week but i think ill postpone it until issue with `saflygetmockname` will be fixed and released it will give me ability to delete powermockmaker and make code simple  || answers to your questions below :) thank you for pushing this forward!>just to make sure that were on the same page does you mean to raise a pull request with the change on reporter?i was hoping you can hack the code test locally if things work and expose harder problems i need to think a little bit about whats the best way to solve the reporterare you sure that there are no other ```import ""orgmockitointernal" in powermock codebase?>powermock have used repackaged cglibmockmaker until version 170 ive dropped all repackaged cglib code a few hours agogot it thank you! || i have investigated powermockito codebase and found out that the problem is that mockhandler api in mockito is not quite finished therefore powermockito had to create custom implementation of mockhandler despite our javadoc saying:> this api is work in progress do not provide your own implementations(im not complaining i very much sympathize many times i needed to resort to using internal api because i had no choice thanks again for engaging with us on cleaning the apis between both libraries!)@thekingnothing if we make the mockhandler api public will this work for you? ive initiated the efforts here:  my initial thought is that after #1121 is applied we can just move the internalmockhandler methods onto mockhandler and delete internalmockhandler in powermockito you can then create implementation of mockhandler that works with static mocking how does it sound? || im sorry i didnt have a time to answer earlier i was driving a car to prague and back im still limited in access and writing from mobile phone sorry for some inaccuracies> are you sure that there are no other import ""orgmockitointernal"" in powermock codebase?im sure that there are a lot of such places in codebase because powermock has package `orgpowermockapimockitointernal` where locate classes which either extends mockito internal api or provides hacks for it> @thekingnothing if we make the mockhandler api public will this work for you?as we discuss earlier if you resolve an issue with `saflygetmockname` then there will be no reason to implement `mockmaker` and `mockhandler` by powermock ill remove `powermockmaker` as result `powermockinternalmockhandler` will be removedlets move to another issue:-  to create a mock powermock uses mockmaker but to get an instance of mockmaker i have to call `pluginsgetmockmaker()` - internal api call- then to create a mock i have to pass a `mockhandler` to `createmock` i found only one way to do it use `mockhandlerfactory` - one more internal use- to create `mockhandler` the settings is required everything is pretty good with `mockitowithsettings` except that i need to set mock type- the instance of `mockhandler` is used to create `mockitomethodinvocationcontrol` this class is full of internal calls and dirty hacksbtw one of hack in `mockitomethodinvocationcontrol`  as i remember that it replaces a field in `mockhandler` by own copy-past implementation only for one purpose: fix and issue with getting mock name in `tostring()` so `saflygetmockname` not only place with such issue but i think i have to revisit this part of code and double check it if getting mock name works for nomoreinteractionswanted` it should work for `tostring` hmm maybe it will be better to keep powermockmackerbest regradsarthur zagretdinovon 12 jun 2017 at 06:57 szczepan faber <notifications@githubcom<mailto:notifications@githubcom>> wrote:i have investigated powermockito codebase and found out that the problem is that mockhandler api in mockito is not quite finished therefore powermockito had to create custom implementation of mockhandler despite our javadoc saying:this api is work in progress do not provide your own implementations(im not complaining i very much sympathize many times i needed to resort to using internal api because i had no choice thanks again for engaging with us on cleaning the apis between both libraries!)@thekingnothing< if we make the mockhandler api public will this work for you? ive initiated the efforts here: #1121< my initial thought is that after #1121< is applied we can just move the internalmockhandler methods onto mockhandler and delete internalmockhandler in powermockito you can then create implementation of mockhandler that works with static mocking how does it sound?—you are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || @thekingnothing just a question to understand the ""saflygetmockname"" problem: what is missing here on the mockito side or what is not working as you expect? do you get null as mock name?@szczepiq  as far as i can see internalmockhandler needs to be part of the public api since `mockutilgetmockhandler(t mock)` returns this type an other option would be to move itss methods to the super class || >@szczepiq as far as i can see internalmockhandler needs to be part of the public api since mockutilgetmockhandler(t mock) returns this type an other option would be to move itss methods to the super classyup thats the plan :) i was thinking of just moving those methods onto mockhandler and killing internalmockhandler thanks for joining the discussion! || >im sorry i didnt have a time to answer earlier i was driving a car to prague and back im still limited in access and writing from mobile phone sorry for some inaccuraciesno worries hopefully you had good time in prague!>as we discuss earlier if you resolve an issue with `saflygetmockname` then there will be no reason to implement `mockmaker` and `mockhandler` by powermock ill remove `powermockmaker` as result `powermockinternalmockhandler` will be removedmaking ""saflygetmockname"" lenient is only good for short term experimentation in the future other features of mockito will be accessing mockhandler in powermockito static scenarios and it can cause failures lets come up with a proper solution :) plus if we make mockhandler public powermockito use will be better: we will actually print decent static mock name in verification errorsplease give public mockhandler a second thought and get back to us with any feedback you would be able to keep powermockinternalmockhandler just make it extend public type mockhandler || > what is missing here on the mockito side or what is not working as you expect? do you get null as mock name?it throws `notamockexception` for case of static mocking the `saflygetmockname` tries to get mockhandler from mockmaker if powermock doesnt provide custom implementation  of `mockmaker` then mock handler is null and exception is thrownif `powermockmaker` is used then it leads to issues with `mock-maker-inline` for non-powermock testsas for me  consequences of  `powermockmaker` worse than empty empty string as mock namebest regradsarthur zagretdinovon 13 jun 2017 at 16:03 christian schwarz <notifications@githubcom<mailto:notifications@githubcom>> wrote:@thekingnothing< just a question to understand the ""saflygetmockname"" problem: what is missing here on the mockito side or what is not working as you expect? do you get null as mock name?@szczepiq< as far as i can see internalmockhandler needs to be part of the public api since mockutilgetmockhandler(t mock) returns this type an other option would be to move itss methods to the super class—you are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || >-  to create a mock powermock uses mockmaker but to get an instance of mockmaker i have to call `pluginsgetmockmaker()` - internal api callwe should be able to address this by adding public api for default mockmaker instance easy to address i havent put enough thought to it but it seems easy so lets move on to next problem> - then to create a mock i have to pass a `mockhandler` to `createmock` i found only one way to do it use `mockhandlerfactory` - one more internal usewhy do you need to create instances of mockhandlers? can you point some code? keep in mind that we are making mockhandler public so you should be able to provide your own implementation if needed> - to create `mockhandler` the settings is required everything is pretty good with `mockitowithsettings` except that i need to set mock typewhy setting mock type is problematic? is it for static mocking scenario? can you point some code?> - the instance of `mockhandler` is used to create `mockitomethodinvocationcontrol` this class is full of internal calls and dirty hacks:) we will resolve them all :)nice progress!i suggest we do this: i will push to my branch mockito with cleaned up mockhandler api you can build mockito jar from source from that branch and see how it fits powermockito use case lets see how much internal api we can resolve by cleaning up mockhandler api i will make changes on ""sf"" branch by the end of todaythanks again for working on this! || i have two concerns regarding keeping `powermockinternalmockhandler`1   it requires implementing `powermock` and leads to issue with `mock-maker-inline` 1   powermock never use `powermockinternalmockhandler`  by itself only for handling case ""static mock name`im entering on thin ice if i choice to keep `powermockinternalmockhandler` and have more logic in it  i have to keep in mind that powermock works with easymock as i see i have two options: have better integration with mockito but duplicate logic for easymock and mockito or implement some general things same for easymock and mockito but not use full power integration with mockito > why do you need to create instances of mockhandlers? can you point some code? keep in mind that we are making mockhandler public so you should be able to provide your own implementation if neededthe instance is used later to handle static/non-public method call  mockitomethodinvocationcontrol`  mockitomethodinvocationcontrol implements methodinvocationcontrol `methodinvocationcontrol` is a proxy for mockito and easymock api when method is called powermock looks for `methodinvocationcontrol` for the methods signature and delegates handling call to `methodinvocationcontrol` in mockito case `mockitomethodinvocationcontrol` uses  `mockhandler`  to handle method invocation ```invocation invocation  new invocationimpl(            interceptionobject            new delegatingmethod(method)            arguments            sequencenumbernext()            cleantracerealmethod            new locationimpl()        )                try {            return mockhandlerhandle(invocation)        } catch (notamockexception e) {            if (invocationgetmock()                          getclass()                          getname()                          startswith(""java"") && mockrepositorygetinstancemethodinvocationcontrol(invocationgetmock()) ! null) {                return invocationcallrealmethod()            } else {                throw e            }        } catch (mockitoassertionerror e) {            invocationcontrolassertionerrorupdateerrormessageformethodinvocation(e)            throw e        }``` [source]( why setting mock type is problematic? `mocksettings` does not have public method to set type > is it for static mocking scenario? can you point some code?i have to check when it is required  ```        final mocksettingsimpl<t> settings        final mockmaker mockmaker  getmockmaker()                if (mocksettings  null) {            settings  (mocksettingsimpl) mockitowithsettings()        } else {            settings  (mocksettingsimpl) mocksettings        }                if (isspy) {            settingsdefaultanswer(mockitocalls_real_methods)        }                settingssetmockname(new mocknameimpl(mockname))        //settingssettypetomock(type)                internalmockhandler mockhandler  mockhandlerfactorycreatemockhandler(settings)                t mock  mockmakercreatemock(settings mockhandler)```[source](  please give public mockhandler a second thought and get back to us with any feedback you would be able to keep powermockinternalmockhandler just make it extend public type mockhandler> i suggest we do this: i will push to my branch mockito with cleaned up mockhandler api you can build mockito jar from source from that branch and see how it fits powermockito use case lets see how much internal api we can resolve by cleaning up mockhandler api i will make changes on ""sf"" branch by the end of todayanyway im going to focus on release in near few days i have to clear documentation for the release after release ill build powermock with your change and check thank you for providing me help with it! :)  || thank you for all the information - it is super useful! i will work on the mockhandler api (this needs to be sorted out anyway) later i will reply with more details to your last comment || im making progress on exposing mockhandler api but it is taking more time than i have anticipated hah i love engineering :d !!!>im entering on thin ice if i choice to keep powermockinternalmockhandler and have more logic in it i have to keep in mind that powermock works with easymock as i see i have two options: have better integration with mockito but duplicate logic for easymock and mockito or implement some general things same for easymock and mockito but not use full power integration with mockitoi suspect that own implementation of mockhandler unavoidable mockutilgetmockhandler() is used in bunch of other places and fixing the reporter case with mock name will be a very short term solutionlets push forward with making mockhandler public i suspect that once this api is neatly public you should be able to implement powermockmaker that supports static mocking scenarios ill keep you posted on the progress! || @thekingnothing how can i try out powermockito? when i clone the repo and import it to idea tests dont work in idea this makes it hard to debug i love debugging to learn how stuff works can you tell me how do i import powermockito code to idea so that i can run some static mocking testing with powermockito? thanks in advance :) || > i suspect that own implementation of mockhandler unavoidable mockutilgetmockhandler() is used in bunch of other places and fixing the reporter case with mock name will be a very short term solutionokay im throwing in the towel :) ill keep own implementation of mockhandler in this case its hight important have ability use `pluginloader` to prevent issues like  @thekingnothing how can i try out powermockito? when i clone the repo and import it to idea tests dont work in idea this makes it hard to debug i love debugging to learn how stuff works can you tell me how do i import powermockito code to idea so that i can run some static mocking testing with powermockito?what issue did you have? have you tried to build it with gradle?  ive just cloned repository from master and imported to intellij idea as gradle project and was able to run static tests  anyway it was a tricky moment that modules depended on mockito had two test/source sets that pointed to same java source path it was done to be able to test same code against mockito 1x and mockito 2x ive created a new branch `mockito2` where i dropped supporting mockito 1x and removed all complicated logic from gradle could you try with the branch?  || > ive created a new branch mockito2 where i dropped supporting mockito 1x and removed all complicated logic from gradle could you try with the branch?i will try it thank you!>okay im throwing in the towel :) ill keep own implementation of mockhandler in this case its hight important have ability use pluginloader to prevent issues like powermock/powermock#811ok :) btw i made progress in my branch but its late and will check in the morning whats the status i think i managed to expose the api so that powermockito can stop depending on the internal api wrt to the mockhandler || @thekingnothing can you try out building mockito from ""sf"" branch? ""/gradlew build"" produces binaries ""/gradlew publishtomavenlocal"" builds and installs binaries to local maven repo things i changed: - mockhandler api is public and you can provide your own implementation :) just dont provide your own implementation of mockhandlergetinvocationcontainer() - you can create an instance of mockcreationsettings using a new public api: ""mockitowithsettings()name(""foo"")build()""let us know how it goes! || @szczepiq thank you! i built mockito from branch and tried to run(after all compile issues were resolved) and one major issue appeared `powermockitostubberimpl` has the method `addanswersforstubbing` which use deleted `mockhandlersetanswersforstubbing````    @suppresswarnings(""unchecked"")    private void addanswersforstubbing(mockitomethodinvocationcontrol invocationcontrol) {        final mockhandler mockhandler  invocationcontrolgetmockhandler()        final list list  whiteboxgetinternalstate(this listclass)        try {            whiteboxinvokemethod(mockhandler ""setanswersforstubbing"" list)        } catch (exception e) {            throw new runtimeexception(e)        }    }```what do you think better to do in this case?  || > you can create an instance of mockcreationsettings using a new public api: ""mockitowithsettings()name(""foo"")build()""great! now `powermockmaker` has been cleared from internal imports ```import orgmockitomockitoimport orgmockitoinvocationinvocationimport orgmockitoinvocationinvocationcontainerimport orgmockitoinvocationmockhandlerimport orgmockitomockmockcreationsettingsimport orgmockitopluginsmockmakerimport orgpowermockconfigurationglobalconfiguration```but i have to cast to `mocksettingsimpl` still in `defaultmockcreator` because if a `mocksettings` is specified i have two options: - implement logic of cloning `mocksettings` but it also requires using internal mockitos classes  - set name and type to existing `mocksettings`is it possible to add method to builder creating mocksetting from existing settings? || >but i have to cast to mocksettingsimpl still in defaultmockcreator because if a mocksettings is specified i have two options:i need to understand the use case more can you point out to the code?>set name and type to existing mocksettingsthis seems like a reasonable option would this work for you?happy we are making progress! || > i need to understand the use case more can you point out to the code?example from the `defaultmockcreator` i didnt commit code after refactoring  but its very close to old code```    private static <t> mocksettingsimpl<t> getmocksettings(final string mockname final class<t> type final boolean isspy final mocksettings mocksettings) {        final mocksettingsimpl<t> settings        if (mocksettings  null) {            settings  (mocksettingsimpl) mockitowithsettings()        } else {            settings  (mocksettingsimpl) mocksettings        }                if (isspy) {            settingsdefaultanswer(mockitocalls_real_methods)        }                settingssetmockname(new mocknameimpl(mockname))        settingssettypetomock(type)        return settings    }``` || >is it possible to add method to builder creating mocksetting from existing settings?there are 2 separate asks here:1 create settings object conveniently with the type2 creating settings object from other settings object (eg copy)i fully understand the use case behind 1) - in static mocking scenario you need custom mock handler with custom mock name i dont understand why we need 2) and the code sample does not explain why i hope you dont really need 2) given 1) is implemented )for 1) you can already do it with the code that i pushed to the branch new ""build"" public method: ```withsettings()build(fooclass)```let us know how things are and what your progress is! || > for 1) you can already do it with the code that i pushed to the branch new ""build"" public method: withsettings()build(fooclass)i change code in branch and use a new api it helps clear `powermockmaker` from internals calls where are a least two reason why the 2) is asked: 1 set default answer if `powermockitospy(class<t> type)` or `powermockitospy(t object)` (this part can be refactored if take into account that public api does not provide ability to create spy with settings)1 npe exception in `subclassbytebuddymockmaker` and `inlinebytebuddymockmaker` if mock type is not set but a user provides custom settings via ` mockstatic(class<?> classtomock mocksettings mocksettings)` for example ```javalangnullpointerexception	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakerprettifyfailure(subclassbytebuddymockmakerjava:90)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:77)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)	at orgpowermockapimockitomockmakerpowermockmakercreatemock(powermockmakerjava:50)	at orgpowermockapimockitointernalmockcreationdefaultmockcreatorcreatemethodinvocationcontrol(defaultmockcreatorjava:116)``````90:     if (mockfeaturesgettypetomock()isarray()) {            throw new mockitoexception(join(                    ""mockito cannot mock arrays: "" + mockfeaturesgettypetomock() + """"                    """"                    ) generationfailed)        }``` || thank you for working on this! i would love to see us getting to the conclusion - nice demonstration of 2 library owners working together to develop clean & flexible api :)>if take into account that public api does not provide ability to create spy with settingsheres how you can create spy with settings:```java        return mock(classtospy withsettings()                useconstructor()                defaultanswer(calls_real_methods))```>npe exception in subclassbytebuddymockmaker and inlinebytebuddymockmaker if mock type is not setcan you address this issue by making sure powermockito mocks have the mock type?where are we at this point? what are the remaining gaps? || > thank you for working on this! i would love to see us getting to the conclusion - nice demonstration of 2 library owners working together to develop clean & flexible api :)thank you for assisting me im also really happy to see how we move its a big win for community!  > can you address this issue by making sure powermockito mocks have the mock type? here we come to main reason why i asked ""creating settings object from other settings object (eg copy)"" i need ability to set mock type and mock name to already defined mock settings    || >here we come to main reason why i asked ""creating settings object from other settings object (eg copy)"" i need ability to set mock type and mock name to already defined mock settingsok :) can you point me to the code where it is needed? id like to fully understand the use case the previous code you showed did not validate this need or perhaps you you can walk me through the workflow that explains the need for copying settings object? ideally id like to grow public api in smallest possible steps to keep it cleanthank you for patience! || accidentaly closed :) || okay lets go through the flow the `powermockito` has methods:```    public static synchronized void mockstatic(class<?> type class<?> types) {        threadsafemockingprogressmockingprogress()reset()        defaultmockcreatormock(type true false null null (method) null)        if (types ! null && typeslength > 0) {            for (class<?> aclass : types) {                defaultmockcreatormock(aclass true false null null (method) null)     }   }   }``````    public static void mockstatic(class<?> classtomock mocksettings mocksettings) {        threadsafemockingprogressmockingprogress()reset()        defaultmockcreatormock(classtomock true false null mocksettings (method) null)  }  } }```both methods call `public <t> t createmock(class<t> type boolean isstatic boolean isspy object delegator                            mocksettings mocksettings method methods)`from `defaultmockgreator`but one method passes `mocksettings` provided by user the second passes `null` as result i have to check it later in `private static <t> mockdata<t> createmethodinvocationcontrol(final string mockname class<t> type                                                                 method methods boolean isspy object delegator                                                                 mocksettings mocksettings)````                if (mocksettings  null) {            settings  (mocksettingsimpl) mockitowithsettings()        } else {            settings  (mocksettingsimpl) mocksettings        }                if (isspy) {            settingsdefaultanswer(mockitocalls_real_methods)        }                settingssetmockname(new mocknameimpl(mockname))        settingssettypetomock(type)```if for the first case when `settings` is null i can use a new api and create a new settings with type but for the second case its impossible without using internal api  || thank you very much for very comprehensive description! with the new public api you can replace:```javasettingssettypetomock(type)```with:```settingsbuild(type) //this actually returns new object that you can use to create mocks```can you try it out and let me know if it works? || thank you! its my fall i was thinking that you added a method to an other class im sorry for misunderstanding now im getting stuck with setting name the following method is used to calculate mock name ```        private string toinstancename(class<?> clazz final mocksettings mocksettings) {        // if the settings define a mock name use it        if (mocksettings instanceof mocksettingsimpl<?>) {            string settingname  ((mocksettingsimpl<?>) mocksettings)getname()            if (settingname ! null) {                return settingname            }        }                // else use the class name as mock name        string classname  clazzgetsimplename()        if (classnamelength()  0) {            return clazzgetname()        }        // lower case first letter        return classnamesubstring(0 1)tolowercase() + classnamesubstring(1)    }```what could happen if powermock does not set a mock name? will be name set by default by mockito?  || >now im getting stuck with setting namein what way you are stuck?>what could happen if powermock does not set a mock name?try it out ) from looking at powermockito code i think you should be able to get it working: - i think that ""toinstancename"" method can be removed - in ""createmethodinvocationcontrol"" method when ""mocksettings"" is null just create new settings object and pass the desired mocked type to new ""build()"" method i have added to the public api (you need to use mockito branch i have created for you)hope that helps! || @thekingnothing friendly ping :) || thank you for reminding :) i have a personal issue so i dont have enough time right now but i hope ill find a few minutes to check it on next weekend || sounds good i [wrote an article]( what we are doing your name is there we need to finish it off :) || i still havent had time to check settings but i recall another issue after you moved the `setanswersforstubbing` from `mockhandler`could you check the [powermockitostubberimpl]( class? it has method that call `setanswersforstubbing` via reflection  what you can suggest to do in this case? ```    @suppresswarnings(""unchecked"")    private void addanswersforstubbing(mockitomethodinvocationcontrol invocationcontrol) {        final mockhandler mockhandler  invocationcontrolgetmockhandler()        final list list  whiteboxgetinternalstate(this listclass)        try {            whiteboxinvokemethod(mockhandler ""setanswersforstubbing"" list)        } catch (exception e) {            throw new runtimeexception(e)        }    }``` || ive finally got the time to look at and  after changing settings api  everything looks good now: test are green hence we can move to a next issue there are three mockitos internal imports are left in `defaultmockcreator`: * orgmockitointernalconfigurationpluginsplugins — is used to get `mockmaker` * orgmockitointernalhandlermockhandlerfactory — is used to get an instance of a `mockhandler` ill replace it by powermock implementation but this implementation will also use  internal classes like `mockhandlerimpl` and `nullresultguardian`* orgmockitointernalutilreflectionlenientcopytool — is used to copy values in case of spy  || fantastic! thank you!can you check in your changes to the branch so that i can poke around the new implementation? i should be able to get answers / suggestions on the way forward soon || ive already pushed my changes to mockito2 branch today in the morning || >ive already pushed my changes to mockito2 branch today in the morninggreat! i will pull the changes and look into the code sometime today || i looked at the state of things and more work is needed can you help me understand why powermock needs to explicitly create mockmaker instance to create mocks? submitted pr with the idea here:  || we probably need to get on a video call to close down this project faster :) || > we probably need to get on a video call to close down this project faster :)i think that it is a great idea im still limited in time but i hope it will be possible to schedule such call  || > can you help me understand why powermock needs to explicitly create mockmaker instance to create mocks? powermock uses  `mockitomethodinvocationcontrol` to handle static or non-public method invocation  new instance call and calls to system classes there are two implementations of the `methodinvocationcontrol`: `mockitomethodinvocationcontrol` and `easymockmethodinvocationcontrol` mockito implementation is heavy rely on `mockhanlder` powermock has to have access to mocks mockhandler one of the way that is used now its to create a instance of `mockhanlder` the create a mock with using the created mockhanlder and then pass the same instance to `mockitomethodinvocationcontrol` the second way create mock with settings by using public api then if possible cast mock to `mockaccess` and get mockhanlder both approaches use internal mockito api hmm ive just realized that there is one more way to achieve the same goal create mock with using public api and then get mockhandler from `mockutil` maybe its possible anyway powermock needs a public api to create a mock with settings and then get mockhandler for the mock  || >hmm ive just realized that there is one more way to achieve the same goal create mock with using public api and then get mockhandler from mockutil maybe its possibleyup thats exactly what im suggesting! can you try to go on that path? in the meantime ill figure out a way to offer public api to call ""handle"" method on the mockhandler || okay ill move forward with `mockutil` only one concern `mockutil` is internal class is it possible to provide public api to get `mockhandler` for mock?  || i am working on adding that public api please continue with assumptionthat this will be ready soon! )on sat jul 15 2017 at 10:05 arthur zagretdinov <notifications@githubcom>wrote:> okay ill move forward with mockutil only one concern mockutil is> internal class is it possible to provide public api to get mockhandler> for mock?>> —> you are receiving this because you modified the open/close state>>> reply to this email directly view it on github> < or mute the thread> < >-- szczepan faberfounder @  | twitter  @  || i  already did it and pushed change to mockito2 branch ive isolated most of dependency on mockito internals in two classes [mockhandleradaptor]( and [mockitomethodinvocationcontrol]( mockito api will be ready you have a way to tested it by replacing code in these two classes   || can you check out mockito sf branch? - see ```staticmockingexperimenttest``` that attempts to simulate static mocking with the current state of mockito api (i know it is crude but rome wasnt built in a day :) - getting mock handler: ```mockitomockingdetails(mock)getmockhandler()``` - creating invocation instances: ```mockitoframework()createinvocation()```i suspect that with that api you should be able to remove the internal api use completely please give it a shot :) || ill move powermock to a new api and come back with feedback asap  || fantastic thank you! || friendly ping :) || thank you for pingi looked at new api and your example i partially applied them but ive got stuck with replacing realmethod with callable i have to refactor powermock code to be able to pass target to mockitomethodinvocationcontroli hope ill have a time to finish with it on the weekend || sounds good let me know if you need anything from me || i closed the issue accidentally unfortunately i didnt have enough time to resolve all issues im continue working on it but i have a question about stubbing  how do you see the flow with using this api for stubbing in case of static/private methods ```  //register stubbed return value        doreturn(""hey"")when(mock)`````` || ok thank you for update! in sf branch of mockito project you canfind ""staticmockingexperimenttest"" in this test i simulated verificationand stubbing for static methods long term we can improve the api howeverfor now i hope its enough for you to experiment and get it working :) || @szczepiq thank you for your talk in krakow :) i was really glad to meet with you ive moved significantly since monday i about to manage all issue that was raised one think left to do - implementing verifyzeroiteration/verifynomoreiteration and here i have two issues: 1 verify in case of constructor call 1 verify static and current powermock api according to current powermock api verify static starts like replayall in easymock without pointing exactly a mock ```verifystatic()classwithstaticcallstatic()verifystatic()secondclasswithstaticcallstatic()```this issue im going to fix by making current api as deprecated in powermock 1x and replace  ``verifystatic(classwithstaticclass)classwithstaticcallstatic()```to fix first we need to thing about possibility to create an invocation for constructor  || youre welcome! i am very happy you are making progress!!!>this issue im going to fix by making current api as deprecated in powermock 1x and replace bythe suggested api looks good from the standpoint of consistency / familiarity with existing powermock api>to fix first we need to thing about possibility to create an invocation for constructorthis is really hard i was thinking about it recently and havent come up with anything useful yet will keep pondering about it || i think i found a way to deal with mocking new! how about we adapt constructor for method:```javainterface constructormethodadapter {  object construct(constructor constructor object  args)}```i simulated this idea in this new test please take a look at it ) test is already pushed to the sf branch || hey @thekingnothing with the ""constructormethodadapter"" trick you should be able to mock new is there any other gap we need to close down to clean up the interface? || i havent tried your approach yeti focused on deprecating `verifystatic` releasing the powermock 171 to let community know about incompatible changes  in powermock 20im finishing with removing `verifystatic` and i hope ill have a time to try your approach with `constructormethodadapter`best regradsarthur zagretdinovon 13 aug 2017 at 16:21 szczepan faber <notifications@githubcom<mailto:notifications@githubcom>> wrote:hey @thekingnothing< with the ""constructormethodadapter"" trick you should be able to mock new is there any other gap we need to close down to clean up the interface?—you are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || hi @szczepiq  how are you? :) i have a good news we about to finish there are two places are left in powermock where mockitos internal packages age importfirst place it is the annotation engine: powermock extends mockitos `spyannotationengine` and `injectingannotationengine` classes and use `powermockito` for cases when mockito cannot create a mock im going to rewrite this part and unify with easymock implementation with general logic like 1 call mocking framework engine with public api like `mockitoannotationinit()` in mockito case 1 catch exception and re-throw exception with modified message with suggestion to use powermock annotation on fields that cannot be mocked by mockito1 call powermock annotation inject engine the second place is more interesting powermock has to detect if invocation is already caught by mockito and mockito tries to invoke real method ```/*           * if we come here and it means that the class has been modified by           * powermock if this handler has a delegator (ie is in spy mode in           * the current implementation) and it has been caught by the mockito           * proxy before our mockgateway we need to know if the method is private           * or not because if the previously described preconditions are met and           * the method is not private it means that mockito has already processed           * the method invocation and we should not delegate the call to mockito           * again (thus we return proceed) if we would do that mockito will           * receive multiple method invocations to proxy for each method           * invocation for privately spied methods mockito havent received the           * invocation and thus we should delegate the call to the mockito proxy           */        final object returnvalue        if (iscanbehandledbymockito(method) && hasbeencaughtbymockitoproxy()) {            returnvalue  mockgatewayproceed        }```it has very ugly implementation right now ```    private boolean hasbeencaughtbymockitoproxy() {        stacktraceelement stacktrace  threadcurrentthread()getstacktrace()        stacktracefilter filter  new stacktracefilter()        /*        * we filter the stack-trace to check if ""mockito"" exists as a stack trace element (the filter method        * remove all mockito stack trace elements) if the filtered stack trace length is not equal to the original stack trace length        * this means that the call has been caught by mockito        */        final stacktraceelement filteredstacktrace  filterfilter(stacktrace true)        return filteredstacktracelength ! stacktracelength    }```   do you have idea how to avoid such dirty code?  || >hi @szczepiq  how are you? :) i have a good news we about to finishgreat! when we are ready i will need to spend some time to polish mockito changes and poll the community for feedback it probably will take me a week>first place it is the annotation engine: powermock extends mockitos spyannotationengine and injectingannotationengine classes and use powermockito for cases when mockito cannot create a mockyour idea with wrapping mockitos exceptions seems like a reasonable plan at the time being its not a clean solution but it feels that we should focus on the core use cases and eliminate the internal api use then we can make the solution perfecti am wondering how this powermockito api will blend with mockitos junit rule / mockito junit runner / mockitosession when we finish id like to help reviewing powermockito test coverage and possibly suggest few additions :)>the second place is more interesting powermock has to detect if invocation is already caught by mockito and mockito tries to invoke real methodvery interesting let me think about this use case can you point me to the code in powermockito codebase and what branch i can find your changes? || > very interesting let me think about this use case can you point me to the code in powermockito codebase and what branch i can find your changes?branch: 2x/mockito2 class `mockitomethodinvocationcontrol` > i am wondering how this powermockito api will blend with mockitos junit rule / mockito junit runner / mockitosession i think the same way as it work right now if a developer use powermockrunner then all fields annotated with  `@mock`  are created and injected into `@injectmocks` so there is no reason to use  mockitos junit rule / mockito junit runner  || thank you! i loaded powermockito to the idea and most tests worked :)i have some ideas how to approach the problem with mockitomethodinvocationcontrol im using ""samplespowermockitojunit4annotationbasedspyannotationtest#spyingonprivatemethodsworkswithspyannotation"" for debugging this use case ill let you know by the end of today whats up || i have been debugging the issue and submitted a pull request to powermock with an idea to tackle the private spy use case:  let me know if you can leverage this idea to move forward!thank you for working on this! || i have checked the pull request i think i have got your idea but it will work only in case if a mock is created with using `powermockito` but if a mock is created with using `mockito` and added to `@preparefortest` then it will be loop with stack overflow || > but if a mock is created with using `mockito` and added to `@preparefortest` then it will be loop with stack overflowthank you for review! can you point me to the unit test that demonstrates this use case? powermock documentation indicates that we need to use both `@preparefortest` and `powermockrunner` alltogether i have tried below but it does not seem to reproduce the scenario (test is based on existing ""spyannotationtest"" test class in the powermock codebase):```java@runwith(powermockrunnerclass)@preparefortest(privatepartialmockingexampleclass)public class spyannotation2test {	@test	public void spyingonprivatemethodsworkswithspyannotation() throws exception {		privatepartialmockingexample undertest  mockitospy(new privatepartialmockingexample())		final string expected  ""test value""		final string nameofmethodtomock  ""methodtomock""		final string input  ""input""		when(undertest nameofmethodtomock input)thenreturn(expected)		assertequals(expected undertestmethodtotest())		verifyprivate(undertest)invoke(nameofmethodtomock input)	}}``` || i have double checked the case that i meant its not an issue any more i think that  it was the issue with cglib approach because fix for the issue also included changes in cglib handlers and determining is class a proxyfor case that you debugged - your will work regarding what api is usedif powermock is used then marker will show that a method is already handledif mockito - then mockitoinvocationcontrol will not be createdone case better to check: verifying public methods for mocks created with powermock and  inline mock makeras i remember inline mock maker uses current thread context class loader to redefine class in case of powermock class loader powermock code will be injected at the beginning of redefined class as result powermock code could be called first || in what way powermock supports mockito’s plugins such as mockmaker? in what way the inline mockmaker is supported?in my ‘sf’ branch in mockito i added a new experimental public api so that you can get hold of default mockito plugins:```javamockitoframework()getmockitoplugins()getdefaultplugin(mockmakerclass)```however i am not sure how this api is useful because i see that powermock has some complexity around inline mock maker || > in what way powermock supports mockito’s plugins such as mockmaker? in what way the inline mockmaker is supported?powermock requires that there is no `orgmockitopluginsmockmaker` in classpath except one that locates in `powermock-api-mockitojar` in case if powermock is used and locates in classpath its needed to avoid possible issues when another mockmaker will be loaded instead `powermockmaker`but powermock provides ability to configure to which mockmaker the `powermockmaker` has to delegate calls > however i am not sure how this api is useful because i see that powermock has some complexity around inline mock makeryes ive already implemented another approach so it will not help me  || ive checked behaviour with inline-mock-maker and tests are passed i think you may start finalising public api and cleaning code ill do required changes on powermock side and then also clean and a bit refactor code   || >ive checked behaviour with inline-mock-maker and tests are passedgreat!>i think you may start finalising public api and cleaning code will do!>ill do required changes on powermock side and then also clean and a bit refactor codecan you make sure that none of the powermock code imports ""orgmockitointernal*"" packages? internal classes eg classes that reside underneath ""orgmockitointernal*"" can change without notice with any version of mockito those classes are not considered public api in current ""mockito2"" branch in powermock i still references to internal mockito classesdo i need to provide you public api to get hold of the default implementation of mockmaker (inline or not)? || > can you make sure that none of the powermock code imports ""orgmockitointernal"" packages? internal classes eg classes that reside underneath ""orgmockitointernal"" can change without notice with any version of mockito those classes are not considered public api in current ""mockito2"" branch in powermock i still references to internal mockito classesi can find several places where `orgmockitointernal` is mentioned in code:1 annotation processing - will be rewritten not an issue 1 checking if method was called - as ill change it as we discuss 1 several test - some of them will be refactored for some of them its not a big deal because string `orgmockitointernal` is used just as test data1 configuration - using `mock-maker-inline` as alias `orgmockitointernalcreationbytebuddyinlinebytebuddymockmaker` - it has to be changed maybe > do i need to provide you public api to get hold of the default implementation of mockmaker (inline or not)?no i dont need a public api for getting an instance of `mockmaker` but it will be useful to get class of default mockmaker or class base on alias   || thank you for reviewing the code!>no i dont need a public api for getting an instance of mockmaker but it will be useful to get class of default mockmaker or class base on aliasi see let me know if you need the instance exposing implementation class name is something i would like to avoid because the implementation class is internal and we want the flexibility of replacing it if needed i can provide you the instance but if you dont need the instance id rather implement as little new public api as possiblethat said i do believe that you need public api from mockito to give you the instance of default mockmaker :) please confirm || that i really need chain of response for mockmaker with ability setting order/priorities in this case i will put powermockmaker first in the chain handle call only for mock created with powermockito and continue chain otherwisesecond option- its get an insane of `mockmaker` base on class name or allies  because powermock provides the same flexibility as mockito a developer may specify a class or allies in configuration || from our conversation and my understanding how powermock works it looks like you need access to default mockmakers ) ill provide api for that i think it is a reasonable addition to mockito public api || access to instance of default mockmaker will not help me because ill still create an instance of inlinemockmaker which locates in internal packagesupporting of inline maker is one of higher demanded featurebest regradsarthur zagretdinovon 18 aug 2017 at 19:07 szczepan faber <notifications@githubcom<mailto:notifications@githubcom>> wrote:from our conversation and my understanding how powermock works it looks like you need access to default mockmakers ) ill provide api for that i think it is a reasonable addition to mockito public api—you are receiving this because you were mentionedreply to this email directly view it on github< or mute the thread< || main idea is that android developers especially kotlin developers want to use powermock for mocking static methods and mockito for any other purpose like mocking final classes but mockito allows to declare only one mockmaker in class path so if powermock put the file for in jar as it is done now then a developer cannot declare and use inline mockmaker  || for what it is worth i opened a ticket for both mockito and powermock toaddress this but it was closed saying it will be addressed in mockito 3 ihave old branches that allow a user to switch manually || there is no reason to provide ability for manual switching it will face the same issue - using mockito and powermock internal packages || ive added new public api and changed existing api in my experimental branch sf please try it out before i start polishing the code further herere the changes i made:```java//for mockmakers:mockitoframework()getplugins()getdefaultplugin(mockmakerclass)mockitoframework()getplugins()getinlinemockmaker()//changed a little bit how invocations are created:mockitoframework()getinvocationfactory()createinvocation()```please confirm that this is all we need to get rid of all ""orgmockitoninternal"" from powermock codebase || exciting :) were almost done! || once this process is completed we should publish a new version to mavencentral and announce on like twitter i have been following this thread fora while now this is great work! || thank you! i agree completely i am also looking forward to the happy ending :) || > please confirm that this is all we need to get rid of all ""orgmockitoninternal"" from powermock codebasei confirm ive just push changes where ""orgmockitoninternal"" is used only in one place it is annotation processing as i mentioned earlier im going create a additional task for it and completely rewrite this part because easymock version also have such problem im going to create a one annotation engine for mockito and easymock  || ive started code clean up and one interesting idea came to my mind if im able to create a custom implementation of `mockitosettings` then ill implement all mock creating logic in `powermockcreator` instead using custom class that uses `mockitomock` in this case `powermockito` could delegate all calls to `mockito` with custom `mockitosettings` what do you think?  || > i confirm ive just push changes where ""orgmockitoninternal"" is used only in one placefantastic!!!>ive started code clean up and one interesting idea came to my mind if im able to create a custom implementation of mockitosettings then ill implement all mock creating logic in powermockcreator instead using custom class that uses mockitomockdo you mean something like that:```java//instead:powermockitomockstatic(myclassclass mockitowithsettings()name(""foo""))//you would do:mockitomock(myclassclass powermockitowithsettings()staticmock()name(""foo""))```very interesting! can you scope this and list down the pros & cons of both approaches?cons: - mockito teams considers adding new methods to mocksettings as compatible changes because we dont recommend mocksettings to be subclassed we need that ability otherwise we would have to ship a major version of mockito every time we add a new method to ""mockito"" or ""mocksettings"" classes if you provide custom interface that extends mocksettings you might be exposed to incompatible changes with minor versions of mockito we could potentially discuss this point and figure out a solution that would work for powermockito - new api would be different from what your users are accustomed to and might be more problematic to roll out discourage from upgrading users still have to know about powermockito static method entry point regardless if it is powermockitomock or powermockitowithsettingsprons (im not sure you can help out with this): - are you looking to remove powermockito class and have less code to maintain? is it the goal that sparked this idea? - it would be cool to unify the api so that to use powermockito the one uses normal mockito api and drops some annotation to the class or method to signify to use powermockito behind the hood it does seem like a lot of work thoughhope that helps! || > are you looking to remove powermockito class and have less code to maintain? is it the goal that sparked this idea?no im not going to drop `powermockito` because is has api for new and private code mocking i thinking about putting code that create mock in one place right now the creating mock logic is spread between at least two classes: `powermockmaker` and `defaultmockcreator` first implements mockitos interface and has logic with handler and so on the second is use to create mock by powermock and validate mock (duplicates `typemockability`)>  do you mean something like that:> //instead:> powermockitomockstatic(myclassclass mockitowithsettings()name(""foo""))> //you would do:> mockitomock(myclassclass powermockitowithsettings()staticmock()name(""foo""))its one of the option `powermockito` will still have `mockstatic` as shortcut for `powermockitowithsettings()staticmock()` > it would be cool to unify the api so that to use powermockito the one uses normal mockito api and drops some annotation to the class or method to signify to use powermockito behind the hood it does seem like a lot of work thoughi agree that it will be nice to have powermock as plugin to mockito for mocking cases such as mock static system and new all these 3 cases could be covered by using java agent and class redefining with using bytebuddy and without using custom class loader  || i think that we can stop for now make mockito release with new api first beta powermock 20 and continue discuss feature change we have achieved our goal - removing using mockito private api  || i have raised a pull request  to merge all change and prepare for release im waiting only while mockito code will be cleaned and released  || sounds good were on it! || i made first pass on the changes and the public api looks good we are not far from being ready to merge!### new public apiorgmockitomocksettings#buildorgmockitomockingdetails#getmockhandlerorgmockitomockitoframework#getpluginsorgmockitomockitoframework#getinvocationfactorydeprecated orgmockitointernalinternalmockhandlerorgmockitoinvocationinvocationcontainerorgmockitoinvocationinvocationfactoryorgmockitoinvocationmockhandler#getmocksettingsorgmockitoinvocationmockhandler#getinvocationcontainerorgmockitonotextensible### todo @szczepiq1 verify powermock needs it2 add missing documentation / tests3 add (@)since tag || mockito 2100 has been published!!! wooot!nice work everybody it tooks us 3 months but we made it :) @thekingnothing let us know if you need something! || yeah! it was a great job @szczepiq thank you a lot for help! im preparing a first beta release with using mockito public api  || @thekingnothing how are things? were you able to push a stable release of powermock with new version of mockito? do you need help? is there a ticket in powermock that we can track?cheers! || @szczepiq im continue working on powermock 200 release but its too early to talk about a stable release i focused on jdk 90 support in past two weeks which was required for kafka and maven surefire ( i also dropped the first public beta with supporting new mockito api and im collecting first issues like  yes there is a ticket where all issues to fix/implement are listed  || ";1;0;merge branch release/2x into sf;
1122;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;made it possible to delay the return of a mock or spy (#1117);a cherry-picked version of #1119 for the 2.x branch.;;1117.0;made it possible to delay the return of a mock or spy (#1117);a cherry-picked version of #1119 for the 2x branch;yup in master there are not checkstyle verification || thats because the backport wasnt finished yet :( havent had time to dive into the failing tests there ||  merging 1122  the change to 2x! ||;answer with delay in mock or spy to improve testing of asynchronous code;"im currently using mockito for component testing of microservices  all code should be run up to the boundary at which another microservice is called  in the component test the mocks return very quickly but obviously in integration testing the real calls return much more slowly  some threading problems are revealed by the slow returns that would have been revealed in the component test if the returns could be forced to come back more slowly  since integration tests are *painfully* slow to start this would save me the developer considerable time in debugging this kind of issue once i discover it in the integration testsbecause its so easy to write ive already solved it with a class called answerwithdelay  it takes another answer as a parameter and inserts a little sleep before it returnsif desired i can turn this little helper into a pr for mockito or perhaps theres already something there that does this that ive overlookedbest regardsmyrle```@runwith(springrunnerclass)@springboottest(webenvironment  springboottestwebenvironmentdefined_port        classes  {abstractrhythmtesttestconfigurationclass}        properties  {""rhythmuserhomer"" ""rhythmbeatcheckrate500""})public class abstractrhythmtest {  //  static class answerwithdelay<t> implements answer<t> {    private final int sleepytime    private final answer<t> answer    answerwithdelay(final int sleepytime final answer<t> answer) {      thissleepytime  sleepytime      thisanswer  answer    }    @override    public t answer(final invocationonmock invocation) throws throwable {      timeunitmillisecondssleep(sleepytime)      return answeranswer(invocation)    }  }  beat createbeat(          final string applicationidentifier          final string beatidentifier          final int alignmenthour          final localdatetime expectedbeattimestamp) throws interruptedexception {    final string tenantidentifier  tenantdatastorecontextgettenantname()    final beat beat  new beat()    beatsetidentifier(beatidentifier)    beatsetalignmenthour(alignmenthour)    mockitodoanswer(new answerwithdelay<>(2_000 new returns(optionalof(permittablegroupidsforapplication(applicationidentifier)))))when(beatpublisherservicespy)requestpermissionforbeats(matcherseq(tenantidentifier) matcherseq(applicationidentifier))    mockitodoanswer(new answerwithdelay<>(2_000 new returns(true)))when(beatpublisherservicespy)publishbeat(matcherseq(beatidentifier) matcherseq(tenantidentifier) matcherseq(applicationidentifier)            additionalmatchersor(matcherseq(expectedbeattimestamp) matcherseq(getnexttimestamp(expectedbeattimestamp))))    thistestsubjectcreatebeat(applicationidentifier beat)    assertasserttrue(thiseventrecorderwait(eventconstantspost_beat new beatevent(applicationidentifier beatgetidentifier())))    mockitoverify(beatpublisherservicespy mockitotimeout(2_500)times(1))requestpermissionforbeats(tenantidentifier applicationidentifier)    return beat  }  //}```";if the implementation is clean and generic i would be in favor of it || @szpak for what version is that feature planned (or has it been already released)? ||;1;0;fix checkstyle violation + add @since tags;
1125;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo: remove repeated  a;;;0;"fix typo: remove repeated ""a""";; merging 1125 ;;;;1;1;"fix typo: remove repeated ""a""";
1128;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;improve detection on non-mockable types - byte buddy 1.6.14->1.7.0;stronger assertions on class loader origin when choosing what methods are mockable.;;0;improve detection on non-mockable types - byte buddy 1614->170;stronger assertions on class loader origin when choosing what methods are mockable; merging 1128 ;;;;1;1;addresses #1064: stronger assertions on class loader origin when choosing what methods are mockable;
1136;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1135: properly resolve visibility bridges.;resolve the method hierarchy by byte buddy s method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect.;;1135.0;1135: properly resolve visibility bridges;resolve the method hierarchy by byte buddys method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect; merging 1136 ;[mock-maker-inline] method calls on mock forwarded to real instance;"with mock-maker-inline enabled given package-private abstract class superclass and a public subclass subclass a mocked instance of subclass sometimes incorrectly calls into real methods on the super class heres a super simple example where im able to reproduce this:```/*pkg private*/ abstract class superclass {    public abstract string getstring()    public void getstringlength() {        getstring()length()    }}public class subclass extends superclass {    @override    public string getstring() {        return ""foo""    }}```and then in a test:```public class mytest {    @rule public final mockitorule mmockitorule  mockitojunitrule()    @mock private subclass mmocksubclass    @test    public void dotest() {        mmocksubclassgetstringlength()    }}```this would fail with the following exception because the real getstringlength() method on superclass is being called:```javalangnullpointerexception	at comexamplesuperclassgetstringlength(superclassjava:7)	at comexamplesubclassgetstringlength(subclassjava:3)	at comexamplemytestdotest(mytestjava:15)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgmockitointernaljunitjunitrule$1evaluatesafely(junitrulejava:63)	at orgmockitointernaljunitjunitrule$1evaluate(junitrulejava:43)```interestingly enough if superclass visibility is changed from package private to public then things work just fine this is a pretty critical problem for us since we are trying to mock some library classes that we dont control and this is the class hierarchy the library has";;1;0;1135: properly resolve visibility bridges;
1137;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;don t use raw rypes in unusedstubbingstest;use generic specification instead of casting to the raw list type in order to make it a bit stricter.;;0;dont use raw rypes in unusedstubbingstest;use generic specification instead of casting to the raw list type in order to make it a bit stricternote that when we move to java 8 language level these workarounds could be completely removed as the built in type inference should handle it; ;;;;1;1;dont use raw rypes in unusedstubbingstestuse generic specification instead of casting to the raw list type inorder to make it a bit stricternote that when we move to java 8 language level these workaroundscould be completely removed as the built in type inference shouldhandle it;
1146;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;enable stubonly() on @mock annotation;since issue #86   withsettings() has a api stubonly() which speed up mocked stub a lots.;;86.0;enable stubonly() on @mock annotation;since issue #86  withsettings() has a api stubonly() which speed up mocked stub a lotsin my case stubonly() huge amount of test overhead stacktrace and avoid invocation footprint list grow too large and cause oomhowever  the api is not available with `@mock` annotationi had to move tens of mock annotation from `@mock foo foo` into `mockitomock(fooclass withsetting()stubonly())````@mock(stubonlytrue)public foo lightweight```suggest adding the above api for convenience check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 1146  < ;new lightweight stub-only mocks for scenarios where high performance is needed;"it is possible to create ""stub-only"" mocks that dont track invocations and hence might be useful for scenarios where low memory footprint / high speed is desired``` javafoo lightweight  mock(fooclass withsettings()stubonly())```for more information please see: https://codegooglecom/p/mockito/issues/detail?id84";;1;0;add test on mockannotationprocessor for @mock(stubonly  true);
1157;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add tests to verify and show that @spy can be used to allow stubbing/verification of list parameters using varargs.;hi  i thought about sending an email first but then figured that i d probably put in the test code as the example anyway  which is what this pr is all about.;;0;add tests to verify and show that @spy can be used to allow stubbing/verification of list parameters using varargs;hi i thought about sending an email first but then figured that id probably put in the test code as the example anyway which is what this pr is all aboutim not completely sure that there isnt already a better way to go about stubbing list params if there are im happy to learn! :);while the test code should be self explanatory heres a more sales-friendly exampleassuming the test wants to stub the following interface:```javainterface batchsender {  result send(list<unitofwork> batch)}```and if `unitofwork` has a lot of uninteresting data that the test doesnt care about its typical that one wants to use matchers for stubbingbut matchers dont work for list elements by default one might craft some kind of `doanswer()` statement to do this but it will be verbose and not static type safe`@spy` provides an alternative all one needs is to create a simple delegating abstract class:```javaclass footest {  @spy private mockbatchsender batchsender  @test public void testbatch() {    when(batchsendersend(same(work1) eq(work2) isnotnull())        thenreturn(ok)    // now invoke sut that calls batchsender  }  abstract static class mockbatchsender {    @override public final result send(list<unitofwork> batch) {       return send(batchtoarray(new unitofwork[0]))    }    // tests can stub/verify using this varargs friendly method    abstract result send(unitofwork batch)  }}``` ||   i am all for increasing our test coverage but i am not sure what this test tries to achieve is there an existing bug that is uncovered by this test? (even though the build and thus the test is passing) are you missing something in our documentation and should we thus add it there as an example? || this test code serves as proof that the usage pattern documented in thiswiki< advertised and as a guard against regressionon wed oct 4 2017 at 4:46 am tim van der lippe <notifications@githubcom>wrote:> i am all for increasing our test coverage but i am not sure what this> test tries to achieve is there an existing bug that is uncovered by this> test? (even though the build and thus the test is passing) are you missing> something in our documentation and should we thus add it there as an> example?>> —> you are receiving this because you modified the open/close state> reply to this email directly view it on github> < or mute> the thread> < > ||;;;;1;1;test that list of matchers (which is the main point of using @spy) works;
1162;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix for #1155 thenthrow(class);fix for #1155;;1155.0;fix for #1155 thenthrow(class);fix for #1155 mockitothenthrow(class) now fails when the given throwable type is not declared on the stubbed method;"the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributors || >the build fails for jdk7 seem like an ci problem: execution failed for task :fetchallcontributorsi will look into that thank you ||  merging 1162  ";thenthrow(class) should only throw checked exceptions that match the signature of the stubbed method;hi- mockito-core 2847```javapublic class footest {    @test(expected  mockitoexceptionclass)    public void using_thenthrow_throwable() {        c mock  mock(cclass)        // set a checked exception that does not matche the method signature        when(mockdoit())thenthrow(new exception())    }    @test(expected  mockitoexceptionclass)    public void using_thenthrow_class() {        c mock  mock(cclass)        // set a checked exception that does not matche the method signature        when(mockdoit())thenthrow(exceptionclass)    }    static class c {        string doit() {            return null        }    }}````using_thenthrow_throwable()` passes but `using_thenthrow_class()` fails```javalangassertionerror: expected exception: orgmockitoexceptionsbasemockitoexception```the javadoc of `ongoingstubbing#thenthrow(class)` says *if the throwable class is a checked exception then it has to match one of the checked exceptions of the stubbed method signature*however the result of `using_thenthrow_class()` shows that it is not so;i am going to fix this throwsexceptionclass must simply implement validableanswer || thank you for reporting indeed it is a bug ||;1;0;added more tests;
1181;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;#1179: fix performance regression caused by use of method graph compiler.;in order to properly discover visibility bridges  we have to run a full analysis of the method graph. the compilation of this method graph is rather expensive and we require to cache a computed graph. the caching is however non-trivial as it references classes which might be unloaded. in order to avoid a leak  we cache classes using non-strong references.;;1179.0;#1179: fix performance regression caused by use of method graph compiler;in order to properly discover visibility bridges we have to run a full analysis of the method graph the compilation of this method graph is rather expensive and we require to cache a computed graph the caching is however non-trivial as it references classes which might be unloaded in order to avoid a leak we cache classes using non-strong referencesthis requires some real-world experience to discover if this caching mechanism suffices; merging 1181  < ;mockito 290 is significantly slower;we just tried to upgrade to mockito 290 (from 2847) and found that our individual tests went from about 1 second to run per test to about 24 seconds to run per testwe tried to find which release version causes the tests to run slow and found that version 2850 is the first version that causes the slowdown (versions 2848 and 2849 run fine)our environment:- java 180_144- android gradle project (using gradle 41 and android studio 30 beta3)- kotlin 114-2- junit 412other test dependencies- dagger 211- threetenbp:136- orgxerial:sqlite-jdbc:3200;"@raphw seems to be #1136 is the culprit any insight or immediate thoughts about it? || @jeffdcamp thanks for the description are you using the android mock maker or the final mock maker? could you attach a profiler when running the tests to see what takes so much time?just to be sure: you verified that 2850 causes the same performance problems? || if you are using the final mock maker i see how the resolution could be problematic using the method graph compiler this is quite expensive and i did not think much about it when implementing the correct solution we should definetly cache the result || @jeffdcamp could you build mockito from the branch `performance-fix` and try it out? i wonder if that fixes the regression  @raphw  we are not using ""android mock maker or the final mock maker""   yes 2850 is the version that causes the slowdowns (we tried both  2848 and 2849 and those 2 versions work fine)ill try to perform a build of mockito ""performance-fix"" branch || @raphw i just built the ""performance-fix"" branch and changed the dependency on our project to ""291"" and that did not fix the slow downthe following is using version 291 (note the long run times):( following is using version 2847:![image]( || and you really get the same behavior in 2850? this seems unlikely if you are not using the inline mock maker (are you sure you have no mock maker configured?) the only change from 2849 to 2850 is in the class `mockmethodadvice` which should not even get loaded unless you are using the mock maker in which case the versions should be identicalmaybe the performance regression happens with 2849 too? this would make more sense as it includes a major version update of byte buddycould you run the tests while profiling with something like jprofiler (there is a free trial) to see where the tests spend their time compared to before the update? || @raphw i just went to the git log and checked-out and built revision "" flaky bintray badge szczepan faber* 6/22/17 4:16 pm (1a60a8496d4b704cac115608ca67840c7d8a6865)"" and tests runs fast i then checked-out revision and built revision ""1135: properly resolve visibility bridges (#1136) rafael winterhalter* 6/24/17 2:29 am (fa66960eeb74473822fe9081246f360964da6023)"" and the tests run slowill see what i can do to profile || thanks for investigating! this is just super strange i have no idea how this could affect the subclass mock makerwhen profiling with jprofiler run a cpu sample for the `orgmockito` and `netbytebuddy` namespaces || @raphw is it possible that when tests are run/executed in android studio / intellij it might cause mock maker fire off? (sorry i dont know much about ""mock maker"") || that should not happen for kotlin it might however make sense as most types are final by defaultyou can set a break point in the `mockutil::createmock` method and see what instance of `mockmaker` you have (inline or subclass) to see what plugin is loaded || it appears to be ""inlinebytebuddymockmaker"" || in this case you are using the inline mock maker to support mocking of final types i am afraid that the lookup of visibility bridges still takes too long i will try to further improve the runtime || awesome!  let me know if there is anything else you would like me to test/try/identify || i tried caching the entire graph could you try the performance-fix branch once more? || its fixed!the latest code on the ""performance-fix"" branch is back to expected speeds!  good work! || its still preliminary as it leaks memory unfortunately i have to work a bit more with it before merginggood to know that the approach is right though! thanks for checking || let me know if you would like me to rerun my tests with updated code || thanks @jeffdcamp for the report and awesome @raphw to find the fix so quickly    || does the inline work for you in 290? several tests here fail when mocking kotlin classes but work in 2847 || @paulwoitaschek take a look at the #1183 || ";1;0;#1179: fix performance regression caused by use of method graph compiler;
1186;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;compare method of graph to defined form of method.;1180: compare against non-generic method when deciding if a method should be stubbed.;;1180.0;compare method of graph to defined form of method;1180: compare against non-generic method when deciding if a method should be stubbed; merging 1186 ` ;stubbing superclass method using mockito inline propagate to the real method call;"hi my java env is ```java version ""180_74""java(tm) se runtime environment (build 180_74-b02)java hotspot(tm) 64-bit server vm (build 2574-b02 mixed mode)```os version`macos sierra 10126`mockito version: `mockito-inline:290`for this simple snippet:```    public class stringlist extends arraylist<string>{    }```then stubbing the size() method```stringlist stringlist  mock(stringlistclass)doreturn(10)when(stringlist)size()```stringlistsize() will always return 0 and size() is acually called in arraylist instread of the stubthe above code works perfectly with mockito-core for a workaround stringlist can be written in ```    public class stringlist extends arraylist<string>{        @override        public int size(){            return 0        }    }```then size() can be stubbedi only need mockito inline to mock a single final class in one test case but mockito-inline took over my entire modules unit tesst im wondering if theres a way to choose mockito-core or inline for each test?and im not sure if this is related if stub in this way` when(stringlistsize())thenreturn(11)`mockito reports> orgmockitoexceptionsmisusingmissingmethodinvocationexception: > when() requires an argument which has to be a method call on a mock> for example:>     when(mockgetarticles())thenreturn(articles)> > also this error might show up because:> 1 you stub either of: final/private/equals()/hashcode() methods>    those methods *cannot* be stubbed/verified>    mocking methods declared on non-public parent classes is not supported> 2 inside when() you dont call method on mock but on some other object";"if i am not mistaken we explicitly disallow mocking of such data classesif you need to stub a list then just create a list with the value youexpect for more information see wed 30 aug 2017 07:49 hu yao <notifications@githubcom> wrote:> hi my java env is>> java version ""180_74""> java(tm) se runtime environment (build 180_74-b02)> java hotspot(tm) 64-bit server vm (build 2574-b02 mixed mode)>> os version> macos sierra 10126>> mockito version:> mockito-inline:290>> for this simple snippet:>>     public class stringlist extends arraylist<string>{>>     }>> then stubbing the size() method>> stringlist stringlist  mock(stringlistclass)> doreturn(10)when(stringlist)size()>>> stringlistsize() will always return 0 and size() is acually called in> arraylist instread of the stub> the above code works perfectly with mockito-core for a workaround> stringlist can be written in>>     public class stringlist extends arraylist<string>{>         @override>         public int size(){>             return 0>         }>     }>> then size() can be stubbed> i only need mockito inline to mock a single final class in one test case> but mockito-inline took over my entire modules unit tesst im wondering> if theres a way to choose mockito-core or inline for each test?>> and im not sure if this is related if stub in this way> when(stringlistsize())thenreturn(11)> mockito reports>> orgmockitoexceptionsmisusingmissingmethodinvocationexception:> when() requires an argument which has to be a method call on a mock> for example:> when(mockgetarticles())thenreturn(articles)>> also this error might show up because:>>    1 you stub either of: final/private/equals()/hashcode() methods>    those methods *cannot* be stubbed/verified>    mocking methods declared on non-public parent classes is not supported>    2 inside when() you dont call method on mock but on some other>    object>> —> you are receiving this because you are subscribed to this thread> reply to this email directly view it on github> < or mute the thread> < > || @timvdlippe sorry i didnt intend to mock list i happened to use the list as a simple example this case happens when mocking superclass method which is not overridden in child class || this seems to be a regression in version 290 with `mock-maker-inline` in our code base we hit the issue with some code that mocks elasticsearch 235s [`deleterequestbuilder`]( simplified example:```javadeleterequestbuilder b  mock(deleterequestbuilderclass)assertnull(bget())```this passes with mockito 2847 but causes an npe with mockito 290 because the ""real"" method is invoked:```javalangnullpointerexception	at orgelasticsearchactionactionrequestbuilderexecute(actionrequestbuilderjava:86)	at orgelasticsearchactionactionrequestbuilderexecute(actionrequestbuilderjava:56)	at orgelasticsearchactionactionrequestbuilderget(actionrequestbuilderjava:64)```cc @raphw since the issue only happens when `mock-maker-inline` is enabled  || i found the error which lies in the new bridge method sensitive override detection mechanism i added a test case and hope everything works again in the new version || i  this in #1179 please reopen the issue if it is not resolved || hi @raphw i just built and installed 1c61f1a91a7d5d8367b3dbddb6270afdd96c8f6a using `/gradlew publishtomavenlocal` the above issue still reproduces unfortunately || darn i reproduced the issue as a test case but i assume it was insufficient to capture the full problemthanks for double-checking i will hav another lookps: you did build the release 2x branch? alternatively the build should be released by now || ah i just double-checked and it seems like the actual fix got lost in git rebase i will fix this tonight! || new try! || thanks! just built `v292` locally and i can confirm the issue is fixed   dare i ask: since this release resolves a regression do you plan to publish it on maven central? || should be published automatically @szczepiq? || nah by default they only go to bintray (i can configure our nexus to proxy to bintray but i prefer to keep the number of non-maven central hosted dependencies as small as possible also by publishing on maven central a larger audience will find the fix using the `versions-maven-plugin`) || >should be published automatically @szczepiq?we currently dont publish automatically to maven central based on the feedback from community that there are too many versions of mockito around :) we might get back to publishing every version as we did beforei plan to ship 210 soon for  so it will land in maven central! || ";1;0;compare method of graph to defined form of method;
1192;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;added new public api for spring-boot use case;not intended for merging yet  submitted for visibility.;;1191.0;added new public api for spring-boot use case;"not intended for merging yet submitted for visibility- for design and rationale see #1191- for usage see ""verificationstartedlistenertest"" classthis is still experimental so refactorings error handling javadoc is missing";" merging 1192  ";ensure spring-boot can use mockito public api;"mockito framework integrators need robust public apis from us this way they ship great mockito integrations to their customers we want to avoid the situation where framework integrators have to use mockito internal apis this leads to overhead relying on stale versions of mockito class conflicts in runtimespring-boot currently uses some internal api from mockito see  for the problem statement solution options and chosen design ### solutionas discussed in spring-boot ticket heres the api we would like to prototype:- new ""verificationstartedlistener""- the instance of listener can be passed on mock creation- listener is notified when mockitoverify is invoked but before the verification is triggered- it is possible to replace the mock object that is being verified (key feature needed by spring-boot)### example usage```javamock(fooclass withsettings()verificationstartedlisteners(new verificationstartedlistener() {  public void onverifystarted(verificationstartedevent event) {    eventgetmock()    eventsetmock(arbitrayobject)  }}```";"i put together a prototype in ""mockito-spring-boot"" branch opened pr #1192 for visibility how to use it?- clone mockito and check out ""mockito-spring-boot"" branch- /gradlew publishtomavenlocal- grab newly published version of mockito from maven local and try it out!- i dont have javadocs yet this test class documents the new api (hopefully :) ->  next steps:- @wilkinsona let me know if this is enough for you to try it out!- we can use the pr that i have opened for review comments regarding the api || @szczepiq this looks great ive built the `mockito-spring-boot` branch and prototyped the updates required for spring boot to use it:  all our tests pass and as you can hopefully see boots code is now significantly simpler thanks very much || fantastic! i will polish the code / documentation and get the release out soon thank you for testing this out and suppling sample project! || @wilkinsona can you try out one more time for us please?ive cleaned up the implementation and the pr in mockito is ready to go i want to make sure that we ship code that works for spring boot i have added some extra validation for setmock() method other than that i think that the api has not changed since i provided the experimental the code is in the same branchthank you in advance! :) || @szczepiq thanks for the opportunity to double-check things ive built the current head of the `mockito-spring-boot` branch and updated [my prototype]( to use the resulting 2110 binaries the only change that was necessary was to update the version number so things look good from my perspective || we released new version today: 2110 it includes the new api that spring boot can use || @wilkinsona - thank you for help and nice collaboration! || closing per     || ";1;0;merge branch release/2x into mockito-spring-boot;
1199;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixes 977: javadoc on verifyzerointeractions;make the javadoc of  mockito#verifyzerointeractions  to make it more;;0;fixes 977: javadoc on verifyzerointeractions;make the javadoc of `mockito#verifyzerointeractions` to make it moreobvious that it does the same thing as `mockito#verifynomoreinteractions`977;  nice change makes the documentation more accurate and simpler thank you! ||;;;;1;1;fixes 977: javadoc on verifyzerointeractionsmake the javadoc of mockito#verifyzerointeractions to make it moreobvious that it does the same thing asmockito#verifynomoreinteractions;
1201;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix javadoc in pluginloader#withalias  javadoc;fix the misuse of  @deprecated  in  pluginloader#withalias  -  @deprecated  is an annotation  while the correct javadoc tag is  @deprecated .;;0;fix javadoc in pluginloader#withalias javadoc;fix the misuse of `@deprecated` in `pluginloader#withalias` - `@deprecated` is an annotation while the correct javadoc tag is `@deprecated`; ;;;;1;1;fix javadoc in pluginloader#withalias javadocfix the misuse of @deprecated in pluginloader#withalias - @deprecatedis an annotation while the correct javadoc tag is @deprecated;
1202;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1202] java 9 ci build for mockito 2.x;## summary;;1198.0;1202] java 9 ci build for mockito 2x;## summaryprovide java 9 travis build to ensure java 9 compatibility in at least tested use casessupport for java 9 was improved in gradle 4x and that version is being used due to some issues with newer gradle versions (#1198) some other configuration changes were required as well as jacoco version has been bump ( #1198## check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;" merging 1202  ";"""could not initialize inline byte buddy mock maker"" with gradle 4x";"i tried to add java 9 build for the mockito 2x branch which in turn requires gradle upgrade to 4x unfortunately with gradle 4x (tested with 401 and 421) 38 inline mock maker related tests are broken (without `mock_maker` env variable defined)for example:```orgmockitointernalcreationbytebuddyinlinebytebuddymockmakertest > should_create_mock_from_interface failed    orgmockitoexceptionsbasemockitoinitializationexception:     could not initialize inline byte buddy mock maker (this mock maker is not supported on android)    java               : 18    jvm vendor name    : oracle corporation    jvm vendor version : 25144-b01    jvm name           : openjdk 64-bit server vm    jvm version        : 180_144-b01    jvm info           : mixed mode    os name            : linux    os version         : xxx        at orgmockitointernalcreationbytebuddyinlinebytebuddymockmaker<init>(inlinebytebuddymockmakerjava:171)        at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakertest<init>(inlinebytebuddymockmakertestjava:35)        caused by:        javalangillegalstateexception:         the mockmethoddispatcher class file is not locatable: org/mockito/internal/creation/bytebuddy/mockmethoddispatcherraw        the class loader responsible for looking up the resource: sunmisclauncher$appclassloader@73d16e93```travis build reproducing that issue with oracle jdk (just gradle upgrade in the `brokenwithgradle4` branch): dont know why the gradle upgrade can result in that behavior especially that ""the mockmethoddispatcher class file is not locatable: org/mockito/internal/creation/bytebuddy/mockmethoddispatcherraw"" sounds strange@raphw under what circumstances that bb error can occur (even abstracting it from gradle)?";gradle is supposed to rename the `org/mockito/internal/creation/bytebuddy/mockmethoddispatcherclass` file to `org/mockito/internal/creation/bytebuddy/mockmethoddispatcherraw` during its build this is necessary to prohibit the class from being loaded by any class loader as we explicily inject it into the bootstrap class loader using the instrumentation api it seems like this does no longer work as the runtime cannot locate this name i guess it was not renamed and is still available under `class` || it looks like this one is failing due to this ( change in gradle 40 and the fact that `inline-mockgradle` is using the old hardcoded path || yup that was a problem @raphw thanks @epeee for an implementation hint || @szpak  @epeee  @raphw : can you please help me understand what i should do to make it work in my android project? it has mockito-core and mockito-android v 2210 and also powermockito2 api and the project has both java and kotlin classes i would like to test the kotlin classes  || @hearbeathorror this issue has been closed almost a year ago and it is rather loosely related to your problem i propose you to ask a question using [stack overflow]( or the [mailing list]( however you mix many various elements which can cause some issues ||;1;0;fix another test failing with java 9;
1203;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed documentation issue  added unit tests;- while working on new verification started listeners (#1191) i found an instance of incorrect documentation. i added unit tests and simplified the documentation.;;1191.0; documentation issue added unit tests;- while working on new verification started listeners (#1191) i found an instance of incorrect documentation i added unit tests and simplified the documentation- currently contrary to what the javadoc said we do guarantee the order in which invocation listeners get notified some of our users might have started to depend on this behavior i added unit tests and  the javadoc in general it is seems useful to guarantee the order this way the api is more predictable easier to use;  thank you for review! ||;ensure spring-boot can use mockito public api;"mockito framework integrators need robust public apis from us this way they ship great mockito integrations to their customers we want to avoid the situation where framework integrators have to use mockito internal apis this leads to overhead relying on stale versions of mockito class conflicts in runtimespring-boot currently uses some internal api from mockito see  for the problem statement solution options and chosen design ### solutionas discussed in spring-boot ticket heres the api we would like to prototype:- new ""verificationstartedlistener""- the instance of listener can be passed on mock creation- listener is notified when mockitoverify is invoked but before the verification is triggered- it is possible to replace the mock object that is being verified (key feature needed by spring-boot)### example usage```javamock(fooclass withsettings()verificationstartedlisteners(new verificationstartedlistener() {  public void onverifystarted(verificationstartedevent event) {    eventgetmock()    eventsetmock(arbitrayobject)  }}```";"i put together a prototype in ""mockito-spring-boot"" branch opened pr #1192 for visibility how to use it?- clone mockito and check out ""mockito-spring-boot"" branch- /gradlew publishtomavenlocal- grab newly published version of mockito from maven local and try it out!- i dont have javadocs yet this test class documents the new api (hopefully :) ->  next steps:- @wilkinsona let me know if this is enough for you to try it out!- we can use the pr that i have opened for review comments regarding the api || @szczepiq this looks great ive built the `mockito-spring-boot` branch and prototyped the updates required for spring boot to use it:  all our tests pass and as you can hopefully see boots code is now significantly simpler thanks very much || fantastic! i will polish the code / documentation and get the release out soon thank you for testing this out and suppling sample project! || @wilkinsona can you try out one more time for us please?ive cleaned up the implementation and the pr in mockito is ready to go i want to make sure that we ship code that works for spring boot i have added some extra validation for setmock() method other than that i think that the api has not changed since i provided the experimental the code is in the same branchthank you in advance! :) || @szczepiq thanks for the opportunity to double-check things ive built the current head of the `mockito-spring-boot` branch and updated [my prototype]( to use the resulting 2110 binaries the only change that was necessary was to update the version number so things look good from my perspective || we released new version today: 2110 it includes the new api that spring boot can use || @wilkinsona - thank you for help and nice collaboration! || closing per     || ";1;0;updated testpreserved current behavior based on code review feedback thanks!;
1209;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;clean up junit imports;fix junit imports throughout the project to use the standard  org.junit.assert  assertions instead of the obsolete  junit.framework.testcase  assertions which just delegate to  assert  s methods.;;0;clean up junit imports;fix junit imports throughout the project to use the standard `orgjunitassert` assertions instead of the obsolete `junitframeworktestcase` assertions which just delegate to `assert`s methods; ;;;;1;1;clean up junit importsfix junit imports throughout the project to use the standardorgjunitassert assertions instead of the obsoletejunitframeworktestcase assertions which just delegate to assertsmethods;
1213;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;standardize junit imports;this pr standardizes importing assertion methods  making the code base cleaner and easier to maintian.;;0;standardize junit imports;this pr standardizes importing assertion methods making the code base cleaner and easier to maintian;  @christianschwarz as seen in the updated patch the string in `fail` isnt the actual message in the thrown exception but using the `expectedexception` definitely makes the test more robust (and imho easier to maintain) thanks for the review! ||;;;;1;1;import static methods from orgjunitassertthe de-facto standard of mockitos test is to use statically importedmethods from the orgjunitassert classthis patch changes the few places that import assert and use itsmethods to statically import them in order to standardize thecodebase and make it easier to maintain;
1214;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1211: improve @deprecated javadoc;this pull request 1211 by improving the  @deprecated  javadoc of  mockito.debug()    mockitodebugger  and  mockitodebugger.printinvocations(object  mocks)  by adding the additional information on how to retrieve an actual instance of the  mockitodebugger  interface.;;1211.0;1211: improve @deprecated javadoc;this pull request 1211 by improving the `@deprecated` javadoc of `mockitodebug()` `mockitodebugger` and `mockitodebuggerprintinvocations(object  mocks)` by adding the additional information on how to retrieve an actual instance of the `mockitodebugger` interface; ;improve @deprecated javadoc of mockitodebugger;the `@deprecated` javadoc of : * method: `mockitodebug()`  * class: `mockitodebugger`  * method `mockitodebuggerprintinvocations()` should point to `mockitomockingdetails()printinvocations()` currently its too hard to find the rigth entry point for the replacement;;1;0;1211: improve @deprecated javadoc;
1216;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;adresses #1206: allow opting out from annotation copying within mocks.;the  mocksettings  now include an option to disable copying of annotations to mock classes.;;1206.0;adresses #1206: allow opting out from annotation copying within mocks;the `mocksettings` now include an option to disable copying of annotations to mock classes; merging 1216  < ;mockito should not copy annotations in all cases;"when mocking an interface mockito 2100 copies the annotations on the interface to the generated classi believe mockito  2100  should just implement the class as if the one would do new interface(){}in fact migrating to mockito 210 broke the tests of my working production codehowever when mocking a class the current behavior could be the expected behaviori have provided a very simple test case here:  the test-case ""interfacemock()"" fails at least it should be optional (via mocksettings?) to control this behavior";"> i believe mockito 2100 should just implement the class as if the one would do new interface(){}i agree java does it that way when an interface is implemented by a class the annotations are not present no matter if the annotation is marked with `@inherit` or not>however when mocking a class the current behavior could be the expected behaviorthe class object of a mocked class should look close as possible as one of the mocked type therefore i would assume that annotations are copied currently mocktio uses as default the `subclassbytebuddymockmaker` which well subclasses the type to mock you can try to use the inline-mock-maker (by adding the dependency `orgmockito:mockito-inline:2100` ) i dont know how it acually works but it may behave differently since it dont subclass the type to mock as far as i know || adding `orgmockito:mockito-inline:2100` to my project did not change any test results || okay thanks for checking it out possibly @raphw has a good explanation for the current behaviour || we introduced this as a feature since the mock class should be a representation of the mocked type many times this is rather an advantage than a disadvantage you are however right that it should be something that can be controlled in the mock options we will look into italready today you can trick mockito into not copying the annotations by creating a mock of type object and adding the interface as ""additional interface"" || @raphw - great trick i think this will work in my environment for the moment || @raphw > we introduced this as a feature since the mock class should be a representation of the mocked type out of interest: shouldnt annotations never by copied from interfaces? i mean if an interface is implemented the compiler dont copy any annotation to the class so it is a bit surprising that mockito does it  i would expect this only for mocked classes  > already today you can trick mockito into not copying the annotations by creating a mock of type object and adding the interface as ""additional interface""this should imho the default behaviour when an interface is mocked maybe mockito should take this into account actually i dont see a case where this would be an disadvantage || @christianschwarz i would completely agree :) || this has been addressed in #1216 || ";1;0;adresses #1206: allow opting out from annotation copying within mocks;
1217;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1183: make override check more forgiving to accomondate kotlin compile patterns.;the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into java s reference-type only generic hierarchies. this pr eases this restriction to fix this resolution for kotlin.;;1183.0;1183: make override check more forgiving to accomondate kotlin compile patterns;the override check implies java compile patterns such that kotlin method resolutions could fail for void return types which do not fit into javas reference-type only generic hierarchies this pr eases this restriction to fix this resolution for kotlini added the test case of the reported issue as a reference; merging 1217 ;unfinishedverificationexception with kotlin after updating to 290;mockito update 2847 → 290 brought us the exception when running the following test```kotlinpackage redactedpackagenameimport orgjunittestimport orgmockitomockitospyimport orgmockitomockitoverifyclass mockitotest {    @test fun test() {        val value  spy({})        valueinvoke()        verify(value)invoke()    }    @test fun testagain() {        val value  spy({})        valueinvoke()        verify(value)invoke()    }}``````orgmockitoexceptionsmisusingunfinishedverificationexception: missing method call for verify(mock) here:-> at redactedpackagenamemockitotesttestagain(mockitotestkt:20)example of correct verification:    verify(mock)dosomething()also this error might show up because you verify either of: final/private/equals()/hashcode() methodsthose methods *cannot* be stubbed/verifiedmocking methods declared on non-public parent classes is not supported	at redactedpackagenamemockitotesttest(mockitotestkt:10)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:114)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:57)	at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:66)	at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:51)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy1processtestclass(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:109)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:146)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:128)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:404)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)	at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)	at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)	at javalangthreadrun(threadjava:748)``` please notice that the following test will produce no errors```kotlinpackage redactedpackagenameimport orgjunittestimport orgmockitomockitospyimport orgmockitomockitoverifyclass mockitotest {    @test fun test() {        val value  spy({})        valueinvoke()        verify(value)invoke()    }}```this works as well so i assume it can be kotlin-lamda-related```kotlinpackage redactedpackagenameimport ioreactivexfunctionsactionimport orgjunittestimport orgmockitomockitospyimport orgmockitomockitoverifyclass mockitotest {    class actionimpl : action {        override fun run()  unit    }    @test fun test() {        val value  spy(actionimpl())        valuerun()        verify(value)run()    }    @test fun testagain() {        val value  spy(actionimpl())        valuerun()        verify(value)run()    }}```also important detail running from ide works fine only gradle runner is affected```/gradlew  testdebugunittest```;fyi the same thing happens with mockito 2100 || should be  on master already || @raphw can you please point me at the commit? ||  || @raphw just double-checked 2100 and the issue is still the same 😞  || ah too bad i will have a look it surely is related to our performance optimizations of detecting overridden calls to avoid repeated mocking down the hierarchy || the issue remains when using 2110 as well || i have added a test case on a branch now and started investigating seems like there is some issue with the sefl-invocation check such that the apply call is not recognized as a mock invocation || it seems like this is an issue within bridge method resolution kotlin creates several methods with equal java signature given test test class:```javaclass examplefunctiontest$testagain$value$1```the kotlin compiler implements two methods:```javajavalangobject examplefunctiontest$testagain$value$1invoke()void examplefunctiontest$testagain$value$1invoke()```from the view of the java language these two methods have an identical invocation signature and byte buddy attempts to resolve one method as a bridge method of the other one what is not correct for the kotlin languagei am currently trying to figure out why kotlin is doing that this would also break interoperability from java unfortunately this is not an easy mistake to work around either as we need to resolve bridge methods in order to handle java classes correctly and even with kotlin java classes will always be involved via the core class library such that one cannot simply offer a language switchthe fact that this broke recently is a result of fixing this resolution for java which was necessary due to a bug in this mechanism || just checked the 2120 and the issue seems to be fixed indeed ;1;0;1183: make override check more forgiving to accomondate kotlin compile patterns;
1219;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add regression test for issue #1174;regression that shows the issue of #1174. i am unable to reproduce this locally. let s see what travis says.;;117.0;add regression test for issue #1174;regression that shows the issue of #1174 i am unable to reproduce this locally lets see what travis sayscloses #1174;  thank you! ||;nullpointerexception when using argthat() for long parameter in verify;a minimal code example:``` java  @test  public void shouldnotbebroken() throws exception {    takesalong takesalong  mock(takesalongclass)    verify(takesalong)call(argthat(corematchersequalto(11l)))  }  static interface takesalong {    void call(long l)  }```this leads to an npe logged as happening at the verify call which made me think that the the result of `verify(takesalong)` was null but it seems like the npe has a somewhat incomplete stack trace variations that dont show this problem include:- changing the interface to take a `long` instead of a `long` or- using `longthat(matcher<long>)` instead of `argthat()`if it is considered an error to use `argthat` where youre passing in a long then i think at least there should be a better error message;"i agree that better error message would be great do you have suggestions how to implement it?theres a longthat method that can be used in this contexthope that helps! || is that `longthat` method different from the one i mentioned in the bug report? ive been able to solve my problem (iirc i used the `longthat(matcher<long>)` version) so the point of this report is to help prevent others from running into the same issuei dont have any suggestions for how to implement it - the stack trace confuses me a lot and i wouldnt know where to start looking for the problem do you have any pointers where to start? im completely unfamiliar with the mockito source unfortunately || thanks for reporting the issue! it is very useful to build this documentationim not sure if it is feasible to improve the error message in this case eg the implementation of argthat() does not know the receiver object nor the method i used to think that this is not possible however your initial report got me thinking perhaps we can inspect the generic type of the matcher and if it is a primitive wrapper it can return 0 or false we would really appreciate your contribution :)you could start with a failing test case (you have it already) and try to add some smartness to the implementation of argthat method || > perhaps we can inspect the generic type of the matcher and if it is a primitive wrapper it can return 0 or falsethat is probably feasible but this wont be of any use in most cases because most of us use existing _matchers_ where most are generic with an `object` upper bound || yeah it would be good who wants to contribute the fix?on fri apr 3 2015 07:35 brice dutheil notifications@githubcom wrote:> perhaps we can inspect the generic type of the matcher and if it is a> primitive wrapper it can return 0 or false> > that is probably feasible but this wont be of any use in most cases> because most of us use existing _matchers_ where most are generic with an> object upper bound> > ## > > reply to this email directly or view it on github>  || is this still an ongoing issue? i am willing to do some investigation on this one || i did some investigation and the problem is at [the generictypeextractor]( executing the posted testcase the matcher that is created is [isequal]( executing `getactualtypearguments()` on `basematchersclass` it returns `type {typevariableimpl}` with name `t` as `basematchers` is the declared superclass of `isequal`this behaviour is because `isequal` is declared as generic with `<t>` therefore i sadly dont see a feasible solution and would alter the documentation to state that primitives should use the other methods such as `longthat(long)` || ah i had high hopes for the type extracting :( looks like the argxxx methods need to be included in mockitohamcrest do you want to contribute?  || i can contribute yes (but have a lot of prs open already might cause some flooding) but what do you mean with `argxxx`?do you mean a signature like `public static long argthat(matcher<long> matcher)`? i am not sure if it compiles but i can try it outstill i dont think the underlying issue is solved because `isequal<t>` with `tlong` will not match the `matcher<long>` but that would be left for experimentation || > do you mean a signature like public static long argthat(matcher<long> matcher)? i am not sure if it compiles but i can try it outit doesnt compile `argthat(matcher<long>)` has the same erasure as `argthat(matcher<t>)` i guess this issue cant be  the workaround is to use `mockitohamcrestlongthat(matcher<long>)` or better `mockitoeq(long)`imo this issue can be closed || i agree maybe with future jdk version we could do something not right now thanks @christianschwarz for this archeological dive in mockito issues ) || also remove `bug` label because its not really a bug in mockito || @bric3 please reopen> it doesnt compile argthat(matcher<long>) has the same erasure as argthat(matcher<t>) i guess this issue cant be fixed i was wrong after looking #246 i noticed that this issue can be fixed! two methods dont have the same erasure if the return type is different the java 8 compiler generates a warning in this case dont know about other versions we need to provide overloads for all primitives like this:```public static long argthat(matcher<long> matcher) {        reportmatcher(matcher)        return 0}```for the provided test case the expected `mockitoexception` _""wanted but not invoked ""_ is thrown || @christianschwarz nope that doesnt work while java byte code allows to have method based on the complete signature (ie name arg types and return type) the compiler just look at the name and arg typesthe following code dont compile : ```long argthat(matcher<long> matcher) {}int argthat(matcher<integer> matcher) {}``` || @bric3 crazy the jdt compiler has no problem with your sample it even works at runtime after some investigation i found this answer on [stackoverflow ]( it ~~should  worked with javac too~~ **worked until java 7** as the jls seems to allow it due to a hole in the specs (if i understand that correct)also interesting: [with generics the return type is part of the method signature]( i agree keep it closed for now || this hack does not work with java 8 || jup!its a bug in eclipse jdt that only occures with a non standard jre execution environment and compiler compliance setup i filed an issue for the jdt-team: [bug 499817]( || again something against eclipse its not the first bad bug using eclipse compiler-- briceon wed aug 17 2016 at 12:39 pm +0200 ""christian schwarz"" notifications@githubcom wrote:jup!its a bug in eclipse jdt that only occures with a non standard jre execution environment and compiler compliance setup i filed an issue for the jdt-team: bug 499817—you are receiving this because you were mentionedreply to this email directly view it on github or mute the thread || ";1;0;update genericsmockitoannotationstestjava;
1220;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;backport fixes from release/2.x to master;because we should do this more frequent :joy:;;0;backport fixes from release/2x to master;because we should do this more frequent  ; merging 1220 ;;;;1;1;merge branch release/2x into backport-fixes;
1221;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;mockitoextension for junit5;445;;445.0;mockitoextension for junit5;"445discussion:  of all thanks to the junit5-team (@sbrannen) for that great api! the implementation was straight forward and the docu is top notch not comparable to a junitrule or runner implementation one can feel the hard work ----the here provided `mockitoextension` allows to mock/spy/validate like the well known mockito-junitrule/runner this is still ""work in progress"" feel free to commentusage:```java@extendwith(mockitoextensionclass)class junit5test {   @mock  private dependency mock   @test  void checkmockcreation(){    when(mockfoo())thenreturn(""hello junit5"")    mockfoo()    verify(mock)foo()  }}```";"possibly we need an annotation on class or method level to provide control of the ""strictness"" eg:```@extendwith(mockitoextensionclass)@mockitostrictness(warn)class junit5test {    @mockitostrictness(strict_stubs)    void testwithlocaldefinedstrictness(){    }}``` ||  merging 1221                             release/2x    #1221   +/-   ##  coverage ! || ";introduce mockitoextension for junit jupiter (aka junit 5);## new features in junit 5the junit jupiter extension model in junit 5 introduces support for constructor and method parameter resolution (ie dependency injection)specifically third parties can implement the `parameterresolver` extension api to inject dependencies mocks etc into constructors and methods in addition the `testinstancepostprocessor` extension api can be implemented to post-process a test instance (eg to perform field injection)## status quomockito supports _field injection_ for mocks via the `@mock` annotation in addition #438 allows `@mock` to be declared on parameters for constructors and methods which makes `@mock` support an ideal candidate for both the `testinstancepostprocessor` and `parameterresolver` extension apis in junit jupiter in fact the junit team has already developed a proof of concept: see the `mockitoextension` in the [junit5-mockito-extension]( sample project## deliverables-  introduce an official `mockitoextension` for junit jupiter to replace the proof of concept from the junit team;"i think this issue can be merged with #390 our plan there was to introduce junit 5 compatibility in mockito 30 (since 20 is on the verge on being released in a couple of weeks) || sorry: i overlooked #390feel free to _merge_ it as you see fit lets track the junitextension in this issue and list the specifications of the `mockitoextension` for junit 5 the first point is to improve parameterized compatibility || @sbrannen any news on this ? || @bric3 the `mockitoextension` from the junit team is usable with mockito 20 snapshots and current versions of junit jupiter (junit 5)so its really up to the mockito team to decide when they want to take it over || @sbrannen this one -> [example/mockito/mockitoextension]( ? || yep thats the one || thanks @sbranneni was wondering if any api change would happen on junit 5 we will take over in mockito 3 once we are ready to switch branches for mockito 2 || > i was wondering if any api change would happen on junit 5well thats the million dollar question -- isnt it? 😉 all kidding aside we are currently working on junit jupiter 50 m3 but we still have quite a way to go before a ga release so although i cannot promise that the `extension` apis wont change any before ga it appears that the apis currently implemented by the `mockitoextension` should remain rather stable || ok thats good to know anyway we have to release 21 before starting 30 anyway and a some api design work on 21 too that may delay junit5 integration in the 30 beta phase || shall we start with fleshing out the specifications of the extension? would like to have a working prototype when junit 5 is released eta q1 2017 || yes go for it ill create a submodule junit 5 at this time since junit 5 is a near complete rewrite with a lot of binary incompatibilities || +1do we want to completely decouple mockito-core module from junit? || @szczepiq i am not sure but supporting both `junit4` and `junit5` in `mockito-core` seems problematic we have seen similar issues with `spring` having to support both mockito 1 and 2 therefore i think it is better to refactor mockito 3 such that we publish 2 new artifact: `mockito-junit4` and `mockito-junit5` which provide the integration layer between mockito and junit@sbrannen are you aware of other framework users depending on junit which employ this approach or is there a different and better solution? || in the `spring-test` module for the spring framework we provide support for testng junit 4 and junit jupiter (what you call junit 5) alongside each other just in different packages thats all within a single jar and there are no issues since each of those is an optional dependency (in terms of the maven pom)thus projects that consume `spring-test` can pick which testing framework they wish to use (or potentially use testng junit 4 and junit jupiter all simultaneously  however unlikely that may be)as long as its clear what developers need to consume for a given testing framework it shouldnt be a problem having a single artifact for example with spring junit 4 users use the `springrunner` whereas junit jupiter users use the `springextension` || if you do opt for separate modules (ie maven artifacts) i would recommend against `mockito-junit5` since what you are really providing is an extension for junit jupiter -- which is the new programming model in junit 5the problem with naming such an artifact `mockito-junit5` is that there may well be a junit 6 or 7 still based on the junit jupiter programming and extension models and then the artifact name containing a `5` would no longer make sensefyi: i have just changed the title of this issue to reflect this fact || okay that seems reasonable so lets take the package approach! my experience with jar configurations is limited so in terms of the configuration of users `pomxml` i do not  ";1;0;process @mockitoguy feedback;
1227;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;update license plugin and add missing license headers;the license plugin could be updated to later versions  as we dropped jdk6 on travis. moreover  quite some licenses were reported missing  so i ran  ./gradlew licenseformatmain licenseformattest  to add them.;;0;update license plugin and add missing license headers;the license plugin could be updated to later versions as we dropped jdk6 on travis moreover quite some licenses were reported missing so i ran `/gradlew licenseformatmain licenseformattest` to add them;  thank you! ||;;;;1;1;update license plugin and add missing license headers;
1228;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;add @checkreturnvalue to stubbing/verification methods;introduce a new annotation  @checkreturnvalue  and add this to methods like  when  and  verify  such that static analysis can verify the value is actually used ( this makes sure developers can get warnings on build-time instead of run-time (with our internal  validatestate );;1130.0;add @checkreturnvalue to stubbing/verification methods;introduce a new annotation `@checkreturnvalue` and add this to methods like `when` and `verify` such that static analysis can verify the value is actually used ( this makes sure developers can get warnings on build-time instead of run-time (with our internal `validatestate`)1130; merging 1228 ;mockito should annotate when() methods with a custom annotation @checkreturnvalue;static code checkers like error-prone and findbugs will help detecting invalid usage of mockito in single-call situations if mockito source code were annotated with @checkreturnvaluesee:*     like for assertj any annotation with name should do no need to depend on a specific library with  @checkreturnvalue;that seems fine to me please submit a pull request    ||;1;0;clarify documentation on annotation;
1231;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;invocationsprinter string concatination;replace string concatination inside an append call with a chained  append  calls to make the code a tad easier to read  so the reader isn t left wondering why some of the concatinations  with  append s and some with the  +  operator.;;0;invocationsprinter string concatination;replace string concatination inside an append call with a chained `append` calls to make the code a tad easier to read so the reader isnt left wondering why some of the concatinations  with `append`s and some with the `+` operator; merging 1231 ` ;;;;1;1;invocationsprinter string concatinationreplace string concatination inside an append call with a chainedappend calls to make the code a tad easier to read so the readerisnt left wondering why some of the concatinations  withappends and some with the + operator;
1238;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;backport fixes release/2.x to master;- update licenses;;0;backport fixes release/2x to master;- update licenses- remove unused `buildsrc`- remove old gradle files- add some more tests- fix coverage;this pr is blocked on #1174 ||  merging 1238  this pr tomorrow if no issues are found || lgtm (from the birds eye view)thanks for taking care about that the need to switch to 3x is just a matter of time `*` and your work will be priceless then `*` - years are still a matter of time ) ||;;;;1;1;disable broken test for now;
1247;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;remove several container classes and inline code;remove several classes that were containers for code that is easier to be inlined. they were only referenced once  or never at all. this makes it easier to reason about the code  while also maintaining less code and classes.;;904.0;remove several container classes and inline code;remove several classes that were containers for code that is easier to be inlined they were only referenced once or never at all this makes it easier to reason about the code while also maintaining less code and classescloses #904; merging 1247 ;remove unnecessary classes;looking at  and sorting it by coverage it appears that there are some classes that are completely untested taking another closer look reveals some candidate classes that can be removed for example `mockitolimitations` is [only used in the reporter]( the field can therefore be placed in the reporter directlythere are also some debugging and util classes that seem unused if we do decide to retain them i think we should test them to actually make sure they are working properly;;1;0;remove several container classes and inline code;
1257;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1254 and #1256: improved check for self-invocation.;better checks for recursive calls and guards internally used jdk types.;;1254.0;1254 and #1256: improved check for self-invocation;better checks for recursive calls and guards internally used jdk types1254 fixes #1256; merging 1257 ! ||;wanted but not invoked on 2120 but not on 2110;after updating mockito from 2110 to 2120 the following test fails with `wanted but not invoked`the weird thing is this happens only when running tests using gradle android studio runs the same test as successful just like #1183```javapackage packageredactedimport orgjunittestimport orgmockitomockitopublic class viewmodeltest {    class view {        private runnable actioncallback  null        void callaction(runnable callback) {            actioncallback  callback        }        void simulateactioncalled() {            if (actioncallback ! null) {                actioncallbackrun()            }        }        void showresult() {        }    }    class viewmodel {        public viewmodel(final view view) {            viewcallaction(new runnable() {                @override                public void run() {                    viewshowresult()                }            })        }    }    @test public void test() {        view view  mockitospy(new view())        viewmodel viewmodel  new viewmodel(view)        viewsimulateactioncalled()        mockitoverify(view)showresult()    }}``````wanted but not invoked:viewshowresult()-> at packageredactedviewmodeltest$viewshowresult(viewmodeltestjava:22)however there were exactly 2 interactions with this mock:viewcallaction(    packageredactedviewmodeltest$viewmodel$1@26645040)-> at packageredactedviewmodeltest$viewmodel<init>(viewmodeltestjava:28)viewsimulateactioncalled()-> at packageredactedviewmodeltesttest(viewmodeltestjava:41)	at packageredactedviewmodeltest$viewshowresult(viewmodeltestjava:22)	at packageredactedviewmodeltesttest(viewmodeltestjava:43)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:114)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:57)	at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:66)	at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:51)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy1processtestclass(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:108)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:146)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:128)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:404)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)	at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)	at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)	at javalangthreadrun(threadjava:748)```;"im observing a similar issue only happens with `mockito-inline` dont have time right now to distill the affected tests into a minimal reproduction case maybe @raphw has a hunch || alright decided to look for a minimal reproduction case after all this is what i came up with:```javapackage comexampleimport static orgmockitoargumentmatcherseqimport static orgmockitomockitospyimport static orgmockitomockitoverifyimport orgtestngannotationstestpublic final class mockitoissue1254test {    @test    public void test() {        dummy d  spy(new dummy())        dfoo()        verify(d)bar(eq(""baz""))    }    static class dummy {        public void foo() {            bar(""baz"")        }        // also fails if public        void bar(string s) {}    }}```causes:```wanted but not invoked:dummybar(""baz"")-> at comexamplemockitoissue1254test$dummybar(mockitoissue1254testjava:23)however there was exactly 1 interaction with this mock:dummyfoo()-> at comexamplemockitoissue1254testtest(mockitoissue1254testjava:13)```this test does pass with mockito 2110 it also passes with mockito 2120 provided `mockito-inline` is disabled || probably another error in the logic for self-invocation detection i will have a look! || ok this was just me forgetting how my implementation intially worked i  it locally and will push a fix soon || same for mocked methods on spy on 2120 real method is called || when is this going to be on maven central? || we could trigger a new release @timvdlippe would you find some time? || yeah i can try it tomorrow :)op di 5 dec 2017 om 20:55 schreef rafael winterhalter <notifications@githubcom>:> we could trigger a new release @timvdlippe> < would you find some time?>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> < or mute the thread> < > || version 2130 should be published and available soon in maven central!ps @mockitoguy the `[ci maven-central-release]` was working flawlessly    || danke! bedankt! many  can confirm that finally our suite of 13+ k kotlin tests work after fixing #1183 and this one ✨ thanks! || >ps @mockitoguy the [ci maven-central-release] was working flawlessly 🎉awesome! thank you for pushing out the version! || ";1;0;1254 and #1256: improved check for self-invocation;
1257;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1254 and #1256: improved check for self-invocation.;better checks for recursive calls and guards internally used jdk types.;;1256.0;1254 and #1256: improved check for self-invocation;better checks for recursive calls and guards internally used jdk types1254 fixes #1256; merging 1257 ! ||;unbounded recursion when spying with `mockito-inline`;"consider the following code:```java@testpublic void test() {    concurrentmap<string string> map  spy(new concurrenthashmap<>())    mapputifabsent(""a"" ""b"")}```running it causes a `stackoverflowerror`:```configuring testng with: testng60configuratorexception in thread ""testng-testsurefire test-1"" javalangstackoverflowerror        at orgmockitointernalcreationbytebuddymockmethoddispatcherget(mockmethoddispatcherjava:20)        at javautilconcurrentconcurrenthashmapcontainskey(concurrenthashmapjava:964)        at orgmockitointernalutilconcurrentweakconcurrentmapcontainskey(weakconcurrentmapjava:74)        at orgmockitointernalutilconcurrentweakconcurrentmap$withinlinedexpunctioncontainskey(weakconcurrentmapjava:261)        at orgmockitointernalcreationbytebuddymockmethodadviceismock(mockmethodadvicejava:116)        at orgmockitointernalcreationbytebuddymockmethodadviceismocked(mockmethodadvicejava:121)        at javautilconcurrentconcurrenthashmapcontainskey(concurrenthashmapjava:964)        at orgmockitointernalutilconcurrentweakconcurrentmapcontainskey(weakconcurrentmapjava:74)        at orgmockitointernalutilconcurrentweakconcurrentmap$withinlinedexpunctioncontainskey(weakconcurrentmapjava:261)        at orgmockitointernalcreationbytebuddymockmethodadviceismock(mockmethodadvicejava:116)        at orgmockitointernalcreationbytebuddymockmethodadviceismocked(mockmethodadvicejava:121)        at javautilconcurrentconcurrenthashmapcontainskey(concurrenthashmapjava:964)        ```tested with mockito 2110 and 2120 do not happen if i disable `mockito-inline` cc @raphw";i will have a look  the problem is that we use a hash map internally to store mock dispatchers we need to exclude this map from checking for being a mock explicitly as the check involves reading from the map what triggers the recursion ||;1;0;1254 and #1256: improved check for self-invocation;
1258;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;prevent class loading race condition;allow singleton locking in context with class loading races.;;106.0;prevent class loading race condition;allow singleton locking in context with class loading races1067;"fully agree will do soon ||  merging 1258  <  ";partial;"hi heres the implementation of the partial mock support i was talking about:```partialmock(class)partialmock(object enclosinginstance class innerclass)```the second overload is the one solution to the arbitrary constructor parameter issue:```@mock private collaborator1 mockcollaborator1@mock private collaborator2 mockcollaborator2@partialmock private mockworker workerabstract class mockworker extends worker {  mockworker() {    super(mockcollaborator1 mockcollaborator2)  }}```i didnt name it spy() for the following reasons:1 spy() doesnt work for final methods it would be surprising if users partial mock works without ""final"" and stops working when ""final"" is added the non-abstract methods arent meant to be mocked after all2 with partial mock one goal is to allow having state in the object the shallow copying of spy() wont always work when there is mutable state especially if there are private methods in the class that spy cannot intercept3 ""spy"" conceptually needs a target object to spy on without a target spy(fooclass) feels non-intuitive4 all the use cases i know of for partial mocking dont need spying5 if really needed one can always explicitly `spy(partialmock(fooclass))`annotation support isnt added yet";"another use case i considered but would like to get some feedback before adding to the javadocas the faq puts it:> technically speaking mockito is a test spy framework> test spy framework allows to verify behaviour (like mocks) and stub methods (like good old hand-crafted stubs)but it leaves one question open: should one ever use the ""good old hand-crafted stubs"" at all? if yes under what scenario?a main reason that people use the `when()thenreturn()` dsl instead of the hand-crafted stubs is that for interfaces with many methods hand-crafting the stub means to write lots of extra boilerplate override methods that arent interesting to the testbut with partial mock the above is no longer true its easy enough to hand-roll an abstract stub class implementing only the interesting methods and then partialmock() itbetween the two different ways of stubbing (plain old `@override` vs `when()thenreturn()`) heres a guideline ive been following with success:- `when()thenreturn()` is best used to stub data logically related to the current test that is its best used in the individual test methods the dsl reads nicely in the bdd given-when-then style- for stubbing shared data that arent logically specific to any individual test plain old abstract classes work better because the `when()thenreturn()` dsl can usually lead to messy setup() method with stubbing of several different objects crammed together in other words prefer `partialmock(stubfooclass)` over `when()thenreturn()` statements in setup() || heythanks so much for taking the time to implement this heres some feedback about your design decisions:1 i respect the arguments for avoiding reusing spy nomenclature for good or bad mockito spies are called partial mocks this pattern is also used in other mocking libraries like spock imho adding a separate method may confuse users2 i think that the message that hand stubs are recommended for stubbing that typically ends up in setup() method is a bit too strong from my experience rolling out hand stubs typically indicates design smell - theres too much ask style interactions and too little tell style interactions the latter better isolate responsibilities leading to cleaner designnow lets look into the code :) || oh right i reviewed the codes :)one thing that stands out is that partial mock seems to be driving the api and the implementation towards a new kind of mock ideally we would like to avoid it in mockito were trying to generalize more and avoid creation of new kinds of mocksto accept the pr we would like to simplify the api and implementation api:1 mockitospy(fooclass object  constructorargs)2 withsettings()constructorargs(object  args)3 withsettings()outerinstance(object object)1) delegates to: mock(fooclass withsettings()constructorargs(object  constructorargs)defaultanswer(calls_real_methods)also this should work with regular mocks too eg if someone specifies the constructorargs (we can call it differently eg usesconstructor etc) then the instance is created via the constructor instead of by using the objenesisthis can be implemented incrementally for example:1 add constructorargs/usesconstructor support2 add outerinstance/enclosinginstance support3 add spy methodthis is great stuff thanks for this pr sorry i cannot merge it in this form just yet perhaps ill add some code to get this started || thanks for spending the time reviewing this code!i was thinking that i cannot make spy work while also keeping final methods in fakes workbut reading your reply a few times convinced me that i misunderstood how spies work and its actually pretty trivial to implement so in short i was wrong `spy(class)` tastes sweet!what do you think of the new revision?- mockitospy(fooclass object  constructorargs)again i dont feel we need to support arbitrary constructor args its not statically type safe or refactoring friendly there are ambiguity issues wrt constructor overloads  and lastly while 0-constructor-arg abstract classes without state can be fine (like abstractlist) abstract classes with state feels more often a design smell- withsettings()outerinstance(object object)hmm kinda feel that the api of `spy(outer innerclassclass)` reads more intuitive: the outer object is the qualifier for the inner class just as how we say `outernew innerclass()`also unlike other mock settings that apply to every method that accepts it outerinstance() is only meaningful to `spy() mock(fooclass settingsouterinstance(outer))` would be meaningless || on my radar ill reply tomorrow )on sat oct 18 2014 at 1:31 am fluentfuture notifications@githubcomwrote:> thanks for spending the time reviewing this code!> > i was thinking that i cannot make spy work while also keeping final> methods in fakes work> > but reading your reply a few times convinced me that i misunderstood how> spies work and its actually pretty trivial to implement> > so in short i was wrong i like spy()!> > what do you think of the new revision?> > about the 3 items in your suggested api:> 1 mockitospy(fooclass object  constructorargs)> > again i dont feel we need to support arbitrary constructor args its> not type safe i fear that adding this support would encourage bad-designed> abstract classes if 0-constructor-arg abstract classes without state are> fine (like abstractlist) abstract classes with state feel almost always a> smell> 1 withsettings()outerinstance(object object)> > hmm kinda feel that the api of spy(outer innerclassclass) reads more> intuitive: the outer object is the qualifier for the inner class just as> how we say ""outernew innerclass()"" agree? its your call if you prefer> outerinstance() ill change> > ## > > reply to this email directly or view it on github>  szczepan fabercore dev@gradle founder@mockito || > again i dont feel we need to support arbitrary constructor args its not statically type safe or refactoring friendly there are ambiguity issues wrt constructor overloads  and lastly while 0-constructor-arg abstract classes without state can be fine (like abstractlist) abstract classes with state feels more often a design smelli agree with everything you wrote thing is we cannot really objectively say that stateful abstract classes are ok only when have 0-arg constructor consequently we cannot restrict the api based on this assumption users will come up with use case for argumented abstract classes and it will be hard to defend it also mockito needs to balance out the toolkit approach (unopinionated) with framework approach (opinionated) to describe this further: from the standpoint of api design we _can_ declare that in our opinion mocking abstract classes is a design smell and we dont want to support it officially (we could however open some extension points for users to implement it unofficially) but we cannot really say that _some_ abstract classes are ok to mock and some not at least this is my view on the subject and i respect if you have a different povimho we dont have to provide constructor args in the first iteration but we should plan for it api-wise so that adding this feature later does not incur any deprecation or api awkwardness we should also avoid documenting that we are not planning to do the constructor args because we believe it is a smell however we can document that _typically_ mocking abstract classes hints at design smell etc> hmm kinda feel that the api of spy(outer innerclassclass) reads more intuitivespy() method and the withsettings() method are not ""alternative"" implementations :) all spy() methods need to delegate to a mock() method that has specific spy-related withsettings() other words: every possible kind of mock can be created using this entry point of the api:  think about the spy() method (and overloaded mock() methods) as a convenience methods / syntax sugar over the main mock creation entry point> spy(outer innerclassclass)id rather avoid overloaded spy() method that uses outer instance initially it feels that mocking inner abstract classes is somewhat an edge case (arguably) we could provide an api for this via withsettings() though from my objective standpoint it feels that its more important to support constructor arguments than to support mocking inner classes (eg i would dare to say that there are more use cases that support the former feature)i havent yet looked in the code :) || i reviewed the code please dont get disheartened by the amount of review items :) im enjoying this conversation immensely and im really happy that you will contribute it! it will be a great feature in mockitoive done some refactorings in mockito regarding mock initialization and i will push it now merging your stuff will be hard and im sorry for this i hope that the code after the refactorings will be easier for you to implement the feature ) || pushed take a look at orgmockitointernalcreationcglibclassimposterizertest#shouldcreateclassbyconstructor || thanks for explaining the rationale so clearly and patiently! some further clarifications below in hope that i could sell the idea better :)ill work on the refactoring and merging later> thing is we cannot really objectively say that stateful abstract classes are ok only when have 0-arg constructor consequently we cannot restrict the api based on this assumption users will come up with use case for argumented abstract classes and it will be hard to defend it also mockito needs to balance out the toolkit approach (unopinionated) with framework approach (opinionated) to describe this further: from the standpoint of api design we can declare that in our opinion mocking abstract classes is a design smell and we dont want to support it officially (we could however open some extension points for users to implement it unofficially) but we cannot really say that some abstract classes are ok to mock and some not at least this is my view on the subject and i respect if you have a different povagreed the ""opinion"" is but one reason though another one is that its not type safe and would pose a difficulty to tools like ide later when someone is trying to find references to a constructorwhile mockito doesnt need to be an opinionated framework i think its fair to say that mockito can choose to only implement a feature that it does better than alternativesi imagine if someday someone wants to spy a class with constructor args my suggestion would be to create a simple subclass wrapper:```@mock private collaborator collaborator@spy private mockfoo fooabstract class mockfoo extends abstractfoo {  mockfoo() {    super(collaborator blah)  }}```this way everything is still nicely compiler and tool friendly one major difference between mockito/easymock and jmock (at least the earlier versions) is that they are type safe supporting arbitrary constructor args using object takes a step away from the type safetythere may still be the  ";1;0;simplified locking during class generationlets optimise the implementation for correctness rather than performance especially if we dont have evidence that using classloader objects as the monitor makes mockito faster i made tests on our own build and the execution of tests takes exactly the same;
1268;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1262: update doc for answers.calls_real_methods;update the documentation for the answers.calls_real_methods according to #1262 and also included a note with recommendation not to use when().thenreturn() for partial mock.;;1262.0;1262: update doc for answerscalls_real_methods;update the documentation for the answerscalls_real_methods according to #1262 and also included a note with recommendation not to use when()thenreturn() for partial mock;  hey @seriybg this is a nice change! sorry we have not reviewed earlier it must have slipped our radar continually improving documentation is absolutely important thank you for contributing! ||;improve documentation about partial mocks and doreturn() style of stubbing;i think the documentation here is wrong: i believe the doreturn() syntax should be used there instead at least when i do that it works but when i do the when(myfoomymethod())thenreturn() that line itself runs the real impl of mymethod; here: #1268 || thanks!on fri dec 15 2017 at 7:28 am serge bishyr <notifications@githubcom>wrote:> fixed here: #1268 < —> you are receiving this because you authored the thread> reply to this email directly view it on github> < or mute the thread> < > ||;1;0;1262: update doc for answerscalls_real_methods;
1270;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;cleaner code for mockito users by better integration with static code checkers  more @checkreturnvalue;builds on #1130  #1228.;;1130.0;cleaner code for mockito users by better integration with static code checkers more @checkreturnvalue;builds on #1130 #1228;"note that almost all non-`void` `orgmockitomockito` methods are now annotated `@checkreturnvalue` you could consider going the other way by annotating the class as a whole `@checkreturnvalue` and adding [`@canignorereturnvalue`]( to the non-`void` methods that form the complement ||   context for this change: within a company-internal pr i found an unused `mock(someclass)` statement and thought ""itd be nice if mockito supported `@checkreturnvalue`"" then i found #1228 but noticed that the `#mock` methods werent annotated in fixing that i decided to go over the whole class for each method annotated in this pr i traced its logic most are side-effect free while the remainder throw an exception in case of misuse the only non-`void` method in `orgmockitomockito` i did not annotate is `#ignorestubs` because it returns its input  || the reason i did not include these methods in #1228 was because there were no side-effects checking them would therefore not required as it would be perfectly okay (from a mockito-perspective) that these methods are invoked and then discarded the methods i annotated do have side-effects and thus are harmful if you discard the return valuetherefore i am hesitant to accept this pr as (to my knowledge) these methods are pure and are not harmful for mockito to be invoked a lot of times || invoking these methods many times may not be harmful in a functional sense but imho `@checkreturnvalue` is more about establishing correctness ignoring the return value of any of these methods indicates a human error leading to cluttered tests in the best case and a false sense of security in the worst caselooking at guava that seems to be the way how they use the annotation for example it is applied to the whole package `comgooglecommoncollect` with some methods within that package annotated `@canignorereturnvalue` none of those are pure || i do understand that point-of-view however in that case we would need to update every public api that is non-void to have this annotation which seems counter-intuitiveanyways these are my 2 cents paging @mockito/core to give their opinion    || > \[\] in that case we would need to update every public api that is non-void to have this annotation \[\]well a single annotation in `package-infojava` takes care of that ([example]( :dbut indeed lets see how others feel about it || interesting discussion! heres how i would summarize the decision point: - a) benefit: a chance of making our customers code cleaner because they could identify and remove dead code - b) downside: hard to apply this strategy consistently we would have to review all public api and always remember to use those annotations when adding new apigiven that we already started using the annotations the downside b) already applies merging the pr does not make it any worse hence the downside can be discounted and we only have the benefit :)+1 im in favor of merging the prthank you @stephan202 for tracing the public api methods and coming up with the pr! || @timvdlippe the current `master`s last commit is e51a0515ac8440572cf1af80f7aa620d51e8075e but `git grep -i prone` doesnt show an error prone integration cant find another applicable branch using `git log -s prone -i  --all` either am i looking cross-eyed or? :) || ah my brain was derping i was working on #1339 and thought i merged it but i did not so we have to rebase after that pr is merged sorry for the confusion || no worries   i see #1339 also targets the `release/2x` branch so i wont need to switch the target branch for this pr(and indeed that pr contains a bunch of `@suppresswarnings(""checkreturnvalue"")` this pr will almost certainly force the addition of a bunch more of those)ive subscribed to the other pr and will rebase again once its  ";mockito should annotate when() methods with a custom annotation @checkreturnvalue;static code checkers like error-prone and findbugs will help detecting invalid usage of mockito in single-call situations if mockito source code were annotated with @checkreturnvaluesee:*     like for assertj any annotation with name should do no need to depend on a specific library with  @checkreturnvalue;that seems fine to me please submit a pull request    ||;1;0;add @checkreturnvalue to additional mockito methodsbuilds on #1130 #1228;
1272;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;strictness configurable per mock / stubbing;792;;792.0;strictness configurable per mock / stubbing;"792today we have strict stubs feature a key enabler for cleaner tests and improved debuggability strict stubs dont work well with ""common stubbing"" pattern they also dont like when we call stubbed methods with unexpected arguments - even though sometimes it is legit for more see #792 ### solution```java@test public void demo() {  //1 ""lenient()"" method on mocksettings interface:  foo mock  mockitomock(fooclass withsettings()lenient())  //2 ""lenient()"" method on mockito class:  mockitolenient()when(mockfoo(1))thenreturn(1)  mockitolenient()doreturn(1)when(mock)foo(1)}```for more see #792### public api changes- new methods:   - mockito#lenient()   - mocksettings#lenient()   - mockcreationsettings#islenient()   - stubbing#getstrictness()  - new interfaces:   - basestubber - extracted out from existing ""stubber"" interface so that we can reuse api with ""lenientstubber""   - lenientstubber - instance returned by ""mockitolenient()""- other changes:   - made @orgmockitonotextensible annotation public so that we can use it in subpackages"; merging 1272 ;new lenient() strictness setting available at mock and at stubbing level;"## problemsoverview of strictness: #7691 it is not possible to have any common stubbing when using strictnessstrict_stubs strict stubs is very useful and it is most likely the future default for mockito 3 common stubbing typically is a part of ""before"" method or a test utility class that generates mocks```javapublic mockitorule rule  mockitojunitrule()strictness(strictnessstrict_stubs)@before public void before() {  //a) common stubbing needed for most test methods  when(mockfoo())thenreturn(""bar"")  }```2 api caveats:```java@test public void demo() {  //b) not possible to stub the same method using when with different args:  when(mockfoo(1))thenreturn(1)  when(mockfoo(2))thenreturn(2) // <- will throw potentialstubbingproblem  //c) code under test cannot use stubbed call with different argument (sometimes we need it)  when(mockfoo(1))thenreturn(1)  mockfoo(2) // <- will throw potentialstubbingproblem whether we need it or not}```## suggested solutionnew public api overview:```java@test public void demo() {  //1 new method on mocksettings interface:  foo mock  mockitomock(fooclass withsettings()lenient())  //2 new method on mockito class:  mockitolenient()when(mockfoo(1))thenreturn(1)  mockitolenient()doreturn(1)when(mock)foo(1)}```details: - why 2 new public methods? sometimes common stubbing has a form of one or few stubbings in ""before"" method - its best to configure leniency per stubbing sometimes a mock object has many common stubbings (described in detail in the ticket thread below) - its best to configure leniency per mock## examples1 common stubbing```javapublic mockitorule rule  mockitojunitrule()strictness(strictnessstrict_stubs)@mock(lenient  true) foo mock@before public void before() {  //a) common stubbing needed for most test methods  when(mockfoo())thenreturn(""bar"")  }```2 api caveats:```java@test public void demo() {  //b) not possible to stub the same method using when with different args:  lenient()when(mockfoo(1))thenreturn(1)  when(mockfoo(2))thenreturn(2) // <- works!  //c) code under test cannot use stubbed call with different argument (sometimes we need it)  lenient()when(mockfoo(1))thenreturn(1)  mockfoo(2) // <- works!}```## original reportthe new unnecessarystubbingexception logic is great however it is sometimes useful to disable this detection for specific methods could it be possible to add an annotation that says ""unnecessary stubs should not be detected in this method""?this would also make it easier to migrate from mockito 1* to mockito 2 this is the case in the project i am currently working at where we have created some utility methods that creates a mock and configures it to fit most of our use cases as we use this method at many places where different configuration is needed it will cause a lot of unnecessary stubbing thus we would like to keep this method out of unneccessary stubbing-check while doing this check on the rest of the code base";"thank you very much for this feedback!do you use the silent junit runner currently to avoid the exception in your scenario?your feedback and recent code review from @bric3 made me think about enabling/disabling stubbing strictness per method or per class using annotations for example (brainstorming):```java@mockito(strictstubs  true)public class sometest {  @test  @mockito(strictstubs  false)  public void sometestmethod() {  }}``` || thanks for following up on this!yes we currently use the silent runner which works fine but of course lacks the stubbing checking that we would like to have on the rest of the methodsannotations for this sounds to me like a good solution to the problem it would be really great if this annotation could also be used on helper methods such as in our scenario:```@mockito(strictstubs  true)public class sometest {@testpublic void sometestmethod() {    code code  createcode(""a"")}@mockito(strictstubsfalse) private code createcode(string codetype) {    code code  mock(codeclass)    doreturn(codetype)when(code)getcodetype() // not always but in most cases invoked }}``` || thanks for the suggestions! my feedback / questions:1 is there a reason why you use the runner and not mockito junit rule?2 the annotation api would not work on the helper methods only on the test methods its because the rule only captures and provides the test method to the implementation || thanks for your feedback!1 no not really we have not really looked at the difference nor taken a conscious choice on this2 oh i see that means that it would be hard to use annotations to do this the way i was hoping was possible ideally it would be great if we could enable unnecessary stubbing in general but configure it so a developer could call the createcode method without having to mind the unnecessary stubbing here or perhaps by setting some properties on the junitrunner? so that createcode could be something like    ```java    private code createcode(string codetype) {       junitrunnerdisable_stubbing_check()       code code  mock(codeclass)       doreturn(codetype)when(code)getcodetype() // not always but in most cases invoked       junitrunnerenable_stubbing_check()    }    ```i am not that into the mockito codebase but i would guess that this could require quite some rewrite? (and it also indicates that our usage of helper methods are probably not a smart path to follow) || my point on helper method or helper object for mocks is usually that the model shows mock anti pattern or that the granularity of the test is not narrow enough usually that means that a concrete object should be **built** instead not a mockthe idea may be intersting though probably not in mockito 2 in mockito 3 (jdk8) maybe we could introduce apis like this :```javamockitoruleinconfiguration()                     strictness(strictnesslenient)                     stub(() -> {                            doreturn(codetype)when(code)getcodetype() // possible stub                           //                      })```_the above snippet is mostly exploring idea for this kind of api as i dont have these kind of needs at this time it may be just wrong in many aspects_ || see #840 - i created a proposal for solving this use case for junit rules || as an alternative solution could you use the mocksettings? eg something like ```code code  mock(codeclass withsettings()nounnecssarystubbing())``` || i also found a use case:im mocking zk which uses a lot of map-like structures which are exposed via accessors (`getattributes()` `getattribute(string)` `getattribute(string boolean)` `setattribute()` )in my test setup i create a map and im using `thenanswer()` and `doanswer()` to link the accessor methods to my test map the code then looks like this:```    private map<string object> desktopattributes  new linkedhashmap<>()            desktopattributesput(attr_event_queues desktopeventqueues)            mockdesktop desktop  mock(mockdesktopclass)            when(desktopgetattributes())thenreturn(desktopattributes)            when(desktopgetattribute(argumentmatchersanystring()))            thenanswer(answer -> {                string name  answergetargument(0)                object value  desktopattributesget(name)                return value            })            when(desktopgetattribute(argumentmatchersanystring() mockitoanyboolean()))            thenanswer(answer -> {                string name  answergetargument(0)                object value  desktopattributesget(name)                return value            })            doanswer(answer -> {                string name  answergetargument(0)                object value  answergetargument(1)                desktopattributesput(name value)                return null            })when(desktop)setattribute(mockitoanystring() mockitoany())            doanswer(answer -> {                string name  answergetargument(0)                object value  answergetargument(1)                desktopattributesput(name value)                return null            })when(desktop)setattribute(mockitoanystring() mockitoany() mockitoanyboolean())            when(desktophasattribute(mockitoanystring()))            thenanswer(answer -> {                string name  answergetargument(0)                return desktopattributescontainskey(name)            })            when(desktophasattribute(mockitoanystring() mockitoanyboolean()))            thenanswer(answer -> {                string name  answergetargument(0)                return desktopattributescontainskey(name)            })```i need this code block three times (desktop attribute map session attributes servlet context attributes) i prefer mocking over mock objects since the interfaces have hundreds of methodsi have put this code into a shared junit rule its lazy but its also generic: since the rule doesnt know what parts of zk the test will call it cant tell which accessor methods will be needed but i still need to know when a method is called which wasnt mockedtherefore i need a way to tell mockito ""there might be unused stubs in the following code block but thats ok since its shared by many tests"" an annotation on the test wont work since the code is in a junit rule i could pass the mockitorule to my rule so this approach would work:    mockitorulelenientstubbing(() -> {  }) || @digulla thank you for reporting! some feedback:- the code looks really hard to read (many lines of mock interactions) i suggest to rethink testing strategy refactor the code under test so that it is easier to test or roll out hand mocks- given above we cannot consider it as a legit use case we want to avoid implementing features / api for code that should be cleaned up / refactored for simplicity and testability- given that #840 solves this use case (strictness method on the rule object) im closing this ticketah it was interesting to refresh my memory about this ticket :) hope that helps! || @mockitoguy  sorry that doesnt help at allwith ~200k on stackoverflow that was the most simple solution i could come up with youre welcome to show me a better solutionthe testing strategy is sound it doesnt break easily or unexpectedly and is easy to understand for new members of the team i could copy only the necessary lines to new tests but that would mean i would be the only one who can write new tests also: violates dryrefactoring is not possible zk is a ui framework with a huge code base and many projects use it asking to change the api is like asking to ""fix"" the java collections api: understandable maybe even reasonable but unrealistichand mocks would mean i would have to write about a lot of useless code which violates your own rule to keep tests simpleso im between a rock and a hard place: youre right for open source projects which no one uses or green field commercial projects for existing commercial projects that i cant move its not helpful they have ugly and unmodifiable apis so i have to move the only place where i have influence: thats the testsso for now i have to disable a good feature of mockito and can no longer make sure that my tests stay clean that really sucks || thank you for describing your context! let me think about this and ill get back || i guess my use case is ""im writing a mocking framework for some commercial api which helps other developers to write tests"" that means ill always overmock in my case i have to mock several map-like apis which are exposed in several beans without a common interface (just like the attribute maps in j2ee servletcontext and servletrequest and the headers in servletresponse) || @digulla that pretty much matches my use case too imho a good solution would be to be able to specify ‘silent’ at mocked object level rather that the test class level  || i like the idea of adding new public api for this use case@digulla with my earlier reply i did not intend to depreciate your efforts in getting clean tests for your entire team it’s great that you’re pushing for this!the use case you describe could be solved more cleanly with hand stubs sometimes simpler code is actually more code :) what do you think about this idea: - noop implementation of the 3rd party interface generated automatically with ide cheap to maintain regardless of amount of methods because they are all noop low to zero cognitive overhead for the team - hand stub implementation extends the noop implementation tailored for what exactly the tests needcoming back to mockito for this use case i bet that our users would disable strictness per entire test rather than build hand stubs (even if hand stubs would be a better solution) disabling strictness per entire test nullifies strictness benefits to provide best dev experience mockito should honor this use case and offer a better apithere are 2 main alternatives:1) strictness per mock as suggested```javamock(fooclass withsettings()strictness(strictnesslenient))mock(fooclass withsettings()lenient()) //alias```2) strictness per stubbing for example:```javalenient()when(mockfoo())thenreturn(“boo”)lenient()doreturn(“boo”)when(mock)foo()```any feedback?thank you guys for feedback and for pushing us to reconsider were trying to keep mockito api slim and avoid solving use cases better solved by refactoring / cleanup the code || i did wonder about something like ```@mock (strictness strictnesslenient) private foo mockfoo```as well but i wonder if that syntax would over-encourage people to use the feature ime i think the sort of test frameworks fixtures etc where i see this to be most useful probably use the mock(fooclass) mechanism for instantiating mocks  || @mockitoguy >there are 2 main alternatives:i see a third one as discussed in the junit 5 pr (#1221) and the [mockito google group]( i would like to propose an annotation base approach that can be applied also at test-class and test-method level this keeps the api consistent and slim (at least when junit5 is used)```@mock@strictness(lenient)foo mock``` || @christianschwarz youre right! sorry for discounting the annotation option || i plan to tidy up this ticket in the next few days so that it documents the use case the implementation options and the desired implementation@christianschwarz strictness per method is not an ideal solution for the use case described in this ticket: 1 every time someone uses shared stub object he needs to remember to use lenient strictness on the method level 2 method level strictness turns off useful stubbing validation for all mocks in the method rather than only for the mocks that really need it 3 it does not communicate the intent well the reader of the test method does not know why lenient strictness is needed for method this also can lead to cargo culting - developer copy paste-ing test methods along with strictness setting without known why they need iti must admit that the @strictness annotation does look handsome in the test :)what do you think about option 1 and 2? do we want to implement both? perhaps we start with mock level annotation for now it solves the use case very well and is not very controversial || @mockitoguy > @christianschwarz strictness per method is not an ideal solution for the use case described in this ticket:thats why i proposed to use the `@strictness` annotation at field level for this use-case too the `@strictness` annotation at field level would also fit into the annotation proposal for junit5  this in return would lead to a clean single api where strictness is defined at field method and class level the same way using `@strictness`> what do you think about option 1 and 2? i would prefer option 1 cause: * it feels consistent with other mock setting configurations * it allows to implement the annotation based proposal too * option 2 would add an other alias like api for stubbing thats uncool>do we want to implement both? option1 + `@strictness` ? yes!>perhaps we start with mock level annotation for now it solves the use case very well and is not very controversial`@mock` + `@strictness()`  or `@mock(strictness)` ? i would opt for `@strictness()`  cause it allows more uses cases || >thats why i proposed to use the @strictness annotation at field level for this use-case toothats fair!lets discuss the 2 contention points:1 it is awkward that some mock properties are configured as parameter of the existing @mock annotation while some other (strictness) is a standalone annotation2 we need to support strictness at mock level via imperative api eg ""withsettings()lenient()"" method (or something like that) this is one of our principles of api development (which we should document :) annotations are ""syntax sugar"" - all mockito features are available via imperative api given that we implement ""withsettings()lenient()"" why do we need @strictness annotation at all? im pushing on this because the only thing better than clean api is clean and simple api the less methods annotations complexity - the better! || @mockitoguy  re ""hand stubbed"": that doesnt work since java doesnt allow multiple inheritance i just pasted a small part of the actual test setup my setup class can mock several aspects of the zk api: session and request attributes event queues view models injection what i end up with a mix of lenient and dedicated mockswith a hand stubbed approach i would have to copy a lot of code from test to test my goal is to have lenient mocks for unimportant parts like session attributes (code under test will complain when they are missing) but strict checking for things like events published (i really dont want to miss those)the test can then say ""hey wire up event publishing"" if they expect events without the setup any code using events will just crash with npe with the setup mockito should complain when no events related code was executed to keep the tests clean (to avoid devs doing copy&paste of code they dont understand)re annotations: i dont think that the annotations are a good solution here they are nice for code which needs to be migrated from old mockito but for new code they are too coarse for all my use caseson the other hand i dont like the idea of having to add `withsettings()lenient()` in many places it would be great if i could execute a bunch of stub calls in a single lenient code block if that was possible id opt for an annotation on the setup method which calls the `when()`/`doreturn()` but i dont think there is an easy way to implement this when the setup method is not inside the test class but in a junit `@rule` implementation || thank you for reply! im still interested in your use case hence my further questions>with a hand stubbed approach i would have to copy a lot of code from test to test why? hand stub implementation should have all the common reusable code in the test you can just call ""mocksetupeventpublishing()"" or something like that>on the other hand i dont like the idea of having to add withsettings()lenient() in many places it would be great if i could execute a bunch of stub calls in a single lenient code blockprovided that we add both: stubbing + mock level strictness setting then you have 2 options:1 only add ""withsettings()lenient()"" at mock creation time only for mocks that act as ""reusable business stubs"" (wasnt sure how to call them) when you write stubbings you dont specify ""lenient()""2 for other cases where you have a default stubbing reused in most of the test methods you declare the default stubbing using ""lenient()"" method at the stubbing levelthoughts? || @mockitoguy thanks i feel that i dont have a completely clear picture yet> hand stubso a base class with a lot of empty methods and then using spy() to overwrite them? that might work but i dont like spy() (had too many problems with that approach in the past)it still feels like more effort than simply wire some map methods to api methods using `answer`> 2 optionsoption #1 is too coarse for me with option #2 i would have to add 7 lines of code to the block in  and you were complaining that the code was already too complicated :-)thats why i suggested to have an ""enable some options for a code"" block approach in my case i could then wrap the call to the `setupdesktopattributes()` method with that || >so a base class with a lot of empty methods and then using spy() to overwrite them?hand stub/mock is a class that is completely tailored for the business of your tests sometimes referred as ""test fixture code"" ""test utils"" ""test support classes"" hand mocks dont use mockito not even spy() hand stub needs to be coded and maintained but it provides superior readability and usefulness because it is tailored to your domain>option #1 is too coarse for me with option #2 i would have to add 7 lines of code to the blockwe could potentially provide a method like:```javamockitolenient(() -> {  })```not sure about this though its a very different api than what we have so far per-mock + per-stubbing leniency feels like a happy medium: if repeated ""lenient()"" is a problem you can configure it per the entire mock per-mock is coarse grained but on the other hand it is conventional and simple big ""lenient"" block might lead to weird test code developers putting more code inside the block the intent of the code getting obscured || updated the description with the problem statement and proposed api changes feedback before we start coding? || update: work in progress in pr #1272friendly ping for review of the design outlined in this ticket description! || im pondering the two api designs: `mock( withsettings()lenient())` and `lenient()when()`i feel it would be better if the two were more similarwhy not `when( withsettings()lenient())`? that way the api would be more symmetric when adding more settings they would naturally flow into the existing code but it would be hard to add options only for `mock()` ( problems can only be discovered at runtime)what about  `mock()lenient()`? or `lenient()mock()`? that would be the opposite approach to make the two apis similar here the chaining pattern can make sure that you cant use options that are illegalalso this is shorter i feel `withsettings()` adds a lot of visual bloat || > im pondering the two api designs: mock( withsettings()lenient()) and lenient()when()i feel it would be better if the two were more similaryeah possibly we also want to have those new api methods consistent / similar with the existing api: - currently the way to configure mocks is: withsettings() or annotation - stubbing is inconsistent (when vs doreturn when vs given) due to the api evolution and java limitations there is no concept of configuring a ""stubbing"" in mockito api currently (assuming that declaring what happens when stubbed method is called is part of the stubbing and not an operation of ""configuring stubbing"")> why not ```when( withsettings()lenient())?```how would this play with doreturn syntax?> what about ```mock()lenient()?``` or ```lenient()mock()?```the former is not possible because ```mock()``` returns the type were mocking the latter is interesting problem is that it is inconsistent with how currently mocks are configured (withsettings())thank you for thoughtful feedback! || how about a fluent api to mock several methods of a mock at once? that way i could specify the lenient once at the top? || >how about a fluent api to mock several methods of a mock at once? that way i could specify the lenient once at the top?can you write a comment with an example how it would look? this would help us make a decision sorry for late answer xmas break :) i made progress on the ticket though! || im finalizing the implementation in #1272 it will be released within days || ";1;0;made documentation consistent;
1280;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;update strict_stubs documentation for verifynomoreinteractions;1086;;108.0;update strict_stubs documentation for verifynomoreinteractions;1086; ;clarify spy vs mock calls_real_methods;id suggest adding a comment or side note in `[@injectmocks]( to explain that when you want to inject real instances (and not mocks) you have the choice (unless im mistaken) between `[@spy]( and `[@mock(answer  calls_real_methods)]( but the former is preferable because;injecting real instances is not supported by the current injection mechanism the things you mentioned are barely tricks so instead of promoting tricks it would make more sense to support real type injectionalso i find `@mock(answer  calls_real_methods)` to be somewhat bad practice i dont think we should expose that || its useful when di are not possible || which doesnt mean its a not a trick usually it means the production and/or test code need a serous refactoring and if its an external type that cannot be refactored then the following principle apply _dont mock types you dont own!_anyway im totally against exposing this bad practice in the doc as we want to develop a better code for our peers for the next one working on the matter ||;1;0;update strict_stubs documentation for verifynomoreinteractions1086;
1281;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix verificationwithtimout javadoc comment;as opposed to verificationafterdelay  verificationwithtimout doesn t support never();;0;fix verificationwithtimout javadoc comment;as opposed to verificationafterdelay verificationwithtimout doesnt support never(); ;;;;1;1;fix verificationwithtimout javadoc commentas opposed to verificationafterdelay verificationwithtimout doesnt support never();
1282;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;extra test case  javadoc update;let s keep adding test cases to ensure great coverage of the entire behavior.;;0;extra test case javadoc update;"lets keep adding test cases to ensure great coverage of the entire behavioralso updated documentation so that we consistently use the ""lenient"" vocabularystumbled upon it when working on #1272   ";is this intended to be merged before or after #1272? ||   >is this intended to be merged before or after #1272?yes to keep #1272 smaller i will be posting unrelated improvements in separate prs || @timvdlippe ok to merge? || thanks! merging ||;;;;1;1;updated documentationinformed that silent mode is effectively lenient strictnessstumbled on it when working on #1272;
1301;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;extend mockitosession(builder) api to enable usage by testing frameworks;the first commit in this pr 1232. in the additional commits  i ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:;;1232.0;extend mockitosession(builder) api to enable usage by testing frameworks;the first commit in this pr 1232 in the additional commits ive taken the liberty to implement my proposals from  add `mockitosessionbuildername(string)` to pass a name from the testing framework to the `mockitosession`- add `mockitosessionbuilderlogger(mockitosessionlogger)` to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as junit jupiter)- add `mockitosessionfinishmocking(throwable)` to avoid potentially confusing warnings for failing tests- add `mockitosessionsetstrictness(strictness)` to change the strictness of the current session (there were two test cases requiring that)each of these changes is in a separate commit thus it should be relatively easy to take only those changes that you think good or just the first one to 1232to showcase that this new api is sufficient to implement an extension of a testing framework ive changed the `junitrule` implementation to use it;" merging 1301  || ";[junit5] mockitosession#initmocks should support multiple test instances;in order to support nested tests in junit5 (see #1221)  mockitosession#initmocks should allow to pass more than one test instance or allow multiple calls on initmocks with different test instancesin other words/code:``` mockitomockitosession()            initmocks(roottestinstance)            initmock(nestedtestinstance)```or ``` mockitomockitosession()            initmocks(roottestinstancenestedtestinstance)```;"related discussion from #1221 ----@timvdlippe  regarding #1232: another option would be to not support nesting of test classes i think we actively have to consider this option given our public api was apparently coupled to the junit4 implementation and we can not ship breaking changes per our policy----@marcphilipp  well its @incubating so you could still change it right? 😉> > besides i think neither of the two proposals would break compatibility would they? but then again we should discuss this over at #1232 🙂----@timvdlippe  hm looking at it again it seems that the breaking change is actually in an internal api namely testfinishedevent which is created in mockitosession as such i think we should be okay actually i will do a proper investigation this weekend (hopefully else next week) and update #1221 i hope you are okay with that @christianschwarz ? once that is done i can more definitively say the impact on our api and whether we are risking a breaking change i have good hopes now we might actually dodge that----@marcphilipp  `testfinishedeventgettestclassinstance()` and `testfinishedeventgettestmethodname()` are currently only used (twice) like this:> > ```> string testname  eventgettestclassinstance()getclass()getsimplename() >                   + """" + eventgettestmethodname()> ```>> currently `defaultmockitosession `always uses null for `testfinishedeventgettestmethodname() `which strikes me as odd i think it would be better if testfinishedevent only had two methods: `getfailure()` and gettestname() then mockitosessionbuilder could get a testname(string) builder method and defaultmockitosessionbuilder could pass it to defaultmockitosession and so on> > alternatively `mockitosessionbuilder `could get a `testmethodname()` builder method and pass that on> > moreover i think `mockitosessionbuilder `should allow to configure a `mockitologger` this way frameworks like junit could pass in a custom implementation for junit jupiter a `mockitologger `that publishes report entries instead of writing to stdout (which causes problems will parallel execution) comes to mind> > thoughts? || @timvdlippe > i will do a proper investigation this weekend (hopefully else next week) and update #1221 i hope you are okay with that @christianschwarz ?of coursego ahead! || @marcphilipp >moreover i think `mockitosessionbuilder` should allow to configure a `mockitologger`>>thoughts?make sense should be a new issue || hey guys! whats the next step for closing this issue getting us closer to supporting junit5?@christianschwarz - can you update the ticket and clarify the public api change? do you suggest adding new ""initmock()"" method? do you suggest vararg or consecutive invocation or both? i would suggest to go for the simplest compatible api change - keeping the existing method just making it vararg will you be able to work on this?@marcphilipp - thank you for suggestions! for internal refactorings we are pretty open - do what you think is good for the codebase for public api changes/additions we push back by default and we make sure that the use case is very compellingthanks!!! || i would say we can change it to a vararg this ticket basically addresses  which is unfortunate to do right now if we change it to vararg we can transform the `testclassinstances` list to an array and make it work    || ";1;0;merge branch release/2x into issues/1232-session-additions;
1307;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update public api of invocationfactory needed for android static mocking;1306;;1306.0;update public api of invocationfactory needed for android static mocking;1306a real method might throw a throwable but the invocations produced byinvocationfactory call the real method via a callable that can onlythrow a exceptionhence add a new method to invocationfactory that allows to createinvocations with a realmethodbehavior  a callable that throws athrowable;" merging 1307  thanks for review! || ";invocationfactorycreateinvocations realmethod cannot throw a throwable;invocationfactorycreateinvocation takes a callable that is used to call the real method of the invocation if the invocation throws an exception the exception is forwarded from the callable unfortunately callable can only throw an exception not a throwablehence if the real method throws a throwable that is neither an error runtimeexception or exception it cannot be forwardedi recommend for invocationfactorycreateinvocation to take realmethod argument that can throw a full throwablethis is required for fixing: linkedin/dexmaker#64;;1;0;simplified the test;
1310;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;ensure isolation of stubbings;### bugfix compatibility;;1279.0;ensure isolation of stubbings;" compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())thenanswer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as ""documented mockito syntax caveat"" thank you @r-smirnov for persistence and getting this !";"can we give an example of a test that breaks with this ""new"" behavior? ||  merging 1310  <  || ";cannot override stubbed method that calls a stubbed method;"mockito 2130overriding stubbed method that calls a stubbed method in its answer may result in a number of different failure modes:1) wrongtypeofreturnvalue is thrown```javaimport static orgjunitassertassertequalsimport static orgmockitomockitomockimport static orgmockitomockitowhenimport orgjunittestpublic class teststubbing {    @test    public void test() throws exception {        foo foo  mock(fooclass)        bar bar  mock(barclass)        when(foodofoo())thenanswer(invocation -> stringvalueof(bardobar()))        assertequals(""0"" foodofoo())        when(foodofoo())thenreturn("""")        assertequals("""" foodofoo())    }    interface foo {        string dofoo()    }    interface bar {        int dobar()    }}```2) wrong method is stubbed```javaimport static orgjunitassertassertequalsimport static orgmockitomockitomockimport static orgmockitomockitowhenimport orgjunittestpublic class teststubbing {    @test    public void test() throws exception {        foo foo  mock(fooclass)        bar bar  mock(barclass)        when(foodofoo())thenanswer(invocation -> bardobar())        assertequals(0 foodofoo())        assertequals(0 bardobar())        when(foodofoo())thenreturn(1)        assertequals(1 foodofoo())        assertequals(0 bardobar())    }    interface foo {        int dofoo()    }    interface bar {        int dobar()    }}```3) stackoverflowerror is thrown```javaimport static orgjunitassertassertequalsimport static orgmockitomockitomockimport static orgmockitomockitowhenimport orgjunittestpublic class teststubbing {    @test    public void test() throws exception {        foo foo  mock(fooclass)        bar bar  mock(barclass)        when(foodofoo())thenanswer(invocation -> bardobar())        assertequals(0 foodofoo())        when(foodofoo())thenanswer(invocation -> bardobar() + 1)        assertequals(1 foodofoo())    }    interface foo {        int dofoo()    }    interface bar {        int dobar()    }}```the cause is that in the mockingprogressimpl the ongoingstubbing for dofoo() invocation is replaced with the ongoingstubbing for dobar() invocation";"one potential solution is to restore the ongoingstubbing after evaluating the answer[mockhandlerimpljavapatchtxt]( || wow thank you for reporting and digging deep into this problem you nailed down another edge case of mockito syntax! (ping @timvdlippe youre collecting problems with existing syntax)one solution to this problem is using ""doreturn"" syntax however it does not really help the user at minimum the error message of wrongtypeofreturnvalue and friends should indicate this potential problem>one potential solution is to restore the ongoingstubbing after evaluating the answerthis is potentially a good idea can you hack it together and submit a pr? lets see if it breaks any existing testsim a little bit worried fixing this bug because it is an incompatible change and there might be tests out there that depend on the existing behaviorstackoverflowerror needs fixing too its great that you have found all problems with this use casebtw im traveling so please pardon spotty replies || i can confirm that the prototype in #1264 does not require any changes to make this work you can see the full passing test suite at  || created a pr #1296 with [the above patch]( applied || @r-smirnov thank you very much!!! ive opened a separate pr with your commits #1310 please take a look read the description and let me know if something is amissyour pr is a fantastic contribution (i thought that his problem is not fixable!!!) and im really looking forward to merging! || ";1;0;added code comment;
1310;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;ensure isolation of stubbings;### bugfix compatibility;;1296.0;ensure isolation of stubbings;" compatibilityfor certain corner cases this bugfix may be incompatible we believe that the exposure is minimal (corner cases only possibly incorrect tests) and the bugfix important if your test fails after upgrading to mockito version that contains this fix please scrutinize the test - it is very likely that the test is incorrect we apologize for any compatibility problems arising from this change it is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every mockito test in the worldwhen stubbing with answers that call different mocked methods:```javawhen(mockfoo())thenanswer(() -> { othermockbar() }```we need to ensure that ```mockfoo()``` and ```othermockbar()``` dont interfere prior to this bugfix this scenario resulted in various problems like: stack overflow error unexpected stubbings declared on different mock unexpected invalid return type errorsfor more details see #1279### solutionthe solution is based on great pr #1296 by @r-smirnov **huge thanks** to @r-smirnov for reporting the problem diligently then digging into the bowels of mockito to find a clean solution providing excellent test cases that demonstrate the problem when i initially saw the issue report i thought that its not fixable and we would close it as ""documented mockito syntax caveat"" thank you @r-smirnov for persistence and getting this !";"can we give an example of a test that breaks with this ""new"" behavior? ||  merging 1310  <  || ";add files via upload;applied patch from issue #1279; merging 1296  < ;1;0;added code comment;
1319;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1314 : include all the invocation in mock verification error message;have changes the verify error message to include all the invocation instead of including just one undesired invocation.;;1314.0;1314 : include all the invocation in mock verification error message;have changes the verify error message to include all the invocation instead of including just one undesired invocationpreviously we have message like:```wanted 1 time:-> at but was 2 times undesired invocation:-> at ```this pr changes it to ```wanted 1 time:-> at but was 2 times:-> at -> at ```to make the error message consistent the similar changes was made for too little invocations casethe message:```wanted 3 times:-> at but was 2 times:-> at ```changed to:```wanted 3 times:-> at but was 2 times:-> at -> at ```; merging 1319 ;undesired invocation message improvements;let’s take a look at the following code```kotlinpackage whateverimport orgjunittestimport orgmockitomockitoclass multipleundesiredinvocations {    interface inner {        fun call()    }    interface sideeffect {        fun call()        class impl(private val inner: inner) : sideeffect {            override fun call()  innercall()        }    }    interface outer {        fun call()        class impl(private val inner: inner sideeffect: sideeffect) : outer {            init {                sideeffectcall()            }            override fun call() {                innercall()            }        }    }    @test    fun test() {        val inner  mockitomock(inner::classjava)        val sideeffect  sideeffectimpl(inner)        val outer  outerimpl(inner sideeffect)        outercall()        mockitoverify(inner)call()    }}```the `test` will fail of course the following message will be shown```orgmockitoexceptionsverificationtoomanyactualinvocations: innercall()wanted 1 time:-> at whatevermultipleundesiredinvocationstest(multipleundesiredinvocationskt:43)but was 2 times undesired invocation:-> at whatevermultipleundesiredinvocations$outer$implcall(multipleundesiredinvocationskt:30)```it is kind of fine but the undesired call (for me) is actually inside the `sideeffect` classis it possible to extend the message to show all undesired invocations somehow? it would be extremely helpful when debugging failed tests similar to the sample above — i e when a side-effect calls the target object;good idea do you want to submit a pr? || @mockitoguy i can work on italso to make it consistent i would suggest to extend the message to include all the invocations for other cases as example for `toolittleactualinvocations` || submitted pr #1319  ||;1;0;split the test for invocationfinder#getalllocations;
1320;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;avoid bytebuddy import issue to enable repackaging without bytebuddy;this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.;;111.0;avoid bytebuddy import issue to enable repackaging without bytebuddy;"this allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectorytest: grep -r -e ""import org\mockito\internal\creation\bytebuddy\[^\]*$"" src/main does not return anythingoffers workaround for #1112";" merging 1320 ` ! || ";improve automation: fix binary comparison - avoidance of uncessary publication;the binary comparison does not work:- some problem with serializablenoop- poms are always different due to changed version;@szczepiq want to close this one ? || yes its done ;1;0;"issue #1112: dont import orgmockitointernalcreationbytebuddythis allows libs that use alternate mockmakers do cleanly exclude thebytebuddy subdirectorytest: grep -r -e ""import org\mockito\internal\creation\bytebuddy\[^\]*$"" src/main      does not return anything";
1324;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;improved stubbing internals and test coverage;some improvements in exception-stubbing code:;;0;improved stubbing internals and test coverage;some improvements in exception-stubbing code:- clarify intentions in basestubbing:  - replace an obsolete todo with a clarifying comment and add some tests covering related test cases  - extract the code aborting the ongoing stubbing in a separate method that always throws use return `abortnullexceptiontype` so that static-analysis tools (eg idea) yield no false-positives- clarify that throwsexception always returns the _same_ throwablethe previous `#answer` implementation might give an illusion that `throwable#fillinstacktrace` produces a new throwable but that is not correct — it always returns `this`- also replace a possible npe with a descriptive illegalstateexception; merging 1324  < ;;;;1;1;add a comment explaining the test scenarios;
1327;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;1326 : reduce the allocation rate for the typical use of locat…;…ionimpl;;1326.0;1326 : reduce the allocation rate for the typical use of locat…;…ionimpla trivial one but should be very useful as i noticed this class being instantiated quite a lot; merging 1327  < ;reduce memory consumption of the typical locationimpl;i recently noticed very heavy memory usage on our testsuite (which is using mockito) so i started profilingi eventually found #1313 but thats already being worked on also spotted a low hanging fruit: our testsuite is allocating about 6 *million* instances of `locationimpl`it looks like i cant avoid that easily however each `locationimpl` also allocates a new `stacktracefilter` which can be easily avoided when the default is being applied sending a pr shortlythis should save us about 6 million empty and pointless `stacktracefilter` :);;1;0;1326 : reduce the allocation rate for the typical use of locationimpl;
1339;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;enable errorprone build;- fix up issues found;;0;enable errorprone build;- fix up issues found- placate error prone warning where we know we do something funky- ignore two tests as it is not immediately clear what is broken  - orgmockitousagebugsvarargsvarargsnotplayingwithanyobjecttest#shouldnotallowusinganyobjectforvarargs  - orgmockitointernalutilprimitivestest#should_check_that_value_type_is_assignable_to_wrapper_referencenote: please carefully review the changes made to the code i  them up as good as i could but a real mockito expert need to verify them; merging 1339 ;;;;1;1;preserved current functionality;
1349;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1346 - different mocks are used for @mock and @injectmock in the same test class with junit 5 extension;1346 - fix  mockitoextension  which has init mocks with two identical test instances which cause the mock to be initialized and injected two times;;1346.0;1346 - different mocks are used for @mock and @injectmock in the same test class with junit 5 extension;1346 - fix `mockitoextension` which has init mocks with two identical test instances which cause the mock to be initialized and injected two times;  sadly this doesnt cover the case where we are using `@testinstance(testinstancelifecycleper_class)`>  ||;different mocks are used for @mock and @injectmock in the same test class with junit 5 extension;"ive been playing with the new junit 5 support in mockito 2170 i have found that with `@mock` and `@injectmocks` used in the same test class different mocks are injected i would expect to have the same mock reused (as it works with junit 4 or manual `@mock` initialization)sample code:```@extendwith(mockitoextensionclass)public class spaceship5bugminitest {    @injectmocks    private spaceship spaceship    @mock    private tacticalstation tacticalstation    @test    public void shouldinjectmocks() {        assertthat(tacticalstation)isnotnull()        assertthat(spaceshipgettacticalstation())isequalto(tacticalstation)          //bug ↑ - different mocks are use in @mock and @injectmock    }}```error message:```orgopentest4jassertionfailederror: expecting: <""tacticalstation (tacticalstation$mockitomock$991606095@61d6015a)"">to be equal to: <""tacticalstation (tacticalstation$mockitomock$991606095@b62d79)"">but was notexpected :tacticalstationactual   :tacticalstation```the minimal (non-)working example is available [here]( do you have an idea what could be wrong?mockito 2170 (2171 is not being released due to ( junit-jupiter 510 openjdk 180_161 linux### checklist: -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  provide versions (mockito / jdk / os / any other relevant information) -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide](https://githubcom/mockito/mockito/blob/master/github/contributingmd)";hm that seems really weird could you please post the implementation of `tacticalstation` and `spaceship` (although i am assuming they are simple pojos?) || (oh never mind i missed the small link at the end of the example to  ) || @szpak please see  for a working test i could make these tests fail with adding `final` to the field declaration so that is what is going wrong removing `final` makes the tests passwhat i do not understand is how this could work with junit 4 as we have not changed any of that code we are completely reusing all of that logic || it also works with `final` if `mockitoannotationsinitmocks(this)` is used therefore i would suspect the way how it is triggered/executed in junit 5 extension || @timvdlippe @szpak i have debugged this issue a bit here is what i found: it does look like the problem is with triggering the same logic from `mockitoextensionclass` the root cause of the problem is that `beforeeach` creates two `testinstances` of the same test class for each test looks like method `collectparenttestinstances` is adding the same testinstance to the list of test instancesi can try to work on this issue if no one is assigned to is already || prs appreciated!on mon 26 mar 2018 10:55 serge bishyr <notifications@githubcom> wrote:> @timvdlippe < @szpak> < i have debugged this issue a bit here is what> i found: it does look like the problem is with triggering the same logic> from mockitoextensionclass> the root cause of the problem is that beforeeach creates two testinstances> of the same test class for each test> looks like method collectparenttestinstances is adding the same> testinstance to the list of test instances> i can try to work on this issue if no one is assigned to is already>> —> you are receiving this because you were mentioned>>> reply to this email directly view it on github> < or mute the thread> < > || have added pr #1349 with the fix for the issue || it works flawlessly thanks @seriybg!@timvdlippe as this bug can impact all those people preferring a constructor injection what do you thing about releasing the new minor version (eg after #1350 is hopefully merged :) ) to maven central? || @szpak yes after #1350 we will probably publish a new version you can however already use the latest version from bintray || i know tim that i can but junit 5 support is a notable feature and having it working correctly in the latest non-development version (available in maven central) seems very sensible for me great that we agree on releasing a new stable (but ihmo still 217x) version soon || im seeing this same bug when using `springextensionclass` along with `mockitoextensionclass`:```@extendwith({mockitoextensionclass springextensionclass})public class injectmockstest {  static class tacticalstation {}  static class spaceship {    private final tacticalstation tacticalstation    public spaceship(final tacticalstation tacticalstation) {      thistacticalstation  tacticalstation    }    public tacticalstation gettacticalstation() {      return tacticalstation    }  }  @injectmocks  private spaceship spaceship  @mock  private tacticalstation tacticalstation  @test  public void shouldinjectmocks() {    assertthat(tacticalstation)isnotnull()    assertthat(spaceshipgettacticalstation())isequalto(tacticalstation)    //bug ↑ - different mocks are use in @mock and @injectmock  }}```this is using mockito 310 junit 560 and spring boot 530release || > im seeing this same bug when using `springextensionclass` along with `mockitoextensionclass`:> > ```> @extendwith({mockitoextensionclass springextensionclass})> public class injectmockstest {>   static class tacticalstation {}> >   static class spaceship {>     private final tacticalstation tacticalstation> >     public spaceship(final tacticalstation tacticalstation) {>       thistacticalstation  tacticalstation>     }> >     public tacticalstation gettacticalstation() {>       return tacticalstation>     }>   }> >   @injectmocks>   private spaceship spaceship> >   @mock>   private tacticalstation tacticalstation> >   @test>   public void shouldinjectmocks() {>     assertthat(tacticalstation)isnotnull()>     assertthat(spaceshipgettacticalstation())isequalto(tacticalstation)>     //bug ↑ - different mocks are use in @mock and @injectmock>   }> }> ```> > this is using mockito 310 junit 560 and spring boot 530releaseyes i am also facing this issue mine is also exactly the same scenario below are my dependenciesorgjunitjupiter:junit-jupiter-engine spring-boot-starter spring-boot-starter-test mockito-junit-jupiter:310 ||;1;0;1346 - different mocks are used for @mock and @injectmock in the same test class with junit 5 extension;
1350;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;support local parameters in test methods with junit jupiter;note that this implementation differs from the prototype implementation of the junitteam ( instead  it will do not do any parameter resolution between test methods.;;1348.0;support local parameters in test methods with junit jupiter;note that this implementation differs from the prototype implementation of the junitteam ( instead it will do not do any parameter resolution between test methods1348;" merging 1350  || ";support @mock injection in junit 5 method parameters;"junit 5 has the ability to ""inject"" parameters into test methods via an extensible ``parameterresolver`` interface  the junit 5 users guide provides an example that shows how such a ``parameterresolver`` can supply mock objects as test parameters as follows (shamelessly copied from  mymockitotest {    @beforeeach    void init(@mock person person) {        when(persongetname())thenreturn(""dilbert"")    }    @test    void simpletestwithinjectedmock(@mock person person) {        assertequals(""dilbert"" persongetname())    }}```the prototype ``mockitoextension`` provided in the junit 5 samples project shows a simple implementation of the required ``supportsparameter()`` and ``resolveparameter()`` methods (see:  ]   add the ability to inject mock objects into test method parameters to the official ``mockitoextension``  references #445";"i am 👍 for this feature with the following use case:initialization of local variable mocks previously this would be `mock<generic> mock  mock(mockclass)` however this loses the type-signature of `generic` with parameter mocks we can do `@mock mock<generic> mock` and still maintain the generic type signature || i should also note that i havent personally used parameter resolution the way its shown above  our team generally either injects the mock object at the class level and configures it in ``@beforeeach`` **or** we inject the mock object in the test method and configure it at the top of the test methods block || yes agreed rather than some ""magic"" shared by methods i think a generics-type-safe replacement for local mock initialization is a lot better || i just edited the description of this issue to include a link to the sample ``mockitoextension`` (i had intended to provide that reference originally)  i dont know if id refer to the the methods sharing the parameter instance as ""magic"" but without looking at the code it certainly isnt clear that the parameters are the shared if the types and names match  i definitely think that there are use-cases for this technique and the use of ``extensioncontextstore`` is a great way to provide references to objects from different methods  my main concern is that when there is a name collision and the types match you might end up with behavior thats really hard to understand (without knowing how the underlying extension works)im not sure im a fan of the syntax you described above as it seems more redundant than ``@mock myweirdthing myweirdmock`` - im guessing im misunderstanding your intention (i get the erasure part) || in junit 4 local mock initialization would be ```javaclass test {  @test  public void test() {    mock<string> mock  mockitomock(mockclass)  }  class mock<t> {}}```this would issue a warning saying that the generic type of `string` is not correctly created  mockitomock` (even though we know that our mocks will work)with this feature in junit 5 we can have:```javaclass test {  @test  public void test(@mock mock<string> mock) {  }  class mock<t> {}}```and the compiler will not warn any longer || i dont remember ever seeing that warning - perhaps because ive always used the mockito runner or rule? || correct you do not get that warning when using the runner but then you have mocks that are used in every single test this targets the use case where you need 1 extra mock in only 1 testcase || and if the ``mockitoextension`` is the junit 5 replacement for the runner or rule why wouldnt those warnings also be suppressed? || because the point of mock initialization is different junit 4 only supported for attributes we are now talking about method parameters hopefully when i implement this logic it is more clear to you 😄  || im not trying to be argumentative  but as a pretty heavy user of the prototype ``mockitoextension`` in the  project wed have a lot of tests to update with this syntax  well also need to make sure the example in the users guide and (if theyre kept) the code in the junit-samples project matches the official implementation  at this point i should probably let junit-team (i wish i could use a mention here) coordinate that with you@sbrannen @marcphilipp @sormuras || looking at the source of  i think we should be fine i will let you know when the pr is open so that you can test that outone note: the mockito team was not involved with the development of the prototype but i think we will approach very similar capabilities || i was looking at  because its got a bunch of use cases including test-local mocks and the ""magic"" you referred to above  thinking though the syntax change youre describing ill assume that the tests would still run but with the same warning?i do realize that the mockito team didnt produce the prototype and it would be unrealistic to think that you should be permanently limited by it architecturally  i did however think that the syntax ""proposed"" by the prototype was consistent with the field injection that already existed in mockito  im going to assume that what is produced as the official extension will be well integrated and well maintained - and i never complain about stable tooling! || opened #1350 with a proposal implementation || okay to write down the reason i think mock sharing by parameter is not a good idea:first of all there is a lot of duplicate code for every test method you need to list the mocks which results in duplicate rather using fields for these mocks removes the duplicationsecondly by relying on fields the compiler will complain when you make a typo (or change a type) with parameters you rely on the name (string-based) and the type declared both are not compiler safelastly because you can rely on fields refactoring is a lot easier as ides support renaming by field this is not possible for parametersfor these 3 reasons i see field mock sharing superior to parameter mock sharing and am therefore against introducing this logic in the parameter resolution || > for these 3 reasons i see field mock sharing superior to parameter mock sharing and am therefore against introducing this logic in the parameter resolutioni totally understand the rationale  what about support for `@spy` and `@captor`? should new issues be created or can it be part of this one? || `@spy` makes no sense as it requires a concrete instance `@captor` could be done lets discuss that in a different issue :+1: as this issue has been resolved || my memory was incorrect as #1350 has not been merged yet || >`@spy` makes no senseyou are completely right 😄ive created #1382 for adding support for `@captor` || theres `mockitospy(class)` which would work for a method parameter || @marcphilipp ah yes i see now not sure how useful that actually is as i only learned today we expose that api 😂  || ";1;0;merge branch release/2x into junit-jupiter-parameter-resolution;
1355;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;use java.lang.methodhandles.lookup::defineclass;use java.lang.methodhandles.lookup::defineclass if this mechanism is available on the current jvm. this might not work when interoperating with foreign modules  if those modules do not open and export their types  most prominently  the java core modules where there are introduced issues with serialization.;;0;use javalangmethodhandleslookup::defineclass;use javalangmethodhandleslookup::defineclass if this mechanism is available on the current jvm this might not work when interoperating with foreign modules if those modules do not open and export their types most prominently the java core modules where there are introduced issues with serializationthis introduces a change in behavior for mockito when using java 9+ unfortunately i think that this is necessary for mockito to continue to function after introduction of the jpms for now it seems like this limitation only affects working with serializability in combination with platform types what is not too bad but there is a chance that we will discover issues once this new mechanism is picked up by the community; merging 1355 ;;;;1;1;added more documentation and refined exception;
1368;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;resolve the correct protection domain for the codegen package when using reflection.;1367.;;1367.0;resolve the correct protection domain for the codegen package when using reflection;1367; merging 1368 ` ;interface mock in a child class loader fails since mockito 2180;"mocking an interface in a child classloader fails if the interface was already mocked in a parent class loader after upgrading to 2180i cant currently provide a reproducer as tests pass in isolation the test failure can be observed only running the whole test suite the issue occurs only with 2180 2170 worksexception message:```mockito cannot mock this class: interface orgeclipsepersistencejpajpaentitymanagermockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 18jvm vendor name    : oracle corporationjvm vendor version : 25151-b12jvm name           : java hotspot(tm) 64-bit server vmjvm version        : 180_151-b12jvm info           : mixed modeos name            : mac os xos version         : 10134underlying exception : javalangillegalstateexception: error invoking javalangclassloader#defineclass	at orgspringframeworkdatajpaproviderpersistenceproviderunittestsmockproviderspecificentitymanagerinterface(persistenceproviderunittestsjava:88)	at orgspringframeworkdatajpaproviderpersistenceproviderunittestsdetectseclipselinkpersistenceprovider(persistenceproviderunittestsjava:58)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:26)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgapachemavensurefirejunit4junit4providerexecute(junit4providerjava:236)	at orgapachemavensurefirejunit4junit4providerexecutetestset(junit4providerjava:134)	at orgapachemavensurefirejunit4junit4providerinvoke(junit4providerjava:113)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgapachemavensurefireutilreflectionutilsinvokemethodwitharray(reflectionutilsjava:189)	at orgapachemavensurefirebooterproviderfactory$providerproxyinvoke(providerfactoryjava:165)	at orgapachemavensurefirebooterproviderfactoryinvokeprovider(providerfactoryjava:85)	at orgapachemavensurefirebooterforkedbooterrunsuitesinprocess(forkedbooterjava:103)	at orgapachemavensurefirebooterforkedbootermain(forkedbooterjava:74)caused by: javalangillegalstateexception: error invoking javalangclassloader#defineclass	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$directdefineclass(classinjectorjava:413)	at netbytebuddydynamicloadingclassinjector$usingreflectioninject(classinjectorjava:186)	at netbytebuddydynamicloadingclassloadingstrategy$default$injectiondispatcherload(classloadingstrategyjava:199)	at netbytebuddydynamictyperesolutionstrategy$passiveinitialize(typeresolutionstrategyjava:79)	at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:4225)	at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:124)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:345)	at netbytebuddytypecachefindorinsert(typecachejava:160)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:354)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)	at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:25)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:65)	at orgmockitomockitomock(mockitojava:1875)	at orgmockitomockitomock(mockitojava:1784)	 32 morecaused by: javalangsecurityexception: class ""orgmockitocodegenjpaentitymanager$mockitomock$2038182397""s signer information does not match signer information of other classes in the same package	at javalangclassloadercheckcerts(classloaderjava:898)	at javalangclassloaderpredefineclass(classloaderjava:668)	at javalangclassloaderdefineclass(classloaderjava:761)	at sunreflectgeneratedmethodaccessor28invoke(unknown source)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$directdefineclass(classinjectorjava:409)	 51 more```link to test code:[persistenceproviderunittestsjava](https://githubcom/spring-projects/spring-data-jpa/blob/70d1012ac3ae12f7c7ad4060318ac61a8059db19/src/test/java/org/springframework/data/jpa/provider/persistenceproviderunittestsjava#l83)";@raphw probably yet another edge-case in bytebuddy    || ah of course we must not define a protection domain for the codegen package anymore since we have already defined a class in this package in order to resolve the method handle lookup in case of java 11 where the class now has mockitos protection domainthat is a trivial fix ||;1;0;resolve the correct protection domain for the codegen package when using reflection;
1369;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;performance improvements;use less expensive method graph compiler for inline mock maker. update byte buddy for general performance improvements and bug fixes. 1364. also fixes javadoc warning.;;1364.0;performance improvements;use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes 1364 also fixes javadoc warning; merging 1369  < ;unable to mock interfaces in android instrumentation tests;"consider the following android instrumentation test:```@testpublic void testmockito() {    final collection mockcollection  mockitomock(collectionclass)    assertasserttrue(true)}```when run i see the following output:```testing started at 21:54 04/08 21 01: launching testmockito()no apk changes detected since last installation skipping installation of d:\code\testapp\app\build\outputs\apk\debug\app-debugapk$ adb push d:\code\testapp\app\build\outputs\apk\androidtest\debug\app-debug-androidtestapk /data/local/tmp/comexamplezolbrtestapptest$ adb shell pm install -t -r ""/data/local/tmp/comexamplezolbrtestapptest""successrunning tests$ adb shell am instrument -w -r   -e debug false -e class comexamplezolbrtestappexampleinstrumentedtest#testmockito comexamplezolbrtestapptest/androidsupporttestrunnerandroidjunitrunnerclient not ready yetstarted running testsorgmockitoexceptionsbasemockitoexception:mockito cannot mock this class: interface javautilcollectionmockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listimportant information for android users:the regular byte buddy mock makers cannot generate code on an android vm!to resolve this please use the mockito-android dependency for your application:               : 09jvm vendor name    : the android projectjvm vendor version : 210jvm name           : dalvikjvm version        : 09jvm info           : nullos name            : linuxos version         : 31856+underlying exception : javalangillegalargumentexception: could not create typeat comexamplezolbrtestappexampleinstrumentedtesttestmockito(exampleinstrumentedtestjava:40)at javalangreflectmethodinvoke(native method)at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)at orgjunitrunnerssuiterunchild(suitejava:128)at orgjunitrunnerssuiterunchild(suitejava:27)at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)at orgjunitrunnerjunitcorerun(junitcorejava:137)at orgjunitrunnerjunitcorerun(junitcorejava:115)at androidsupporttestinternalrunnertestexecutorexecute(testexecutorjava:58)at androidsupporttestrunnerandroidjunitrunneronstart(androidjunitrunnerjava:375)at androidappinstrumentation$instrumentationthreadrun(instrumentationjava:2074)caused by: javalangillegalargumentexception: could not create typeat netbytebuddytypecachefindorinsert(typecachejava:139)at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:345)at netbytebuddytypecachefindorinsert(typecachejava:160)at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:354)at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)at orgmockitoandroidinternalcreationandroidbytebuddymockmakercreatemock(androidbytebuddymockmakerjava:39)at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)at orgmockitointernalmockitocoremock(mockitocorejava:65)at orgmockitomockitomock(mockitojava:1875)at orgmockitomockitomock(mockitojava:1784) 28 morecaused by: javalangincompatibleclasschangeerror: the method int javalangobjecthashcode() was expected to be of type interface but instead was found to be of type virtual (declaration of netbytebuddydynamicscaffoldmethodregistry$handler$forimplementation appears in /data/app/comexamplezolbrtestapptest-ovcvugjejp8cyf6lgyt9pg/baseapk)at netbytebuddydynamicscaffoldmethodregistry$handler$forimplementationhashcode(unknown source:2)at javautilhashmaphash(hashmapjava:338)at javautilhashmapput(hashmapjava:611)at javautilhashsetadd(hashsetjava:219)at netbytebuddydynamicscaffoldmethodregistry$defaultprepare(methodregistryjava:409)at netbytebuddydynamicscaffoldsubclasssubclassdynamictypebuildermake(subclassdynamictypebuilderjava:162)at netbytebuddydynamicscaffoldsubclasssubclassdynamictypebuildermake(subclassdynamictypebuilderjava:155)at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:2669)at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:123)at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)at netbytebuddytypecachefindorinsert(typecachejava:137) 39 more```this only occurs when using mockito-android 2180:```androidtestimplementation orgmockito:mockito-android:2180```downgrading to 2170 fixes this issuethis occurs on a windows 10 dev machine running android studio 31";"this appears to be regression introduced in bytebuddy @raphw would you mind investigating? || i have same question can anyone help? || i identified the issue it has to do how hashcode and equals are invoked on interface types openjdk allows for a different convention then what android accepts i will fix that with the next release stick to the old version until then (it is already  on master for byte buddy but it is part of the build routine) || should be fixed in 2182 || when will 2182 be available? my project is unable to pick this version up:```failed to resolve: orgmockito:mockito-core:2181show in fileshow in project structure dialog```which makes sense since from the looks of it there is no `ci maven-central-release` commit for 2182 || it is availble on bintray you can add the bintray repository to yourpomxml to find iton wed 18 apr 2018 04:05 zach olbrys <notifications@githubcom> wrote:> when will 2182 be available? my project is unable to pick this version> up:>> failed to resolve: orgmockito:mockito-core:2181> show in file> show in project structure dialog>> which makes sense since from the looks of it there is no ci> maven-central-release commit for 2182>> —> you are receiving this because you commented>>> reply to this email directly view it on github> < or mute the thread> < > || ive downloaded the jar from here:  and added it to my project but the problem persists || with the same exception message? || stacktrace:```orgmockitoexceptionsbasemockitoexception:mockito cannot mock this class: interface comexampleiexamplemockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listimportant information for android users:the regular byte buddy mock makers cannot generate code on an android vm!to resolve this please use the mockito-android dependency for your application:               : 09jvm vendor name    : the android projectjvm vendor version : 210jvm name           : dalvikjvm version        : 09jvm info           : nullos name            : linuxos version         : 4488-gda039c93611cunderlying exception : javalangillegalargumentexception: could not create typeat comexampleexampletest<init>(exampletestkt:35)at javalangreflectconstructornewinstance0(native method)at javalangreflectconstructornewinstance(constructorjava:334)at orgjunitrunnersblockjunit4classrunnercreatetest(blockjunit4classrunnerjava:217)at orgjunitrunnersblockjunit4classrunner$1runreflectivecall(blockjunit4classrunnerjava:266)at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)at orgjunitrunnersblockjunit4classrunnermethodblock(blockjunit4classrunnerjava:263)at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)at orgjunitrunnerssuiterunchild(suitejava:128)at orgjunitrunnerssuiterunchild(suitejava:27)at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)at orgjunitrunnerjunitcorerun(junitcorejava:137)at orgjunitrunnerjunitcorerun(junitcorejava:115)at androidsupporttestinternalrunnertestexecutorexecute(testexecutorjava:58)at androidsupporttestrunnerandroidjunitrunneronstart(androidjunitrunnerjava:375)at androidappinstrumentation$instrumentationthreadrun(instrumentationjava:2075)caused by: javalangillegalargumentexception: could not create typeat netbytebuddytypecachefindorinsert(typecachejava:140)at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)at netbytebuddytypecachefindorinsert(typecachejava:161)at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)at orgmockitoandroidinternalcreationandroidbytebuddymockmakercreatemock(androidbytebuddymockmakerjava:39)at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)at orgmockitointernalmockitocoremock(mockitocorejava:63)at orgmockitomockitomock(mockitojava:1729)at orgmockitomockitomock(mockitojava:1642) 28 morecaused by: javalangabstractmethoderror: abstract method ""netbytebuddydynamicloadingclassloadingstrategy orgmockitointernalcreationbytebuddysubclassloadergetstrategy(javalangclass)""at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:94)at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)at netbytebuddytypecachefindorinsert(typecachejava:138) 39 more``` || it seems like you are using a new version of mockito core but an old version of mockito android we had to change an internal api that both versions require to communicate to fix another bug || ";1;0;performance improvements: use less expensive method graph compiler for inline mock maker update byte buddy for general performance improvements and bug fixes 1364 also fixes javadoc warning;
1377;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;update byte buddy and cache some expensive values;this avoids the reallocation of certain objects that are expensive to compute. also  byte buddy is updated.;;0;update byte buddy and cache some expensive values;this avoids the reallocation of certain objects that are expensive to compute also byte buddy is updated; merging 1377 ;;;;1;1;update byte buddy and cache some expensive values;
1378;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;avoid circularity: avoid endless loop during mock creation;if certain types a type for the first time during instrumentation while our mocking engine relies on the same types  this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop. (described in comment.) 1240.;;1240.0;avoid circularity: avoid endless loop during mock creation;if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop (described in comment) 1240it is a bit difficult to reproduce this issue in our tests it mainly happens with classes generated by kotlin or scala and requires the inline mock maker and a jdk 9 or older if we want to add such a test we can copy the test from https://githubcom/guenhter/mockito-final-class-kotlin-problem;> if we want to add such a test we can copy the test from  should be able to add this to the mockito-kotlin subproject i suppose? || does it use the inline mock maker? || true of course! || added a test || does that test really reproduce the issue? that seems awfully simple yet we did not encounter it thus far 😮  ||  merging 1378  < ;mockito inline cant mock finatra response class;seen a few of these lying around but my stacktrace is also differenti was trying to mock the finatra `responsebuilder` class```you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class comtwitterfinatra interface comtwitterinjectlogging interface comtwitterutillogginglogging]	at <testclassjava>	at sunreflectnativeconstructoraccessorimplnewinstance0(native method)	at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:62)	at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)	at javalangreflectconstructornewinstance(constructorjava:423)	at orgjunitrunnersblockjunit4classrunnercreatetest(blockjunit4classrunnerjava:217)	at orgjunitrunnersblockjunit4classrunner$1runreflectivecall(blockjunit4classrunnerjava:266)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersblockjunit4classrunnermethodblock(blockjunit4classrunnerjava:263)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:114)	at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:57)	at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:66)	at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:51)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy2processtestclass(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:109)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:377)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:54)	at orggradleinternalconcurrentstoppableexecutorimpl$1run(stoppableexecutorimpljava:40)	at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1142)	at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:617)	at javalangthreadrun(threadjava:745)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [class comtwitterfinatra interface comtwitterinjectlogging interface comtwitterutillogginglogging]	at netbytebuddytypecachefindorinsert(typecachejava:138)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)	at netbytebuddytypecachefindorinsert(typecachejava:161)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)	 43 morecaused by: javalangunsupportedoperationexception: class redefinition failed: attempted to change the schema (add/remove fields)	at suninstrumentinstrumentationimplretransformclasses0(native method)	at suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:144)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:117)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:97)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:138)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)	at netbytebuddytypecachefindorinsert(typecachejava:161)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:201)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:182)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:63)	at orgmockitomockitomock(mockitojava:1729)	at orgmockitomockitomock(mockitojava:1642)	 43 more```;"im also unable to mock a final class im using jdk 9 and the project is using kotlin im not sure if its a related issue i did try to do some debugging but to no avail interestingly only the first mock fails```kotlintry {    mock<worldcontext>()} catch (e: throwable) {}// successval a  mock<worldcontext>()```complete stacktrace:```mockito cannot mock this class: class iopolymorphicpandafauxecsworldcontextcan not mock final classes with the following settings : - explicit serialization (eg withsettings()serializable()) - extra interfaces (eg withsettings()extrainterfaces())you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class iopolymorphicpandafauxecsworldcontext interface iopolymorphicpandafauxecscontext]orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: class iopolymorphicpandafauxecsworldcontextcan not mock final classes with the following settings : - explicit serialization (eg withsettings()serializable()) - extra interfaces (eg withsettings()extrainterfaces())you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class iopolymorphicpandafauxecsworldcontext interface iopolymorphicpandafauxecscontext]	at iopolymorphicpandafauxecsworldspec$1$worldcontext$2invoke(worldspeckt:91)	at iopolymorphicpandafauxecsworldspec$1$worldcontext$2invoke(worldspeckt:18)	at orgjetbrainsspekenginelifecyclelifecycleawareadapterinvoke(lifecycleawareadapterkt:21)	at orgjetbrainsspekenginelifecyclelifecycleawareadaptergetvalue(lifecycleawareadapterkt:17)	at iopolymorphicpandafauxecsworldspec$1$world$2invoke(worldspeckt:37)	at iopolymorphicpandafauxecsworldspec$1$world$2invoke(worldspeckt:18)	at orgjetbrainsspekenginelifecyclelifecycleawareadapterinvoke(lifecycleawareadapterkt:21)	at orgjetbrainsspekenginelifecyclelifecycleawareadaptergetvalue(lifecycleawareadapterkt:17)	at iopolymorphicpandafauxecsworldspec$1$1invoke(worldspeckt:40)	at iopolymorphicpandafauxecsworldspec$1$1invoke(worldspeckt:18)	at orgjetbrainsspekenginespektestengine$collector$action$action$1invoke(spektestenginekt:175)	at orgjetbrainsspekenginespektestengine$collector$action$action$1invoke(spektestenginekt:133)	at orgjetbrainsspekenginescope$actionexecute(scopekt:48)	at orgjetbrainsspekenginescope$actionexecute(scopekt:32)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:83)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$null$2(hierarchicaltestexecutorjava:92)	at javabase/javautilstreamforeachops$foreachop$ofrefaccept(foreachopsjava:184)	at javabase/javautilstreamreferencepipeline$2$1accept(referencepipelinejava:177)	at javabase/javautiliteratorforeachremaining(iteratorjava:133)	at javabase/javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javabase/javautilstreamabstractpipelinecopyinto(abstractpipelinejava:484)	at javabase/javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:474)	at javabase/javautilstreamforeachops$foreachopevaluatesequential(foreachopsjava:151)	at javabase/javautilstreamforeachops$foreachop$ofrefevaluatesequential(foreachopsjava:174)	at javabase/javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javabase/javautilstreamreferencepipelineforeach(referencepipelinejava:430)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:92)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$null$2(hierarchicaltestexecutorjava:92)	at javabase/javautilstreamforeachops$foreachop$ofrefaccept(foreachopsjava:184)	at javabase/javautilstreamreferencepipeline$2$1accept(referencepipelinejava:177)	at javabase/javautiliteratorforeachremaining(iteratorjava:133)	at javabase/javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javabase/javautilstreamabstractpipelinecopyinto(abstractpipelinejava:484)	at javabase/javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:474)	at javabase/javautilstreamforeachops$foreachopevaluatesequential(foreachopsjava:151)	at javabase/javautilstreamforeachops$foreachop$ofrefevaluatesequential(foreachopsjava:174)	at javabase/javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javabase/javautilstreamreferencepipelineforeach(referencepipelinejava:430)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:92)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:51)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:43)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:170)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:154)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:90)	at orgjetbrainsspektoolingrunnerjunitjunitplatformspekrunnerrun(junitplatformspekrunnerkt:107)	at orgjetbrainsspektoolingmainktmain(mainkt:58)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class iopolymorphicpandafauxecsworldcontext interface iopolymorphicpandafauxecscontext]	at netbytebuddytypecachefindorinsert(typecachejava:138)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)	at netbytebuddytypecachefindorinsert(typecachejava:161)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)	 52 morecaused by: javalangillegalstateexception: byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac-compiled classes this problem has been observed for classes that are: - compiled by older versions of scalac - classes that are part of the android distribution	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:120)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:97)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:138)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)	at netbytebuddytypecachefindorinsert(typecachejava:161)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:200)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:181)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:65)	at orgmockitomockitomock(mockitojava:1821)	 52 morecaused by: javalangclasscircularityerror: java/lang/weakpairmap$pair$weak	at javabase/javalangweakpairmap$pairweak(weakpairmapjava:201)	at javabase/javalangweakpairmapputifabsent(weakpairmapjava:123)	at javabase/javalangmoduleimpladdreads(modulejava:396)	at javabase/javalangmoduleimpladdreads(modulejava:357)	at javabase/javalangsystem$2addreads(systemjava:2146)	at javabase/jdkinternalmodulemodulesaddreads(modulesjava:85)	at javabase/javalangreflectproxy$proxybuilderlambda$getdynamicmodule$4(proxyjava:884)	at javabase/jdkinternalloaderabstractclassloadervalue$memoizerget(abstractclassloadervaluejava:327)	at javabase/jdkinternalloaderabstractclassloadervaluecomputeifabsent(abstractclassloadervaluejava:203)	at javabase/javalangreflectproxy$proxybuildergetdynamicmodule(proxyjava:875)	at javabase/javalangreflectproxy$proxybuildermaptomodule(proxyjava:814)	at javabase/javalangreflectproxy$proxybuilder<init>(proxyjava:631)	at javabase/javalangreflectproxy$proxybuilder<init>(proxyjava:636)	at javabase/javalangreflectproxylambda$getproxyconstructor$0(proxyjava:415)	at javabase/jdkinternalloaderabstractclassloadervalue$memoizerget(abstractclassloadervaluejava:327)	at javabase/jdkinternalloaderabstractclassloadervaluecomputeifabsent(abstractclassloadervaluejava:203)	at javabase/javalangreflectproxygetproxyconstructor(proxyjava:413)	at javabase/javalangreflectproxynewproxyinstance(proxyjava:999)	at javabase/sunreflectannotationannotationparser$1run(annotationparserjava:305)	at javabase/sunreflectannotationannotationparser$1run(annotationparserjava:303)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javabase/sunreflectannotationannotationparserannotationformap(annotationparserjava:303)	at javabase/sunreflectannotationannotationparserparseannotation2(annotationparserjava:293)	at javabase/sunreflectannotationannotationparserparseannotations2(annotationparserjava:120)	at javabase/sunreflectannotationannotationparserparseannotations(annotationparserjava:72)	at javabase/javalangreflectexecutabledeclaredannotations(executablejava:605)	at javabase/javalangreflectexecutabledeclaredannotations(executablejava:603)	at javabase/javalangreflectexecutablegetdeclaredannotations(executablejava:591)	at javabase/javalangreflectconstructorgetdeclaredannotations(constructorjava:579)	at netbytebuddydescriptionmethodmethoddescription$forloadedconstructorgetdeclaredannotations(methoddescriptionjava:912)	at netbytebuddydescriptionmethodmethoddescription$abstractbaseastoken(methoddescriptionjava:695)	at netbytebuddydescriptionmethodmethoddescription$abstractbaseastoken(methoddescriptionjava:334)	at netbytebuddydescriptionmethodmethodlist$abstractbaseastokenlist(methodlistjava:53)	at netbytebuddydynamicscaffoldinstrumentedtype$factory$default$1represent(instrumentedtypejava:223)	at netbytebuddybytebuddyredefine(bytebuddyjava:698)	at netbytebuddybytebuddyredefine(bytebuddyjava:676)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:167)	at javainstrument/javalanginstrumentclassfiletransformertransform(classfiletransformerjava:246)	at javainstrument/suninstrumenttransformermanagertransform(transformermanagerjava:188)	at javainstrument/suninstrumentinstrumentationimpltransform(instrumentationimpljava:550)	at javabase/javalangweakpairmap$pairweak(weakpairmapjava:201)	at javabase/javalangweakpairmapputifabsent(weakpairmapjava:123)	at javabase/javalangmoduleimpladdreads(modulejava:396)	at javabase/javalangmoduleimpladdreads(modulejava:357)	at javabase/javalangsystem$2addreads(systemjava:2146)	at javabase/jdkinternalmodulemodulesaddreads(modulesjava:85)	at javabase/jdkinternalmodulemodulestransformedbyagent(modulesjava:166)	at javainstrument/suninstrumentinstrumentationimplretransformclasses0(native method)	at javainstrument/suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:157)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:117)	 65 more``` || we are seeing the same issue using jdk 9 and kotlin || same issue for jdk10 and kotlin (and java) || @raphw i’ve just tried `2173` from `dlbintraycom/mockito/maven` with `bytebuddy:181` and this kind of errors still happens this happened for me after migrating from jdk 8 to jdk 9 a coworker of mine updated his android studio from 30 to 31 and observes the same thing in ide (running tests via gradle works fine though) this version of as actually bundles jdk 8 but the updated revision (i guess) we’ve tried the `2173` as well with no luck || seems like some jdk internals were switched out such that byte buddy tries to instrument classes that it needs itself to apply the instrumentation this requiressome whitelisting on our side i believe || also seeing this when running tests for spek 2x (spekframework/spek#318) on jdk9  tried forcing the byte buddy version to 183 but the problem remained<details><summary>complete stacktrace</summary><p>```mockito cannot mock this class: class orgspekframeworkspek2runtimelifecyclelifecyclemanagercan not mock final classes with the following settings : - explicit serialization (eg withsettings()serializable()) - extra interfaces (eg withsettings()extrainterfaces())you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class orgspekframeworkspek2runtimelifecyclelifecyclemanager class javalangobject]"" type""orgmockitoexceptionsbasemockitoexception""><![cdata[orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: class orgspekframeworkspek2runtimelifecyclelifecyclemanagercan not mock final classes with the following settings : - explicit serialization (eg withsettings()serializable()) - extra interfaces (eg withsettings()extrainterfaces())you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class orgspekframeworkspek2runtimelifecyclelifecyclemanager class javalangobject]	at orgspekframeworkspek2junittestdescriptoradapterfactorytestsetup(testdescriptoradapterfactorytestkt:57)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:564)	at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:389)	at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:115)	at orgjunitjupiterenginedescriptorclasstestdescriptorinvokemethodinextensioncontext(classtestdescriptorjava:289)	at orgjunitjupiterenginedescriptorclasstestdescriptorlambda$synthesizebeforeeachmethodadapter$11(classtestdescriptorjava:277)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$null$2(testmethodtestdescriptorjava:132)	at orgjunitjupiterengineexecutionthrowablecollectorexecute(throwablecollectorjava:40)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvokebeforemethodsorcallbacksuntilexceptionoccurs(testmethodtestdescriptorjava:152)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvokebeforeeachmethods(testmethodtestdescriptorjava:131)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:106)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:57)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:83)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$null$2(hierarchicaltestexecutorjava:92)	at javabase/javautilstreamforeachops$foreachop$ofrefaccept(foreachopsjava:184)	at javabase/javautilstreamreferencepipeline$2$1accept(referencepipelinejava:177)	at javabase/javautiliteratorforeachremaining(iteratorjava:133)	at javabase/javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javabase/javautilstreamabstractpipelinecopyinto(abstractpipelinejava:484)	at javabase/javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:474)	at javabase/javautilstreamforeachops$foreachopevaluatesequential(foreachopsjava:151)	at javabase/javautilstreamforeachops$foreachop$ofrefevaluatesequential(foreachopsjava:174)	at javabase/javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javabase/javautilstreamreferencepipelineforeach(referencepipelinejava:430)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:92)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$null$2(hierarchicaltestexecutorjava:92)	at javabase/javautilstreamforeachops$foreachop$ofrefaccept(foreachopsjava:184)	at javabase/javautilstreamreferencepipeline$2$1accept(referencepipelinejava:177)	at javabase/javautiliteratorforeachremaining(iteratorjava:133)	at javabase/javautilspliterators$iteratorspliteratorforeachremaining(spliteratorsjava:1801)	at javabase/javautilstreamabstractpipelinecopyinto(abstractpipelinejava:484)	at javabase/javautilstreamabstractpipelinewrapandcopyinto(abstractpipelinejava:474)	at javabase/javautilstreamforeachops$foreachopevaluatesequential(foreachopsjava:151)	at javabase/javautilstreamforeachops$foreachop$ofrefevaluatesequential(foreachopsjava:174)	at javabase/javautilstreamabstractpipelineevaluate(abstractpipelinejava:234)	at javabase/javautilstreamreferencepipelineforeach(referencepipelinejava:430)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorlambda$execute$3(hierarchicaltestexecutorjava:92)	at orgjunitplatformenginesupporthierarchicalsingletestexecutorexecutesafely(singletestexecutorjava:66)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:77)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:51)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:43)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:170)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:154)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:90)	at orgjunitplatformconsoletasksconsoletestexecutorexecutetests(consoletestexecutorjava:65)	at orgjunitplatformconsoletasksconsoletestexecutorlambda$execute$0(consoletestexecutorjava:57)	at orgjunitplatformconsoletaskscustomcontextclassloaderexecutorinvoke(customcontextclassloaderexecutorjava:33)	at orgjunitplatformconsoletasksconsoletestexecutorexecute(consoletestexecutorjava:57)	at orgjunitplatformconsoleconsolelauncherexecutetests(consolelauncherjava:85)	at orgjunitplatformconsoleconsolelauncherexecute(consolelauncherjava:75)	at orgjunitplatformconsoleconsolelauncherexecute(consolelauncherjava:48)	at orgjunitplatformconsoleconsolelaunchermain(consolelauncherjava:40)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [class orgspekframeworkspek2runtimelifecyclelifecyclemanager class javalangobject]	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:345)	at netbytebuddytypecachefindorinsert(typecachejava:160)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:354)	 59 morecaused by: javalangillegalstateexception: byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac-compiled classes this problem has been observed for classes that are: - compiled by older versions of scalac - classes that are part of the android distribution	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:120)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:97)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:345)	at netbytebuddytypecachefindorinsert(typecachejava:160)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:354)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:200)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:181)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:65)	at orgmockitomockitomock(mockitojava:1855)	 59 morecaused by: javalangclasscircularityerror: java/lang/weakpairmap$pair$weak	at javabase/javalangweakpairmap$pairweak(weakpairmapjava:201)	at javabase/javalangweakpairmapputifabsent(weakpairmapjava:123)	at javabase/javalangmoduleimpladdreads(modulejava:396)	at javabase/javalangmoduleimpladdreads(modulejava:357)	at javabase/javalangsystem$2addreads(systemjava:2146)	at javabase/jdkinternalmodulemodulesaddreads(modulesjava:85)	at javabase/javalangreflectproxy$proxybuilderlambda$getdynamicmodule$4(proxyjava:884)	at javabase/jdkinternalloaderabstractclassloadervalue$memoizerget(abstractclassloadervaluejava:327)	at javabase/jdkinternalloaderabstractclassloadervaluecomputeifabsent(abstractclassloadervaluejava:203)	at javabase/javalangreflectproxy$proxybuildergetdynamicmodule(proxyjava:875)	at javabase/javalangreflectproxy$proxybuildermaptomodule(proxyjava:814)	at javabase/javalangreflectproxy$proxybuilder<init>(proxyjava:631)	at javabase/javalangreflectproxy$proxybuilder<init>(proxyjava:636)	at javabase/javalangreflectproxylambda$getproxyconstructor$0(proxyjava:415)	at javabase/jdkinternalloaderabstractclassloadervalue$memoizerget(abstractclassloadervaluejava:327)	at javabase/jdkinternalloaderabstractclassloadervaluecomputeifabsent(abstractclassloadervaluejava:203)	at javabase/javalangreflectproxygetproxyconstructor(proxyjava:413)	at javabase/javalangreflectproxynewproxyinstance(proxyjava:999)	at javabase/sunreflectannotationannotationparser$1run(annotationparserjava:305)	at javabase/sunreflectannotationannotationparser$1run(annotationparserjava:303)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javabase/sunreflectannotationannotationparserannotationformap(annotationparserjava:303)	at javabase/sunreflectannotationannotationparserparseannotation2(annotationparserjava:293)	at javabase/sunreflectannotationannotationparserparseannotations2(annotationparserjava:120)	at javabase/sunreflectannotationannotationparserparseannotations(annotationparserjava:72)	at javabase/javalangreflectexecutabledeclaredannotations(executablejava:605)	at javabase/javalangreflectexecutabledeclaredannotations(executablejava:603)	at javabase/javalangreflectexecutablegetdeclaredannotations(executablejava:591)	at javabase/javalangreflectconstructorgetdeclaredannotations(constructorjava:579)	at netbytebuddydescriptionmethodmethoddescription$forloadedconstructorgetdeclaredannotations(methoddescriptionjava:917)	at netbytebuddydescriptionmethodmethoddescription$abstractbaseastoken(methoddescriptionjava:695)	at netbytebuddydescriptionmethodmethoddescription$abstractbaseastoken(methoddescriptionjava:334)	at netbytebuddydescriptionmethodmethodlist$abstractbaseastokenlist(methodlistjava:53)	at netbytebuddydynamicscaffoldinstrumentedtype$factory$default$1represent(instrumentedtypejava:223)	at netbytebuddybytebuddyredefine(bytebuddyjava:698)	at netbytebuddybytebuddyredefine(bytebuddyjava:676)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:167)	at javainstrument/javalanginstrumentclassfiletransformertransform(classfiletransformerjava:246)	at javainstrument/suninstrumenttransformermanagertransform(transformermanagerjava:188)	at javainstrument/suninstrumentinstrumentationimpltransform(instrumentationimpljava:550)	at javabase/javalangweakpairmap$pairweak(weakpairmapjava:201)	at javabase/javalangweakpairmapputifabsent(weakpairmapjava:123)	at javabase/javalangmoduleimpladdreads(modulejava:396)	at javabase/javalangmoduleimpladdreads(modulejava:357)	at javabase/javalangsystem$2addreads(systemjava:2146)	at javabase/jdkinternalmodulemodulesaddreads(modulesjava:85)	at javabase/jdkinternalmodulemodulestransformedbyagent(modulesjava:166)	at javainstrument/suninstrumentinstrumentationimplretransformclasses0(native method)	at javainstrument/suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:157)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:117)	 72 more```</p></details> || could someone create a reproduction of this issue in a small isolated repository? it seems like i cannot reproduce the issuealso i wonder what the remaining stack frames are could someone post these? || @raphw i created a repo which reproduces the problem:  || @mockitoguy the same issue was reproduced for mocking aspose library classes (comaspose) lib was compiled via aspose-jdk16 `aspose-jdk16` can be added to observed classes list in exception info || ";1;0;avoid circularity: if certain types a type for the first time during instrumentation while our mocking engine relies on the same types this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop (described in comment) 1240;
1387;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1386: adding atmostonce()  rename threadverifiescontinuoslyinteractingmocktest and one todo;hi;;1386.0;1386: adding atmostonce() rename threadverifiescontinuoslyinteractingmocktest and one todo;hii would like to make a quick contribution on this projecti add atmostonce() it seems not to be a big feature i just want to highlight the fact you have the function atleastonce() but nothing for the atmostonce casei rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring() from hamcrestargumentmatcher; merging 1387  < ;add atmostonce()rename one testclass and one todo;hii would like to make a quick contribution on this projecti add atmostonce() it seems not to be a big feature i just want to highlight the fact you have the function atleastonce() but nothing for the atmostonce case i rename the testclass threadverifiescontinuoslyinteractingmocktest on threadverifiescontinuouslyinteractingmocktest and the todo on tostring() from hamcrestargumentmatcher<t>;;1;0;fix compilation of test;
1391;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;make mockitoextension constructor public;it is possible to register an extension for automatic use using java s  serviceloader  mechanism.;;1390.0;make mockitoextension constructor public;it is possible to register an extension for automatic use using javas `serviceloader` mechanism projects may want to provide their own `meta-inf` file to avoid tediously adding `mockitoextension` to tests since it is very common however `serviceloader` requires the class to have a no-args *public* constructor so the current extension cannot be used with the `serviceloader` mechanism1390check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `fixes #<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;would be great if you could add a test for this not sure if that is possible? it is not a blocking issue for me though ||   added a test (a bit heavyweight since it needs to be a separate project to avoid influencing others) ||;mockitoextension cannot be registered as a global junit5 extension;`mockitoextension` doesnt expose its constructor so it cant be loaded  serviceloader`when trying to register `mockitoextension` for automatic use using a file named `meta-inf\services\orgjunitjupiterapiextensionextension` and content `orgmockitojunitjupitermockitoextension`the below error is thrown using mockito-junit-jupiter 2183```orgjunitjupiterapiextensionextension: orgmockitojunitjupitermockitoextension unable to get public no-arg constructorjavautilserviceconfigurationerror: orgjunitjupiterapiextensionextension: orgmockitojunitjupitermockitoextension unable to get public no-arg constructor	at javabase/javautilserviceloaderfail(serviceloaderjava:581)	at javabase/javautilserviceloadergetconstructor(serviceloaderjava:672)	at javabase/javautilserviceloaderaccess$1000(serviceloaderjava:390)	at javabase/javautilserviceloader$lazyclasspathlookupiteratorhasnextservice(serviceloaderjava:1232)	at javabase/javautilserviceloader$lazyclasspathlookupiteratorhasnext(serviceloaderjava:1264)	at javabase/javautilserviceloader$2hasnext(serviceloaderjava:1299)	at javabase/javautilserviceloader$3hasnext(serviceloaderjava:1384)	at javabase/javalangiterableforeach(iterablejava:74)	at orgjunitjupiterengineextensionextensionregistryregisterautodetectedextensions(extensionregistryjava:102)	at orgjunitjupiterengineextensionextensionregistrycreateregistrywithdefaultextensions(extensionregistryjava:86)	at orgjunitjupiterenginedescriptorjupiterenginedescriptorprepare(jupiterenginedescriptorjava:37)	at orgjunitjupiterenginedescriptorjupiterenginedescriptorprepare(jupiterenginedescriptorjava:28)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutor$nodeexecutorprepare(hierarchicaltestexecutorjava:89)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutor$nodeexecutorexecute(hierarchicaltestexecutorjava:74)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:55)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:43)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:170)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:154)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:90)	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessor$collectalltestclassesexecutorprocessalltestclasses(junitplatformtestclassprocessorjava:92)	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessor$collectalltestclassesexecutoraccess$100(junitplatformtestclassprocessorjava:77)	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessorstop(junitplatformtestclassprocessorjava:73)	at orggradleapiinternaltaskstestingsuitetestclassprocessorstop(suitetestclassprocessorjava:61)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:564)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy1stop(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerstop(testworkerjava:123)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:564)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:155)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:137)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:404)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)	at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1135)	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:635)	at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)	at javabase/javalangthreadrun(threadjava:844)caused by: javalangnosuchmethodexception: orgmockitojunitjupitermockitoextension<init>()	at javabase/javalangclassgetconstructor0(classjava:3302)	at javabase/javalangclassgetconstructor(classjava:2110)	at javabase/javautilserviceloader$1run(serviceloaderjava:659)	at javabase/javautilserviceloader$1run(serviceloaderjava:656)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javabase/javautilserviceloadergetconstructor(serviceloaderjava:667)	 46 more``` -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  provide versions (mockito / jdk / os / any other relevant information) -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide](https://githubcom/mockito/mockito/blob/master/github/contributingmd);;1;0;add test;
1402;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1401 : correctly handle varargsmatcher check for hamcrestmatchers;;;1401.0;1401 : correctly handle varargsmatcher check for hamcrestmatchers;; merging 1402  < ;varargsmatcher doesnt work correctly when using hamcrestmatchers in mockito 2;class a {    private b b    public a(b b) {        thisb  b    }    public integer perform() {        return brun(""abcd"" 1l 2l)    }}class b {    public integer run(string str long price) {        return 10    }}class hamcrestvarargsmatcher extends typesafematcher<long> implements varargmatcher {    protected boolean matchessafely(long item) {        return item < 3    }    public void describeto(description description) {    }}class test {   @test   public void varargsmatcherusinghamcrestmatcherworks() {        b b  mockitomock(bclass)        a a  new a(b)        when(brun(eq(""abcd"") mockitohamcrestargthat(new hamcrestvarargsmatcher())))thenreturn(15)        assertthat(aperform() is(15)) // actually returns 0    }}```";;1;0;1401 : correctly handle varargsmatcher check for hamcrestmatchers;
1404;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix wrong artifact name in javadoc  and link to proper javadoc page;## motivation;;0;fix wrong artifact name in javadoc and link to proper javadoc page;## motivation1 current javadoc in `mockitojava` uses wrong artifact name orgmockitojunit-jupiter but it should be [orgmockito:mockito-junit-jupiter]( to avoid users confusion fix it with correct name2 the `mockitoextension` isnt contained in `mockito-core` so we cannot use hyper link generated  {@link }` instead we can use `<a>` tag to guide users to proper javadoc page## check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_thanks for your great product that really helps our daily hacking :); ;;;;1;1;fix wrong artifact name in javadoc and link to proper javadoc page;
1407;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;removing redundent sentence;there was a redundant sentence in the documentation (it was repeated 2 lines below it).;;0;removing redundent sentence;there was a redundant sentence in the documentation (it was repeated 2 lines below it); ;;;;1;1;removing redundent sentence the sentence was repeated 2 lines below it;
1425;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;updated documentation of timeout() and after();while working on @christianschwarz s pr  i found the current documentation confusing.;;0;updated documentation of timeout() and after();while working on @christianschwarzs pr i found the current documentation confusing- made the documentation clear especially about the differences between timeout() and after()- removed mentions of internal api (new timeout() constructor)91;  @christianschwarz any feedback? || since this is a documentation only change ill go ahead and merge ||;;;;1;1;updated documentation of timeout() and after()- made the documentation clear especially about the differences between timeout() and after()- removed mentions of internal api (new timeout() constructor);
1426;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;mockito on java 11-ea+21;1419;;1419.0;mockito on java 11-ea+21;1419 requires `-dnetbytebuddyexperimentaltrue` system property to be set to let bytebuddy use asm api version `asm7_expermiental` and use the same one in `inlinebytecodegenerator`;" merging 1426 `  ";provide java 11 compatibility;"i ran tests with java 11 and getting the follwing exception may be asm 62 fixes this?orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface deespiritfirstspiritaccesslanguageif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : ""oracle corporation""jvm vendor version : 11-ea+18jvm name           : java hotspot(tm) 64-bit server vmjvm version        : 11-ea+18jvm info           : mixed modeos name            : linuxos version         : 490-6-amd64you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface javalangcomparable interface deespiritfirstspiritaccesslanguage]	at deespiritfirstspiritgeneratetestpluggableurlcreatorsetup(testpluggableurlcreatorjava:51)	at jdkinternalreflectgeneratedmethodaccessor15invoke(unknown source)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface javalangcomparable interface deespiritfirstspiritaccesslanguage]	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)caused by: javalangillegalstateexception: byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac-compiled classes this problem has been observed for classes that are: - compiled by older versions of scalac - classes that are part of the android distribution	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:120)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:97)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:200)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:181)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:65)	at orgmockitomockitomock(mockitojava:1855)	at orgmockitomockitomock(mockitojava:1787)caused by: javalangillegalargumentexception: unsupported class file major version 55	at netbytebuddyjarasmclassreader<init>(classreaderjava:166)	at netbytebuddyjarasmclassreader<init>(classreaderjava:148)	at netbytebuddyjarasmclassreader<init>(classreaderjava:136)	at netbytebuddyutilityopenedclassreaderof(openedclassreaderjava:54)	at netbytebuddydynamicscaffoldtypewriter$default$forinliningcreate(typewriterjava:2912)	at netbytebuddydynamicscaffoldtypewriter$defaultmake(typewriterjava:1634)	at netbytebuddydynamicscaffoldinlineredefinitiondynamictypebuildermake(redefinitiondynamictypebuilderjava:171)	at netbytebuddydynamicscaffoldinlineabstractinliningdynamictypebuildermake(abstractinliningdynamictypebuilderjava:92)	at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:2669)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:181)	at javainstrument/javalanginstrumentclassfiletransformertransform(classfiletransformerjava:246)	at javainstrument/suninstrumenttransformermanagertransform(transformermanagerjava:188)	at javainstrument/suninstrumentinstrumentationimpltransform(instrumentationimpljava:563)	at javainstrument/suninstrumentinstrumentationimplretransformclasses0(native method)	at javainstrument/suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:167)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:117)";"asm 62 alone does not fix this neither does upgrading to latest bytebuddy help herethe combination of asm 62 latest bytebuddy a minor code change in mockito and setting `-dnetbytebuddyexperimentaltrue` helps here || mockito-core-2210jar 	byte-buddy-1815jarwith orgmockitopluginsmockmaker ""mock-maker-inline"" the fix is not working with java 18_172 and java  11-ea+24without ""mock-maker-inline"" it worksorgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface deespiritorschemaentitytypeif youre not sure why youre getting this error please report to the mailing listjava               : 18jvm vendor name    : oracle corporationjvm vendor version : 25172-b11jvm name           : java hotspot(tm) 64-bit server vmjvm version        : 180_172-b11jvm info           : mixed modeos name            : mac os xos version         : 10136you are seeing this disclaimer because mockito is configured to create inlined mocksyou can learn about inline mocks and their limitations under item #39 of the mockito class javadocunderlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface deespiritorschemaentitytype interface javaioserializable]	at deespiritfirstspiritaccesseditortestentityassociatebeforeeach(testentityassociatejava:27)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:24)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at comintellijjunit4junit4ideatestrunnerstartrunnerwithargs(junit4ideatestrunnerjava:68)	at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)	at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)	at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [interface deespiritorschemaentitytype interface javaioserializable]	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)	 23 morecaused by: javalangillegalstateexception: byte buddy could not instrument all classes within the mocks type hierarchythis problem should never occur for javac-compiled classes this problem has been observed for classes that are: - compiled by older versions of scalac - classes that are part of the android distribution	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:164)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:141)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:137)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:344)	at netbytebuddytypecachefindorinsert(typecachejava:159)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:353)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:200)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:181)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:69)	at orgmockitomockitomock(mockitojava:1895)	at orgmockitomockitomock(mockitojava:1804)	 23 morecaused by: javalangnosuchfielderror: asm_api	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor<init>(inlinebytecodegeneratorjava:251)	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapper$parameteraddingclassvisitor<init>(inlinebytecodegeneratorjava:246)	at orgmockitointernalcreationbytebuddyinlinebytecodegenerator$parameterwritingvisitorwrapperwrap(inlinebytecodegeneratorjava:242)	at netbytebuddyasmasmvisitorwrapper$compoundwrap(asmvisitorwrapperjava:645)	at netbytebuddydynamicscaffoldtypewriter$default$forinlining$redefinitionclassvisitorvisit(typewriterjava:3672)	at netbytebuddyjarasmclassreaderaccept(classreaderjava:492)	at netbytebuddyjarasmclassreaderaccept(classreaderjava:355)	at netbytebuddydynamicscaffoldtypewriter$default$forinliningcreate(typewriterjava:2915)	at netbytebuddydynamicscaffoldtypewriter$defaultmake(typewriterjava:1634)	at netbytebuddydynamicscaffoldinlineredefinitiondynamictypebuildermake(redefinitiondynamictypebuilderjava:171)	at netbytebuddydynamicscaffoldinlineabstractinliningdynamictypebuildermake(abstractinliningdynamictypebuilderjava:92)	at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:2669)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:215)	at suninstrumenttransformermanagertransform(transformermanagerjava:188)	at suninstrumentinstrumentationimpltransform(instrumentationimpljava:428)	at suninstrumentinstrumentationimplretransformclasses0(native method)	at suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:144)	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:161)	 37 more || we are experiencing the same error with java 11 and inline mocks || having similar issue with mockito and java 11 unable to mock any class/interface do we need implement any method for class loadingsince defineclass method removed  in java11 ? i even edited my javapolicy for assertion exception -2210bytebuddy-1815below is the exception  mockito cannot mock this class: class comxxxxxxtoolkitconfigconfigurationmockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : oracle corporationjvm vendor version : 11-ea+26jvm name           : java hotspot(tm) 64-bit server vmjvm version        : 11-ea+26jvm info           : mixed modeos name            : mac os xos version         : 10134underlying exception : javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclasscaused by: javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclasscaused by: javasecurityaccesscontrolexception: access denied (""javalangruntimepermission"" ""defineclass"") || same problem here || seeing a related error:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface cloudcosminchecklisterrepolistrepomockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : adoptopenjdkjvm vendor version : 1101+13jvm name           : openjdk 64-bit server vmjvm version        : 1101+13jvm info           : mixed modeos name            : linuxos version         : 4150-39-genericunderlying exception : javalangunsupportedoperationexception: cannot define class using reflection	at cloudcosminchecklisterrestlistcontrollertestsetup(listcontrollertestjava:37)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsrunbeforesevaluate(runbeforesjava:24)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orggradleapiinternaltaskstestingjunitjunittestclassexecutorruntestclass(junittestclassexecutorjava:106)	at orggradleapiinternaltaskstestingjunitjunittestclassexecutorexecute(junittestclassexecutorjava:58)	at orggradleapiinternaltaskstestingjunitjunittestclassexecutorexecute(junittestclassexecutorjava:38)	at orggradleapiinternaltaskstestingjunitabstractjunittestclassprocessorprocesstestclass(abstractjunittestclassprocessorjava:66)	at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:51)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)	at comsunproxy$proxy2processtestclass(unknown source)	at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:117)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:155)	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:137)	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:404)	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)	at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1128)	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:628)	at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)	at javabase/javalangthreadrun(threadjava:834)caused by: javalangunsupportedoperationexception: cannot define class using reflection	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$unavailabledefineclass(classinjectorjava:821)	at netbytebuddydynamicloadingclassinjector$usingreflectioninject(classinjectorjava:185)	at netbytebuddydynamicloadingclassloadingstrategy$default$injectiondispatcherload(classloadingstrategyjava:187)	at netbytebuddydynamictyperesolutionstrategy$passiveinitialize(typeresolutionstrategyjava:79)	at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:4457)	at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:121)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:138)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:346)	at netbytebuddytypecachefindorinsert(typecachejava:161)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:355)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)	at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:25)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:65)	at orgmockitomockitomock(mockitojava:1855)	at orgmockitointernalconfigurationmockannotationprocessorprocess(mockannotationprocessorjava:36)	at orgmockitointernalconfigurationmockannotationprocessorprocess(mockannotationprocessorjava:16)	at orgmockitointernalconfigurationindependentannotationenginecreatemockfor(independentannotationenginejava:38)	at orgmockitointernalconfigurationindependentannotationengineprocess(independentannotationenginejava:62)	at orgmockitointernalconfigurationinjectingannotationengineprocessindependentannotations(injectingannotationenginejava:57)	at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:41)	at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:69)	 48 morecaused by: javalangillegalstateexception: could not find sunmiscunsafe	at netbytebuddydynamicloadingclassinjector$usingunsafe$dispatcher$disabledinitialize(classinjectorjava:1366)	at netbytebuddydynamicloadingclassinjector$usingunsafeinject(classinjectorjava:1202)	at netbytebuddydynamicloadingclassloadingstrategy$forunsafeinjectionload(classloadingstrategyjava:458)	at netbytebuddydynamictyperesolutionstrategy$passiveinitialize(typeresolutionstrategyjava:79)	at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:4457)	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$indirectmake(classinjectorjava:684)	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$creationactionrun(classinjectorjava:302)	at netbytebuddydynamicloadingclassinjector$usingreflection$dispatcher$creationactionrun(classinjectorjava:290)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at netbytebuddydynamicloadingclassinjector$usingreflection<clinit>(classinjectorjava:70)	at netbytebuddydynamicloadingclassloadingstrategy$default$injectiondispatcherload(classloadingstrategyjava:184)	 71 morecaused by: javalangnosuchmethodexception: sunmiscunsafedefineclass(javalangstring [b int int javalangclassloader javasecurityprotectiondomain)	at javabase/javalangclassgetmethod(classjava:2109)	at netbytebuddydynamicloadingclassinjector$usingunsafe$dispatcher$creationactionrun(classinjectorjava:1269)	at netbytebuddydynamicloadingclassinjector$usingunsafe$dispatcher$creationactionrun(classinjectorjava:1257)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at netbytebuddydynamicloadingclassinjector$usingunsafe<clinit>(classinjectorjava:1136)	 80 more``` || @cstroe are you sure that you dont have some older byte-buddy version on the classpath?(of course i assume that use you the latest version of mockito and byte buddy provided by it) || @szpak your intuition is correct  i am using spring boot version `205release` and it is using an older version of the mockito library  in order to use the newest mockito i had to change my gradle config:```    testcompile(orgspringframeworkboot:spring-boot-starter-test) {        exclude group: ""orgmockito"" module: ""mockito-core""    }    testcompile(""orgmockito:mockito-core:2234"")```that  my errors  thank you for the help || great to hearbtw spring boot provides also an easier way to override dependency [versions]( here overriding mockito would be enoughbtw afair only spring boot 21 declared java 11 compatibility therefore you may want to upgrade to prevent further surprises :) || > testcompile(orgspringframeworkboot:spring-boot-starter-test) {>         exclude group: ""orgmockito"" module: ""mockito-core"">     }>     testcompile(""orgmockito:mockito-core:2234"")this works like a charm thank you! || > > > > testcompile(orgspringframeworkboot:spring-boot-starter-test) {> > exclude group: ""orgmockito"" module: ""mockito-core""> > }> > testcompile(""orgmockito:mockito-core:2234"")> > this works like a charm thank you!anyone has an idea how to do this in pomxml? || @jidarwish its basic maven dependency management )```xml<dependency>  <groupid>orgspringframeworkboot</groupid>  <artifactid>spring-boot-starter-test</artifactid>  <scope>test</test>  <exclusions>    <exclusion>      <groupid>orgmockito</groupid>      <artifactid>mockito-core</artifactid>    </exclusion>  </exclustions></dependency><dependency>  <groupid>orgmockito</groupid>  <artifactid>mockito-core</artifactid>  <version>2234</version>  <scope>test</scope></dependency>``` || @bric3 i did exactly the same still didnt help :-(> java               : 11> jvm vendor name    : oracle corporation> jvm vendor version : 1102+9> jvm name           : openjdk 64-bit server vm> jvm version        : 1102+9> jvm info           : mixed mode> os name            : mac os x> os version         : 10144 || ok adding bytebuddy dep on top of that helped! || > @jidarwish its basic maven dependency management )> > ```> <dependency>>   <groupid>orgspringframeworkboot</groupid>>   <artifactid>spring-boot-starter-test</artifactid>>   <scope>test</test>>   <exclusions>>     <exclusion>>       <groupid>orgmockito</groupid>>       <artifactid>mockito-core</artifactid>>     </exclusion>>   </exclustions>> </dependency>> <dependency>>   <groupid>orgmockito</groupid>>   <artifactid>mockito-core</artifactid>>   <version>2234</version>>   <scope>test</scope>> </dependency>> ```if your project extend `spring-boot-starter-parent` you might just add : ```	<properties>		<mockitoversion>2234</mockitoversion>	</properties>```in your maven file  || ";1;0;1419 - mockito on java 11-ea+21requires -dnetbytebuddyexperimentaltrue system property to be set!;
1429;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;updated test coverage for async verification;updated tests with after() verification mode;;0;updated test coverage for async verification;updated tests with after() verification mode- some existing tests for the feature did not work due to flaws in replyrule those tests (now ignored) consistently failed but succeeded only when used with reply rule- some existing tests had weak assertions that did not fully cover the feature- suggested simpler and cleaner way of implementing delayed execution via new asynctesting class instead of delayedexecution dropping the reply rule may introduce instabilities to the ci builds lets observe and measure before making an actionalthough we are considering deprecating after() we need good coverage for an existing feature even if it will be removed in the long run; merging 1429 ;;;;1;1;updated tests with after() verification mode- some existing tests for the feature did not work due to flaws in replyrule some of the tests (now ignored) consistently failed but succeeded only when used with reply rule- some existing tests had weak assertions that did not fully cover the feature- suggested simpler and cleaner way of implementing delayed execution via new asynctesting class instead of delayedexecutionalthough we are considering deprecating after() we need good coverage for an existing feature even if it will be removed in the long run;
1430;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;allow mockito-logger to be configurable as mockito extension;hi;;0;allow mockito-logger to be configurable as mockito extension;"hiwe have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly) we have user `@mockitosettings(strictness  strictnesswarn)` switch to log and not fail in this situactions by default all logs are printed out to console using `systemoutprintln` and this make us trouble because we have ""silent"" profile at ci server which is configured to silent loggers / as you expect sith `println` we are not trully silent in this case :]thats why i have created this pr proposal and want to know what do you thinkthxivos"; merging 1430  < ;;;;1;1;allow mockito-logger configurable as mockito extension;
1433;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fixed travis build;we don t need private constructor on an  internal  class. internal classes can be changed at any time based on our compatibility policy.;;0; travis build;we dont need private constructor on an internal class internal classes can be changed at any time based on our compatibility policy; merging 1433  < ;;;;1;1; travis buildwe dont need private constructor on an internal class internal classes can be changed at any time based on our compatibility policy;
1434;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;javadoc: update broken code example;it updates a broken code example in javadoc.;;0;javadoc: update broken code example;it updates a broken code example in javadoci just copied the example from [answerjava]( to [mockitojava](https://githubcom/mockito/mockito/blob/release/2x/src/main/java/org/mockito/mockitojava#l525); merging 1434 ;;;;1;1;javadoc: update broken code example;
1436;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;javadoc: update code example (ignorestubs);it updates the code example of  ignorestubs  in javadoc.;;0;javadoc: update code example (ignorestubs);it updates the code example of `ignorestubs` in javadoc- correct wrong variable: from `mock` to `list`- change call sequence: the existing one doesnt clearly describe the use of `ignorestubs` with `inorder`;  thank you! || hey @marchpig do you want to help with #1438 cheers! || hi @mockitoguysure i will do that! ||;;;;1;1;javadoc: update code example (ignorestubs);
1439;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;javadoc: #1438 update ignorestubs to include strictness;it updates  ignorestubs()  docs to include  strictness  information. (#1438);;1438.0;javadoc: #1438 update ignorestubs to include strictness;it updates `ignorestubs()` docs to include `strictness` information (#1438);  this is ready to merge ill wait until current build is complete and merge it || thank you! ||;ignorestubs documentation should be updated for strictness;driven by #1436 we need to update ignorestubs docs to include information about mockito strictness (effectively replaces the need for ignorestubs);thank you for contribution! ||;1;0;updated documentation;
1440;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;javadoc: correct wrong links and code examples;some wrong links and code examples are corrected.;;0;javadoc: correct wrong links and code examples;some wrong links and code examples are corrected;  thank you @marchpig! ||;;;;1;1;javadoc: correct wrong links and code examples;
1452;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;comprehensive test coverage for timeout() and after();new coverage enables us to test @christianschwarz s  within . i want to see all those tests working when we replace the internal implementation with  within .;;0;comprehensive test coverage for timeout() and after();new coverage enables us to test @christianschwarzs within i want to see all those tests working when we replace the internal implementation with within; merging 1452 ! ||;;;;1;1;made timeouts more generous;
1458;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add stubbinglookupevent and notifier (a part of #793);this pr adds  stubbinglookupevent  and  stubbinglookupnotifier  as a part of the issue #793.;;793.0;add stubbinglookupevent and notifier (a part of #793);this pr adds `stubbinglookupevent` and `stubbinglookupnotifier` as a part of the issue #793; merging 1458  < ;expose stubbinglookuplistener publicly and create listener distinction;"make stubbinglookuplistener public originating ticket: #770as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""";if exposed publicly the api should use an event object (see  ||;1;0;remove wrong comment on stubbinglookupnotifier;
1463;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;prevent stubonly() from being verified (#1460);this pr adds assertion to verification methods to prevent stub-only mock from being verified (#1460);;1460.0;prevent stubonly() from being verified (#1460);this pr adds assertion to verification methods to prevent stub-only mock from being verified (#1460)- `verify()`- `verifynomoreinteractions()`- `inorder()`; merging 1463  < ;verifyzerointeractions(stub-only-mock) does not throw exception;hi`verifyzerointeractions(stub-only-mock)` doesnt throw exceptioni think it should throw `cannotverifystubonlymock` exception as `verify()` does for consistency```java@testpublic void test_stub_only_not_verifiable_verify_zero_interactions() {    // given    imethods localmock  mock(imethodsclass withsettings()stubonly())    localmockobjectreturningmethod(200)    try {        // when        verifyzerointeractions(localmock)        fail()    } catch (cannotverifystubonlymock e) {        // then exception should be thrown    }}```thankssangwoo;;1;0;tweaked the tests- to improve coverage (safety) we want at least one test to verify the whole exception message- to keep tests clean we avoid copying implementation in tests (eg explicitly calling mockutilgetmockname);
1474;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;comprehensive coverage for timeout + inorder;preparing for merging major overhaul in the implementation of  timeout  and  after  apis (#936).;;0;comprehensive coverage for timeout + inorder;preparing for merging major overhaul in the implementation of timeout and after apis (#936)we need coverage before we completely replace the existing implementation; merging 1474  if thats ok happy to address review feedback after this is ;;;;1;1;comprehensive coverate for timeout + inorderpreparing for merging major overhaul in the implementation of timeout and after apis (#936);
1475;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;mockitosession api does not clean up listener when initmocks fails;when initmocks() fails we did not clean up the session listener. this led to a confusing error message on the next attempt to create a session (next test method run). i stumbled upon this problem when attempting to configure testng to use strict stubbing (https://github.com/mockito/mockito-testng/issues/1).;;0;mockitosession api does not clean up listener when initmocks fails;when initmocks() fails we did not clean up the session listener this led to a confusing error message on the next attempt to create a session (next test method run) i stumbled upon this problem when attempting to configure testng to use strict stubbing ( order to fix this cleanly i need to keep the existing functionality that protects the user from forgetting to use finishmocking() hence i still need to throw an exception if the user adds the same listener multiple times however in the event that the listener is dirty i clean it up automatically instead of failing; merging 1475  this because it blocks  happy to address code review feedback after this is merged the change does not involved public api changes it fixes a bug all existing tests pass and the new tests pass too lets ship it! ||;;;;1;1;added code comments to improve understanding of this change;
1484;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix some typos;don t -> doesn t;;0;fix some typos;dont -> doesnt;  ;;;;1;1;fix typosdont -> doesnt;
1521;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;minor improvements in the javadoc of mockito.java;this pr fixes a type and adds a reference to the junit5 extension.;;0;minor improvements in the javadoc of mockitojava;this pr fixes a type and adds a reference to the junit5 extensioncheck list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;alright you win this time grammar nazi travis )i  the problem ||;;;;1;1;minor improvements in the javadoc of mockitojava;
1523;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;added  lenient  annotation toggle;this way we can conveniently configure an existing  lenient  setting via an annotation. see the unit test that describes the feature.;;0;added lenient annotation toggle;this way we can conveniently configure an existing lenient setting via an annotation see the unit test that describes the feature```java@mock(lenient  true) someclass mock```; merging 1523  < ;;;;1;1;added documentation;
1526;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;typo fix in unfinishedstubbingexception;a very simple typo fix.;;0;typo fix in unfinishedstubbingexception;a very simple typo fix check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; ;;;;1;1;typo fix in unfinishedstubbingexception;
1536;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;allow delegating to non-public methods for additionalanswers#delegatesto;fixes an issue where doing  delegatesto(new anonymousclass() {})  would cause an illegalaccessexception  and other access-related issues.;;0;allow delegating to non-public methods for additionalanswers#delegatesto;"fixes an issue where doing ""delegatesto(new anonymousclass() {})"" would cause an illegalaccessexception and other access-related issues(see  - sorry wasnt aware that you cant change the pr source branch)";" merging 1536  ";;;;1;1;reworked coveragewe prefer user e2e tests for such features;
1539;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;improved sensitivity of potential stubbing problem;this change improves the developer experience with strict stubbing. it is now possible to stub the same method with different argument multiple times in the test. previously  we threw potentialstubbingproblem exception in this scenario:;;1522.0;improved sensitivity of potential stubbing problem;this change improves the developer experience with strict stubbing it is now possible to stub the same method with different argument multiple times in the test previously we threw potentialstubbingproblem exception in this scenario:```javawhen(mockfoo(1))thenreturn(1)when(mockfoo(2))thenreturn(2) // <- no longer throws potentialstubbingproblem (false negative)```this reduces the number of false negatives reported by strict stubbing1522 #1496 partially #769 #720; merging 1539 ;correct usage of strict stubbings -> potentialstubbingproblem: strict stubbing argument mismatch;"hi guysthis is following is almost a copy paste from the mockito google group/forum which i was recommended to do: versions:**```os : fedora linux 41814-200fc28x86_64mockito : 2230junit : 531jdk : oracle 1002 (happens under 8 and openjdk 1101 too)intellij : 20183 eap    testcompile group: orgjunitjupiter name: junit-jupiter-api version: 531    testruntime group: orgjunitjupiter name: junit-jupiter-engine version: 531    testcompile group: orgmockito name: mockito-junit-jupiter version: 2230```**actual question:**i had some questions regarding use cases of new ""strict"" stubbingwith junit5 & `@extendwith(mockitoextensionclass)` ive noticed that it errors out when i think it shouldnt (when compared with junit4 & `@runwith(mockitojunitrunnerclass)` )i have a very simple test case which i consider to be both good code and good mocking which gets highlighted as incorrect stubbing usage under strict (default) checking```package comexampleimport orgjunitjupiterapitestimport orgjunitjupiterapiextensionextendwithimport orgmockitomockimport orgmockitojunitjupitermockitoextensionimport javautilmapimport static orgjunitjupiterapiassertionsassertequalsimport static orgmockitomockitowhen@extendwith(mockitoextensionclass)class mockitotest {    @mock    private map<string object> mockmap    @mock    private object mockobject    @test    void shouldbeabletomock() {        // when        when(mockmapget(""a""))thenreturn(""apple"")        when(mockmapget(""b""))thenreturn(mockobject)        // then        assertequals(""apple"" mockmapget(""a""))        assertequals(mockobject mockmapget(""b""))    }}```the above gives the following stacktrace when run:```orgmockitoexceptionsmisusingpotentialstubbingproblem: strict stubbing argument mismatch please check: - this invocation of get method:    mockmapget(""b"")    -> at comexamplemockitotestshouldbeabletomock(mockitotestjava:25) - has following stubbing(s) with different arguments:    1 mockmapget(""a"")      -> at comexamplemockitotestshouldbeabletomock(mockitotestjava:24)typically stubbing argument mismatch indicates user mistake when writing testsmockito fails early so that you can debug potential problem easilyhowever there are legit scenarios when this exception generates false negative signal:  - stubbing the same method multiple times using given()will() or when()then() api    please use will()given() or doreturn()when() api for stubbing  - stubbed method is intentionally invoked with different arguments by code under test    please use default or silent junit rule (equivalent of strictnesslenient)for more information see javadoc for potentialstubbingproblem class    at comexamplemockitotestshouldbeabletomock(mockitotestjava:25)    at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)    at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javabase/javalangreflectmethodinvoke(methodjava:564)    at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:515)    at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:115)    at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invoketestmethod$6(testmethodtestdescriptorjava:171)    at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvoketestmethod(testmethodtestdescriptorjava:167)    at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:114)    at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:59)    at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:105)    at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)    at javabase/javautilarraylistforeach(arraylistjava:1378)    at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:110)    at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)    at javabase/javautilarraylistforeach(arraylistjava:1378)    at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:110)    at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)    at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservicesubmit(samethreadhierarchicaltestexecutorservicejava:32)    at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:57)    at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:51)    at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:220)    at orgjunitplatformlaunchercoredefaultlauncherlambda$execute$6(defaultlauncherjava:188)    at orgjunitplatformlaunchercoredefaultlauncherwithinterceptedstreams(defaultlauncherjava:202)    at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:181)    at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:128)    at comintellijjunit5junit5ideatestrunnerstartrunnerwithargs(junit5ideatestrunnerjava:74)    at comintellijrtexecutionjunitideatestrunner$repeaterstartrunnerwithargs(ideatestrunnerjava:47)    at comintellijrtexecutionjunitjunitstarterpreparestreamsandstart(junitstarterjava:242)    at comintellijrtexecutionjunitjunitstartermain(junitstarterjava:70)```ive found 1 other reference to this issue online which was here: above stated you could work around the issue by changing the code as follows:```// from thiswhen(mockmapget(""a""))thenreturn(""apple"")when(mockmapget(""b""))thenreturn(mockobject)// to thiswhen(mockmapget(anystring()))thenanswer(invocation -> {    object arg  invocationgetargument(0)    if (""a""equals(arg)) return ""apple""    if (""b""equals(arg)) return system})```is this a bug or is this intentional going forwards?thanks for your time!check that - [✓] the mockito message in the stacktrace have useful information but it didnt help - [✓] the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito - [✓] provide versions (mockito / jdk / os / any other relevant information) - [✓] provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) - [✓] read the [contributing guide](https://githubcom/mockito/mockito/blob/master/github/contributingmd)";im not sure if im on the right track with this or is this helps anyone else but i had the same problem and solved it by using the `doreturn()when()` version of mockito instead of `when()thenreturn()` || @bwhiting2356  this works to resolve the issue but it causes a new issue  when i use `doreturn()when()` it turns off the `unnecessarystubbingexception` that we rely on  any idea how to overload method stubbing while still being strict? || i think the `strict` and `lenient` thing has not been thought trough  its quite common to stub a method twice with different parameter values  for example when code needs to fetch two (or more) values from a dependency you would stub for those two values  now this generates an `unnecessarystubbingexception` while it clearly **is** necessary for proper working of the testthe solution using an `answer` class is not a good one in fact im of the opinion you want to avoiding using `answer` objects as much as possible || finding exactly the same issue as described above using `@runwith(mockitoextensionclass)````<dependency>      <groupid>orgjunitjupiter</groupid>      <artifactid>junit-jupiter-api</artifactid>      <scope>test</scope>    </dependency>    <dependency>      <groupid>orgjunitjupiter</groupid>      <artifactid>junit-jupiter-engine</artifactid>      <scope>test</scope>    </dependency>    <dependency>      <groupid>orgjunitvintage</groupid>      <artifactid>junit-vintage-engine</artifactid>      <scope>test</scope>    </dependency>```version 532 of the above dependencies and ```<dependency>      <groupid>orgmockito</groupid>      <artifactid>mockito-junit-jupiter</artifactid>      <version>2230</version>      <scope>test</scope>    </dependency>```@hjohn @bwhiting2356  @jmart1 be interested to hear how you resolved this || bump! || @jaygehlot im afraid ive just turned it off as i do with all warnings that create too many false positives  keeping an eye on this issue still in case it gets  ||;1;0;updated @since version in a new public method;
1543;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;exposed new api - stubbinglookuplistener;exposed new public api based on an internal api - stubbinglookuplistener - #793.;;1466.0;exposed new api - stubbinglookuplistener;"exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding!"; merging 1543 ;expose stubbinglookuplistener publicly (#793);this pr makes `stubbinglookuplistener` public and adds `mockobjectlistener` as parent of `invocationlistener` and `stubbinglookuplistener` (#793); merging 1466 ;1;0;updated since tags;
1543;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;exposed new api - stubbinglookuplistener;exposed new public api based on an internal api - stubbinglookuplistener - #793.;;793.0;exposed new api - stubbinglookuplistener;"exposed new public api based on an internal api - stubbinglookuplistener - #793as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""this pr replaces #1466 - very nice pr from @marchpig due to number of changes i needed to do i decided to reimplement the feature rather than use the original pr @marchpig thank you for understanding!"; merging 1543 ;expose stubbinglookuplistener publicly and create listener distinction;"make stubbinglookuplistener public originating ticket: #770as a rule of a thumb we try to expose the internal apis that the top level features are built upon since stubbinglookuplistener is useful for us to implement strictness lets get the former exposed as public api this way we build stronger framework with the concept of ""onion skin api""";if exposed publicly the api should use an event object (see  ||;1;0;updated since tags;
1544;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1541: prevent premature garbage collection of mock objects;1541.;;1541.0;1541: prevent premature garbage collection of mock objects;"1541if using one-liner stubs ( the mock object may be premature cleaned up and returning the mock fails with an exception this occurs because there is no strong reference to the mock itselftherefore we need to maintain a strong reference to the mock until weve returned it while making sure that the gc can still cleanup the mock correctly when neededcause implementations of `basestubbing` are intended to be cleaned up after usage we can store a strong ref to the mock there `getmock` then uses the strong ref (instead of the weak ref provided by the invocation) after cleaning up the implementations of  `basestubbing` there is no strong ref to the mock itself anymore (except the one in the test class)i tried some alternative solutions but i believe this is the only way it works----bind last mock creation to mockingprogress does not work because of this:```when(mock(testclass2class)gettestclass())thenreturn(mock(testclassclass))getmock()```bind mock of last invocation for stubbing to mockingprogress does not work because of this:```when(mock(testclassclass)getstuff())thenreturn(""x"")thenreturn(    when(mock(testclassclass)getstuff())thenreturn(""xxx"")<testclass>getmock()getstuff())getmock()```";" merging 1544  < ! || lgtm thanks for your improvementsonly passing the mock was my first take but i thought passing the `invocationcontainerimpl` is more type safe than just having `object` as parameter also the ""mock retrieval logic"" would be located in one central place but im very fine with the refactoring || thank you! || ";mock object premature garbage collected when using one-liner stubs;":one-liner stubs may throw an exception because the actual mock object is already garbage collected when trying to return the mock### reproduce:1 mockito 2235 using mockito-inline2 -xmx256m```public class onelinerstubstresstest {    public class testclass {        public string getstuff() {            return ""a""        }    }    private static string generatestring() {        final int length  10000        final stringbuilder stringbuilder  new stringbuilder(length)        for (int i  0 i < length i++) {            stringbuilderappend(""b"")        }        return stringbuildertostring()    }    @test    public void call_a_lot_of_mocks() {        final string returnvalue  generatestring()        for (int i  0 i < 40000 i++) {            final testclass mock  when(mock(testclassclass)getstuff())                                   thenreturn(returnvalue)getmock()            assertequals(returnvalue mockgetstuff())        }    }}```#### expected:test finishes successfully#### actual:```javalangillegalstateexception: the mock object was garbage collected this should not happen in normal circumstances when using public api typically the test class keeps strong reference to the mock object and it prevents getting the mock collected mockito internally needs to keep weak references to mock objects to avoid memory leaks for certain types of mockmaker implementations if you see this exception using mockito public api please file a bug for more information see issue #1313        at orgmockitointernalinvocationmockrefmockweakreferenceget(mockweakreferencejava:32)        at orgmockitointernalinvocationinterceptedinvocationgetmock(interceptedinvocationjava:103)        at orgmockitointernalstubbinginvocationcontainerimplinvokedmock(invocationcontainerimpljava:157)        at orgmockitointernalstubbingconsecutivestubbinggetmock(consecutivestubbingjava:28)```### analysis:as part of #1313 `defaultinvocationfactory` and `interceptedinvocation` were refactored to keep week reference to the mock this was necessary in order to get rid of strong references by the handlers which caused memory leaks on the other hand this requires to have a strong reference to the mock in the test class in order to prevent premature garbage collection unfortunately if using one-liner stubs ( the mock object may be premature cleaned up this occurs because we gain access to the `interceptedinvocation` when calling `getmock()` (which tries to get the mock from the invocation) without having any strong reference to the mock itself at this point the mock may already be cleaned up";great investigation! do you have a suggestion on how to resolve this? || tried different approaches i believe i found one solution that works well created a pr ||;1;0;simplified code passing only mock as parameteralso made the constructors package-protected followed by idea hint its always a good idea to reduce the scope;
1549;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed issue with leftover state when stubbing with bad throwables;fixed issue with leftover state when stubbing with bad throwables. 1514;;151.0; issue with leftover state when stubbing with bad throwables; issue with leftover state when stubbing with bad throwables 1514;good catch ||  merging 1549 ;investigate why #125 did not trigger release;investigate why #125 did not trigger release;gc old issues ||;1;0; issue with stubbing statewhen stubbing with bad throwables we were leaving state behind 1514;
1552;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;minimal test to repro generic issue with smart nulls;created a minimal test that reproduces bug with smart nulls and generics  see issue #1551;;155.0;minimal test to repro generic issue with smart nulls;created a minimal test that reproduces bug with smart nulls and generics see issue #1551;  since this is a new test ill just merge it without review happy to fix / change things later if someone reviews it ||;internal comparator violates its general contract;log from my test run  comparison method violates its general contract!    at javautiltimsortmergehi(timsortjava:868)    at javautiltimsortmergeat(timsortjava:485)    at javautiltimsortmergeforcecollapse(timsortjava:426)    at javautiltimsortsort(timsortjava:223)    at javautiltimsortsort(timsortjava:173)    at javautilarrayssort(arraysjava:659)    at javautilcollectionssort(collectionsjava:217)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionorderedinstancefieldsfrom(propertyandsetterinjectionjava:125)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectioninjectmockcandidates(propertyandsetterinjectionjava:100)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionprocessinjection(propertyandsetterinjectionjava:77)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:68)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjection$ongoingmockinjectionapply(mockinjectionjava:92)    at orgmockitointernalconfigurationdefaultinjectionengineinjectmocksonfields(defaultinjectionenginejava:20)    at orgmockitointernalconfigurationinjectingannotationengineinjectmocks(injectingannotationenginejava:100)    at orgmockitointernalconfigurationinjectingannotationengineprocessinjectmocks(injectingannotationenginejava:62)    at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:56)    at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:108);it occures when bean under test has many fields (declaredfieldssize  44) ||;1;0;minimal test to repro generic issue with smart nullscreated a minimal test that reproduces bug with smart nulls and generics see issue #1551;
1554;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fixed verifyerror when junit 3 is in the classpath;mockito will throw verifyerror during its junit detection when junit 3;;155.0; verifyerror when junit 3 is in the classpath;mockito will throw verifyerror during its junit detection when junit 3is in the classpath because the code only supports junit 4 and laterthis change will catch this error and pretend that junit is not thereissue: #1553;i would like some opinions on testing because i was not able to figure out a good way to test this i tried changing the class hierarchy of comparisonfailure using byte buddy and a custom classloader but was not able to get that to work i also thought it would be possible (though heavy) to use a gradle property to change the version of the junit dependency to run a test and add that to the test matrix but i dont expect that to work without other changes because mockito itself uses junit 4 to compile and run its own tests ||  merging 1554 ` ;internal comparator violates its general contract;log from my test run  comparison method violates its general contract!    at javautiltimsortmergehi(timsortjava:868)    at javautiltimsortmergeat(timsortjava:485)    at javautiltimsortmergeforcecollapse(timsortjava:426)    at javautiltimsortsort(timsortjava:223)    at javautiltimsortsort(timsortjava:173)    at javautilarrayssort(arraysjava:659)    at javautilcollectionssort(collectionsjava:217)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionorderedinstancefieldsfrom(propertyandsetterinjectionjava:125)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectioninjectmockcandidates(propertyandsetterinjectionjava:100)    at orgmockitointernalconfigurationinjectionpropertyandsetterinjectionprocessinjection(propertyandsetterinjectionjava:77)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:68)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyrelayprocesstonextstrategy(mockinjectionstrategyjava:89)    at orgmockitointernalconfigurationinjectionmockinjectionstrategyprocess(mockinjectionstrategyjava:71)    at orgmockitointernalconfigurationinjectionmockinjection$ongoingmockinjectionapply(mockinjectionjava:92)    at orgmockitointernalconfigurationdefaultinjectionengineinjectmocksonfields(defaultinjectionenginejava:20)    at orgmockitointernalconfigurationinjectingannotationengineinjectmocks(injectingannotationenginejava:100)    at orgmockitointernalconfigurationinjectingannotationengineprocessinjectmocks(injectingannotationenginejava:62)    at orgmockitointernalconfigurationinjectingannotationengineprocess(injectingannotationenginejava:56)    at orgmockitomockitoannotationsinitmocks(mockitoannotationsjava:108);it occures when bean under test has many fields (declaredfieldssize  44) ||;1;0;simplified the code covering more caseswe have plenty of coverage that asserts that we are creating the right exception;
1565;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;prevent stackoverflowerror when processing reversed generics;when processing the reverse method  the type parameters are actually;;0;prevent stackoverflowerror when processing reversed generics;when processing the reverse method the type parameters are actuallyreversed compared to the type parameters in the class this subsequentlyconfuses genericmetadatasupport as it creates a cycle in`contextualactualtypeparameters` in that case a resolves to b while bresolves to athe root cause is that we are processing type parameters of methodswhile we already processed them in the class declaration thereforeignore any type parameters if we already derived the appropriatecontextual type parameter;;;;;1;1;prevent stackoverflowerror when processing reversed genericswhen processing the reverse method the type parameters are actuallyreversed compared to the type parameters in the class this subsequentlyconfuses genericmetadatasupport as it creates a cycle in`contextualactualtypeparameters` in that case a resolves to b while bresolves to athe root cause is that we are processing type parameters of methodswhile we already processed them in the class declaration thereforeignore any type parameters if we already derived the appropriatecontextual type parameter;
1567;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add warning to inline mock maker when running on a jre;i made a topic about this in the [mailing list](https://groups.google.com/forum/#!topic/mockito/vkhx3r4_doq).;;0;add warning to inline mock maker when running on a jre;i made a topic about this in the [mailing list]( story short: the inline mock maker doesnt work when running on just a jre so i added a warning in the error message if thats that case this wouldve saved me a lot of headache so i figured id maybe help a poor soul that encounters this in the future; merging 1567 ;;;;1;1;add warning to inline mock maker when running on a jrethis wouldve saved me a lot of headache;
1576;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fix/bug 1551 cce on smart not null answers;this pr intends to 1551. for fix it  the  returnssmartnulls  answer use now some reflection to find the correct return type instead of the  java.util.object .;;1551.0;fix/bug 1551 cce on smart not null answers;this pr intends to 1551 for fix it the `returnssmartnulls` answer use now some reflection to find the correct return type instead of the `javautilobject`when the return type can be found it will start to retrieve empty values using the answer `returnsmoreemptyvalues` & `returnsemptyvalues` before creating a new mock instanceas you may notice in tests there is still one case where the return type cannot be found in this case the `answer` will return a `null` instead of `object` mocki think it may be possible to improve this code any suggestion will be welcome !; merging 1576 ;classcastexception with generics and smart nulls;"hello i am trying to migrate my junit4 tests (java version is 180_74) from mockito v11019 to v2010 and i have the following exception: ```javajavalangclasscastexception: codegenjavalangobject$mockitomock$220764719 cannot be cast to comsolanteqsolarfpdaoschememockitotest$entity```when i mock my objects using `answersreturns_smart_nulls`however when i change the answer to default or change the stubbing to dowhen approach the exception disappears before version upgrade everything worked finetest case to reproduce the issue:  ```javaimport orgjunitbeforeimport orgjunittestimport orgjunitrunnerrunwithimport orgmockitoanswersimport orgmockitomockimport orgmockitomockitoimport orgmockitojunitmockitojunitrunnerimport static orgjunitassertassertequals@runwith(mockitojunitrunnerclass)public class mockitotest {    @mock(answer  answersreturns_smart_nulls)    private concretedao concretedao    @before    public void setup() {        mockitowhen(concretedaofindbyid(1l))                thenreturn(new entity(1l))    }    @test    public void testmockito() {        assertequals(1l concretedaofindbyid(1l)id)    }    public static class abstractdao<t> {        t findbyid(final long id) {            throw new unsupportedoperationexception(""not implemented"")        }    }    public static class entity {        private final long id        public entity(long id) {            thisid  id        }    }    public static class concretedao extends abstractdao<entity> {    }}```thanks in advance";"thank you for reporting! based on your test i created a minimal test that reproduces the issue: #1552 i marked this ticket with ""please contribute"" hoping you or someone from the community can help the issue is tricky and it is caused by java generics combined with smart nulls || hello !if youre agree with that i can work on this ive start watching how it works and how it can be solve i  also think that it can be pretty tricky but i can even try ) ! || feel free to! || ";1;0;#1551 : fix typo and some missing documentation;
1582;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;1577: refactoring naming rule for sealed packages to better work with the java module system;the java module system consideres packages of all named modules to be sealed. this results in the naming strategy to rename classes such that they cannot subclass package-private types.;;1577.0;1577: refactoring naming rule for sealed packages to better work with the java module system;the java module system consideres packages of all named modules to be sealed this results in the naming strategy to rename classes such that they cannot subclass package-private types;" merging 1582  ";illegalaccesserror on java 11 when using module path;mockito cannot mock package private class when tests running with module path it trying to use reflection and defineclass method by default and this does not work on java 11 ive found pr #1355 and tried to use orgmockitointernalsimulatejava11 system property but it doesnt works eitherim using:java 11 (release) maven 360 surefire-maven-plugin 300-m3 junit 532 mockito 2234 (22311 have same issue)with this configuration mockito and byte buddy are included in classpath my modular jar is included in module path and module system is configured correctly (i suppose :))you can check this on minimal sample project: [mockito-java11-jpms-examplezip]( - just run `mvn clean test`stacktrace```underlying exception : javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclass                                                                                      at testmarxmockito/testmarxmockitoservicetesttestmockito(servicetestjava:17)                                                                                                                   at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)                                                                                                                     at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)                                                                                                   at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)                                                                                           at javabase/javalangreflectmethodinvoke(methodjava:566)                                                                                                                                         at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:532)                                                                                                             at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:115)                                                                                                            at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invoketestmethod$6(testmethodtestdescriptorjava:171)                                                                          at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)                                                                                              at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvoketestmethod(testmethodtestdescriptorjava:167)                                                                                   at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:114)                                                                                            at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:59)                                                                                             at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:108)                                                                                     at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)                                                                                              at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)                                                                                               at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)                                                                                                          at javabase/javautilarraylistforeach(arraylistjava:1540)                                                                                                                                         at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)                                              at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:112)                                                                                     at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)                                                                                              at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)                                                                                               at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)                                                                                                          at javabase/javautilarraylistforeach(arraylistjava:1540)                                                                                                                                         at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)                                              at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:112)                                                                                     at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)                                                                                              at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)                                                                                               at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)                                                                                                          at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservicesubmit(samethreadhierarchicaltestexecutorservicejava:32)                                                 at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:57)                                                                                  at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:51)                                                                                      at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:220)                                                                                                                 at orgjunitplatformlaunchercoredefaultlauncherlambda$execute$6(defaultlauncherjava:188)                                                                                                        at orgjunitplatformlaunchercoredefaultlauncherwithinterceptedstreams(defaultlauncherjava:202)                                                                                                  at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:181)                                                                                                                 at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:128)                                                                                                                 at orgapachemavensurefirejunitplatformjunitplatformproviderinvokealltests(junitplatformproviderjava:150)                                                                                       at orgapachemavensurefirejunitplatformjunitplatformproviderinvoke(junitplatformproviderjava:124)                                                                                               at orgapachemavensurefirebooterforkedbooterinvokeproviderinsameclassloader(forkedbooterjava:384)                                                                                               at orgapachemavensurefirebooterforkedbooterrunsuitesinprocess(forkedbooterjava:345)                                                                                                            at orgapachemavensurefirebooterforkedbooterexecute(forkedbooterjava:126)                                                                                                                       at orgapachemavensurefirebooterforkedbootermain(forkedbooterjava:418)                                                                                                                  caused by: javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclass                                                                                                  at netbytebuddydynamicloadingclassinjector$usinglookup$dispatcher$forjava9capablevmdefineclass(classinjectorjava:1686)                                                                          at netbytebuddydynamicloadingclassinjector$usinglookupinjectraw(classinjectorjava:1415)                                                                                                         at netbytebuddydynamicloadingclassinjector$abstractbaseinject(classinjectorjava:111)                                                                                                            at netbytebuddydynamicloadingclassloadingstrategy$usinglookupload(classloadingstrategyjava:466)                                                                                                 at netbytebuddydynamictyperesolutionstrategy$passiveinitialize(typeresolutionstrategyjava:100)                                                                                                   at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:5623)                                                                                                                     at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:129)                                                                                    at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)                                                                                  at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)                                                                                  at netbytebuddytypecachefindorinsert(typecachejava:152)                                                                                                                                           at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:365)                                                                                                                      at netbytebuddytypecachefindorinsert(typecachejava:174)                                                                                                                                           at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:376)                                                                                                                      at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)                                                                               at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)                                                                              at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)                                                                                  at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:25)                                                                                                  at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)                                                                                                                                    at orgmockitointernalmockitocoremock(mockitocorejava:69)                                                                                                                                         at orgmockitomockitomock(mockitojava:1896)                                                                                                                                                        at orgmockitomockitomock(mockitojava:1805)                                                                                                                                                         42 more                                                                                                                                                                                   caused by: javalangillegalaccesserror: class orgmockitocodegenidependency$mockitomock$1828864830 cannot access its superinterface testmarxmockitoservice$idependency (orgmockitocodegenidependency$mockitomock$1828864830 is in unnamed module of loader app testmarxmockitoservice$idependency is in module testmarxmockito of loader app)                                                    at javabase/javalangclassloaderdefineclass1(native method)                                                                                                                                        at javabase/javalangsystem$2defineclass(systemjava:2123)                                                                                                                                         at javabase/javalanginvokemethodhandles$lookupdefineclass(methodhandlesjava:962)                                                                                                                at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)                                                                                                                     at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)                                                                                                   at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)                                                                                           at javabase/javalangreflectmethodinvoke(methodjava:566)                                                                                                                                         at netbytebuddydynamicloadingclassinjector$usinglookup$dispatcher$forjava9capablevmdefineclass(classinjectorjava:1682)                                                                           62 more                                                                                                                                                                                   ```;you have to open your module to the unnamed module where mockito is set to make this work  || @raphw im using this configuration:```            <plugin>                <artifactid>maven-surefire-plugin</artifactid>                <configuration>                    <!-- test code needs access to package private level so we use add-opens -->                    <argline>                        --add-opens testmarxmockito/testmarxmockitoall-unnamed                    </argline>                    <systempropertyvariables>                        <!-- this hidden property force mockito to use method lookup -->                        <orgmockitointernalsimulatejava11>true</orgmockitointernalsimulatejava11>                    </systempropertyvariables>                </configuration>            </plugin>```maybe im missing something btw adding `--add-opens javabase/javalangall-unnamed` does not helps too  || i see what the problem is now java considers all packages that belong to a named module to be sealed therefore our mock creation strategy is oversensitive and defines the mock in another package such that the super type is no longer visiblelet me look into this for a bit we will fix this in an upcoming release || @marx-freedom could you check out this branch build mockito and see if it works? || @raphw ive tried it today but it doesnt works as expectedwith -dorgmockitointernalsimulatejava11true test throws exception:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface testmarxmockitoservice$idependencymockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : oracle corporationjvm vendor version : 11+28jvm name           : openjdk 64-bit server vmjvm version        : 11+28jvm info           : mixed modeos name            : windows 10os version         : 100underlying exception : javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclass	at testmarxmockito/testmarxmockitoservicetesttestmockito(servicetestjava:17)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:532)	at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:115)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invoketestmethod$6(testmethodtestdescriptorjava:171)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvoketestmethod(testmethodtestdescriptorjava:167)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:114)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:59)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:108)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)	at javabase/javautilarraylistforeach(arraylistjava:1540)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:112)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)	at javabase/javautilarraylistforeach(arraylistjava:1540)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$4(nodetesttaskjava:112)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:98)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:74)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservicesubmit(samethreadhierarchicaltestexecutorservicejava:32)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:57)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:51)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:220)	at orgjunitplatformlaunchercoredefaultlauncherlambda$execute$6(defaultlauncherjava:188)	at orgjunitplatformlaunchercoredefaultlauncherwithinterceptedstreams(defaultlauncherjava:202)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:181)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:128)	at orgapachemavensurefirejunitplatformjunitplatformproviderinvokealltests(junitplatformproviderjava:150)	at orgapachemavensurefirejunitplatformjunitplatformproviderinvoke(junitplatformproviderjava:124)	at orgapachemavensurefirebooterforkedbooterinvokeproviderinsameclassloader(forkedbooterjava:384)	at orgapachemavensurefirebooterforkedbooterrunsuitesinprocess(forkedbooterjava:345)	at orgapachemavensurefirebooterforkedbooterexecute(forkedbooterjava:126)	at orgapachemavensurefirebooterforkedbootermain(forkedbooterjava:418)caused by: javalangillegalstateexception: error invoking javalanginvokemethodhandles$lookup#defineclass	at netbytebuddydynamicloadingclassinjector$usinglookup$dispatcher$forjava9capablevmdefineclass(classinjectorjava:1686)	at netbytebuddydynamicloadingclassinjector$usinglookupinjectraw(classinjectorjava:1415)	at netbytebuddydynamicloadingclassinjector$abstractbaseinject(classinjectorjava:111)	at netbytebuddydynamicloadingclassloadingstrategy$usinglookupload(classloadingstrategyjava:466)	at netbytebuddydynamictyperesolutionstrategy$passiveinitialize(typeresolutionstrategyjava:100)	at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:5623)	at orgmockitointernalcreationbytebuddysubclassbytecodegeneratormockclass(subclassbytecodegeneratorjava:129)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)	at netbytebuddytypecachefindorinsert(typecachejava:152)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:365)	at netbytebuddytypecachefindorinsert(typecachejava:174)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:376)	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemocktype(subclassbytebuddymockmakerjava:71)	at orgmockitointernalcreationbytebuddysubclassbytebuddymockmakercreatemock(subclassbytebuddymockmakerjava:42)	at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:25)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)	at orgmockitointernalmockitocoremock(mockitocorejava:62)	at orgmockitomockitomock(mockitojava:1896)	at orgmockitomockitomock(mockitojava:1805)	 42 morecaused by: javalangillegalaccesserror: class orgmockitocodegenidependency$mockitomock$2018315156 cannot access its superinterface testmarxmockitoservice$idependency (orgmockitocodegenidependency$mockitomock$2018315156 is in unnamed module of loader app testmarxmockitoservice$idependency is in module testmarxmockito of loader app)	at javabase/javalangclassloaderdefineclass1(native method)	at javabase/javalangsystem$2defineclass(systemjava:2123)	at javabase/javalanginvokemethodhandles$lookupdefineclass(methodhandlesjava:962)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at netbytebuddydynamicloadingclassinjector$usinglookup$dispatcher$forjava9capablevmdefineclass(classinjectorjava:1682)	 62 more```should i use system property orgmockitointernalsimulatejava11 or there is any other setup tasks im missing?one little idea ive wrote something like this recently it works with module path and custom module layers but ive tested it only for custom classes not in standard packages like `java*`  ```class somefactory {    public <c> c createdynamicsubclass(class<c> clazz) {        getclass()getmodule()addreads(clazzgetmodule())        var dynamicclass  new bytebuddy()                subclass(clazz constructorstrategydefaultimitate_super_class)                definefield()                                make()                load(clazzgetclassloader() classloadingstrategyusinglookupof(                        methodhandlesprivatelookupin(clazz methodhandleslookup()))                )                getloaded()        return dynamicclassgetconstructor(new class<?> {})newinstance()    }``` || i have worked quite a bit on this over the last days i just checked in several changes in the last hour i also managed to write a bunch of unit tests now and hope that it works as i expect it || @raphw thank you very much! mockito 22316 works perfectly problem solved ||;1;0;remove serializability of listener again;
1583;0;0;0;0;0;0;1;0;0;0;0;0;1;0;0;0;0;0;0;0;1;0;0;0;add support for android tests using androidx.test.;see  for more details on;;0;add support for android tests using androidxtest;see  for more details onandroidx;;;;;1;1;refactor instrumentationregistry handling into common method;
1585;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1584 where multipleparentclassloader lacks of classloaders of superclasses;the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy.;;1584.0;1584 where multipleparentclassloader lacks of classloaders of superclasses;the multipleparentclassloader is now composed also with classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy;the problem of test case is that is not possible reflect a real osgi environment without use some test framework like pax exam (the most complicate thing is do not pollute test dependency with 10 and more dependencies) if is not a problem i can try to create test case that verify if the multiparentclassloader contains more classloaders || a job fails to install jdk11 other jobs are ok || i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most type this would effectively prevent mocking package-private classes and methods for such types which worked until nowi just extended the multiple parent class loader in byte buddy to allow for collecting the most specific class loaders only after this i think we can add this change probably we would also need to include all class loaders of interface types for this to work universallyi am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type tree || > i think that this can cause issues with class loader hierarchies where we would now generate a new class loader even if all classes were visible from the top-most typei had a look to the implementation of `multipleparentclassloader` and it delegate to parents in the exact order they was added this means that if the classloader of the actual type (the first added) is able to load all classes other classloaders are not visited> probably we would also need to include all class loaders of interface types for this to work universallyits already like that the actual classloader is built with a composition of classloader of actual type and the classloader of all interfaces the class implements my pr simply add classloaders from superclasses> i am a bit afraid of the performance impact of this though as this can cost some runtime for types with a large type treei do not expect a hierarchy bigger than 10 classloader are filtered at most we should ensure there are no duplicated in the list (if not already) || this needs a rebase now ||  merging 1585 ;classloader built by mockito is not able to load declared types in the hierarchy in osgi;we develop in osgi environment and we are using latest version of mockito available on maven central 2234we got an issue when we mock classes given to guice (sisu) for injection sisu/guice analyse all declared fields and methods for the input type and its super classes to built a sort of index of known types in osgi it fails with classnotfoundexception on mocked classes the reason is that the mocked class built with `subclassbytecodegenerator` has a classloader not able to load types reachable only by supertypes in osgi this does not happen because each class has associated the classloader from which is loaded this guarantee that the class is able to reach/load each type it declares (by its methods fields or annotations)example:- bundle a`fooclass1` has a protected method that returns fooimplotherclass`fooimplotherclass`- bundle b (imports only `foo` package from bundle a)`acmeclass2 extends class1``mockitomock(fooclass1)getdeclaredmethods()` will fails to fix this issue `subclassbytecodegenerator` should compose a classloader (`multipleparentclassloader`) with also the classloader of superclass the mocked type (`featuresmockedtype`);@raphw fyi ||;1;0;1584 create a multipleparentclassloader with also classloaders of supertypes of the mockedtype so in osgi is able to load all declared types in the hierarchy;
1586;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add some missing  @deprecated  annotations;errorprone caught this. we correctly had them on most of the deprecated;;0;add some missing `@deprecated` annotations;errorprone caught this we correctly had them on most of the deprecatedmethods but not on all of them;;;;;1;1;add some missing `@deprecated` annotationserrorprone caught this we correctly had them on most of the deprecatedmethods but not on all of them;
1588;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1587 : remove unnecessary loop from injectingannotationengine;removes injectingannotationengine::processinjectmocks method that does an unnecessary loop.;;1587.0;1587 : remove unnecessary loop from injectingannotationengine;removes injectingannotationengine::processinjectmocks method that does an unnecessary loopfixes https://githubcom/mockito/mockito/issues/1587; merging 1588  < ;injectingannotationengine does an unnecessary loop;processinjectmocks method of injectingannotationengine does unnecessary work it might call injectmocks several times while it is sufficient to call injectmocks once    private void processinjectmocks(final class<?> clazz final object testinstance) {        class<?> classcontext  clazz        while (classcontext ! objectclass) {            injectmocks(testinstance)            classcontext  classcontextgetsuperclass()        }    }inside injectmocks loops classes by himself    public void injectmocks(final object testclassinstance) {        class<?> clazz  testclassinstancegetclass()        set<field> mockdependentfields  new hashset<field>()        set<object> mocks  newmocksafehashset()        while (clazz ! objectclass) {            new injectmocksscanner(clazz)addto(mockdependentfields)            new mockscanner(testclassinstance clazz)addpreparedmocks(mocks)            oninjection(testclassinstance clazz mockdependentfields mocks)            clazz  clazzgetsuperclass()        }        new defaultinjectionengine()injectmocksonfields(mockdependentfields mocks testclassinstance)    }why not delete the unnecessary loop?;;1;0;1587 : remove unnecessary loop from injectingannotationengine;
1596;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1578: outer class mocks unavailable from inner class;i opened issue #1578 a few weeks ago that went without an correspondence  so i apologize if submitting a pr isn t the ideal method of moving this issue forward.  however i am hoping i can get this fix incorporated into an official version without implementing temporary workarounds.;;1578.0;1578: outer class mocks unavailable from inner class;i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot; merging 1596  < ;unfinishedmockingsessionexception with inner test classes;this appears to be a regression from 11019 and 2x-beta since it was reported as  in #353 but i was unable to get the sample test class to work in the release/2x branch (also reported to fail in 2130 210-beta125 and master too) the root cause is junitrule attempting to add a universaltestlistener a second time to a threadsafemockingprocesssample test class```@runwith(hierarchicalcontextrunnerclass)public class hierarchicalmockitotest {    @rule    public mockitorule mockitorule  mockitojunitrule()    @mock    private runnable runnable    public class context {        @test        public void test() throws exception {            runnablerun()        }    }}```exception thrown```orgmockitoexceptionsmisusingunfinishedmockingsessionexception: unfinished mocking session detectedprevious mockitosession was not concluded with finishmocking()for examples of correct usage see javadoc for mockitosession class	at orgmockitointernaljunitjunitrule$1evaluate(junitrulejava:42)	at orgmockitointernaljunitjunitrule$1evaluatesafely(junitrulejava:52)	at orgmockitointernaljunitjunitrule$1evaluate(junitrulejava:43)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontextprocessingmethodexecutorrun(methodexecutorjava:83)	at debechtejunitrunnerscontextprocessingmethodexecutorrun(methodexecutorjava:57)	at debechtejunitrunnerscontextstatementsrunchildrenevaluate(runchildrenjava:38)	at debechtejunitrunnerscontextstatementsrunallevaluate(runalljava:27)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontexthierarchicalcontextrunnerrun(hierarchicalcontextrunnerjava:134)	at debechtejunitrunnerscontextprocessingcontextexecutorrun(contextexecutorjava:26)	at debechtejunitrunnerscontextprocessingcontextexecutorrun(contextexecutorjava:15)	at debechtejunitrunnerscontextstatementsrunchildrenevaluate(runchildrenjava:38)	at debechtejunitrunnerscontextstatementsrunallevaluate(runalljava:27)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontexthierarchicalcontextrunnerrun(hierarchicalcontextrunnerjava:134)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:459)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:678)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:382)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:192)```i have a fix in progress which involves lazy initialization (  i haven’t submitted a pr yet because i’m waiting for the library i used to reproduce the issue to make a new release with a required fix bechte/junit-hierarchicalcontextrunner#32 also i need to clean up the commit to use reference this issue instead of 353 i suppose i can move forward with a pr if there was a way to reproduce the issue without using that library but i haven’t thought of a way to do thatthanks to @ursmetz for verifying the regression and providing a sample test class;;1;0;1578: append mocks to existing mockitosession- problem - junitrule detects an unfinished mocking session when the apply method is invoked more than once  this commonly happens with runners that enable developers to write nested test classes- fix - if a mockitosession has been established for junitrule then use that and initialize any new mocks (typically from a nested test class)- test - instantiate one @rule and assign it to a second one  this will simulate the apply method being invoked more than once without introducing a new test dependency;
1596;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1578: outer class mocks unavailable from inner class;i opened issue #1578 a few weeks ago that went without an correspondence  so i apologize if submitting a pr isn t the ideal method of moving this issue forward.  however i am hoping i can get this fix incorporated into an official version without implementing temporary workarounds.;;353.0;1578: outer class mocks unavailable from inner class;i opened issue #1578 a few weeks ago that went without an correspondence so i apologize if submitting a pr isnt the ideal method of moving this issue forward  however i am hoping i can get this fix incorporated into an official version without implementing temporary workaroundsthe pr should clearly show the issue i am trying to fix but i had to introduce a testcompile snapshot dependency  the dependent project has a fix required to demonstrate the issue within mockito but it unfortunately has not been incorporated into an official release and i cant think of another way to reproduce the issue  i have contacted the owner of the dependent project but i havent received a response from them eitheri am looking for guidance on next steps for what i believe to be regression (reported to be working in #353)  the only other solution i can think of is to merge this without a unit test but i highly doubt that is desirable_git commit message_- problem - junitrule detects an unfinished mocking session when an inner class is detected- fix - if a mockitosession has been established for junitrule then use that and init mocks of the inner class- tests - within an inner class  ensure mocks are accessible override outer class values when desired retain original values if not overwritten- demonstrated with debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot; merging 1596  < ;@mock-annotated fields are null for inner test classes (eg when using junit-hierarchicalcontextrunner);using the two current versions of mockito (11019 and 2x-beta) and the junit-mockito-rule together with junit extensions like [junit-hierarchicalcontextrunner]( that use inner classes causes fails with `nullpointerexception`s:``` java@runwith(hierarchicalcontextrunnerclass)public class hierarchicalmockitotest {    @rule    public mockitorule mockitorule  mockitojunitrule()    @mock    private runnable runnable    public class context {        @test        public void test() throws exception {            runnablerun()        }    }}```with older 1x versions that didnt not contain the new junit rule api (eg where `mockitojunitrule` was not deprecated yet) the above test pass i guess the reason is that the old rules constructor had the current test instance passed in in newer versions the rule uses the `target` from `orgjunitrulesmethodrule#apply()` which in this example is an instance of `hierarchicalmockitotestcontext` so the `@mock`-annotated fields of the outer classes are not seen and the mocks wont get instantiated;@ursmetz this is not yet supported feel free to craft a pull request for that ) || @bric3 i will look into that and eventually craft a pull requestmaybe it was not clear from my original post: this is a regression because when updating to the latest 1x release tests like the one above will fail: when though the constructor of `mockitojunitrule` gets the target (eh `this`) passed it doesnt use it in the newest version and as a consequence the test fails with a `nullpointerexeception` earlier version used the parameter so that the mocks got initiated and the test was green so even when the old now deprecated api is used tests start to fail after updating mockito so maybe a back port to the 1x branch should be considered too? || oh i didnt get that indeed actually the this was removed because junit passes the target when the rule is applied see [mockitojunitrule]( with these _exotic_ junit runners im not sure how to solve this in a proper way maybe adding a hierarchical mockito rule || or maybe with such exotic runner the pr could be on their project ?  || i was also thinking whether it is not a issue with the junit-hierarchicalcontextrunner i will investigate this and either raise an issue over there (and reference this issue) or take a stab at a fix and pull request for mockito im not one hundred percent sure whether it worked in all corner case with the old version where the parameter of `mockitojunitrule` was used instead of the parameter `target` of the `apply` method of the rule i will also look into that || @bric3 after playing a bit around with the example above and different versions of mockito (pre 11017 where the internal implementation of the junit rule changed and > 11017) i figured out that only some corner cases worked in the old version (exactly those we are using right now in my team at work) now different case work and the old cases stopped working as you said it seems to be an issue with junit-hierarchicalcontextrunner i raised the issue bechte/junit-hierarchicalcontextrunner#26 over there || @ursmetz cool if youre ok with that lets close the issue there ? || sure im closing it || cool thanks :) || i think there is still a bug with junitrule  i built the master branch of the project which includes @ursmetzs pull request in that project and ran the sample test class at the top but i received the following exception prior to reaching the code that causes the nullpointerexception  the root cause is junitrule attempting to add a universaltestlistener a second time to a threadsafemockingprocess (mockito currently does not readily provide the full stack trace at this time)```orgmockitoexceptionsmisusingunfinishedmockingsessionexception: unfinished mocking session detectedprevious mockitosession was not concluded with finishmocking()for examples of correct usage see javadoc for mockitosession class	at orgmockitointernaljunitjunitrule$1evaluate(junitrulejava:42)	at orgmockitointernaljunitjunitrule$1evaluatesafely(junitrulejava:52)	at orgmockitointernaljunitjunitrule$1evaluate(junitrulejava:43)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontextprocessingmethodexecutorrun(methodexecutorjava:83)	at debechtejunitrunnerscontextprocessingmethodexecutorrun(methodexecutorjava:57)	at debechtejunitrunnerscontextstatementsrunchildrenevaluate(runchildrenjava:38)	at debechtejunitrunnerscontextstatementsrunallevaluate(runalljava:27)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontexthierarchicalcontextrunnerrun(hierarchicalcontextrunnerjava:134)	at debechtejunitrunnerscontextprocessingcontextexecutorrun(contextexecutorjava:26)	at debechtejunitrunnerscontextprocessingcontextexecutorrun(contextexecutorjava:15)	at debechtejunitrunnerscontextstatementsrunchildrenevaluate(runchildrenjava:38)	at debechtejunitrunnerscontextstatementsrunallevaluate(runalljava:27)	at debechtejunitrunnerscontextstatementsstatementexecutorexecute(statementexecutorjava:28)	at debechtejunitrunnerscontexthierarchicalcontextrunnerrun(hierarchicalcontextrunnerjava:134)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:459)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:678)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:382)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:192)``` || the hierarchicalmockitotest fails even with @ursmetzs fix for [bechte/junit-hierarchicalcontextrunner#26](  since a new version of the dependency has not been released the test failure can be demonstrated by following the steps below (after a new version of the dependency has been released building my feature branch will be sufficient):1 build and install (requires maven)   this pulls in @ursmetzs fix with a version 4122-snapshot1 clone   in buildgradle change [this line]( to `testcompile debechtejunit:junit-hierarchicalcontextrunner:4122-snapshot` to match the artifact produced previously1 `/gradlew build` as-is results in a pass1 `/gradlew build` with my change to junitrule reverted results in hierarchicaljunitruletestjava failing due to the unfinishedmockingsessionexception i cited previouslythis issue would have happened with any runner that enabled hierarchical test classes ([such as the nitorcreations nestedrunner](  junitrule overwrites the mockitosession instantiated in the outer call in the nested case this seems wrong and it seems reasonable to augment the existing session with the mocks from the inner classi havent submitted a pr at this time eventhough the test suite passed because i have no idea if my changes are oblivious to other exception cases  but i would like to re-open a discussion on this ticket since i still believe this is a legitimate issue   @mouyang i had a quick look at it (i dont know why but i had to tweak `gradlebuild` in your repo a bit further so that the `junit-hierarchicalcontextrunner` snapshot version in my local maven repository was found as a `testcompile` dependency: i had to add a top level `repositories` section with `mavenlocal()` in it)i can reproduce your error when using some 2x versions of mockito (i tried 2130 210-beta125 and the master)with a mockito version 1x and 200-beta118 i cannot reproduce the failureso at the time when i was working on this it worked(tm) -) but with the current 2x version it is broken so i think youre right that there is an issue (please note that im not a maintainer of mockito i just saw that there was some activity on an old issue i once created) || from your clarifications it makes more sense to keep this ticket closed and for me to create a new ticket for my issue as it is clearly different thanks @ursmetz! ||;1;0;1578: append mocks to existing mockitosession- problem - junitrule detects an unfinished mocking session when the apply method is invoked more than once  this commonly happens with runners that enable developers to write nested test classes- fix - if a mockitosession has been established for junitrule then use that and initialize any new mocks (typically from a nested test class)- test - instantiate one @rule and assign it to a second one  this will simulate the apply method being invoked more than once without introducing a new test dependency;
1608;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;typo?   thenreturn  instruction if completed -> ...  thenreturn  instruction is completed;if  ->  is ?;;0;typo?  thenreturn instruction if completed ->  thenreturn instruction is completed;`if` -> `is`?; ;;;;1;1;typo?`if` -> `is`?;
1612;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;return null instead of causing a cce;this solves a large number of edge-cases where  null  will actually;;357.0;return null instead of causing a cce;this solves a large number of edge-cases where `null` will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes #357 a previous pr resolved the sameissue with returnssmartnulls: #1576357; merging 1612  < ;classcastexceptions with jdk9 javac;jdk 9 fixes a javac bug ([jdk-8058199]( that was causing checkcast intructions to be skipped previously javac used the parameter types of a method symbols erased type as targets when translating the arguments in jdk 9 javac has been  to use the inferred types as targets the fix causes additional checkcasts to be generated if the inferred types do not have the same erasurethe fix breaks mockito answer strategies that pick types based on the erased method signatures return type and causes tests to fail with classcastexceptions when compiled with the jdk 9 javac---example 1``` javaclass super<t> {  t g() {    return null  }}class sub extends super<boolean> {}`````` java@mock sub swhen(sg())thenreturn(false)```compiled with javac 8```invokevirtual subg ()ljava/lang/objectinvokestatic org/mockito/mockitowhen (ljava/lang/object)lorg/mockito/stubbing/ongoingstubbing```compiled with javac 9```invokevirtual subg ()ljava/lang/objectcheckcast java/lang/booleaninvokestatic org/mockito/mockitowhen (ljava/lang/object)lorg/mockito/stubbing/ongoingstubbing```the erased return type of `superg` is `object` but the expected return type of `subg` is `boolean` if the answer strategy returns `object` the checkcast fails---example 2``` javaclass foo {  <t> t getfirst(iterable<t> xs) { return xsiterator()next() }}`````` java@mock foo fiterable<boolean> it  arraysaslist(false)when(fgetfirst(it))thenreturn(false)```compiled with javac 8```invokevirtual foogetfirst (ljava/lang/iterable)ljava/lang/objectinvokestatic org/mockito/mockitowhen (ljava/lang/object)lorg/mockito/stubbing/ongoingstubbing```compiled with javac 9```invokevirtual foogetfirst (ljava/lang/iterable)ljava/lang/objectcheckcast java/lang/booleaninvokestatic org/mockito/mockitowhen (ljava/lang/object)lorg/mockito/stubbing/ongoingstubbing```the erased return type of `foogetfirst` is `object` but the inferred return type of `getfirst(iterable<boolean>)` is `boolean` if the answer strategy returns `object` the checkcast fails---the first example could be fixed by using [`genericmetadatasupport`]( in all of the answer implementations instead of `invocationgetmethod()getreturntype()`it gets more difficult if the mocks type is an instantiation of a generic type (eg `@mock foo<bar> x`) since the fields type arguments get dropped i think fixing that would require adding support for mocking types not just classesfor the second example returning the right answer requires considering the generic signature of the invoked method and performing type inference using the argument types unfortunately the runtime type of the argument is going to be a raw `iterable` and the inference depends on knowing its `iterable<boolean>` so im not sure what to do there;this problem is also the cause for  || the test from #304 passes on current master  so maybe this issue is also solved? || closing this issue as it seems to be resolved || i dont think this is  both of the examples in the original report still fail with `v2078-beta` and jdk `9-ea+116`full repro:  codegenjavalangobject$mockitomock$1914109206 (in module: unnamed module) cannot be cast to javalangboolean (in module: javabase)``````javalangclasscastexception: codegenjavalangobject$mockitomock$1914109206 (in module: unnamed module) cannot be cast to javalangboolean (in module: javabase)``` || thanks i check this out prior to release || sorry - do you mean that you verified its fixed at head or that you will take another look before the next release? if its the second one do you mind re-opening the issue to make sure it doesnt get lost? im seeing the same behaviour at head  || @cushon i think its more that well look at it )typically using `genericmetadatasupport` for `@mock` fields has been on my mind for some time already however note that using `mock()`style would not work unless we use some `typereference` trick> it gets more difficult if the mocks type is an instantiation of a generic type (eg @mock foo<bar> x) since the fields type arguments get dropped i think fixing that would require adding support for mocking types not just classes@raphw i think we should not delay 20 for that one jdk9 is not yet out we can still release fixes later || @cushon i have just completed testing mockito against java 9 and everything works as expected the examples that you provide work without any problemsthinking about how this would work also makes sense if not configured to return a different value mockito returns `null` during the configuration what passes the _checkcast_ only if a user specifies an illegal value to the generic signature (heap pollution) a problem occurs but this is not really mockitos responsibilitydid you test a recent version? || > if not configured to return a different value mockito returns null during the configuration what passes the checkcastwhat about `returns_smart_nulls` and `returns_deep_stubs`? || ah of course sorry for that i did another mistake in my test this problem is actually already reproduceable on recent versions of java 8 || ok i have now finally looked into this in detail there are three scenarios:1 for generic return types it suffices to resolve those return types properly by using `genericmetadatasupport` this can simply be added i already tried this2 for locally inferred generic return types there is not much we can do for example if we mocked some method `public <t> t foo() {  }` there is no information preserved within the method that would allow us to know the expected type for `t` we could only parse any method from where `foo` was called to contextually determine the return type this would add a whole new layer of complexity to mockito and i do not think we should support this case we should probably add a warning to the docs3 for generic fields we could find ways to preserve this information we should probably refactor the `return_smart_nulls` option to allow its binding to a generic base type rather than using the mock instances (raw) type || #639 builds on java 9 which still has 3 test failures (but they seem to be related to `assertj` rather than our code) @cushon could you check out that branch and test if your usecases have been fixed with jdk9? || > could you check out that branch and test if your usecases have been fixed with jdk9?@timvdlippe it has not been fixed i turned the repro into a unit test in #664those tests fail in the jdk9 branch:```orgmockitointernalstubbingdefaultanswersreturnssmartnullstest > inferred_generic_type failed    javalangclasscastexception: codegenjavalangobject$mockitomock$1081761404 (in module: unnamed module) cannot be cast to javalangboolean (in module: javabase)        at orgmockitointernalstubbingdefaultanswersreturnssmartnullstestinferred_generic_type(returnssmartnullstestjava:122)orgmockitointernalstubbingdefaultanswersreturnssmartnullstest > generic_return_type_erasure failed    javalangclasscastexception: codegenjavalangobject$mockitomock$1081761404 (in module: unnamed module) cannot be cast to javalangboolean (in module: javabase)        at orgmockitointernalstubbingdefaultanswersreturnssmartnullstestgeneric_return_type_erasure(returnssmartnullstestjava:105)``` || > for generic return types it suffices to resolve those return types properly by using `genericmetadatasupport` this can simply be added i already tried thisthat sounds good to me i skipped the original `class sub extends super<boolean> {}` example in #664 because its no longer broken by the jdk9 javac change it hasnt worked since 7fabd84fdfb2f80f8c135fe3865263c684c0d4e7 is it worth splitting this into a separate bug?``` java    @test    public void generic_return_type_checkcast() throws throwable {        class super<t> {            t get() {                return null            }        }        class sub extends super<boolean> {}        sub sub  mockitomock(subclass answersreturns_smart_nulls)        mockitowhen(subget())thenreturn(true)        asserttrue(subget())    }``````generic_return_type_checkcast failed    javalangclasscastexception: codegenjavalangobject$mockitomock$1200321394 cannot be cast to javalangboolean        at orgmockitointernalstubbingdefaultanswersreturnssmartnullstest$1sub$mockitomock$412017289get(unknown source)        at orgmockitointernalstubbingdefaultanswersreturnssmartnullstest$1sub$mockitomock$412017289get(unknown source)        at orgmockitointernalstubbingdefaultanswersreturnssmartnullstestgeneric_return_type_checkcast(returnssmartnullstestjava:94)``` || careful as `genericmetadatasupport` requires more cpu and memory || we might be able to get around these issues with a solution like #643  || note that this also fails with eclipses java compiler (running under a java 8 jre) in eclipse neon (45) with the same classcastexception || @cushon @raphw @epaul what is the status of this issue?**java 9 has been released today!**i am getting the following error in all my tests that use mockito:```javajavalangclasscastexception: codegenjavalangobject$mockitomock$1574589819 cannot be cast to orghibernatesession``` || as said there is not much we can do the information of the required type lies outside of the class we instrument we simply do not have this information available i am afraid that this chained mocking is something we cannot fully support and you will have to mock your method chanes manually to supply this information  || @raphw thank you!well does it mean that mockito will never work with java 9? omg its an epic disaster :(  || only when returning automatic mocks from mocks with generic return types maybe we should add a warning for this to make the error more intuitive || @raphw yes the warning would be very helpful so do i correctly understand that people will need to rewrite their tests in order to upgrade to java 9? probably a lot of tests?   || theres an error prone check that detects this problem at compile-time:  it can also be run as a [refactoring]( to add work-arounds to affected code ||;1;0;return null instead of causing a ccethis solves a large number of edge-cases where `null` will actuallyremove the runtime classcastexception this essentially negates thewhole mockitocast errorprone check we can still not support every usecase but causing a npe instead of a cce does not seem to make thisworsei am still running internal tests within google to see if there are anyregressions but i already saw that some of the test failures we hadwith bytebuddy were resolved with this particular patchnote that this now fully closes #357 a previous pr resolved the sameissue with returnssmartnulls: #1576357;
1617;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0; with mocking of java.util.* classes;1615;;1615.0; with mocking of javautil* classes;1615i hope the test is correct at least it failed before and succeeds now; merging 1617 ;"issue with mocking type in ""javautil*"" java 12";after upgrading mockito from `2234` to `2240` we cant run junit 5s tests anymore the error message reads:```    orgmockitoexceptionsbasemockitoexception:     mockito cannot mock this class: interface javautilconcurrentlockslock    mockito can only mock non-private & non-final classes    if youre not sure why youre getting this error please report to the mailing list```find the complete stacktrace here:  that using mockito `2240` using java 11 (and 13 locally) did work out! see this build matrix:  revert to mockito `2234` for the time being via https://githubcom/junit-team/junit5/commit/754f1eb0f106ab043d79de546d49769690a731b6;"suspiciously the type is again in the `javautil` package that leads me to believe any type definitive in there cant be mocked || > that leads me to believe any type definitive in there cant be mockedusing `2240` it works with the older version || the package should not be an issue but ill check  || there is a dot missing after the package name || haha well spotted! might be a simple string concatenation typo || this is probably the mistake:  be:```java typename  injectionbaseclassgetpackage()getname() +"""" + featuresmockedtypegetsimplename()``` || yes very muchcan it be that we dont have a test case for mocking a java type?are yoilu on your machine? ill fix it next week otherwise  || sadly not i can work on it tomorrow as well luckily we have a test suite now 🎉  || or if @sormuras is available to make that pr that would be amazing as well 😄 our tests are specified in  || great tim!any plans to sync current release to maven central soon? 2240 is the latest one that was uploaded:  || i wanted to do so but i first wanted to get some other issues resolved with @raphw hopefully we can get to that next week (but seems like we hit a jdk bug 🎉 ) || mockito 2245 should be available on maven central later today || looks good on 12:  || ";1;0;fix other broken test;
1619;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;new api to clean up all inline mocks after test;in certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. there is no clean way to mitigate this problem completely. hence  we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):;;1532.0;new api to clean up all inline mocks after test;in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533;"i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || ";nested spies cause memory leaks;"seems like nested spies can cause memory leaks since such objects are kept in memory without purging not sure if it can be resolved at all should it be avoided? is there a mention about this in docs? anyway the code speaks better and fortunately i’ve been able to create a self-contained samplebtw i can provide a `hprof` file if you are interested#### versions```orgmockito:mockito-core mockito-inline:2220``````java version ""180_181""java(tm) se runtime environment (build 180_181-b13)java hotspot(tm) 64-bit server vm (build 25181-b13 mixed mode)```#### gradleheap is set to 64 mb```groovytaskswithtype<test> {    maxheapsize  ""64m""    jvmargs(""-xx:+heapdumponoutofmemoryerror"")    failfast  true}``````$ /gradlew  cleantestdebugunittest  testdebugunittest --tests ""comgithubsamplenestedspiesmemoryleakspec"#### code```kotlinpackage comgithubsampleimport comjakewhartonrxrelay2behaviorrelayimport ioreactivexfunctionsconsumerimport orgjetbrainsspekapispekimport orgjetbrainsspekapidslitimport orgjunitplatformrunnerjunitplatformimport orgjunitrunnerrunwithimport orgmockitomockito@runwith(junitplatform::class)class nestedspiesmemoryleakspec : spek({    repeat(10_000) { iteration ->        it(""iteration [$iteration]"") {            mockitospy(service())        }    }}) {    class service {        // remove mockitospy and oom disappears        val value  mockitospy(consumer<int> {            // this closure keeps a reference to service            streamssize        })        // see at as a mass to fill the ram        val streams  (01_000)map { behaviorrelaycreate<int>() }    }}``````> task  testdebugunittestjavalangoutofmemoryerror: gc overhead limit exceededdumping heap to java_pid23350hprof heap dump file created [99857779 bytes in 0356 secs]comgithubsamplenestedspiesmemoryleakspec > it iteration [187] standard_error    javalangoutofmemoryerror: gc overhead limit exceeded    	at comjakewhartonrxrelay2behaviorrelay<init>(behaviorrelayjava:99)    	at comjakewhartonrxrelay2behaviorrelaycreate(behaviorrelayjava:77)    	at comgithubsamplenestedspiesmemoryleakspec$service<init>(nestedspiesmemoryleakspeckt:32)    	at comgithubsamplenestedspiesmemoryleakspec$1$1$1invoke(nestedspiesmemoryleakspeckt:17)    	at comgithubsamplenestedspiesmemoryleakspec$1$1$1invoke(nestedspiesmemoryleakspeckt:12)    	at orgjetbrainsspekenginescope$testexecute(scopekt:102)    	at orgjetbrainsspekenginescope$testexecute(scopekt:80)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:105)    	at orgjunitplatformenginesupporthierarchicalnodetesttask$$lambda$82/547193480execute(unknown source)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)comgithubsamplenestedspiesmemoryleakspec > it iteration [187] failed    javalangoutofmemoryerror> task  testdebugunittest failed```#### eclipse memory analyzer<img width""1238"" alt""screen shot 2018-11-14 at 19 09 53"" src"" width""1238"" alt""screen shot 2018-11-14 at 19 08 59"" src"" width""1238"" alt""screen shot 2018-11-14 at 19 09 09"" src"" like this happens:* `service` is a spy* `service` contains a `consumer` it is a `spy` as well* `consumer` is a closure and has an implicit reference to `service`* mockito keeps both spies and cannot remove them from memory since there is a cross-reference (i guess)";@mockitoguy sorry for the ping but the situation gets worse on our side is the issue with mockito or we are just using it the wrong way? || cc @raphw  || you are right due to the reference of one mock to another the weak map is loosing its effecttechnically we would need to make the spy reference weak to break the cross reference but i sm not sure how this can be achieved without risking to have the references collected prematurely  || @raphw thanks for the explanation! if it is more or less intended — maybe let’s document it somewhere? another option is throwing an exception or printing a warning in such cases since we weren’t aware of this and use mockito quite a lot we got ourselves in a pretty bad oom situation finding nested spies by hand is a tedeous task not even sure i can automate it without library support i’m afraid people will continue to do this not understanding the consequencescan i ask you to take a look at #1533 as well? i think it is pretty similar or even exactly the same in terms of the root issue || it is surely not expected behavior and i consider it a bug however i do not know how to solve this and i even doubt that it is solvable without a data structure that is called an  and which java does not (currently) supportbut we should definitely document this || just checked mockito 2270 using the new `mockitoframework()clearinlinemocks()` call does the trick and helps to avoid oom ;1;0;merge branch release/2x into release/2x;
1619;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;new api to clean up all inline mocks after test;in certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. there is no clean way to mitigate this problem completely. hence  we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):;;1533.0;new api to clean up all inline mocks after test;in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533;"i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || ";cross-references and a single spy cause memory leak;"not entirely sure but i think that mockito does not handle cross-references well i have a semi-complex sample that proves this but at the same time i’m not sure it is a mockito failure and especially a fixable one suggestions how to avoid this behavior in general will be very helpful!btw i can provide a `hprof` file if you are interested#### versions```orgmockito:mockito-core mockito-inline:2220``````java version ""180_181""java(tm) se runtime environment (build 180_181-b13)java hotspot(tm) 64-bit server vm (build 25181-b13 mixed mode)```#### gradleheap is set to 64 mb```groovytaskswithtype<test> {    maxheapsize  ""64m""    jvmargs(""-xx:+heapdumponoutofmemoryerror"")    failfast  true}``````$ /gradlew  cleantestdebugunittest  testdebugunittest --tests ""comgithubsamplesubscriptionmemoryleakspec"#### code```kotlinpackage comgithubsampleimport comjakewhartonrxrelay2behaviorrelayimport comjakewhartonrxrelay2publishrelayimport ioreactivexdisposablescompositedisposableimport orgjetbrainsspekapispekimport orgjetbrainsspekapidslitimport orgjunitplatformrunnerjunitplatformimport orgjunitrunnerrunwithimport orgmockitomockito@runwith(junitplatform::class)class subscriptionmemoryleakspec : spek({    repeat(1_000) { iteration ->        it(""iteration $iteration"") {            // remove mockitospy and oom disappears (even without componentunbind)            val service  mockitospy(service())            val memoryconsumingservice  memoryconsumingservice()            val component  component(service memoryconsumingservice)            componentbind()            // uncomment the following line and oom disappears            // componentunbind()        }    }}) {    class service {        val stream  publishrelaycreate<unit>()toserialized()    }    class memoryconsumingservice {        // see at as a mass to fill the ram        val streams  (01_000)map { behaviorrelaycreate<int>() }    }    class component(            private val service: service            private val memoryconsumingservice: memoryconsumingservice    ) {        private val disposable  compositedisposable()        fun bind() {            disposable + servicestreamsubscribe {                // this closure keeps a reference to component                memoryconsumingservicestreamssize            }        }        fun unbind()  disposableclear()    }}``````> task  testdebugunittestjavalangoutofmemoryerror: gc overhead limit exceededdumping heap to java_pid31753hprof heap dump file created [96660586 bytes in 0332 secs]comgithubsamplesubscriptionmemoryleakspec > it iteration 260 standard_error    javalangoutofmemoryerror: gc overhead limit exceeded    	at javautilconcurrentlocksreentrantreadwritelock$sync<init>(reentrantreadwritelockjava:338)    	at javautilconcurrentlocksreentrantreadwritelock$nonfairsync<init>(reentrantreadwritelockjava:669)    	at javautilconcurrentlocksreentrantreadwritelock<init>(reentrantreadwritelockjava:240)    	at javautilconcurrentlocksreentrantreadwritelock<init>(reentrantreadwritelockjava:230)    	at comjakewhartonrxrelay2behaviorrelay<init>(behaviorrelayjava:99)    	at comjakewhartonrxrelay2behaviorrelaycreate(behaviorrelayjava:77)    	at comgithubsamplesubscriptionmemoryleakspec$memoryconsumingservice<init>(subscriptionmemoryleakspeckt:41)*** javalanginstrument assertion failed ***: ""!erroroutstanding"" with message cant create byte arrau at jplisagentc line: 813    	at comgithubsamplesubscriptionmemoryleakspec$1$1$1invoke(subscriptionmemoryleakspeckt:21)    	at comgithubsamplesubscriptionmemoryleakspec$1$1$1invoke(subscriptionmemoryleakspeckt:14)    	at orgjetbrainsspekenginescope$testexecute(scopekt:102)    	at orgjetbrainsspekenginescope$testexecute(scopekt:80)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:105)    	at orgjunitplatformenginesupporthierarchicalnodetesttask$$lambda$82/1204954813execute(unknown source)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservice$$lambda$89/1263089654accept(unknown source)    	at javautilarraylistforeach(arraylistjava:1257)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:110)    	at orgjunitplatformenginesupporthierarchicalnodetesttask$$lambda$82/1204954813execute(unknown source)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservice$$lambda$89/1263089654accept(unknown source)    	at javautilarraylistforeach(arraylistjava:1257)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:110)    	at orgjunitplatformenginesupporthierarchicalnodetesttask$$lambda$82/1204954813execute(unknown source)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:72)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:95)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:71)comgithubsamplesubscriptionmemoryleakspec > it iteration 260 failed    javalangoutofmemoryerror261 tests completed 1 failed> task  testdebugunittest failed82 actionable tasks: 5 executed 77 up-to-date```#### eclipse memory analyzer<img width""1513"" alt""screen shot 2018-11-15 at 11 57 52"" src"" width""1513"" alt""screen shot 2018-11-15 at 11 58 42"" src"" width""1513"" alt""screen shot 2018-11-15 at 11 59 17"" src"" width""1513"" alt""screen shot 2018-11-15 at 11 59 58"" src"" width""1513"" alt""screen shot 2018-11-15 at 12 01 25"" src"" like this happens:* `service` is a spy and is being passed to `component` along with `memoryconsumingservice`* since `service` is a spy it is being held by mockito* `component` subscribes to `servicestream` the `subscribe` closure captures `component` `service` and `memoryconsumingservice` due to rxjava specifics `servicestream` holds all of these thanks to the closure* since `service` is being held by mockito (since it is a spy) and by itself (due to the `subscribe` closure) mockito does not release ithowever:* releasing the subscription via `componentunbind()` removes a reference so mockito releases it and there is no oom* avoiding making `service` a spy eliminates oom as well i e cross-references are not an issue for the jvm itself";the issue is most likely caused by 2 factors:1 `creationsettingsspiedinstance` holds a hard reference to spied instance `inlinebytebuddymockmaker` puts instance of the settings into a hard-referenced value of `mocks` field solution could be to make `creationsettingsspiedinstance` a weak reference field || @timvdlippe @bric3 🏓  || @ming13 @beworker does anyone of you wants to take a stab at it? can you write up a short design note how you would like to solve it and pros/cons of adding another weak reference field? thanks so much! || @mockitoguy hey thanks for the reply! i think i don’t have enough expertise to do this without breaking something along the way but just to confirm — is the issue really with mockito or it is just a bad practices leading to this behavior? || wow eclipse || just checked mockito 2270 using the new `mockitoframework()clearinlinemocks()` call does the trick and helps to avoid oom ;1;0;merge branch release/2x into release/2x;
1619;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;new api to clean up all inline mocks after test;in certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. there is no clean way to mitigate this problem completely. hence  we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):;;1614.0;new api to clean up all inline mocks after test;in certain specific rare scenarios (issue #1614) inline mocking causes memory leaks there is no clean way to mitigate this problem completely hence we introduced a new api to explicitly clear mock state (only make sense in inline mocking!):```javapublic class exampletest {     @after     public void clearmocks() {         mockitoframework()clearinlinemocks()     }     @test     public void sometest() {         //     } }```due to the introduction of map from weak reference from mock instance toits invocation handler mockito became vulnerable to memory leaks asthere are multiple situations where mockito could unintentionally holdstrong references to mock instances in the map record the strongreferences could be through spiedinstance for spies and arguments usedto facilitate method stubbingmockito could never know if the arguments passed in for method stubbingare also strongly referenced somewhere else or not so mockito needs tosave a strong reference to these arguments to avoid premature gctherefore to solve cyclic strong references through arguments mockitoneeds to explicitly know when mocks are out of their life and cleanup all internal strong references associated with them1532 and #1533;"i will review this tomorrow at a first glance we are going to need to make some changes most notably the way we handle interfaces (a new method on `mockmaker` is a breaking change) will give you a detailed review tomorrow || (that said the pr is much appreciated sorry if my initial reaction seemed not positive we really do appreciate community prs for these kind of issues!) || oh thanks for quick response i didnt expect any feedback todayi am not familiar with how to contribute to mockito (ie dont know what can be done and what cant) its expected to have some back and forth for a change at this scale just please be as detailed as possible so that i know how to make proper changesi just hope the overall approach wont be vetoed as i basically dont have any other ideas on how to solve it ||  merging 1619  || this is awesome thank you guys! i’ll try this api on our codebase and samples i’ve provided in original issues also — kudos for including tests reproducing the behavior i’ve described 😉  || hi just to let you know i am using the new api already with v2282 and for me it was breaking the strict test with following exception:``` orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class cache$mockitomock$149288076!       at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:63) ```i had to move it to `@afterclass` to mitigate the problem || @s2131 you are not allowed to interact with mocks anymore after calling that api because all internal states of mocks are cleaned up after the api call that includes all delayed actions or interactions from other threadsunfortunately its never as easy as just calling that api || ";memory leak in mockito-inline calling method on mock with at least a mock as parameter;# summarywe found a memory leak with mockito-inline a short example is shown as below a more detailed example can be found at the end```javaclass bigclass {  void accept(smallclass small) {}}class smallclass {  void accept(bigclass big) {}}void leak() {  bigclass a  mockitomock(bigclassclass)  smallclass b  mockitomock(smallclassclass)  // remove any one of the 2 lines below will stop leaking  aaccept(b)  baccept(a)}```# analysislooking at the [memory dump][memdump] mock of `bigclass` and `smallclass` are held as a weak ref in a map of type `weakconcurrentmap$withinlinedexpunction` used to map the mock and its invocation handler when the mock can be reclaimed by gc the map will remove the record from itin the case with memory leak the mock instance of `bigclass` was held as a strong reference  rawarguments` and `arguments` in [`invocationmatcher`][invocationmatcher]  as `invocation` in [`interceptedinvocation`][interceptedinvocation] as `invocationforstubbing` in [`invocationcontainerimpl`][invocationcontainerimpl] as `invocationcontainer` in [`mockhandlerimpl`][mockhandlerimpl] that eventually leads to a value in the `weakconcurrentmap` for `smallclass` similar thing happens to the mock instance of `smallclass` that creates a ring of reference and no mock can be reclaimed by gc because they are all referenced transitively by a value in the mapsimilar things can also happen for stubbed methods saved in `stubbed` in `invocationcontainerimpl`subclass mock makers dont suffer from it because there is no map from mock to handler -- its just a strong reference gc can handle non-accessible rings well but gc doesnt know the mock map purging semantic in inline mock makers# potential solutionunlike #1533 where converting `spiedinstance` to a weak reference may be an acceptable solution we cant convert arguments in stubbing method calls into weak references because there are stubbing calls with an object (or a mock) that doesnt have strong ref anywhere else than arguments in mockitotherefore i failed to see a solution thats transparent to callers the possible solution below is the one that i think has the least changethe possible solution is we can somehow reset the mock when their lives end which clears the stubbing records maybe we can tie their lives to a `mockitosession` we can track all mocks created after a session is created and reset them when the session is finished now we only have events for mock creation in the same thread we may need to expand that to include other threadswe may be able to set `spiedinstance` to `null` when their lives end which should also be able to 1532 and #1533 that would be a solution with least riskof course any solution thats transparent to callers is still more desirable# a detailed examplesee github project [mockitomethodcallmemleak][mockitomethodcallmemleak] one can open it in intellij and the run configuration is already configured (with mem dump at oom and 4m java heap size)[memdump]:      https://githubcom/ttanxu/mockitomethodcallmemleak;thanks for the detailed explanation!> we may be able to set `spiedinstance` to `null` when their lives end which should also be able to 1532 and #1533 that would be a solution with least risksounds like the best plan forward do you mind opening a pr with regression test to get that ? || it seems to be rather hard to convert all listeners to listen to events from all threads due to current test setuphowever its pretty important to capture mocks from other threads to make this solution work because junit has failontimeout impl which basically runs each individual test case in its own thread that means we need start a session in each test case rather than in setup and teardown which is rather inconvenientill add a global listener that captures all mock events from all threads but disable the feature unless caller explicitly enables in session buildersit would be a hard refactor to make `threadsrunalltestshalfmanualtest` pass with this || actually we probably shouldnt refactor those tests since they probably represent part of current api but it should be just ok to stick to the plan in my previous comment || thanks! i added documentation about this as it was having a big impact on a project and was hard to find  || we just updated our testing dependencies to latest version and ran into this oom how is adding an @after-annotated function to 3000+ tests practical of which some already have their own implementation @after implementation? or maybe im missing something? || there was a lot of discussion about this feature in the corresponding pr: #1619 that should hopefully clear up why we were forced to implement it this way 😢  || got it so is there a way that you know of to invoke that for all tests without me going into every test and adding that code? maybe via some test listener or reflection? || you can write your own test runner that extends from the default mockito runner and implements the logicwe might actually consider that as part of the default mockito runner implementation do you mind opening a pr to start that discussion? it will mostly revolve around potential issues with multithreaded code || > we just updated our testing dependencies to latest version and ran into this oom> how is adding an @after-annotated function to 3000+ tests practical of which some already have their own implementation @after implementation? or maybe im missing something?classes can have as many `@after` functions as they want in my case we had a base class that all classes inherited from ||;1;0;merge branch release/2x into release/2x;
1620;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;1618 : fix strict stubbing profile serialization support.;when strict stubs profile is enabled  mock serialization doesn t work.;;1618.0;1618 : fix strict stubbing profile serialization support;when strict stubs profile is enabled mock serialization doesnt workthis pr fixes this problem; ;serializable flag doesnt make mock serializable;i have a simple example test like this (im using junit5 with mockito-junit-jupiter extension)```@extendwith(mockitoextensionclass)class exampletest {  @mock(serializable  true) private iterable<?> it  @test  void shouldserializeanddeserializeit() throws ioexception classnotfoundexception {    // when    bytearrayoutputstream out  new bytearrayoutputstream()    new objectoutputstream(out)writeobject(it)    bytearrayinputstream in  new bytearrayinputstream(outtobytearray())    iterable<?> deserializedit  (iterable<?>) new objectinputstream(in)readobject()    // then    assertthat(deserializedit)isequaltocomparingfieldbyfieldrecursively(it)  }}```and im getting this error on during instance serialization:```javaionotserializableexception: orgmockitointernaljunitdefaultstubbinglookuplistener	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1185)	at javabase/javaioobjectoutputstreamwriteobject(objectoutputstreamjava:349)	at javabase/javautilarraylistwriteobject(arraylistjava:896)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at javabase/javaioobjectstreamclassinvokewriteobject(objectstreamclassjava:1130)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1497)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamdefaultwritefields(objectoutputstreamjava:1553)	at javabase/javaioobjectoutputstreamwriteserialdata(objectoutputstreamjava:1510)	at javabase/javaioobjectoutputstreamwriteordinaryobject(objectoutputstreamjava:1433)	at javabase/javaioobjectoutputstreamwriteobject0(objectoutputstreamjava:1179)	at javabase/javaioobjectoutputstreamwriteobject(objectoutputstreamjava:349)```;we have observed similar things before it seems like a mock is something keeping a hard reference to a listener @timvdlippe do you remember me mentioning to having observed this some times? were you working with the listener parts originally? || yes i recall that discussion the listener parts were introduced by @mockitoguy i have run into this problem myself from time to time and have not figured out where it goes wrong these listeners should not even be considered when serializing mocks ||;1;0;1618 : fix strict stubbing profile serialization support;
1624;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;handle terminal type var with bounds;this pr aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.;;1621.0;handle terminal type var with bounds;this pr aim to fix the issue described in #1621 the issue being that terminal type variable arguments were not looked up for their bounds1621; merging 1624 ;"returns_deep_stubs causes ""raw extraction not supported for : null"" in some cases";when trying to mock the [hadoop mappercontext]( class with mockito 2240 exception `orgmockitoexceptionsbasemockitoexception: raw extraction not supported for : null` is thrown when calling one of the methods that returns a generic type  actual mocking is taking place inside the [mrunit library]( as seen in [mockmapcontextwrapper](     final mapper<keyin valuein keyout valueout>context context  mock(orgapachehadoopmapreducemappercontextclass mockitoreturns_deep_stubs)context is an abstract inner class of mapper and implements the [mapcontext]( interface which extends the [taskinputoutputcontext]( interface which extends several other non-generic interfaces exception is thrown later when calling the [`contextgetcurrentkey()`]( method on the mock which returns generic type `keyin`this works fine with mockito 1mrunit project is abandoned so it is not possible to change the mock  it by default uses old mockito 195 and works with 11019  i am attempting to exclude its dependencies on old mockito and powermock and instead provide latest mockito 2240 and powermock 200 so that my project using mrunit and mockito will not be permanently stuck on mockito 1 the only time these problem methods appear to be [called within mrunit is to set up stubbing]( so it doesnt really matter what the return value is in this case  should this even work with mockito or was this just a bug in mockito 1 that mrunit exploited? ----here is a minimal example that reproduces the issue:```javapackage exampleimport orgjunitbeforeimport orgjunittestimport static orgmockitomockitoreturns_deep_stubsimport static orgmockitomockitomockpublic class example {    public interface firstinterface<t> {        boolean normal()        t generic()    }    public interface secondinterface<t> extends firstinterface<t> { }    public class testclass<t> {        public abstract class abstractinner implements secondinterface<t> { }    }    private testclassabstractinner testmock    @before    public void setup() {        testmock  mock(testclassabstractinnerclass returns_deep_stubs)    }    @test    public void works() {        testmocknormal()    }    @test    public void fails() {        testmockgeneric()    }}``` has this code with a gradle buildboth tests pass with mockito 11019 but one fails with 2240  changing testclassabstractinner to implement firstinterface instead of secondinterface causes the same failure with both mockito 1 and 2;@zman0900 hi nice bug report and reproducible example it really helped indeed thats a bug or a current limitation in mockitos way to handle generics im currently devising a way to improve such scenario ||;1;0;reintroduces the guard that returns null instead of a mock of objectwhile the generics metadata extractor has been improved not everypossible scenarios are covered even javac in version 8 do not followthrough in order to avoid a stealth return of the bugs spot in #357this change improves the guard by making sure extracted generic datadoes not have extra-interfaces as well;
1635;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fix handling of generics in returnsmocks;returnsmocks was exhibiting the same problems as we previously had with;;0;fix handling of generics in returnsmocks;returnsmocks was exhibiting the same problems as we previously had withreturnssmartnulls extract that common behavior into a separate classand thus fix the issues with returnsmocks;we found a regression in our test suites should be easy to fix but i will do that tomorrow then i will merge thanks @raphw for the review 😄  ||  merging 1635 ;;;;1;1;fix handling of generics in returnsmocksreturnsmocks was exhibiting the same problems as we previously had withreturnssmartnulls extract that common behavior into a separate classand thus fix the issues with returnsmocks;
1639;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;removes inaccessible links from javadocs in mockito.java;the monkeyisland.pl domain is no longer available.;;0;removes inaccessible links from javadocs in mockitojava;the monkeyislandpl domain is no longer availablelist of inaccessible articles //monkeyislandpl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoringhttp://monkeyislandpl/2008/07/12/should-i-worry-about-the-unexpectedhttp://monkeyislandpl/2008/04/26/asking-and-tellinghttp://monkeyislandpl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring; ;;;;1;1;1638: removes inaccessible links from javadocs in mockitojavathe monkeyislandpl domain is no longer availablelist of inaccessible articles //monkeyislandpl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoringhttp://monkeyislandpl/2008/07/12/should-i-worry-about-the-unexpectedhttp://monkeyislandpl/2008/04/26/asking-and-tellinghttp://monkeyislandpl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring;
1641;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fix returns mocks for final classes;the guard for final mocking was incorrect. it should have passed it on;;0;fix returns mocks for final classes;the guard for final mocking was incorrect it should have passed it onto mockitocore since we have the inlinemockmaker we can actually mockso this check was incorrect; merging 1641 ;;;;1;1;fix returns mocks for final classesthe guard for final mocking was incorrect it should have passed it onto mockitocore since we have the inlinemockmaker we can actually mockso this check was incorrect;
1644;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;verificationcollector to handle non-matching args and other assertions;this fix for #1642 widens the catch in  verificationcollectorimpl  so that it will catch any  assertionerror   rather than just  mockitoassertionerror . in this way  any comparison failures (such as the built-in argument comparison when running under junit) will also be collected rather than propagating through to the test framework.;;1642.0;verificationcollector to handle non-matching args and other assertions;this fix for #1642 widens the catch in `verificationcollectorimpl` so that it will catch any `assertionerror` rather than just `mockitoassertionerror` in this way any comparison failures (such as the built-in argument comparison when running under junit) will also be collected rather than propagating through to the test frameworkthere are also two commits which are more cosmetic improvements to `verificationcollectorimpltest`:* rename `assertatleastonefailure()` to `assertexactlyonefailure()` (more accurate description of what it does)* change `assertfail()` to assertjs `assertbecauseexceptionwasnotthrown()` (produces better diagnostics in the case of a failure); merging 1644 ` ;verificationcollector doesnt work for invocations with non-matching args;i found the incubating `verificationcollector` (#287) which is similar to assertj `softassertion`s in that it collects multiple verifications and then asserts on the whole rather than throwing an exception on the first one and skipping the rest of the verifications very useful for complicated testinghowever i found that the verification collector doesnt work for verifications on method invocations with parameters i had a quick check of the source code of the test and i noticed that all of the tests in `verificationcollectorimpltest` use no-arg invocationshopefully this would be an easy fix because this looks like an extremely useful feature for my application but i need to verify invocations with arguments at the moment my workaround is to wrap each verification call in an assertj soft assertion but this makes writing the tests a bit more tedious and less readable;update: i found that the lazy verification works properly when you use `verificationcollector` directly however if you try and use it as a junit rule thats when this bug manifestsi have updated `verificationcollectorimpltest` to properly test for this situation and fail as appropriate i will have a quick look and see if it is an easy fix otherwise i may submit a pr with the test only and leave a more experienced hand to fix it || another update: i have gotten to the root of this problem>i found that the lazy verification works properly when you use verificationcollector directly however if you try and use it as a junit rule thats when this bug manifeststhis wasnt quite correct the distinguishing feature wasnt the junit rule but if you do a verification for an invocation that tries to match on an argument while running under junitthere is code in `orgmockitointernaljunitexceptionfactory` that checks to see if junit is on the classpath - if so then it will throw `orgmockitoexceptionsverificationjunitargumentsaredifferent` rather than `orgmockitoexceptionsverificationargumentsaredifferent` the junit version inherits from `junitframeworkcomparisonfailure` whereas the basic version inherits from `orgmockitoexceptionsbasemockitoassertionerror`it seems that the purpose of this is to help junit-aware guis to produce more helpful diagnostic output this makes sense (although it would make more sense to derive from a more-up-to-date version of `comparisonfailure` if it is available like `orgjunitcomparisonfailure` - perhaps this could be the subject of a different issue/pr) however because it is not a subclass of `mockitoassertionerror` it skips out of the try/catch in `verificationcollectorimpl` (see  are two possible solutions:1 add another `catch()` to catch `comparisonfailure` as well2 broaden the catch for `mockitoassertionerror` to a common superclass (like `assertionerror`)the second probably has more generic appeal and would future-proof the solution if other types of argument comparison were used (eg a custom argument matcher) i will submit a pr for this shortly ||;1;0;enhance verificationcollectorimpl to collect argument-matching failures1642;
1646;0;1;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;add back getargument(int  class) to circumvent compilation issues;also add  @notextensible  to several of our interfaces to document they;;0;add back getargument(int class) to circumvent compilation issues;also add `@notextensible` to several of our interfaces to document theyare not intended to be subclassed1609; merging 1646  this pr || good work thank you! sorry i was late to review ||;;;;1;1;merge branch release/2x into get-argument-class;
1648;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;prevent npe in findtypefromgenericinarguments;there was only a single test failing on this. i think the issue was returns_smart_nulls in combination with an argumentcaptor  but;;0;prevent npe in findtypefromgenericinarguments;there was only a single test failing on this i think the issue was returns_smart_nulls in combination with an argumentcaptor butcouldnt figure that part out at least this fixes prevented the npe; merging 1648  < ;;;;1;1;fix checkstyle warnings;
1665;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;new public api: invocation.getargumentsasmatchers();- new public api: invocation.getargumentsasmatchers()  useful for advanced integrations  such as mockito-scala;;166.0;new public api: invocationgetargumentsasmatchers();- new public api: invocationgetargumentsasmatchers() useful for advanced integrations such as mockito-scala- some internal refactorings that provide temporary help with mockito-scala integration1664; merging 1665 ;unfinishedstubbingexception when thenreturn contains mock which is used in when;hi ive found something strange and would like to ask you to explain what is the reason unfinishedstubbingexception is thrown here? my understanding is that using mock in thenreturn is forbidden when it is a part of when as well but frankly i dont get why :-)```@testpublic void shouldmockmethodbutdoesnot() {    testinterface mock  mockitomock(testinterfaceclass)    when(mockgetobject())thenreturn(mockitomock(objectclass))    when(mockreturnsomething())thenreturn(new testinterfaceuser(mock))}static interface testinterface {    public testinterfaceuser returnsomething()    public object getobject()}static class testinterfaceuser {    object obj    public testinterfaceuser( testinterface t) {        thisobj  tgetobject()    }}```;"if you slightly change your code to the next form:``` java@testpublic void shouldmockmethodbutdoesnot() {    testinterface mock  mockitomock(testinterfaceclass)    when(mockgetobject())thenreturn(mockitomock(objectclass))    testinterfaceuser t  new testinterfaceuser(mock)    when(mockreturnsomething())thenreturn(t)}```it is working correctlyalternatively if you do next thing:``` java@testpublic void shouldmockmethodbutdoesnot() {    testinterface mock  mockitomock(testinterfaceclass)    when(mockgetobject())thenreturn(mockitomock(objectclass))    when(mockreturnsomething())thenreturn(new testinterfaceuser(mock))}static interface testinterface {    public testinterfaceuser returnsomething()    public object getobject()}static class testinterfaceuser {    testinterface obj    public testinterfaceuser( testinterface t) {        thisobj  t    }}```it also behave in expected wayyour problem is connected to the fact that in one place you are trying to register mock behaviour for selected method `when(mockreturnsomething())` - as a result mock is in state for registering answer  and then you are interacting with the same mock by invoking method `getobj()` as a result mock is moved from waiting for answer state to some other one without receiving answeri am not sure whether i explain it to you in enough clear way but i think that you should more or less catch it i think that provided workaround should be sufficient for youas far as i know there is no easy way to handle exactly the same cases described by you (but maybe i am wrong) || thanks alberskib for your reply i know how to build such a workaround :) what is more i was almost sure that ""incorrect state"" is the reason why exception is thrown nothing new for me but the question is if it is a desired behavior or just a bug? in my opinion it is at least weird || > the question is if it is a desired behavior or just a bug?it is really good question but unfortunately i am not able to answer to iti think that @szczepiq or @bric3 will be able to answer it || hi @mplewkafor this kind of code it is expected ie a mock is being used while the other mock is not yet stubbedmock stubbing wasnt really designed to be _intertwined_ things are already complicated but when mocks call another while being stubbed it becomes very difficult to actually detect the correct arguments for the correct call in intertwined mocks i dont remember the details but if we relax this part it may blow in the wrong way for some other casesalso if you want i can give more precise detail on whats really going on in the snippet you provided || ";1;0;improve javadoc with links;
1667;0;0;0;0;0;0;1;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;improved ide experience for junit5 - visual comparison failure;when junit5+mockito is used in modern ide (idea  eclipse) we now show  visual  comparison failure pop-up for certain mockito exceptions (such as argumentsaredifferent).;;1663.0;improved ide experience for junit5 - visual comparison failure;"when junit5+mockito is used in modern ide (idea eclipse) we now show ""visual"" comparison failure pop-up for certain mockito exceptions (such as argumentsaredifferent)1663";" merging 1667  as-is || ";improve ide ux comparison failure for junit5;"when junit4 is used and the test is invoked from ide (idea or eclipse) and we are getting ""arguments are different"" mockitoverificationerror the ide gets nice ""click to see the difference"" link in the test failure providing neat comparison pop-upwe want to provide this feature for junit5 too we do not want to add a new dependency on mockito (eg opentest4j) rather we can use reflection just like we do it now for junit4 or how assertj integrates with junit5spin-off from #1656";changing the exception type is an incompatible change in a strict sense however we need to be able to improve the framework by tweaking the exceptions if needed we always strive to be compatible there are no known legit use cases why our users would want to catch & handle specific mockito exceptions its ok to change the type of argumentsaredifferent exception || im happy to take this on per your request the hardest part was the question of whether/how to handle backward compatibility should have a pr submitted by monday || > the hardest part was the question of whether/how to handle backward compatibilitywe are ok with this incompatible change (see my other comment) thanks for taking this on!!! ||;1;0;added support for opentest4js assertionfailederror1663;
1670;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;add support for answer6 and voidanswer6;regretfully  i ran into a case where i needed to mock a six-argument method. one can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and i think that some pragmatism is useful in tools like mockito  so here is my attempt at adding support for it.;;0;add support for answer6 and voidanswer6;regretfully i ran into a case where i needed to mock a six-argument method one can of course claim that such methods _ought not to exist_ but sadly this is not always the reality and i think that some pragmatism is useful in tools like mockito so here is my attempt at adding support for itof course its possible to use the plain `answer` interface in this case but adding a dedicated `answer6` interface makes it more convenient on the user `answer` is a quite raw interface(im not sure if this should target the 2x release or `master` also but feel free to cherry-pick as needed after review/merge);"while we could simply ship this my concerns are mostly ""where do we stop?"" if we ship with 6 arguments we should also ship with 7 there does not seem to be a good reason not tohowever i would prefer to limit to 5 these should cover all common cases if we ship more we are generating more code than is actually useful (and maintainable) it should be quite straightforward to write your own 6-answer or use the lack thereof as an incentive to refactor you code to just use 5 arguments || > while we could simply ship this my concerns are mostly ""where do we stop?"" if we ship with 6 arguments we should also ship with 7 there does not seem to be a good reason not tosure thats a valid concern we have to draw the line somewhere im perfectly fine with that>  it should be quite straightforward to write your own 6-answerthats actually how it started but i thought id go the extra mile and suggest this for inclusion in mockito proper> or use the lack thereof as an incentive to refactor you code to just use 5 argumentsunfortunately not that easy in this case the method in question is an existing interface used for fetching tv recordings for a given customer filtered by a given set of channels a server id (which can be null) a start time and end time and an optional flag determining if the result should be sorted or notin languages like ruby i could easily just add a hash parameter and provide `n` number of (optional) parameters but in java id have to wrap up a ""parameter class"" just for this sake and it feels kind of an overkill design if you ask mesimply put real-world scenarios are not always so easy motivating change in systems simply because ""the tools we use dont support more than 5 arguments"" is perhaps also not so easy either----like you say though we _can_ keep this as a local class in our project but i do think it makes some sense here since other users could find it useful as well i think we could (in mockito) consider expanding the ""5-argument limit"" to 10 in the long run yes methods with 10 arguments are quite absurd but im not sure we will ""win the war"" against bad code simply by being too strict in this area || > thats actually how it started but i thought id go the extra mile and suggest this for inclusion in mockito properthat is much appreciated thanks for opening the discussion!> but in java id have to wrap up a ""parameter class"" just for this sake and it feels kind of an overkill design if you ask methat is inherently subjective i would disagree and regard that as an appropriate solution as a mockito owner we can be selective on the apis we ship while keeping maintainability in mind in this case i dont think adding more convenience answer classes is worth the extra maintenance cost || > while we could simply ship this my concerns are mostly ""where do we stop?"" if we ship with 6 arguments we should also ship with 7 there does not seem to be a good reason not to@timvdlippe youre exactly right that it is really hard to set a limit here! thing is that this code has minimum complexity and is extremely easy to maintain (compiler!) i suggest we keep shipping new ""increments"" so long there are motivated customers that can send us a beautiful well described well tested prs such as this one :) || @mockitoguy thanks much appreciated :) i  the trivial checkstyle problem and rebased on top of latest `release-2x` from the main repo----(btw running checkstyle locally for me fails w/ java 11 it works on java 8 the strange thing is that the travis ci jobs run correctly even on the newer jdk versions so i wonder if theres some special conf going on there to make it work)```$ /gradlew checkstarting a gradle daemon (subsequent builds will be faster)parallel execution is an incubating feature> configure project :  building version 2252 (value loaded from versionproperties file)> task :checkstylemain failedfailure: build failed with an exception* what went wrong:execution failed for task :checkstylemain> unable to create a checker: configlocation {/home/per/git/3rd-party/mockito/config/checkstyle/checkstylexml} classpath {/home/per/git/3rd-party/mockito/build/classes/java/main:/home/per/git/3rd-party/mockito/build/resources/main:/home/per/gradle/caches/modules-2/files-21/netbytebuddy/byte-buddy/197/8fea78fea6449e1738b675cb155ce8422661e237/byte-buddy-197jar:/home/per/gradle/caches/modules-2/files-21/netbytebuddy/byte-buddy-agent/197/8e7d1b599f4943851ffea125fd9780e572727fc0/byte-buddy-agent-197jar:/home/per/gradle/caches/modules-2/files-21/orgobjenesis/objenesis/26/639033469776fd37c08358c6b92a4761feb2af4b/objenesis-26jar:/home/per/gradle/caches/modules-2/files-21/junit/junit/412/2973d150c0dc1fefe998f834810d68f278ea58ec/junit-412jar:/home/per/gradle/caches/modules-2/files-21/orghamcrest/hamcrest-core/13/42a25dc3219429f0e5d060061f71acb49bf010a0/hamcrest-core-13jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights* get more help at  failed in 5s21 actionable tasks: 1 executed 20 up-to-date``` || @timvdlippe  - thoughts?  ||  merging 1670  ";;;;1;1;add support for answer6 and voidanswer6;
1672;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;report initialization failures per test method;prior to this commit   defaultinternalrunner  threw an exception when;;1599.0;report initialization failures per test method;prior to this commit `defaultinternalrunner` threw an exception when`mockitoannotationsinitmocks()` failed from the overridden`withbefores` method instead it now returns a `statement` that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version 412 or 413-beta-2 is used insteadof reporting a class-level error junit will now report a failure foreach test method in such test classesrelated issue: junit-team/junit4#1599 -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 1672 ;master;;this should not be ;1;0;report initialization failures per test methodprior to this commit `defaultinternalrunner` threw an exception when`mockitoannotationsinitmocks()` failed from the overridden`withbefores` method instead it now returns a `statement` that isresponsible for initializing potential exceptions are then handled byjunit regardless whether version 412 or 413-beta-2 is used insteadof reporting a class-level error junit will now report a failure foreach test method in such test classesrelated issue: junit-team/junit4#1599;
1680;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix handling of generic void type for donothing();when the return type bound to a generic type resolved to void;;0;fix handling of generic void type for donothing();when the return type bound to a generic type resolved to void`donothing()` would still throw an exception update the `isvoid`implementation to also handle generic return types; merging 1680  < ;;;;1;1;fix handling of generic void type for donothing()when the return type bound to a generic type resolved to void`donothing()` would still throw an exception update the `isvoid`implementation to also handle generic return types;
1690;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;add errorprone mockitointernalusage checker;this checker will warn on any usage of a mockito internal symbol. since;;0;add errorprone mockitointernalusage checker;this checker will warn on any usage of a mockito internal symbol sincewe do not guarantee api stability on symbols in our internal packagesusers should not rely on them this checker can be used to enforce thatthey are unused;i will merge this after #1693 ||  merging 1690 ;;;;1;1;make mockitointernalusage service-loadable;
1693;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;make  mockitonotextensible  service-loadable;this way error prone can find the plugin when  mockito-errorprone  is added to the annotation processor classpath.;;1692.0;make `mockitonotextensible` service-loadable;this way error prone can find the plugin when `mockito-errorprone` is added to the annotation processor classpath1692;"nb: in this pr i chose to use [google autoservice]( as is customary for error prone plugins if preferred i can instead introduce an explicit ` meta-inf/services/comgoogleerrorpronebugpatternsbugchecker` file || @timvdlippe sure! will have a look at whats the simplest way to achieve this ||   @stephan202 were you able to take a look at this? i wanted to fix the same in #1690 || @timvdlippe i considered several approaches and concluded that the best way forward would be to see whether/how support for this kind of ""real""/""full"" test can be added to error prones `compilationtesthelper` and `bugcheckerrefactoringtesthelper` classes the idea would be that they get another static factory method which relies on service loading rather than an explicitly provided checker class this would also benefit other non-google ep users such as @ubers [nullaway]( then ""life happened"" so i didnt yet get to the point of actually trying that implementation note that even if it would work this pr would be blocked on those changes getting merged and released as part of error prone (but i assume you could help getting the changes reviewed by the ep team)so that leaves the question of timelines i can try (but wont commit) to spend some time on this later this week likely in the weekend alternatively if you agree with the suggested solution you could have a crack at an error prone pr and id be happy to be the first reviewerwrt whether this pr should be blocked on all that: i have manually tested the changes in this pr so functionally we could just merge this for now the approach taken here is [exactly]( what nullaway does (but ""just merging"" is not in the spirit of the mockito project so i totally undestand not wanting to go that route)  || lets merge it for now and hope we dont regress in the future || ";the new error prone plugin isnt service-loadable;the `mockitonotextensible` plugin added in #1669 is pretty cool however when `mockito-errorprone` is added to the annotation processor classpath error prone does not recognize/find the plugin this is because `mockitonotextensible` is not declared in a `meta-inf/services/comgoogleerrorpronebugpatternsbugchecker` file on the classpath;;1;0;make `mockitonotextensible` service-loadablethis way error prone can find the plugin when `mockito-errorprone` is added tothe annotation processor classpath1692;
1695;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;fix javadoc typo and use html list;the javadoc for  invocationonmock.getargument(int index  class<t> clazz)   had two typos:;;0;fix javadoc typo and use html list;"the javadoc for `invocationonmockgetargument(int index class<t> clazz)` had two typos:- ""to directly **pas** the result""- ""**clazz** to cast the argument to""additionally i changed the list to be a proper html list the current version just collapsed it into one text block:  might also be worth it adding the actual html paragraphs into the javadoc (for the other methods as well)";travis is failing on unrelated issues will take a look next week ||  merging 1695 ;;;;1;1;fix javadoc typo and use html list;
1698;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix clonesarguments for null and arrays;the clonesarguments class works for many cases  but fails when trying to clone an argument that is an array  or is null. this pr fixes those edge cases. this does not directly resolve any open issue  but it is related to #1153  #1469;;0;fix clonesarguments for null and arrays;the clonesarguments class works for many cases but fails when trying to clone an argument that is an array or is null this pr fixes those edge cases this does not directly resolve any open issue but it is related to #1153 #1469check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;@timvdlippe i believe i have the right branch this time please review ||  merging 1698 ;;;;1;1;added separate test;
1701;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;show multiple invocations on argumentsaredifferent;this is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .;;1542.0;show multiple invocations on argumentsaredifferent;this is the reconciliation of #1556 with the tests  and implementation rebased on `release/2x`1542;;when mock is called multiple times and verify fails the error message reports only the first invocation;"as a diligent devi want to verify that a mock will eventually get called with the specified parametersso that i can properly test my builder classscenarioi have a builder class exposing a with(string key string value) methodi created a test for testing that at a certain point the method gets called with foo valuefooid like to follow a test pattern where 1 test case has only 1 assertion```buildermockwith(barvaluebar)buildermockwith(foonotvaluefoo)verify(buildermock)with(foovaluefoo)```whats wrongverify reports only the first invocation in the test failed logs```arguments are different! wanted: buildermockwith(foovaluefoo)at actual invocation has different arguments:buildermockwith(barvaluebar)at ``` imo should be a list of invocation for that methods something like:```// actual invocations have different arguments:// buildermockwith(barvaluebar)// at // buildermockwith(foonotvaluefoo)// at ```notefor anybody else having this problem im rethrowing the exception raised with something like this:```    public static argumentsaredifferent createexceptionwithenhancedverifylogsfor(            object mockedobject            string invokedmethod            argumentsaredifferent ex    ) {        string newline  systemgetproperty(""lineseparator"")        string wanted  exgetexpected()        string actualtitle  messageformatformat(                ""interactions of {0}{1}():""                mockedobjectgetclass()getcanonicalname() invokedmethod        )        string actual  mockingdetails(mockedobject)getinvocations()stream()                filter(invocation -> invocationgetmethod()getname()equals(invokedmethod))                map(object::tostring)                collect(collectorsjoining( newline ))        string message  stringjoin(newline                exgetclass()getcanonicalname()                ""wanted: "" + wanted                actualtitle actual        )        argumentsaredifferent enhancedex  new argumentsaredifferent(message wanted actual)        enhancedexsetstacktrace(exgetstacktrace())        return enhancedex    }```";nice report thank you! do you want to take a stub at fixing it? i suspect that we need to tweak the reporting so that we print other interactions too we do something like that for regular verification failures (as opposed to verification failures due to mismatched arguments) || i can try and take a look at this || hi @mockitoguysorry my email is bleeding with spam and ive been caught up with some deadlinesit would be an interesting piece of work that id like to take but i dont have the time right now forits going into my todo list though || just started working on this today doesnt seem like too bad of a change i should have something to show later today or tomorrow ||;1;0;polish implementation and fix verifyprintsallinvocationsonerrortest;
1701;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;show multiple invocations on argumentsaredifferent;this is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .;;1556.0;show multiple invocations on argumentsaredifferent;this is the reconciliation of #1556 with the tests  and implementation rebased on `release/2x`1542;;fixes issue #1542: when verify fails show all method invocations;"this pr fixes issue #1542 (when mock is called multiple times and verify fails the error message reports only the first invocation) from the issue the idea is that showing all invocation would make it easier to see why something failedi have changed the behavior of the exception thrown and its message now contains all method invocations instead of only the first onenew format: ```argument(s) are different! wanted:examplebuilderwith(""key1"" ""wrongvalue"")-> at orgmockitousageverificationverifyprintsallinvocationsonerrortestshouldprintallinvocationsonerror(verifyprintsallinvocationsonerrortestjava:23)actual invocations have different arguments:examplebuilderwith(""key1"" ""val1"")-> at orgmockitousageverificationverifyprintsallinvocationsonerrortestshouldprintallinvocationsonerror(verifyprintsallinvocationsonerrortestjava:20)examplebuilderwith(""key2"" ""val2"")-> at orgmockitousageverificationverifyprintsallinvocationsonerrortestshouldprintallinvocationsonerror(verifyprintsallinvocationsonerrortestjava:21)```";working on fixing the failing tests ||  merging 1556 ;1;0;polish implementation and fix verifyprintsallinvocationsonerrortest;
1706;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix a typo;> hey;;0;fix a typo;thanks for the contribution this is awesome> as you may have read project members have somehow an opinionated view on what and how should be> mockito eg we dont want mockito to be a feature bloat> there may be a thorough review with feedback -> code change loop> > which branch : > - on mockito 2x make your pull request target `release/2x`> - on next mockito version make your pull request target `master`check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; ;;;;1;1;fix a typo;
1708;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1623 : rename toolittleactualinvocations;rename the exception toolittleactualinvocations to;;1623.0;1623 : rename toolittleactualinvocations;rename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new namecheck list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 1708  < ;consider renaming toolittleactualinvocations;"i agree with the commenter [here]( that the exception name `toolittleactualinvocations` is not idealthe correct english would be `toofewactualinvocations` (where ""few"" is the opposite of ""many"" - as used in `toomanyactualinvocations`)i appreciate this isnt the most critical issue ever raised but it would make this assertion failure more readable!as the existing class is non-final i imagine it could be changed without breaking existing client code via subclassing and deprecating the original please let me know if it would be helpful for me to pick this up (or instead if the change wouldnt be desirable or im otherwise missing something)thanks";i would welcome a pr for this    ||;1;0;1623 : rename toolittleactualinvocationsrename the exception toolittleactualinvocations totoofewactualinvocations as this is more correct english as thisexception is public api we rename by subclassing and deprecating theoriginal rename all tests and internal methods that were referencingthe old name by aligning with the new name;
1714;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1713: fix typo in mockito.java javadoc;i was confused and tried to look for  verifynomoreinvocations  when i came across this javadocs.;;1713.0;1713: fix typo in mockitojava javadoc;i was confused and tried to look for `verifynomoreinvocations` when i came across this javadocshopefully this prevents further confusion; ;typo in mockitojava javadoc;"the following javadocs refer to `verifynomoreinvocations` but link to `verifynomoreinteractions````    /**     * creates {@link orgmockitoinorder} object that allows verifying mocks in order     *     * <pre class""code""><code class""java"">     *   inorder inorder  inorder(firstmock secondmock)     *     *   inorderverify(firstmock)add(""was called first"")     *   inorderverify(secondmock)add(""was called second"")     * </code></pre>     *     * verification in order is flexible - <b>you dont have to verify all interactions</b> one-by-one     * but only those that you are interested in testing in order     * <p>     * also you can create inorder object passing only mocks that are relevant for in-order verification     * <p>     * <code>inorder</code> verification is greedy but you will hardly ever notice it     * if you want to find out more read     * <a href"" wiki page</a>     * <p>     * as of mockito 184 you can verifynomoreinvocations() in order-sensitive way read more: {@link inorder#verifynomoreinteractions()}     * <p>     * see examples in javadoc for {@link mockito} class     *     * @param mocks to be verified in order     *     * @return inorder object to be used to verify in order     */    @checkreturnvalue    public static inorder inorder(object mocks) {        return mockito_coreinorder(mocks)    }``````    /**     * allows checking if given method was the only one invoked eg:     * <pre class""code""><code class""java"">     *   verify(mock only())somemethod()     *   //above is a shorthand for following 2 lines of code:     *   verify(mock)somemethod()     *   verifynomoreinvocations(mock)     * </code></pre>     *     * <p>     * see also {@link mockito#verifynomoreinteractions(object)}     * <p>     * see examples in javadoc for {@link mockito} class     *     * @return verification mode     */    @checkreturnvalue    public static verificationmode only() {        return verificationmodefactoryonly()    }```javadoc should be corrected to `verifynomoreinteractions`";;1;0;1713: fix typo in mockitojava javadoc;
1715;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;298: replaces objenesis references from stubbing classes with plugin equivalents.;this enables the ios mockito plugin;;298.0;298: replaces objenesis references from stubbing classes with plugin equivalents;this enables the ios mockito plugin( to upgrade to v2; merging 1715  < ;objenesishelper references in mockmaker-independent code;a couple of references to orgobjenesis classes in code that is otherwise independent of bytecode-based mocks:src/main/java/org/mockito/internal/stubbing/answers/clonesargumentsjavasrc/main/java/org/mockito/internal/stubbing/answers/throwsexceptionclassjavaboth of these classes use objenesishelpernewinstance(class) which differs from classnewinstance() in that no constructors are called is that necessary for these classes? if not then updating to classnewinstance() makes mockito fully platform-independent (at least for platforms that define a mockmaker) if it is necessary can this call be moved into mockmaker?im happy to make the changes once the team decides on the best approach;im with youthe interactions with objenesis should be better isolated mockmaker might be a reasonable idea technically creating instances of things is not mockmakers responsibility so perhaps there is a better way? a different extension point? check out orgmockitoplugins package || it looks like you already did most of the work! the orgmockitointernalcreationinstance package defines instantiator with the correct method so it looks like all thats to be done to make this cross-platform is to move instantiator to orgmockitoplugins and update instantiatorprovider to check for a plugin before assigning a objenesisinstantiator to instantiatorproviderinstanceif youre comfortable with that approach ill make the changes and submit a pull request || any updates on this? ||  in [current source]( mockitos travisci continuous build successfully built the change but for some reason since late last june ci builds cant be posted to [mockitos releases page]( i guess someone from the project will need to hand-roll the next release or fix the projects travis ci configuration || thanks @tomball ! || new objenesishelper references were added in release/2x branch to org/mockito/internal/stubbing/basestubbingjava and org/mockito/internal/stubbing/stubberimpljava ||;1;0;added unit test to verify core classes do not depend on bytecode libraries;
1718;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;1717 : configure the methodvisitor for java 11 compatibility;i m looking into adding a unit test  if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11.;;1717.0;1717 : configure the methodvisitor for java 11 compatibility;im looking into adding a unit test if i can find how to use byte buddy to generate a class with a conditional dynamic instruction when running with java 11;this should 1717 ||  merging 1718 ;incompatibility between the inline mocks and jacoco 084;# versionsmockito 2270jacoco 084# problemjacoco 084 introduced the use of the conditional dynamic instruction when running with java 11+ which triggers an exception in the [`methodvisitor`]( used to strip the parameters because its not configured for the correct asm api version:    mockito cannot mock this class: class comekinomockitob        if youre not sure why youre getting this error please report to the mailing list            java               : 11    jvm vendor name    : adoptopenjdk    jvm vendor version : 1103+7    jvm name           : openjdk 64-bit server vm    jvm version        : 1103+7    jvm info           : mixed mode    os name            : mac os x    os version         : 10145            you are seeing this disclaimer because mockito is configured to create inlined mocks    you can learn about inline mocks and their limitations under item #39 of the mockito class javadoc        underlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class comekinomockitob]    orgmockitoexceptionsbasemockitoexception:     mockito cannot mock this class: class comekinomockitob        if youre not sure why youre getting this error please report to the mailing list            java               : 11    jvm vendor name    : adoptopenjdk    jvm vendor version : 1103+7    jvm name           : openjdk 64-bit server vm    jvm version        : 1103+7    jvm info           : mixed mode    os name            : mac os x    os version         : 10145            you are seeing this disclaimer because mockito is configured to create inlined mocks    you can learn about inline mocks and their limitations under item #39 of the mockito class javadoc        underlying exception : orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class comekinomockitob]    	at comekinomockitoatestshould_call_b(atestjava:10)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    	at javabase/javalangreflectmethodinvoke(methodjava:566)    	at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:628)    	at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:117)    	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invoketestmethod$7(testmethodtestdescriptorjava:184)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvoketestmethod(testmethodtestdescriptorjava:180)    	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:127)    	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:68)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:135)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)    	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)    	at javabase/javautilarraylistforeach(arraylistjava:1540)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)    	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)    	at javabase/javautilarraylistforeach(arraylistjava:1540)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)    	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)    	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)    	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)    	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)    	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservicesubmit(samethreadhierarchicaltestexecutorservicejava:32)    	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:57)    	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:51)    	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:220)    	at orgjunitplatformlaunchercoredefaultlauncherlambda$execute$6(defaultlauncherjava:188)    	at orgjunitplatformlaunchercoredefaultlauncherwithinterceptedstreams(defaultlauncherjava:202)    	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:181)    	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:128)    	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessor$collectalltestclassesexecutorprocessalltestclasses(junitplatformtestclassprocessorjava:102)    	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessor$collectalltestclassesexecutoraccess$000(junitplatformtestclassprocessorjava:82)    	at orggradleapiinternaltaskstestingjunitplatformjunitplatformtestclassprocessorstop(junitplatformtestclassprocessorjava:78)    	at orggradleapiinternaltaskstestingsuitetestclassprocessorstop(suitetestclassprocessorjava:61)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    	at javabase/javalangreflectmethodinvoke(methodjava:566)    	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    	at orggradleinternaldispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)    	at orggradleinternaldispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)    	at comsunproxy$proxy5stop(unknown source)    	at orggradleapiinternaltaskstestingworkertestworkerstop(testworkerjava:132)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)    	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    	at javabase/javalangreflectmethodinvoke(methodjava:566)    	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    	at orggradleinternaldispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:175)    	at orggradleinternalremoteinternalhubmessagehubbackedobjectconnection$dispatchwrapperdispatch(messagehubbackedobjectconnectionjava:157)    	at orggradleinternalremoteinternalhubmessagehub$handlerrun(messagehubjava:404)    	at orggradleinternalconcurrentexecutorpolicy$catchandrecordfailuresonexecute(executorpolicyjava:63)    	at orggradleinternalconcurrentmanagedexecutorimpl$1run(managedexecutorimpljava:46)    	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1128)    	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:628)    	at orggradleinternalconcurrentthreadfactoryimpl$managedthreadrunnablerun(threadfactoryimpljava:55)    	at javabase/javalangthreadrun(threadjava:834)    caused by: orgmockitoexceptionsbasemockitoexception: could not modify all classes [class javalangobject class comekinomockitob]    	at netbytebuddytypecachefindorinsert(typecachejava:152)    	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:365)    	at netbytebuddytypecachefindorinsert(typecachejava:174)    	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:376)    	 77 more    caused by: javalangillegalstateexception:     byte buddy could not instrument all classes within the mocks type hierarchy        this problem should never occur for javac-compiled classes this problem has been observed for classes that are:     - compiled by older versions of scalac     - classes that are part of the android distribution    	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:177)    	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratormockclass(inlinebytecodegeneratorjava:153)    	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:37)    	at orgmockitointernalcreationbytebuddytypecachingbytecodegenerator$1call(typecachingbytecodegeneratorjava:34)    	at netbytebuddytypecachefindorinsert(typecachejava:152)    	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:365)    	at netbytebuddytypecachefindorinsert(typecachejava:174)    	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:376)    	at orgmockitointernalcreationbytebuddytypecachingbytecodegeneratormockclass(typecachingbytecodegeneratorjava:32)    	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemocktype(inlinebytebuddymockmakerjava:197)    	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatemock(inlinebytebuddymockmakerjava:178)    	at orgmockitointernalutilmockutilcreatemock(mockutiljava:35)    	at orgmockitointernalmockitocoremock(mockitocorejava:62)    	at orgmockitomockitomock(mockitojava:1907)    	at orgmockitomockitomock(mockitojava:1816)    	 77 more    caused by: javalangunsupportedoperationexception: this feature requires asm7    	at netbytebuddyjarasmmethodvisitorvisitldcinsn(methodvisitorjava:542)    	at netbytebuddyjarasmclassreaderreadcode(classreaderjava:2181)    	at netbytebuddyjarasmclassreaderreadmethod(classreaderjava:1275)    	at netbytebuddyjarasmclassreaderaccept(classreaderjava:679)    	at netbytebuddyjarasmclassreaderaccept(classreaderjava:391)    	at netbytebuddydynamicscaffoldtypewriter$default$forinliningcreate(typewriterjava:3393)    	at netbytebuddydynamicscaffoldtypewriter$defaultmake(typewriterjava:1930)    	at netbytebuddydynamicscaffoldinlineredefinitiondynamictypebuildermake(redefinitiondynamictypebuilderjava:217)    	at netbytebuddydynamicscaffoldinlineabstractinliningdynamictypebuildermake(abstractinliningdynamictypebuilderjava:120)    	at netbytebuddydynamicdynamictype$builder$abstractbasemake(dynamictypejava:3396)    	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortransform(inlinebytecodegeneratorjava:254)    	at javainstrument/javalanginstrumentclassfiletransformertransform(classfiletransformerjava:246)    	at javainstrument/suninstrumenttransformermanagertransform(transformermanagerjava:188)    	at javainstrument/suninstrumentinstrumentationimpltransform(instrumentationimpljava:563)    	at javainstrument/suninstrumentinstrumentationimplretransformclasses0(native method)    	at javainstrument/suninstrumentinstrumentationimplretransformclasses(instrumentationimpljava:167)    	at orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(inlinebytecodegeneratorjava:174)    	 91 more# exampleive pushed an [example]( demonstrating the problem# fixi believe the fix is simply to configure the visitor with the asm 7 api version since that _is_ the version used by mockito;for reference the change was introduced in jacoco with jacoco/jacoco#845 ||;1;0;1717: configure the methodvisitor for java 11+ compatibilityby using byte buddys supported asm api version the visitor will always becompatible with the currently supported bytecode including when using theexperimental feature;
1720;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;add missing  be  in javadoc;;;0;add missing be in javadoc;;;;;;1;1;add missing be in javadoc;
1723;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;change implementation of exceptionfactory to explicitly test for dependent classes;the original implementation of conditional opentest4j support (#1667) relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time. it seems that this behaviour is not always exactly replicated in all environments - for example  in #1716  where mockito was being used in an instrumentation test that was being run on an android emulator.;;1716.0;change implementation of exceptionfactory to explicitly test for dependent classes;the original implementation of conditional opentest4j support (#1667) relied on some implicit behaviour of the java classloader to generate and catch the exception at the right time it seems that this behaviour is not always exactly replicated in all environments - for example in #1716 where mockito was being used in an instrumentation test that was being run on an android emulatorthe new implementation is a bit more direct in how it tests for the dependent classes the existing test cases still pass and @matejdro confirmed that this  his problem1716; merging 1723  < ;mockito-android 226+ tries to use missing opentest4j exceptions;it appears that mockito `226+` on android tries to use exceptions from opentest4j even when opentest4j is not used resulting in tests crashing due to exceptions classes not being foundsteps to reproduce:1 open [mockitoandroiddemo]( project in android studio2 run `exampleinstrumentedtestjava` test on android device/emulator3 test will crash with `javalangnoclassdeffounderror: failed resolution of: lorg/opentest4j/assertionfailederror`lowering version to `2250` fixes the issue;@kriegfrj do you mind taking a look at this? || i cant promise to look at it swiftly ive never run an android emulator before itll take me a while to get set upin the meantime @matejdro  if you could post the stack trace of the error that would help i might be able to get a clue without seeing up the whole environment || here you go:[stacktracetxt]( || thankslooks like youve got some funky classloader in there doing something odd ill try and look more closely later possibly later in the weekend || ive had a quick look and i havent been able to get the emulator running easily to reproduce it myself however having had a closer look at the stack trace i suspect that it is some kind of feature in the test harness (perhaps in androidjunitrunner) that is supposed to detect and warn when your code tries to load classes that it cant find on its classpath attempting to load the opentest4j class is perfectly normal behaviour for this version of mockito though and the attempt is surrounded by a <tt>catch()</tt> which ordinarily would catch any error thrownas a workaround you could try putting opentest4j on your classpath you might lose the visual diff in case of failure though || here is my guess on what happens:exceptions catching for missing classes only [surrounds factory creation not the actual exception creation]( it is possible that desktop jvm verifies all methods on class creation but androids runtime does not and thus no exception is thrown there instead androids runtime throws missing class exception when `create()` method is executed for the first time which does not have`try/catch` around it || i thought about your suggestion but i dont think it fits with the stack trace that you provided in the stack trace its clear that the line its complaining about is line 24 in the static initializer for `exceptionfactory` when the factory implementation is actually created:at orgmockitointernaljunitexceptionfactory<clinit>(exceptionfactoryjava:24)i expect a `classnotfounderror` to get thrown here when opentest4j is not on the class path what is not expected is that this isnt caught by the surrounding `catch(throwable)` statement which is why i think the android test framework is doing something funkyif what youre suggesting were true id expect line 27 to appear at the top of the stack trace but it doesnt appear at all according to the stack trace it is failing before `create()` is even called this scenario would also be contrary to the jvm spec (which from memory specifies that all the classs linkages should be resolved when the class is loaded and not when a method is executed)one way to test this would be to package up a junit test and deploy it as an apk into the emulator and run it directly rather than as part of an instrumentation test if you want to give that a try and let me know how you go we can analyse the result || ok @matejdro  i still havent been able to get the android studio stuff working but based on the above educated guess ive made a change that might do the trick you can find this change under branch `1716-opentest4j-under-android` in my fork of mockito ( if you could download build and install this and give it a try and let me know if it fixes your problem that would be much appreciatedif it does fix your problem ill create a pr from this branch so that @timvdlippe  or @mockitoguy can merge it if not i guess ill go back to the drawing board || sorry for the delay any tips on how to build `mockito-android`? running `gradlew build` only procudes `mockito-core` and i cannot find a way to switch it to androidps: there appear to be checkstyle errors in the branch (i had to disable checkstyle to even get core to build) || never mind figured it out (android project is in the `subprojects` folder) it appears that using your branch fixes the issue i no longer get the crash || thanks for verifying @matejdro i have created a pr for this issue now (#1723)thank you so much for your help - i was dreading having to go through the process of getting the android emulator working! im sure it would have been fun to try but (like most people) im a bit time poor || i am also having this issue i was running v300 but switching back to 2250  it  || > i am also having this issue i was running v300 but switching back to 2250 fixed itsorry @johnmahlon the fix for this was supposed to get merged into 30 but i dropped the ball hopefully it will get merged soonin the meantime as a workaround if you need mockito >2250 then you should be able to run it with any version of mockito if you just put `orgopentest4j` on your runtime classpath || @kriegfrj no problem our app isn’t production yet so using 225 is definitely fine for now  ||;1;0;change implementation of exceptionfactory to explicitly test for the presence of dependent classes rather thandepend on the implicit classloading behaviour this is necessary as android classloading behaviour is slightly different 1716changed to use lambdas now that codebase is on java 18;
1733;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;verifynointeractions guarantees no interactions with mock;with #995 i provided a fix to #977 and #989;;977.0;verifynointeractions guarantees no interactions with mock;with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx`; merging 1733     ||;misleading documentation of verifyzerointeractions;"## problemthe current behavior of verifyzerointeractions can be misleading see the #989in current version of mockito (2x) we can improve the javadoc for verifyzerointeractions to clearly describe how it works (and mention the behavior of strict stubs too)please contribute!## original reportoriginal issue reported by @ffissore:according to the [docs]( `verifyzerointeractions` is like `verify(mock never())method()` when the mock has only one methodthe tests below should both raise an exception instead `testverifyzerointeractions` raises none and fails```javapackage testimport orgjunitbeforeimport orgjunitruleimport orgjunittestimport orgmockitomockimport orgmockitomockitoannotationsimport orgmockitoexceptionsverificationneverwantedbutinvokedimport orgmockitoexceptionsverificationnointeractionswantedimport orgmockitojunitmockitojunitimport orgmockitojunitmockitoruleimport orgmockitoqualitystrictnessimport static orgjunitassertassertequalsimport static orgmockitomockito*public class mockitotest {   private static class collaborator {      public string dostuff(int number) {         throw new runtimeexception()      }   }   private static class container {      private final collaborator collaborator      public container(collaborator collaborator) {         thiscollaborator  collaborator      }      public string dostuff(int number) {         return collaboratordostuff(number)      }   }   @rule   public mockitorule rule  mockitojunitrule()strictness(strictnessstrict_stubs)   @mock   private collaborator collaborator   @before   public void setup() throws exception {      mockitoannotationsinitmocks(this)   }   // passes   @test(expected  neverwantedbutinvokedclass)   public void testverifynever() throws exception {      container container  new container(collaborator)      when(collaboratordostuff(42))thenreturn(""yeah"")      string output  containerdostuff(42)      assertequals(""yeah"" output)      verify(collaborator never())dostuff(42)   }   // fails   @test(expected  nointeractionswantedclass)   public void testverifyzerointeractions() throws exception {      container container  new container(collaborator)      when(collaboratordostuff(42))thenreturn(""yeah"")      string output  containerdostuff(42)      assertequals(""yeah"" output)      verifyzerointeractions(collaborator)   }}```";"forgot to say: im using version 2713 || looking into it || thank you for reporting and your patience waiting for the reply!!!its a really good report - i was able to reproduce the problem easily also thanks a lot for using strict stubbing - im really happy to see it in use!at the moment ""verifyzerointeractions"" is an alias to ""verifynomoreinteractions"" intended to be used to improve readability of tests let me illustrate it on a couple of examples:example 1 - verifynomoreinteractions```javamockfoo()verify(mock)foo()verifynomoreinteractions(mock) //pretty clear i think```example 2 - verifyzerointeractions```javamockfoo()verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions//and we already have verified the only method invoked on the mock```example 3 - verifyzerointeractions with regular stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions```example 4 - verifyzerointeractions with new strict stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verifyzerointeractions(mock)//above passes because with strict stubbing//stubbed method are implicitly verified when they are ""used""//this is one of key features of strict stubbing (dry dont repeat yourself)```were happy to listen to suggestions about above and the api i think that better documentation is needed for ""verifyzerointeractions"" too || thank you for the clarification then i guess the problem is with the [javadoc]( which states ""verifies that no interactions happened on given mocks"" this made sense to me: a class x may have a number of mocked collaborators and i want to be sure that some of them have not taken part when i called xmethod()i ended up writing my version```javapublic static void verifyzerointeractions(object objects) {  for (int i  0 i < objectslength i++) {    assertequals(""expected 0 interactions with object at index "" + i + "" ("" + objects[i]getclass() + "")"" 0 mockitomockingdetails(objects[i])getinvocations()size())  }}```also thanks for the hint about implicit verification when in strict mode: i didnt get it and it will allow me to delete some tens of lines of code || interesting idea!lets keep this ticket to improve the documentation (want to help out? submit a pr :) i created ticket for discussing change of verifyzerointeractions: #989 || ";1;0;introducing verifynointeractions that checks if the number ofinvocations on given mock(s) is zero failing otherwise;
1733;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;verifynointeractions guarantees no interactions with mock;with #995 i provided a fix to #977 and #989;;989.0;verifynointeractions guarantees no interactions with mock;with #995 i provided a fix to #977 and #989however that pr targeted `master` which eventually became `old-3x` and its code didnt make it into `release/3x`#977 and #989 should be reopenedi have back-ported that pr to target `release/3x``verifyzerointeractions` is marked as `@deprecated` and a new `verifynointeractions` is added there are no breaking changes afaik so this code is backwards compatiblesince i dont know if/when this code will ship javadocs contain a placeholder `since 3xx`; merging 1733     ||;misleading behavior of mockitoverifyzerointeractions();"## problemmockitoverifyzerointeractions() actually does not do what it advertises the purpose of this ticket is to discuss whether to change the behavior of this method in mockito 3## detailsbased on user feedback at #977 from @ffissore ""verifyzerointeractions"" api can be misleading when you read that method in test code you expect zero interactions with specified mocks however ""verifyzerointeractions"" is only an alias to ""verifynomoreinteractions"" and in fact it **does not** guarantee that there were zero interactions lets use examples to illustrate the problem## feedback neededplease comment / vote / state your opinion about changing the behavior of ""verifyzerointeractions"" so that it actually ensures that there were **zero** interactions with the mock (regardless if previously verified or not)## examplesbelow examples illustrate current behavior of mockito 2x in case you are puzzled what this ticket is aboutexample 1 - verifynomoreinteractions```javamockfoo()verify(mock)foo()verifynomoreinteractions(mock) //pretty clear i think```example 2 - verifyzerointeractions```javamockfoo()verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions//and we already have verified the only method invoked on the mock```example 3 - verifyzerointeractions with regular stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verify(mock)foo()verifyzerointeractions(mock)//above passes because verifyzerointeractions  verifynomoreinteractions```example 4 - verifyzerointeractions with new strict stubbing```javagiven(mockfoo())willreturn(""x"")assertequals(""x"" mockfoo())verifyzerointeractions(mock)//above passes because with strict stubbing//stubbed method are implicitly verified when they are ""used""//this is one of key features of strict stubbing (dry dont repeat yourself)```";this was  in #989 ||;1;0;introducing verifynointeractions that checks if the number ofinvocations on given mock(s) is zero failing otherwise;
1739;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;consistent punctuation in hints list for unfinishedstubbingexception;previously the numbered list had two periods and a colon after the three numbers.;;0;consistent punctuation in hints list for unfinishedstubbingexception;previously the numbered list had two periods and a colon after the three numbersafter it consistently uses dots like other suggestions ie missingmethodinvocation; merging 1739 ;;;;1;1;consistent punctuation in hints list for unfinishedstubbingexception;
1745;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1743: clarify default answer in 3.0.0;api changes postponed to 4.0.0. default answer has not been changed in 3.0.0.;;1743.0;1743: clarify default answer in 300;api changes postponed to 400 default answer has not been changed in 300;oh travis is deeply unhappy i would need to investigate that 😢  || please rebase this pr to fix the travis issue ||  ;clarify javadoc of returns_smart_nulls default answer in mockito 300?;[javadoc for mockitoreturns_smart_nulls]( in version 300 still says:> returnssmartnulls will be probably the default return values strategy in mockito 300as mockito 300 has been released this could now be clarified i see #971 is still open so it looks like the default answer has not been changed?;yes that should be updated to 400 now as we decided not to make any api changes in 300 ||;1;0;1743: clarify default answer in 300api changes postponed to 400;
1760;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;minor bug fixes;1747: removed typo;;1513.0;minor bug fixes;1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748; merging 1760 ` ;mockito docs / javadocs - monospaced font all over the place after point 44;the brilliant mockito javadocs are less brilliant than usual because after[44 deprecated orgmockitopluginsinstantiatorprovider as it was leaking internal api it was replaced by orgmockitopluginsinstantiatorprovider2 (since 2154)]( everything is written with monospaced font which reduces readability apparently some closing tag is missing;this probably broke in #1439 with the dangling `<p>` on line 2540 do you mind opening a pr to fix it? ||;1;0;1747: removed typofixes #1513: added missing tag to fix javadoc;
1760;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;minor bug fixes;1747: removed typo;;1747.0;minor bug fixes;1747: removed typofixes #1513: added missing tag to fix javadocsupersedes and closes #1748; merging 1760 ` ;typo in error message;" does not not support modification of given type""should be ""vm does not support modification of given type""";feel free to open a pr with a fix ||;1;0;1747: removed typofixes #1513: added missing tag to fix javadoc;
1762;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;1758: method generictypeextractor#findgenericinterface always …;…returns first interface;;1758.0;1758: method generictypeextractor#findgenericinterface always …;…returns first interface; merging 1762 ` ;method generictypeextractor#findgenericinterface always returns first  interface;the method `findgenericinterface` of `generictypeextractor` ( < always returns the first generic interfacethe relevant line seems to be:< instead of `return sourceclassgetgenericinterfaces()[0]` it should be `return sourceclassgetgenericinterfaces()[i]`example:```javainterface myinterface extends runnable consumer<double> {}type result  generictypeextractorfindgenericinterface(myinterfaceclass consumerclass)systemoutprintln(result)// output: interface javalangrunnable// expected output: javautilfunctionconsumer<javalangdouble>```mockito version: 2x 3xjava version: jdk8u202-b08;;1;0;1758: method generictypeextractor#findgenericinterface always returns first interface;
1773;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1769: clarify default strict stubbing behaviour in 3.0.0;similar to  as requested by @timvdlippe in https://github.com/mockito/mockito/issues/1769;;1769.0;1769: clarify default strict stubbing behaviour in 300;similar to  as requested by @timvdlippe in  #1769; ;are strict stubs really the default in v3?;"the strictnessstrict_stubs javadoc reads: ""planned as default for mockito v3""im using ""orgmockito:mockito-core:300"" and strict stubs do not seem to be the default behaviour are they actually going to be the default in any release soon?";it is not mockito 3 only requires java 8 as minimum no other api changes were made could you submit a pr (similar to #1745) thats updates the doc? || what would be the easiest way of enabling it in junit 5 given that i’m already using another junit extension and lifecycle per class?`@extendwith(vertxextensionclass)``@testinstance(testinstancelifecycleper_class)` || @timvdlippe i just sent the pr any chance you could help me with the previous question? also is there an eta for v4? thanks very much || the junit 5 extension should already use strict stubs by default does it not? || it does in fact seem to use strict stubs but i just double-checked and it does not throw unnecessarystubbingexception when it should potentialstubbingproblem does work perfectly though ||;1;0;1769: clarify default strict stubbing behaviour in 300;
1781;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1780: close file handle to avoid a file-handle-leak;fix a small file-handle-leak which pops up when running tests with [file-leak-detector](https://file-leak-detector.kohsuke.org/);;178.0;1780: close file handle to avoid a file-handle-leak;fix a small file-handle-leak which pops up when running tests with [file-leak-detector]( 1780;good catch this always gets me as the class name is *file ||;"mockito matchers used in ""when"" impact the ""there was one""";"if you use an `any` matcher in a `when` then if you later try and verify another method was called on the same mock it passes regardless of whether the arguments matchedexample when it (wrongly) passes as the method ""shouldbecalled"" is called but not with the given argument:``` scalaval mockedservice  mock[mockedservice]when(mockedservicemymethod(any)thenreturn(""response"")servicebeingtestedmethodbeingtestedthere was one(mockedservice)shouldbecalled(""incorrect argument"")```example when it fails as it should:``` scalaval mockedservice  mock[mockedservice]when(mockedservicemymethod(""actualargumentbeingused"")thenreturn(""response)servicebeingtestedmethodbeingtestedthere was one(mockedservice)shouldbecalled(""incorrect argument"")```";hi @timgent im not reproducing could you write a junit test reproducing the faced issue with the latest version of mockito and in java please || hiill close this issue as theres no feedback and no reproducible errors ||;1;0;1780: close file handle to avoid a file-handle-leak;
1781;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1780: close file handle to avoid a file-handle-leak;fix a small file-handle-leak which pops up when running tests with [file-leak-detector](https://file-leak-detector.kohsuke.org/);;1780.0;1780: close file handle to avoid a file-handle-leak;fix a small file-handle-leak which pops up when running tests with [file-leak-detector]( 1780;good catch this always gets me as the class name is *file ||;file-handle leak in inlinebytebuddymockmaker;using [file-leak-detector]( when running unit-tests using mockito-300 we see a file-handle-leak being reported in `inlinebytebuddymockmaker<clinit>` which can easily be  by closing the jarfile after usage properlyill send a pr shortly```#2 \mockitoboot2606807734337514236jar by thread:main on tue sep 17 15 43 cest 2019	at javautilzipzipfile<init>(zipfilejava:156)	at javautiljarjarfile<init>(jarfilejava:166)	at javautiljarjarfile<init>(jarfilejava:130)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmaker<clinit>(inlinebytebuddymockmakerjava:138)	at sunreflectnativeconstructoraccessorimplnewinstance0(native method)	at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:62)	at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)	at javalangreflectconstructornewinstance(constructorjava:423)```;;1;0;1780: close file handle to avoid a file-handle-leak;
1783;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;cleaned up state after stubbing misuse exception;1655;;0;cleaned up state after stubbing misuse exception;1655; merging 1783  < ;;;;1;1;cleaned up state after stubbing misuse exception1655;
1787;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1786 : clarify differences between  timeout  and  after;tries to improve the javadoc for  timeout  to differentiate it from  after  directly in the first sentence.;;1786.0;1786 : clarify differences between timeout and after;tries to improve the javadoc for `timeout` to differentiate it from `after` directly in the first sentence;"  the root cause can be  by pr #936 ""unification of timeout() and after() api"" || ";difference between timeout and after not immediately clear;the first few lines of the javadoc for both methods do not exactly specify their difference from `timeout` you have to jump to `after` where at the end of the javadoc the difference is explainedi think this can be improved the first sentence in `timeout` could be more specific to highlight the difference directly;;1;0;1786 : make differences between timeout and after more clear in javadoc;
1788;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;upgraded junit jupiter 5.1.1 -> 5.4.2;we need higher version of junit jupiter to reproduce and 1630;;1630.0;upgraded junit jupiter 511 -> 542;we need higher version of junit jupiter to reproduce and 1630added a test to enhance coverage; merging 1788 ! ||;mockito junit jupiter extension does not correctly support parallel test execution;"sorry for not being able to provide the required information but we just noticed that the mockitoextension (mockito-junit-jupiter 2245) leads to spurious test failures (eg due to calls to mocks not being recorded) when using ""junitjupiterexecutionparallelenabledtrue"" with surefire prior we used our much simpler mockitoextension which works fine in the same situation:```javapublic class mockitoextension implements extension testinstancepostprocessor aftereachcallback {   @override   public void postprocesstestinstance(object testinstance extensioncontext context) {      mockitoannotationsinitmocks(testinstance)   }   @override   public void aftereach(extensioncontext extensioncontext) throws exception {      mockitovalidatemockitousage()   }}```";"hey! can you take a look at our faq wiki we documented how mockito supports parallel execution || i took a look at the wiki but found just a very short section about parallel testing in the faq section i issued the bug because the parallel execution of whole test cases with junit 5 seems to be broken i do not have any complex tests which use mocks in combination with multithreadinganyway this seems to be a problem of the mockitoextension not mockito itself because with our simple junit 5 extension for mockito parallel execution of test cases which use mocks with junit 5 works fine || i got a similar issue i have got a workaround if only a few of your ""mockito""-test-classes in you testsuite are failing when running junit jupiter in parallel you can execute those problematic tests using ""same_thread"" for avoiding mockito concurrency issues```import orgjunitjupiterapiextensionextendwithimport orgjunitjupiterapiparallelexecutionimport orgjunitjupiterapiparallelexecutionmodeimport orgmockitojunitjupitermockitoextension@extendwith(mockitoextensionclass)@execution(executionmodesame_thread) // <--- workaroundclass sometest {``` || to be a bit more specific wantedbutnotinvoked exceptions are thrown by verification calls failing because of not recorded invocations: ""actually there were zero interactions with this mock"" || the main difference between the current and the simple implementation above is that the simple one inits the mocks in postprocesstestinstance() whereas the current one inits them in beforeeach() any ideas why that might be a problem? i tried the failing tests with a modified version of the current mockitoextension which was just altered to init the mocks in postprocesstestinstance() and disabled the init in beforeeach() and the tests do no longer fail so this seems to be the source of the problems || hey guys can you provide us a test that reproduces the problem?  @mockitoguy here you go:  am not sure if i reduced the example as much as possible but well the project is not large || thank you! the sample project looks great!i looked at the code but i havent had time to debug it how does the junit5 parallel execution work? are we sharing the test instance (and thus sharing mocks suts?) || you are welcome :-) i dont know details about junits parallelization || > how does the junit5 parallel execution work? are we sharing the test instance (and thus sharing mocks suts?)by default not and the user must be very explicit to enable sharing of the same test class instance with parallel execution enabled ie even if parallel execution mode is enabled by default and a test class is annotated with `lifecycleper_class` its tests will still be executed sequentially _unless_ it is also annotated with `@execution(concurrent)`:  also bumped into this issue in our codebase with some tests using `mockitoextension` failing in parallel mode and some working fine could not spot anything particularly special about the failing ones || i can confirm that the problem exists i also have tests using mockitoextension and they fail in a non-deterministic way randomly only if junit5 parralelization is used || scenario:1 junit 5 creates a single `classextensioncontext `for a multithreaded test but each thread becomes an instance of the test class2 each thread will come into `postprocesstestinstance `where they put their test instance in the same `classextensioncontextgetstore(mockito)` map with the same key (`test_instance`)3 each thread then will get into `beforeeach` they get a thread unique `methodextensioncontext` but each of them contain the same instance of `classextensioncontext` then they fetch the the last updated `test_instance `from the parent `classextensioncontext `inside the `collectparenttestinstances `method each thread gets quasi a random test instance depending on the fact which thread was before inside the `postprocesstestinstance `method then they prepare their broken session inside the store of the current `methodextensioncontext `with a random test instance includedthat is the explanation i am thinking about how to solve thisit is not 100% clear to me why the parent context test instance is included i will check how this scenario looks like in a singlethreaded environment || this is really painful to debug but im making progress what i found out is that ""collectparenttestinstances()"" is non-deterministic:```thread[16] collectparenttestinstances() - returns: [orgmockitoanothertest@2bf588f6]thread[13] collectparenttestinstances() - returns: [orgmockitoanothertest@240da1f5 orgmockitoanothertest@6646267a]thread[17] collectparenttestinstances() - returns: [orgmockitoanothertest@6646267a]thread[14] collectparenttestinstances() - returns: [orgmockitoanothertest@f9b9d48]```notice that anothertest@6646267a is processed twice effectively initmocks() is called twice for that test instance clearing up the invocationsdo you have an idea how to fix collectparenttestinstances()? || perhaps we drop the collectparenttestinstances() complexity and just keep the test instances in static threadlocal object in the extension postprocesstestinstance() feeds the thread local state beforeeach() consumes it i dont know enough about the ""context store"" api though || i have a plan how to fix it first we need to upgrade junit-jupiter (#1788) || @mockitoguy i am not sure why you have closed the issue in the attached commit i cannot see the fix for the problemcontext store api seems to be pretty simple to me it is just a map in the context to store some information the real question is what is this kind of context hierarchy used for in junit 5 and how it behaves in case of nested tests or multithreaded tests or even in multithreaded nested tests i guess it could have some interesting beahaviour in case of parameterized (dynamic) tests probably it would be a good idea simply to ask the junit developers about this issue maybe they could provide some valuable feedback || pr #1789 fixes the problem this ticket got closed by accident thanks for looking into it! || looking forward to the next release!i would like to confirm the bug is gone but i dont know how to do it in  someone add a pr to  using mockito 3012 (at least)?  || release have been already published see  || @mockitoguy when will this fix be released to maven central? || i will publish a release today || i updated  - seems to work without problems using mockito v310 thanks a lot!i will delete  within a few weeks || publish to maven central failed yet again i will need to contact sonatype again || (although  does exist so it might just work) || i can confirm that the solution of 310 version works for all of the tests in my project still i dont understand how junit works but it is fine now since the tests workthanks for your fast fix & release! || ";1;0;bumped junit jupiter and added a testadded a test to enhance coverage we need higher version of junit jupiter to reproduce and 1630;
1789;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed junit jupiter parallel issue;1630;;1630.0; junit jupiter parallel issue;1630this fix improves mockito junit jupiter extension however it does not completely resolve all kinds of parallel issues when nested test classes are used ill open a separate ticket for it; merging 1789  < ;mockito junit jupiter extension does not correctly support parallel test execution;"sorry for not being able to provide the required information but we just noticed that the mockitoextension (mockito-junit-jupiter 2245) leads to spurious test failures (eg due to calls to mocks not being recorded) when using ""junitjupiterexecutionparallelenabledtrue"" with surefire prior we used our much simpler mockitoextension which works fine in the same situation:```javapublic class mockitoextension implements extension testinstancepostprocessor aftereachcallback {   @override   public void postprocesstestinstance(object testinstance extensioncontext context) {      mockitoannotationsinitmocks(testinstance)   }   @override   public void aftereach(extensioncontext extensioncontext) throws exception {      mockitovalidatemockitousage()   }}```";"hey! can you take a look at our faq wiki we documented how mockito supports parallel execution || i took a look at the wiki but found just a very short section about parallel testing in the faq section i issued the bug because the parallel execution of whole test cases with junit 5 seems to be broken i do not have any complex tests which use mocks in combination with multithreadinganyway this seems to be a problem of the mockitoextension not mockito itself because with our simple junit 5 extension for mockito parallel execution of test cases which use mocks with junit 5 works fine || i got a similar issue i have got a workaround if only a few of your ""mockito""-test-classes in you testsuite are failing when running junit jupiter in parallel you can execute those problematic tests using ""same_thread"" for avoiding mockito concurrency issues```import orgjunitjupiterapiextensionextendwithimport orgjunitjupiterapiparallelexecutionimport orgjunitjupiterapiparallelexecutionmodeimport orgmockitojunitjupitermockitoextension@extendwith(mockitoextensionclass)@execution(executionmodesame_thread) // <--- workaroundclass sometest {``` || to be a bit more specific wantedbutnotinvoked exceptions are thrown by verification calls failing because of not recorded invocations: ""actually there were zero interactions with this mock"" || the main difference between the current and the simple implementation above is that the simple one inits the mocks in postprocesstestinstance() whereas the current one inits them in beforeeach() any ideas why that might be a problem? i tried the failing tests with a modified version of the current mockitoextension which was just altered to init the mocks in postprocesstestinstance() and disabled the init in beforeeach() and the tests do no longer fail so this seems to be the source of the problems || hey guys can you provide us a test that reproduces the problem?  @mockitoguy here you go:  am not sure if i reduced the example as much as possible but well the project is not large || thank you! the sample project looks great!i looked at the code but i havent had time to debug it how does the junit5 parallel execution work? are we sharing the test instance (and thus sharing mocks suts?) || you are welcome :-) i dont know details about junits parallelization || > how does the junit5 parallel execution work? are we sharing the test instance (and thus sharing mocks suts?)by default not and the user must be very explicit to enable sharing of the same test class instance with parallel execution enabled ie even if parallel execution mode is enabled by default and a test class is annotated with `lifecycleper_class` its tests will still be executed sequentially _unless_ it is also annotated with `@execution(concurrent)`:  also bumped into this issue in our codebase with some tests using `mockitoextension` failing in parallel mode and some working fine could not spot anything particularly special about the failing ones || i can confirm that the problem exists i also have tests using mockitoextension and they fail in a non-deterministic way randomly only if junit5 parralelization is used || scenario:1 junit 5 creates a single `classextensioncontext `for a multithreaded test but each thread becomes an instance of the test class2 each thread will come into `postprocesstestinstance `where they put their test instance in the same `classextensioncontextgetstore(mockito)` map with the same key (`test_instance`)3 each thread then will get into `beforeeach` they get a thread unique `methodextensioncontext` but each of them contain the same instance of `classextensioncontext` then they fetch the the last updated `test_instance `from the parent `classextensioncontext `inside the `collectparenttestinstances `method each thread gets quasi a random test instance depending on the fact which thread was before inside the `postprocesstestinstance `method then they prepare their broken session inside the store of the current `methodextensioncontext `with a random test instance includedthat is the explanation i am thinking about how to solve thisit is not 100% clear to me why the parent context test instance is included i will check how this scenario looks like in a singlethreaded environment || this is really painful to debug but im making progress what i found out is that ""collectparenttestinstances()"" is non-deterministic:```thread[16] collectparenttestinstances() - returns: [orgmockitoanothertest@2bf588f6]thread[13] collectparenttestinstances() - returns: [orgmockitoanothertest@240da1f5 orgmockitoanothertest@6646267a]thread[17] collectparenttestinstances() - returns: [orgmockitoanothertest@6646267a]thread[14] collectparenttestinstances() - returns: [orgmockitoanothertest@f9b9d48]```notice that anothertest@6646267a is processed twice effectively initmocks() is called twice for that test instance clearing up the invocationsdo you have an idea how to fix collectparenttestinstances()? || perhaps we drop the collectparenttestinstances() complexity and just keep the test instances in static threadlocal object in the extension postprocesstestinstance() feeds the thread local state beforeeach() consumes it i dont know enough about the ""context store"" api though || i have a plan how to fix it first we need to upgrade junit-jupiter (#1788) || @mockitoguy i am not sure why you have closed the issue in the attached commit i cannot see the fix for the problemcontext store api seems to be pretty simple to me it is just a map in the context to store some information the real question is what is this kind of context hierarchy used for in junit 5 and how it behaves in case of nested tests or multithreaded tests or even in multithreaded nested tests i guess it could have some interesting beahaviour in case of parameterized (dynamic) tests probably it would be a good idea simply to ask the junit developers about this issue maybe they could provide some valuable feedback || pr #1789 fixes the problem this ticket got closed by accident thanks for looking into it! || looking forward to the next release!i would like to confirm the bug is gone but i dont know how to do it in  someone add a pr to  using mockito 3012 (at least)?  || release have been already published see  || @mockitoguy when will this fix be released to maven central? || i will publish a release today || i updated  - seems to work without problems using mockito v310 thanks a lot!i will delete  within a few weeks || publish to maven central failed yet again i will need to contact sonatype again || (although  does exist so it might just work) || i can confirm that the solution of 310 version works for all of the tests in my project still i dont understand how junit works but it is fine now since the tests workthanks for your fast fix & release! || ";1;0;cleanup traversal of parent contexts;
1790;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;enable spotless to automatically format our source code;spotless [1] has been used by various popular open source projects;;0;enable spotless to automatically format our source code;spotless [1] has been used by various popular open source projectsincluding junit [2] while working on mockito inside of google idiscovered that our formatting is inconsistent we can use spotless toautomatically take care of thatto be able to format the source code run/gradlew spotlessapplythis check runs on travis to make sure code remains formatted thisshould also reduce the amount of trouble with the checkstyle linter asspotless will automatically resolve these issueson purpose the spotless configuration is quite minimal the currentconfiguration is mostly a reflection on the current state of affairs wecan later discuss different configuration options and how we canintegrate them[1]:  https://githubcom/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/buildgradlekts#l124-l144; ;;;;1;1;enable spotless to automatically format our source codespotless [1] has been used by various popular open source projectsincluding junit [2] while working on mockito inside of google idiscovered that our formatting is inconsistent we can use spotless toautomatically take care of thatto be able to format the source code run/gradlew spotlessapplythis check runs on travis to make sure code remains formatted thisshould also reduce the amount of trouble with the checkstyle linter asspotless will automatically resolve these issueson purpose the spotless configuration is quite minimal the currentconfiguration is mostly a reflection on the current state of affairs wecan later discuss different configuration options and how we canintegrate them[1]:  https://githubcom/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/buildgradlekts#l124-l144;
1792;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix grammar;past tense of  to nest  is  nested . also fix plenking.;;0;fix grammar;"past tense of ""to nest"" is ""nested"" also fix plenking";;;;;1;1;"fix grammarpast tense of ""to nest"" is ""nested"" also fix plenking";
1795;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;typos and upcoming warnings;fixed some typos which where found by a spell checker.;;0;typos and upcoming warnings; some typos which where found by a spell checkercheck list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 1795 ` ;;;;1;1;typos;
1798;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo in the wiki link;1791;;1791.0;fix typo in the wiki link;1791check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `fixes #<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; ;"typo in mockitojava javadoc: ""verification"" in wiki link";" a missing ""i"" in the wiki link:```https://githubcom/mockito/mockito/wiki/greedy-algorithm-of-verfication-inorderhttps://githubcom/mockito/mockito/wiki/greedy-algorithm-of-verification-inorder```";feel free to send a pr! ||;1;0;fix typo in the wiki link1791;
1799;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixes placeholder  3.x.x  version in javadoc with correct  3.0.1;this is a small javadoc fix;;0;fixes placeholder `3xx` version in javadoc with correct `301`;this is a small javadoc fixwhen i contributed with #1733 i didnt know which version of mockito will have included it so i left a placeholder `3xx` in the javadoc i then forgot to update the code once `301` was tagged; ;;;;1;1;fixes placeholder `3xx` version in javadoc with correct `301`;
1806;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed junit5 concurrency bug;fixed junit jupiter mockitoextension so that it behaves correctly in a parallel execution with nested tests. i found this issue recently when working on the extension. threadlocal here is ok but i m happy to use a different solution if someone has a better idea.;;0; junit5 concurrency bug; junit jupiter mockitoextension so that it behaves correctly in a parallel execution with nested tests i found this issue recently when working on the extension threadlocal here is ok but im happy to use a different solution if someone has a better ideaadded a new test that was failing prior to this change;> travis is not happy about it :(i made him happy now :-) ||  merging 1806 ;;;;1;1; junit5 concurrency bugfixed junit jupiter mockitoextension so that it behaves correctly in a parallel execution with nested tests i found this issue recently when working on the extension;
1807;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add default implementation for verificationmode#description;this method was added in mockito 2 ([1]) and was implemented in all;;0;add default implementation for verificationmode#description;this method was added in mockito 2 ([1]) and was implemented in allrelevant subclasses however most subclasses do not implement a customdescriptionsince we are now building on java 8 we can ship this as a defaultmethod and remove all duplicate subclass implementations as aside-effect it allows users of mockito 1 to migrate to mockito 3without additional breakages (they could implement it butverificationmodefactory is internal and would require additionalboilerplate)[1]: https://githubcom/mockito/mockito/pull/68; merging 1807 ;;;;1;1;add default implementation for verificationmode#descriptionthis method was added in mockito 2 [1] and was implemented in allrelevant subclasses however most subclasses do not implement a customdescriptionsince we are now building on java 8 we can ship this as a defaultmethod and remove all duplicate subclass implementations as aside-effect it allows users of mockito 1 to migrate to mockito 3without additional breakages (they could implement it butverificationmodefactory is internal and would require additionalboilerplate)[1]: https://githubcom/mockito/mockito/pull/68;
1809;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update javadoc.io link from /page/ to /doc/  which gives an extra nav…;… bar on the top so that users can easily navigate to old versions;;0;update javadocio link from /page/ to /doc/ which gives an extra nav…;… bar on the top so that users can easily navigate to old versionsthanks for the contribution this is awesome> as you may have read project members have somehow an opinionated view on what and how should be> mockito eg we dont want mockito to be a feature bloat> there may be a thorough review with feedback -> code change loop> > which branch : > - on mockito 3x make your pull request target `release/3x`> - on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)>> _this block can be removed_> _something wrong in the template fix it here `github/pull_request_templatemd`check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;  raised pr on  fri oct 25 2019 at 9:18 pm tim van der lippe <notifications@githubcom>wrote:> merged #1809 < into> release/3x>> —> you are receiving this because you authored the thread> reply to this email directly view it on github> < or unsubscribe> < > ||;;;;1;1;update javadocio link from /page/ to /doc/ which gives an extra nav bar on the top so that users can easily navigate to old versions;
1810;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;revert  1587 : remove unnecessary loop from injectingannotationengine;reverts mockito/mockito#1588;;1587.0;"revert ""1587 : remove unnecessary loop from injectingannotationengine""";reverts mockito/mockito#1588related to #1631 heres a pseudo code to describe the issues around this issue# before 22315:	```while (clazz ! objectclazz) {	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }	clazz  clazzgetsuperclass()}```# after 22315:```	val mocks  aggregatespyormockfields(clazzgetmockfields())  val fields  aggregateinjectmocksfields(clazz)	val ret  tryconstructorinjection(clazz fields mock)  if (! retfieldwasinitializedusingconstructorinjection()) {    trysetterorpropertyinjection(clazz fields mock)  }```# detailsbefore 22315 if the `@injectmocks` field has a field that not listed in the constructor argument will fill by setter/property injection at the 2nd loop 😃it may not the expected behaviors by mockito authors but some users code depends on this behaviormy suggestion is to revert the [1587 : remove unnecessary loop from injectingannotationengine by lihmeh · pull request #1588 · mockito/mockito · github]( at this time;why travis fails? || this needs a rebase that should fix travis (presumably) ||  merging 1810 ;injectingannotationengine does an unnecessary loop;processinjectmocks method of injectingannotationengine does unnecessary work it might call injectmocks several times while it is sufficient to call injectmocks once    private void processinjectmocks(final class<?> clazz final object testinstance) {        class<?> classcontext  clazz        while (classcontext ! objectclass) {            injectmocks(testinstance)            classcontext  classcontextgetsuperclass()        }    }inside injectmocks loops classes by himself    public void injectmocks(final object testclassinstance) {        class<?> clazz  testclassinstancegetclass()        set<field> mockdependentfields  new hashset<field>()        set<object> mocks  newmocksafehashset()        while (clazz ! objectclass) {            new injectmocksscanner(clazz)addto(mockdependentfields)            new mockscanner(testclassinstance clazz)addpreparedmocks(mocks)            oninjection(testclassinstance clazz mockdependentfields mocks)            clazz  clazzgetsuperclass()        }        new defaultinjectionengine()injectmocksonfields(mockdependentfields mocks testclassinstance)    }why not delete the unnecessary loop?;;1;0;appliied review comment;
1811;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;apply consistent import ordering with spotless;spotless allows us to enforce a consistent import order. configure it;;0;apply consistent import ordering with spotless;spotless allows us to enforce a consistent import order configure itsuch that static imports are first and non-static imports afterwardswithin imports java imports first then javax then all othersthis is consistent with the existing contributingmd guidelines apartfrom the fact that static imports are first (file has been updated) iwould propose that makes more sense but happy to discussin any case spotless already found inconsistent ordering within importsthemselves so that is already providing value for consistencyi have also updated the contributing guidelines to explain how`/gradlew spotlessapply` will fix a lot of issues without thedeveloper having to worry about it that should hopefully help newcomersmake changes more confidently(the only 2 files that are interesting to you are the `buildgradle` and`github/contributingmd` all other file changes were automaticallyperformed after running `/gradlew spotlessapply` locally); merging 1811  < ;;;;1;1;apply consistent import ordering with spotlessspotless allows us to enforce a consistent import order configure itsuch that static imports are first and non-static imports afterwardswithin imports java imports first then javax then all othersthis is consistent with the existing contributingmd guidelines apartfrom the fact that static imports are first (file has been updated) iwould propose that makes more sense but happy to discussin any case spotless already found inconsistent ordering within importsthemselves so that is already providing value for consistencyi have also updated the contributing guidelines to explain how`/gradlew spotlessapply` will fix a lot of issues without thedeveloper having to worry about it that should hopefully help newcomersmake changes more confidently(the only 2 files that are interesting to you are the `buildgradle` and`github/contributingmd` all other file changes were automaticallyperformed after running `/gradlew spotlessapply` locally);
1813;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1771: upgrade byte-buddy to 1.10.2 (from 1.9.10);release notes:;;1771.0;1771: upgrade byte-buddy to 1102 (from 1910);release notes: commits:raphw/byte-buddy@byte-buddy-1910byte-buddy-1102; ;upgrade byte-buddy to a 110x release;currently mockito uses an older build of byte-buddy i dont see any documentation or issues suggesting that theres a reason to avoid using a newer version though the contribution documentation doesnt mention dependency upgrades;":+1:  it should be officially upgraded to newer version of byte-buddyi am experiencing ""unsupported class file major version 57"" (java 13) || we had an attempt in #1772 but travis was unhappy if someone could revive that pr and fix the build that would be greatly appreciated! || ";1;0;ignore java 9 style `jar ` urls;
1816;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix document error;list.contains(any())  return a  boolean  value  not a  string  value.;;0;fix document error;`listcontains(any())` return a `boolean` value not a `string` value;;;;;1;1;fix document error;
1818;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add duration overloads. 1815;add new  java.time.duration -based public apis to  mockito    after   and  timeout  and deprecate the corresponding  long -based public apis.;;181.0;add duration overloads 1815;add new `javatimeduration`-based public apis to `mockito` `after` and `timeout` and deprecate the corresponding `long`-based public apisplumb those `duration` instances through the internals of mockito; merging 1818 ;warning when multiple instances of mock exist;ive ran into this a few times now and think that an error/warning message could be used the situation is having two interfaces of the same type being mocked via annotations then injecting via @injectmocks it seems at run/test time that there is some probability either will be chosenadmittedly this is an edge case but would be faster to track down if there was a warning perhaps that multiple instances of the same interface were found but no injection point (constructor property etc) was found that applies i put together an example which is reproducible easily on my machine under the following:- jdk 16 + mockito 190i dont mind looking into providing a fix for this myself but wanted to formalize it here before looking into itif you run the following a few times youll get different assertion errors each time depending on which myservice gets injected```package exampleimport orgjunittestimport orgjunitrunnerrunwithimport orgmockitoinjectmocksimport orgmockitomockimport orgmockitorunnersmockitojunitrunnerimport orgspringframeworkbeansfactoryannotationautowiredimport orgspringframeworkstereotypeserviceimport static orgmockitomockitoverify@runwith(mockitojunitrunnerclass)public class exampletest {    @service    public static class myservice {        public void dosomething() {        }    }    @service    public static class myclass {        private final myservice myservice        @autowired        public myclass(myservice myservice) {            thismyservice  myservice        }        public void dosomethingwithservice() {            myservicedosomething()        }    }    @mock    private myservice myserviceinstance1    @mock    private myservice myserviceinstance2    @injectmocks    private myclass myclass    @test    public void test1() throws exception {        myclassdosomethingwithservice()        verify(myserviceinstance1)dosomething()        verify(myserviceinstance2)dosomething()    }}```;hithis is a known documented and wanted behavior if by warning you mean writing a line to the console this could probably done however if its about raising an exception then im not sure this is the smart move || since the current behavior is intermittent why it is considered wanted?cheers!on fri apr 3 2015 07:28 brice dutheil notifications@githubcom wrote:> hi> > this is a known documented and wanted behavior if by warning you mean> writing a line to the console this could probably done however if its> about raising an exception then im not sure this is the smart move> > ## > > reply to this email directly or view it on github>  || also @joshes i think more recent version of mockito have a more reproducible behavior (ie not intermittent) (check 195 11019)the wanted behavior im speaking about is **to not fail if injection cannot happen** because a developper **may choose to inject them afterward** this is especially useful with objects that have exotic way of injections || thanks for the explanation @bric3  - that makes sense  ||;1;0;resolve comments on pr;
1819;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;deprecate mockitohamcrest;this class was used during the migration period from mockito 1 and;;181.0;deprecate mockitohamcrest;this class was used during the migration period from mockito 1 andmockito 2 but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrestin response to #1817;"friendly ping on this pr || i will submit this pr next week if there are no objections || there were no objections so i am merging this || sorry im late here! i suggest we dont deprecate it the use case (as documented in the javadoc) is the following: ""hamcrest integration is provided so that users can take advantage of existing hamcrest matchers"" that use case is still valid (perhaps the docs need to be clearer to address #1817)for code that does not use hamcrest users should be following standard non-hamcrest argthat() apihope that helps! || > for code that does not use hamcrest users should be following standard non-hamcrest argthat() apithe problem is that this project requires hamcrest as compile-time dependency to be built this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)if we want to keep supporting hamcrest users with this api i would suggest a `mockito-hamcrest` artifact that takes care of the integration that way those users who do *not* want to use hamcrest dont rely on it as wellwdyt? || im novice to testing because i have to wear many hats (and i avoided getting into it like the plague in the past) returning to spring development in my career and discovering mockito this year changed my [integration testing] life i rely heavily on googling stack overflow examples until it become memorized (if ever i do)  it seems like there is a much larger documented wealth of knowledge on hamcrest on stack overflow (maybe cause its been around a long time) and so its easy to find solutions to basic challenges while someone new to mockito gets used to itfor example hasentry from this so helped me today  like timvdlippes suggestion because it leverages giving your users the ability to tap into that knowledge/solutions while slimming down the dependencies for the core mockito code basethanks for all your contributions in this area and letting us stand on your shoulders || thanks for that response @mansours ! i will look into introducing a `mockito-hamcrest` artifact and figure out a way forward tomorrow i can revert this pr given the points raised by @mockitoguy and make that work || > this is a problem for users who do not want to use hamcrest but still build the source code (as they cant use the pre-built jars)can you elaborate this problem? we use ""compileonly"" dependency for hamcrest just like we do for junit4 or opentest4j this should not cause problems for consumers || yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuewe are not able to include jars as we require source code to be included and built (for security analyses) thus the inclusion of the dependencies during compile time does lead to problems when we want to build mockito in isolationi am currently investigating solutions for junit4 and opentest4j and how that could be decoupled i went ahead with this pr as it was my understanding with mockito 2 is that we wanted to remove our dependency of hamcrest therefore i assumed that deprecation was appropriate especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayi will revert the pr for us to revisit but i would like to come to a decision on our hamcrest support and whether we want to support it or not at all when we come to a decision i would like to update our javadoc and wiki on that to clarify that for our users || > especially as there were no objections posted on this pr for almost 2 weeks i understood that this was okayof course! thank you for waiting 2 weeks dont block on us> yes we are facing the same issues with junit4 and opentest4j junit4 is not an issue atm as we are also using it but opentest4j is currently an issuecan you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :)) || > can you elaborate the problem? is it a google mono-repo use case? (i dont object reworking the artifacts - i want understanding for me and others :))this is for every repository that includes third_party code that we need to have the original source code for security analyses that includes the mono repository as well as some other repositories that we havesince the hamcrest api is not type-safe (as it requires casting with `object` vs `t` as argument type) we would like to move away from unsafe type casts the `argumentmatcher` interface does not inherit that problem but the older hamcrest api doesby having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apii would personally say that while the hamcrest api was originally useful for defining reusable matchers the lack of type-safety does more harm than good i have received good responses when i finished the migration of the `argumentmatcher` to be typed and it already caught bugs in our tests i think we should promote the type-safe `argumentmatcher` and thus deprecate the old api but happy to disagree on that part and leave hamcrest compatibility in for example a separate artifact || > that we need to have the original source code for security analysesso the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)> by having the hamcrest-compatible api in the mockito artifact users can still use mockito in combination with the hamcrest apithats a fair argument> leave hamcrest compatibility in for example a separate artifactto keep backwards compatibility we would need ""mockito-core"" -> ""mockito-hamcrest"" are you thinking of reversing the dependency in future major version? || revert of this pr is in  || > so the problem is that in addition to mockito source you have to pull in hamcrest source for the analysis? (i still dont feel i fully understand this use case)correct since jars can be built with any arbitrary code we prefer to not check in a jar as we cant be certain that it was built from the original source code thats why we check in the original source code and build that instead> to keep backwards compatibility we would need ""mockito-core"" -> ""mockito-hamcrest"" are you thinking of reversing the dependency in future major version?yes but since maven does not allow a cyclic dependency we have to figure out what the possibilities are || ";warning when multiple instances of mock exist;ive ran into this a few times now and think that an error/warning message could be used the situation is having two interfaces of the same type being mocked via annotations then injecting via @injectmocks it seems at run/test time that there is some probability either will be chosenadmittedly this is an edge case but would be faster to track down if there was a warning perhaps that multiple instances of the same interface were found but no injection point (constructor property etc) was found that applies i put together an example which is reproducible easily on my machine under the following:- jdk 16 + mockito 190i dont mind looking into providing a fix for this myself but wanted to formalize it here before looking into itif you run the following a few times youll get different assertion errors each time depending on which myservice gets injected```package exampleimport orgjunittestimport orgjunitrunnerrunwithimport orgmockitoinjectmocksimport orgmockitomockimport orgmockitorunnersmockitojunitrunnerimport orgspringframeworkbeansfactoryannotationautowiredimport orgspringframeworkstereotypeserviceimport static orgmockitomockitoverify@runwith(mockitojunitrunnerclass)public class exampletest {    @service    public static class myservice {        public void dosomething() {        }    }    @service    public static class myclass {        private final myservice myservice        @autowired        public myclass(myservice myservice) {            thismyservice  myservice        }        public void dosomethingwithservice() {            myservicedosomething()        }    }    @mock    private myservice myserviceinstance1    @mock    private myservice myserviceinstance2    @injectmocks    private myclass myclass    @test    public void test1() throws exception {        myclassdosomethingwithservice()        verify(myserviceinstance1)dosomething()        verify(myserviceinstance2)dosomething()    }}```;hithis is a known documented and wanted behavior if by warning you mean writing a line to the console this could probably done however if its about raising an exception then im not sure this is the smart move || since the current behavior is intermittent why it is considered wanted?cheers!on fri apr 3 2015 07:28 brice dutheil notifications@githubcom wrote:> hi> > this is a known documented and wanted behavior if by warning you mean> writing a line to the console this could probably done however if its> about raising an exception then im not sure this is the smart move> > ## > > reply to this email directly or view it on github>  || also @joshes i think more recent version of mockito have a more reproducible behavior (ie not intermittent) (check 195 11019)the wanted behavior im speaking about is **to not fail if injection cannot happen** because a developper **may choose to inject them afterward** this is especially useful with objects that have exotic way of injections || thanks for the explanation @bric3  - that makes sense  ||;1;0;deprecate mockitohamcrestthis class was used during the migration period from mockito 1 andmockito 2 but is no longer necessary to be able to remove ourdependency on hamcrest we should remove mockitohamcrest;
1820;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;indent with spaces using spotless;discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentwithspaces(4)  does just that and it actually found other formatting issues.;;0;indent with spaces using spotless;discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces) spotless did not fix the formatting `indentwithspaces(4)` does just that and it actually found other formatting issues;"yes that is correct i think at that point you need a formatter like `google-java-formatter` or `eclipse-formatter` to fix these kind of ""aesthetics"" || ";;;;1;1;indent with spaces using spotless;
1821;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;guard against multiple evaluations of before statement;some rules evaluate the base statement multiple times  e.g. to execute;;1767.0;guard against multiple evaluations of before statement;some rules evaluate the base statement multiple times eg to executetests repeatedly the changes made in #1672 led to an exception in suchcases because the `mockitolistener` was registered multiple times nowwe only add the listener the first time the statement is evaluated inorder to restore the old behavior1767;oh this fails a lot of tests 😢 could it be that `testfinished` needs the same treatment? || > could it be that `testfinished` needs the same treatment?it does indeed   merging 1821  < ;mismatchreportingtestlistener has already been added and not removed using mockitojunitrunner;" -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here```import static orghamcrestmatchersequaltoimport static orghamcrestmatchershaspropertyimport static orgmockitoargumentmatchersanyimport static orgmockitoargumentmatchersanystringimport static orgmockitomockitoneverimport static orgmockitomockitoverifyimport static orgmockitohamcrestmockitohamcrestargthatimport javaiofileimport javaioioexceptionimport javautilfunctionconsumerimport orgjunitruleimport orgjunittestimport orgjunitrulestemporaryfolderimport orgjunitrunnerrunwithimport orgmockitomockimport orgmockitojunitmockitojunitrunnerimport orgpdfsamsupportparamssingleoutputtaskparametersbuilderimport orgpdfsamtestinitializeandapplyjavafxthreadrule@runwith(mockitojunitrunnerclass)public class browsablepdfoutputfieldtest {    @rule    public temporaryfolder folder  new temporaryfolder()    @rule    public initializeandapplyjavafxthreadrule fxthread  new initializeandapplyjavafxthreadrule()    @mock    private singleoutputtaskparametersbuilder<?> builder    @mock    private consumer<string> onerror    @test    public void valid() throws ioexception {        browsablepdfoutputfield victim  new browsablepdfoutputfield()        file value  foldernewfile(""testpdf"")        victimgettextfield()settext(valuegetabsolutepath())        victimapply(builder onerror)        verify(builder)output(argthat(hasproperty(""destination"" equalto(value))))        verify(onerror never())accept(anystring())    }    @test    public void invalid() {        browsablepdfoutputfield victim  new browsablepdfoutputfield()        victimenforcevalidation(true true)        victimgettextfield()settext(""chucknorris"")        victimapply(builder onerror)        verify(builder never())output(any())        verify(onerror)accept(anystring())    }}``` -  provide versions (mockito / jdk / os / any other relevant information)mockito 300 adoptopenjdk 1104 linux mint -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide]( migrated from 11019 to the 300 version and i have few tests using the mockitojunitrunner which are failing with the following stacktrace:```orgmockitoexceptionsmisusingredundantlistenerexception: problems adding mockito listenerlistener of type mismatchreportingtestlistener has already been added and not removedit indicates that previous listener was not removed according to the apiwhen you add a listener dont forget to remove the listener afterwards:  mockitoframework()removelistener(mylistener)for more information see the javadoc for redundantlistenerexception class	at orgmockitointernalrunnersdefaultinternalrunner$1$1evaluate(defaultinternalrunnerjava:41)	at orgjunitrulesexternalresource$1evaluate(externalresourcejava:48)	at orgpdfsamtestjavafxthreadrule$1lambda$evaluate$0(javafxthreadrulejava:48)	at comsunjavafxapplicationplatformimpllambda$runlater$10(platformimpljava:428)	at javabase/javasecurityaccesscontrollerdoprivileged(accesscontrollerjava:389)	at comsunjavafxapplicationplatformimpllambda$runlater$11(platformimpljava:427)	at comsunglassuiinvokelaterdispatcher$futurerun(invokelaterdispatcherjava:96)	at comsunglassuigtkgtkapplication_runloop(native method)	at comsunglassuigtkgtkapplicationlambda$runloop$11(gtkapplicationjava:277)	at javabase/javalangthreadrun(threadjava:835)```it seems something internal i didnt add or remove any `mismatchreportingtestlistener` and moreover the same code was working with the 11019 and is working if i remove the `mockitojunitrunner` and replace the `@mock` annotation with a `mockitomock` in a `@before` method";"a lot of updates exist between 11019 and 300 could you bisect the versions and figure out which minor version introduced the issue? || 2260 looks like the one introducing this issue all green in 2251 || @torakiki can you provide us a simpler test that reproduces the issue? we are looking for a test without dependencies such as initializeandapplyjavafxthreadrule so that we can run & reproduce it in mockito projectthanks for reporting!  || @torakiki any luck? im having the same issue upgrading from 2234@mockitoguy heres a simple test reproducing the issue in my case:```java@runwith(mockitojunitrunnerclass)public class uuidhelpertest {    @test    public void should_get_16_bytes_from_a_uuid() {        uuid uuid  uuidrandomuuid()        byte result  uuidhelpergetbytesfromuuid(uuid)        assertthat(resultlength is(16))    }}public class uuidhelper {    public static final int uuid_size_in_bytes  16    public static byte getbytesfromuuid(uuid uuid) {        bytebuffer bb  bytebufferwrap(new byte[uuid_size_in_bytes])        bbputlong(uuidgetmostsignificantbits())        bbputlong(uuidgetleastsignificantbits())        return bbarray()    }}``` || @sharonhart this test works fine with current mockito (30) can you provide a test that fails with current mockito? thank you! || @mockitoguy it works with the current mockito version for me as well on a clean project but in one specific project it doesnt after a similar upgrade as the one mentioned in this issue  || @marcphilipp @timvdlippe maybe this pr is related? was merged between the versions @torakiki mentioned [here]( used to removelistener in case of test failure during setup the same thing as the exception states that needs to be doneedit: ive reverted the commit locally and published to m2 everything works now can this be reverted or checked for root cause? || @sharonhart which version of junit are you using? we had a regression since 413 which is why we made the changes see  || @timvdlippe junit 412by the way seems like whats causing the regression for me is the withbefores statement part not the started field removal in the runlistener but the regression youve mention was with the prior right? || @sharonhart could you please provide a sample project so we can reproduce the issue? || @marcphilipp unfortunately i cant i tried to copy the test to a clean project and it didnt reproducehappening only in command line build in one project which i cant share due to size and internal dependencies i can verify if a fix works though the same way ive managed to check if reverting the commit  the issue || are you running tests in parallel or anything like that? || yes in our ci pipeline but reproduced locally with a single executor it might be that the single one is running modules in parallel im not sure  || how are you running those tests? maven surefire? || no with gradle without extra plugins || what happens when you upgrade to junit 413-rc-1? || same || while i cannot provide a sample project to reproduce this issue here are some observations that i made when running into the same issue:1 i seems to be related one of the `@rule`: i use a similar rule to what @torakiki has in his example:<pre>public class javafxthreadingrule implements testrule {        /**        * flag for setting up the javafx we only need to do this once for all tests        */        private static boolean jfxissetup        @override        public statement apply(statement statement description description) {            return new onjfxthreadstatement(statement)        }        private static class onjfxthreadstatement extends statement {            private final statement statement            public onjfxthreadstatement(statement astatement) {                statement  astatement            }            private throwable rethrownexception  null            @override            public void evaluate() throws throwable {                if(!jfxissetup) {                    setupjavafx()                    jfxissetup  true                }                final countdownlatch countdownlatch  new countdownlatch(1)                platformrunlater(() -> {                    try {                        statementevaluate()                    } catch (throwable e) {                        rethrownexception  e                    }                    countdownlatchcountdown()                })                countdownlatchawait()                // if an exception was thrown by the statement during evaluation                // then re-throw it to fail the test                if(rethrownexception ! null) {                    throw rethrownexception                }            }            protected void setupjavafx() throws interruptedexception {                long timemillis  systemcurrenttimemillis()                final countdownlatch latch  new countdownlatch(1)                swingutilitiesinvokelater(() -> {                    // initializes javafx environment                    new jfxpanel()                    latchcountdown()                })                systemoutprintln(""javafx initialising"")                latchawait()                systemoutprintln(""javafx is initialised in "" + (systemcurrenttimemillis() - timemillis) + ""ms"")            }        }}</pre>2 my test class contains multiple test methods running them separately woks when running them in combination (from within the ide) the first one succeeds and then the remaining fail with this exception3 removing the rule makes all tests succeed safe the ones that actually require the rule || @hotzst nice! i have managed to find that for me as well a methodrule were implementing is what caused this question is how should it be changed for the updated mockito version```javaimport orgjodatimedatetimezoneimport orgjunitrulesmethodruleimport orgjunitrunnersmodelframeworkmethodimport orgjunitrunnersmodelstatementimport orgmockitomockitoimport orgmockitointernaljunitmockitotestlistenerimport javautiltimezone/** when adding this rule to a junit test any @test method annotated with @timezoned will be ran multiple times each time* with a different system timezone* this rule is useful to ensure you are handling all timezones correctly* note: for mockito you may need to use mockitoreset() if you are using verify()* */public class timezoneupdaterule implements methodrule {    final private timezone timezone    final private datetimezone datetimezone    private final static string alltimezones  {""utc"" ""asia/jerusalem"" ""europe/london"" ""us/pacific"" ""est5edt"" ""us/eastern""            ""australia/sydney"" ""us/central"" ""asia/tokyo"" ""america/chicago"" ""gmt""            ""europe/amsterdam"" ""europe/berlin"" ""brazil/east"" ""asia/jakarta"" ""europe/athens""            ""australia/queensland"" ""asia/singapore"" ""asia/bangkok"" ""america/bogota""            ""america/los_angeles"" ""asia/hong_kong"" ""america/new_york""            ""america/argentina/buenos_aires""}    public timezoneupdaterule() {        timezone  timezonegetdefault()        datetimezone  datetimezonegetdefault()    }    public void reset() {        settimezone(timezone datetimezone)    }    protected void after() {        reset()    }    private void settimezone(string timezoneid) {        settimezone(timezonegettimezone(timezoneid) datetimezoneforid(timezoneid))    }    private void settimezone(timezone timezone datetimezone datetimezone) {        systemsetproperty(""usertimezone"" timezonegetid())        timezonesetdefault(timezone)        datetimezonesetdefault(datetimezone)    }    private static string gettimezones() {        return alltimezones    }    @override    public statement apply(final statement st final frameworkmethod method object target) {        return new statement() {            public void evaluate() throws throwable {                timezoned timezoned  methodgetannotation(timezonedclass)                if(timezoned !null){                    string timezones   timezonedtimezones()length > 0  ? timezonedtimezones() : gettimezones()                    applyalltimezones(st timezones)                }else{                    stevaluate()                }            }        }    }    private void applyalltimezones(statement st string timezones) throws throwable {        try {            for (string tz : timezones) {                settimezone(tz)                stevaluate()            }        }catch (assertionerror t){            throw new assertionerror(getmessage() t)        }catch (exception e){            throw new runtimeexception(getmessage() e)        }        finally {            after()        }    }    private string getmessage() {        return ""test failed for timezone ["" + timezonegetdefault()getid()+ ""]""    }}``` || thanks for the additional info i think #1821 should restore the old behavior ||  ";1;0;reset listener when removing it;
1823;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix a word mistake;;;0;fix a word mistake;;  thank you for the fix ) ||;;;;1;1;fix a word mistake;
1832;0;1;0;0;0;0;0;1;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add matchers for incompatible type matchers;we discovered that users run into issues with using the wrong mockito;;0;add matchers for incompatible type matchers;we discovered that users run into issues with using the wrong mockitomatcher for arguments examples include `any(integerclass)` instead of`anyint()` and `anyint()` instead of `anyfloat()` users then run intocryptic run-time errors that are difficult to understandthese errorprone checkers make these a compile warning to warn the userbefore hand they also provide the appropriate fixes that can bedirectly applied;" merging 1832  this for now as it upstreams a checker that prevents real issues on runtime we can change the mockito api but i would rather prevent users from running into runtime exceptions when we can || ";;;;1;1;add matchers for incompatible type matcherswe discovered that users run into issues with using the wrong mockitomatcher for arguments examples include `any(integerclass)` instead of`anyint()` and `anyint()` instead of `anyfloat()` users then run intocryptic run-time errors that are difficult to understandthese errorprone checkers make these a compile warning to warn the userbefore hand they also provide the appropriate fixes that can bedirectly applied;
1845;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;revert  add duration overloads. 1815;reverts mockito/mockito#1818;;1815.0;"revert ""add duration overloads 1815""";reverts mockito/mockito#18181843; merging 1845 ;fr: add mockitotimeout(javatimeduration) and after(javatimeduration);representing durations as `long`s is very error prone weve seen (and ) hundreds of unit mismatch bugs inside of googlewe (guava) have recently updated most of our public apis to add `javatimeduration`-based overloads [caffeine]( and [selenium]( have done so as wellbasically id like to see the following apis added:`mockitoafter(javatimeduration)``mockitotimeout(javatimeduration)`and ideally the `long`-accepting apis would be deprecated;that would makes sense to me feel free to open a pr to add these methods@mockito/developers we have a lot of evidence of `long`s being misused in common apis do you have any concerns if we deprecate the `after(long)` in favor of `after(javatimeduration)` (and the same for `timeout`)? || ideally wed plumb the `duration` all the way through the various layers of mockito:- `orgmockitoverificationafter`- `orgmockitoverificationtimeout`- `orgmockitointernalverificationverificationovertimeimpl`- `orgmockitointernalutiltimer`i assume `after` and `timeout` need to maintain backwards compatibility but the latter 2 are in an `internal` package - does that mean i dont need to maintain backwards compatibility? am i free to make breaking changes to those apis? || yes any api in `orgmockitointernal` is not included in our semver policy and we are free to change || i second that now that mockito 3 is java 8 based ! ||;1;0;"revert ""add javatimeduration overloads to `timeout` and `after` (#1818)""this reverts commit 9603fb28158de0fb519611d58e931bf7b4bbc33c";
1847;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fixed undetected unused stubbing when matching previous stubbed call;1846;;1846.0; undetected unused stubbing when matching previous stubbed call;1846; merging 1847 ;broken unused stubbing reporting when matching previous stubbed call;"when stubbing the same method call twice and the second stub setup matches to first stubbed call the first stub is not reported as unused because mockito detects the next stub setup as a usage of the previous stub setup this is an example test:```public class unnecessarystubbingwithimpliciteqmatchers {    @mock imethods mock    mockitosession mockito  mockitomockitosession()initmocks(this)strictness(strictnessstrict_stubs)startmocking()    @after public void after() {        mockitofinishmocking()    }    @test public void unnecessary_stubbing() {        given(mocksimplemethod(""1""))willreturn(""one"")        given(mocksimplemethod(""2""))willreturn(""three"")        given(mocksimplemethod(""1""))willreturn(""two"")        given(mocksimplemethod(""1""))willreturn(""four"")        mocksimplemethod(""1"")        mocksimplemethod(""2"")    }}```the test above should fail with `unnecessarystubbingexception` containing two unused stubs but it does notmockito version: v324";"nice catch! ill review the pr! || hey @mockitoguy @andreisilviudragnea i think this pr has introduced a new bug (or a regression if you like)the problem arises when using deep stubs as every call in a deep stub counts as used stubbing but if you end up stubbing that mock for real this change will change the state of the original stubbing and your test will fail with an `unnecessarystubbingexception`the following example is in scala i dont have a running java project at hand but i can provide a 100% java example if this is not enough to explain the problem```scala  class foo {    def userclass: bar  {}  }  class bar {    def callmemaybe: baz  {}  }  class baz {    def callme: option[string]  {}  }val afoo  mock[foo](defaultanswersreturnsdeepstubs)afoouserclasscallmemaybecallme returns some(""my number"")afoouserclasscallmemaybecallmevalue shouldbe ""my number"that code will fail as there are 2 stubbings for `callme` one automatically created by the deep stub (see `returnsdeepstubsclass` line 67) and one for the actual stubbing im making to return `some(""my number"")` || this also breaks tests that needs to legitimately stub the same invocation multiple times particularly with invocations that have to arguments (since all invocations will match a previous stub) see  simple common example is when stubbing a `clock`:```@mockprivate clock clock@test void test() {    instant instant1  instantofepochmillis()    instant instant2  instant1plus()    when(clockinstant())thenreturn(instant1)    // do something at instant1    when(clockinstant())thenreturn(instant2)    // do something at instant2}``` || @pkoenig10 yes although that may not be the best example as you could use a chain of `thenreturn()` and have a single stubbingthat said for a non-experienced user that may not be obvious at all so wed have to weight it || its not obvious to me how you would work around this if your code calls `clockinstant()` a large or variable number of times i find the suggested work around to be pretty verbose and unergonomic:```when(clockinstant())    thenreturn(instant1)    thenreturn(instant1)    // repeat however many times is necessary    thenreturn(instant2)    thenreturn(instant2)    // repeat however many times is necessary```i think the best and simplest way to improve this behavior is to not unmark the previous stubbing if it has been used if the stubbing has not previously been used then i think the current behavior is appropriate unfortunately this does seem like it will be a simple fix since the a second stubbing causes a previous stubbing to be marked as used || @pkoenig10 i fail to see how that is less verbose than multiple stubbings but in any case thats not the pointi think this change should be reverted until it can be given a deeper thought do you agree? @mockito/developers ? || revert in progress:  || ";1;0;improved the test coverage- made the tests less complicated- added assertions on the _count_ of unnecessary stubbings- made the exception message more informative;
1849;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;performance optimization by using method.getparametercount() where possible;hi;;1848.0;performance optimization by using methodgetparametercount() where possible;hias described in #1848 we could make use of `methodgetparametercount()` in order to save some overhead from unnecessary cloning caused  methodgetparametertypes()`as this is my first contribution to mockito let me know if i can do something to helplet me know what you thinkcheerschristoph; merging 1849  < ;use methodgetparametercount() where possible;hias of mockito 3x and its java 8 requirement we could make use of `methodgetparametercount()` to avoid unnecessary cloning caused  methodgetparametertypes()`i will shortly open a pr with the proposed changescheerschristoph;;1;0;1848 : use methodgetparametercount() where possible;
1850;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;522 : basic test suite for osgi framework;this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment. for example  reverting the fix for #678 is caught with the following exception:;;522.0;522 : basic test suite for osgi framework;"this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range ""[160"": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin]( instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains";" merging 1850  ";provide osgi test project to validate osgi headers automatically;as stated in #82 we should provide a project for osgi to validate correct exports;;1;0;provide orgjunit package to test bundle and run tests inside it;
1850;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;522 : basic test suite for osgi framework;this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment. for example  reverting the fix for #678 is caught with the following exception:;;678.0;522 : basic test suite for osgi framework;"this is a proposal for a basic test project to ensure that the mockito artifacts can be consumed from an osgi environment for example reverting the fix for #678 is caught with the following exception:```javalangillegalstateexception: failed to install bundle: mockito-core-323jar	at orgmockitoosgitestosgitestsetup(osgitestjava:55)	 (snipped)caused by: orgosgiframeworkbundleexception: error occurred installing a bundle	at orgeclipseosgistoragestorageinstall(storagejava:739)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:187)	at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:179)	at orgmockitoosgitestosgitestsetup(osgitestjava:53)	 40 morecaused by: javalangillegalargumentexception: invalid range ""[160"": invalid format	at orgosgiframeworkversionrange<init>(versionrangejava:173)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:373)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:352)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:111)	at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:78)	at orgeclipseosgistoragestoragegetbuilder(storagejava:784)	at orgeclipseosgistoragestoragegetbuilder(storagejava:766)	at orgeclipseosgistoragestorageinstall(storagejava:706)	 43 morecaused by: javautilnosuchelementexception	at javautilstringtokenizernexttoken(stringtokenizerjava:349)	at orgosgiframeworkversionrange<init>(versionrangejava:157)	 50 more```the osgi test project consists of three source sets:1 a regular junit4 `test` source set with a single class osgitest starts an osgi framework installs mockito-core byte-buddy and objenesis bundles as well as two test bundles and executes some simple mockito test cases inside the osgi framework2 a source set `testbundle` thats built to an osgi bundle using the `bundle` task from the bnd gradle plugin contains the test classes that run the mockito test cases and thus depends on the mockito bundle3 a source set `otherbundle` thats also built to an osgi bundle but with no other dependencies used for testing mocking of classes from other bundlessome further technical details:- the `test` source set only has compile dependencies on the osgi apis and junit4 ie not on mockito the osgi framework is created using the standard framework api at runtime equinox is added as a dependency to supply an actual framework implementation but the intention is that any framework implementation could be used- the test cases are run by loading classes from the test bundle that all implement `runnable` this is to provide a simple bridge using a common jdk class the reason for setting up such a bridge is that i want to drive the tests using a test runner that gradle supports for example to get good test reports but the test bundles dont know anything about junit4 inside the osgi framework i didnt want to explore adding an osgified version of junit into the mix at this point since that would also entail solving test discovery inside an osgi framework- the osgi bundles are built using the [bnd gradle plugin]( instead of the deprecated `osgi` plugin in gradle the reason is both future proofing to not impede a migration to gradle 60 in this new sub project and that i believe it better mirrors how other projects would consume the mockito artifacts further it paves the way for replacing the usage of the deprecated plugin for the creating the osgi manifests in the root projectsince this is my first contribution ill be happy to fix anything that goes against the grains";" merging 1850  ";osgi bundle problem - incorrect version range syntax in manifest file;"the mockito-core version 210 has an incorrect version range syntax for the byte buddy dependencies  in the _meta-inf/manifestmf_ file consequently the bundle cannot be loaded by osgi (tested with equinox r-46) actual: > netbytebuddyversion""[1426""expected: > netbytebuddyversion""[142620)""on the other hand the version ranges for objensis dependencies are specified correctly the problem originates from missing double quotes around the version specification in  stacktrace: > !message error installing bundle: reference plugins/mockito-corejar> !stack 0> orgosgiframeworkbundleexception: error occurred installing a bundle>     at orgeclipseosgistoragestorageinstall(storagejava:562)>     at orgeclipseosgiinternalframeworkbundlecontextimplinstallbundle(bundlecontextimpljava:146)>     at orgeclipsecoreruntimeadaptoreclipsestarterinstallbundles(eclipsestarterjava:974)>     at orgeclipsecoreruntimeadaptoreclipsestarterloadbasicbundles(eclipsestarterjava:583)>     at orgeclipsecoreruntimeadaptoreclipsestarterstartup(eclipsestarterjava:319)>     at orgeclipsecoreruntimeadaptoreclipsestarterrun(eclipsestarterjava:239)>     at sunreflectnativemethodaccessorimplinvoke0(native method)>     at sunreflectnativemethodaccessorimplinvoke(unknown source)>     at sunreflectdelegatingmethodaccessorimplinvoke(unknown source)>     at javalangreflectmethodinvoke(unknown source)>     at orgeclipseequinoxlaunchermaininvokeframework(mainjava:673)>     at orgeclipseequinoxlaunchermainbasicrun(mainjava:610)>     at orgeclipseequinoxlaunchermainrun(mainjava:1519)>     at orgeclipseequinoxlaunchermainmain(mainjava:1492)> caused by: javalangillegalargumentexception: invalid range ""[1426"": invalid format>     at orgosgiframeworkversionrange<init>(versionrangejava:173)>     at orgeclipseosgicontainerbuildersosgimanifestbuilderfactoryaddpackageimports(osgimanifestbuilderfactoryjava:360)>     at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorygetpackageimports(osgimanifestbuilderfactoryjava:339)>     at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:87)>     at orgeclipseosgicontainerbuildersosgimanifestbuilderfactorycreatebuilder(osgimanifestbuilderfactoryjava:54)>     at orgeclipseosgistoragestoragegetbuilder(storagejava:604)>     at orgeclipseosgistoragestorageinstall(storagejava:531)>      13 more> caused by: javautilnosuchelementexception>     at javautilstringtokenizernexttoken(unknown source)>     at orgosgiframeworkversionrange<init>(versionrangejava:157)>      19 more";ok thank you for the report ! and fix in #679  || now that #679 is closed this one can be closed too i guess ||;1;0;provide orgjunit package to test bundle and run tests inside it;
1854;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1853: allow @mockitosettings to be inherited;-  read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/contributing.md);;1853.0;1853: allow @mockitosettings to be inherited;-  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;  > > > could you add a regression test in the junit-jupiter-test testsuite?ive just amended the commit with a test ||;allow @mockitosettings to be inherited;" -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  provide versions (mockito / jdk / os / any other relevant information) -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide]( have a base test class which among other things mocks a ""servicelocator"" and a very common class used by many other services:```java@extendwith(mockitoextensionclass)public abstract class domainservicetests<t> {	@mock	protected servicelocator sl	@spy	protected userenvironmentservice userenvironment	@beforeeach	public void setup() throws exception {		mockitowhen(slget(userenvironmentserviceclass))thenreturn(userenvironment)	}}```but whenever any test try to mock the get method of this servicelocator with a different class i get an unnecessarystubbingexception:```orgmockitoexceptionsmisusingunnecessarystubbingexception:    unnecessary stubbings detected    clean & maintainable test code requires zero unnecessary code    following stubbings are unnecessary (click to navigate to relevant line of code):      1 -> at *domainservicetestssetup(domainservicetestsjava:24)    please remove unnecessary stubbings or use lenient strictness more info: javadoc for unnecessarystubbingexception class```then i specify the strictness in the base test class ```java@mockitosettings(strictness  strictnesswarn)public abstract class domainservicetests<t> {```but even though the strictness is not seen by mockitoi have debugged the code and found that the strictness is retrieved by searching the annotation on the method and the class of the test eventually calls  static <a extends annotation> optional<a> findannotation(annotatedelement element class<a> annotationtype) {	preconditionsnotnull(annotationtype ""annotationtype must not be null"")	boolean inherited  annotationtypeisannotationpresent(inheritedclass)	return findannotation(element annotationtype inherited new hashset<>())}```so if you annotate `mockitosettings` with `javalangannotationinherited` it will work (i turned the inherited variable to true using the debugger to confirm)for now i will have to annotate every test class with```java@mockitosettings(strictness  strictnesswarn)```i am using  gradle 70 with junit 552thanks";feel free to send a pr with a fix awesome issue description :) || hi @timvdlippe i am currently using the **mockito-junit-jupiter v324** and i can see that `@mockitosettings` still does not have inheritance support:```@extendwith(mockitoextensionclass)@retention(runtime)public @interface mockitosettings {   }```do you know when or if there is any plans to release a new version of mockito-junit-jupiter containing this improvement?for now i am including the annotation on each test but it would be great to refactor and keep it on just my abstracttest class || new version should be pushing to maven central as we speak:  || @timvdlippe thats awesome!unfortunately travis is not very happy:```[performrelease] > could not sync mockito/maven/mockito/330 to maven central:  400 bad request [status:sync failed messages:[failed to close repository: orgmockito-1399 server response:[performrelease]    <nexus-error>[performrelease]     <errors>[performrelease]       <error>[performrelease]         <id>*</id>[performrelease]         <msg>unhandled: repository: orgmockito-1399 has invalid state: closed</msg>[performrelease]       </error>[performrelease]     </errors>[performrelease]   </nexus-error> dropping existing partial staging repository]]``` || thats sadly a known issue with maven central but the artifact should be installable for you:  ||;1;0;1853: allow @mockitosettings to be inherited;
1858;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add testrule to mockitojunit;junit has two types of test rules: methodrule and testrule. the existing;;0;add testrule to mockitojunit;junit has two types of test rules: methodrule and testrule the existingmockitojunit rule returns a mockitorule which extends methodrulehowever since this is not a testrule some features of junit do notnicely integrate with mockito for example the rulechain feature ofjunit only works on testrulestherefore add a separate entrypoint to mockitojunit which returns atestrule that can be integrated with rulechain it introduces a separateinterface to make this distinction clear if we would change theexisting mockitorule to also extend testrule the junit logic would nolonger run the methodrule [1] and would thus break existing users[1]: https://githubcom/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/blockjunit4classrunnerjava#l402; merging 1858 ;;;;1;1;process reviewer feedback;
1859;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;add notextensible to ongoingstubbing;this interface is not intended to be subclassed and should therefore be;;0;add notextensible to ongoingstubbing;this interface is not intended to be subclassed and should therefore bemarked as such;  absolutely! ||;;;;1;1;add notextensible to ongoingstubbingthis interface is not intended to be subclassed and should therefore bemarked as such;
1862;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;revert  performance optimization by using method.getparametercount() where possible;reverts mockito/mockito#1849;;0;"revert ""performance optimization by using methodgetparametercount() where possible""";reverts mockito/mockito#1849it breaks all downstream android applications see https://githubcom/mockito/mockito/pull/1849#issuecomment-577139089; merging 1862  < ;;;;1;1;"revert ""performance optimization by using methodgetparametercount() where possible""";
1868;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update mockito version number for deletion of deprecated classes;;;0;update mockito version number for deletion of deprecated classes;; merging 1868 ;;;;1;1;update javadoc regarding deletion of deprecated classes;
1878;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;revert  fixed undetected unused stubbing when matching previous stubbed call;reverts mockito/mockito#1847;;1877.0;"revert "" undetected unused stubbing when matching previous stubbed call""";reverts mockito/mockito#18471877 based on feedback in #1846; merging 1878 ;regression: overriding stubbing;hithere seems to be a regression in 330 from 324 (published on maven central)the documentation states : > stubbing can be overridden: for example common stubbing can go to fixture setup but the test methods can override it please note that overridding stubbing is a potential code smell that points out too much stubbingbut by simply making a copy of a stub by duplicating its line (or more realistically returning a different value in the second stub) an `unnecessarystubbingexception` is thrown :```javaimport static orgjunitjupiterapiassertionsassertequalsimport static orgmockitoargumentmatchersanyimport javaiobytearrayinputstreamimport javaioioexceptionimport orgjunitjupiterapitestimport orgjunitjupiterapiextensionextendwithimport orgmockitomockimport orgmockitomockitoimport orgmockitojunitjupitermockitoextension@extendwith(mockitoextensionclass)public class atest {  @mock  private bytearrayinputstream stream  @test  public void duplicate() throws ioexception {    mockitowhen(streamread(any()))thenreturn(1337)    mockitowhen(streamread(any()))thenreturn(1337) // duplicate line    int value  streamread(new byte[2048])    assertequals(1337 value)  }}``````orgmockitoexceptionsmisusingunnecessarystubbingexception: unnecessary stubbings detectedclean & maintainable test code requires zero unnecessary codethere are 1 unnecessary stubbing (click to navigate to relevant line of code):  1 -> at atestduplicate(atestjava:21)please remove unnecessary stubbings or use lenient strictness more info: javadoc for unnecessarystubbingexception class	at orgmockitojunitjupitermockitoextensionaftereach(mockitoextensionjava:181)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invokeaftereachcallbacks$11(testmethodtestdescriptorjava:248)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invokeallaftermethodsorcallbacks$13(testmethodtestdescriptorjava:268)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invokeallaftermethodsorcallbacks$14(testmethodtestdescriptorjava:268)	at javabase/javautilarraylistforeach(arraylistjava:1540)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvokeallaftermethodsorcallbacks(testmethodtestdescriptorjava:267)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvokeaftereachcallbacks(testmethodtestdescriptorjava:247)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:143)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:71)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:135)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at orgjunitplatformenginesupporthierarchicalforkjoinpoolhierarchicaltestexecutorservice$exclusivetaskcompute(forkjoinpoolhierarchicaltestexecutorservicejava:171)	at orgjunitplatformenginesupporthierarchicalforkjoinpoolhierarchicaltestexecutorserviceinvokeall(forkjoinpoolhierarchicaltestexecutorservicejava:115)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at orgjunitplatformenginesupporthierarchicalforkjoinpoolhierarchicaltestexecutorservice$exclusivetaskcompute(forkjoinpoolhierarchicaltestexecutorservicejava:171)	at orgjunitplatformenginesupporthierarchicalforkjoinpoolhierarchicaltestexecutorserviceinvokeall(forkjoinpoolhierarchicaltestexecutorservicejava:115)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at orgjunitplatformenginesupporthierarchicalforkjoinpoolhierarchicaltestexecutorservice$exclusivetaskcompute(forkjoinpoolhierarchicaltestexecutorservicejava:171)	at javabase/javautilconcurrentrecursiveactionexec(recursiveactionjava:189)	at javabase/javautilconcurrentforkjointaskdoexec(forkjointaskjava:290)	at javabase/javautilconcurrentforkjoinpool$workqueuetoplevelexec(forkjoinpooljava:1020)	at javabase/javautilconcurrentforkjoinpoolscan(forkjoinpooljava:1656)	at javabase/javautilconcurrentforkjoinpoolrunworker(forkjoinpooljava:1594)	at javabase/javautilconcurrentforkjoinworkerthreadrun(forkjoinworkerthreadjava:177)``` -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  provide versions (mockito / jdk / os / any other relevant information) -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide](https://githubcom/mockito/mockito/blob/release/3x/github/contributingmd);;1;0;"revert "" undetected unused stubbing when matching previous stubbed call""";
1881;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix unnecessarystubbingexception javadoc;1880;;1880.0;fix unnecessarystubbingexception javadoc;1880;;unbalanced html tags in javadoc of unnecessarystubbingexception;in the [javadoc of that class]( the `<code` is not closed properly because of this the following paragraphs are rendered in monospace font as wellwhile here `effect not` should be `effect of not`;could you send us a pr to fix this? || wouldnt it be easier if you just added the missing `</code>` and `of`? its just two words || yeah if you could open a pr to make that change we can fix it 😄  || closed due to too complicated workflow || lets reopen so that someone else can make the pr ||;1;0;fix unnecessarystubbingexception javadoc;
1890;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix mocks throwing same instance with throwable class;fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with  dothrow(class)  or  thenthrow(class) .;;1875.0;fix mocks throwing same instance with throwable class;fixes mocks throwing the same throwable instance consecutively after specifying the mock behaviour with `dothrow(class)` or `thenthrow(class)`this is achieved by moving the instantiation of the throwable into a new answer called throwsexceptionclass - much like throwsexception then `thenthrow(class)` calls `thenanswer(answer)` with a new instance of throwsexceptionclass rather than `thenthrow(throwable)` similar for `dothrow(class)` `dothrow(throwable)` and `doanswer(answer)`1875 @timvdlippe just have a quick inquiry: the test in uninstantiablethrowabletest is failing because it expects an instantiationerror to be thrown in the middle of stubbing (check pr #1549) the new code doesnt instantiate in the middle of stubbing anymore how do i ignore the test? or do i just delete the test file? im used to using an annotation to ignore tests the pr should be ready after thats sorted and any other suggested changes;;thenthrow(class) no longer creates new instances;as of #1162 `thenthrow(class)` no longer creates new instances for each invocation  we had tests that were reliant on that behavior for example:```	@test	public void thenthrow() {		supplier<object> r  mock(supplierclass)		when(rget())thenthrow(runtimeexceptionclass)		runtimeexception first  null		for (int i  0 i < 2 i++) {			try {				rget()			} catch (runtimeexception e) {				if (first  null) {					first  e				} else {					firstaddsuppressed(e)				}			}		}		if (first ! null) {			throw first		}	}```these tests now fail:```javalangillegalargumentexception: self-suppression not permitted	at javalangthrowableaddsuppressed(throwablejava:1043)	at exampletestthenthrow(testjava:10)```;hello ive taken a look at the issue and it is still apparent in commit 560adf377677a4a2c658a0b24e2f9c2e0b373c20 it appears to be that `thenthrow(class)` instantiates the throwable when it is called rather than instantiating it upon mock interaction### backgroundto why this leads to the behaviour described in the issue is that the throwable is passed to `thenthrow(throwable)` which instantiates a custom answer with `new throwsexception(throwable)` and passes into `thenanswer(answer)` this answer of course stores the throwable and throws it with every repeat mock interactionbefore the merge `thenthrow(class)` used to call `thenanswer(answer)` directly with its own custom answer throwsexceptionclass this answer instantiated the exception with each mock interaction### suggested solutionmy suggestion is to introduce an answer similar to throwsexceptionclass described above (or a modified version of throwsexception) and have `thenthrow(class)` create that and call `thenanswer(answer)`i can think of two ways to implement the suggestion both ways involve storing the class\<throwable\> and using objenesis to instantiate the throwable in the new answer class however:1 create the new answer class with similar code to throwsexception but instead of throwing the stored throwable it uses a new instance based of the stored class\<throwable\>2 modify throwsexception to use a protected getter method for the throwable then extend throwsexception with the new answer for class\<throwable\> which overrides the getter method to instantiate a new throwableoption 1 doesnt modify existing behaviour that works but has more duplicate code option 2 offers less duplicate code but modifies existing behaviour that worksi prefer option 2 || happy to review a pr for this we probably need to make a few iterations on the design but agreed we can fix this issuehowever if the necessary changes appear to be complicated i am inclined to close this as working as intended ||;1;0;1875 : fix mocks throwing same instance with throwable classfixes mocks throwing the same instance consecutively of a giventhrowable class after specifying the mock behaviour with dothrow(class)or thenthrow(class);
1893;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;id : 1888;pr to fix the typo in the documentation;;0;id : 1888;pr to fix the typo in the documentation;;;;;1;1;id : 1888;
1895;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1894 checkstyle error on windows;windows has some issues with relative paths in checkstyle config files  additionally it failed with an euro sign in code.;;1894.0;1894 checkstyle error on windows;windows has some issues with relative paths in checkstyle config files additionally it failed with an euro sign in codeplease verify if it also works on unix env; ;checkstyle error on windows;hi i cant build the project on windows it ends with error:<details>$ /gradlew clean build --parallel> configure project :  building version 2283 (value loaded from versionproperties file)> task  checkstyletest failed> task  checkstylemain failed> task  checkstylemain failed> task :junit-jupiter:checkstylemain failed> task  checkstyletest failedw: detected multiple kotlin daemon sessions at build\kotlin\sessionsfailure: build completed with 5 failures1: task failed with an exception-----------* what went wrong:execution failed for task  checkstyletest> unable to create root module: config {g:\programowanie\forki\mockito\config\checkstyle\checkstylexml} classpath {g:\programowanie\forki\mockito\subprojects\deprecatedpluginstest\build\classes\java\testg:\programowanie\forki\mockito\subprojects\deprecatedpluginstest\build\resources\testg:\programowanie\forki\mockito\subprojects\deprecatedpluginstest\build\classes\java\maing:\programowanie\forki\mockito\subprojects\deprecatedpluginstest\build\resources\maing:\programowanie\forki\mockito\build\libs\mockito-core-2283jarf:\programowanie\gradlecache\caches\modules-2\files-21\junit\junit\412\2973d150c0dc1fefe998f834810d68f278ea58ec\junit-412jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy\1910\211a2b4d3df1eeef2a6cacf78d74a1f725e7a840\byte-buddy-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-agent\1910\9674aba5ee793e54b864952b001166848da0f26b\byte-buddy-agent-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgobjenesis\objenesis\26\639033469776fd37c08358c6b92a4761feb2af4b\objenesis-26jarf:\programowanie\gradlecache\caches\modules-2\files-21\orghamcrest\hamcrest-core\13\42a25dc3219429f0e5d060061f71acb49bf010a0\hamcrest-core-13jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights2: task failed with an exception-----------* what went wrong:execution failed for task  checkstylemain> unable to create root module: config {g:\programowanie\forki\mockito\config\checkstyle\checkstylexml} classpath {g:\programowanie\forki\mockito\subprojects\android\build\classes\java\maing:\programowanie\forki\mockito\subprojects\android\build\resources\maing:\programowanie\forki\mockito\build\libs\mockito-core-2283jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-android\1910\fda8cb1715f7063c6177b0b3e9c09096b13b4bbb\byte-buddy-android-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy\1910\211a2b4d3df1eeef2a6cacf78d74a1f725e7a840\byte-buddy-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-agent\1910\9674aba5ee793e54b864952b001166848da0f26b\byte-buddy-agent-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgobjenesis\objenesis\26\639033469776fd37c08358c6b92a4761feb2af4b\objenesis-26jarf:\programowanie\gradlecache\caches\modules-2\files-21\comjakewhartonandroidrepackaged\dalvik-dx\1\5344672f614ef1df39f7a9d88a5aa0e44d74d4d9\dalvik-dx-1jarf:\programowanie\gradlecache\caches\modules-2\files-21\comjakewhartonandroidrepackaged\libcore-dex\2\1d3c98644912295ca8cb80069b1cdea4389085b2\libcore-dex-2jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights3: task failed with an exception-----------* what went wrong:execution failed for task  checkstylemain> unable to create root module: config {g:\programowanie\forki\mockito\config\checkstyle\checkstylexml} classpath {g:\programowanie\forki\mockito\subprojects\errorprone\build\classes\java\maing:\programowanie\forki\mockito\subprojects\errorprone\build\resources\maing:\programowanie\forki\mockito\build\libs\mockito-core-2283jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\error_prone_core\232\d5d121a23bcd48df2fe42dc3f1424cd05872993\error_prone_core-232jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleautoservice\auto-service\10-rc5\d25246bae325b4bcc63b55d6d782515fac32215a\auto-service-10-rc5jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy\1910\211a2b4d3df1eeef2a6cacf78d74a1f725e7a840\byte-buddy-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-agent\1910\9674aba5ee793e54b864952b001166848da0f26b\byte-buddy-agent-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgobjenesis\objenesis\26\639033469776fd37c08358c6b92a4761feb2af4b\objenesis-26jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\error_prone_check_api\232\7415438c00adec8ba707689ec4168c8484d8403b\error_prone_check_api-232jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\error_prone_annotation\232\7c554c59dd2ea8c4e9e36b3308f8bf92db83e70c\error_prone_annotation-232jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\error_prone_type_annotations\232\e79e88b9051888c8ea806f49c86fa7e3e3728180\error_prone_type_annotations-232jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgithubstephencjcip\jcip-annotations\10-1\ef31541dd28ae2cefdd17c7ebf352d93e9058c63\jcip-annotations-10-1jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgpcollections\pcollections\212\15925fd6c32a29fe3f40a048d238c5ca58cb8362\pcollections-212jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleauto\auto-common\010\c8f153ebe04a17183480ab4016098055fb474364\auto-common-010jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleguava\guava\2701-jre\bd41a290787b5301e63929676d792c507bbc00ae\guava-2701-jrejarf:\programowanie\gradlecache\caches\modules-2\files-21\comgooglecodefindbugs\jformatstring\300\d3995f9be450813bc2ccee8f0774c1a3033a0f30\jformatstring-300jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgooglecodefindbugs\jsr305\302\25ea2e8b0c338a877313bd4672d3fe056ea78f0d\jsr305-302jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgcheckerframework\dataflow\253\edf284e0838290d661b22483ecf648065e7ec440\dataflow-253jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\javac\9+181-r4173-1\bdf4c0aa7d540ee1f7bf14d47447aea4bbf450c5\javac-9+181-r4173-1jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleerrorprone\error_prone_annotations\232\d1a0c5032570e0f64be6b4d9c90cdeb103129029\error_prone_annotations-232jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleprotobuf\protobuf-java\340\b32aba0cbe737a4ca953f71688725972e3ee927c\protobuf-java-340jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleautoservice\auto-service-annotations\10-rc5\6ea999af2b6262a7179a09c51a3d54e7b40a3833\auto-service-annotations-10-rc5jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgooglecodejava-diff-utils\diffutils\130\7e060dd5b19431e6d198e91ff670644372f60fbd\diffutils-130jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgithubkevinstern\software-and-algorithms\10\5e77666b72c6c5dd583c36148d17fc47f944dfb5\software-and-algorithms-10jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgcheckerframework\javacutil\253\c545ca6fc7a57e3bc65d46e8e9438376f0db35ea\javacutil-253jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgcheckerframework\checker-qual\253\4fe154d21bd734fe8c94ada37cdc41a9a6d61776\checker-qual-253jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleguava\failureaccess\101\1dcf1de382a0bf95a3d8b0849546c88bac1292c9\failureaccess-101jarf:\programowanie\gradlecache\caches\modules-2\files-21\comgoogleguava\listenablefuture\99990-empty-to-avoid-conflict-with-guava\b421526c5f297295adef1c886e5246c39d4ac629\listenablefuture-99990-empty-to-avoid-conflict-with-guavajarf:\programowanie\gradlecache\caches\modules-2\files-21\comgooglej2objc\j2objc-annotations\11\ed28ded51a8b1c6b112568def5f4b455e6809019\j2objc-annotations-11jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgcodehausmojo\animal-sniffer-annotations\117\f97ce6decaea32b36101e37979f8b647f00681fb\animal-sniffer-annotations-117jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights4: task failed with an exception-----------* what went wrong:execution failed for task :junit-jupiter:checkstylemain> unable to create root module: config {g:\programowanie\forki\mockito\config\checkstyle\checkstylexml} classpath {g:\programowanie\forki\mockito\subprojects\junit-jupiter\build\classes\java\maing:\programowanie\forki\mockito\subprojects\junit-jupiter\build\resources\maing:\programowanie\forki\mockito\build\libs\mockito-core-2283jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgjunitjupiter\junit-jupiter-api\511\fcca73c9c2825c9a966380c6d146a71acba233ca\junit-jupiter-api-511jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy\1910\211a2b4d3df1eeef2a6cacf78d74a1f725e7a840\byte-buddy-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-agent\1910\9674aba5ee793e54b864952b001166848da0f26b\byte-buddy-agent-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgobjenesis\objenesis\26\639033469776fd37c08358c6b92a4761feb2af4b\objenesis-26jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgjunitplatform\junit-platform-commons\111\36fca464a84454cf56ae2759a8ba18d6d99d1113\junit-platform-commons-111jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgapiguardian\apiguardian-api\100\3ef5276905e36f4d8055fe3cb0bdcc7503ffc85d\apiguardian-api-100jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgopentest4j\opentest4j\100\6f09c598e9ff64bf0ce2fa7e7de49a99ba83c0b4\opentest4j-100jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights5: task failed with an exception-----------* what went wrong:execution failed for task  checkstyletest> unable to create root module: config {g:\programowanie\forki\mockito\config\checkstyle\checkstylexml} classpath {g:\programowanie\forki\mockito\subprojects\inline\build\classes\java\testg:\programowanie\forki\mockito\subprojects\inline\build\resources\testg:\programowanie\forki\mockito\subprojects\inline\build\classes\java\maing:\programowanie\forki\mockito\subprojects\inline\build\resources\maing:\programowanie\forki\mockito\build\libs\mockito-core-2283jarf:\programowanie\gradlecache\caches\modules-2\files-21\junit\junit\412\2973d150c0dc1fefe998f834810d68f278ea58ec\junit-412jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy\1910\211a2b4d3df1eeef2a6cacf78d74a1f725e7a840\byte-buddy-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\netbytebuddy\byte-buddy-agent\1910\9674aba5ee793e54b864952b001166848da0f26b\byte-buddy-agent-1910jarf:\programowanie\gradlecache\caches\modules-2\files-21\orgobjenesis\objenesis\26\639033469776fd37c08358c6b92a4761feb2af4b\objenesis-26jarf:\programowanie\gradlecache\caches\modules-2\files-21\orghamcrest\hamcrest-core\13\42a25dc3219429f0e5d060061f71acb49bf010a0\hamcrest-core-13jar}* try:run with --stacktrace option to get the stack trace run with --info or --debug option to get more log output run with --scan to get full insights* get more help at  gradle features were used in this build making it incompatible with gradle 60use --warning-mode all to show the individual deprecation warningssee  failed in 38s108 actionable tasks: 87 executed 7 from cache 14 up-to-date</details>ive  this issue but just need an issue for pr;could you paste the full build output? you can wrap it in `<details></details>` here on github to prevent a wall of textalso feel free to open your pr and happy to take a look || pr created -  please verify on unix(there are 2 commits because at first i didnt know that v2 is in maintenance only so i created new branch from release/3x hence the second commit) ||;1;0;1894 : windows has some issues with relative paths in config files additionally it failed with an euro sign in code;
1896;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;feature/returns empty java8 time;im not sure why i see the commit [ that was already merged in changes  but:;;0;feature/returns empty java8 time;im not sure why i see the commit [ that was already merged in changes but:when creating this pr i had in mind that i would merge with branch 2x (i didnt know back then that v2x is maintenance only) hence the reflection-based methods (also to keep the coding style of the returnsemptyvalues class);@kluever could you review this please? you are the expert on the these apis 😄  || wow its crazy how much effort has to be done to maintain pre-java8 compatibility!left a comment about potential other defaults for other `javatime` types but otherwise  yes it is very unfortunate that android does not ship these java 8 apis 😭  || a few more cleanups but otherwise lgtm ||  merging 1896 ;;;;1;1;removing leftovers;
1906;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;[documentation] change deprecated warnings from 3.x -> 4.x;problem;;0;[documentation] change deprecated warnings from 3x -> 4x;problemwith the release of mockito 3x as a purely java language versionchange most of the comments referencing 3x are wrongsolutionmigrate the references to 3x that i could find to 4x[ci skip-release] -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;;;;;1;1;[documentation] change deprecated warnings from 3x -> 4xproblemwith the release of mockito 3x as a purely java language versionchange most of the comments referencing 3x are wrongsolutionmigrate the references to 3x that i could find to 4x[ci skip-release];
1907;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;[tests] use argumentmatchers over matchers;problem matchers are considered deprecated but our own tests still use them.  solution stop using using them. replace with argumentmatchers  [ci skip-release]  check list   -  read the [contributing guide](  -  pr should be motivated  i.e. what does it fix  why  and if relevant how  -  if possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  -  avoid other runtime dependencies  -  meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  -  the pull request follows coding style  - [/] mention  <issue number>  in the description _if relevant_  -  at least one commit should mention  fixes #<issue number>  _if relevant_;;0;[tests] use argumentmatchers over matchers;problemmatchers are considered deprecated but our own tests still use themsolutionstop using using them replace with argumentmatchers[ci skip-release]check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style - [/] mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;this pr ignores verificationusingmatcherstest which while undocumented i take to mean should explicitly use `matchers` while they exist ||  ;;;;1;1;[tests] use argumentmatchers over matchersproblem`matchers` are considered deprecated but our own tests still use themsolutionstop using using them replace with `argumentmatchers`[ci skip-release];
1911;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1910: update description of argumentmatcher javadoc;for any()  the doc says that;;1910.0;1910: update description of argumentmatcher javadoc;"for any() the doc says that""any() is an alias of: anyobject() and any(javalangclass)""but in the note it says that""since mockito 210 any(class) is not anymore an alias of this method""this is confusing so the alias in the doc should exclude any(javalangclass) to simply be""any() is an alias of: anyobject()""also update the same issue of anyobject()check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_";;documentation of argumentmatchers any() is confusing; doc says that > any() is an alias of: anyobject() and any(javalangclass)but in the note it says that > since mockito 210 any(class) is not anymore an alias of this methodthis is confusing so the alias in the doc should exclude any(javalangclass) to simply be > any() is an alias of: anyobject()the doc of anyobject() also has the same confusing issue;;1;0;"1910: update description of argumentmatcher javadocfor any() the doc says that""any() is an alias of: anyobject() and any(javalangclass)""but in the note it says that""since mockito 210 any(class) is not anymore an alias of this method""this is confusing so the alias in the doc should exclude any(javalangclass) to simply be""any() is an alias of: anyobject()""also update the same issue of anyobject()";
1914;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix pattern matcher not matching to subregion;issue #1905 talked about a particular pattern using java s pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answer.;;190.0;fix pattern matcher not matching to subregion;issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment]( in #1905) this commit fixes that by using `matcherfind()`1905;;build fails with noclassdeffounderror on cglibmockmaker;hi   my maven build fails when i try to mock a class with the error below i am beginner with mockito can someone please help with this? i am trying to build from command line i am trying to build a scala project java version: 17project type: scala projectmockito version: ``` xml<dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-all</artifactid>    <version>11019</version></dependency>```error that i get during maven build:```←[31m*** run aborted ***←[0m←[31m  javalangnoclassdeffounderror: org/mockito/internal/creation/cglibmockmaker←[0m←[31m  at orgpowermockapimockitointernalmockmakerpowermockmaker<init>(powermockmakerjava:40)←[0m←[31m  at sunreflectnativeconstructoraccessorimplnewinstance0(native method)←[0m←[31m  at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:57)←[0m←[31m  at sunreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)←[0m←[31m  at javalangreflectconstructornewinstance(constructorjava:526)←[0m←[31m  at javalangclassnewinstance(classjava:374)←[0m←[31m  at orgmockitointernalconfigurationpluginspluginloaderloadimpl(pluginloaderjava:61)←[0m←[31m  at orgmockitointernalconfigurationpluginspluginloaderloadplugin(pluginloaderjava:24)←[0m←[31m  at orgmockitointernalconfigurationpluginspluginregistry<init>(pluginregistryjava:12)←[0m←[31m  at orgmockitointernalconfigurationpluginsplugins<clinit>(pluginsjava:11)←[0m←[31m  ←[0m←[31m  cause: javalangclassnotfoundexception: orgmockitointernalcreationcglibmockmaker←[0m←[31m  at javaneturlclassloader$1run(urlclassloaderjava:366)←[0m←[31m  at javaneturlclassloader$1run(urlclassloaderjava:355)←[0m←[31m  at javasecurityaccesscontrollerdoprivileged(native method)←[0m←[31m  at javaneturlclassloaderfindclass(urlclassloaderjava:354)←[0m←[31m  at javalangclassloaderloadclass(classloaderjava:425)←[0m←[31m  at sunmisclauncher$appclassloaderloadclass(launcherjava:308)←[0m←[31m  at javalangclassloaderloadclass(classloaderjava:358)←[0m←[31m  at orgpowermockapimockitointernalmockmakerpowermockmaker<init>(powermockmakerjava:40)←[0m←[31m  at sunreflectnativeconstructoraccessorimplnewinstance0(native method)←[0m←[31m  at sunreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:57)←[0m←[31m  ←[0m```;hiwe are happy that you are using mockito but for support please use the [mockito mailing-list]( or [stackoverflow]( :)with the given info theres not enough info to diagnose the issue it seems to be related to classpath though  || oh i just identified the issue this project is using powermock which is depending / hacking in mockito internals those have change in version 1108 however theres a new version of powermock 162 that work with mockito 11019 || thanksit did the trick  and saved my time!! :) || this trick saved my life || you saved the day bro!thanks :) || thanks a lot bric3 :) ||;1;0;1905 : fix pattern matcher not matching to subregionissue #1905 talked about a particular pattern using javas pattern thatcauses mockito to not properly match the argument (provided with aninvocation) to the expected answer it was later discovered that thepattern matcher matches to the entire region not some subregion byusing javas matchermatch() this commit fixes that by usingmatcherfind();
1914;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix pattern matcher not matching to subregion;issue #1905 talked about a particular pattern using java s pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answer.;;1905.0;fix pattern matcher not matching to subregion;issue #1905 talked about a particular pattern using javas pattern class that causes mockito to not properly match the argument (provided with an invocation) to the expected answerit was later discovered that the pattern matcher matches to the entire region not some subregion by using javas `matchermatch()` (see [comment]( in #1905) this commit fixes that by using `matcherfind()`1905;;argumentmatchersmatches not working;"* ver mockito-core:333* java pattern and java matcher```javapattern pat  patterncompile(""^zman-server-"")matcher mat  patmatcher(""zman-server-storeproperties"")matfind() // return true```* mockito matcher not wrking:```when(streamerload( matches(pat)))thenreturn(stream)output:- this invocation of load method:    streamerload(    ""zman-server-storeproperties"") - has following stubbing(s) with different arguments:    1 streamerload("""")```";helloive taken a look at the issue and after doing some digging i found that `matches(pattern)` uses [`javautilregexmatchersmatches()`]( in `orgmockitointernalmatchersmatchesmatches(object)` which requires the entire region to match not just some sub-region like [`matchersfind()`]( does this means that your matcher fail when testing to see if your answer `thenreturn(stream)` is suitable for the mocks `load()` invocationill probably make a pr with the solution appropriate acceptance testing and any needed documentation changes || thx that explain a lot ||;1;0;1905 : fix pattern matcher not matching to subregionissue #1905 talked about a particular pattern using javas pattern thatcauses mockito to not properly match the argument (provided with aninvocation) to the expected answer it was later discovered that thepattern matcher matches to the entire region not some subregion byusing javas matchermatch() this commit fixes that by usingmatcherfind();
1928;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;junit 5 strict stubs check should not suppress the regular test failure;if the test fails  mockitoextension should not check for strict stubs at the end of the test  because the possible unnecessarystubbingexception will end up as a suppressed exception on the test s initial failure.;;0;junit 5 strict stubs check should not suppress the regular test failure;if the test fails mockitoextension should not check for strict stubs at the end of the test because the possible unnecessarystubbingexception will end up as a suppressed exception on the tests initial failure;good idea will review shortly thank you for the contribution! ||  merging 1928 ` ;;;;1;1;fortified an assertion;
1931;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update report message to use any() instead of anyobject();because  anyobject()  has already been deprecated  it would be better to push to use  any()  instead.;;0;update report message to use any() instead of anyobject();because `anyobject()` has already been deprecated it would be better to push to use `any()` insteadthanks for the contribution this is awesome> as you may have read project members have somehow an opinionated view on what and how should be> mockito eg we dont want mockito to be a feature bloat> there may be a thorough review with feedback -> code change loop> > which branch : > - on mockito 3x make your pull request target `release/3x`> - on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)>> _this block can be removed_> _something wrong in the template fix it here `github/pull_request_templatemd`check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; ;;;;1;1;update report message to use any()because anyobject() has already been deprecated it would be better to push to use any();
1934;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;use google-java-format in spotless;google-java-format is an open source formatter [1]. it automatically formats;;0;use google-java-format in spotless;google-java-format is an open source formatter [1] it automatically formatssource code based on the google java stylethe mockito source code to a very large extent already adheres to this styleguide while this pr in itself is large many of the changes are related tostring formatting and nested method calls most notably google-java-formatis an improvement over the current formatting strategy in that:1 it handles comment formatting (eg spacing between comments)2 it handles nested method calls you can see the difference inour usage of the bytebuddy api which is now more consistent3 it enforces the max-line lengthit essentially automates all of the styling rules we list in such for new contributors it should be a lot easier (and less scary)to contribute to mockito as they no longer have to be concerned aboutformatting hopefully this once again lowers the bar for external contributorswho want to help the project but would otherwise feel overwhelmed bythe rules we have to adhere to (if we wouldnt have these rules it wouldbe a lot harder for us to maintain a consistent and maintainable codebase)the only interesting changes in this pr are those in `buildgradle` allother changes were auto-generated by running `/gradlew spotlessapply`note that i disabled the formatting of javadoc as i think we should keep formattingthat ourselves we normally put a lot of time and effort in our javadoc and changingthat all at once seems like the wrong decision at this point in time[1]: https://githubcom/google/google-java-format;ah i see gjf requires java 11 to run but we run on older versions of java we could configure travis to only run the check on java 11 since our formatting is not java-version specific || @mockitoguy @raphw @bric3 do you have any objections/thoughts on this pr? if you dont have any i can polish the pr and make sure travis happy and all || thanks @mockitoguy and @bric3 for the review i will relay the feedback about the formatting output to the google-java-format team and get them take a look since on the overall this change is a plus i think we can merge without the fixes but i will make sure they will be followed up on i agree with your comments so we can probably make a good case for fixing 😄 i will address the travis changes in a separate pr as that requires some cleanup there as well then i will rebase this pr and regenerate the formatting changesthanks for the quick response after the ping greatly appreciated!  ||   merging 1934 ;;;;1;1;fix test that puts 2 statements on the same line;
1938;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;update javadoc - remove deprecated class;the javadoc is misleading - pointing to the deprecated class returnselementsof that should later be internal or moved;;0;update javadoc - remove deprecated class;the javadoc is misleading - pointing to the deprecated class returnselementsof that should later be internal or moved;;;;;1;1;update javadoc - remove deprecated classthe javadoc is misleading - pointing to the deprecated class returnselementsof that should later be internal or moved;
1942;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1898 : return mock name from tostring method for deep stub mocks;return mock name from tostring for deep stub mocks. it was previously returning null.;;189.0;1898 : return mock name from tostring method for deep stub mocks;return mock name from tostring for deep stub mocks it was previously returning null1898; merging 1942 ;compatibility of bddmockitothen() with assertj and catch-exception;"mockitos `bddmockitothen()` clashes with assertjs `bddassertionsthen()` and catch-exceptions `bddcatchexceptionthen()` meaning that in a same test class it is not possible to use bdd style to assert simultaneously:- a mocks behaviour (bddmockito: `then(dependency)delete(1)`)- a return value (bddassertions: `then(result)isequalto(""value"")`)- an exception throw (bddcatchexception: `then(caughtexception())isinstanceof(blahexceptionclass)`)it is not clear which library exactly could resolve this issue but currently this conflict reduces the usability of all three of them if they are all needed within a same test class then static import cannot be used and even when used in separate test classes the developer can get quite easily confused as to which static import is required";"correction > it is not possible to use bdd style to assert simultaneously **when using static imports**_catch-exception_ lib will no more be updated as stated by his author then i dont see any reasonable way to fix this in any lib as they are not coupled and they have no reason to we wont remove or rename this api `bddmockitothen` and id rather not introduce too many aliasesin the mean time the only sensible thing to do would be to create a class that can serve as an api dispatcher in pseudo code something like:``` javabdddispatcher {     assertjthen()    thenverify()    }``` || > catch-exception lib will no more be updated as stated by his authorcould you show where this is stated?  is currently active or what system should be used instead to test exceptions in bdd style?> in the mean time the only sensible thing to do would be to create a class that can serve as an api dispatcherwhat do you mean by in the meantime? what is the long-term solution to cleanly test mocks exceptions and return values in bdd style? `assertjthen` and `thenverify` are quite less readable than `then` and this places the maintenance burden on the developermaybe i will try the spock library to avoid these limitations || > > catch-exception lib will no more be updated as stated by his author> > could you show where this is stated?  is currently active or what system should be used instead to test exceptions in bdd style?i remember i saw it at some point last year on gc at their old home :  but it seem they have changed their plan i didnt even know they migrated to gh actually i prefer assertj for assertions with version 200 theres nifty api on that matter> > in the mean time the only sensible thing to do would be to create a class that can serve as an api dispatcher> > what do you mean by in the meantime?i mean that until mockito team reach consensus on this api change this issue is on hold> what is the long-term solution to cleanly test mocks exceptions and return values in bdd style?its probably a question of taste but i dont see any clarity problem if not using _static imports_ note that the little pseudo code is just random ideas but this can of course be renamed according to your taste maybe asking on the mockito mailing list can help on that matterspock is indeed a great tool i dont know they integrate stuff still if you have feedback im interested || im a guy from catch-exception team :) i would recommend to use `bddassertionsthen` instead of `bddcatchexceptionthen` this combo works fine for java6 and java7 `bddcatchexceptionthen` is here only for compatibility with java8<del>java8 has some problem with generics (bug? or feature) and do not compile i would recommend using assertj `bddassertionsthenthrownby` alone (without catch-exception)</del>issue with java8 is  in latest catch-exception `bddcatchexceptionthen` is deprecated now use `bddassertionsthen` instead || ok great :) i use java 8 and your solution works so things are settled regarding catch-exception by using the assertj api (`bddassertionsthen()`)now the solution on mockito side should imho be the same: use the assertj api (a nifty api as you mentioned) otherwise we are stuck with using `verify()` instead of `then()should()` to check mock interactions and thus cannot use bdd stylei also tested spock 10 (spock-core + spock-spring) to write unit tests and spring integration tests (including with `mockmvc` and transactions) and i can recommend it so far as it covers everything i asked here and much more with a clean bdd style just need some patience to learn groovy and some things which are approached in a different way (eg ""mocking and stubbing of the same method call has to happen in the same interaction"" cfr  || ok thanks for the feedback @mariuszs and thanks for the feedback on spock too :)> now the solution on mockito side should imho be the same: use the assertj apii dont follow you there the only possible thing to do is to add other _tactical_ aliases @szczepiq and i have mixed feelings about that thats why i proposed to create a custom _dispatch_ api with those tactical aliases eg``` javathen(bike)contains(a_handlebar)thena(person)should(times(2))ride(bike)``` || from my users endpoint i see that catch-exception has been able to resolve this issue of conflicting `then()`s by checking caught exceptions through the assertj api so all im saying is that mockito should imho do the same so that the only `then()` that the user should call would be assertjs (which makes sense it _is_ an assertion api) || indeed but assertj has nothing to do with mocks )its not the role of assertj to know mockito internals to check the interactions also current mockito matchers api is based on hamcrest and for several reason upgrading hamcrest has proven to be a difficult task we now even want to remove the dependency on external framework as much as possible including hamcrest || ";1;0;1898 : return mock name from tostring method for deep stub mocks;
1942;0;1;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;1898 : return mock name from tostring method for deep stub mocks;return mock name from tostring for deep stub mocks. it was previously returning null.;;1898.0;1898 : return mock name from tostring method for deep stub mocks;return mock name from tostring for deep stub mocks it was previously returning null1898; merging 1942 ;returns_deep_stubs override a mocks tostring to `null`;"this example describes the issue:```  @test  public void mockswithdeepstubsreturnnameontostring() {    object proudmock  mockitomock(        objectclass        mockitowithsettings()            name(""im a mock!"")            defaultanswer(mockitoreturns_deep_stubs))    // fails tostring() returns null    assertthat(proudmocktostring())isequalto(""im a mock!"")  }```im experiencing this on 2260 (looking at [returnsdeepstubs]( looks like it hasnt changed much since then)i think tostring should still return the mocks name right now it returns a `null`";;1;0;1898 : return mock name from tostring method for deep stub mocks;
1945;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;[travis] replace jdk 9/10 with 14;9/10 are eol since september 2018. 14 is the currently supported;;0;[travis] replace jdk 9/10 with 14;9/10 are eol since september 2018 14 is the currently supportedjava version;yeah i am working on resolving the build issue we need to upgrade our gradle version sadly that turns out to be a whole rabbithole but i think i am close || @timvdlippe it looks like we also have to use errorprone 240 since this is the first version which actually supports java 14> task :compilejava/home/travis/build/mockito/mockito/src/main/java/org/mockito/invocation/invocationonmockjava  error: an unhandled exception was thrown by the error prone static analysis plugin    <t> t getargument(int index)          ^     please report this at  and include the following:     error-prone version: 232     bugpattern: typeparameterunusedinformals     stack trace:     javalangnosuchfielderror: bound  	at comgoogleerrorpronebugpatternstypeparameterunusedinformalsmatchmethod(typeparameterunusedinformalsjava:73)  	at comgoogleerrorpronescannererrorpronescannervisitmethod(errorpronescannerjava:890) || @epeee yes indeed were you able to get gradle working on your machine?! || yes furthermore also the latest travis build ( is failing with the message posted previously || interesting because i was looking at  which is failing for a completely different reason :o || i wonder maybe if the build cache is not working on one job but is working on the other not sure how to diagnose this issue though || oh on the push travis build both tasks failed on the errorprone issue but not the gradle compilation issue so out of 3 tasks only the 1 on the pr build is failing ||  merging 1945 ;;;;1;1;merge branch release/3x into reconfigure-travis;
1949;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1712 : prepend description to assertionerror thrown in verification;;;1712.0;1712 : prepend description to assertionerror thrown in verification;extended mockitoassertionerror to wrap instance of assertionerror in addition to mockitoassertionerror so that the various possible exceptions thrown for non-matching arguments have description prepended to the message;oh it seems like you need to run `/gradlew spotlessapply` locally to fix the formatting issues || i think you need to rebase on release/3x to pick up the latest changes your spotless configuration locally appears to be out-of-date || are you running `/gradlew spotlessapply`? i can take a look on monday why it is not formatting as expected || thanks tim ive rebased now hopefully should fix the formatting issue just squashed the commits ||  merging 1949 ;"""description"" not printing when verify args dont match";"mockito version 2270i have a test that uses `description` inside a `verify` method the `description` is correctly printing when the test fails because we dont interact with the mock```import static orgmockitomockitodescriptionimport static orgmockitomockitospyimport static orgmockitomockitoverifyimport orgjunittestpublic class exampletest {    @test    public void shouldfailwithdescription() {        dependency dependency  spy(dependencyclass)        systemundertest systemundertest  new systemundertest()        systemundertestdosomething(dependency)        verify(dependency description(""failed to call dosomethingelse""))dosomethingelse(false)    }    static class systemundertest {        void dosomething(dependency dependency) {            // dependencydosomethingelse(true) // <---- test fails because we dont interact with mock        }    }    static class dependency {        void dosomethingelse(boolean value) {            //         }    }}```results in this failure message:```orgmockitoexceptionsbasemockitoassertionerror: failed to call dosomethingelse <---- see our descriptionwanted but not invoked:dependencydosomethingelse(false)-> at comexampleexampletest$dependencydosomethingelse(exampletestjava:28)actually there were zero interactions with this mock```in this case the test failed because there were no interactions with this mock however if we update the sut so that it calls the method with the wrong argument:```public class exampletest {    @test    public void shouldfailwithdescription() {        dependency dependency  spy(dependencyclass)        systemundertest systemundertest  new systemundertest()        systemundertestdosomething(dependency)        verify(dependency description(""failed to call dosomethingelse""))dosomethingelse(false)    }    static class systemundertest {        void dosomething(dependency dependency) {             dependencydosomethingelse(true)  // <---- test fails because we pass wrong args        }    }    static class dependency {        void dosomethingelse(boolean value) {            //         }    }}```the test still fails but this time it **does not include the description**:```argument(s) are different! wanted: <----- we should see descriptiondependencydosomethingelse(false)-> at comexampleexampletest$dependencydosomethingelse(exampletestjava:28)actual invocation has different arguments:dependencydosomethingelse(true)-> at comexampleexampletest$systemundertestdosomething(exampletestjava:21)comparison failure: expected :dependencydosomethingelse(false)actual   :dependencydosomethingelse(true)```";"not pretty but this seems to work if i use a `verificationlistener` and manually log the error:```import static orgmockitomockitodescriptionimport static orgmockitomockitospyimport static orgmockitomockitoverifyimport orgjunittestimport orgmockitomockitoimport orgmockitomockitoframeworkimport orgmockitolistenersverificationlistenerpublic class exampletest {    @test    public void shouldfailwithdescription() {        mockitoframework framework  mockitoframework()        string failuremessage  ""failed to call dosomethingelse""        // not all test failures will print the description so we have to manually log it (        verificationlistener listener  verificationevent -> {            if (verificationeventgetverificationerror() ! null) {                systemoutprintln(""failure: "" + failuremessage)            }        }        frameworkaddlistener(listener)        dependency dependency  spy(dependencyclass)        systemundertest systemundertest  new systemundertest()        systemundertestdosomething(dependency)        verify(dependency description(failuremessage))dosomethingelse(false)        // not sure if we need to remove for next test or if mockito will auto-clear        frameworkremovelistener(listener)    }    static class systemundertest {        void dosomething(dependency dependency) {            dependencydosomethingelse(true)  // <---- test fails because we pass wrong args        }    }    static class dependency {        void dosomethingelse(boolean value) {            //         }    }}```now prints out ```failure: failed to call dosomethingelseargument(s) are different! wanted:dependencydosomethingelse(false)-> at comexampleexampletest$dependencydosomethingelse(exampletestjava:47)actual invocation has different arguments:dependencydosomethingelse(true)-> at comexampleexampletest$systemundertestdosomething(exampletestjava:40)comparison failure: expected :dependencydosomethingelse(false)actual   :dependencydosomethingelse(true)``` || i would like to analyze this issue and eventually provide fixes  || i can also verify the same issue || seems like a bug please submit a pr  the cause of this is that reporterargumentsaredifferent() can return-  an orgmockitoexceptionsverificationopentest4jargumentsaredifferent a subclass of orgopentest4jassertionfailederror- an orgmockitoexceptionsverificationjunitargumentsaredifferent a subclass of junitframeworkcomparisonfailureaccording to whether opentest or junit is available in the classpath neither of these crucially extends mockitoassertionerror hence the exception is not caught in descriptionverify and wrapped in a mockitoassertionerror with the description that would only happen if neither opentest nor junit were in the classpathi think the catch block there should also catch these other exceptions and handle them in a similar way to include the description text || its extending those because of tooling and ide support i believe in intellij idea for example this error is displayed really nice you can see and compare the differences on the arguments || the various argumentsaredifferent exceptions come from orgmockitointernaljunitexceptionfactory which deals solely with that condition the header comment of mockitoassertionerror suggests it should be the base of all verification errors triggered by verify() methods so maybe some refactoring is required i dont know enough to say whether the solution is to handle the exceptions which are actually being thrown or change to throw subclasses of mockitoassertionerror which would then fix the issue || created a pr with a possible solution:  || ";1;0;1712 : fix formatting;
1951;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;use errorprone 2.4.0;in order to get java14 ready.;;0;use errorprone 240;in order to get java14 readysee  for details;;;;;1;1;use errorprone 240in order to get java14 readysee  for details;
1953;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;fix a confusing typo in subclassing error message;;;0;fix a confusing typo in subclassing error message;; ;;;;1;1;merge branch release/3x into patch-1;
1955;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;mockito #1013: defines and implements api for static mocking.;1013 - allows for static method mocking in mockito.;;1013.0;mockito #1013: defines and implements api for static mocking;1013 - allows for static method mocking in mockito;"i thought about it but i am pretty confident that this is what its gonna be! i suggest we put the apis as incubating as we have done with the inline mock maker if we commit to the api even in a separate artifact i think the android folks will still go for it and have a similar expectation on its stabilityyou think a separate artifact would be cleaner? || i mostly prefer a conservative route if we have that option but keeping as incubating is okay with me || i think id prefer the single artifact its fully opt-in and does not touch any existing code i think this way it will be used more and well find out the adoption quicker ||  merging 1955  ";enable mocking static methods in mockito;# static methods mocking with mockitothis is a placeholder ticket for enabling mocking static methods in mockito example action items that are totally negotiable and can ran in parallel were looking for someone who can lead this effort-  research + discuss whether it is a good idea to enable static methods mocking in mockito the theory is that it is useful for legacy code which is most code in the world-  research on how other mocking frameworks do that and whether it is considered useful feature for their users-  design and present for discussion an api for static mocking (slightly relevant ticket: #643)-  work with @raphw / bytebuddy to come up with hacky prototype (the hackier the better!)-  mold the prototype with the api remove enough rough edges so that the feature is good enough for incubating rollout-  ship it!;"i am torn on this one if we provide this possibility we might invite developers into bad practices every time a developer uses this feature it should be very explicit that it is bad practice imo would it be possible to come up with a solution that is clear on this front but still allows the developer to opt-in? || great feedback thats the first thing to figure out when working on this ticket :) || the way i saw mocking of static methods for myself was to only mock calls to static methods that happen within a mock this would be useful for example for implementing spies in a situation like:```javaclass foo {  string bar() { return utilmakestring() }}```with mockito i would like to see something like:```javafoo foo  spy(new foo())doreturn(""foo"")when(foo)invokesstatic(utilclass)makestring()assertthat(foobar())isequalto(""foo"")```what do you think? as for a hack i am missing a component in byte buddy which i was supposed to write for a customer at some point what did however not pull through i am not currently in a position to spend so much time to build this component due to my personal situation but please prototype away i think the api and spec work is crucial to make this a success || great feedback! thank you rafael for sharing your thoughtsis the component you mentioned a lot of work in bytebuddy? is this something that we can ask the community to help out or youre the best person to take on?id rather see more robust api but your api idea is certainly workable mocking statics should be rare and our api should be optimized for common use cases and not edge/rare cases we can always iterate based on feedback :)heres my preference as of today:```java//setupmockstatic(utilclass)//thendoanswer()when(() -> utilfoo())when(utilfoo())thenreturn(""foo"")verify(() -> utilfoo())verify(never() () -> utilfoo())```if we choose to support mocking static methods id rather offer api that is robust enough to support all kinds of use cases i like when tools are separated from policies and are opinionated but not dogmatic :) if we think that mocking static is disgusting we can ship it in a different jar called ""mockito-for-crappy-code"" loosely following @timvdlippe ideathe main use cases for mocking statics i see are: - legacy code (i really really want to write a unit test but i dont dare to change some ancient ugly code) - dealing with some awkward static 3rd party apis this scenario is currently workable by developing some injectable api layer on top of 3rd party statics however the workaround could be cumbersome and can spoil the clarity of codebasewithout addressing above 2 use cases developers around the world will be looking for help in tools like powermockito and suchthe biggest downside of offering static mocking is making it too easy to test crappy procedural code full of static methods we would remove a motivation to refactor the code into clean oo / di || should we also send out a tweet to gather some community insights? || if this feature uses the java instrumentation api it will not work on android devices so it might confuse android developersif so i think it should not be integrated into the `mockito-core` artifact || i came across this issue by chance (i was just curious to know what you were planning for mockito 3) but id like to share my experiences of working with static method mockingi used to work on several large codebases that made extensive use of static methods and used powermock (and powermockito) heavily for testing my main memories of that time were that the tests were really slow to run (in some cases tests that use powermock were literally ten times slower than those that didnt) and that we ultimately had to remove all usages of powermock because it wasnt compatible with newer versions of java i also recall there being incompatibilities with some libraries were using that required special setup in the tests to make them pass although i no longer remember the details of thati can understand concerns about promoting bad code but as a mockito user id be more worried about the impact on performance and robustness not all of the code we were using powermock for was legacy some of it was new code written by an inexperienced team (of which i was part of) and knowing that mockito devs disapproved of our design patterns probably wouldnt have made any differencethis was a few years ago now and techniques for mocking static methods may have improved significantly since then if you think theres a performant and robust way to implement this feature then id welcome it (even though id hope i never have to use it) || really good feedback thank you guys i helps us make good decisions about the features/api we plan || in my opinion in general testing static methods is a bad idea and it would be better to refactor the code however sometimes its something that is needed for instance testing a default method `given()` in [mockito-java8 interface]( delegating to a static method in `bddmockitogiven()` the easiest solution i see is to generate in runtime a list of static methods in `bddmockito` and execute parameterized test for every of them verifying that a corresponding method in `withbddmockito` interface delegates to it with proper parameters in that case static method mocking would be beneficial maybe i will wait for powermockito for mockito v2 to test mockito itselfalternatively i would need to play with aop and load-time weaving code generation in runtime or some other not very pleasant to use technique (unless you have some good ideas how to do it easier) || @szpak thank you for the feedback! interesting use casei think we all agree that mocking statics is a bad practice and an anti-pattern in general the question is whether we enforce the ""no mocking statics"" policy (eg not offer the feature in the tool) or let the user decide to enforce it or not (eg offer the feature) || please consider the legacy code issue sometimes you dont have any choice enforcing or not a practice shouldnt be the decision of a framework but of the teamalso for now were using powermock as a workaround for this need but its not compliant with the last versions of mockito were blocked with 19x version of mockitoits another good reason to get this feature: limit dependencieswe already need all these libraries to get decent unit test in pure java world:junitjunitparams as junit parametrized are awfullassertj for expressive and clear assertionsmockito  and powermockand i shouldnt mention other peripheral libraries:dbunitspringdbunitjbehave jgiven for bdd style  then you can write all your testing stuf in groovy and you only need  spockplease! let user choose othewise why did you provide private method mocking in the recent versions athough its considered as a ""bad"" practice for tdd purists ? finally thanks for your great work mockito is really a nice framework  || mocking static methods is a different use case maybe that means it should be a different tool answer the following questions (to yourself):- do you want to support a double tool in the long term? - does it use the same set of dependencies and only those? - does mocking static methods fall nicely into the current design?if you answer all 3 with ""yes"" then go ahead if at least one is a ""no"" consider the alternatives:- build a mockito extension- build a new tool and call it mackarita- leave the other tool to someone elsejust my two cents || i agree with most of you and think that mocking static methods is not a good ideaif some method uses static method provided by legacy library/framework then it can be easily wrapped in object and provided as mockable dependency its not perfect solution but is educational - shows developers that writing too complex static util methods hurts and makes code hard to test if mockito had such feature many of developers would consider it as acceptable practise and produce bad codeanother issue is parallel tests execution in my current project we used to use powermockito to mock static methods and after some time our tests started to fail because of concurrency issues:1 thread a mocked static method xy and stopped2 thread b mocked static method xy and stopped3 thread a was awaken and run test - it failed because thread b overwritten static methods behaviour expected in test run by awe ended up with wrapping static methods in injectable objects and removed powermockito from project dependencies || i had asked about this at some point in the past and was told it was being considered glad to see thats actually happeningin my opinion support for mocking static methods is a good idea for the simple reason that the standard java classes that ship with the jre have tons of static methods consider the nio2 api as an example if you want to read a file using that api you might do something like:```javafilesreadalllines(pathsget(""myfile""))```now is there a way to test this without mocking static methods? obviously yes you could make a ifiles interface and then make a jrefilesimpl that passes the calls through to the static methods but thats a bunch of extra effort it adds complexity to your code and obscures the methods that are actually being called in my opinion i shouldnt need to do that to test my codes ability to properly read some fileso +1 for the ability to mock static methods || > now is there a way to test this without mocking static methods?well in my opinion file name/path from your example is good candidate for passing it to method/setter/constructor instead of hardcoding it and you can just create test file in filesystem such java api methods are considered as simple and reliable and there is no need to mock them like you wouldnt mock `javautillist` if your method operated on data from given list you would just create actual list with test data || there are at least 2 problems with that argument: a) you cant test behavior when exceptions occur and b) you cant test behavior if the path is for a different os i realize the latter is an esoteric use case but i actually am working on a project that is developed on windows but runs exclusively on linux || i think the recurring theme right now is: either you are pro or you are strictly against it personally i am for clean tests and therefore consider static mocking very bad practice however our users apparently have usecases that require (intrusive?) solutions such as powermock given that these users opt for such solutions signals that the other solution would be no tests at all and that is probably what we would never wantgiven that solutions like powermock are built not only on mockito but also other libraries they can not be easily updated like mockito can this incentives mockito to solve static mocking if users opt-in for iteven though i inherently disagree with static mocking i think it is only fair that we as mockito developers offer users the option to opt-in a less intrusive and upgrade-compatible solution therefore i would vouch for a different artifact (probably called `mockito-legacy`) which offers static mocking this should signal our users that this is for legacy purposes and should be strictly discouraged but at least gives them a way out this particular solution would tick off all points of @jlinkin the end no matter which outcome there will always be disappointed developers we will not be able to find a golden solution for this particular problem and i am fairly convinced it will never happen eitherwe can always try it out with the new artifact and discontinue it later if it is significantly misusedone sidenote: putting everything in a new artifact would scatter the mockito ecosystem we should probably find a better solution for this potentially in mockito 3 || i disagree with @timvdlippe  i dont believe that in an open source world you can ""try it out with the new artifact and discontinue it later if it is significantly misused"" once its there in the library users will require it to be there youll have to support that feature etc either its there or not not often can you easily deprecate sth and roll it back afterwards typically it requires a couple of release cycles@timvdlippe youre mentioning this "" however our users apparently have usecases that require (intrusive?) solutions such as powermock"" i have a comment on that as an exercise from time to time im trying to answer powermock questions on stackoverflow typically someone says that theres a static method somewhere that theyre calling and it does some logic that they want to stub the question i often ask to those people is ""why are you doing this?"" would you really want to stub a call to `stringutils` ? another frequent problem is that the design is flawed and thats why one is looking for hacks (eg      or  why i fully agree with @karollewandowski  ""every problem can be solved with a layer of abstraction"" ) you cant mock a static method? ok then wrap it in a class which you can stub is it wrong? quite the contrary rarely should you call static methods directly and if you do most likely these are utils that you dont want to stub you should encapsulate the logic of a static method in an object that makes business sense to use itsumming it up giving people a tool to stub static methods is making them even easier to write bad code instead of thinking of how to fix the design theyll be able to make the design even worse  || @timvdlippe just one thing: if you create a new artifact like ""mockito-legacy"" communicate clearly if youre planning to support it mid/long-term or if its just an experiment some people are willing to experiment together with you others will be pissed off when you quit support after they have heavily used it || @rdicroce i completely disagree with this statement:> now is there a way to test this without mocking static methods? obviously yes you could make a ifiles interface and then make a jrefilesimpl that passes the calls through to the static methods but thats a bunch of extra effort it adds complexity to your code and obscures the methods that are actually being called in my opinion i shouldnt need to do that to test my codes ability to properly read some fileyoure design is wrong if you had ```filesreadalllines(pathsget(myfilepath))```you could via a constructor inject `myfilepath` to point to your test resources you dont even need to create any additional classes || the android community would like mock static methods well at least mewhy? : the android sdk provides many static utility methods with classes like textutils the downside is that there implementation is only provided on the device or emulator when users run unit-test on there local machine they will get the famous ""method not mocked"" exception> the androidjar file that is used to run unit tests does not contain any actual code - that is provided by the android system image on real devices instead all methods throw exceptions (by default) this is to make sure your unit tests only test your code and do not depend on any particular behaviour of the android platform (that you have not explicitly mocked eg using mockito) they are many workarounds for this issue like powermock or roboelectric roboelectric is a great testing framework but it is damn slow and maintainance intensiv powermock is not stable state to be used with mockito 2 so i think at least android users will love this feature   || @christianschwarz i do not agree using android static utils or android framework in your business logic is a bad smell well structured android app do not need mocking static methods nor roboelectric calls to android framework must be abstracted and current mockito implementation helps to enforce that if you want to test view layer then go with instrumentation tests and espresso || @dbacinski i am not an expert on android so bear with me please :) adding extra layer introduces more method calls which can be problematic on large apps that hit dex method limit right? || @szczepiq you are right that you need additional methods to abstract android apis but this is a cost of good architecture dex method limit is not a huge problem anymore because now there is native platform support for multidex apps || @marcingrzejszczak your response a) does not address the call to readalllines() and b) does not address either of the issues i raised in  all: it seems to me theres a fundamental divide in this thread between people who are of the opinion that its fine to just make a wrapper class for static calls and people who are of the opinion that wrapper classes add bloat and shouldnt be necessary i dont see either side convincing the other so im not sure where that leaves us || > your response a) does not address the call to readalllines() and b) does not address either of the issues i raised in #1013 (comment)@rdicroce i havent explicitly but the answer is simple> a) does not address the call to readalllines()if the path is a parameter you dont have to mock the call at all you can pass a) a path that exists - to test the positive scenariob) a path that doesnt exist - that way it will blow up and youll test an exception>  i realize the latter is an esoteric use case but i actually am working on a project that is developed on windows but runs exclusively on linuxyou can write a couple of tests that are exclusively executed depending on the os (example for windows -  ) again if you use parameters instead of magic values then you can do basically whatever you want> to all: it seems to me theres a fundamental divide in this thread between people who are of the opinion that its fine to just make a wrapper class for static calls and people who are of the opinion that wrapper classes add bloat and shouldnt be necessary i dont see either side convincing the other so im not sure where that leaves usid say that the divide is between people who want to design their code properly and those who want to take the path of least resistance (which isnt a wrong choice sometimes) || >id say that the divide is between people who want to design their code properly and those who want to take the path of least resistancestatic members arent something good i hope its quite obvious but java has them and will support them whether we like it or not so id say that educating and influencing is good forcing might be not its like ""oooh your code is using statics so it cant be tested with mockito""(not to mention that some people would like to have nice unclebobish tests but arent allowed to refactor the code they have to maintain i know its sick but hey this is reality sometimes) || @marcingrzejszczak > if the path is a parameter you dont have to mock the call at all you can pass>> a) a path that exists - to test the positive scenario> b) a path that doesnt exist - that way it will blow up and youll test an exceptionthat may solve this particular case what about other static apis that can throw a variety of different exceptions? are you saying users should go through the hassle of setting up every possible scenario? what happens if there are scenarios the user cant set up? you may as well not bother with a mocking framework at all in that case> you can write a couple of tests that are exclusively executed depending on the os (example for windows -  ) again if you use parameters instead of magic values then you can do basically whatever you wantthis makes it impossible to run the tests in the environment where the code is developed again i know this is an esoteric use case but it is a valid one imo> id say that the divide is between people who want to design their code properly and those who want to take the path of least resistancei wont speak for anyone else in favor of mocking static methods but i dont see that as designing code improperly adding a whole extra layer of abstraction thats completely unnecessary outside of testing? that does strike me as being improper || this will be my last answer cause obviously we are not going anywhere with this@pioorg> static members arent something good i hope its quite obvious but java has them and will support them whether we like it or notyes its obvious someone has to afterwards maintain that code both the business and the library another thing is that you dont have to mock all of those calls why would you stub a `stringutils` class ? makes absolutely no sense @rdicroce>  are you saying users should go through the hassle of setting up every possible scenario? what happens if there are scenarios the user cant set upof course not you can catch a generic exception and thats enough > this makes it impossible to run the tests in the environment where the code is developedthats false some of your tests will be executed only on windows some others on linux etc > i wont speak for anyone else in favor of mocking static methods but i dont see that as designing code improperlythats why i would just call the static method if in your static method you have a lot of complex logic then it should get wrappedall in all - i think that this is a wrong decision for mockito but thats only my opinion || > yes its obvious someone has to afterwards maintain that code both the business and the library another thing is that you dont have to mock all of those calls why would you stub a stringutils class ? makes absolutely no sensewith all the respect i dont care about any *utils classes or any other particular code snippetswhat i mean is that:1 statics are valid from syntax pov2 they already exist in legacy code 3 some folks cant change that code ""only because wed like to have mockito in tests""so if one cant change the code refactor it and add the wrappers around the static calls they also cant use mockito because ""mockito doesnt support statics"" to me it comes to ""bad code -> bad tests"" sorry -)while i perfectly understand there are reasons not to include it in ""standard"" distribution artefact having another one being mockito-extension-for-ppl-who-dont-have-nice-codejar might be acceptable || just some toughts about  the prevailing opinion ""statics methods are evil"" from my experience there are 2 different kinds of static methods ""good"" and ""evil"" i wouldnt say that all static methods are evil * static methods are ""evil""  when they alter the state of a of a static member or in other words they depend on a state when such a method is called the result may be an other when called in the future with the same inputeg:```java class logmanager {     static loggerplugin plugin       static void loginfo(string message){        pluginwrite(infomessage)     } }``` when the loggerplugin changes during runtime the result may be different eg logged to a different media *  static methods are also ""evil"" when they call a static method that is ""evil"" as described above cause they inherit the nasty side effectseg:```java class log{  static void info(string message){      loggermanangerloginfo(message)   } }``` * static methods are are ""good"" when they dont depend on a state / access a static member and thus have the same result on every calleg:  `mathmax(intint) `in the java eco system exists both evil and good static methods i dont see a much points to mock ""good"" static methods it makes only sense when they do quite complex stuff and you dont want to mock all bits of there input to satisfy there implementation even in famous frameworks we are faced with ""evil"" static methods (hello `singletongetinstance()`) to handle these evil cases mockito can do its part and support the poor devs among us who have to deal with it i wouldnt blame mockito if devs start to introduce the ""evils""  to there code base mockito is a mocking framework not a good style enforcement tool thats the task for the team and/or lead developer || @christianschwarz > static methods are are ""good"" when they dont depend on a state / access a static member and thus have the same result on every calltrue there are even some schools in which all private methods should be static dont depend on anything apart arguments dont change the state of any object and dont do anything beside computing the result so theyre functions just like sin(angle) is: the angle isnt changed and sin is only the result of the angle always the same (provided the geometry is always the same -) )i find this functional style of programming very good but in fact it has rather not much to do with statics as such imho sometimes its better to tell newbies ""dont use statics couse theyre generally bad"" its a kind of ""lie for children"" || unfortunately as history has shown multiple times when developers see a tool and its use cases they do not always understand the impact and weight of its features they consider all features equal and do not understand that some of them should only be used as a last resortthe canonical example in the java world is the abuse of java introspection/reflection and aop for even trivial scenarios even outside the java world we see the misuse of advanced features by developers who use them ""simply because they are there"" if we are to go forward with this (and i am strongly against this as i considered a major advantage of mockito the fact that it did not allow testing of static methods) i would suggest the following:- create a ""mockito-legacy"" artifact/extension/add-on - require a configuration file option for mockito to actually enable this add-on- print in the log file when the test runs a huge warning (similar to what maven does when you dont define a version) that using this add-on is an anti-pattern and a code-smell- provide a link to the user that has a page with common refactoring scenarios that show how we can get rid of static methodsmaybe i am missing something but i really would like some examples on how legacy code cannot be refactored to remove the static dependency unless of course you cannot change the code at all which for me makes the creation of unit tests questionable (because if a unit test fails what are you going to do then?) || @kkapelon: i also wish all java code was pure oo design and that everyone actually knows what that means -) i hope such a huge warning ""youre doing it wrong"" could educate and maybe convert a few folks> maybe i am missing something but i really would like some examples on how legacy code cannot be refactored to remove the static dependencyits not about the code itself ive seen big name companies enforcing policies in which before bugfixing the case has to be replicated in tests (kinda tdd they claim sometimes) then once the test fails just like the ticket describes the support team is allowed to change the code to make it pass (and sadly usually minimum changes) its rather difficult to make a test to cover statics if your testing tool set doesnt allow that chicken and egg problemits like all these the daily wtf stories in which ""dont change it it aint broke couse it works!"" so the code is like java 14 || this would be great! we could finally stop bikeshedding ""static is *eeevil*"" because not testable || > we could finally stop bikeshedding ""static is eeevil"" because not testablewell imho static is eeevil in many cases not only because not testable :-d || the mocking framework shouldnt restrict the design options - its just not the job of a mocking framework! ive seen a lot of code polluted with mocking-only interfaces and there are a lot of cases where a simple static method is a perfect design decision `final` is also rarely used because mocking frameworks (besides the great [jmockit]( have trouble with it || dont do it!  powermockito exists for those cases where you absolutely need to mock static methods  right now mockito conforms to the commonly held opinion that static is for methods that are testable without mocks (think: stringutils)  static for other stuff should be discouraged (there are exceptions obviously) - in those situations encapsulating the static calls in a protected @visiblefortesting method should suffice for unit testing and for those other ""legacy or not"" situations theres always powermockito   || @trumpetx i just wanted to note that the reason we are investigating this change is that some companies are in the legacy code situation where adopting powermockito would be too disruptive therefore these companies would be unable to test their classes even if they could adopt powermockito the tests become significantly more difficult to understand just to be able to test their legacy codethe question is: should we as mockito give the opt-in for these situations as other options are too invasive? i think every mockito core developer agrees that static mocking is bad and should not be done but sadly we can not dictate what the industry does or has to deal withjust wanted to give perspective on why we are opening this issue || @timvdlippe  i cant see how powermockito would be disruptive for tests (certainly no more disruptive than adding mockitostaticwhatever)additionally too difficult to understand?  seriously?  if someone has static mocks in their tests and theyre too difficult to understand they probably need to find a new career  im not saying this to be mean spirited or whatnot but it sounds like youre just making reasons to adopt this change || also for reference i cross-posted this issue on reddit and there some other arguments/viewpoints posted there:  || @timvdlippe thanks for your link the recent posts have led me to another just wondering why so many of them || i havent had experience with bytebuddy but id be willing to give it a shot as far as names how do we feel about `mockito-gore` to really indicate you need a strong reason to use this jar? || just a few more words from me maybe last ones -)theres a method in mockito:`orgmockitomatchers#isnull(javalangclass<t>)`isnt null considered to be ""the billion dollar mistake""? shouldnt the programmers all around the world be educated that passing a null reference (instead of a `javautiloptional`) is a very bad practice?maybe this `isnull` method should be deprecated and eventually removed in future versions?ive seen a lot of code being polluted  if (reference  null)` and `catch (nullpointerexception e)` more than by ""incorrect use of statics"" (but ymmv)if supporting statics is going to create such bad habits among programmers and mockito is meant to be a forced education then i guess support for nulls should be removed in future versions and people should write wrappers to handle nulls from their legacy code as null is worse habit imho -)unless mockito is meant to be a testing/mocking framework not forced education coursethank you || i would like to add some comments from my own experience i completely understand the people that are saying to add an abstraction to the static methods that you are invoking however in a legacy code that is expensive and requires a lot of effort additionally there are frameworks like [gwt]( that support polymorphism but not like you would think one needs to call a static method that will do the creation of the object on runtime and runtime there is javascript there ware ways that you can write tests that will emulated the client code for gwt but they are really slow currently we use powermockito with mockito 195 because we cant update to a later mockito however if mockito had this support it would be much easier to do the testing || this discussion has been very active and helpful thank you everyone for participating!i think we have sufficient background information to make a final decision @mockito/core shall we discuss this on slack and write a wiki page on our full analysis and final verdict? then we can inform the community for a final review (of a potential implementation) and round up this feature || > shall we discuss this on slack and write a wiki page on our full analysis and final verdict? then we can inform the community for a final review (of a potential implementation) and round up this featurehas the verdict on static support been reached? || we have not every single core member has been swamped with various irl activities probably this fall we will be back in full force this is one of the features that we will be addressing    || the team was not actively working on this the ticket is marked ""please contribute"" for a reason ) currently i work with @thekingnothing on creating mockito apis so that powermock can cleanly integrate (#1110) this will effectively provide reasonable support for static mocking hope this clarifies the status! thank you for reminder - this is useful for us to manage our priorities || static methods are totally ok you just have to know when to use themi think the following code is entirely correct and sufficiently abstracted for the purpose of a modern-day application:    // guava imports    class applicationresources {      // points to a file in the war      private static final charsource default_config_source  resourcesascharsource(resourcesget(""etc/defaultconfig"") utf_8)      static charsource defaultconfigsource() {        return default_config_source      }    }i need to access a static value in my application but for the purpose of proper testing i need to test various default values so it makes sense to provide another `charsource` during the tests than at runtimejust imagine that this is embedded in some jee application there is no sense in writing this method as non-static i could write `new applicationresources()defaultconfigsource()` what is that code? is it real? others might imagine i make this class a (singleton) bean a bean requires the class to be public i dont want any of its method to be accessed outside of the package so there are no reasons to make this class public so this class has no reasons to be a beanhowever i still have to test classes that use this class but im stuck in the testing because i just cant mock its methods (besides using all the workarounds mentioned above)i agree that mocking static method should be used very very rarely but it should exist for those rare cases || personally i plan to add this feature i still need to do some ground work in byte buddy to make this feasible it is not as easy as i hoped unfortunately and it might take some time the same goes for the seamless integration with powermockif anybody would be willing to sponsor the development i am happy to use paid hours within my open source commitment this might take a few more month to complete but i am certain to finish this at some point java 9 compatibility takes priority at the moment || ;1;0;update src/main/java/org/mockito/captorjavaco-authored-by: tim van der lippe <timvdlippe@usersnoreplygithubcom>;
1961;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;document using  @mock  with method parameters;although we ve called it out in the [junit extension]  we should also;;1960.0;document using `@mock` with method parameters;although weve called it out in the [junit extension] we should alsomake sure its clear in the core documentation to make it more visiblewe can fully-quality the `@test` annotation to make clear that it has tobe with junit 5closes #1960[junit extension]: https://javadocio/doc/orgmockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/mockitoextensionhtml; merging 1961 ;documentation: `@mock` on method parameters;"while writing [an article about using `@mock` as a method parameter]( i noticed that the [javadoc for mockito]( doesnt mention the ability to use `@mock` as a parameter to a test methodhow would be best to add that as a pr given its dependent on the test runner?i was thinking something like:``` * <h3 id""9"">9 <a class""meaningful_link"" href""#mock_annotation"" name""mock_annotation"">shorthand for mocks creation - <code>&#064mock</code> annotation</a></h3> * * <ul> * <li>minimizes repetitive mock creation code</li> * <li>makes the test class more readable</li> * <li>makes the verification error easier to read because the <b>field name</b> * is used to identify the mock</li> * </ul> * * <pre class""code""><code class""java""> *   public class articlemanagertest { * *       &#064mock private articlecalculator calculator *       &#064mock private articledatabase database *       &#064mock private userprovider userprovider * *       private articlemanager manager * *       @test *       void testsomething(@mock articledatabase database) { * </code></pre>```";we mention that information in  as we dont support initiating mocks on parameters with junit4 therefore we should add a parameter something like:```java *       @test *       void testsomething(@mock articledatabase canonlybeinstantiatedwithjunit5) {```other than that please open a pr 😄  || oh i didnt realise that thanks! ill amend my article with that knowledge tooam i ok to add a pr for both the v2 and v3 documentation given it works on both versions? || we no longer publish v2 updates so v3 only ||;1;0;document using `@mock` with method parametersalthough weve called it out in the [junit extension] we should alsomake sure its clear in the core documentation to make it more visiblewe can fully-quality the `@test` annotation to make clear that it has tobe with junit 5closes #1960[junit extension]: https://javadocio/doc/orgmockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/mockitoextensionhtml;
1968;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1967: correctly handle mocks with limited life-cycle in listeners.;due to the limited lifetime of static mocks  they cannot be validated within a mockito session since they might have expired when the validation is applied. this patch excludes static mocks from all validation. to support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock.;;1967.0;1967: correctly handle mocks with limited life-cycle in listeners;due to the limited lifetime of static mocks they cannot be validated within a mockito session since they might have expired when the validation is applied this patch excludes static mocks from all validation to support static mocks in the regular session validation we would rather need to trigger the validation upon release of any static mock;it only tests part of the issue for actually testing it we would need to run the junit tests with the inline mock maker and create subprojects for it i am going on a two week vacation tomorrow so i did not want to open that barrel of wine tonight but i validated the working manually if you have some time could you add additional subprojects? i validated the runners manually however || ah okay i got confused as the commit mentions that the issue is  so thats why i thought we had test the whole scenario please go on vacation we can figure it out later 😄  ||  merging 1968 ;static method mocks incompatible with mockitoextension (notamockexception);helloi am experimenting with the newly released functionality of mocking static methodsit appears that static mocks are not compatible with the `mockitoextension` designed for junit 5following error message is produced when using the extension:```orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class javalangclass!```full stacktrace: [static-mock-mockito-extension-stacktracetxt]( have created following minimal example which is composed of a `utils` class (containing the static method) and a `utilsuser` class (calls the static utils method) `utilsusertest` tests the functionality of the `utilsuser` class```javapublic class utils {    public static long millis() {        return systemcurrenttimemillis()    }}``````javapublic class utilsuser {    public long use() {        return utilsmillis()    }}``````javaimport orgjunitjupiterapitestimport orgjunitjupiterapiextensionextendwithimport orgmockitoinjectmocksimport orgmockitomockedstaticimport orgmockitomockitoimport orgmockitojunitjupitermockitoextensionimport static orgjunitjupiterapiassertionsassertequals@extendwith(mockitoextensionclass)class utilsusertest {    @injectmocks    private utilsuser utilsuser    @test    void use() {        try (mockedstatic<utils> mockedutils  mockitomockstatic(utilsclass)) {            mockedutilswhen(utils::millis)thenreturn(17l)            assertequals(17l utilsuseruse())        }    }}```when converting this test to a test which does not use the extension (removing `@extendwith` removing `@injectmocks` adding ` new utilsuser()` after the field declaration) the test passescan you tell me if there is something special i have to accomodate for when using the static mocks in junit jupiter?or is this indeed a bug (which you can hopefully reproduce)?i am using mockito-inline and mockito-junit-jupiter in version 340thanks in advance and thanks for the new static mocks functionality!david;thanks for reporting we already found the error it slipped us i think we can have a release ready fairly soon ||;1;0; \#1967: correctly handle mocks with limited life-cycle in listeners;
1971;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;add support for creating constructors without using objenesis (and unsafe api);this pr adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of objenesis obsolete. this is desired since objenesis relies on unsafe api which is deprecated and will be removed in a future release.;;0;add support for creating constructors without using objenesis (and unsafe api);this pr adds code to constructors to allow short-wiring a constructor without avoiding to call it thus making the use of objenesis obsolete this is desired since objenesis relies on unsafe api which is deprecated and will be removed in a future releasethe idea is as follows: any constructor for a class:```javaclass foo extends bar {  foo() {    super(somethingwithsideeffect())  }}```is rewritten as follows:```javaclass foo {  foo() {    if (mockdispatcherismockedconstruction()) {      super(null)      return    }    super(somethingwithsideeffect())  }}```the mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case the check is repeated along the super class hierarchy until reaching the `object` constructor which is by definition side-effect free as a result a mock was created without triggering any user code and without relying on unsafe api; merging 1971 ;;;;1;1;add support for creating constructors without using objenesis (and unsafe api);
1974;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;1855 and #939: improve error message when the inline mock maker cannot be used.;improves the error message and does not create a hard dependency on the compiler module. it also points out that byte buddy can now emulate the attachment api using jna if it s added to the class path.;;1855.0;1855 and #939: improve error message when the inline mock maker cannot be used;improves the error message and does not create a hard dependency on the compiler module it also points out that byte buddy can now emulate the attachment api using jna if its added to the class path; merging 1974 ;javaxtoolstoolprovider could not be found in inlinebytebuddymockmaker;"hi guysim encountering a crash when i run `androidtest` that contain mocking class cause the bytebuddy didnt found `javaxtoolstoolprovider` i tried to reinstall jdk 8 but doesnt work it seems to be `javaxtoolstoolprovider` not existing in it could you guys help me please?cheernatthawut## environment------------------------------------------------------------gradle 541------------------------------------------------------------build time:   2019-04-26 08 42 utcrevision:     261d171646b36a6a28d5a19a69676cd098a4c19dkotlin:       1321groovy:       254ant:          apache ant(tm) version 1913 compiled on july 10 2018jvm:          180_231 (oracle corporation 25231-b11)os:           mac os x 10152 x86_64## dependencies```    implementation filetree(dir: libs include: [*jar])    implementation""orgjetbrainskotlin:kotlin-stdlib-jdk8:$kotlin_version""    implementation androidxappcompat 110    implementation androidxcore:core-ktx:110    implementation androidxconstraintlayout 113    testimplementation junit 412    testimplementation orgmockito:mockito-core:324    androidtestimplementation androidxtestext 111    androidtestimplementation androidxtestespresso:espresso-core:320    androidtestimplementation orgmockito:mockito-android:324    androidtestimplementation ""iomockk:mockk-android:193kotlin12"## strack trace```e/testrunner: failed: mockfoo(cosamplemockitoandroidmockwithmockitotest)    ----- begin exception -----e/testrunner: javalangillegalstateexception: could not initialize plugin: interface orgmockitopluginsmockmaker (alternate: null)        at orgmockitointernalconfigurationpluginspluginloader$1invoke(pluginloaderjava:74)        at javalangreflectproxyinvoke(proxyjava:1006)        at $proxy3istypemockable(unknown source)        at orgmockitointernalutilmockutiltypemockabilityof(mockutiljava:29)        at orgmockitointernalutilmockcreationvalidatorvalidatetype(mockcreationvalidatorjava:22)        at orgmockitointernalcreationmocksettingsimplvalidatedsettings(mocksettingsimpljava:241)        at orgmockitointernalcreationmocksettingsimplbuild(mocksettingsimpljava:229)        at orgmockitointernalmockitocoremock(mockitocorejava:62)        at orgmockitomockitomock(mockitojava:1908)        at orgmockitomockitomock(mockitojava:1817)        at cosamplemockitoandroidmockwithmockitotest<init>(mockwithmockitotestkt:17)        at javalangreflectconstructornewinstance0(native method)        at javalangreflectconstructornewinstance(constructorjava:343)        at orgjunitrunnersblockjunit4classrunnercreatetest(blockjunit4classrunnerjava:217)        at orgjunitrunnersblockjunit4classrunner$1runreflectivecall(blockjunit4classrunnerjava:266)        at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)        at orgjunitrunnersblockjunit4classrunnermethodblock(blockjunit4classrunnerjava:263)        at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)        at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)        at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)        at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)        at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)        at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)        at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)        at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)        at androidxtestextjunitrunnersandroidjunit4run(androidjunit4java:104)        at orgjunitrunnerssuiterunchild(suitejava:128)        at orgjunitrunnerssuiterunchild(suitejava:27)        at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)        at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)        at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)        at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)        at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)        at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)        at orgjunitrunnerjunitcorerun(junitcorejava:137)        at orgjunitrunnerjunitcorerun(junitcorejava:115)        at androidxtestinternalrunnertestexecutorexecute(testexecutorjava:56)        at androidxtestrunnerandroidjunitrunneronstart(androidjunitrunnerjava:392)        at androidappinstrumentation$instrumentationthreadrun(instrumentationjava:2145)     caused by: javalangnoclassdeffounderror: failed resolution of: ljavax/tools/toolprovider        at orgmockitointernalcreationbytebuddyinlinebytebuddymockmaker<init>(inlinebytebuddymockmakerjava:172)        at javalangclassnewinstance(native method)        at orgmockitointernalconfigurationpluginsplugininitializerloadimpl(plugininitializerjava:49)        at orgmockitointernalconfigurationpluginspluginloaderloadplugin(pluginloaderjava:57)        at orgmockitointernalconfigurationpluginspluginloaderloadplugin(pluginloaderjava:44)        at orgmockitointernalconfigurationpluginspluginregistry<init>(pluginregistryjava:22)        at orgmockitointernalconfigurationpluginsplugins<clinit>(pluginsjava:19)        at orgmockitointernalconfigurationpluginspluginsgetmockmaker(pluginsjava:35)        at orgmockitointernalutilmockutil<clinit>(mockutiljava:24)        at orgmockitointernalutilmockutiltypemockabilityof(mockutiljava:29)         at orgmockitointernalutilmockcreationvalidatorvalidatetype(mockcreationvalidatorjava:22)         at orgmockitointernalcreationmocksettingsimplvalidatedsettings(mocksettingsimpljava:241)         at orgmockitointernalcreationmocksettingsimplbuild(mocksettingsimpljava:229)         at orgmockitointernalmockitocoremock(mockitocorejava:62)         at orgmockitomockitomock(mockitojava:1908)         at orgmockitomockitomock(mockitojava:1817)         at cosamplemockitoandroidmockwithmockitotest<init>(mockwithmockitotestkt:17)         at javalangreflectconstructornewinstance0(native method)         at javalangreflectconstructornewinstance(constructorjava:343)         at orgjunitrunnersblockjunit4classrunnercreatetest(blockjunit4classrunnerjava:217)         at orgjunitrunnersblockjunit4classrunner$1runreflectivecall(blockjunit4classrunnerjava:266)         at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)         at orgjunitrunnersblockjunit4classrunnermethodblock(blockjunit4classrunnerjava:263)         at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)         at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)         at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)         at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)         at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)         at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)         at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)         at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)         at androidxtestextjunitrunnersandroidjunit4run(androidjunit4java:104)         at orgjunitrunnerssuiterunchild(suitejava:128)         at orgjunitrunnerssuiterunchild(suitejava:27)         at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)         at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)         at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)         at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)         at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)         at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)         at orgjunitrunnerjunitcorerun(junitcorejava:137)         at orgjunitrunnerjunitcorerun(junitcorejava:115)         at androidxtestinternalrunnertestexecutorexecute(testexecutorjava:56)         at androidxtestrunnerandroidjunitrunneronstart(androidjunitrunnerjava:392)         at androidappinstrumentation$instrumentationthreadrun(instrumentationjava:2145)      caused by: javalangclassnotfoundexception: didnt find class ""javaxtoolstoolprovider"" on path: dexpathlist[[zip file ""/system/framework/androidtestrunnerjar"" zip file ""/system/framework/androidtestmockjar"" zip file ""/data/app/cosamplemockitoandroidtest-zjfawug-    ----- end exception -----```<img width""968"" alt""screen shot 2563-01-07 at 12 45 26"" src""https://user-imagesentcom/2638321/71871412-a93ee100-314b-11ea-9815-31a5d95056d4png"">[mockitoandroidzip](https://githubcom/mockito/mockito/files/4029049/mockitoandroidzip)";i think this commit is part of the problem:  || > i think this commit is part of the problem:  tried with mockito 2220 which should be a release before  the commit but the error is still there  what  the issue for me was removing the `mock-maker-inline` resource file || the inline mockmaker is not supported on android (as listed in the exception) however we should probably not crash before we can show that message to the user i would welcome a pr to fix this problem || @timvdlippe what should people do for android then? kotlin uses final classes only || @raphw what is our advice for android? i dont remember what our final resolution was for inline + android for kotlin || i just started using  its kotlin friendly also || on android the inline mock maker wont work (neither will mockk which uses the same approach as we do) it does not support the instrumentation api alltogetheri do agree that the error message is misleading currently preparing a pr to improve this || you can achieve this by using comlinkedindexmaker:dexmaker-mockito-inline for apis > 28 ||;1;0;1855 and #939: improve error message when the inline mock maker cannot be used;
1978;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix javadoc invalid syntax;escape @ character to html entity.;;0;fix javadoc invalid syntax;escape @ character to html entityfixes https://githubcom/mockito/mockito/issues/1977; merging 1978 ;;;;1;1;fix javadoc invalid syntax;
1984;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo;this pr fixes a typo.;;0;fix typo;this pr fixes a typo; merging 1984 ;;;;1;1;fix typo;
1989;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;do not pass static mocks to regular listener callback.;does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. 1988.;;1988.0;do not pass static mocks to regular listener callback;does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks 1988we have passed `class` objects to the listener to indicate a static mock the class object is of course itself not a regular mock and its cleaner to create a callback method of its own this way existing listeners remain logically backwards compatible including our own listener that is used within the junit runner (we have only tested the rule i added a test for the runner too); merging 1989 ;mockitojunitrunner causes npe when using @mock on mockedstatic fields;check that -  the mockito message in the stacktrace have useful information but it didnt help -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  provide versions (mockito / jdk / os / any other relevant information) -  provide a [short self contained correct (compilable) example]( of the issue       (same as any question on stackoverflowcom) -  read the [contributing guide]( - mockito: 344 - junit: 412 - jdk: 18 - os: windows 10**example:**1 [mockitojunitrunnerwithmockedstatictest](    * reproduces the problem documented in this issue1 [mockitoopenmocksmockedstatictest](    * same tests but manually opens and closes the mocks (doesnt use the runner) shows the tests are ran as expected**problem:**the `mockitojunitrunner` is causing a `nullpointerexception` when the test class contains a `@mock` instance field with a type of `mockedstatic` this exception only occurs for tests that are ran after a prior test fails if all the tests pass there are no issuesstack trace (test 1):```javalangassertionerror: intentional failure	at orgjunitassertfail(assertjava:88)	at orgmockitoexamplemockitojunitrunnerwithmockedstatictesttestname1(mockitojunitrunnerwithmockedstatictestjava:40)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgmockitointernalrunnersdefaultinternalrunner$1$1evaluate(defaultinternalrunnerjava:54)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgmockitointernalrunnersdefaultinternalrunner$1run(defaultinternalrunnerjava:99)	at orgmockitointernalrunnersdefaultinternalrunnerrun(defaultinternalrunnerjava:105)	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:40)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:163)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:538)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:760)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:460)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:206)orgmockitoexceptionsmisusingnotamockexception: argument passed to mockitomockingdetails() should be a mock but is an instance of class javalangclass!	at orgmockitointernalrunnersdefaultinternalrunner$1$2testfinished(defaultinternalrunnerjava:81)	at orgjunitrunnernotificationsynchronizedrunlistenertestfinished(synchronizedrunlistenerjava:56)	at orgjunitrunnernotificationrunnotifier$7notifylistener(runnotifierjava:190)	at orgjunitrunnernotificationrunnotifier$safenotifierrun(runnotifierjava:72)	at orgjunitrunnernotificationrunnotifierfiretestfinished(runnotifierjava:187)	at orgjunitinternalrunnersmodeleachtestnotifierfiretestfinished(eachtestnotifierjava:38)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:331)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgmockitointernalrunnersdefaultinternalrunner$1run(defaultinternalrunnerjava:99)	at orgmockitointernalrunnersdefaultinternalrunnerrun(defaultinternalrunnerjava:105)	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:40)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:163)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:538)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:760)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:460)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:206)```stack trace (test 2):```javalangnullpointerexception	at orgmockitoexamplemockitojunitrunnerwithmockedstatictesttestname2(mockitojunitrunnerwithmockedstatictestjava:54)	at sunreflectnativemethodaccessorimplinvoke0(native method)	at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javalangreflectmethodinvoke(methodjava:498)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:50)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:47)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgmockitointernalrunnersdefaultinternalrunner$1$1evaluate(defaultinternalrunnerjava:54)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:325)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:78)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:290)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:71)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:288)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:58)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:268)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:363)	at orgmockitointernalrunnersdefaultinternalrunner$1run(defaultinternalrunnerjava:99)	at orgmockitointernalrunnersdefaultinternalrunnerrun(defaultinternalrunnerjava:105)	at orgmockitointernalrunnersstrictrunnerrun(strictrunnerjava:40)	at orgmockitojunitmockitojunitrunnerrun(mockitojunitrunnerjava:163)	at orgeclipsejdtinternaljunit4runnerjunit4testreferencerun(junit4testreferencejava:86)	at orgeclipsejdtinternaljunitrunnertestexecutionrun(testexecutionjava:38)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:538)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerruntests(remotetestrunnerjava:760)	at orgeclipsejdtinternaljunitrunnerremotetestrunnerrun(remotetestrunnerjava:460)	at orgeclipsejdtinternaljunitrunnerremotetestrunnermain(remotetestrunnerjava:206)```**investigation:**after some investigation it appears the first test is failing twice (once in the test and once in the testfinished listener) this code: 81 is where it fails the second time if we navigate down the call hierarchy it appears it fails because the static mock has already been cleaned up so the framework doesnt think its a mock and fails with a `notamockexception`  since it fails there it doesnt set the listener to null which will in-turn result in the mocks not being initialized on the next test thats ran (hits line 51): the mocks are not initialized for the second test it ultimately causes the `nullpointerexception`its also causing the remaining tests after the first test failure to bounce back and forth between `nullpointerexception` and `notamockexception` the reason for this appears to be because [this failure]( object never gets reset after its processed so it keeps restarting the chain of throwing the two exceptions back and forthalso i did include a sample test that manually opens and closes the mocks (doesnt use mockitojunitrunner) and everything is working as expected using the try-with-resource works fine as welli did investigate further and noticed something related to this might have been addressed in [this pr]( it only updated the findstubbings method to skip the static mocks though was the allinvocationsfinderfind() method intentional left out of that or just an oversight?;just tried the tests with using mockitorule and its working as expected as well || @raphw this issue still exists in 346 was the pr supposed to fix all of this or only a part of it? the linked example above still causes npe this one: [mockitojunitrunnerwithmockedstatictest]( || i was under the impression that i  it but i will take another look if it is not i refactored your test and added it to the built but maybe i broke it in the process || i just ran the test with the latest mocktio and it works as expected are you sure that you are running the right version?  || yep just doubled checked its using 346 are you running my test class (without modification) or your refactored version of it? if you modified it can you send me modified one and ill double check it || copy pasted it as it is i to the release/3x branch  || okay sorry for the confusion when i was investigating this issue on july 25 i must have installed into locally and it got shoved into my local m2 repo as 346 without the fix then when you fixed it and i updated the pom version to point to 346 it didnt redownload it because it was already in my local repoi deleted it from my local m2 repo and redownloaded it from maven-central everything is good now  perfect gradle does not work with snapshot versions happened to me a few times too  ||;1;0;does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks 1988;
1991;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;mockito.verify(): fix typo in javadoc;i noted this while reading the javadocs in my ide  they were referring to a  get(0)  reference which isn t quite easy to grasp in this context. :see_no_evil: after looking at this class a bit more  i think it s just a copy-paste mistake from this line in the class-level javadocs: https://github.com/mockito/mockito/blob/release/3.x/src/main/java/org/mockito/mockito.java#l212;;0;mockitoverify(): fix typo in javadoc;i noted this while reading the javadocs in my ide they were referring to a `get(0)` reference which isnt quite easy to grasp in this context   after looking at this class a bit more i think its just a copy-paste mistake from this line in the class-level javadocs: https://githubcom/mockito/mockito/blob/release/3x/src/main/java/org/mockito/mockitojava#l212; merging 1991 ;;;;1;1;mockitoverify(): fix typo in javadoc;
1994;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo in contributing.md and spyoninjectedfieldshandler;fix typo in contributing.md and spyoninjectedfieldshandler.java;;0;fix typo in contributingmd and spyoninjectedfieldshandler;fix typo in contributingmd and spyoninjectedfieldshandlerjava; ;;;;1;1;fix typo in spyoninjectedfieldshandler todo;
1996;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;add invoker api to allow for alternative invocation modes to better support the module system.;adds a  memberaccessor  abstraction for accessing fields  methods and constructors where the default implementation  reflectionmemberaccessor  implements the current behavior of using reflection and  setaccessible .;;0;add invoker api to allow for alternative invocation modes to better support the module system;adds a `memberaccessor` abstraction for accessing fields methods and constructors where the default implementation `reflectionmemberaccessor` implements the current behavior of using reflection and `setaccessible` also this pr adds a new implementation `modulememberaccessor` where the instrumentation api is leveraged to open modules to mockito before using method handles to access any such member this way module boundaries are no longer stopping mockito from functioning on java 9 and onwards since the instrumentation api is already used by the inline-mock-maker it is enabled for this mock maker by default; merging 1996 ;;;;1;1;add invoker api to allow for alternative invocation modes to better support the module system;
2003;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;pre release 3.5.0;merged several pull requests into a branch prior to release.;;0;pre release 350;merged several pull requests into a branch prior to release; merging 2003 ;;;;1;1;merging constructor mocks with safe accessibility whilst fixing use of reflection where new deprecations are better considered;
2004;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;pre release 3.5.0;merged several pull requests into a branch prior to release.;;0;pre release 350;merged several pull requests into a branch prior to release; merging 2004 ;;;;1;1;merging constructor mocks with safe accessibility whilst fixing use of reflection where new deprecations are better considered;
2006;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;introduce animal sniffer;introduces animal sniffer with exclusion of inline-mock-maker classes which would never be present on android. avoids calling invoke/invokeexact methods of handles directly but rather puts the invocations into generated code to avoid breaking android builds.;;0;introduce animal sniffer;introduces animal sniffer with exclusion of inline-mock-maker classes which would never be present on android avoids calling invoke/invokeexact methods of handles directly but rather puts the invocations into generated code to avoid breaking android builds; merging 2006 ;;;;1;1;do not use invoke/invokeexact directly but from generated code to avoid breaking android builds which cannot process these methods;
2013;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;[ci maven-central-release] constructor dispatch;use constructor instantiation if explicitly specified.;;0;[ci maven-central-release] constructor dispatch;use constructor instantiation if explicitly specified;;;;;1;1;attempts to fix stack overflow error;
2017;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;only enable mocking of types right before instantiation to avoid circular interception of constructor creation.;2015.;;2015.0;only enable mocking of types right before instantiation to avoid circular interception of constructor creation;2015;;issues mocking java framework classes in robolectric with mockito-inline;"hi mockito folkscurrently it is not possible to mock a java framework class (eg javaiofile) in robolectric when mockito-inline is used this issue has come up a bunch of times in robolectric mostly when kotlin is used to write robolectric tests instance if a trivial tests is run with the robolectric test runner with mockito-inline:```java  @test  public void file_getabsolutepath_ismockable() throws exception {    file file  mock(fileclass)    doreturn(""absolute/path"")when(file)getabsolutepath()    assertthat(filegetabsolutepath())isequalto(""absolute/path"")  }```an npe will result:```javalangnullpointerexception	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherisconstructormock(mockmethoddispatcherjava:41)	at javabase/javaiofile<init>(filejava)	at javabase/sunnetwwwprotocolfilehandleropenconnection(handlerjava:80)	at javabase/sunnetwwwprotocolfilehandleropenconnection(handlerjava:72)	at javabase/javaneturlopenconnection(urljava:1063)	at javabase/sunnetwwwprotocoljarjarurlconnection<init>(jarurlconnectionjava:84)	at javabase/sunnetwwwprotocoljarhandleropenconnection(handlerjava:41)	at javabase/javaneturlopenconnection(urljava:1063)	at javabase/javaneturlclassloadergetresourceasstream(urlclassloaderjava:327)	at orgrobolectricinternalbytecodesandboxclassloadergetclassbytesasstreampreferringlocalurls(sandboxclassloaderjava:101)	at orgrobolectricinternalbytecodesandboxclassloadergetbytecode(sandboxclassloaderjava:172)	at orgrobolectricinternalbytecodesandboxclassloadermaybeinstrumentclass(sandboxclassloaderjava:129)	at orgrobolectricinternalbytecodesandboxclassloaderlambda$loadclass$0(sandboxclassloaderjava:115)	at orgrobolectricutilperfstatscollectormeasure(perfstatscollectorjava:53)	at orgrobolectricinternalbytecodesandboxclassloaderloadclass(sandboxclassloaderjava:115)	at javabase/javalangclassloaderloadclass(classloaderjava:521)	at orgrobolectricshadowsreset(shadowsjava:2298)	at orgrobolectricandroidinternalandroidtestenvironmentresetstate(androidtestenvironmentjava:518)	at orgrobolectricrobolectrictestrunnerlambda$finallyaftertest$0(robolectrictestrunnerjava:349)	at orgrobolectricutilperfstatscollectormeasure(perfstatscollectorjava:75)	at orgrobolectricrobolectrictestrunnerfinallyaftertest(robolectrictestrunnerjava:347)	at orgrobolectricinternalsandboxtestrunner$2lambda$evaluate$0(sandboxtestrunnerjava:272)	at orgrobolectricinternalbytecodesandboxlambda$runonmainthread$0(sandboxjava:89)	at javabase/javautilconcurrentfuturetaskrun(futuretaskjava:264)	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1128)	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:628)	at javabase/javalangthreadrun(threadjava:834)```robolectric uses an instrumenting classloader that transforms android classes to use real implementations: is a fork of robolectric that has a test that captures the issue: can see the failure using the following command:`/gradlew   mockito-experimental:test`any tips/help debugging would be greatly appreciated it would be nice to figure out what robolectric is doing to prevent this from working";are you moving `orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher` to another class loader? normally mockito injects this class into the bootstrap class loader and then initializes this dispatcher with a random identifier all inline mocks call this class with the very same identifier to communicate with mockito the bootstrap loader is used to avoid any issues with class loader hierarchiesthe null pointer exception suggests that the class `orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher` exists on multiple class loaders and that the initialization hit another class loader then the dispatcher the easiest would be to build something into robolectric that makes sure that the class loader tricks you apply never targets the `mockmethoddispatcher` it must only exist in the boot loader at all times || this is indeed the problem the loader of `mockmethoddispatcher` if resolved from the mock type is `orgrobolectricinternalandroidsandbox$sdksandboxclassloader` the dispatcher must always be loaded by the bootstrap class loader you need to exclude it from your class loader shadowing for it to work with boot classes otherwise the boot classes cannot communicate with mockito || can you try again with the release from just now? i defined the window of intercpting construction as narrowly as possible || thanks for taking a look! im excited to give this a shot seems like [354]( hasnt been pushed completely to the maven repo so i may do a local build if it doesnt show uprobolectric does indeed instrument the `orgmockito*` classes so ill make sure that orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher is not being instrumented do any other mockito classes have to be excluded from instrumentation? i tried to exclude all mockito classes from being instrumented but then it became impossible to use mockito to mock android classes which is another use case that we would like to support if we do not instrument orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher do you see any issues with using mockito to mock classes instrumented in the robolectric class loader? || that seemed to work! thanks!! || we struggled with bintray for a while and releases got brokenits all about the mock being able to communicate with mockito a class on the bootstrap loader can only communicate with classes on the boot loader i assume your class loaders are child-first? even those should be parent first for the boot loader normally  this way frameworks dispatching via the bootloader would generally function with robolectric ||;1;0;only enable mocking of types right before instantiation to avoid circular interception of constructor creation;
2018;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;only enable mocking of types right before instantiation to avoid circular interception of constructor creation.;2015.;;2015.0;only enable mocking of types right before instantiation to avoid circular interception of constructor creation;2015;;issues mocking java framework classes in robolectric with mockito-inline;"hi mockito folkscurrently it is not possible to mock a java framework class (eg javaiofile) in robolectric when mockito-inline is used this issue has come up a bunch of times in robolectric mostly when kotlin is used to write robolectric tests instance if a trivial tests is run with the robolectric test runner with mockito-inline:```java  @test  public void file_getabsolutepath_ismockable() throws exception {    file file  mock(fileclass)    doreturn(""absolute/path"")when(file)getabsolutepath()    assertthat(filegetabsolutepath())isequalto(""absolute/path"")  }```an npe will result:```javalangnullpointerexception	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherisconstructormock(mockmethoddispatcherjava:41)	at javabase/javaiofile<init>(filejava)	at javabase/sunnetwwwprotocolfilehandleropenconnection(handlerjava:80)	at javabase/sunnetwwwprotocolfilehandleropenconnection(handlerjava:72)	at javabase/javaneturlopenconnection(urljava:1063)	at javabase/sunnetwwwprotocoljarjarurlconnection<init>(jarurlconnectionjava:84)	at javabase/sunnetwwwprotocoljarhandleropenconnection(handlerjava:41)	at javabase/javaneturlopenconnection(urljava:1063)	at javabase/javaneturlclassloadergetresourceasstream(urlclassloaderjava:327)	at orgrobolectricinternalbytecodesandboxclassloadergetclassbytesasstreampreferringlocalurls(sandboxclassloaderjava:101)	at orgrobolectricinternalbytecodesandboxclassloadergetbytecode(sandboxclassloaderjava:172)	at orgrobolectricinternalbytecodesandboxclassloadermaybeinstrumentclass(sandboxclassloaderjava:129)	at orgrobolectricinternalbytecodesandboxclassloaderlambda$loadclass$0(sandboxclassloaderjava:115)	at orgrobolectricutilperfstatscollectormeasure(perfstatscollectorjava:53)	at orgrobolectricinternalbytecodesandboxclassloaderloadclass(sandboxclassloaderjava:115)	at javabase/javalangclassloaderloadclass(classloaderjava:521)	at orgrobolectricshadowsreset(shadowsjava:2298)	at orgrobolectricandroidinternalandroidtestenvironmentresetstate(androidtestenvironmentjava:518)	at orgrobolectricrobolectrictestrunnerlambda$finallyaftertest$0(robolectrictestrunnerjava:349)	at orgrobolectricutilperfstatscollectormeasure(perfstatscollectorjava:75)	at orgrobolectricrobolectrictestrunnerfinallyaftertest(robolectrictestrunnerjava:347)	at orgrobolectricinternalsandboxtestrunner$2lambda$evaluate$0(sandboxtestrunnerjava:272)	at orgrobolectricinternalbytecodesandboxlambda$runonmainthread$0(sandboxjava:89)	at javabase/javautilconcurrentfuturetaskrun(futuretaskjava:264)	at javabase/javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1128)	at javabase/javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:628)	at javabase/javalangthreadrun(threadjava:834)```robolectric uses an instrumenting classloader that transforms android classes to use real implementations: is a fork of robolectric that has a test that captures the issue: can see the failure using the following command:`/gradlew   mockito-experimental:test`any tips/help debugging would be greatly appreciated it would be nice to figure out what robolectric is doing to prevent this from working";are you moving `orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher` to another class loader? normally mockito injects this class into the bootstrap class loader and then initializes this dispatcher with a random identifier all inline mocks call this class with the very same identifier to communicate with mockito the bootstrap loader is used to avoid any issues with class loader hierarchiesthe null pointer exception suggests that the class `orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher` exists on multiple class loaders and that the initialization hit another class loader then the dispatcher the easiest would be to build something into robolectric that makes sure that the class loader tricks you apply never targets the `mockmethoddispatcher` it must only exist in the boot loader at all times || this is indeed the problem the loader of `mockmethoddispatcher` if resolved from the mock type is `orgrobolectricinternalandroidsandbox$sdksandboxclassloader` the dispatcher must always be loaded by the bootstrap class loader you need to exclude it from your class loader shadowing for it to work with boot classes otherwise the boot classes cannot communicate with mockito || can you try again with the release from just now? i defined the window of intercpting construction as narrowly as possible || thanks for taking a look! im excited to give this a shot seems like [354]( hasnt been pushed completely to the maven repo so i may do a local build if it doesnt show uprobolectric does indeed instrument the `orgmockito*` classes so ill make sure that orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher is not being instrumented do any other mockito classes have to be excluded from instrumentation? i tried to exclude all mockito classes from being instrumented but then it became impossible to use mockito to mock android classes which is another use case that we would like to support if we do not instrument orgmockitointernalcreationbytebuddyinjectmockmethoddispatcher do you see any issues with using mockito to mock classes instrumented in the robolectric class loader? || that seemed to work! thanks!! || we struggled with bintray for a while and releases got brokenits all about the mock being able to communicate with mockito a class on the bootstrap loader can only communicate with classes on the boot loader i assume your class loaders are child-first? even those should be parent first for the boot loader normally  this way frameworks dispatching via the bootloader would generally function with robolectric ||;1;0;only enable mocking of types right before instantiation to avoid circular interception of constructor creation;
2020;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;1;0;0;0;constructor dispatch;adds error message to class loader setups that do not work with the inline mock maker.;;0;constructor dispatch;adds error message to class loader setups that do not work with the inline mock maker;;;;;1;1;add validation to mockmethoddispatcher that this class is only ever loaded by the bootstrap class loaderthis is normally assured by mockito but other testing frameworks that work with instrumentation can interfer with this this might be difficult to discover for those frameworks as seen with robolectric this explicit error should help to discover such discrepencies;
2021;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;1;constructor dispatch;fixes recursive constructor invocation.;;0;constructor dispatch;fixes recursive constructor invocationavoids reflective access warning when using instrumentation-based member accessor;i think something has gone wrong with this pr travis is quite red after this pr:  example broken build:  like this pr was merged but travis hadnt finished yet? ||;;;;1;1;refine module openness check;
2023;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;initializes classes prior to instrumentation to avoid uncontrolled code execution.;2011 - triggeres initializers explicitly.;;2011.0;initializes classes prior to instrumentation to avoid uncontrolled code execution;2011 - triggeres initializers explicitly; merging 2023 ;stackoverflow error when upgrading to v352;"i tried to upgrade from mockito v346 to v352 and im getting a stackoverflow error (same error with v350) when running some tests (not all of them just a few  even in the same class : some tests pass and others dont)stacktrace :```javalangstackoverflowerror	at javabase/javalangthreadlocalget(threadlocaljava:163)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:260)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:53)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)        ```i didnt succeed in reproduce the error in a small project but ill spend more time to try and post the sources here when/if i have a reproducible caseenvironment :- mockito v352- junit v562- java :> openjdk version ""1108"" 2020-07-14> openjdk runtime environment (build 1108+10-post-ubuntu-0ubuntu118041)> openjdk 64-bit server vm (build 1108+10-post-ubuntu-0ubuntu118041 mixed mode sharing)- maven : v360 (tests are run by the maven-surefire plugin)";"i just discovered that the error happens when i launch all my unit tests in the maven module but its fine if i run the test or the test class only```sh$ cd myproject/my-mvn-module-1$ mvn test## [error]   mybeantesttest1 » stackoverflow#$ mvn -dtestmybeantest test# # tests run: 7 failures: 0 errors: 0 skipped: 0#$ mvn -dtestmybeantest#test1 test# # tests run: 1 failures: 0 errors: 0 skipped: 0#```maven configuration (in the root pomxml) :```xml<plugin>    <groupid>orgapachemavenplugins</groupid>    <artifactid>maven-surefire-plugin</artifactid>    <version>2222</version>    <configuration>        <skiptests>${skipunittests}</skiptests>        <includes>            <include>**/*testjava</include>        </includes>        <argline>-dnetbytebuddyexperimentaltrue @{argline} -dfileencoding${projectreportingoutputencoding}</argline>        <trimstacktrace>false</trimstacktrace>    </configuration></plugin>``` || thanks for reporting can you supply an example test case? it looks like an exception is supposed to be thrown but the constructor mocking intercepts its creation where something causes another exception which is again passed to the handlerdo you mock exceptions somewhere?also could you share the bottom of the stack trace which is where the circularity is introduced || seeing the same thing myself although i dont have a stable reproduction scenario the same was observed with `350` || could you try the latest release to see if the problem still occurs? || sorry i was not clear originally i saw the problem at first on `350` but still see it with `352` || @raphw yes i mock some exceptions in other test classes but the ones who ends with stackoverflowerror i will take some time today or next week to try to reproduce the bug in a small projectthe full stacktrace :```javalangstackoverflowerror	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:53)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	/*  */	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at javabase/javalangclasscastexception<init>(classcastexceptionjava:58)	at javabase/javalangthrowable<init>(throwablejava)	/* end of stacktrace */``` || this cant be the full stack trace since it needs to origin somewhere maybe its cut off in the print?i think i know the problem and tried to fix it unfortunately we have some release issues but you could build *release/3x* locally and try if the problem still occurs || im seeing the same error when trying to go from 346 to 350```javalangstackoverflowerror	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherisconstructormock(mockmethoddispatcherjava:57)	at javabase/javalangexception<init>(exceptionjava)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34) ```seems to be related to using a @spy in the test class when i change the @spy to an @mock the error goes away  what seems odd in my case is everything is ok until there are more than 15 tests in the class  15 tests will pass and any additional tests will failthe message of the first exception is `unexpected spy for javautilabstractmap on instance of javautilconcurrentconcurrenthashmap`    || @raphw same issue with v355stacktrace :```javalangstackoverflowerror	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)        	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javalangthrowable<init>(throwablejava)	at javabase/javalangexception<init>(exceptionjava:66)	at javabase/javalangruntimeexception<init>(runtimeexceptionjava:62)	at orgmockitoexceptionsbasemockitoexception<init>(mockitoexceptionjava:34)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:273)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)``` || @jdussouillez that gets us one step closer but i needed to add an exception for when the error is thrown could you build the *constructor-dispatch* branch locally and see what exception you get in your setup? || @raphw i installed v356 from the *constructor-dispatch* branch : no more errors all the tests were executed and passed so i guess commit  fixes the issuefeel free to ask if you want me to do more tests || thats strange since the exception indicates a scenario that should not occur i merely  the recursioncan you set a breakppint to see why this happens? what instance is created during spy construction?  || @raphw i didnt succeed in setting breakpoints but i added some logs (before [this line]( : ```diffdiff --git a/src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjava b/src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjavaindex 96477f4776b37ea09e 100644--- a/src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjava+++ b/src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytebuddymockmakerjava@@ -2656 +2659 @@ public class inlinebytebuddymockmaker                         } else if (typeisinstance(spy)) {                             return spy                         } else {+                            systemoutprintln(""type  "" + typegetname())+                            systemoutprintln(""object  "" + object)+                            systemoutprintln(""spy  "" + spygetclass()getname())                             issuspendedset(true)                             try {                                 // unexpected construction of non-spied object```logs (type is always `javautilabstractmap`):```type  javautilabstractmapobject  {}spy  commyprojectbeanmybean1type  javautilabstractmapobject  {}spy  commyprojectbeanmybean2type  javautilabstractmapobject  {}spy  commyprojectbeanmybean3``` || could you also add a stack trace at the same spot? (`threaddump()`) || code snippet to dump : ```javatry {    threaddumpstack()} catch (throwable t) {    systemoutprintln(""error while dumping stack: "" + tgetmessage())}```1 logs using [`threaddumpstack()`]( **after** `issuspendedset(true)````type  javautilabstractmapobject  {}spy  commyprojectbeanmybeantest$testclass<dump>javalangexception: stack trace	at javabase/javalangthreaddumpstack(threadjava:1388)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$new$3(inlinebytebuddymockmakerjava:272)	at orgmockitointernalcreationbytebuddymockmethodadvicehandleconstruction(mockmethodadvicejava:176)	at orgmockitointernalcreationbytebuddyinjectmockmethoddispatcherhandleconstruction(mockmethoddispatcherjava:69)	at javabase/javautilabstractmap<init>(abstractmapjava)	at javabase/javautilconcurrentconcurrenthashmap<init>(concurrenthashmapjava:828)	at javabase/javalangclassloader<init>(classloaderjava:333)	at javabase/javalangclassloader<init>(classloaderjava:457)	at javabase/jdkinternalreflectdelegatingclassloader<init>(classdefinerjava:72)	at javabase/jdkinternalreflectclassdefiner$1run(classdefinerjava:60)	at javabase/jdkinternalreflectclassdefiner$1run(classdefinerjava:58)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javabase/jdkinternalreflectclassdefinerdefineclass(classdefinerjava:57)	at javabase/jdkinternalreflectmethodaccessorgenerator$1run(methodaccessorgeneratorjava:400)	at javabase/jdkinternalreflectmethodaccessorgenerator$1run(methodaccessorgeneratorjava:394)	at javabase/javasecurityaccesscontrollerdoprivileged(native method)	at javabase/jdkinternalreflectmethodaccessorgeneratorgenerate(methodaccessorgeneratorjava:393)	at javabase/jdkinternalreflectmethodaccessorgeneratorgenerateconstructor(methodaccessorgeneratorjava:92)	at javabase/jdkinternalreflectnativeconstructoraccessorimplnewinstance(nativeconstructoraccessorimpljava:55)	at javabase/jdkinternalreflectdelegatingconstructoraccessorimplnewinstance(delegatingconstructoraccessorimpljava:45)	at javabase/javalangreflectconstructornewinstance(constructorjava:490)	at orgmockitointernalutilreflectionreflectionmemberaccessorlambda$newinstance$0(reflectionmemberaccessorjava:26)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerlambda$newinstance$4(inlinebytebuddymockmakerjava:631)	at orgmockitointernalutilreflectionreflectionmemberaccessornewinstance(reflectionmemberaccessorjava:26)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakernewinstance(inlinebytebuddymockmakerjava:626)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakerdocreatemock(inlinebytebuddymockmakerjava:373)	at orgmockitointernalcreationbytebuddyinlinebytebuddymockmakercreatespy(inlinebytebuddymockmakerjava:349)	at orgmockitointernalutilmockutilcreatemock(mockutiljava:44)	at orgmockitointernalmockitocoremock(mockitocorejava:61)	at orgmockitomockitospy(mockitojava:2033)	at commyprojectbeanmybeantesttest1(mybeantestjava:274)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orgjunitplatformcommonsutilreflectionutilsinvokemethod(reflectionutilsjava:686)	at orgjunitjupiterengineexecutionmethodinvocationproceed(methodinvocationjava:60)	at orgjunitjupiterengineexecutioninvocationinterceptorchain$validatinginvocationproceed(invocationinterceptorchainjava:131)	at orgjunitjupiterengineextensiontimeoutextensionintercept(timeoutextensionjava:149)	at orgjunitjupiterengineextensiontimeoutextensionintercepttestablemethod(timeoutextensionjava:140)	at orgjunitjupiterengineextensiontimeoutextensionintercepttestmethod(timeoutextensionjava:84)	at orgjunitjupiterengineexecutionexecutableinvoker$reflectiveinterceptorcalllambda$ofvoidmethod$0(executableinvokerjava:115)	at orgjunitjupiterengineexecutionexecutableinvokerlambda$invoke$0(executableinvokerjava:105)	at orgjunitjupiterengineexecutioninvocationinterceptorchain$interceptedinvocationproceed(invocationinterceptorchainjava:106)	at orgjunitjupiterengineexecutioninvocationinterceptorchainproceed(invocationinterceptorchainjava:64)	at orgjunitjupiterengineexecutioninvocationinterceptorchainchainandinvoke(invocationinterceptorchainjava:45)	at orgjunitjupiterengineexecutioninvocationinterceptorchaininvoke(invocationinterceptorchainjava:37)	at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:104)	at orgjunitjupiterengineexecutionexecutableinvokerinvoke(executableinvokerjava:98)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invoketestmethod$6(testmethodtestdescriptorjava:212)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorinvoketestmethod(testmethodtestdescriptorjava:208)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:137)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorexecute(testmethodtestdescriptorjava:71)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:135)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at javabase/javautilarraylistforeach(arraylistjava:1541)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at javabase/javautilarraylistforeach(arraylistjava:1541)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorserviceinvokeall(samethreadhierarchicaltestexecutorservicejava:38)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$5(nodetesttaskjava:139)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$7(nodetesttaskjava:125)	at orgjunitplatformenginesupporthierarchicalnodearound(nodejava:135)	at orgjunitplatformenginesupporthierarchicalnodetesttasklambda$executerecursively$8(nodetesttaskjava:123)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecuterecursively(nodetesttaskjava:122)	at orgjunitplatformenginesupporthierarchicalnodetesttaskexecute(nodetesttaskjava:80)	at orgjunitplatformenginesupporthierarchicalsamethreadhierarchicaltestexecutorservicesubmit(samethreadhierarchicaltestexecutorservicejava:32)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestexecutorexecute(hierarchicaltestexecutorjava:57)	at orgjunitplatformenginesupporthierarchicalhierarchicaltestengineexecute(hierarchicaltestenginejava:51)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:220)	at orgjunitplatformlaunchercoredefaultlauncherlambda$execute$6(defaultlauncherjava:188)	at orgjunitplatformlaunchercoredefaultlauncherwithinterceptedstreams(defaultlauncherjava:202)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:181)	at orgjunitplatformlaunchercoredefaultlauncherexecute(defaultlauncherjava:128)	at orgapachemavensurefirejunitplatformjunitplatformproviderinvokealltests(junitplatformproviderjava:150)	at orgapachemavensurefirejunitplatformjunitplatformproviderinvoke(junitplatformproviderjava:124)	at orgapachemavensurefirebooterforkedbooterinvokeproviderinsameclassloader(forkedbooterjava:384)	at orgapachemavensurefirebooterforkedbooterrunsuitesinprocess(forkedbooterjava:345)	at orgapachemavensurefirebooterforkedbooterexecute(forkedbooterjava:126)	at orgapachemavensurefirebooterforkedbootermain(forkedbooterjava:418)</dump>```2 logs using [`threaddumpstack()`]( **before** `issuspendedset(true)````type  javautilabstractmapobject  {}spy  commyprojectlibrarylibrarybean1<dump>type  javalangthrowableobject  javalangexceptionspy  commyprojectlibrarylibrarybean1<dump>type  javalangthrowableobject  javalangexceptionspy  commyprojectlibrarylibrarybean1error while dumping stack: unexpected spy for javalangthrowable on instance of javalangexception</dump>error while dumping stack: unexpected spy for javalangthrowable on instance of javalangexception</dump>error while dumping stack: unexpected spy for javalangthrowable on instance of javalangexception</dump>error while dumping stack: unexpected spy for javalangthrowable on instance of javalangexception</dump>error while dumping stack: unexpected spy for javalangthrowable on instance of javalangexception</dump>``` || i thought it would be related to class loadingi am curious however how you end uo with the reflection member accessor it should be the instrumentation based one are you using the latest build?  || > are you using the latest build?i pulled the *constructor-dispatch* branch this morning before giving you the `threaddumpstack()` output i just switched to branch *release/3x* (356 next 357) applied my logs and run my tests again : same results || strange ill investigate could you make sure that you dont have a stale version? you are using *mockito-inline* or are you configuring the mock maker manually?  || > could you make sure that you dont have a stale version?i already checked using `mvn dependency:tree` but it says im using 357 (im using the *release/3x* branch)i will try to copy my project use v352 and remove code step by step until i can reproduce the bug with only a few files so i can provide you a reproducible example----> you are using mockito-inline or are you configuring the mock maker manually?im using mockito-core :```xml<dependency>    <groupid>orgmockito</groupid>    <artifactid>mockito-core</artifactid>    <version>357</version>    <scope>test</scope></dependency>```and i do not configure anything manually i just have the `src/test/resources/mockito-extensions/orgmockitopluginsmockmaker` config file which contains```mock-maker-inline``` || that explains it you can drop the config and just use the inline artifact which defines the nock maker for you the member accessor is another plugin which requires manual activation using a similar file if you dont use the other artifact  || > you can drop the config and just use the inline artifact which defines the nock maker for youi used mockito-inline v356 all tests passed but 3 the 3 that fails are new ones (not the ones who failed before) and none of them use mockito (but all of them are on enums apparently `myenumvalues()` returns an array with null values inside) but theyre executed correctly when running them manually class by class ([like i did before]( you know how can i generate the inline jar from the sources ? i cant provide you the logs i added in the source with mockito-inline because the jar is not generated  /gradlew -x check clean build` || @raphw thank you for the fix and the time spent on this it works great ! || ";1;0;initializes classes prior to instrumentation to avoid uncontrolled code executionfixes \# #2011;
2034;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;escape mock during method dispatch on mock to avoid premature garbage collection.;under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch. to avoid this  we escape the mock instance during the dispatch to make sure that the gc cannot collect the object.;;1802.0;escape mock during method dispatch on mock to avoid premature garbage collection;under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch to avoid this we escape the mock instance during the dispatch to make sure that the gc cannot collect the object1802;indeed force pushed a new version just nowlets hope the jit stays dumb enough to avoid this error in the future - i was really certain that the stack allocation of the mock object would avoid the allocation but if the entire mockito call stack gets inlined that does no longer apply worst case we need to make the mockito call stack deeper then the inlining heuristic ) ||;"exception ""the mock object was garbage collected""";"we received the following exception while running tests using mockito either version 300 or 310 and im filing this bug as requested:```exception in thread ""main"" javalangillegalstateexception: the mock object was garbage collected this should not happen in normal circumstances when using public api typically the test class keeps strong reference to the mock object and it prevents getting the mock collected mockito internally needs to keep weak references to mock objects to avoid memory leaks for certain types of mockmaker implementations if you see this exception using mockito public api please file a bug for more information see issue #1313	at orgmockitointernalinvocationmockrefmockweakreferenceget(mockweakreferencejava:32)	at orgmockitointernalinvocationinterceptedinvocationgetmock(interceptedinvocationjava:106)	at orgmockitointernalstubbinginvocationcontainerimplinvokedmock(invocationcontainerimpljava:157)	at orgmockitointernalstubbingongoingstubbingimpl<init>(ongoingstubbingimpljava:22)	at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:83)	at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:29)	at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:35)	at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:61)	at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:49)	at orgmockitointernalcreationbytebuddymockmethodinterceptor$dispatcherdefaultingtorealmethodinterceptabstract(mockmethodinterceptorjava:126)	at orgmockitocodegenrunnable$mockitomock$1840149894run(unknown source)	at mockitotestruntest(mockitotestjava:13)	at mockitotestmain(mockitotestjava:6)```ive reduced the problem to the following test program:```javaimport orgmockito*public class mockitotest {  public static void main(string args) {    while (true) runtest()  }  private static void runtest() {    node list  createlist()    while (list ! null) {      node next  listnext      listobjectrun()      list  next    }  }  private static node createlist() {    node node  null    for (int i  0 i < 1000 ++i) {      node next  new node()      nextnext  node      node  next    }    return node  }  private static class node {    final runnable object  mockitomock(runnableclass)    node next  }}```whether the problem occurs depends on what exactly the jvm does with the code it looks like the mock object can be garbage collected between the call to the mocked method and mockito trying to use the weak reference to it im using adoptopenjdk 11037-hotspot on windows my test program more often than not reproduces the exception within a few seconds but occasionally it can run forever without failing";"i tried bisecting this issue happens after this pr || that makes sence if the `basestubbing` instance wraps the mocks and the latter instance is referenced via a weak reference then that latter instance can be gc-ed even if the actual mock instance is still in usethanks for the test since we both have a test for the ""too weak"" and the ""not sufficiently weak"" mock applications i hope that i can come up with a scenario that satisfies both conditions || this issue just came up as we tried to upgrade from 333 to either 346 or 359 a large chunk of our unit tests became flaky as a result holding onto a strong reference of `mockitoannotationsopenmocks()` does not seem to have any impact the only thing that seemed to rectify the issue was creating and retaining a `mockitosession` like via `mockitojunitrule()` (using the `mockspressojunitrunner` shows the same flakiness as no session is initialized in it) considering that `mockitomockitosession()` is labeled as optional and `@incubating` and considering that the junit rule & testrunner have always been optional historically this seems like a legitimate bug that will block mockito upgrades in many large codebases (especially those relying on mockito-kotlins inline `mock()` method) || yes this needs to be addressed the alternatives right now are unfortunately a leak or premature discarding i think a leak is the better alternative though since you can explicitly clear mockitos mock storethe updates within 3 should not have an impact but can have one as a result of changed gc cyclesi will try to solve this one the next time i find some free time to work on mockito || awesome! thanks so much for addressing this! || ";1;0;escape mock during method dispatch on mock to avoid premature garbage collection1802;
2042;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;mock resolver plugin;adds a plugin to allow for adding one or multiple mock resolvers. this way  instances that are provided to mockito s dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as spring.;;198.0;mock resolver plugin;adds a plugin to allow for adding one or multiple mock resolvers this way instances that are provided to mockitos dsl do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as springthis works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied if we ever find a more private appraoch this would however break springs mockito use and it is already broken with the inline mock makerby this spi spring could add an unproxy resolver to its mockito build-up and make its proxied mocks compatible with mockito other frameworks could use the same approach if desired as this spi is genericcloses #1980; merging 2042 ;add matchers for scala value classes containing primitives;the complete details are herehttps://groupsgooglecom/d/msg/mockito/m_ptz8evh58/ws2czeaad-oj;hiactually that will probably never happen as these classes are in the scala library which we cannot depend upon if this lib is not there then the class wont even load instead id rather suggest that it should be mockito sugar to declare them || i think that there is possibility i know that npe in any[somevalueclass] happens because of trying to assign null to value that looks like object but is primitive  maybe there is possibility to add some reflection checks in runtime instead of null just try to assign default primitive value as in handyreturnvaluesjavathe same could be applied to other matchers as matcherequal  there could be introduced some reflection check if given class has method equals() in runtime if not the comparison should be done as for primitivesthats why the hack anyobject()asinstanceof[somevalueclasswithstringvalue] works the string is simply not a primitive but has equals || i do not think we will put scala specific inside mockito as we just dont add groovy / android / jee specific stuffs because wed like to keep the working set as simple and focused as possible also theres the reason that we are not able to maintain stuff that we dont use in the team in our daily job this is especially true for scala / groovy and androidwhat you are asking certainly could be implemented in the mockito sugar library by changing the default answer of a mock at creation time (if not overridden by a user)as for matchers these would probably have to be handled by mockito sugar as well i just google and found that it is part of scalatest and that their project is host on gh too you should report to them imho :  || i understand that thank you || @ppiotrow thx to you for the interest in mockito ) ||;1;0;"fixing ""best"" constructor choice";
2046;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;do not exclude synthetic constructors from instrumentation. 2040.;byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (e.g. bridge methods). for constructor instrumentation  it is however crucial that no code is called during mock creation and that fields are copied during spy creation.;;2040.0;do not exclude synthetic constructors from instrumentation 2040;byte buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (eg bridge methods) for constructor instrumentation it is however crucial that no code is called during mock creation and that fields are copied during spy creation; merging 2046 ;mockitospy(activity)getbasecontext() returns null on robolectric 44 and java8;### descriptionsince robolectric 44 mockitospy(activity)getbasecontext() returns null### steps to reproduce```$ git clone -b mockito_spy_robolectric_4_4  demo$ cd demo// switch to robolectric 431$ git checkout head~1$ /gradlew  testdevelopdebugunittestbuild successful in 14s28 actionable tasks: 28 executed// switch to robolectric 44$ git checkout mockito_spy_robolectric_4_4$ /gradlew  testdevelopdebugunittest> task  testdevelopdebugunittest failedfailure: build failed with an exception* what went wrong:execution failed for task  testdevelopdebugunittest```failed unittest result :  robolectric & android version- compile sdk : 29- target sdk : 28- robolectric : 44 - mockito : 3510- jvm : openjdk 8### link to a public git repo demonstrating the problem: issue is copied from https://githubcom/robolectric/robolectric/issues/5916;"this seems to work with slightly older versions of mockito-inline eg 342 ill try a bisect and see what commit may have broken it || i did a bisect and this seems to have started failing in 47ef05814784183cd5c1d297078e2ad7e31cce34 `adds support for creating spies from within a mock instances constructor thus avoiding reflection on final fields`the workaround is to use mockito-inline < 350 i believe || i just had a look and the problem is likely with robolectric maybe they can have a look at the problem?mockito simply invokes the constructor chain and per class and within the constructor it copies all values field by field i am wondering if robolectric does some explicit initialization where this approach now failsi am to foreign to both android and robolectric to really understand why this no longer works but it likely is related to the timing of the field copyworst case we need to offer a switch to create spies using reflection if required but if we can get a hint why this timing is a problem we might be able to address this || thanks for the initial investigation @raphw i am one of the robolectric maintainers and can try investigating this its odd that on java 11 this occasionally works (but it is flaky according to robolectric/robolectric#5916) but on java 8 it seems to always fail || id like to understand in what field value the two objects differ to produce this result they should be identical unless some field is not discoverableif you could check what state difference is responsible i can probably find out how it occurred  || out of curiosity is there some kind of helper/debug util in mockito to dump an object to a string? in the meantime ill try to just serialize it to a json-type format || no we can dump class files but you could likely use a serializer such as jackson for this? || weird out of 269 fields the only difference is a field called mbase on the spy object it is null```diff132c132< class androidcontentcontextwrapper  androidappcontextimpl@6d340ec8---> class androidcontentcontextwrapper  null269a270>```mainactivity:    there a way to turn on debug logs during this field copy to see how mbase is being copied? || this is the class that contains the mbase field: its a long class hierarchy `mainactivity > appcompatactivity > fragmentactivity > componentactivity > activity > contextthemewrapper > contextwrapper > context` || i just noticed [contextthemewrapper]( which is the parent of contextwrapper calls the contextwrapper(null) constructor which could be setting mbase to null in contextwrapper:```    public contextthemewrapper() {        super(null)    }``````    public contextwrapper(context base) {        mbase  base    }```could this be causing `mbase` to be set to null? || how does one dump the class bytecode of the transient spy class created? i am curious what that looks like || -dnetbytebuddydump/some/folder || > mockito simply invokes the constructor chain and per class and within the constructor it copies all values field by fieldfor some reason when i do `spy(object)` i am not seeing the constructors being invoked what constructors does mockito invoke? are there some new/hidden constructors being generated? || no the constructors are pre and then the original chain is shortcut basically:```javapublic myclass { myclass() {  // some code} }```is turned into:```javapublic myclass { myclass() {  if (mockitoismockconstruction()) {    // mockito stuff basically copy all fields of the spied at object    return  }  // some code} }```as a consequence you cannot set a constructor breakpoint i had a look at the field state and for both *activity* and *mockactivity* `contextwrappermbase` is set to the same instance but only *activity* returns the fields value || out of curiosity how do you inject print statements to the field copy bytebuddy logic? i wanted to add some print statements to verify that the mbase before/after values are the same> i had a look at the field state and for both activity and mockactivity contextwrappermbase is set to the same instance but only activity returns the fields valuehow can you tell that? from what i see it seems like mbase is null for the spy activity:( you think its initially non-null and then gets set to null? || you are right i did not debug properly (intellij refuses to run the sample project for me i am back on the command line)when i inspect the transformed `contextwrapper` constructor i do however see that the field is copied within it:```        69: getfield      #40                 // field mbase:landroid/content/context        72: aload_0        73: dup_x1        74: pop        75: putfield      #40                 // field mbase:landroid/content/context```when is the `mbase` field populated? is this something done after object construction? || i created a special debug build (*println-constructor* you can run it by using your local maven repo and the *publishtomavenlocal* task of mockito) which shows what is happening by printing all field assignments it follows the pattern```<class name> // for each in hierarchy<mock object><field name> // for each field<spied field value><mock field value after setting>```this verifies that the field is actually set its very strange that the field is null again once it is used since this problem occurs only with robolectric there must be some mechanism where the value disappearsi also added a statement for the spy when it is constructed in its entirety and the field seems to be set correctly:```    debug robolectics: androidappcontextimpl@51ad277e - original androidappcontextimpl@51ad277e``````    class androidcontentcontext    comexamplemyapplicationmainactivity@6219c42b    public javalangobject androidcontentcontext__robo_data__    null    null    class androidcontentcontextwrapper    comexamplemyapplicationmainactivity@6219c42b    public javalangobject androidcontentcontextwrapper__robo_data__    null    null    androidcontentcontext androidcontentcontextwrappermbase    androidappcontextimpl@51ad277e    androidappcontextimpl@51ad277e    ``` || its very strange i optimized the example for output now and the fields seem to be set now that i changed the code:```java        field field  classforname(""androidcontentcontextwrapper"")getdeclaredfield(""mbase"")        fieldsetaccessible(true)        mainactivity activity  robolectricbuildactivity(mainactivityclass)setup()get()        object fieldbefore  fieldget(activity)        object methodbefore  activitygetbasecontext()        mainactivity spyactivity  mockitospy(activity)        throw new assertionerror(""activity field: "" + fieldget(activity)                        + "" - mock activity field: "" + fieldget(spyactivity)                        + "" - activity getter: "" + activitygetbasecontext()                        + "" - mock activity getter: "" + spyactivitygetbasecontext()                        + "" - activity field before: "" + fieldbefore                        + "" - activity getter before: "" + methodbefore                        + "" - original: "" + activity                        + "" - mock: "" + spyactivity)```my gutt fealing is that thats some sort of initialization issue for the original object that is triggered later then mockito expects it || maybe i turned blind but simply running:```javamainactivity activity  robolectricbuildactivity(mainactivityclass)setup()get()mainactivity spyactivity  mockitospy(activity)throw new assertionerror(activitygetbasecontext() + "" - "" + spyactivitygetbasecontext())```of the current *release/3x* branch yields both fields being set correctly maybe this is something we already fixed in mockito by accident? || okay i verified that mockito creates the spy correctly in any case but something happens to the object if passed through robolecticss runner logicthis test will function correctly:```@testpublic void test1() {  mainactivity activity  robolectricbuildactivity(mainactivityclass)setup()get()  mainactivity mockactivity  spy(activity)  assertequals(""compare base context between activity and mockactivity""     activitygetbasecontext()     mockactivitygetbasecontext())    }```while this test will yield yield an empty spy:```javaprivate mainactivity activityprivate mainactivity mockactivity@beforepublic void setup() {   activity  robolectricbuildactivity(mainactivityclass)setup()get()   mockactivity  spy(activity)}@testpublic void test1() { assertequals(""compare base context between activity and mockactivity""   activitygetbasecontext()       mockactivitygetbasecontext())}```how can that be? || comparing the output of the println branch: if the mock is created in the `@before` method the `contextwrapper` constructor is never invoked what seems dubious something must be done differently here || i added a simpler test case to the robolectric tree (currently `@ignored`) is very strange ive also seen situations where the test starts passing randomly and i usually have to do a `clean` to get it to start failing again it seems to fail more consistently when running through gradle vs running through intellij this sometimes indicates a classpath issuethanks for all your investigation and putting up that println branch ill try some print debugging as well || after adding some additional debug statements it seems like the mockito instrumentation for `contextwrapper` constructor is skipped so `contextthemewrapper` tries to call the  `contextwrapper` constructor but it calls a non-instrumented one maybe the default empty constructor is private?```start of constructor for class androidappactivityinvoking super constructor class androidappactivity -> android/view/contextthemewrapperstart of constructor for class androidviewcontextthemewrapperinvoking super constructor class androidviewcontextthemewrapper -> android/content/contextwrapperstart of constructor for class androidcontentcontextinvoking super constructor class androidcontentcontext -> java/lang/object``` || from looking at the bytecode i see that contextthemewrapper calls contextwrapper():```  public androidviewcontextthemewrapper()            31: invokespecial #317                // method android/content/contextwrapper""<init>"":()v```however in contextwrapper the no-arg constructor is not insrumented:```  public androidcontentcontextwrapper()    code:       0: aload_0       1: invokespecial #816                // method android/content/context""<init>"":()v       4: aload_0       5: invokevirtual #819                // method $$robo$init:()v       8: return```the one-arg contextwrapper constructor is instrumented though:```  public androidcontentcontextwrapper(androidcontentcontext)``` || this seems to be a simpler repro of the issue (non-robolectric):** edit **nvm still looking into a non-robolectric repro: || the issue seems to be that mockito is not instrumenting the no-arg `public androidcontentcontextwrapper()` constructor yet it is the one being selected to be called from the base class `contextthemewrapper` the one-arg `public androidcontentcontextwrapper(context)` does get instrumented but the no-arg one is preferred as the one to be called from the base classdo you know what might cause mockito to skip over the no-arg `public androidcontentcontextwrapper()` constructor? || is that constructor added later by robolectrics? maybe theres some confusion around the creation order it instruments the constructors in-flight but takes basis on the reflective model you can set a breakpoint in the `constructorshortcut`s `wrap` method  does the no-arg constructor ever arrive here? if not walk a bit down the stack into byte buddy to see if byte buddy was able to resolve this constructor to begin with || yes it does seem like robolectric adds the no-arg constructor: does it do this? i cannot say exactly that code was added many years ago) || its certainly related to that byte buddy uses the reflection api to process the members how is it even possible that the reflection api is unaware of a constructor? a class cannot add members after its loaded the jvm does not allow it i assume this also explains why it makes a difference where the mock is created does robolectrics transform classes from one class loader into another? i have a feeling this is somewhat related to parallel versions of the same class  || as a workaround mockito could prefer non-synthetic constructors for the time being  || another possible solution: could mockito only select super-constructors to call that are known to be instrumented? it should be possible to keep track of that || `constructorshortcutwrap` never hits the no-arg `contextwrapper()` constructor i am not sure how to check if bytebuddy ever resolved it but i do not believe it did || > i have a feeling this is somewhat related to parallel versions of the same classyes i believe this is happening when an android test is run initially the android sdk stubs are on the classpath which contains a small subset of the real android framework jar that are all no-ops robolectric during runtime pulls in the real android framework jars and instruments the android classes to use the real android code (plus mixes in the shadows which override the framework method implementations) || btw i think preferring non-synthetic constructors seems like a fine workaround for now i will attempt to stop adding the no-arg constructor to android objects im not sure to what extent it is still being used || actually bytebuddy does seem to find the no-arg contextwrapper constructor but `methoddescription` is null so the `wrap` method does not get invoked:![image]( || yes its in the changed class file but i wonder why the reflection api does not contain those constructors thats why byte buddy cannot map them i assume that the class is reloaded somehow into another class loader what then causes this mismatchthe problem in short is that contectwrapper classgetdeclaredconstructors() does not add the added no argument constructor  || thanks for all your hard work @raphw! i am glad this is fixed || right back at you! thanks for your patient debugging help!  || ";1;0;do not exclude synthetic constructors from instrumentation 2040;
2051;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;update to openjdk 15.;use java 15 in builds for most recent java version.;;0;update to openjdk 15;use java 15 in builds for most recent java version;"seems like we got some test failures :( || needed to update jacoco works now || strangely enough it builds locally will investigate some more!  || its weird if i build locally with the same command and java version (build and major) i cannot reproduce this error || i dont think i have java 15 installed on any of my machines and not sure if i can get a hold of them looking at the test failures many of them seem related to how we handle `null` with primitive matchers is there some way to check the changelog to see if we see any suspicious changes? || i ran the exact build version locally and it works on a fresh clone even also on linux  || i am seeing these failures for jdk 15 (build 15+36-1562) as well but on windowsit looks like the cause for this is [jdk-8233014]( which enables ""helpful nullpointerexceptions"" by defaultthe tests which are failing apparently make assumptions about how nullpointerexceptions look like which are now not true anymore:*  now mentions the name of the method which returned `null`:  > javalangnullpointerexception: cannot invoke ""javalangbytebytevalue()"" because the return value of ""orgmockitousageimethodsbyteobjectreturningmethod()"" is null*  that nullpointerexception has no message*  that nullpointerexceptions has no message || thanks for the great investigation @marcono1234 do you mind creating a pr with the necessary fixes to make it work on jdk 15? || i fear that i am not familiar enough with mockito to perform these changes while still keeping the intended functionality for the testsfor `stubbingwithdelegatetest` it looks like this could be simplified to checking whether the returned `byte` is `null` instead of provoking the `nullpointerexception` is that correct? i assume for `deepstubsserializabletest` it is similar it might already suffice to check whether `next()` returned `null`but for `invaliduseofmatcherstest` maybe the only solution would be to drop the requirement that the message must be `null` || the requirement does not seem meaningful to me at least i just  the tests to not require an empty message ||   good point i just adjusted the tests || ";;;;1;1;adjust build to support java 15;
2071;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;2061: argumentmatcher error messages use lambda class names;2061;;206.0;2061: argumentmatcher error messages use lambda class names;2061; merging 2071 ;nojunitdependenciestest is failing on windows machine;i found nojunitdependenciestest unit test is the only unit test that fails when you run the build on windows machine (i have also ubuntu and it is fine for some reason on unix platform)root cause: caused by: javalangnoclassdeffounderror: org\mockito\internal\invocation\invocationmarker (wrong name: org/mockito/internal/invocation/invocationmarker)full stacktrace  org\mockito\internal\invocation\invocationmarker has some dependency to junit    at orgmockitointegrationnojunitdependenciestestcheckdependency(nojunitdependenciestestjava:36)    at orgmockitointegrationnojunitdependenciestestpure_mockito_should_not_depend_junit(nojunitdependenciestestjava:28)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:57)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:45)    at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:15)    at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:42)    at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:20)    at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:263)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:68)    at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:47)    at orgjunitrunnersparentrunner$3run(parentrunnerjava:231)    at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:60)    at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:229)    at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:50)    at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:222)    at orgjunitrunnersparentrunnerrun(parentrunnerjava:300)    at orggradleapiinternaltaskstestingjunitjunittestclassexecuterruntestclass(junittestclassexecuterjava:86)    at orggradleapiinternaltaskstestingjunitjunittestclassexecuterexecute(junittestclassexecuterjava:49)    at orggradleapiinternaltaskstestingjunitjunittestclassprocessorprocesstestclass(junittestclassprocessorjava:69)    at orggradleapiinternaltaskstestingsuitetestclassprocessorprocesstestclass(suitetestclassprocessorjava:48)    at sunreflectgeneratedmethodaccessor37invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    at orggradlemessagingdispatchcontextclassloaderdispatchdispatch(contextclassloaderdispatchjava:32)    at orggradlemessagingdispatchproxydispatchadapter$dispatchinginvocationhandlerinvoke(proxydispatchadapterjava:93)    at comsunproxy$proxy2processtestclass(unknown source)    at orggradleapiinternaltaskstestingworkertestworkerprocesstestclass(testworkerjava:105)    at sunreflectgeneratedmethodaccessor36invoke(unknown source)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:601)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:35)    at orggradlemessagingdispatchreflectiondispatchdispatch(reflectiondispatchjava:24)    at orggradlemessagingremoteinternalhubmessagehub$handlerrun(messagehubjava:360)    at orggradleinternalconcurrentdefaultexecutorfactory$stoppableexecutorimpl$1run(defaultexecutorfactoryjava:64)    at javautilconcurrentthreadpoolexecutorrunworker(threadpoolexecutorjava:1145)    at javautilconcurrentthreadpoolexecutor$workerrun(threadpoolexecutorjava:615)    at javalangthreadrun(threadjava:722)caused by: javalangnoclassdeffounderror: org\mockito\internal\invocation\invocationmarker (wrong name: org/mockito/internal/invocation/invocationmarker)    at javalangclassloaderdefineclass1(native method)    at javalangclassloaderdefineclass(classloaderjava:791)    at javasecuritysecureclassloaderdefineclass(secureclassloaderjava:142)    at javaneturlclassloaderdefineclass(urlclassloaderjava:449)    at javaneturlclassloaderaccess$100(urlclassloaderjava:71)    at javaneturlclassloader$1run(urlclassloaderjava:361)    at javaneturlclassloader$1run(urlclassloaderjava:355)    at javasecurityaccesscontrollerdoprivileged(native method)    at javaneturlclassloaderfindclass(urlclassloaderjava:354)    at orgmockitoutilclassloaders$localexcludingurlclassloaderfindclass(classloadersjava:156)    at javalangclassloaderloadclass(classloaderjava:423)    at javalangclassloaderloadclass(classloaderjava:356)    at javalangclassforname0(native method)    at javalangclassforname(classjava:266)    at orgmockitointegrationnojunitdependenciestestcheckdependency(nojunitdependenciestestjava:34)     41 more;hithanks for reporting i dont own a windows box so i dont know if i will fix this one asapthis has probably something to do with the path thats the only thing that come to me at that time || i reproduced problem and found solution - in a sec i will create pr ||;1;0;2061: argumentmatcher error messages use lambda class names;
2071;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;2061: argumentmatcher error messages use lambda class names;2061;;2061.0;2061: argumentmatcher error messages use lambda class names;2061; merging 2071 ;lambda used as argumentmatcher causes decamelized lambda name to appear in error message;"### versionmockito version: 3513### descriptionrelates to #1932when using a lambda or method reference expression as `argumentmatcher` and the matcher fails the error message contains the lambda / method reference class name in ""decamelized"" form which is rather irritating eg:> myinterfacedosomething(    <mockito test$$ lambda$ 4 8/ 0x 0 0 0 0 0 0 0 8 0 0c 8f 4 4 0>)expected would be that similar to anonymous classes the error output says ""\<custom argument matcher\>"" this could probably be achieved by testing for `classissynthetic()` in `orgmockitointernalmatcherstextmatchertostringtostring(argumentmatcher<?>)` before calling `decamelizematcher` there### test case```javapublic class mockitotest {    interface myinterface {        void dosomething(string s)    }        private static boolean matches(string s) {        return false    }        public static void main(string args) {        myinterface mock  mock(myinterfaceclass)        try {            verify(mock)dosomething(argthat(arg -> false))        } catch (error e) {            eprintstacktrace()        }        try {            verify(mock)dosomething(argthat(mockitotest::matches))        } catch (error e) {            eprintstacktrace()        }                // when an anonymous class is used the output is <custom argument matcher>        // (as expected)        verify(mock)dosomething(argthat(new argumentmatcher<>() {            @override            public boolean matches(string argument) {                return false            }        }))    }}```";> this could probably be achieved by testing for classissynthetic() insounds like a good idea do you want to submit a pr?  sorry for the delay have submitted the pull request: #2071feedback is appreciated! ||;1;0;2061: argumentmatcher error messages use lambda class names;
2098;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;1;0;0;0;0;1;0;0;1;improve error message if initializer fails.;non-initializable classes can never be mocked  an error message should help guide on these issues.;;0;improve error message if initializer fails;non-initializable classes can never be mocked an error message should help guide on these issues;indeed just updated the pr ||  merging 2098 ;;;;1;1;update src/main/java/org/mockito/internal/creation/bytebuddy/inlinebytecodegeneratorjavaco-authored-by: marcono1234 <marcono1234@usersnoreplygithubcom>;
2135;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;add void static method mocking example;signed-off-by: gábor lipták <gliptak@gmail.com>;;0;add void static method mocking example;signed-off-by: gábor lipták <gliptak@gmailcom>https://githubcom/mockito/mockito/issues/2027;;;;;1;1;add void static method mocking examplesigned-off-by: gábor lipták <gliptak@gmailcom>;
2140;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;endorsed mockitotestnglistener in the documentation;after the latest changes in mockitotestnglistener i sure that can be used without worry.;;0;endorsed mockitotestnglistener in the documentation;after the latest changes in mockitotestnglistener i sure that can be used without worrycheck list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 2140 ;;;;1;1;a little mockitotestnglistener promotion;
2145;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix in the doc for  mocking object construction;this is a suggestion for changing the documentation for  mocking object;;0;"fix in the doc for ""mocking object construction""";"this is a suggestion for changing the documentation for ""mocking objectconstruction""  previously the documentation has suggested that`mockedconstruction` can define mock behavior and to verify static methodinvocations  however it is meant for defining mock behavior and verifyingnon-static method invocations -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_"; merging 2145 ;;;;1;1;"fix in the javadoc for ""mocking object construction""this is a suggestion for changing the documentation for ""mocking objectconstruction""  previously the documentation has suggested thatmockedconstruction can define mock behavior and to verify static methodinvocations  however it is meant for defining mock behavior and verifyingnon-static method invocations";
2158;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;add field type in @mock example;javadoc-only change;;0;add field type in @mock example;javadoc-only change<sup>(imo not worth separate issue nor rn mentioning)</sup>;nice thanks for fixing! ||;;;;1;1;add field type in @mock example;
2175;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;argumentmatches: fix javadoc typo/grammar;i started out with noticing the  safer that it was  part which felt like a typo. then i realized there were perhaps more errors in this sentence (which was duplicated in multiple places in this file). please verify that i understood the intent of this comment correctly  but my hope is that this is now the more correct way to express this.;;0;argumentmatches: fix javadoc typo/grammar;"i started out with noticing the ""safer that it was"" part which felt like a typo then i realized there were perhaps more errors in this sentence (which was duplicated in multiple places in this file) please verify that i understood the intent of this comment correctly but my hope is that this is now the more correct way to express thisagain thanks for a great framework!   ";;;;;1;1;argumentmatches: fix javadoc typo/grammar;
2176;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;bump versions.errorprone from 2.4.0 to 2.5.1;bumps  versions.errorprone  from 2.4.0 to 2.5.1. updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p> (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2092.0;bump versionserrorprone from 240 to 251;"bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>";errorprone is catching actual issues i will work through them ||;the target server failed to respond ci issue;find solution to this problem on ci:```execution failed for task  bintrayupload133 actionable tasks: 117 executed 16 up-to-date> orgapache the target server failed to respond```build failure: https://githubcom/mockito/mockito/pull/2089/checks?check_run_id1370793325;i think we were able to resolve this issue in the mean time ||;1;0;fix errorprone compilation errors;
2176;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;bump versions.errorprone from 2.4.0 to 2.5.1;bumps  versions.errorprone  from 2.4.0 to 2.5.1. updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p> (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2094.0;bump versionserrorprone from 240 to 251;"bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>";errorprone is catching actual issues i will work through them ||;refactor gradle wrapper validation workflow to ci workflow;refactor gradle wrapper validation workflow to ci workflow this way we ci feedback on prs is cleaner and easier to use;;1;0;fix errorprone compilation errors;
2176;0;1;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;bump versions.errorprone from 2.4.0 to 2.5.1;bumps  versions.errorprone  from 2.4.0 to 2.5.1. updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p> (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.5.1</h2> <p>changes</p> <p>nosuchmethoderror:  com.sun.tools.javac.util.list com.sun.tools.javac.code.symbol$typesymbol.getenclosedelements</p> <ul> <li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href=  >#2092</a>)</li> <li>fixed <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href=  >#2099</a>)</li> <li>false positive in <code>differentnamebutsame</code> (<a href=  >#2094</a>)</li> <li>false positive in <code>unnecessaryoptionalget</code> (<a href=  >#2101</a>)</li> <li>false positive in <code>unnecessarymethodreference</code> (<a href=  >#2102</a>)</li> <li>fixed a regression in jdk 16-ea support (<a href=  >#2105</a>)</li> </ul> <h2>error prone 2.5.0</h2> <p>new checks:</p> <ul> <li><a href=  >banserializableread</a></li> <li><a href=  >catchingunchecked</a></li> <li><a href=  >computeifabsentambiguousreference</a></li> <li><a href=  >dangerousliteralnull</a></li> <li><a href=  >datechecker</a></li> <li><a href=  >differentnamebutsame</a></li> <li><a href=  >donotcallsuggester</a></li> <li><a href=  >donotclaimannotations</a></li> <li><a href=  >donotmockautovalue</a></li> <li><a href=  >floggerformatstring</a></li> <li><a href=  >floggerlogvarargs</a></li> <li><a href=  >floggerlogwithcause</a></li> <li><a href=  >floggermessageformat</a></li> <li><a href=  >floggerpassedaround</a></li> <li><a href=  >floggerredundantisenabled</a></li> <li><a href=  >floggerrequiredmodifiers</a></li> <li><a href=  >floggersplitlogstatement</a></li> <li><a href=  >floggerwithcause</a></li> <li><a href=  >floggerwithoutcause</a></li> <li><a href=  >hashcodetostring</a></li> <li><a href=  >identityhashmapusage</a></li> <li><a href=  >immutablemembercollection</a></li> <li><a href=  >immutablesetforcontains</a></li> <li><a href=  >initializeinline</a></li> <li><a href=  >invalidthrowslink</a></li> <li><a href=  >isinstanceincompatibletype</a></li> <li><a href=  >javautildate</a></li> <li><a href=  >jodaconstructors</a></li> <li><a href=  >jodadatetimeconstants</a></li> <li><a href=  >longfloatconversion</a></li> <li><a href=  >membername</a></li> <li><a href=  >misplacedscopeannotations</a></li> <li><a href=  >objectequalsforprimitives</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >returnsnullcollection</a></li> </ul> <!-- raw html omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>5e733ac</code></a> release error prone 2.5.1</li> <li><a href=  ><code>4f69766</code></a> support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li> <li><a href=  ><code>6861403</code></a> don t set checks as <code>disableable = false</code> in external</li> <li><a href=  ><code>a7f3413</code></a> handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li> <li><a href=  ><code>7a65117</code></a> <code>symbol.islocal</code> was renamed in jdk 16</li> <li><a href=  ><code>fb6d049</code></a> don t suggest private constructors for abstract classes</li> <li><a href=  ><code>7d93df4</code></a> fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li> <li><a href=  ><code>b1eaa17</code></a> only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li> <li><a href=  ><code>144c760</code></a> address a <code>visiblefortestingused</code> finding</li> <li><a href=  ><code>0951985</code></a> generate javadoc in ci pipeline</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2105.0;bump versionserrorprone from 240 to 251;"bumps `versionserrorprone` from 240 to 251updates `error_prone_core` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li> <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 240 to 251<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 251</h2><p>changes</p><p>nosuchmethoderror: comsuntoolsjavacutillist comsuntoolsjavaccodesymbol$typesymbolgetenclosedelements</p><ul><li>fixed <code>nosuchmethoderror</code> crash in <code>hidingfield</code> (<a href"" <code>nosuchelementexception</code> crash in <code>restrictedapichecker</code> (<a href"" positive in <code>differentnamebutsame</code> (<a href"" positive in <code>unnecessaryoptionalget</code> (<a href"" positive in <code>unnecessarymethodreference</code> (<a href"" a regression in jdk 16-ea support (<a href"" prone 250</h2><p>new checks:</p><ul><li><a href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" href"" raw html omitted --></blockquote><p> (truncated)</p></details><details><summary>commits</summary><ul><li><a href"" release error prone 251</li><li><a href"" support pre-jdk-8044853 early-desugaring of <code>jcnewclass</code></li><li><a href"" dont set checks as <code>disableable  false</code> in external</li><li><a href"" handle classes with explicit enclosing instances in <code>differentnamebutsame</code></li><li><a href"" <code>symbolislocal</code> was renamed in jdk 16</li><li><a href"" dont suggest private constructors for abstract classes</li><li><a href"" fix handling of <code>super::</code> method references in <code>unnecessarymethodreference</code></li><li><a href"" only report <code>unnecessaryoptionalget</code> findings if the receivers are identical</li><li><a href"" address a <code>visiblefortestingused</code> finding</li><li><a href"" generate javadoc in ci pipeline</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>";errorprone is catching actual issues i will work through them ||;stackoverflow trying mock javalangmath;"<img width""741"" alt""captura de tela 2020-11-20 às 19 59 15"" src"" this point seems we get a loop in calls that causes stackoverflow when trying to static mock javalangmath";please do not mock `javalang*` classes as mockito us built on top of these please use the real method/class ||;1;0;fix errorprone compilation errors;
2179;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix reversed order of verify parameters;for consistency the parameters of the method;;2173.0;fix reversed order of verify parameters;for consistency the parameters of the methodmockedstaticverify(verificationmode verification)have been swapped tomockedstaticverify(verification verificationmode)as this order is already used inmockitoverify(t verificationmode)fixes: #2173check list -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 2179 ;feature request: unify order of parameters;helloi just stumbled accross the switched order of the verificationmode parameter    orgmockitomockitoverify(t verificationmode)vs    orgmockitomockedstaticverify(verificationmode verification)is there a reason the verificationmode from mockitostatic is at first position?;no this might be a simple oversight @raphw i think we can reverse the order? we would need to add an overload and then deprecate the existing one which we can delete in mockito 400 || no i dont think i had an intention with the order possibly to have the lambda last what often works better with languages like kotlin but i think consistency is the better goal  || @bohni do you mind sending us a pr with the added method + deprecation? || ok i will take a look ||;1;0;fix reversed order of verify parametersfor consistency the parameters of the methodmockedstaticverify(verificationmode verification)have been swapped tomockedstaticverify(verification verificationmode)as this order is already used inmockitoverify(t verificationmode)fixes: #2173;
2180;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;fix typo in javadocs of mockedconstruction;hi 🖐;;0;fix typo in javadocs of mockedconstruction;hi 🖐i noted this while reading the javadocs of mockedconstructionthey were referring to static method and out of scope variable it isnt quite easy to grasp in this context i think its just a copy-paste mistake; merging 2180 ;;;;1;1;fix typo in javadocs of mockedconstruction;
2193;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;2154 : java.lang.object is now instrumented again;seems like;;2154.0;2154 : javalangobject is now instrumented again;seems like ```// the object type does not ever need instrumentationtargetsremove(objectclass)```in `orgmockitointernalcreationbytebuddyinlinebytecodegeneratortriggerretransformation(set<class<?>> boolean)` was a bit over the top i e it does seem to break mocking of `tostring` when inherited from `javalangobject`i added a test for this which should have been there in the first place due to this i am still not sure if removing the line is safe even if the whole test suite is green please review carefully;yeah good point i dont know why i ever added that ||;`tostring()` seems to be broken on 3628;"hi guys i think the `tostring()` method was broken recently i have a test for mockito-scala that checks a mock `tostring` invocation returns its name but if i try to update to said version it returns the standard `object` implementation of `tostring`i tried with the ""pure"" java api of mockito and the same thing happensthanks!";"the release diff ( points to #2098 most likely can you do a bisect to figure out if that is indeed the problematic pr? || possibly related and maybe helpful in diagnosing is that attempting to work around this issue by adding an explicit stub for `tostring` (eg `when(somemocktostring())thenreturn(""somemock"")`) will cause a `missingmethodinvocationexception`:```textorgmockitoexceptionsmisusingmissingmethodinvocationexception: when() requires an argument which has to be a method call on a mockfor example:    when(mockgetarticles())thenreturn(articles)also this error might show up because:1 you stub either of: final/private/equals()/hashcode() methods   those methods *cannot* be stubbed/verified   mocking methods declared on non-public parent classes is not supported2 inside when() you dont call method on mock but on some other object``` || could you try downgrading bytebuddy to 11015 and see if that resolves the issue? || i can confirm i am facing the same issue when upgrading from 320 to 377 || hi therei came across this bug and decided to have a look i cannot reproduce it maybe ive got something wrong here anyway i provided a test repository with a test build which we may use to get behind things here me know how things go 👋 || hi @janmosigitemis i was able to reproduce the issue with your test repository just replace ""mockito-core"" with ""mockito-inline"            <dependency>                <groupid>orgmockito</groupid>                <artifactid>mockito-core</artifactid>                <version>${mockitoversion}</version>                <scope>test</scope>            </dependency>``````            <dependency>                <groupid>orgmockito</groupid>                <artifactid>mockito-inline</artifactid>                <version>${mockitoversion}</version>                <scope>test</scope>            </dependency>```you should get:```[info] -------------------------------------------------------[info]  t e s t s[info] -------------------------------------------------------[info] running deitemisjmomockitoissue2154mockitoissue2154junit5test[error] tests run: 2 failures: 0 errors: 1 skipped: 0 time elapsed: 1526 s <<< failure! - in deitemisjmomockitoissue2154mockitoissue2154junit5test[error] test_stubbed_to_string_works  time elapsed: 0054 s  <<< error!orgmockitoexceptionsmisusingmissingmethodinvocationexception: when() requires an argument which has to be a method call on a mockfor example:    when(mockgetarticles())thenreturn(articles)also this error might show up because:1 you stub either of: final/private/equals()/hashcode() methods   those methods *cannot* be stubbed/verified   mocking methods declared on non-public parent classes is not supported2 inside when() you dont call method on mock but on some other object	at deitemisjmomockitoissue2154mockitoissue2154junit5testtest_stubbed_to_string_works(mockitoissue2154junit5testjava:26)[info] running deitemisjmomockitoissue2154mockitoissue2154junit4test[error] tests run: 2 failures: 0 errors: 1 skipped: 0 time elapsed: 0041 s <<< failure! - in deitemisjmomockitoissue2154mockitoissue2154junit4test[error] test_stubbed_to_string_works  time elapsed: 0018 s  <<< error!orgmockitoexceptionsmisusingmissingmethodinvocationexception: when() requires an argument which has to be a method call on a mockfor example:    when(mockgetarticles())thenreturn(articles)also this error might show up because:1 you stub either of: final/private/equals()/hashcode() methods   those methods *cannot* be stubbed/verified   mocking methods declared on non-public parent classes is not supported2 inside when() you dont call method on mock but on some other object	at deitemisjmomockitoissue2154mockitoissue2154junit4testtest_stubbed_to_string_works(mockitoissue2154junit4testjava:26)[info] [info] results:[info] [error] errors: [error]   mockitoissue2154junit4testtest_stubbed_to_string_works:26 missingmethodinvocation[error]   mockitoissue2154junit5testtest_stubbed_to_string_works:26 missingmethodinvocation[info] [error] tests run: 4 failures: 0 errors: 2 skipped: 0```let me know if this info is enough for you or if i should fork your repo || thx @pitschr i can reproduce now the problem is also present in the latest mockito-inline release 377 || @timvdlippe i downgraded to byte buddy 11015 via maven exclusion and got the same result || i had a hunch that in  the line `targetsremove(objectclass)` could be the culprit i removed it on my local machine build mockito-inline 379 and used it in my test repo works like a charm now ive got too few internal mockito knowledge in order to come up with a decent pr on this bc i dont know exactly why this line has been introduced and if it would be safe to simply remove it any thoughts on this? || thanks for the investigation @janmosigitemis ! in general if our full test suite passes with that line removed it should be safe to do so please add a regression test to our test suite as well and then feel free to open a pr for it! || ok ill try || ";1;0;2154 : made changes spotless;
2194;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;1;0;0;0;0;1;0;0;1;add api for clearing mocks.;by clearing mocks  caches are emptied and instrumentations are reversed.;;0;add api for clearing mocks;by clearing mocks caches are emptied and instrumentations are reversed;;;;;1;1;add api for clearing mocksby clearing mocks caches are emptied and instrumentations are reversed;
2227;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;add missing deprecated annotation;discovered while trying to sync mockito internally at google.;;0;add missing deprecated annotation;discovered while trying to sync mockito internally at google;;;;;1;1;add missing deprecated annotationdiscovered while trying to sync mockito internally at google;
2236;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;bugfix/2235 verify on a wrapped mock fails;pr for #2235: verify() on a wrapped mock fails with unfinishedverificationexception;;2235.0;bugfix/2235 verify on a wrapped mock fails;pr for #2235: verify() on a wrapped mock fails with unfinishedverificationexception;;verify() on a wrapped mock fails with unfinishedverificationexception;i am currently using the mock resolver plugin feature (#2042) in my projects but verify() on a wrapped mock does not work as expected and throws a unfinishedverificationexceptiona junit5 test case to reproduce this bug is already in the exttest module: [mockresolvertest]( but it is not executed by default adding the junitjupiterengine as test runtime the mockresolvertest is executed but fails with following message:<pre>missing method call for verify(mock) here:-> at orgmockitousagepluginsresolvermockresolvertest$mockwrapperdoit(mockresolvertestjava:47)example of correct verification:    verify(mock)dosomething()also this error might show up because you verify either of: final/private/equals()/hashcode() methodsthose methods *cannot* be stubbed/verifiedmocking methods declared on non-public parent classes is not supportedorgmockitoexceptionsmisusingunfinishedverificationexception: missing method call for verify(mock) here:-> at orgmockitousagepluginsresolvermockresolvertest$mockwrapperdoit(mockresolvertestjava:47)example of correct verification:    verify(mock)dosomething()also this error might show up because you verify either of: final/private/equals()/hashcode() methodsthose methods *cannot* be stubbed/verifiedmocking methods declared on non-public parent classes is not supported	at orgmockitointernalexceptionsreporterunfinishedverificationexception(reporterjava:115)	at orgmockitointernalprogressmockingprogressimplvalidatemoststuff(mockingprogressimpljava:124)	at orgmockitointernalprogressmockingprogressimplvalidatestate(mockingprogressimpljava:105)	at orgmockitointernalmockitocorevalidatemockitousage(mockitocorejava:248)	at orgmockitomockitovalidatemockitousage(mockitojava:3248)	at orgmockitointernalframeworkdefaultmockitosessionfinishmocking(defaultmockitosessionjava:93)	at orgmockitojunitjupitermockitoextensionaftereach(mockitoextensionjava:186)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invokeaftereachcallbacks$11(testmethodtestdescriptorjava:253)	at orgjunitjupiterenginedescriptortestmethodtestdescriptorlambda$invokeallaftermethodsorcallbacks$12(testmethodtestdescriptorjava:269)	at orgjunitplatformenginesupporthierarchicalthrowablecollectorexecute(throwablecollectorjava:73)</pre>the reason why failing is a missing mockutilresolve() before the identity check here: will provide a pr to fix this issue;;1;0;spotlessapply;
2241;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;2238: do not omit stack frames of causing class;this pr will fix this problems described in #2238.;;2238.0;2238: do not omit stack frames of causing class;this pr will fix this problems described in #2238 the main cause wasnt the `hiderecursivecall` method but `tryinvoke` methodin `tryinvoke` the original stacktrace will be passed through the configured filter after it has been modified  hiderecursivecall`when calling `hiderecursivecall` the second argument (`current`) is set the the length of the stack trace of the causing exceptionthis will omit too much stack frames ultimately skipping the lines containing of the root exception causein this patch `tryinvoke` will try to find a better starting frame when an exception is caughtit will do this by investigating the created stack trace and look for the first entry matching the class name of the `instance` object given to `tryinvoke` this offset will then be given to `hiderecursivecall` as `current` argument instead of using the stack trace lengthif there is no `instance` object (`null`) the length of the stack trace is used (like before);;stacktraces of exceptions are trimmed too much;"hiim not sure if this is a bug or an intended behaviourwhen testing a method which throws an exception (checked or unchecked) the causing line is suppressed in the stack coming from mockitosimple example:```javapackage testimport javaioioexceptionimport orgmockitomockitopublic class testspy {    public static void main(string args) throws ioexception {        foo spy  mockitospy(new foo())        spymessage()    }    public static class foo {        public void message() throws ioexception {            systemoutprintln(""hello 1!"") // line 15            systemoutprintln(""hello 2!"")            throw new ioexception(""fatal"") // line 17        }    }}```when calling message() on the spy (same happens on a full mock as well) i would expect to see line 17 in the exception causeinstead i see this:```exception in thread ""main"" javaioioexception: fatal	at testtestspy$foomessage(testspyjava:15)	at testtestspymain(testspyjava:10)```line 15 contains systemoutprintln which is not causing the exception but is the first expression inside of the method message()i debugged this behaviour and came to `orgmockitointernalcreationbytebuddymockmethodadvicehiderecursivecall(throwable int class<?>)` which seems to be the root cause for this the stack trace given to that method includes the correct line (line 17 in this case) my stack trace in this case has 18 entries in total:```javaioioexception: fatal	at testtestspy$foomessage(testspyjava:17)	at javabase/javalanginvokemethodhandleinvokewitharguments(methodhandlejava:710)	at orgmockitointernalutilreflectioninstrumentationmemberaccessor$dispatcher$bytebuddy$2kmhnfkdinvokewitharguments(unknown source)	at orgmockitointernalutilreflectioninstrumentationmemberaccessorinvoke(instrumentationmemberaccessorjava:230)	at orgmockitointernalutilreflectionmodulememberaccessorinvoke(modulememberaccessorjava:43)	at orgmockitointernalcreationbytebuddymockmethodadvicetryinvoke(mockmethodadvicejava:329)	at orgmockitointernalcreationbytebuddymockmethodadviceaccess$500(mockmethodadvicejava:56)	at orgmockitointernalcreationbytebuddymockmethodadvice$realmethodcallinvoke(mockmethodadvicejava:249)	at orgmockitointernalinvocationinterceptedinvocationcallrealmethod(interceptedinvocationjava:141)	at orgmockitointernalstubbinganswerscallsrealmethodsanswer(callsrealmethodsjava:44)	at orgmockitoanswersanswer(answersjava:98)	at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:106)	at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:29)	at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:33)	at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:82)	at orgmockitointernalcreationbytebuddymockmethodadvicehandle(mockmethodadvicejava:147)	at testtestspy$foomessage(testspyjava:15)	at testtestspymain(testspyjava:10)```when the method is finished 13 entries are left and the most important entry is missing:```javaioioexception: fatal	at orgmockitointernalcreationbytebuddymockmethodadvicetryinvoke(mockmethodadvicejava:329)	at orgmockitointernalcreationbytebuddymockmethodadviceaccess$500(mockmethodadvicejava:56)	at orgmockitointernalcreationbytebuddymockmethodadvice$realmethodcallinvoke(mockmethodadvicejava:249)	at orgmockitointernalinvocationinterceptedinvocationcallrealmethod(interceptedinvocationjava:141)	at orgmockitointernalstubbinganswerscallsrealmethodsanswer(callsrealmethodsjava:44)	at orgmockitoanswersanswer(answersjava:98)	at orgmockitointernalhandlermockhandlerimplhandle(mockhandlerimpljava:106)	at orgmockitointernalhandlernullresultguardianhandle(nullresultguardianjava:29)	at orgmockitointernalhandlerinvocationnotifierhandlerhandle(invocationnotifierhandlerjava:33)	at orgmockitointernalcreationbytebuddymockmethodinterceptordointercept(mockmethodinterceptorjava:82)	at orgmockitointernalcreationbytebuddymockmethodadvicehandle(mockmethodadvicejava:147)	at testtestspy$foomessage(testspyjava:15)	at testtestspymain(testspyjava:10)```disabling ""cleansstacktrace"" using mockitoconfiguration does not help - hiderecursivecall is always calledthis bug/feature is very annoying when testing methods which may throw the same type of exception at different locationseg in my case i know that the exception was thrown in that very method but i dont know if it happens in eg line 20 or 85same thing happens to `runtimeexception`s which is also annoying seeing a nullpointerexception without knowing where it happens is not helpfulis there any (configuration) option to disable the cleaning of the stack trace completely?any chance of getting this ?**tested mockito versions:** 360 and 380**os:** linux/ubuntu 2004 64-bit**jdk:** openjdk runtime environment adoptopenjdk (build 1109+11)";thanks for reporting this issue! we would welcome a patch + regression test for this issue || thanks for your great work on mockito and the contribution to open source it continues to makeive come across the very same behavior under a similar setupi must agree with the op this appears to be a bug and it would be great to see it  ||;1;0; formatting issues;
2248;0;0;0;0;0;0;0;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;0;fix thread race condition;discovered internally at google. the culprit was a thread race condition;;0;fix thread race condition;discovered internally at google the culprit was a thread race conditionaround the usage of usedat which could race between setting the fieldand retrieving it;reviewed internally at google assuming no objections on this pr so merging ||;;;;1;1;fix serialization issue;
2250;0;0;0;0;0;0;0;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;bump versions.errorprone from 2.5.1 to 2.6.0;bumps  versions.errorprone  from 2.5.1 to 2.6.0. updates  error_prone_core  from 2.5.1 to 2.6.0 <details> <summary>commits</summary> <ul> <li><a href=  ><code>86f8e23</code></a> add <code>timeunit</code> apis to <code>returnvalueignored</code>.</li> <li><a href=  ><code>c5e1687</code></a> disable <code>banserializableread</code> by default</li> <li><a href=  ><code>3d64250</code></a> improve <code>constantpatterncompile</code> fixes</li> <li><a href=  ><code>553603f</code></a> add a missing <code>@nullable</code> annotation.</li> <li><a href=  ><code>3e14f54</code></a> generalize <code>constantpatterncompile</code></li> <li><a href=  ><code>456dcf0</code></a> rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li> <li><a href=  ><code>ed55201</code></a> inet4address and inet6address are immutable</li> <li><a href=  ><code>91951e3</code></a> remove deprecated attributes from <code>@restrictedapi</code></li> <li><a href=  ><code>2b10575</code></a> rethrow reflectiveoperationexception as linkageerror instead of assertionerror.</li> <li><a href=  ><code>fc7cca8</code></a> expand immutablemembercollection to convert <code>private final</code> member collection</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.5.1 to 2.6.0 <details> <summary>commits</summary> <ul> <li><a href=  ><code>86f8e23</code></a> add <code>timeunit</code> apis to <code>returnvalueignored</code>.</li> <li><a href=  ><code>c5e1687</code></a> disable <code>banserializableread</code> by default</li> <li><a href=  ><code>3d64250</code></a> improve <code>constantpatterncompile</code> fixes</li> <li><a href=  ><code>553603f</code></a> add a missing <code>@nullable</code> annotation.</li> <li><a href=  ><code>3e14f54</code></a> generalize <code>constantpatterncompile</code></li> <li><a href=  ><code>456dcf0</code></a> rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li> <li><a href=  ><code>ed55201</code></a> inet4address and inet6address are immutable</li> <li><a href=  ><code>91951e3</code></a> remove deprecated attributes from <code>@restrictedapi</code></li> <li><a href=  ><code>2b10575</code></a> rethrow reflectiveoperationexception as linkageerror instead of assertionerror.</li> <li><a href=  ><code>fc7cca8</code></a> expand immutablemembercollection to convert <code>private final</code> member collection...</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;0;bump versionserrorprone from 251 to 260;"bumps `versionserrorprone` from 251 to 260updates `error_prone_core` from 251 to 260<details><summary>commits</summary><ul><li><a href"" add <code>timeunit</code> apis to <code>returnvalueignored</code></li><li><a href"" disable <code>banserializableread</code> by default</li><li><a href"" improve <code>constantpatterncompile</code> fixes</li><li><a href"" add a missing <code>@nullable</code> annotation</li><li><a href"" generalize <code>constantpatterncompile</code></li><li><a href"" rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li><li><a href"" inet4address and inet6address are immutable</li><li><a href"" remove deprecated attributes from <code>@restrictedapi</code></li><li><a href"" rethrow reflectiveoperationexception as linkageerror instead of assertionerror</li><li><a href"" expand immutablemembercollection to convert <code>private final</code> member collection</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 251 to 260<details><summary>commits</summary><ul><li><a href"" add <code>timeunit</code> apis to <code>returnvalueignored</code></li><li><a href"" disable <code>banserializableread</code> by default</li><li><a href"" improve <code>constantpatterncompile</code> fixes</li><li><a href"" add a missing <code>@nullable</code> annotation</li><li><a href"" generalize <code>constantpatterncompile</code></li><li><a href"" rename <code>isnull</code> and <code>isnonnull</code> matchers to make it</li><li><a href"" inet4address and inet6address are immutable</li><li><a href"" remove deprecated attributes from <code>@restrictedapi</code></li><li><a href"" rethrow reflectiveoperationexception as linkageerror instead of assertionerror</li><li><a href"" expand immutablemembercollection to convert <code>private final</code> member collection</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>"; merging 2250 ;;;;1;1;fix errorprone errors;
2259;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;but invoked here  lists the invocation parameters;supersedes and closes #2188;;218.0;"""but invoked here"" lists the invocation parameters";supersedes and closes #2188;;regression when mocking a type in a signed package;"i just tried to upgrade from 208-beta to 209-beta (and then 2010-beta) one of our tests started failing:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface commicrosoftwindowsazureservicesservicebusservicebuscontractmockito can only mock visible & non-final classesif youre not sure why youre getting this error please report to the mailing list    at javalangclassloadercheckcerts(classloaderjava:895)    at javalangclassloaderpredefineclass(classloaderjava:665)    at javalangclassloaderdefineclass(classloaderjava:758)    at sunreflectnativemethodaccessorimplinvoke0(native method)    at sunreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)    at sunreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)    at javalangreflectmethodinvoke(methodjava:497)    at netbytebuddydynamicloadingclassinjector$usingreflection$classloadingactionrun(classinjectorjava:336)    at netbytebuddydynamicloadingclassinjector$usingreflection$classloadingactionrun(classinjectorjava:306)    at javasecurityaccesscontrollerdoprivileged(native method)    at netbytebuddydynamicloadingclassinjector$usingreflectioninject(classinjectorjava:122)    at netbytebuddydynamicloadingclassloadingstrategy$default$5load(classloadingstrategyjava:144)    at netbytebuddydynamicdynamictype$default$unloadedload(dynamictypejava:3380)    at orgmockitointernalcreationbytebuddymockbytecodegeneratorgeneratemockclass(mockbytecodegeneratorjava:55)    at orgmockitointernalcreationbytebuddycachingmockbytecodegenerator$cachedbytecodegeneratorgenerate(cachingmockbytecodegeneratorjava:72)    at orgmockitointernalcreationbytebuddycachingmockbytecodegenerator$cachedbytecodegeneratorgetorgeneratemockclass(cachingmockbytecodegeneratorjava:64)    at orgmockitointernalcreationbytebuddycachingmockbytecodegeneratorget(cachingmockbytecodegeneratorjava:27)    at orgmockitointernalcreationbytebuddybytebuddymockmakercreateproxyclass(bytebuddymockmakerjava:49)    at orgmockitointernalcreationbytebuddybytebuddymockmakercreatemock(bytebuddymockmakerjava:22)    at orgmockitointernalutilmockutilcreatemock(mockutiljava:33)    at orgmockitointernalmockitocoremock(mockitocorejava:59)    at orgmockitomockitomock(mockitojava:1378)    at orgmockitomockitomock(mockitojava:1256)```i thought this was odd since the mentioned type (`servicebuscontract`) is a public interface so i put a breakpoint at `orgmockitointernalcreationbytebuddycachingmockbytecodegenerator:85` the underlying error turns out to be:```javalangsecurityexception: class ""commicrosoftwindowsazureservicesservicebusmodelsbrokeredmessage$mockitomock$931493758$auxiliary$gvjxoe2i""s signer information does not match signer information of other classes in the same package```if i understand correctly mockito just switched from gclib to byte buddy perhaps this is an edge case that the new library doesnt cover yet?";"that is possible or more probable we missed something thank you for testing this builds so early )id like some integration tests for ""uncommon"" stuff like signed package osgi stuff etc || this was indeed something i missed i pushed a possible fix ci should generate a new beta that should be propagated first on bintray then maven (sync takes 1 days or so) || awesome  should be in 2011-beta let me know if that works for your environment || just upgraded to 2011-beta verified  thanks again :) || cool thanks again for the feedback fixed by cb645cfd157eaaed61436dda012d95f2fd7ec7fe || by the way since youre an early beta user id like to warn you that at some point along the 20x beta development there will be breaking changes in the matcher api in 20 well see how to mitigate impact along the way too || ";1;0;add a test and refactor code;
2263;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;2242 : make exceptions for inorder.verify more standard / spec…;…ific;;2242.0;2242 : make exceptions for inorderverify more standard / spec…;…ific*adds nullinsteadofmockexception and notamockexception checks to inorderverify() *before* checking if mocks were passed in during creation of inordersee  for a description of the issueinorderverify(mock) now first checks if the passed argument is null and if the mock is in fact a mock and gives appropriate exception messages before checking if the passed in argument was passed during creation of inorder object and therefore giving a less specific error message<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;indeed ;inorderverify with non-mock should perhaps give standard non-mock warning;"minor but i noticed today when i accidentally passed in a non-mock to an `inorderverify` call that it warned me that it can only verify mocks that were passed in during creation of `inorder`  while correct it seems like perhaps using the standard ""non-mock"" warning would be more helpful as it has better hinting for this situation  in particular this seems like it would be useful to newer users of the api who might have a hard time figuring out what they did wrong## mockitoverify```javalist<?> mock  mockitomock(listclass)mockitoverify(mockitomockget(5))```### output```textargument passed to verify() should be a mock but is null!examples of correct verifications:    verify(mock)somemethod()    verify(mock times(10))somemethod()    verify(mock atleastonce())somemethod()    not: verify(mocksomemethod())also if you use @mock annotation dont miss initmocks()```## inorderverify```javalist<?> mock  mockitomock(listclass)inorder inorder  mockitoinorder(mock)inorderverify(mockget(5))```### output```textinorder can only verify mocks that were passed in during creation of inorderfor example:    inorder inorder  inorder(mockone)    inorderverify(mockone)dostuff()```## desired behaviornote that the current `inorder` message does not give the hint of how to fix the non-mock that was passed in  using the standard non-mock warning in this case seems like a more helpful response  alternatively that the hinting could be included in the `inorder` output when a non-mock is used";prs welcome 😄  ||;1;0;fixing spotless java;
2267;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;include cause when fieldreader fails to access field;2266;;2266.0;include cause when fieldreader fails to access field;2266simply passes the exception cause to the thrown mockitoexception; merging 2267 ;swallowed illegal access exceptions make it harder to debug modularity-related issues;### issue summaryin fieldreader and reflectionmemberaccessor if an illegalaccessexception is thrown it will be suppressedat the very least mockito should include the original exception when testing a modular application it is common to have packages encapsulated by default### stacktracein fieldreader the illegalaccessexception is caught the exception is re-thrown but the cause is lost a debugger the illegalaccessexception can be observed:  problematic code1 use `module-info` in the project and dont open the package under test to mockito2 use the `mockitoextension` for junit:```java@extendwith(mockitoextensionclass)public class myclasstest {  private final mytype mock  public myclasstest(@mock mytype mock) {    thismock  mock  }}```### environmentmockito-junit-jupiter 390zulu1628+11-ca (build 16+36);;1;0;include cause when fieldreader fails to access field* 2266* add regression test in module-test;
2274;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;2273 : add missing parenthesis to javadoc example;adds the missing parenthesis to the argumentmatcher javadoc example;;2273.0;2273 : add missing parenthesis to javadoc example;adds the missing parenthesis to the argumentmatcher javadoc example## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 2274 ;example in javadoc of argumentmatcher has missing parenthesis;check that -  the problematic code (if thats possible) is copied here       note that some configuration are impossible to mock via mockito -  read the [contributing guide]( javadoc for argumentmatcher contains some example code which misses a pair of parenthesis in one case at https://githubcom/mockito/mockito/blob/c86fe047d557bd2ec364d59a99430792f3920e96/src/main/java/org/mockito/argumentmatcherjava#l64;;1;0;2273 : add missing parenthesis to javadoc example;
2277;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;apply automated errorprone fixes;this is the result of running errorprone on the codebase. most notably;;0;apply automated errorprone fixes;this is the result of running errorprone on the codebase most notablyit adds missing override annotations adds private constructors forclasses that should not be subclassed removes redundant generic typespecified and fixes handling of casts/instance checks;@raphw not sure if it is worth to review as it is a mechanical change that passes all tests so feel free to rubberstamp || i am assuming no objections on this mechanical pr and will therefore merge it let me know if you do have any objections and am happy to resolve them ||;;;;1;1;apply automated errorprone fixesthis is the result of running errorprone on the codebase most notablyit adds missing override annotations adds private constructors forclasses that should not be subclassed removes redundant generic typespecified and fixes handling of casts/instance checks;
2279;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;remove asm dependency;mockito depends on byte-buddy to make most of its bytecode fiddling but asm is still needed for the tests. we can remove this dependency by relying on the already shaded version included on asm  that we we won t get unaligned between both dependencies and we will remove the need for the explicit asm library.;;0;remove asm dependency;mockito depends on byte-buddy to make most of its bytecode fiddling but asm is still needed for the tests we can remove this dependency by relying on the already shaded version included on asm that we we wont get unaligned between both dependencies and we will remove the need for the explicit asm libraryr: @raphw<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;id go as far as to say we should rather eliminate asm altogether and use byte buddys api to create the interface thats a one-liner more or less:```javanew bytebuddy()            makeinterface(qualifiedname)            make()```this avoids handling the technicalities ||   oh i only took a look at the imports :) thanks for the suggestion @raphw ptal again ||;;;;1;1;remove asm dependency;
2280;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;support mocking of function with kotlin inline classes;despite functions with inline class parameters being already supported;;0;support mocking of function with kotlin inline classes;despite functions with inline class parameters being already supportedthere were not tests for it thus add themthe other part is functions returning inline classes there can be severalkinds of inline classes - with primitive underlying type (nullable or not-null)and reference types (nullable or not-null) also a function can return eithernullable of not-null inline class if a function returns nullable inline classwe do not do anything special - the functions signature contains inline classhowever if the function returns not-null inline class its signature containsunderlying type thus we need to unbox the inline class (ie get underlyingtypes value) to mock the return valuefor example if we have the following inline class  inline class ic(val i: int)and we want to mock return value of a function returning the inline class  fun returnsic(): iclike  `when`(mockreturnsic())thenreturn(ic(1))then if we do not unbox the argument of `thenreturn` function we get errorabout incompatible typesthe only issue however is that we cannot check whether the function indeedreturns `ic` unless we use kotlinreflect so the following code will work  fun returnsint(): int  `when`(mockreturnsint())thenreturn(ic(1))fixes issue #1930<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_; merging 2280 ;;;;1;1;throw an exception when inline class does not have unbox-impl;
2283;0;0;0;0;0;0;1;1;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;improve error messages in case of missing dependency on byte buddy and avoid hard dependency on byte buddy in member accessor.;this improves error messages in case the dependency is not set up correctly. this should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.;;0;improve error messages in case of missing dependency on byte buddy and avoid hard dependency on byte buddy in member accessor;this improves error messages in case the dependency is not set up correctly this should rarely happen but especially with the module system gaining traction this might trigger a few bugs that we can better explain this way;i do not quite understand why the ci is failing this does not seem related to my changes at all || @raphw since we moved the classes to a new name i think we need to update these two string references to the new class name:  || good catch about the initialization ill give it another try ||  merging 2283 ;;;;1;1;improve error messages in case of missing dependency on byte buddy and avoid hard dependency on byte buddy in member accessor;
2292;0;0;0;0;0;0;0;0;0;0;1;0;0;0;0;0;0;0;0;0;0;0;0;0;fix stackoverflow in argumentsaredifferent reporting;when using mockito without opentest4j  reporting an;;0;fix stackoverflow in argumentsaredifferent reporting;when using mockito without opentest4j reporting anargumentsaredifferent exception would throw a stackoverflowerror whenattempting to obtain the message from the exceptionthe root problem was that supertostring() would call its owngetmessage() instead we should obtain the message from the super toavoid the circular call;note that i tried to create a regression test for this but sadly was unable to to make the integration test work we would need to exclude both opentest4j and junit4 while that would technically be possible gradle wouldnt be able to pick up a test that is *not* annotated with `@test` i also tried using junit5 but they have a transitive dependency on opentest4j any attempt to exclude the transitive dependency causes the gradle task to crash i have manually verified that removing  and running `basicverificationtest` would reproduce the issue and that the fix is making the test pass as expected || are all of our implementations are doing this:  and  am not sure what the effect of the removal is can we separate that change out to unblock non-opentest4j users and figure out what the impact of removing `removefirstline` will be? || ok lets move on if all tests pass with your change we should be good to go ||;;;;1;1;fix stackoverflow in argumentsaredifferent reportingwhen using mockito without opentest4j reporting anargumentsaredifferent exception would throw a stackoverflowerror whenattempting to obtain the message from the exceptionthe root problem was that supertostring() would call its owngetmessage() instead we should obtain the message from the super toavoid the circular call;
2298;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;bump versions.errorprone from 2.6.0 to 2.7.1;bumps  versions.errorprone  from 2.6.0 to 2.7.1. updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat...</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) dependabot will merge this pr once ci passes on it  as requested by @timvdlippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2257.0;bump versionserrorprone from 260 to 271;"bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>"; ;reinstate codecov reporting;with the migration to github actions it seems that we have lost the codecov reporting on github pull requests i am assumign thats happening because we are no longer reporting to codecov after a successful github action completion;i just discovered that we do run the coverage reporting as expected but it is not reporting back on the pr status || seems like they are back in action ||;1;0;fix errorprone warnings;
2298;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;bump versions.errorprone from 2.6.0 to 2.7.1;bumps  versions.errorprone  from 2.6.0 to 2.7.1. updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat...</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) dependabot will merge this pr once ci passes on it  as requested by @timvdlippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2260.0;bump versionserrorprone from 260 to 271;"bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>"; ;fix deprecation label of verifyzerointeractions;documentation change only im pretty sure this is the correct method to move to<!-- hey thanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--which branch : - on mockito 3x make your pull request target `release/3x`- on mockito 2x make your pull request target `release/2x` (2x is in maintenance mode)--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;duplicate of #2240 || thanks that makes sense i might open a pr to put that context in the description since right now it is confusing and looks very much like a typo ||;1;0;fix errorprone warnings;
2298;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;bump versions.errorprone from 2.6.0 to 2.7.1;bumps  versions.errorprone  from 2.6.0 to 2.7.1. updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat...</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) dependabot will merge this pr once ci passes on it  as requested by @timvdlippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2282.0;bump versionserrorprone from 260 to 271;"bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>"; ;mockito fails to work in java 11 with jpms modules;"i am migrating log4j 2 to fully support jpms in doing that the unit tests that use mockito are all failing with    javalangillegalstateexception: could not initialize plugin: interface orgmockitopluginsmockmaker (alternate: null)    caused by: javalangillegalstateexception: internal problem occurred please report it mockito is unable to load the default implementation of class that is a part of mockito distribution failed to load interface orgmockitopluginsmockmaker    caused by: javalangreflectinvocationtargetexception    caused by: javalangnoclassdeffounderror: net/bytebuddy/dynamic/loading/classinjector$usingreflection    caused by: javalangclassnotfoundexception: netbytebuddydynamicloadingclassinjector$usingreflectionif is set system property ""orgmockitointernalnounsafeinjection"" to true then it fails the same way trying to access $usinglookup note that this worked fine with the same versions of mockito and byte-buddy when a module-infojava wasnt presentdo i need to add an --add-opens for something?";are you using mockito-inline? otherwise youd need to open your module to mockito  || no log4j does not use mockito-inline im not really sure what that is to be honest i didnt write any of the stuff that uses mockito in log4j i dont understand how opening the module to mockito will help resolve a class not found exception in byte buddy? wouulnt mockito have to open something? || mockito cannot open anything modules are fully encapsulated try replacing mockito-core with mockito-inline in your dependencies and make sure to use the latest version alternatively do you have a reproducing branch?  || i have checked the code into the jpms-mockito-fails branch of   clone the repo checkout that branch and then run mvn clean install you will need java 11  and i believe you will need at least maven 361 ||  has the full diff since this diff is quite large would it be possible to separate the directory rename? that would hopefully make it a bit easier for us to digest what the diff is and what the potential culprit could be  no it wouldnt be possible prior to this change log4j-core was an automatic module and the tests were not modules at all to convert to a jpms module the tests also had to be converted to comply with jpms the tests were being passed downstream for other modules to use in tests but they shared the same package name as the main module so the tests being passed on had to be split plus some of the test classes were using the log4j-api package namespace the diff is that log4j-core used to have an automatic module name which meant while it had a name it really wasnt a jpms module it didnt have all the restrictions placed on it that named modules do so everything was open because of the change all the tests now run on the module path instead of the class path which means everything has to conform to jpms   || the reason is pretty obvious: byte buddy is missing from the class path i do not know how the module path is assembled but i assume that the tool you are using does not know how to process an automatic module such as mockito that requires a dependency i set a breakpoint in the test and class in question and the *netbytebuddy* module is not on the module path while the class path is emptywell see how to improve the error message in such a case i assume the tooling around the module system is still lacking a few details so this might just pay offif i for example add the line:    requires transitive netbytebuddyto *logging-log4j2/log4j-core/src/test/java9/module-infojava* the problem seems to be solved for the `consoleappendertest` that yielded the error message that you described || thanks that is interesting since the class shows up with mvn dependency:tree and clearly is there since just adding the requires for it fixes the problem im not sure why that didnt occur to me id guess it is the surefire plugin setting up the class path and module path or something it delegates to it sure would have been nice to have had some kind of warning message that dependencies were being ignored anyway i will close this issue ||;1;0;fix errorprone warnings;
2298;0;0;0;0;0;0;1;0;0;0;1;0;0;0;0;0;0;0;0;0;1;0;0;0;bump versions.errorprone from 2.6.0 to 2.7.1;bumps  versions.errorprone  from 2.6.0 to 2.7.1. updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_core s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />  updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>release notes</summary> <p><em>sourced from <a href=  >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>error prone 2.7.1</h2> <p>everything in <a href=  >error prone 2.7.0</a>  plus an <a href=  >additional fix for jdk 17</a>.</p> <h2>error prone 2.7.0</h2> <p>changes</p> <ul> <li>initial support for running on jdk 17 ea builds. supports for java 17 languages features is incomplete  <a href=  >bug reports</a> for issues with java 17 are welcome.</li> <li><a href=  ><code>@​inlineme</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href=  > </ul> <p>new checks:</p> <ul> <li><a href=  >equalsnull</a></li> <li><a href=  >missingbraces</a></li> <li><a href=  >nullableprimitivearray</a></li> <li><a href=  >optionalmapunusedvalue</a></li> <li><a href=  >testparametersnotinitialized</a></li> </ul> <p>closed issues: <a href=  >#2257</a>  <a href=  >#2260</a>  <a href=  >#2282</a>  <a href=  >#2301</a>  <a href=  >#2322</a>  <a href=  >#2323</a>  <a href=  >#2324</a></p> </blockquote> </details> <details> <summary>commits</summary> <ul> <li><a href=  ><code>09262b8</code></a> release error prone 2.7.1</li> <li><a href=  ><code>ff07935</code></a> improve jdk 17 support</li> <li><a href=  ><code>65a75c9</code></a> enable <code>returnvalueignored</code>-checking of <code>collection</code>  <code>iterable</code>  and  iterat...</li> <li><a href=  ><code>0c6a76d</code></a> fix a jdk 17 incompatibility</li> <li><a href=  ><code>1846d94</code></a> add tests for method invocation bug with the <code>inliner</code>.</li> <li><a href=  ><code>8c6f73c</code></a> fix a jdk 16-only test</li> <li><a href=  ><code>62d1bf7</code></a> internal refactoring.</li> <li><a href=  ><code>5913d86</code></a> update error prone ci to use jdk 16 as latest  and add 17-ea</li> <li><a href=  ><code>f6761ee</code></a> fix a jdk 16 incompatibility</li> <li><a href=  ><code>51b5c4d</code></a> fix some crashes involving records</li> <li>additional commits viewable in <a href=  >compare view</a></li> </ul> </details> <br />   dependabot will resolve any conflicts with this pr as long as you don t alter it yourself. you can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) dependabot will merge this pr once ci passes on it  as requested by @timvdlippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>dependabot commands and options</summary> <br />  you can trigger dependabot actions by commenting on this pr: -  @dependabot rebase  will rebase this pr -  @dependabot recreate  will recreate this pr  overwriting any edits that have been made to it -  @dependabot merge  will merge this pr after your ci passes on it -  @dependabot squash and merge  will squash and merge this pr after your ci passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this pr if it is closed -  @dependabot close  will close this pr and stop dependabot recreating it. you can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this minor version  will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself) -  @dependabot ignore this dependency  will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)   </details>;;2324.0;bump versionserrorprone from 260 to 271;"bumps `versionserrorprone` from 260 to 271updates `error_prone_core` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />updates `error_prone_test_helpers` from 260 to 271<details><summary>release notes</summary><p><em>sourced from <a href"" releases</a></em></p><blockquote><h2>error prone 271</h2><p>everything in <a href"" prone 270</a> plus an <a href"" fix for jdk 17</a></p><h2>error prone 270</h2><p>changes</p><ul><li>initial support for running on jdk 17 ea builds supports for java 17 languages features is incomplete <a href"" reports</a> for issues with java 17 are welcome</li><li><a href"" is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href"" checks:</p><ul><li><a href"" href"" href"" href"" href"" issues: <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" <a href"" href"" release error prone 271</li><li><a href"" improve jdk 17 support</li><li><a href"" enable <code>returnvalueignored</code>-checking of <code>collection</code> <code>iterable</code> and `iterat</li><li><a href"" fix a jdk 17 incompatibility</li><li><a href"" add tests for method invocation bug with the <code>inliner</code></li><li><a href"" fix a jdk 16-only test</li><li><a href"" internal refactoring</li><li><a href"" update error prone ci to use jdk 16 as latest and add 17-ea</li><li><a href"" fix a jdk 16 incompatibility</li><li><a href"" fix some crashes involving records</li><li>additional commits viewable in <a href"" view</a></li></ul></details><br />dependabot will resolve any conflicts with this pr as long as you dont alter it yourself you can also trigger a rebase manually by commenting `@dependabot rebase`[//]: # (dependabot-automerge-start)dependabot will merge this pr once ci passes on it as requested by @timvdlippe[//]: # (dependabot-automerge-end)---<details><summary>dependabot commands and options</summary><br />you can trigger dependabot actions by commenting on this pr:- `@dependabot rebase` will rebase this pr- `@dependabot recreate` will recreate this pr overwriting any edits that have been made to it- `@dependabot merge` will merge this pr after your ci passes on it- `@dependabot squash and merge` will squash and merge this pr after your ci passes on it- `@dependabot cancel merge` will cancel a previously requested merge and block automerging- `@dependabot reopen` will reopen this pr if it is closed- `@dependabot close` will close this pr and stop dependabot recreating it you can achieve the same result by closing it manually- `@dependabot ignore this major version` will close this pr and stop dependabot creating any more for this major version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this minor version` will close this pr and stop dependabot creating any more for this minor version (unless you reopen the pr or upgrade to it yourself)- `@dependabot ignore this dependency` will close this pr and stop dependabot creating any more for this dependency (unless you reopen the pr or upgrade to it yourself)</details>"; ;release/3x;<!-- heythanks for the contribution this is awesomeas you may have read project members have somehow an opinionated view on what and how should bemockito eg we dont want mockito to be a feature bloatthere may be a thorough review with feedback -> code change loop--><!--if you have a suggestion for this template you can fix it in the github/pull_request_templatemd file-->## checklist -  read the [contributing guide]( -  pr should be motivated ie what does it fix why and if relevant how -  if possible / relevant include an example in the description that could help all readers       including project members to get a better picture of the change -  avoid other runtime dependencies -  meaningful commit history  intention is important please rebase your commit history so that each       commit is meaningful and help the people that will explore a change in 2 years -  the pull request follows coding style -  mention `<issue number>` in the description _if relevant_ -  at least one commit should mention `fixes #<issue number>` _if relevant_;;1;0;fix errorprone warnings;
2306;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;use the parent classloader if the context classloader is a child of it.;this should only affect cases that previously would have thrown an;;230.0;use the parent classloader if the context classloader is a child of it;this should only affect cases that previously would have thrown anexception2303;there are some formatting issues that should be automatically  if you run `/gradlew spotlessapply` locally || formatting issues fixed ||  merging 2306 ;null pointer when invoking whiteboxinvokemethod() with null one of the params null;"getting below exceptions when trying to invoke whiteboxinvokemethod(erxprovidermanager ""setcommand"" provider nullretait mail)version used 162failed: testsetenrollmentcommandwithunenrollmentwithnulljavalangnullpointerexception    at javalangclassisassignablefrom(native method)    at orgpowermockreflectinternalwhiteboximplcheckifparametertypesaresame(whiteboximpljava:2257)    at orgpowermockreflectinternalwhiteboximplgetmethods(whiteboximpljava:1800)    at orgpowermockreflectinternalwhiteboximplgetbestmethodcandidate(whiteboximpljava:955)    at orgpowermockreflectinternalwhiteboximplfindmethodorthrowexception(whiteboximpljava:832)    at orgpowermockreflectinternalwhiteboximpldoinvokemethod(whiteboximpljava:770)    at orgpowermockreflectinternalwhiteboximplinvokemethod(whiteboximpljava:638)    at orgpowermockreflectwhiteboxinvokemethod(whiteboxjava:401)";its powermock api )also the code youre mentioning use an **internal** api which is not thought for use outside the library ||;1;0;address review comments;
2312;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;0;0;0;0;undo parent for multipleparentsclassloader;66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. use of an explicit parent with  multipleparentsclassloader  appears to be discouraged in the documentation also.;;2303.0;undo parent for multipleparentsclassloader;66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1 which breaks behavior under some classloaders that special-case mockito classes use of an explicit parent with `multipleparentsclassloader` appears to be discouraged in the documentation alsofollowup for #2303; merging 2312 ;"""the type is not public and its mock class is loaded by a different class loader"" with a context classloader that delegates";repro case:```javapackage comgoogleclmmockitobugimport static orgmockitomockitomockimport orgjunittestimport orgjunitrunnerrunwithimport orgjunitrunnersjunit4/** * my goal is to create a context classloader that is identical in every way to the existing one * except that it has a different object identity and possibly some extra fields however even a * basic classloader that always delegates causes problems for mockito */@runwith(junit4class)public final class classloadertest {  @test  public void mockpackageprivateinterface() {    classloader old  threadcurrentthread()getcontextclassloader()    threadcurrentthread()setcontextclassloader(new classloader(old) {})    // fails    object unused  mock(packageprivateclass)  }  @test  public void mockpublicinterface() {    classloader old  threadcurrentthread()getcontextclassloader()    threadcurrentthread()setcontextclassloader(new classloader(old) {})    // succeeds    object unused  mock(publicclass)  }  interface packageprivate {}  public interface public {}}```error:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface comgoogleclmmockitobugclassloadertest$packageprivatemockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : google incjvm vendor version : 11010+9-google-release-371350251jvm name           : openjdk 64-bit server vmjvm version        : 11010+9-google-release-371350251jvm info           : mixed mode sharingos name            : linuxos version         : 4150-smp-9122300underlying exception : orgmockitoexceptionsbasemockitoexception: cannot create mock for interface comgoogleclmmockitobugclassloadertest$packageprivatethe type is not public and its mock class is loaded by a different class loaderthis can have multiple reasons: - you are mocking a class with additional interfaces of another class loader - mockito is loaded by a different class loader than the mocked type (eg with osgi) - the threads context class loader is different than the mocks class loader	at comgoogleclmmockitobugclassloadertestmockpackageprivateinterface(classloadertestjava:21)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:57)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:59)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersblockjunit4classrunner$1evaluate(blockjunit4classrunnerjava:81)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:327)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:84)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:292)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:73)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:290)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:60)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:270)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:370)	at comgoogletestingjunitrunnerinternaljunit4cancellablerequestfactory$cancellablerunnerrun(cancellablerequestfactoryjava:108)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at orgjunitrunnerjunitcorerun(junitcorejava:115)	at comgoogletestingjunitrunnerjunit4junit4runnerrun(junit4runnerjava:104)	at comgoogletestingjunitrunnerrunnershell$2run(runnershelljava:34)	at comgoogletestingjunitrunnergoogletestrunnerruntestsinsuite(googletestrunnerjava:200)	at comgoogletestingjunitrunnergoogletestrunnerruntestsinsuite(googletestrunnerjava:184)	at comgoogletestingjunitrunnergoogletestrunnermain(googletestrunnerjava:137)caused by: orgmockitoexceptionsbasemockitoexception: cannot create mock for interface comgoogleclmmockitobugclassloadertest$packageprivatethe type is not public and its mock class is loaded by a different class loaderthis can have multiple reasons: - you are mocking a class with additional interfaces of another class loader - mockito is loaded by a different class loader than the mocked type (eg with osgi) - the threads context class loader is different than the mocks class loader	at netbytebuddytypecachefindorinsert(typecachejava:153)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:366)	at netbytebuddytypecachefindorinsert(typecachejava:175)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:377)	 27 more```if mockito actually tried to use the classloader i think it would work since we dont see an interesting exception deep in the stack my guess is that mockito is doing some extra validation to avoid generating bytecode it thinks would fail;rafael i took a look at this code and it wasnt completely clear to my why we are failing here the reason that is probably happening is that mockito first adds the mocked type ( in this case `packageprivate` before adding the current classloader:  it looks up the classloader for the mocked type which is the old classloader then it looks up the current classloader (which you changed) and then determines that they dont match thus `localmock  false`this code landed as part of supporting java 9+ modules:  it wouldnt surprise me if there is an edge case we are missingsince the new classloader delegates to the former i would have expected the classes to match and thus pass the checks but they dont presumably because of the classloader equality check can we be lenient here and allow for child classloaders to be valid as well? || the reason we fail is that a package-private type is not visible outside of its own class loader even if we defined the subclass in the same nominal package if it was loaded by a different class loader it could not see its superclass to avoid this visibility issue we fail before even attempting to create the mockwe could consider to drop the context class loader if a mocked class is package-private i am not sure why we need the context class loader to begin with but i assume its related to serialization what tends to be an edge case || i can think of a few options:1 ignore the context classloader if the type is package-private it could have failed anyway so if it succeeds might as well reap the benefit2 ignore the package-private restriction for classloaders that are not participating in the java module system by checking issealed on the classs package3 check to see if the context classloader is a child of the originating classloader although if a classloader is declaring a parent but not following the delegation patter this might cause a false negative or positive4 just load the stuff as you would and check each relevant class you load and error if the defining classloader doesnt match || ill mess around a bit more and report back if i figure out what the issue is || ok i have a the minimal fix (as in it will only affect cases that would have broken before):if the mocked type is a non-interface or non-public or any of the extra interfaces are non-public dont include the context classloader in multipleparentsclassloader iff the context classloader is a child of the classloader wed use if it wasnt includedthis fixes my issue and in general likely fixes cases where a context classloader is set that follows the parent-first delegation pattern i thought about simply removing the context loader entirely but test authors who hit this can set and unset it in a try-finally block around their mock calls if necessary and since theres no comments about why its included id be wary of breaking somebody depending on the existing behaviori am going to run this fix through googles internal suite of tests to see if it breaks anything  || 1 the problem is that it might fail delayed upon deserialization this might be non-trivial to understand and we should document this restriction somewhere 2 that wont work sealing only affects jars on the same class loader that are defining the same package this wont work with modules anymore anyways and is taken care of package-private classes are however never visible on other class loaders therefore we must retain the class loader3 is already done to some extend4 this is implicit by the multiple parent loaderi think the right approach is to exclude the context loader for package-private classes by default since it will never work and to fail if serialization is enabled in addition  || > i think the right approach is to exclude the context loader for package-private classes by default since it will never work and to fail if serialization is enabled in additionits not just package-private classes - mocking a public non-final-non-interface class also poses problems since that will break stubbing/verification of package-private methods (#796)my proposed fix:```javaprivate static boolean needssamepackageclassloader(mockfeatures<?> features) {  if (!modifierispublic(featuresmockedtypegetmodifiers())                              || !featuresmockedtypeisinterface()) {    // the mocked type is package private or is not an interface and thus may contain package    // private methods    return true  }  for (class<?> iface : featuresinterfaces) {    if (!modifierispublic(ifacegetmodifiers())) {      return true    }  }  return false}multipleparentclassloaderbuilder loaderbuilder  new multipleparentclassloaderbuilder()                  appendmostspecific(getalltypes(featuresmockedtype))                  appendmostspecific(featuresinterfaces)                  appendmostspecific(mockaccessclass)classloader contextloader  currentthread()getcontextclassloader()boolean shouldincludecontextloader  trueif (needssamepackageclassloader(features)) {    // for the generated class to access package-private methods it must be defined by the    // same classloader as its type all the other added classloaders are required to load    // the type if the context classloader is a child of the mocked types defining    // classloader it will break a mock that would have worked check if the context class    // loader is a child of the classloader wed otherwise use and possibly skip it    classloader candidateloader  loaderbuilderbuild()    for (classloader parent  contextloader parent ! null parent  parentgetparent()) {      if (parent  candidateloader) {        shouldincludecontextloader  false        break      }    }}if (shouldincludecontextloader) {  loaderbuilder  loaderbuilderappendmostspecific(contextloader)}classloader classloader  loaderbuilderbuild()```the focus was on only changing behavior for cases that failed before since we verify that the classloader we define in is a parent of the context classloader we shouldnt see any problems with serialization right? or at least no new problems as the existing `multipleparentsclassloader` relies on `getparent()` to infer the delegation order || @charlesmunger do you mind opening a pr that includes your proposed fix and adds a regression test for your use case? if all tests pass i am inclined to merge as-is if we end up breaking anybody else we should add regression tests for their use cases and modify the implementation accordingly ||;1;0;refactor test to branch on orgmockitousage package;
2318;0;0;0;0;0;0;1;0;0;0;1;0;1;0;0;0;0;0;0;0;1;0;0;1;check package-privacy of method params;this patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce abstractmethoderror  since its methods do not actually override the methods of the interfaces.;;2303.0;check package-privacy of method params;this patch handles methods where an interface uses a package-private type as a param or return value - without it the generated mock class will produce abstractmethoderror since its methods do not actually override the methods of the interfacesfollowup on #2303;i have run this through googles internal tests and it doesnt break anything ||;"""the type is not public and its mock class is loaded by a different class loader"" with a context classloader that delegates";repro case:```javapackage comgoogleclmmockitobugimport static orgmockitomockitomockimport orgjunittestimport orgjunitrunnerrunwithimport orgjunitrunnersjunit4/** * my goal is to create a context classloader that is identical in every way to the existing one * except that it has a different object identity and possibly some extra fields however even a * basic classloader that always delegates causes problems for mockito */@runwith(junit4class)public final class classloadertest {  @test  public void mockpackageprivateinterface() {    classloader old  threadcurrentthread()getcontextclassloader()    threadcurrentthread()setcontextclassloader(new classloader(old) {})    // fails    object unused  mock(packageprivateclass)  }  @test  public void mockpublicinterface() {    classloader old  threadcurrentthread()getcontextclassloader()    threadcurrentthread()setcontextclassloader(new classloader(old) {})    // succeeds    object unused  mock(publicclass)  }  interface packageprivate {}  public interface public {}}```error:```orgmockitoexceptionsbasemockitoexception: mockito cannot mock this class: interface comgoogleclmmockitobugclassloadertest$packageprivatemockito can only mock non-private & non-final classesif youre not sure why youre getting this error please report to the mailing listjava               : 11jvm vendor name    : google incjvm vendor version : 11010+9-google-release-371350251jvm name           : openjdk 64-bit server vmjvm version        : 11010+9-google-release-371350251jvm info           : mixed mode sharingos name            : linuxos version         : 4150-smp-9122300underlying exception : orgmockitoexceptionsbasemockitoexception: cannot create mock for interface comgoogleclmmockitobugclassloadertest$packageprivatethe type is not public and its mock class is loaded by a different class loaderthis can have multiple reasons: - you are mocking a class with additional interfaces of another class loader - mockito is loaded by a different class loader than the mocked type (eg with osgi) - the threads context class loader is different than the mocks class loader	at comgoogleclmmockitobugclassloadertestmockpackageprivateinterface(classloadertestjava:21)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke0(native method)	at javabase/jdkinternalreflectnativemethodaccessorimplinvoke(nativemethodaccessorimpljava:62)	at javabase/jdkinternalreflectdelegatingmethodaccessorimplinvoke(delegatingmethodaccessorimpljava:43)	at javabase/javalangreflectmethodinvoke(methodjava:566)	at orgjunitrunnersmodelframeworkmethod$1runreflectivecall(frameworkmethodjava:57)	at orgjunitinternalrunnersmodelreflectivecallablerun(reflectivecallablejava:12)	at orgjunitrunnersmodelframeworkmethodinvokeexplosively(frameworkmethodjava:59)	at orgjunitinternalrunnersstatementsinvokemethodevaluate(invokemethodjava:17)	at orgjunitrunnersblockjunit4classrunner$1evaluate(blockjunit4classrunnerjava:81)	at orgjunitrunnersparentrunnerrunleaf(parentrunnerjava:327)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:84)	at orgjunitrunnersblockjunit4classrunnerrunchild(blockjunit4classrunnerjava:57)	at orgjunitrunnersparentrunner$3run(parentrunnerjava:292)	at orgjunitrunnersparentrunner$1schedule(parentrunnerjava:73)	at orgjunitrunnersparentrunnerrunchildren(parentrunnerjava:290)	at orgjunitrunnersparentrunneraccess$000(parentrunnerjava:60)	at orgjunitrunnersparentrunner$2evaluate(parentrunnerjava:270)	at orgjunitrunnersparentrunnerrun(parentrunnerjava:370)	at comgoogletestingjunitrunnerinternaljunit4cancellablerequestfactory$cancellablerunnerrun(cancellablerequestfactoryjava:108)	at orgjunitrunnerjunitcorerun(junitcorejava:137)	at orgjunitrunnerjunitcorerun(junitcorejava:115)	at comgoogletestingjunitrunnerjunit4junit4runnerrun(junit4runnerjava:104)	at comgoogletestingjunitrunnerrunnershell$2run(runnershelljava:34)	at comgoogletestingjunitrunnergoogletestrunnerruntestsinsuite(googletestrunnerjava:200)	at comgoogletestingjunitrunnergoogletestrunnerruntestsinsuite(googletestrunnerjava:184)	at comgoogletestingjunitrunnergoogletestrunnermain(googletestrunnerjava:137)caused by: orgmockitoexceptionsbasemockitoexception: cannot create mock for interface comgoogleclmmockitobugclassloadertest$packageprivatethe type is not public and its mock class is loaded by a different class loaderthis can have multiple reasons: - you are mocking a class with additional interfaces of another class loader - mockito is loaded by a different class loader than the mocked type (eg with osgi) - the threads context class loader is different than the mocks class loader	at netbytebuddytypecachefindorinsert(typecachejava:153)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:366)	at netbytebuddytypecachefindorinsert(typecachejava:175)	at netbytebuddytypecache$withinlineexpunctionfindorinsert(typecachejava:377)	 27 more```if mockito actually tried to use the classloader i think it would work since we dont see an interesting exception deep in the stack my guess is that mockito is doing some extra validation to avoid generating bytecode it thinks would fail;rafael i took a look at this code and it wasnt completely clear to my why we are failing here the reason that is probably happening is that mockito first adds the mocked type ( in this case `packageprivate` before adding the current classloader:  it looks up the classloader for the mocked type which is the old classloader then it looks up the current classloader (which you changed) and then determines that they dont match thus `localmock  false`this code landed as part of supporting java 9+ modules:  it wouldnt surprise me if there is an edge case we are missingsince the new classloader delegates to the former i would have expected the classes to match and thus pass the checks but they dont presumably because of the classloader equality check can we be lenient here and allow for child classloaders to be valid as well? || the reason we fail is that a package-private type is not visible outside of its own class loader even if we defined the subclass in the same nominal package if it was loaded by a different class loader it could not see its superclass to avoid this visibility issue we fail before even attempting to create the mockwe could consider to drop the context class loader if a mocked class is package-private i am not sure why we need the context class loader to begin with but i assume its related to serialization what tends to be an edge case || i can think of a few options:1 ignore the context classloader if the type is package-private it could have failed anyway so if it succeeds might as well reap the benefit2 ignore the package-private restriction for classloaders that are not participating in the java module system by checking issealed on the classs package3 check to see if the context classloader is a child of the originating classloader although if a classloader is declaring a parent but not following the delegation patter this might cause a false negative or positive4 just load the stuff as you would and check each relevant class you load and error if the defining classloader doesnt match || ill mess around a bit more and report back if i figure out what the issue is || ok i have a the minimal fix (as in it will only affect cases that would have broken before):if the mocked type is a non-interface or non-public or any of the extra interfaces are non-public dont include the context classloader in multipleparentsclassloader iff the context classloader is a child of the classloader wed use if it wasnt includedthis fixes my issue and in general likely fixes cases where a context classloader is set that follows the parent-first delegation pattern i thought about simply removing the context loader entirely but test authors who hit this can set and unset it in a try-finally block around their mock calls if necessary and since theres no comments about why its included id be wary of breaking somebody depending on the existing behaviori am going to run this fix through googles internal suite of tests to see if it breaks anything  || 1 the problem is that it might fail delayed upon deserialization this might be non-trivial to understand and we should document this restriction somewhere 2 that wont work sealing only affects jars on the same class loader that are defining the same package this wont work with modules anymore anyways and is taken care of package-private classes are however never visible on other class loaders therefore we must retain the class loader3 is already done to some extend4 this is implicit by the multiple parent loaderi think the right approach is to exclude the context loader for package-private classes by default since it will never work and to fail if serialization is enabled in addition  || > i think the right approach is to exclude the context loader for package-private classes by default since it will never work and to fail if serialization is enabled in additionits not just package-private classes - mocking a public non-final-non-interface class also poses problems since that will break stubbing/verification of package-private methods (#796)my proposed fix:```javaprivate static boolean needssamepackageclassloader(mockfeatures<?> features) {  if (!modifierispublic(featuresmockedtypegetmodifiers())                              || !featuresmockedtypeisinterface()) {    // the mocked type is package private or is not an interface and thus may contain package    // private methods    return true  }  for (class<?> iface : featuresinterfaces) {    if (!modifierispublic(ifacegetmodifiers())) {      return true    }  }  return false}multipleparentclassloaderbuilder loaderbuilder  new multipleparentclassloaderbuilder()                  appendmostspecific(getalltypes(featuresmockedtype))                  appendmostspecific(featuresinterfaces)                  appendmostspecific(mockaccessclass)classloader contextloader  currentthread()getcontextclassloader()boolean shouldincludecontextloader  trueif (needssamepackageclassloader(features)) {    // for the generated class to access package-private methods it must be defined by the    // same classloader as its type all the other added classloaders are required to load    // the type if the context classloader is a child of the mocked types defining    // classloader it will break a mock that would have worked check if the context class    // loader is a child of the classloader wed otherwise use and possibly skip it    classloader candidateloader  loaderbuilderbuild()    for (classloader parent  contextloader parent ! null parent  parentgetparent()) {      if (parent  candidateloader) {        shouldincludecontextloader  false        break      }    }}if (shouldincludecontextloader) {  loaderbuilder  loaderbuilderappendmostspecific(contextloader)}classloader classloader  loaderbuilderbuild()```the focus was on only changing behavior for cases that failed before since we verify that the classloader we define in is a parent of the context classloader we shouldnt see any problems with serialization right? or at least no new problems as the existing `multipleparentsclassloader` relies on `getparent()` to infer the delegation order || @charlesmunger do you mind opening a pr that includes your proposed fix and adds a regression test for your use case? if all tests pass i am inclined to merge as-is if we end up breaking anybody else we should add regression tests for their use cases and modify the implementation accordingly ||;1;0;rename helper method;
